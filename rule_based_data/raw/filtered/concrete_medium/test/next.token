@ java.lang.Override public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mGLView = new com.android.graphics.benchmark.example.MyGLSurfaceView ( this ) ; setContentView ( mGLView ) ; mHandler = new android.os.Handler () ; mTask = new java.lang.Runnable () { @ java.lang.Override public void run () { broadcastIntent () ; mHandler . postDelayed ( this , com.android.graphics.benchmark.example.SampleActivity.LOOP_PERIOD_MS ) ; } } ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testGetAllPhoneAccounts ( ) throws android.os.RemoteException { java.util.List < android.telecom.PhoneAccount > phoneAccountList = new java.util.ArrayList < android.telecom.PhoneAccount > () { { add ( makePhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) . build () ) ; add ( makePhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.SIP_PA_HANDLE_17 ) . build () ) ; } } ; org.mockito.Mockito . when ( mFakePhoneAccountRegistrar . getAllPhoneAccounts ( org.mockito.Matchers . any ( android.os.UserHandle . class ) ) ) . thenReturn ( phoneAccountList ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , mTSIBinder . getAllPhoneAccounts () . size () ) ; }
public java.lang.String getDisplayScript ( java.util.Locale locale ) { if ( scriptCode . isEmpty () ) { return STRING_CONSTANT ; } java.lang.String result = libcore.icu.ICU . getDisplayScript ( this , locale ) ; if ( result == null ) { result = libcore.icu.ICU . getDisplayScript ( this , java.util.Locale . getDefault () ) ; } return result ; }
private void enable () { com.android.cts.deviceowner.BluetoothRestrictionTest . sleep ( com.android.cts.deviceowner.BluetoothRestrictionTest.CHECK_WAIT_TIME_MS ) ; if ( ( mBluetoothAdapter . getState () ) == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { assertTrue ( mBluetoothAdapter . isEnabled () ) ; return; } assertEquals ( BluetoothAdapter.STATE_OFF , mBluetoothAdapter . getState () ) ; assertFalse ( mBluetoothAdapter . isEnabled () ) ; mBluetoothAdapter . enable () ; assertEnabledAfterTimeout () ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testReceiverAndIntentFilter () { org.mockito.ArgumentCaptor < android.content.IntentFilter > intentFilter = org.mockito.ArgumentCaptor . forClass ( android.content.IntentFilter . class ) ; new com.android.server.telecom.SystemStateProvider ( mContext ) ; org.mockito.Mockito . verify ( mContext ) . registerReceiver ( org.mockito.Matchers . any ( android.content.BroadcastReceiver . class ) , intentFilter . capture () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , intentFilter . getValue () . countActions () ) ; org.junit.Assert . assertEquals ( UiModeManager.ACTION_ENTER_CAR_MODE , intentFilter . getValue () . getAction ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( UiModeManager.ACTION_EXIT_CAR_MODE , intentFilter . getValue () . getAction ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public UResource.TableSink getOrCreateTableSink ( android.icu.impl.UResource.Key key ) { style = styleFromKey ( key ) ; int limit = ( key . length () ) - ( android.icu.text.RelativeDateTimeFormatter.RelDateTimeFmtDataSink . styleSuffixLength ( style ) ) ; java.lang.String unitString = key . substring ( NUMBER_CONSTANT , limit ) ; unit = android.icu.text.RelativeDateTimeFormatter.RelDateTimeFmtDataSink.DateTimeUnit . orNullFromString ( unitString ) ; if ( ( unit ) == null ) { return null ; } return unitSink ; }
public void setSkins ( @ com.android.annotations.NonNull java.io.File [] skins , @ com.android.annotations.NonNull java.io.File defaultSkin ) { mDefaultSkin = defaultSkin ; java.util.HashSet < java.io.File > skinSet = new java.util.HashSet < java.io.File > () ; skinSet . addAll ( java.util.Arrays . asList ( skins ) ) ; skinSet . addAll ( java.util.Arrays . asList ( mBasePlatform . getSkins () ) ) ; mSkins = skinSet . toArray ( new java.io.File [ skinSet . size () ] ) ; }
private void disable () { com.android.cts.deviceowner.BluetoothRestrictionTest . sleep ( com.android.cts.deviceowner.BluetoothRestrictionTest.CHECK_WAIT_TIME_MS ) ; if ( ( mBluetoothAdapter . getState () ) == ( android.bluetooth.BluetoothAdapter.STATE_OFF ) ) { assertFalse ( mBluetoothAdapter . isEnabled () ) ; return; } assertEquals ( BluetoothAdapter.STATE_ON , mBluetoothAdapter . getState () ) ; assertTrue ( mBluetoothAdapter . isEnabled () ) ; mBluetoothAdapter . disable () ; assertDisabledAfterTimeout () ; }
public void testNewInstance ( ) throws java.lang.Exception { java.security.Provider p = new org.apache.harmony.security.tests.java.security.ProviderServiceTest.MyProvider () ; java.security.Provider.Service s = new java.security.Provider.Service ( p , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , null , null ) ; java.lang.Object o = s . newInstance ( null ) ; assertTrue ( STRING_CONSTANT , ( o instanceof org.apache.harmony.security.tests.support.RandomImpl ) ) ; }
public void copyTo ( android.graphics.Bitmap b ) { try { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; mRS . validate () ; validateBitmapFormat ( b ) ; validateBitmapSize ( b ) ; mRS . nAllocationCopyToBitmap ( getID ( mRS ) , b ) ; } finally { android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; } }
@ java.lang.Override public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [] states ) { final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { return service . getDevicesMatchingConnectionStates ( states ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return new java.util.ArrayList <> () ; }
private boolean deleteDir ( java.io.File dir ) { java.lang.String [] children = dir . list () ; if ( children != null ) { for ( int i = NUMBER_CONSTANT ; i < ( children.length ) ; i ++ ) { boolean success = deleteDir ( new java.io.File ( dir , children [ i ] ) ) ; if ( ! success ) { return false ; } } } return dir . delete () ; }
@ java.lang.Override @ javax.annotation.Nonnull public java.lang.String getName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; sb . append ( CHAR_CONS ) ; for ( com.android.jack.ir.ast.JParameter p : method . getParams () ) { sb . append ( getName ( p . getType () ) ) ; } sb . append ( CHAR_CONS ) ; sb . append ( getName ( method . getType () ) ) ; return sb . toString () ; }
public void init ( android.content.Context context , com.android.incallui.Call call ) { mContext = com.google.common.base.Preconditions . checkNotNull ( context ) ; if ( call != null ) { mPrimary = call ; if ( ! ( call . isConferenceCall () ) ) { startContactInfoSearch ( call , true , ( ( call . getState () ) == ( Call.State.INCOMING ) ) ) ; } else { updateContactEntry ( null , true ) ; } } }
private void runInBatchModeImpl ( java.lang.String javaPkgName ) throws com.android.cts.DeviceDisconnectedException { mDevice . runInBatchMode ( this , javaPkgName ) ; synchronized ( mTimeOutTimer ) { if ( ! ( mTestStop ) ) { try { mTimeOutTimer . waitOn () ; } catch ( java.lang.InterruptedException e ) { com.android.cts.Log . d ( STRING_CONSTANT ) ; } } mProgressObserver . stop () ; if ( mTimeOutTimer . isTimeOut () ) { return; } else { mTimeOutTimer . cancel ( false ) ; } } }
public void run () { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_bug_char s = new com.android.rs.test.ScriptC_bug_char ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; initializeValues ( s ) ; s . invoke_bug_char_test () ; pRS . finish () ; waitForMessage () ; pRS . destroy () ; }
private synchronized void onApplicationStateChanged ( byte [] address , boolean registered ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( STRING_CONSTANT + registered ) ) ; } android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.hid.HidDevService.MESSAGE_APPLICATION_STATE_CHANGED ) ; msg.obj = address ; msg.arg1 = ( registered ) ? NUMBER_CONSTANT : NUMBER_CONSTANT ; mHandler . sendMessage ( msg ) ; }
public final void init ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { initialized = false ; javax.crypto.Cipher . checkOpmode ( opmode ) ; chooseProvider ( javax.crypto.Cipher.InitType.ALGORITHM_PARAM_SPEC , opmode , key , params , null , random ) ; initialized = true ; this . opmode = opmode ; }
static com.android.ide.common.res2.ResourceItem getResource ( @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.Nullable java.io.File from ) { com.android.resources.ResourceType type = com.android.ide.common.res2.ValueResourceParser2 . getType ( node , from ) ; java.lang.String name = com.android.ide.common.res2.ValueResourceParser2 . getName ( node ) ; if ( name != null ) { if ( type != null ) { return new com.android.ide.common.res2.ResourceItem ( name , type , node ) ; } } return null ; }
private static java.util.List < java.lang.String > getRefCompilerArguments ( com.android.jack.Options compilerArgs ) { java.util.List < java.lang.String > arguments = new java.util.ArrayList < java.lang.String > ( compilerArgs.ecjArguments ) ; if ( ( compilerArgs.classpath ) != null ) { arguments . add ( STRING_CONSTANT ) ; arguments . add ( compilerArgs.classpath . replace ( STRING_CONSTANT , STRING_CONSTANT ) ) ; } return arguments ; }
public static boolean install ( final org.eclipse.core.resources.IProject project ) { java.io.File jarPath = com.android.ide.eclipse.adt.internal.actions.AddCompatibilityJarAction . installSupport ( ( - NUMBER_CONSTANT ) ) ; if ( jarPath != null ) { try { return ( com.android.ide.eclipse.adt.internal.actions.AddCompatibilityJarAction . copyJarIntoProject ( project , jarPath ) ) != null ; } catch ( java.lang.Exception e ) { com.android.ide.eclipse.adt.AdtPlugin . log ( e , null ) ; } } return false ; }
@ java.lang.Override public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { org.eclipse.jdt.core.IJavaProject javaProject = mProjectChooser . chooseJavaProject ( null , STRING_CONSTANT ) ; if ( javaProject != null ) { org.eclipse.core.resources.IProject iProject = javaProject . getProject () ; org.eclipse.core.runtime.IPath relativePath = iProject . getLocation () . makeRelativeTo ( mState . getProject () . getLocation () ) ; addItem ( relativePath . toString () , iProject , ( - NUMBER_CONSTANT ) ) ; resetEnabled () ; mMustSave = true ; } }
@ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil . getApiLevel () ) == NUMBER_CONSTANT ) { return device . findObject ( new android.support.test.uiautomator.UiSelector () . description ( STRING_CONSTANT ) ) . exists () ; } else { return device . findObject ( new android.support.test.uiautomator.UiSelector () . text ( STRING_CONSTANT ) ) . exists () ; } }
@ java.lang.Override public E next () { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } prePosition = ( position ) ++ ; return type . get ( new java.util.EnumMap.Entry < KT , VT > ( enumMap.keys [ prePosition ] , enumMap.values [ prePosition ] , enumMap ) ) ; }
@ javax.annotation.Nonnull @ java.lang.Override public com.android.jack.ir.ast.JMethodId getOrCreateMethodId ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > argsType , @ javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind ) { try { return getMethodId ( name , argsType , kind ) ; } catch ( com.android.jack.lookup.JMethodLookupException e ) { synchronized ( phantomMethods ) { com.android.jack.ir.ast.JMethodId id = getPhantomMethod ( name , argsType , kind ) ; if ( id == null ) { id = new com.android.jack.ir.ast.JMethodId ( name , argsType , kind ) ; phantomMethods . add ( id ) ; } return id ; } } }
@ java.lang.Override public boolean setScanMode ( int mode , int duration ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . setScanMode ( mode , duration ) ; }
public E peek () { final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock . lock () ; try { return ( size ) == NUMBER_CONSTANT ? null : ( ( E ) ( queue [ NUMBER_CONSTANT ] ) ) ; } finally { lock . unlock () ; } }
public static int forkSystemServer ( int uid , int gid , int [] gids , int runtimeFlags , int [] [] rlimits , long permittedCapabilities , long effectiveCapabilities ) { com.android.internal.os.Zygote.VM_HOOKS . preFork () ; com.android.internal.os.Zygote . resetNicePriority () ; int pid = com.android.internal.os.Zygote . nativeForkSystemServer ( uid , gid , gids , runtimeFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == NUMBER_CONSTANT ) { android.os.Trace . setTracingEnabled ( true , runtimeFlags ) ; } com.android.internal.os.Zygote.VM_HOOKS . postForkCommon () ; return pid ; }
@ java.lang.Override public java.lang.String getColumnText ( java.lang.Object element , int columnIndex ) { if ( element instanceof com.android.tools.lint.detector.api.Category ) { if ( columnIndex == NUMBER_CONSTANT ) { return ( ( com.android.tools.lint.detector.api.Category ) ( element ) ) . getFullName () ; } else { return null ; } } com.android.tools.lint.detector.api.Issue issue = ( ( com.android.tools.lint.detector.api.Issue ) ( element ) ) ; switch ( columnIndex ) { case NUMBER_CONSTANT : return issue . getId () ; case NUMBER_CONSTANT : return issue . getDescription () ; } return null ; }
private boolean allIgnorable ( java.lang.String str ) { if ( ( str == null ) || ( ( str . length () ) == NUMBER_CONSTANT ) ) { return true ; } com.ibm.icu.text.RbnfLenientScanner scanner = formatter . getLenientScanner () ; return ( scanner != null ) && ( scanner . allIgnorable ( str ) ) ; }
@ java.lang.Override public void run ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator ) { indicator . setIndeterminate ( true ) ; if ( ! ( indicator instanceof com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ) { return; } ( ( com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ( indicator ) ) . addStateDelegate ( new com.intellij.openapi.progress.util.ProgressIndicatorBase () { @ java.lang.Override public void cancel () { assert ( uiFacade ) != null ; uiFacade . stop () ; super . cancel () ; } } ) ; loggedIn = state . logInWithLocalServer ( message ) ; }
@ java.lang.Override public boolean shouldRun ( org.junit.runner.Description description ) { if ( ( ( com.android.jack.java8.EcjLambdaTest.testWithApiUsage . contains ( description . getMethodName () ) ) || ( com.android.jack.java8.EcjLambdaTest.testWithOtherErrorMsg . contains ( description . getMethodName () ) ) ) || ( com.android.jack.java8.EcjLambdaTest.knownBugs . contains ( description . getMethodName () ) ) ) { return false ; } return true ; }
public void testMaxLengthName ( ) throws java.lang.Exception { java.lang.String maxLengthName = libcore.java.util.zip.ZipEntryTest . makeString ( NUMBER_CONSTANT , STRING_CONSTANT ) ; java.io.File f = createTemporaryZipFile () ; java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest . createZipOutputStream ( f ) ; out . putNextEntry ( new java.util.zip.ZipEntry ( maxLengthName ) ) ; out . closeEntry () ; out . close () ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( f ) ; assertNotNull ( zipFile . getEntry ( maxLengthName ) ) ; zipFile . close () ; }
@ java.lang.Override protected void abortOnBadSetup ( org.eclipse.jdt.core.IJavaProject javaProject ) throws com.android.ide.eclipse.adt.internal.build.builders.AbortBuildException { super . abortOnBadSetup ( javaProject ) ; org.eclipse.core.resources.IProject iProject = getProject () ; stopOnMarker ( iProject , AndroidConstants.MARKER_AAPT_COMPILE , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_AIDL , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_RENDERSCRIPT , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_ANDROID , IResource.DEPTH_ZERO , false ) ; stopOnMarker ( iProject , org.eclipse.jdt.core.IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER , IResource.DEPTH_INFINITE , true ) ; stopOnMarker ( iProject , org.eclipse.jdt.core.IJavaModelMarker.BUILDPATH_PROBLEM_MARKER , IResource.DEPTH_INFINITE , true ) ; }
synchronized void setDebugSelectedPort ( int port ) throws java.lang.IllegalStateException { if ( ( com.android.ddmlib.MonitorThread.sInstance ) == null ) { return; } if ( ! ( com.android.ddmlib.AndroidDebugBridge . getClientSupport () ) ) { return; } if ( ( mDebugSelectedChan ) != null ) { com.android.ddmlib.Log . d ( STRING_CONSTANT , ( STRING_CONSTANT + port ) ) ; mNewDebugSelectedPort = port ; wakeup () ; } else { mNewDebugSelectedPort = port ; } }
private boolean sample ( long timeStamp ) { if ( timeStamp == ( java.lang.Long.MAX_VALUE ) ) { return true ; } else if ( timeStamp < ( mLatestSeen ) ) { return false ; } else if ( timeStamp == ( mLatestSeen ) ) { return true ; } else { mElapsedTimes . add ( timeStamp ) ; mLatestSeen = timeStamp ; return false ; } }
@ java.lang.Override protected final void finalize ( ) throws java.lang.Throwable { try { if ( ( guard ) != null ) { org.conscrypt.Platform . closeGuardWarnIfOpen ( guard ) ; } synchronized ( ssl ) { transitionTo ( EngineStates.STATE_CLOSED ) ; } } finally { super . finalize () ; } }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , java.lang.String [] args ) { for ( vogar.target.RunnerFactory runnerFactory : runnerFactories ) { vogar.target.TargetRunner targetRunner = runnerFactory . newRunner ( monitor , qualification , klass , skipPastReference , testEnvironment , timeoutSeconds , args ) ; if ( targetRunner != null ) { return targetRunner ; } } return null ; }
private org.apache.harmony.dalvik.ddmc.Chunk handleMPSS ( org.apache.harmony.dalvik.ddmc.Chunk request ) { java.nio.ByteBuffer in = wrapChunk ( request ) ; int bufferSize = in . getInt () ; int flags = in . getInt () ; if ( false ) { android.util.Log . v ( STRING_CONSTANT , ( ( ( STRING_CONSTANT + bufferSize ) + STRING_CONSTANT ) + flags ) ) ; } try { android.os.Debug . startMethodTracingDdms ( bufferSize , flags , false , NUMBER_CONSTANT ) ; return null ; } catch ( java.lang.RuntimeException re ) { return createFailChunk ( NUMBER_CONSTANT , re . getMessage () ) ; } }
public static void main ( java.lang.String [] args ) { Main.holder = new char [ [] NUMBER_CONSTANT * NUMBER_CONSTANT ] [ ] ; if ( ! ( Main . triggerArrayOOM ( Main.holder ) ) ) { Main.holder = null ; java.lang.System.out . println ( STRING_CONSTANT ) ; } if ( ! ( Main . triggerInstanceFinalizerOOM () ) ) { Main.holder = null ; java.lang.System.out . println ( STRING_CONSTANT ) ; } Main.holder = null ; java.lang.System . runFinalization () ; }
private void expandBuffer () { int oldPosition = buffer . position () ; int oldCapacity = buffer . capacity () ; int oldLimit = buffer . limit () ; int newCapacity = oldCapacity * NUMBER_CONSTANT ; char [] newBuffer = new char [ newCapacity ] ; java.lang.System . arraycopy ( buffer . array () , NUMBER_CONSTANT , newBuffer , NUMBER_CONSTANT , oldLimit ) ; buffer = java.nio.CharBuffer . wrap ( newBuffer , NUMBER_CONSTANT , newCapacity ) ; buffer . position ( oldPosition ) ; buffer . limit ( oldLimit ) ; }
public void push ( final float value ) { int bits = java.lang.Float . floatToIntBits ( value ) ; if ( ( ( bits == NUMBER_CONSTANT ) || ( bits == NUMBER_CONSTANT ) ) || ( bits == NUMBER_CONSTANT ) ) { mv . visitInsn ( ( ( org.objectweb.asm.Opcodes.FCONST_0 ) + ( ( int ) ( value ) ) ) ) ; } else { mv . visitLdcInsn ( value ) ; } }
@ java.lang.Deprecated protected com.ibm.icu.util.UResourceBundle findTopLevel ( int index ) { for ( com.ibm.icu.util.UResourceBundle res = this ; res != null ; res = res . getParent () ) { com.ibm.icu.util.UResourceBundle obj = res . handleGet ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }
private void readOutstandingMessages () { org.chromium.mojo.system.ResultAnd < java.lang.Boolean > result ; do { try { result = org.chromium.mojo.bindings.Connector . readAndDispatchMessage ( mMessagePipeHandle , mIncomingMessageReceiver ) ; } catch ( org.chromium.mojo.system.MojoException e ) { onError ( e ) ; return; } } while ( result . getValue () ) ; if ( ( result . getMojoResult () ) != ( org.chromium.mojo.system.MojoResult.SHOULD_WAIT ) ) { onError ( new org.chromium.mojo.system.MojoException ( result . getMojoResult () ) ) ; } }
private void responseHardwareConfig ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.util.ArrayList < com.android.internal.telephony.V1_0.HardwareConfig > config ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { java.util.ArrayList < com.android.internal.telephony.HardwareConfig > ret = com.android.internal.telephony.RIL . convertHalHwConfigList ( config , mRil ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
@ javax.annotation.Nonnull private com.android.jill.frontend.java.Variable getLocalVariable ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , @ javax.annotation.Nonnegative int localIdx ) { org.objectweb.asm.tree.analysis.BasicValue bv = frame . getLocal ( localIdx ) ; assert bv != ( org.objectweb.asm.tree.analysis.BasicValue.UNINITIALIZED_VALUE ) ; com.android.jill.frontend.java.Variable v ; java.lang.String id = getUnnamedLocalId ( localIdx , bv . getType () ) ; java.lang.String localName = id ; org.objectweb.asm.Type localType = typeToUntyped ( bv . getType () ) ; v = getVariableWithLocalIndex ( localIdx , id , localName , localType , null ) ; return v ; }
private static java.lang.Class defineClass ( java.lang.String name , java.lang.ClassLoader loader , java.lang.Object cookie , java.util.List < java.lang.Throwable > suppressed ) { java.lang.Class result = null ; try { result = dalvik.system.DexFile . defineClassNative ( name , loader , cookie ) ; } catch ( java.lang.NoClassDefFoundError e ) { if ( suppressed != null ) { suppressed . add ( e ) ; } } catch ( java.lang.ClassNotFoundException e ) { if ( suppressed != null ) { suppressed . add ( e ) ; } } return result ; }
private void writeGoto ( int insIndex ) throws java.io.IOException { writeDebugBegin ( currentClass , currentLine ) ; writer . writeCatchBlockIds ( currentCatchList ) ; writer . writeKeyword ( Token.GOTO ) ; writer . writeOpen () ; writer . writeId ( java.lang.Integer . toString ( insIndex ) ) ; writeDebugEnd ( currentClass , currentLine ) ; writer . writeClose () ; }
private void multiLaunch ( com.android.ide.eclipse.adt.internal.launch.DelayedLaunchInfo launchInfo , java.util.Collection < com.android.ddmlib.IDevice > devices ) { for ( com.android.ddmlib.IDevice d : devices ) { boolean success = doPreLaunchActions ( launchInfo , d ) ; if ( ! success ) { java.lang.String deviceName = ( d . isEmulator () ) ? d . getAvdName () : d . getSerialNumber () ; com.android.ide.eclipse.adt.AdtPlugin . printErrorToConsole ( launchInfo . getProject () , ( STRING_CONSTANT + deviceName ) ) ; continue; } } doLaunchAction ( launchInfo , devices ) ; stopLaunch ( launchInfo ) ; }
@ org.junit.Test public void TestNames () { com.ibm.icu.util.ULocale en = com.ibm.icu.util.ULocale.ENGLISH ; boolean [] isChoiceFormat = new boolean [ NUMBER_CONSTANT ] ; com.ibm.icu.util.Currency usd = com.ibm.icu.util.Currency . getInstance ( STRING_CONSTANT ) ; assertEquals ( STRING_CONSTANT , STRING_CONSTANT , usd . getName ( en , Currency.SYMBOL_NAME , isChoiceFormat ) ) ; assertEquals ( STRING_CONSTANT , STRING_CONSTANT , usd . getName ( en , Currency.LONG_NAME , isChoiceFormat ) ) ; }
private java.lang.String verifyMeasurements ( float . . . expectations ) throws java.lang.Throwable { java.lang.Thread . sleep ( NUMBER_CONSTANT ) ; android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment ( getApplicationContext () , android.hardware.Sensor.TYPE_ACCELEROMETER , android.hardware.SensorManager.SENSOR_DELAY_FASTEST ) ; android.hardware.cts.helpers.sensoroperations.TestSensorOperation verifyMeasurements = android.hardware.cts.helpers.sensoroperations.TestSensorOperation . createOperation ( environment , NUMBER_CONSTANT ) ; verifyMeasurements . addVerification ( new android.hardware.cts.helpers.sensorverification.MeanVerification ( expectations , new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } , new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ) ) ; verifyMeasurements . execute ( getCurrentTestNode () ) ; return null ; }
@ org.junit.Test public void externalScoreEvaluator_nullScores () { com.android.server.wifi.WifiQualifiedNetworkSelector.ExternalScoreEvaluator evaluator = new com.android.server.wifi.WifiQualifiedNetworkSelector.ExternalScoreEvaluator ( mLocalLog , true ) ; evaluator . evalUntrustedCandidate ( null , new android.net.wifi.ScanResult () ) ; assertEquals ( WifiQualifiedNetworkSelector.ExternalScoreEvaluator.BestCandidateType.NONE , evaluator . getBestCandidateType () ) ; evaluator . evalSavedCandidate ( null , new android.net.wifi.WifiConfiguration () , new android.net.wifi.ScanResult () ) ; assertEquals ( WifiQualifiedNetworkSelector.ExternalScoreEvaluator.BestCandidateType.NONE , evaluator . getBestCandidateType () ) ; }
@ java.lang.Override public void run ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator ) { indicator . setIndeterminate ( true ) ; if ( ! ( indicator instanceof com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ) { return; } ( ( com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ( indicator ) ) . addStateDelegate ( new com.intellij.openapi.progress.util.ProgressIndicatorBase () { @ java.lang.Override public void cancel () { assert ( uiFacade ) != null ; uiFacade . stop () ; super . cancel () ; } } ) ; loggedIn = ( state != null ) && ( state . logInWithLocalServer ( message ) ) ; }
private void createDocumentRoot ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleElement [] elements ) { if ( ( ( elements == null ) || ( ( elements.length ) < NUMBER_CONSTANT ) ) || ( ( elements [ NUMBER_CONSTANT ] ) == null ) ) { return; } mCanvas . createDocumentRoot ( elements [ NUMBER_CONSTANT ] ) ; }
void addEntry ( int hash , K key , V value , int bucketIndex ) { super . addEntry ( hash , key , value , bucketIndex ) ; java.util.LinkedHashMap.LinkedHashMapEntry < K , V > eldest = header.after ; if ( removeEldestEntry ( eldest ) ) { removeEntryForKey ( eldest.key ) ; } }
@ java.lang.Override public com.android.ide.common.resources.configuration.FolderConfiguration getConfiguration () { assert ( getSource () ) != null : this ; java.lang.String qualifier = getQualifiers () ; if ( qualifier . isEmpty () ) { return new com.android.ide.common.resources.configuration.FolderConfiguration () ; } return com.android.ide.common.resources.configuration.FolderConfiguration . getConfigFromQualifiers ( com.google.common.base.Splitter . on ( CHAR_CONS ) . split ( qualifier ) ) ; }
private java.lang.String describe ( java.lang.String message ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; if ( message != null ) { if ( ( sb . length () ) > NUMBER_CONSTANT ) { sb . append ( STRING_CONSTANT ) ; } sb . append ( message ) ; } return sb . toString () ; }
@ java.lang.Override @ com.android.annotations.NonNull public java.util.List < com.android.builder.dependency.JarDependency > getLocalDependencies () { java.util.List < java.io.File > jars = getLocalJars () ; java.util.List < com.android.builder.dependency.JarDependency > localDependencies = com.google.common.collect.Lists . newArrayListWithCapacity ( jars . size () ) ; for ( java.io.File jar : jars ) { localDependencies . add ( new com.android.builder.dependency.JarDependency ( jar , true , true , null ) ) ; } return localDependencies ; }
@ java.lang.Override public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.map.BluetoothMapService service = getService () ; return ( ( service != null ) && ( ( service . getState () ) == ( android.bluetooth.BluetoothMap.STATE_CONNECTED ) ) ) && ( com.android.bluetooth.map.BluetoothMapService . getRemoteDevice () . equals ( device ) ) ; }
public boolean enterIfInterruptibly ( com.google.common.util.concurrent.Monitor.Guard guard , long time , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException () ; } final java.util.concurrent.locks.ReentrantLock lock = this . lock ; if ( ! ( lock . tryLock ( time , unit ) ) ) { return false ; } boolean satisfied = false ; try { return satisfied = guard . isSatisfied () ; } finally { if ( ! satisfied ) { lock . unlock () ; } } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ! ( obj instanceof sun.security.x509.OIDName ) ) return false ; sun.security.x509.OIDName other = ( ( sun.security.x509.OIDName ) ( obj ) ) ; return oid . equals ( ( ( java.lang.Object ) ( other.oid ) ) ) ; }
@ javax.annotation.Nonnull public com.android.jack.server.VersionFinder parseVersionFinder ( @ javax.annotation.Nonnull org.simpleframework.http.ContentType versionType , @ javax.annotation.Nonnull java.lang.String versionString ) throws com.android.jack.server.TypeNotSupportedException , com.android.sched.util.codec.ParsingException { if ( ( versionType . getType () . equals ( ExactCodeVersionFinder.SELECT_EXACT_VERSION_CONTENT_TYPE ) ) && ( STRING_CONSTANT . equals ( versionType . getParameter ( STRING_CONSTANT ) ) ) ) { return com.android.jack.server.type.ExactCodeVersionFinder . parse ( versionString ) ; } else { throw new com.android.jack.server.TypeNotSupportedException ( versionString ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( obj != null ) && ( obj instanceof java.lang.reflect.Constructor ) ) { java.lang.reflect.Constructor < > other = ( ( java.lang.reflect.Constructor < > ) ( obj ) ) ; if ( ( getDeclaringClass () ) == ( other . getDeclaringClass () ) ) { return equalParamTypes ( getParameterTypes () , other . getParameterTypes () ) ; } } return false ; }
public void test_SSL_get_servername_null ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_get_servername ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_new () ; int s = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_new ( c ) ; assertNull ( org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_get_servername ( s ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_free ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_free ( c ) ; }
private void addTestCase ( com.android.cts.verifier.ArrayTestListAdapter adapter , com.android.cts.verifier.p2p.testcase.TestCase testcase ) { android.content.Intent intent = new android.content.Intent ( this , getRequesterActivityClass () ) ; intent . putExtra ( TestCase.EXTRA_TEST_NAME , testcase . getTestId () ) ; adapter . add ( com.android.cts.verifier.TestListAdapter.TestListItem . newTest ( testcase . getTestName () , testcase . getTestId () , intent , null ) ) ; }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { super . setUp () ; mHasFeature = ( mHasFeature ) && ( hasDeviceFeature ( STRING_CONSTANT ) ) ; if ( mHasFeature ) { mUserId = createManagedProfile () ; installApp ( com.android.cts.devicepolicy.ManagedProfileTest.MANAGED_PROFILE_APK ) ; setProfileOwner ( ( ( ( com.android.cts.devicepolicy.ManagedProfileTest.MANAGED_PROFILE_PKG ) + STRING_CONSTANT ) + ( com.android.cts.devicepolicy.ManagedProfileTest.ADMIN_RECEIVER_TEST_CLASS ) ) , mUserId ) ; startUser ( mUserId ) ; } }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log . v ( com.android.bluetooth.pbapclient.PbapClientService.TAG , STRING_CONSTANT ) ; java.lang.String action = intent . getAction () ; if ( action . equals ( BluetoothDevice.ACTION_ACL_DISCONNECTED ) ) { android.bluetooth.BluetoothDevice device = intent . getParcelableExtra ( BluetoothDevice.EXTRA_DEVICE ) ; disconnect ( device ) ; } }
public void test_shutdownInputOutput_twice ( ) throws java.lang.Exception { try ( java.net.Socket s = new java.net.Socket ( STRING_CONSTANT , NUMBER_CONSTANT , false ) ) { s . shutdownInput () ; try { s . shutdownInput () ; fail ( STRING_CONSTANT ) ; } catch ( java.net.SocketException se ) {} s . shutdownOutput () ; try { s . shutdownOutput () ; fail ( STRING_CONSTANT ) ; } catch ( java.net.SocketException se ) {} } }
@ java.lang.Override protected void postInstall ( android.content.Context context , android.content.Intent intent ) { try { unpackBundle () ; applyUpdate () ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Slog . e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , STRING_CONSTANT , e ) ; } catch ( java.io.IOException e ) { android.util.Slog . e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , STRING_CONSTANT , e ) ; } catch ( libcore.io.ErrnoException e ) { android.util.Slog . e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , STRING_CONSTANT , e ) ; } }
@ org.junit.Test public void recommendation_noScans_returnsCurrentConfig ( ) throws java.lang.Exception { android.net.wifi.ScanResult [] scanResults = new android.net.wifi.ScanResult [ NUMBER_CONSTANT ] ; android.net.wifi.WifiConfiguration expectedConfig = new android.net.wifi.WifiConfiguration () ; android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder () . setScanResults ( scanResults ) . setNetworkCapabilities ( new android.net.NetworkCapabilities () . removeCapability ( NetworkCapabilities.NET_CAPABILITY_TRUSTED ) ) . setCurrentRecommendedWifiConfig ( expectedConfig ) . build () ; android.net.RecommendationResult result = verifyAndCaptureResult ( request ) ; org.junit.Assert . assertEquals ( request . getCurrentSelectedConfig () , result . getWifiConfiguration () ) ; }
public boolean isMoreStableThan ( @ javax.annotation.Nonnull com.android.sched.util.SubReleaseKind other ) throws com.android.sched.util.UncomparableSubReleaseKind { if ( ( ( ( this ) == ( com.android.sched.util.SubReleaseKind.ENGINEERING ) ) && ( other != ( com.android.sched.util.SubReleaseKind.ENGINEERING ) ) ) || ( ( ( this ) != ( com.android.sched.util.SubReleaseKind.ENGINEERING ) ) && ( other == ( com.android.sched.util.SubReleaseKind.ENGINEERING ) ) ) ) { throw new com.android.sched.util.UncomparableSubReleaseKind ( ( ( ( this . toString () ) + STRING_CONSTANT ) + ( other . toString () ) ) ) ; } return ( ordinal () ) > ( other . ordinal () ) ; }
@ java.lang.Override public void run () { for ( com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actionsMap . get ( action . getId () ) ) { if ( a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action ) { mRulesEngine . callClosure ( ( ( com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action ) ( a2 ) ) . getAction () , action , key , ( ! isChecked ) ) ; } } }
@ java.lang.Override public void dump ( java.io.FileDescriptor fd , java.lang.String [] args ) { java.io.PrintWriter writer = new java.io.PrintWriter ( new java.io.FileOutputStream ( fd ) ) ; com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return; } service . dump ( fd , writer , args ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { com.android.jack.Options jackArgs = com.android.jack.TestTools . buildCommandLineArgs ( com.android.jack.TestTools . getJackTestFromBinaryName ( com.android.jack.frontend.FieldModifierTest.FIELD_MODIFIER_BINARY_NAME ) ) ; jackArgs . addProperty ( Options.METHOD_FILTER . getName () , STRING_CONSTANT ) ; session = com.android.jack.TestTools . buildSession ( jackArgs ) ; junit.framework.Assert . assertNotNull ( session ) ; }
public com.android.jack.dx.dex.file.StringIdItem intern ( com.android.jack.dx.dex.file.StringIdItem string ) { assert string != null ; throwIfPrepared () ; com.android.jack.dx.rop.cst.CstString value = string . getValue () ; com.android.jack.dx.dex.file.StringIdItem already = strings . get ( value ) ; if ( already != null ) { return already ; } strings . put ( value , string ) ; return string ; }
@ java.lang.Override public java.io.File getInstallFolder ( java.lang.String osSdkRoot , com.android.sdklib.SdkManager sdkManager ) { for ( com.android.sdklib.IAndroidTarget target : sdkManager . getTargets () ) { if ( ( target . isPlatform () ) && ( target . getVersion () . equals ( mVersion ) ) ) { return new java.io.File ( target . getLocation () ) ; } } java.io.File platforms = new java.io.File ( osSdkRoot , com.android.sdklib.SdkConstants.FD_PLATFORMS ) ; java.io.File folder = new java.io.File ( platforms , java.lang.String . format ( STRING_CONSTANT , getVersion () . getApiString () ) ) ; return folder ; }
public static java.lang.String pii ( java.lang.Object pii ) { if ( ( pii == null ) || ( android.telecom.Log.VERBOSE ) ) { return java.lang.String . valueOf ( pii ) ; } return ( STRING_CONSTANT + ( android.telecom.Log . secureHash ( java.lang.String . valueOf ( pii ) . getBytes () ) ) ) + STRING_CONSTANT ; }
@ java.lang.Override public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( ( mEnforcingState ) != null ) && ( ! ( mEnforcingState . equals ( com.android.tradefed.targetprep.VtsCoveragePreparer.SELINUX_DISABLED ) ) ) ) { device . executeShellCommand ( ( STRING_CONSTANT + ( mEnforcingState ) ) ) ; } if ( ( mDeviceInfoPath ) != null ) { com.android.tradefed.util.FileUtil . recursiveDelete ( mDeviceInfoPath ) ; device . executeShellCommand ( ( STRING_CONSTANT + ( com.android.tradefed.targetprep.VtsCoveragePreparer.COVERAGE_CONFIGURE_DST ) ) ) ; } device . executeShellCommand ( STRING_CONSTANT ) ; }
@ com.android.annotations.NonNull public java.util.List < java.io.File > getAidlSourceList () { java.util.List < java.io.File > sourceList = com.google.common.collect.Lists . newArrayList () ; sourceList . addAll ( mDefaultSourceProvider . getAidlDirectories () ) ; if ( ( ( mType ) != ( com.android.builder.VariantConfiguration.Type.TEST ) ) && ( ( mBuildTypeSourceProvider ) != null ) ) { sourceList . addAll ( mBuildTypeSourceProvider . getAidlDirectories () ) ; } if ( hasFlavors () ) { for ( com.android.builder.model.SourceProvider flavorSourceSet : mFlavorSourceProviders ) { sourceList . addAll ( flavorSourceSet . getAidlDirectories () ) ; } } return sourceList ; }
@ com.android.internal.annotations.GuardedBy ( value = STRING_CONSTANT ) private void loadAlwaysOnPackage () { final long token = android.os.Binder . clearCallingIdentity () ; try { final java.lang.String alwaysOnPackage = mSystemServices . settingsSecureGetStringForUser ( Settings.Secure.ALWAYS_ON_VPN_APP , mUserHandle ) ; final boolean alwaysOnLockdown = ( mSystemServices . settingsSecureGetIntForUser ( Settings.Secure.ALWAYS_ON_VPN_LOCKDOWN , NUMBER_CONSTANT , mUserHandle ) ) != NUMBER_CONSTANT ; setAlwaysOnPackageInternal ( alwaysOnPackage , alwaysOnLockdown ) ; } finally { android.os.Binder . restoreCallingIdentity ( token ) ; } }
public void testSaveProperties ( ) throws java.lang.Exception { java.util.Properties expected = createExpectedProps () ; java.lang.Package p = new com.android.sdklib.internal.repository.packages.PackageTest.MockPackage ( null , expected , ( - NUMBER_CONSTANT ) , null , null , null , com.android.sdklib.internal.repository.packages.PackageTest.LOCAL_ARCHIVE_PATH ) ; java.util.Properties actual = new java.util.Properties () ; p . saveProperties ( actual ) ; assertEquals ( expected , actual ) ; }
@ java.lang.Override protected int compareTo0 ( com.android.jack.dx.rop.cst.Constant other ) { com.android.jack.dx.rop.cst.CstMemberRef otherMember = ( ( com.android.jack.dx.rop.cst.CstMemberRef ) ( other ) ) ; int cmp = definingClass . compareTo ( otherMember.definingClass ) ; if ( cmp != NUMBER_CONSTANT ) { return cmp ; } return name . compareTo ( otherMember.name ) ; }
@ java.lang.Override protected final int next ( int numBits ) { int numBytes = ( numBits + NUMBER_CONSTANT ) / NUMBER_CONSTANT ; byte [] b = new byte [ numBytes ] ; int next = NUMBER_CONSTANT ; nextBytes ( b ) ; for ( int i = NUMBER_CONSTANT ; i < numBytes ; i ++ ) { next = ( next < < NUMBER_CONSTANT ) + ( ( b [ i ] ) & NUMBER_CONSTANT ) ; } return next > > > ( ( numBytes * NUMBER_CONSTANT ) - numBits ) ; }
public E pollFirst () { int h = head ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) E result = ( ( E ) ( elements [ h ] ) ) ; if ( result == null ) return null ; elements [ h ] = null ; head = ( h + NUMBER_CONSTANT ) & ( ( elements.length ) - NUMBER_CONSTANT ) ; return result ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent . getAction () ; if ( com.android.internal.telephony.CarrierSignalAgent.DBG ) log ( ( STRING_CONSTANT + action ) ) ; if ( action . equals ( CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED ) ) { if ( ( ( mPhone . getIccCard () ) != null ) && ( ( IccCardConstants.State.ABSENT ) == ( mPhone . getIccCard () . getState () ) ) ) { notifyCarrierSignalReceivers ( new android.content.Intent ( TelephonyIntents.ACTION_CARRIER_SIGNAL_RESET ) ) ; } loadCarrierConfig () ; } }
public boolean disconnectMap ( android.bluetooth.BluetoothDevice device ) { boolean result = false ; if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; if ( ( ( com.android.bluetooth.map.BluetoothMapService . getRemoteDevice () ) != null ) && ( com.android.bluetooth.map.BluetoothMapService . getRemoteDevice () . equals ( device ) ) ) { switch ( mState ) { case android.bluetooth.BluetoothMap.STATE_CONNECTED : stopObexServerSessions ( ( - NUMBER_CONSTANT ) ) ; result = true ; break; default: break; } } return result ; }
@ com.android.internal.annotations.VisibleForTesting public static boolean equals ( android.net.IpSecAlgorithm lhs , android.net.IpSecAlgorithm rhs ) { if ( ( lhs == null ) || ( rhs == null ) ) return lhs == rhs ; return ( ( lhs.mName . equals ( rhs.mName ) ) && ( java.util.Arrays . equals ( lhs.mKey , rhs.mKey ) ) ) && ( ( lhs.mTruncLenBits ) == ( rhs.mTruncLenBits ) ) ; }
@ android.support.test.filters.FlakyTest @ org.junit.Test public void testWakeLockTimeout ( ) throws java.lang.Exception { invokeMethod ( mRILInstance , STRING_CONSTANT , new java.lang.Class < > [] { java.lang.Integer.TYPE , android.os.Message . class , android.os.WorkSource . class } , new java.lang.Object [] { com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SIM_STATUS , obtainMessage () , null } ) ; junit.framework.Assert . assertTrue ( mRILInstance . getWakeLock ( RIL.FOR_WAKELOCK ) . isHeld () ) ; waitForHandlerActionDelayed ( mRilHandler , NUMBER_CONSTANT , com.android.internal.telephony.RILTest.DEFAULT_WAKE_LOCK_TIMEOUT_MS ) ; junit.framework.Assert . assertFalse ( mRILInstance . getWakeLock ( RIL.FOR_WAKELOCK ) . isHeld () ) ; }
public static void runJillToZip ( @ javax.annotation.Nonnull java.io.File inputFile , @ javax.annotation.Nonnull java.io.File outputFile ) throws java.lang.Exception { java.lang.String [] args = new java.lang.String [] { STRING_CONSTANT , outputFile . getAbsolutePath () , inputFile . getAbsolutePath () } ; com.android.jill.Options options = com.android.jill.Main . getOptions ( args ) ; new com.android.jill.Jill ( options , STRING_CONSTANT ) . process ( options . getBinaryFile () ) ; }
private void handleGroupCreationFailure () { resetWifiP2pInfo () ; mNetworkInfo . setDetailedState ( NetworkInfo.DetailedState.FAILED , null , null ) ; sendP2pConnectionChangedBroadcast () ; boolean peersChanged = mPeers . remove ( mPeersLostDuringConnection ) ; if ( ( ! ( android.text.TextUtils . isEmpty ( mSavedPeerConfig.deviceAddress ) ) ) && ( ( mPeers . remove ( mSavedPeerConfig.deviceAddress ) ) != null ) ) { peersChanged = true ; } if ( peersChanged ) { sendPeersChangedBroadcast () ; } mPeersLostDuringConnection . clear () ; mServiceDiscReqId = null ; sendMessage ( WifiP2pManager.DISCOVER_PEERS ) ; }
private void updateRouteForForegroundCall () { mAvailableRoutes = ( mDeviceSupportedRoutes ) & ( getCurrentCallSupportedRoutes () ) ; android.telecom.CallAudioState currentState = getCurrentCallAudioState () ; if ( ( ( mAvailableRoutes ) & ( currentState . getRoute () ) ) == NUMBER_CONSTANT ) { sendInternalMessage ( calculateBaselineRouteMessage ( false , true ) ) ; } }
@ org.junit.Test public void TestCheckFrozen () { android.icu.text.DateTimePatternGenerator dt = android.icu.text.DateTimePatternGenerator . getInstance () ; try { dt . freeze () ; dt . setDateTimeFormat ( STRING_CONSTANT ) ; errln ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; } catch ( java.lang.Exception e ) {} dt = dt . cloneAsThawed () ; }
public int createMapMasRecord ( java.lang.String serviceName , int masId , int rfcommChannel , int l2capPsm , int version , int msgTypes , int features ) { if ( ! ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + STRING_CONSTANT ) ) ; } return sdpCreateMapMasRecordNative ( serviceName , masId , rfcommChannel , l2capPsm , version , msgTypes , features ) ; }
public void fitWindow () { if ( ( myWindow ) == null ) { return; } myAllScreenshotsPanel . updateUI () ; myWindow . pack () ; int maxHeight = NUMBER_CONSTANT ; for ( com.google.gct.testing.ScreenshotComparisonPanel panel : screenshotPanels ) { if ( ( panel . getPanel () . getHeight () ) > maxHeight ) { maxHeight = panel . getPanel () . getHeight () ; } } addScreenshotPanel . setHeight ( maxHeight ) ; myAllScreenshotsPanel . updateUI () ; myWindow . pack () ; }
@ java.lang.Override public boolean visitImportDeclaration ( lombok.ast.ImportDeclaration node ) { java.lang.String fqn = node . asFullyQualifiedName () ; if ( fqn . equals ( STRING_CONSTANT ) ) { com.android.tools.lint.detector.api.Location location = mContext . getLocation ( node ) ; mContext . report ( com.android.tools.lint.checks.WrongImportDetector.ISSUE , node , location , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } return false ; }
@ org.junit.BeforeClass public static void setUpClass ( ) throws com.android.jack.IllegalOptionsException , com.android.sched.util.config.ConfigurationException { com.android.jack.Options options = new com.android.jack.Options () ; com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks () ; options . checkValidity ( hooks ) ; options . getConfigBuilder ( hooks ) . setDebug () ; com.android.sched.util.config.ThreadConfig . setConfig ( options . getConfig () ) ; }
public void visitTableSwitchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.TableSwitchInstruction tableSwitchInstruction ) { tableSwitchInstruction.defaultOffset = newBranchOffset ( offset , tableSwitchInstruction.defaultOffset , newOffset ) ; newJumpOffsets ( offset , tableSwitchInstruction.jumpOffsets , newOffset ) ; instructionWriter . visitTableSwitchInstruction ( clazz , method , codeAttribute , newOffset , tableSwitchInstruction ) ; newOffset += tableSwitchInstruction . length ( newOffset ) ; }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_script s = new com.android.rs.test.ScriptC_single_source_script ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s . invoke_entrypoint ( testAllocation1 , testAllocation2 ) ; s . forEach_oldFoo ( testAllocation2 , testAllocation2 ) ; s . forEach_oldGoo ( testAllocation2 , testAllocation2 ) ; s . invoke_validate ( testAllocation2 ) ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; }
@ java.lang.Override public void ensureAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField loaded ) { synchronized ( this ) { if ( isAnnotationsLoaded ) { return; } com.android.jack.jayce.FieldNode node ; try { node = getNNode () ; node . loadAnnotations ( loaded , this ) ; } catch ( com.android.jack.LibraryException e ) { throw new com.android.jack.load.JackLoadingException ( getLocation ( loaded ) , e ) ; } isAnnotationsLoaded = true ; } }
protected void engineInit ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( ( params != null ) && ( ! ( params instanceof org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec ) ) ) { throw new java.security.InvalidAlgorithmParameterException ( STRING_CONSTANT ) ; } initFromKey ( key , params ) ; }
@ java.lang.Override public synchronized void run ( com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { if ( ( declaredType . getSourceInfo () ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return; } com.android.jack.Jack . getSession () . getFileDependencies () . addMappingBetweenJavaFileAndType ( declaredType . getSourceInfo () . getFileName () , declaredType ) ; }
@ java.lang.Override public void run () { try { android.os.Looper . prepare () ; mLooper = android.os.Looper . myLooper () ; mHandler = new android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlCompositor.CompositionHandler () ; initGl () ; mStartCompletionSemaphore . release () ; android.os.Looper . loop () ; } catch ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlException e ) { e . printStackTrace () ; fail ( STRING_CONSTANT ) ; } finally { cleanupGl () ; mHandler = null ; mLooper = null ; } }
private static void onSubscribeTerminated ( int subscribeId , int status ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log . v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( STRING_CONSTANT + subscribeId ) + STRING_CONSTANT ) + status ) ) ; } com.android.server.wifi.aware.WifiAwareNative.sWifiAwareStateManager . onSessionTerminatedNotification ( subscribeId , status , false ) ; }
private void expandNode ( com.android.traceview.MethodData md ) { com.android.traceview.ProfileNode [] nodes = md . getProfileNodes () ; mTreeViewer . setExpandedState ( md , true ) ; if ( nodes != null ) { for ( com.android.traceview.ProfileNode node : nodes ) { if ( ( node . isRecursive () ) == false ) mTreeViewer . setExpandedState ( node , true ) ; } } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testProcessChldHoldActiveRinging ( ) throws java.lang.Exception { com.android.server.telecom.Call ringingCall = createRingingCall () ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_HOLDACTIVE_ACCEPTHELD ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . answerCall ( org.mockito.Matchers . eq ( ringingCall ) , org.mockito.Matchers . any ( int . class ) ) ; org.junit.Assert . assertEquals ( didProcess , true ) ; }
private void doBadPublishConfiguration ( java.lang.String serviceName , byte [] ssi , byte [] matchFilter ) throws java.lang.IllegalArgumentException { android.net.wifi.aware.PublishConfig publishConfig = new android.net.wifi.aware.PublishConfig ( serviceName . getBytes () , ssi , matchFilter , android.net.wifi.aware.PublishConfig.PUBLISH_TYPE_UNSOLICITED , NUMBER_CONSTANT , true ) ; int clientId = doConnect () ; android.net.wifi.aware.IWifiAwareDiscoverySessionCallback mockCallback = org.mockito.Mockito . mock ( android.net.wifi.aware.IWifiAwareDiscoverySessionCallback . class ) ; mDut . publish ( clientId , publishConfig , mockCallback ) ; org.mockito.Mockito . verify ( mAwareStateManagerMock ) . publish ( clientId , publishConfig , mockCallback ) ; }
public void rejectCall ( com.android.internal.telephony.Call ringingCall ) throws com.android.internal.telephony.CallStateException { if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , ( ( STRING_CONSTANT + ringingCall ) + STRING_CONSTANT ) ) ; android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , toString () ) ; } com.android.internal.telephony.Phone ringingPhone = ringingCall . getPhone () ; ringingPhone . rejectCall () ; if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , ( ( STRING_CONSTANT + ringingCall ) + STRING_CONSTANT ) ) ; android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , toString () ) ; } }
@ java.lang.Override public java.util.List < android.telephony.ClientRequestStats > getClientRequestStats ( java.lang.String callingPackage , int subId ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone . getClientRequestStats () ; } return null ; }
private void checkEncryptedAndStartProvisioningService () { if ( ( com.android.managedprovisioning.EncryptDeviceActivity . isDeviceEncrypted () ) || ( android.os.SystemProperties . getBoolean ( STRING_CONSTANT , false ) ) ) { com.android.managedprovisioning.UserConsentDialog . newInstance ( UserConsentDialog.PROFILE_OWNER , false ) . show ( getFragmentManager () , STRING_CONSTANT ) ; } else { android.os.Bundle resumeExtras = getIntent () . getExtras () ; resumeExtras . putString ( com.android.managedprovisioning.EncryptDeviceActivity.EXTRA_RESUME_TARGET , com.android.managedprovisioning.EncryptDeviceActivity.TARGET_PROFILE_OWNER ) ; android.content.Intent encryptIntent = new android.content.Intent ( this , com.android.managedprovisioning.EncryptDeviceActivity . class ) . putExtra ( com.android.managedprovisioning.EncryptDeviceActivity.EXTRA_RESUME , resumeExtras ) ; startActivityForResult ( encryptIntent , com.android.managedprovisioning.ProfileOwnerPreProvisioningActivity.ENCRYPT_DEVICE_REQUEST_CODE ) ; } }
@ java.lang.Override public void visitMethod ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.Nullable lombok.ast.AstVisitor visitor , @ com.android.annotations.NonNull lombok.ast.MethodInvocation node ) { if ( ( ( node . astArguments () . size () ) == NUMBER_CONSTANT ) && ( ! ( node . astArguments () . first () . toString () . equals ( STRING_CONSTANT ) ) ) ) { context . report ( com.android.tools.lint.checks.SetJavaScriptEnabledDetector.ISSUE , node , context . getLocation ( node ) , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } }
public static java.lang.String getCallbackName ( int whichCallback ) { switch ( whichCallback ) { case android.net.ConnectivityManager.CALLBACK_PRECHECK : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_AVAILABLE : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_LOSING : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_LOST : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_UNAVAIL : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : return STRING_CONSTANT ; case android.net.ConnectivityManager.EXPIRE_LEGACY_REQUEST : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_SUSPENDED : return STRING_CONSTANT ; case android.net.ConnectivityManager.CALLBACK_RESUMED : return STRING_CONSTANT ; default: return java.lang.Integer . toString ( whichCallback ) ; } }
public void test_unblock_Exception ( ) throws java.lang.Exception { setup ( false ) ; try { key . unblock ( sourceAddress ) ; fail () ; } catch ( java.lang.IllegalStateException expected ) {} key . drop () ; try { key . unblock ( sourceAddress ) ; fail () ; } catch ( java.lang.IllegalStateException expected ) {} }
private void install ( java.security.cert.X509Certificate x , java.lang.String alias ) { try { java.io.File file = file ( alias ) ; file . getParentFile () . mkdirs () ; java.io.OutputStream out = new java.io.FileOutputStream ( file ) ; out . write ( x . getEncoded () ) ; out . close () ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } }
@ org.junit.Test public void recommendation_noScans_noCurrentConfig_returnsEmpty ( ) throws java.lang.Exception { android.net.wifi.ScanResult [] scanResults = new android.net.wifi.ScanResult [ NUMBER_CONSTANT ] ; android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder () . setScanResults ( scanResults ) . build () ; android.net.RecommendationResult result = verifyAndCaptureResult ( request ) ; org.junit.Assert . assertNull ( result . getWifiConfiguration () ) ; }
private com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo findViewInfoKey ( java.lang.Object viewKey , com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo canvasViewInfo ) { if ( canvasViewInfo == null ) { return null ; } if ( ( canvasViewInfo . getUiViewKey () ) == viewKey ) { return canvasViewInfo ; } for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child : canvasViewInfo . getChildren () ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo v = findViewInfoKey ( viewKey , child ) ; if ( v != null ) { return v ; } } return null ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testCallMethodOnCreatedFeature ( ) throws android.os.RemoteException { mTestImsServiceBinder . createImsFeature ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , ImsFeature.MMTEL , mTestCallback ) ; mTestImsServiceBinder . isConnected ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , ImsFeature.MMTEL , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.mockito.Mockito . verify ( mTestImsService.mMockMMTelFeature ) . isConnected ( org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyInt () ) ; }
private void expandRegister ( int regIdx , com.android.dx.rop.code.RegisterSpec registerToExpand ) { boolean replace = ( ( compatRegs ) == null ) ? true : ! ( compatRegs . get ( regIdx ) ) ; com.android.dx.rop.code.RegisterSpec expandedReg ; if ( replace ) { expandedReg = registerToExpand . withReg ( base ) ; if ( ! ( duplicateFirst ) ) { base += expandedReg . getCategory () ; } } else { expandedReg = registerToExpand ; } duplicateFirst = false ; result . set0 ( regIdx , expandedReg ) ; }
@ java.lang.Override public int getScanMode () { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE ; } return service . getScanMode () ; }
static byte [] toBytes ( java.lang.Object object ) { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream () ; try { java.io.ObjectOutputStream os = new java.io.ObjectOutputStream ( baos ) ; os . writeObject ( object ) ; os . close () ; } catch ( java.lang.Exception e ) { android.util.Log . w ( com.android.certinstaller.Util.TAG , ( ( ( STRING_CONSTANT + e ) + STRING_CONSTANT ) + object ) ) ; } return baos . toByteArray () ; }
public void addMatrix ( android.support.v8.renderscript.Matrix3f v ) { if ( android.support.v8.renderscript.RenderScript . shouldThunk () ) { mN . addMatrix ( v ) ; return; } for ( int i = NUMBER_CONSTANT ; i < ( v.mMat.length ) ; i ++ ) { addF32 ( v.mMat [ i ] ) ; } }
@ android.support.annotation.Nullable private android.telecom.PhoneAccountHandle getSoleSimAccount () { android.telecom.TelecomManager telecomManager = getSystemService ( android.telecom.TelecomManager . class ) ; android.telecom.PhoneAccountHandle result = null ; for ( android.telecom.PhoneAccountHandle phoneAccountHandle : telecomManager . getCallCapablePhoneAccounts () ) { android.telecom.PhoneAccount phoneAccount = telecomManager . getPhoneAccount ( phoneAccountHandle ) ; if ( phoneAccount == null ) { continue; } if ( phoneAccount . hasCapabilities ( PhoneAccount.CAPABILITY_SIM_SUBSCRIPTION ) ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , ( phoneAccountHandle + STRING_CONSTANT ) ) ; if ( result != null ) { return null ; } result = phoneAccountHandle ; } } return result ; }
private boolean haveArtifact ( java.lang.String groupId ) { if ( ( mRootModules ) != null ) { for ( com.android.tools.gradle.eclipse.ImportModule module : mRootModules ) { for ( com.android.ide.common.repository.GradleCoordinate dependency : module . getDependencies () ) { if ( groupId . equals ( dependency . getGroupId () ) ) { return true ; } } } } return false ; }
@ java.lang.Override protected void onCreate ( android.os.Bundle bundle ) { super . onCreate ( bundle ) ; android.content.Intent intent = getIntent () ; verifyCallAction ( intent ) ; final android.os.UserManager userManager = ( ( android.os.UserManager ) ( getSystemService ( Context.USER_SERVICE ) ) ) ; final android.os.UserHandle userHandle = new android.os.UserHandle ( userManager . getUserHandle () ) ; new com.android.server.telecom.components.UserCallIntentProcessor ( this , userHandle ) . processIntent ( new android.content.Intent ( intent ) , getCallingPackage () , true ) ; finish () ; }
@ java.lang.Override public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { org.w3c.dom.Attr nameNode = element . getAttributeNodeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_NAME ) ; if ( nameNode != null ) { java.lang.String permissionName = nameNode . getValue () ; if ( ( java.util.Arrays . binarySearch ( com.android.tools.lint.checks.SystemPermissionsDetector.SYSTEM_PERMISSIONS , permissionName ) ) >= NUMBER_CONSTANT ) { context . report ( com.android.tools.lint.checks.SystemPermissionsDetector.ISSUE , element , context . getLocation ( nameNode ) , STRING_CONSTANT ) ; } } }
private static java.lang.reflect.Method getDumpHprofDataMethod () { java.lang.ClassLoader myLoader = Main . class . getClassLoader () ; java.lang.Class < > vmdClass ; try { vmdClass = myLoader . loadClass ( STRING_CONSTANT ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { return null ; } java.lang.reflect.Method meth ; try { meth = vmdClass . getMethod ( STRING_CONSTANT , java.lang.String . class ) ; } catch ( java.lang.NoSuchMethodException nsme ) { java.lang.System.err . println ( STRING_CONSTANT ) ; return null ; } return meth ; }
@ java.lang.Override protected void computeFields () { java.util.TimeZone timeZone = getTimeZone () ; int dstOffset = ( timeZone . inDaylightTime ( new java.util.Date ( time ) ) ) ? timeZone . getDSTSavings () : NUMBER_CONSTANT ; int zoneOffset = timeZone . getRawOffset () ; fields [ java.util.Calendar.DST_OFFSET ] = dstOffset ; fields [ java.util.Calendar.ZONE_OFFSET ] = zoneOffset ; fullFieldsCalc ( zoneOffset ) ; for ( int i = NUMBER_CONSTANT ; i < ( java.util.Calendar.FIELD_COUNT ) ; i ++ ) { isSet [ i ] = true ; } }
public void testConstructor ( ) throws java.lang.Exception { try { java.util.jar.StrictJarFile jarFile = new java.util.jar.StrictJarFile ( STRING_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) {} tests.support.resource.Support_Resources . copyFile ( resources , null , libcore.java.util.jar.StrictJarFileTest.JAR_1 ) ; java.lang.String fileName = new java.io.File ( resources , libcore.java.util.jar.StrictJarFileTest.JAR_1 ) . getCanonicalPath () ; java.util.jar.StrictJarFile jarFile = new java.util.jar.StrictJarFile ( fileName ) ; assertEquals ( fileName , jarFile . getName () ) ; jarFile . close () ; }
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.internal.telephony.uicc.UiccSlotTest.UICCCARD_UPDATE_CARD_STATE_EVENT : mUiccSlot . update ( mSimulatedCommands , mIccCardStatus , NUMBER_CONSTANT ) ; setReady ( true ) ; break; default: logd ( ( STRING_CONSTANT + ( msg.what ) ) ) ; break; } }
private int performDexOptLI ( android.content.pm.PackageParser.Package pkg , boolean forceDex , boolean defer , boolean inclDependencies ) { java.util.HashSet < java.lang.String > done ; if ( inclDependencies && ( ( ( pkg.usesLibraries ) != null ) || ( ( pkg.usesOptionalLibraries ) != null ) ) ) { done = new java.util.HashSet < java.lang.String > () ; done . add ( pkg.packageName ) ; } else { done = null ; } return performDexOptLI ( pkg , null , forceDex , defer , done ) ; }
private java.lang.reflect.Method getFinalizeReferentMethod () { java.lang.Class < > finalizableReferenceClass = finalizableReferenceClassReference . get () ; if ( finalizableReferenceClass == null ) { return null ; } try { return finalizableReferenceClass . getMethod ( STRING_CONSTANT ) ; } catch ( java.lang.NoSuchMethodException e ) { throw new java.lang.AssertionError ( e ) ; } }
@ org.junit.Test public void testNotifyPrimaryForeignUse () { notifyDexLoad ( mFooUser0 , mBarUser0 . getBaseAndSplitDexPaths () , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mBarUser0 ) ; org.junit.Assert . assertTrue ( pui . isUsedByOtherApps () ) ; org.junit.Assert . assertTrue ( pui . getDexUseInfoMap () . isEmpty () ) ; }
@ java.lang.Override public < T extends com.android.sched.marker.Marker > boolean containsMarker ( @ javax.annotation.Nonnull java.lang.Class < T > cls ) { synchronized ( lock ) { assert isValidMarker ( cls ) : ( ( ( STRING_CONSTANT + ( com.android.sched.item.Items . getName ( cls ) ) ) + STRING_CONSTANT ) + ( this . getClass () . getName () ) ) + STRING_CONSTANT ; if ( ( markers ) == null ) { return false ; } return markers . containsKey ( cls ) ; } }
private void save ( java.io.File file ) throws java.io.IOException { org.w3c.dom.Document document = com.android.ide.eclipse.adt.internal.editors.layout.gle2.DomUtilities . createEmptyDocument () ; if ( document != null ) { for ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationDescription description : mList ) { description . toXml ( document ) ; } java.lang.String xml = com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlPrettyPrinter . prettyPrint ( document , true ) ; com.google.common.io.Files . write ( xml , file , com.google.common.base.Charsets.UTF_8 ) ; } }
public final void init ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { initialized = false ; javax.crypto.Cipher . checkOpmode ( opmode ) ; chooseProvider ( javax.crypto.Cipher.InitType.ALGORITHM_PARAMS , opmode , key , null , params , random ) ; initialized = true ; this . opmode = opmode ; }
@ org.junit.Test public void testConnect () { android.bluetooth.BluetoothDevice device = makeBluetoothDevice ( STRING_CONSTANT ) ; org.junit.Assert . assertNull ( mService . getInstanceMap () . get ( device ) ) ; org.junit.Assert . assertTrue ( mService . connect ( device ) ) ; java.util.Map < android.bluetooth.BluetoothDevice , com.android.bluetooth.mapclient.MceStateMachine > map = mService . getInstanceMap () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , map . size () ) ; org.junit.Assert . assertNotNull ( map . get ( device ) ) ; }
@ java.lang.Override public int hashCode () { final int prime = NUMBER_CONSTANT ; int result = NUMBER_CONSTANT ; result = prime * result ; if ( ( bases ) == null ) return result ; result += bases . hashCode () ; for ( org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters.Basis basis : bases ) { result += basis . hashCode () ; } return result ; }
public void test_ConstructorLjava_io_InputStream () { s = new java.util.Scanner ( new java.io.PipedInputStream () ) ; assertNotNull ( s ) ; s . close () ; try { s = new java.util.Scanner ( ( ( java.io.InputStream ) ( null ) ) ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} }
private static boolean checkResult ( byte [] result , byte [] code ) { return ! ( ( ( ( ( result [ NUMBER_CONSTANT ] ) != ( code [ NUMBER_CONSTANT ] ) ) || ( ( result [ NUMBER_CONSTANT ] ) != ( code [ NUMBER_CONSTANT ] ) ) ) || ( ( result [ NUMBER_CONSTANT ] ) != ( code [ NUMBER_CONSTANT ] ) ) ) || ( ( result [ NUMBER_CONSTANT ] ) != ( code [ NUMBER_CONSTANT ] ) ) ) ; }
@ java.lang.Override protected void onDetachedFromWindow () { if ( mIndeterminate ) { stopAnimation () ; } if ( ( mRefreshProgressRunnable ) != null ) { removeCallbacks ( mRefreshProgressRunnable ) ; mRefreshIsPosted = false ; } if ( ( mAccessibilityEventSender ) != null ) { removeCallbacks ( mAccessibilityEventSender ) ; } super . onDetachedFromWindow () ; mAttached = false ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private static void callChangeCallbacks () { synchronized ( android.os.SystemProperties.sChangeCallbacks ) { if ( ( android.os.SystemProperties.sChangeCallbacks . size () ) == NUMBER_CONSTANT ) { return; } java.util.ArrayList < java.lang.Runnable > callbacks = new java.util.ArrayList < java.lang.Runnable > ( android.os.SystemProperties.sChangeCallbacks ) ; for ( int i = NUMBER_CONSTANT ; i < ( callbacks . size () ) ; i ++ ) { callbacks . get ( i ) . run () ; } } }
private void assertDomainAndVendorInfoParses ( java.lang.String expectedDomain , byte [] domainBytes , java.lang.String expectedVendorInfo , byte [] vendorInfoBytes ) throws java.lang.Exception { java.nio.ByteBuffer packet = new android.net.dhcp.DhcpPacketTest.TestDhcpPacket ( DHCP_MESSAGE_TYPE_OFFER ) . setDomainBytes ( domainBytes ) . setVendorInfoBytes ( vendorInfoBytes ) . build () ; android.net.dhcp.DhcpPacket.DhcpPacket offerPacket = android.net.dhcp.DhcpPacket.DhcpPacket . decodeFullPacket ( packet , android.net.dhcp.ENCAP_BOOTP ) ; org.junit.Assert . assertEquals ( expectedDomain , offerPacket.mDomainName ) ; org.junit.Assert . assertEquals ( expectedVendorInfo , offerPacket.mVendorInfo ) ; }
public void testFailure ( ) throws java.io.IOException { java.io.InputStream is = loadResource () ; try { assertEquals ( CHAR_CONS , parseAndClose ( is ) ) ; try { assertEquals ( CHAR_CONS , parse ( is ) ) ; fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) { assertEquals ( STRING_CONSTANT , e . getMessage () ) ; } } finally { if ( is != null ) { is . close () ; } } }
static java.lang.String retrieveAlphaId ( com.android.internal.telephony.cat.ComprehensionTlv ctlv ) throws com.android.internal.telephony.cat.ResultException { if ( ctlv != null ) { byte [] rawValue = ctlv . getRawValue () ; int valueIndex = ctlv . getValueIndex () ; int length = ctlv . getLength () ; if ( length != NUMBER_CONSTANT ) { try { return com.android.internal.telephony.uicc.IccUtils . adnStringFieldToString ( rawValue , valueIndex , length ) ; } catch ( java.lang.IndexOutOfBoundsException e ) { throw new com.android.internal.telephony.cat.ResultException ( ResultCode.CMD_DATA_NOT_UNDERSTOOD ) ; } } else { return null ; } } else { return CatService.STK_DEFAULT ; } }
com.android.bluetooth.gatt.ContextMap < T > . App getByName ( java.lang.String name ) { synchronized ( mApps ) { java.util.Iterator < com.android.bluetooth.gatt.ContextMap < T > . App > i = mApps . iterator () ; while ( i . hasNext () ) { com.android.bluetooth.gatt.ContextMap < T > . App entry = i . next () ; if ( entry.name . equals ( name ) ) return entry ; } } android.util.Log . e ( com.android.bluetooth.gatt.ContextMap.TAG , ( STRING_CONSTANT + name ) ) ; return null ; }
@ java.lang.Override public void rm ( java.io.File file ) { new vogar.commands.Command.Builder ( log ) . args ( STRING_CONSTANT , STRING_CONSTANT , java.lang.Integer . toString ( port ) , host , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , file . getPath () ) . permitNonZeroExitStatus ( true ) . execute () ; }
@ java.lang.Override protected void test () { if ( ( com.android.cts.verifier.notifications.MockListener.MockListener . getInstance () ) == null ) { status = PASS ; } else { java.util.List < java.lang.String > result = new java.util.ArrayList ( com.android.cts.verifier.notifications.MockListener.MockListener . getInstance () . mPosted ) ; if ( ( result . size () ) == NUMBER_CONSTANT ) { status = PASS ; } else { logFail () ; status = FAIL ; } } next () ; }
@ java.lang.Override public void eventDataPathRequest ( android.hardware.wifi.V1_0.NanDataPathRequestInd event ) { if ( com.android.server.wifi.aware.WifiAwareNativeCallback.VDBG ) { android.util.Log . v ( com.android.server.wifi.aware.WifiAwareNativeCallback.TAG , ( ( ( ( ( STRING_CONSTANT + ( event.discoverySessionId ) ) + STRING_CONSTANT ) + ( java.lang.String . valueOf ( libcore.util.HexEncoding . encode ( event.peerDiscMacAddr ) ) ) ) + STRING_CONSTANT ) + ( event.ndpInstanceId ) ) ) ; } mWifiAwareStateManager . onDataPathRequestNotification ( event.discoverySessionId , event.peerDiscMacAddr , event.ndpInstanceId ) ; }
private void addRemoteSysImg ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abi ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newSysImg ( version , tag , abi , revision ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
@ java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { return new com.android.jack.dx.io.instructions.FourRegisterDecodedInstruction ( getFormat () , getOpcode () , newFirstIndex , getFirstIndexType () , getTarget () , getLiteral () , a , b , c , d , newSecondIndex , getSecondIndexType () ) ; }
@ java.lang.Override public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.junit.Assert . assertEquals ( hostname , org.conscrypt.NativeCrypto . SSL_get_servername ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void configure ( org.bouncycastle.jcajce.provider.config.ConfigurableProvider provider ) { provider . addAlgorithm ( STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.keystore.BC.PREFIX ) + STRING_CONSTANT ) ) ; provider . addAlgorithm ( STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.keystore.BC.PREFIX ) + STRING_CONSTANT ) ) ; provider . addAlgorithm ( STRING_CONSTANT , STRING_CONSTANT ) ; provider . addAlgorithm ( STRING_CONSTANT , STRING_CONSTANT ) ; provider . addAlgorithm ( STRING_CONSTANT , STRING_CONSTANT ) ; }
private void handleAddedCall ( com.android.server.telecom.ConnectionServiceFocusManager.CallFocus call ) { if ( ! ( mCalls . contains ( call ) ) ) { mCalls . add ( call ) ; } if ( java.util.Objects . equals ( mCurrentFocus , call . getConnectionServiceWrapper () ) ) { updateCurrentFocusCall () ; } }
public boolean performHapticFeedback ( android.view.IWindow window , int effectId , boolean always ) { synchronized ( mWindowMap ) { long ident = android.os.Binder . clearCallingIdentity () ; try { return mPolicy . performHapticFeedbackLw ( windowForClientLocked ( this , window , true ) , effectId , always ) ; } finally { android.os.Binder . restoreCallingIdentity ( ident ) ; } } }
public synchronized void maybeInit () { if ( initialized ) { return; } if ( ( ( path ) == null ) || ( path . isDirectory () ) ) { initialized = true ; return; } try { urlHandler = new libcore.io.ClassPathURLStreamHandler ( path . getPath () ) ; } catch ( java.io.IOException ioe ) { java.lang.System . logE ( ( STRING_CONSTANT + ( path ) ) , ioe ) ; urlHandler = null ; } initialized = true ; }
@ org.junit.Test public void testRemoveNetworksForUser ( ) throws java.lang.Exception { verifyAddNetworkToWifiConfigManager ( com.android.server.wifi.WifiConfigurationTestUtil . createOpenNetwork () ) ; verifyAddNetworkToWifiConfigManager ( com.android.server.wifi.WifiConfigurationTestUtil . createPskNetwork () ) ; verifyAddNetworkToWifiConfigManager ( com.android.server.wifi.WifiConfigurationTestUtil . createWepNetwork () ) ; assertFalse ( mWifiConfigManager . getConfiguredNetworks () . isEmpty () ) ; assertEquals ( NUMBER_CONSTANT , mWifiConfigManager . removeNetworksForUser ( com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ) . size () ) ; assertTrue ( mWifiConfigManager . getConfiguredNetworks () . isEmpty () ) ; }
private synchronized void addMediaPlayerController ( com.android.bluetooth.avrcp.MediaController controller ) { java.lang.String packageName = controller . getPackageName () ; com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( com.android.bluetooth.avrcp.MediaController . wrap ( controller ) , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , getPlayStateBytes ( controller . getPlaybackState () ) , getFeatureBitMask ( packageName ) , controller . getPackageName () , getAppLabel ( packageName ) ) ; addMediaPlayerInfo ( info ) ; }
public static void setFlags ( int id , int flags , final boolean markAsChange ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { if ( markAsChange ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . incModCount ( id ) ; } com.intellij.openapi.vfs.newvfs.persistent.FSRecords . putRecordInt ( id , com.intellij.openapi.vfs.newvfs.persistent.FSRecords.FLAGS_OFFSET , flags ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
public void set ( com.android.ide.common.resources.configuration.FolderConfiguration config , boolean nonFakeValuesOnly ) { if ( config != null ) { for ( int i = NUMBER_CONSTANT ; i < ( com.android.ide.common.resources.configuration.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { com.android.ide.common.resources.configuration.ResourceQualifier q = config.mQualifiers [ i ] ; if ( ( ( ! nonFakeValuesOnly ) || ( q == null ) ) || ( ! ( q . hasFakeValue () ) ) ) { mQualifiers [ i ] = q ; } } } }
public void event ( android.telecom.Logging.EventManager.Loggable recordEntry , java.lang.String event , java.lang.String format , java.lang.Object . . . args ) { java.lang.String msg ; try { msg = ( ( args == null ) || ( ( args.length ) == NUMBER_CONSTANT ) ) ? format : java.lang.String . format ( java.util.Locale.US , format , args ) ; } catch ( java.util.IllegalFormatException ife ) { android.telecom.Log . e ( this , ife , STRING_CONSTANT , format , args.length ) ; msg = format + STRING_CONSTANT ; } event ( recordEntry , event , msg ) ; }
private void verifyRaEvent ( android.net.metrics.RaEvent expected ) { org.mockito.ArgumentCaptor < android.os.Parcelable > captor = org.mockito.ArgumentCaptor . forClass ( android.os.Parcelable . class ) ; org.mockito.Mockito . verify ( mLog , org.mockito.Mockito . atLeastOnce () ) . log ( captor . capture () ) ; android.net.metrics.RaEvent got = lastRaEvent ( captor . getAllValues () ) ; if ( ! ( raEventEquals ( expected , got ) ) ) { org.junit.Assert . assertEquals ( expected , got ) ; } }
private synchronized void onConnectStateChanged ( byte [] address , int state ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( STRING_CONSTANT + ( java.util.Arrays . toString ( address ) ) ) + STRING_CONSTANT ) + state ) ) ; } android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.hid.HidDevService.MESSAGE_CONNECT_STATE_CHANGED ) ; msg.obj = address ; msg.arg1 = state ; mHandler . sendMessage ( msg ) ; }
public static final java.lang.String concatGroups ( java.util.regex.Matcher matcher ) { java.lang.StringBuilder b = new java.lang.StringBuilder () ; final int numGroups = matcher . groupCount () ; for ( int i = NUMBER_CONSTANT ; i <= numGroups ; i ++ ) { java.lang.String s = matcher . group ( i ) ; if ( s != null ) { b . append ( s ) ; } } return b . toString () ; }
public void testUserMaskingSystem ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasUserCa1 () ) ; assertMasked ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasUserCa1 () ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasUserCa1 () ) ; }
public java.lang.String getOriginalMimeType ( java.lang.String path ) { if ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _getOriginalMimeType ( mUniqueId , path ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.Integer wifiNanSubscribe ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer clientId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) org.json.JSONObject subscribeConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { android.net.wifi.nan.WifiNanSession session = mSessions . get ( clientId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( STRING_CONSTANT + clientId ) + STRING_CONSTANT ) ) ; } int discoverySessionId = getNextDiscoverySessionId () ; session . subscribe ( null , com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade . getSubscribeConfig ( subscribeConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanDiscoverySessionCallbackPostsEvents ( discoverySessionId ) ) ; return discoverySessionId ; } }
public void testAddAll3 () { java.util.concurrent.ArrayBlockingQueue q = new java.util.concurrent.ArrayBlockingQueue ( SIZE ) ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( ( SIZE ) - NUMBER_CONSTANT ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public static int MultiplePhis () { int x = NUMBER_CONSTANT ; int y = NUMBER_CONSTANT ; while ( ( y ++ ) < NUMBER_CONSTANT ) { if ( y > NUMBER_CONSTANT ) { x = NUMBER_CONSTANT ; continue; } else { x = NUMBER_CONSTANT ; continue; } } return x ; }
private static long createTime ( android.icu.util.TimeZone timeZone , int year , int monthOfYear , int dayOfMonth , int hourOfDay , int minuteOfHour , int secondOfMinute ) { android.icu.util.Calendar cal = new android.icu.util.GregorianCalendar ( timeZone ) ; cal . clear () ; cal . set ( year , ( monthOfYear - NUMBER_CONSTANT ) , dayOfMonth , hourOfDay , minuteOfHour , secondOfMinute ) ; return cal . getTimeInMillis () ; }
public void test_accept_SOTIMEOUT ( ) throws java.io.IOException { final int SO_TIMEOUT = NUMBER_CONSTANT ; java.nio.channels.ServerSocketChannel sc = java.nio.channels.ServerSocketChannel . open () ; try { sc . bind ( null ) ; sc . configureBlocking ( false ) ; java.net.ServerSocket ss = sc . socket () ; ss . setSoTimeout ( SO_TIMEOUT ) ; java.nio.channels.SocketChannel client = sc . accept () ; assertNull ( client ) ; int soTimeout = ss . getSoTimeout () ; assertEquals ( SO_TIMEOUT , soTimeout ) ; } finally { sc . close () ; } }
public void stopDtmf () { if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , STRING_CONSTANT ) ; android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , toString () ) ; } if ( hasActiveFgCall () ) getFgPhone () . stopDtmf () ; if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , STRING_CONSTANT ) ; android.telephony.Rlog . d ( com.android.internal.telephony.CallManager.LOG_TAG , toString () ) ; } }
private static void assertValues ( android.net.NetworkStats.Entry entry , java.lang.String iface , int uid , int set , int tag , int metered , int roaming ) { org.junit.Assert . assertEquals ( iface , entry.iface ) ; org.junit.Assert . assertEquals ( uid , entry.uid ) ; org.junit.Assert . assertEquals ( set , entry.set ) ; org.junit.Assert . assertEquals ( tag , entry.tag ) ; org.junit.Assert . assertEquals ( metered , entry.metered ) ; org.junit.Assert . assertEquals ( roaming , entry.roaming ) ; }
@ java.lang.Override public java.lang.String getCdmaEriTextForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone . getCdmaEriText () ; } else { return null ; } }
private static javax.swing.Icon [] findStepIcons ( java.lang.String prefix ) { javax.swing.Icon [] icons = new javax.swing.Icon [ icons.GoogleCloudToolsIcons.STEPS_COUNT ] ; for ( int i = NUMBER_CONSTANT ; i < ( icons.GoogleCloudToolsIcons.STEPS_COUNT ) ; i ++ ) { icons [ i ] = com.intellij.openapi.util.IconLoader . getIcon ( ( ( prefix + ( i + NUMBER_CONSTANT ) ) + STRING_CONSTANT ) ) ; } return icons ; }
public android.content.ContentValues getConstraints ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) || ( ! ( DrmStore.Action . isValid ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return _getConstraints ( mUniqueId , path , action ) ; }
public int indexOf ( com.android.jack.dx.rop.cst.CstString string ) { assert string != null ; throwIfNotPrepared () ; com.android.jack.dx.dex.file.StringIdItem s = strings . get ( string ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return s . getIndex () ; }
public void doVisit ( java.lang.Iterable < ? extends com.android.tools.perflib.heap.Instance > startNodes ) { for ( com.android.tools.perflib.heap.Instance node : startNodes ) { if ( node instanceof com.android.tools.perflib.heap.RootObj ) { node . accept ( this ) ; } else { visitLater ( null , node ) ; } } while ( ! ( mStack . isEmpty () ) ) { com.android.tools.perflib.heap.Instance node = mStack . pop () ; if ( mSeen . add ( node . getId () ) ) { node . accept ( this ) ; } } }
private void loadInternalDataFromSharedStore ( java.util.List < android.net.wifi.WifiConfiguration > configurations ) { for ( android.net.wifi.WifiConfiguration configuration : configurations ) { configuration.networkId = ( mNextNetworkId ) ++ ; if ( mVerboseLoggingEnabled ) { android.util.Log . v ( com.android.server.wifi.WifiConfigManager.TAG , ( STRING_CONSTANT + ( configuration . configKey () ) ) ) ; } mConfiguredNetworks . put ( configuration ) ; } }
@ java.lang.Override public boolean equals ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object == ( this ) ) { return true ; } else if ( ( ( ( object instanceof com.google.common.collect.ImmutableSet ) && ( isHashCodeFast () ) ) && ( ( ( com.google.common.collect.ImmutableSet < > ) ( object ) ) . isHashCodeFast () ) ) && ( ( hashCode () ) != ( object . hashCode () ) ) ) { return false ; } return com.google.common.collect.Sets . equalsImpl ( this , object ) ; }
public int lastIndexOf ( int ch , int fromIndex ) { if ( ch < ( java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT ) ) { int i = java.lang.Math . min ( fromIndex , ( ( length () ) - NUMBER_CONSTANT ) ) ; for ( ; i >= NUMBER_CONSTANT ; i -- ) { if ( ( charAt ( i ) ) == ch ) { return i ; } } return - NUMBER_CONSTANT ; } else { return lastIndexOfSupplementary ( ch , fromIndex ) ; } }
private static com.android.server.wifi.WifiConfigStore.StoreFile createFile ( java.io.File storeBaseDir ) { java.io.File storeDir = new java.io.File ( storeBaseDir , com.android.server.wifi.WifiConfigStore.STORE_DIRECTORY_NAME ) ; if ( ! ( storeDir . exists () ) ) { if ( ! ( storeDir . mkdir () ) ) { android.util.Log . w ( com.android.server.wifi.WifiConfigStore.TAG , ( STRING_CONSTANT + storeDir ) ) ; } } return new com.android.server.wifi.WifiConfigStore.StoreFile ( new java.io.File ( storeDir , com.android.server.wifi.WifiConfigStore.STORE_FILE_NAME ) ) ; }
void tryToConfuseDoneTask ( jsr166.FutureTaskTest.PublicFutureTask pf ) { pf . set ( new java.lang.Object () ) ; pf . setException ( new java.lang.Error () ) ; for ( boolean mayInterruptIfRunning : new boolean [] { true , false } ) { pf . cancel ( mayInterruptIfRunning ) ; } }
public void test_getSoTimeout ( ) throws java.lang.Exception { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () ) ) { final int timeoutSet = NUMBER_CONSTANT ; client . setSoTimeout ( timeoutSet ) ; int actualTimeout = client . getSoTimeout () ; assertTrue ( STRING_CONSTANT , ( ( java.lang.Math . abs ( ( timeoutSet - actualTimeout ) ) ) <= NUMBER_CONSTANT ) ) ; } }
@ java.lang.Override public void run () { android.webkit.WebViewProviderResponse threadResponse = mWebViewUpdateServiceImpl . waitForAndGetProvider () ; org.junit.Assert . assertEquals ( WebViewFactory.LIBLOAD_SUCCESS , threadResponse.status ) ; org.junit.Assert . assertEquals ( secondPackage , threadResponse.packageInfo.packageName ) ; org.mockito.Mockito . verify ( mTestSystemImpl ) . killPackageDependents ( org.mockito.Mockito . eq ( firstPackage ) ) ; countdown . countDown () ; }
public static java.util.Locale getDefault ( java.util.Locale.Category category ) { switch ( category ) { case DISPLAY : if ( ( java.util.Locale.defaultDisplayLocale ) == null ) { java.util.Locale.defaultDisplayLocale = java.util.Locale . initDefault ( category ) ; } return java.util.Locale.defaultDisplayLocale ; case FORMAT : if ( ( java.util.Locale.defaultFormatLocale ) == null ) { java.util.Locale.defaultFormatLocale = java.util.Locale . initDefault ( category ) ; } return java.util.Locale.defaultFormatLocale ; default: assert false : STRING_CONSTANT ; } return java.util.Locale . getDefault () ; }
boolean start () { if ( ( ( ( mAdbOsLocation ) != null ) && ( ( com.android.ddmlib.AndroidDebugBridge.sAdbServerPort ) != NUMBER_CONSTANT ) ) && ( ( ! ( mVersionCheck ) ) || ( ! ( startAdb () ) ) ) ) { return false ; } mStarted = true ; mDeviceMonitor = new com.android.ddmlib.DeviceMonitor ( this ) ; mDeviceMonitor . start () ; return true ; }
@ java.lang.Override public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.conscrypt.NativeCrypto . SSL_read ( s , fd , callback , new byte [ NUMBER_CONSTANT ] , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; fail () ; }
public android.drm.DrmConvertedStatus convertData ( int convertId , byte [] inputData ) { if ( ( null == inputData ) || ( NUMBER_CONSTANT >= ( inputData.length ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _convertData ( mUniqueId , convertId , inputData ) ; }
public static java.io.FileDescriptor socket ( boolean stream ) throws java.net.SocketException { java.io.FileDescriptor fd ; try { fd = Libcore.os . socket ( libcore.io.AF_INET6 , ( stream ? SOCK_STREAM : SOCK_DGRAM ) , NUMBER_CONSTANT ) ; return fd ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException . rethrowAsSocketException () ; } }
public void testMethodInsnNode () { org.objectweb.asm.tree.MethodInsnNode mn = new org.objectweb.asm.tree.MethodInsnNode ( INVOKESTATIC , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , false ) ; mn . setOpcode ( org.objectweb.asm.tree.INVOKESPECIAL ) ; assertEquals ( org.objectweb.asm.tree.INVOKESPECIAL , mn . getOpcode () ) ; assertEquals ( AbstractInsnNode.METHOD_INSN , mn . getType () ) ; }
public void testGetContent ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; java.io.InputStream in = ( ( java.io.InputStream ) ( connection . getContent () ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , readAscii ( in , java.lang.Integer.MAX_VALUE ) ) ; }
private void assertValidRequestMethod ( java.lang.String requestMethod ) throws java.lang.Exception { java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; connection . setRequestMethod ( requestMethod ) ; org.junit.Assert . assertEquals ( requestMethod , connection . getRequestMethod () ) ; }
private static void checkService ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( com.android.tools.lint.checks.SecurityDetector . getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector . isUnprotectedByPermission ( element ) ) ) { context . report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_SERVICE , element , context . getLocation ( element ) , STRING_CONSTANT ) ; } }
public void writeDescriptor ( int clientIf , java.lang.String address , int handle , int authReq , byte [] value ) { com.android.bluetooth.gatt.GattService service = getService () ; if ( service == null ) return; service . writeDescriptor ( clientIf , address , handle , authReq , value ) ; }
@ java.lang.Override public void run ( int i ) { android.net.Uri channelUri = channelUris . get ( i ) ; try ( android.database.Cursor cursor = mContentResolver . query ( android.media.tv.TvContract . buildProgramsUriForChannel ( channelUri , NUMBER_CONSTANT , ( ( PROGRAM_DURATION_MS * TRANSACTION_SIZE ) / NUMBER_CONSTANT ) ) , null , null , null , null ) ) { while ( cursor . moveToNext () ) {} } }
private void writeJavaMethodBody ( ) throws java.io.IOException { sourceInfoWriter . writeDebugBegin ( currentClass , startLine ) ; writer . writeKeyword ( Token.METHOD_BODY ) ; writer . writeOpen () ; writeLocals () ; writeBody () ; sourceInfoWriter . writeDebugEnd ( currentClass , endLine ) ; writer . writeClose () ; }
@ org.junit.Test public void testRenameCoreLibrary ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , null , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; }
public void deleteSubscription ( int subscriptionId , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . deleteSubscription ( subscriptionId , mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
private boolean run ( ) throws java.io.IOException { vogar.Run run = new vogar.Run ( this ) ; if ( ( configArgs.length ) > NUMBER_CONSTANT ) { run.console . verbose ( ( STRING_CONSTANT + ( vogar.util.Strings . join ( STRING_CONSTANT , ( ( java.lang.Object ) ( configArgs ) ) ) ) ) ) ; } return run.driver . buildAndRun ( actionFiles , actionClassesAndPackages ) ; }
private static void stressTest ( java.lang.reflect.Constructor constructor ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; ++ i ) { Main . setUpUnloadLoader ( constructor , false ) ; if ( ( i % NUMBER_CONSTANT ) == NUMBER_CONSTANT ) { java.lang.Runtime . getRuntime () . gc () ; } } }
public void test_close ( ) throws java.lang.Exception { zos . putNextEntry ( new java.util.zip.ZipEntry ( STRING_CONSTANT ) ) ; zos . closeEntry () ; zos . close () ; java.util.zip.ZipOutputStream zos = new java.util.zip.ZipOutputStream ( new java.io.ByteArrayOutputStream () ) ; zos . putNextEntry ( new java.util.zip.ZipEntry ( STRING_CONSTANT ) ) ; zos . close () ; zos . close () ; }
private com.android.builder.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest () { return versionName ; } @ java.lang.Override protected void validate () {} } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) ) ; return variant ; }
@ java.lang.Override public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor . visitArrayInstance ( this ) ; if ( ( mType ) == ( Type.OBJECT ) ) { for ( java.lang.Object value : getValues () ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( this ) ; } visitor . visitLater ( this , ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; } }
public void testToXml4 ( ) throws java.lang.Exception { java.lang.String xml = STRING_CONSTANT + ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; org.w3c.dom.Document doc = com.android.utils.XmlUtilsTest . parse ( xml ) ; xml = com.android.utils.XmlUtils . toXml ( doc ) ; assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , xml ) ; }
public static void main ( java.lang.String [] args ) throws java.io.IOException { if ( ! ( util.build.BuildDalvikSuite . parseArgs ( args ) ) ) { util.build.BuildDalvikSuite . printUsage () ; java.lang.System . exit ( ( - NUMBER_CONSTANT ) ) ; } long start = java.lang.System . currentTimeMillis () ; util.build.BuildDalvikSuite cat = new util.build.BuildDalvikSuite () ; cat . compose () ; long end = java.lang.System . currentTimeMillis () ; java.lang.System.out . println ( ( STRING_CONSTANT + ( ( end - start ) / NUMBER_CONSTANT ) ) ) ; }
private boolean loadData ( java.lang.String path ) { try { mappedFile = libcore.io.MemoryMappedFile . mmapRO ( path ) ; } catch ( android.system.ErrnoException errnoException ) { return false ; } try { readHeader () ; return true ; } catch ( java.lang.Exception ex ) { close () ; java.lang.System . logE ( ( ( STRING_CONSTANT + path ) + STRING_CONSTANT ) , ex ) ; return false ; } }
public void showInputMethodPickerFromClient ( com.android.internal.view.IInputMethodClient client ) { synchronized ( mMethodMap ) { if ( ( ( ( mCurClient ) == null ) || ( client == null ) ) || ( ( mCurClient.client . asBinder () ) != ( client . asBinder () ) ) ) { android.util.Slog . w ( com.android.server.InputMethodManagerService.TAG , ( STRING_CONSTANT + client ) ) ; return; } mHandler . sendEmptyMessage ( com.android.server.InputMethodManagerService.MSG_SHOW_IM_PICKER ) ; } }
@ java.lang.Deprecated public static int forkSystemServer ( int uid , int gid , int [] gids , boolean enableDebugger , int [] [] rlimits ) { int debugFlags = ( enableDebugger ) ? dalvik.system.Zygote.DEBUG_ENABLE_DEBUGGER : NUMBER_CONSTANT ; return dalvik.system.Zygote . forkAndSpecialize ( uid , gid , gids , debugFlags , rlimits , null , null ) ; }
public void setupMenu ( java.lang.String appName , org.eclipse.swt.widgets.Display display , com.android.menubar.IMenuBarCallback callbacks ) { mAppName = appName ; com.android.menubar.internal.MenuBarEnhancerCocoa.ActionProctarget target = new com.android.menubar.internal.MenuBarEnhancerCocoa.ActionProctarget ( callbacks ) ; try { initialize ( target ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalStateException ( e ) ; } display . disposeExec ( new java.lang.Runnable () { public void run () { invoke ( com.android.menubar.internal.MenuBarEnhancerCocoa.mProc3Args , STRING_CONSTANT ) ; } } ) ; }
private void fillCombo ( org.eclipse.swt.widgets.Combo combo , com.android.sdklib.resources.ResourceEnum [] resEnums ) { for ( com.android.sdklib.resources.ResourceEnum resEnum : resEnums ) { if ( ( ( ( mDeviceMode ) == false ) || ( resEnum . isValidValueForDevice () ) ) && ( ( resEnum . isFakeValue () ) == false ) ) { combo . add ( resEnum . getShortDisplayValue () ) ; } } }
public boolean canHandle ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) && ( ( null == mimeType ) || ( mimeType . equals ( STRING_CONSTANT ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return _canHandle ( mUniqueId , path , mimeType ) ; }
public void onCreate () { com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog dialog = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog ( mConfigComposite . getShell () , mEditedFile . getName () , mConfigComposite . getCurrentConfig () ) ; if ( ( dialog . open () ) == ( org.eclipse.jface.dialogs.Dialog.OK ) ) { final com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = new com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration () ; dialog . getConfiguration ( config ) ; createAlternateLayout ( config ) ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } new com.android.jack.transformations.ast.switches.UselessCaseRemover.Remover () . accept ( method ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.chromium.base.test.util.Feature ( value = { STRING_CONSTANT } ) public void testAddObserverReturnValue () { org.chromium.base.ObserverList < java.lang.Object > observerList = new org.chromium.base.ObserverList < java.lang.Object > () ; java.lang.Object a = new java.lang.Object () ; assertTrue ( observerList . addObserver ( a ) ) ; assertFalse ( observerList . addObserver ( a ) ) ; java.lang.Object b = new java.lang.Object () ; assertTrue ( observerList . addObserver ( b ) ) ; assertFalse ( observerList . addObserver ( null ) ) ; }
public java.lang.String getTrimmedSSID () { if ( ( mSSID ) != null ) { for ( int n = NUMBER_CONSTANT ; n < ( mSSID . length () ) ; n ++ ) { if ( ( mSSID . charAt ( n ) ) != NUMBER_CONSTANT ) { return mSSID ; } } } return STRING_CONSTANT ; }
private void responseRadioCapability ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , com.android.internal.telephony.V1_0.RadioCapability rc ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.RadioCapability ret = com.android.internal.telephony.RIL . convertHalRadioCapability ( rc , mRil ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
@ java.lang.Override public final java.util.stream.Stream < P_OUT > peek ( java.util.function.Consumer < ? super P_OUT > action ) { java.util.Objects . requireNonNull ( action ) ; return new java.util.stream.ReferencePipeline.StatelessOp < P_OUT , P_OUT > ( this , java.util.stream.StreamShape.REFERENCE , NUMBER_CONSTANT ) { @ java.lang.Override public java.util.stream.Sink < P_OUT > opWrapSink ( int flags , java.util.stream.Sink < P_OUT > sink ) { return new java.util.stream.Sink.ChainedReference < P_OUT , P_OUT > ( sink ) { @ java.lang.Override public void accept ( P_OUT u ) { action . accept ( u ) ; downstream . accept ( u ) ; } } ; } } ; }
public void visitProgramClass ( proguard.classfile.editor.ProgramClass programClass ) { int currentAccessFlags = programClass . getAccessFlags () ; int currentAccessLevel = proguard.classfile.editor.AccessUtil . accessLevel ( currentAccessFlags ) ; int requiredAccessLevel = ( inSamePackage ( programClass , referencingClass ) ) ? AccessUtil.PACKAGE_VISIBLE : AccessUtil.PUBLIC ; if ( currentAccessLevel < requiredAccessLevel ) { programClass.u2accessFlags = proguard.classfile.editor.AccessUtil . replaceAccessFlags ( currentAccessFlags , proguard.classfile.editor.AccessUtil . accessFlags ( requiredAccessLevel ) ) ; } }
@ android.annotation.SystemApi public void getDefaultDownloadableSubscriptionList ( android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . getDefaultDownloadableSubscriptionList ( mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
@ java.lang.Override public void setUp ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo ) throws com.android.tradefed.device.DeviceNotAvailableException , com.android.tradefed.targetprep.BuildError , com.android.tradefed.targetprep.TargetSetupError { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS . entrySet () ) { buildInfo . addBuildAttribute ( entry . getKey () , com.android.tradefed.util.ArrayUtil . join ( STRING_CONSTANT , device . getProperty ( entry . getValue () ) ) ) ; } }
public void run () { if ( ( wasRun ) == NUMBER_CONSTANT ) startedAt = java.lang.System . currentTimeMillis () ; lastDelta = ( java.lang.System . currentTimeMillis () ) - ( ( startedAt ) + ( NUMBER_CONSTANT * ( wasRun ) ) ) ; ( wasRun ) ++ ; if ( ( wasRun ) == NUMBER_CONSTANT ) { try { java.lang.Thread . sleep ( NUMBER_CONSTANT ) ; } catch ( java.lang.InterruptedException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
@ java.lang.Override public int hashCode () { int hash = NUMBER_CONSTANT ; hash = ( hash * NUMBER_CONSTANT ) + ( ctx . hashCode () ) ; hash = ( hash * NUMBER_CONSTANT ) + ( ( int ) ( ( engine ) == null ? NUMBER_CONSTANT : engine . getEngineContext () ) ) ; return hash ; }
@ java.lang.Override public final java.nio.ByteBuffer putLong ( long x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putLong ( ix ( nextPutIndex ( SizeOf.LONG ) ) , x ) ; return this ; }
public boolean getAnyDataEnabled () { if ( ! ( mDataEnabledSettings . isDataEnabled () ) ) return false ; com.android.internal.telephony.dataconnection.DcTracker.DataAllowFailReason failureReason = new com.android.internal.telephony.dataconnection.DcTracker.DataAllowFailReason () ; if ( ! ( isDataAllowed ( failureReason ) ) ) { if ( com.android.internal.telephony.dataconnection.DcTracker.DBG ) log ( failureReason . getDataAllowFailReason () ) ; return false ; } for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts . values () ) { if ( isDataAllowedForApn ( apnContext ) ) { return true ; } } return false ; }
@ java.lang.Override public int getUidForSharedUser ( java.lang.String sharedUserName ) { if ( sharedUserName == null ) { return - NUMBER_CONSTANT ; } synchronized ( mPackages ) { final com.android.server.pm.SharedUserSetting suid = mSettings . getSharedUserLPw ( sharedUserName , NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; if ( suid == null ) { return - NUMBER_CONSTANT ; } return suid.userId ; } }
@ org.junit.Test public void testRemoveNetworksForApp ( ) throws java.lang.Exception { verifyAddNetworkToWifiConfigManager ( com.android.server.wifi.WifiConfigurationTestUtil . createOpenNetwork () ) ; verifyAddNetworkToWifiConfigManager ( com.android.server.wifi.WifiConfigurationTestUtil . createPskNetwork () ) ; verifyAddNetworkToWifiConfigManager ( com.android.server.wifi.WifiConfigurationTestUtil . createWepNetwork () ) ; assertFalse ( mWifiConfigManager . getConfiguredNetworks () . isEmpty () ) ; android.content.pm.ApplicationInfo app = new android.content.pm.ApplicationInfo () ; app.uid = com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID ; app.packageName = com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_NAME ; assertEquals ( NUMBER_CONSTANT , mWifiConfigManager . removeNetworksForApp ( app ) . size () ) ; assertTrue ( mWifiConfigManager . getConfiguredNetworks () . isEmpty () ) ; }
@ android.view.RemotableViewMethod public synchronized void setMax ( int max ) { if ( max < NUMBER_CONSTANT ) { max = NUMBER_CONSTANT ; } if ( max != ( mMax ) ) { mMax = max ; postInvalidate () ; if ( ( mProgress ) > max ) { mProgress = max ; } refreshProgress ( R.id.progress , mProgress , false ) ; } }
public com.android.server.wifi.WifiConfigStoreData read ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { long readStartTime = mClock . getElapsedSinceBootMillis () ; byte [] sharedDataBytes = mSharedStore . readRawData () ; byte [] userDataBytes = null ; if ( ( mUserStore ) != null ) { userDataBytes = mUserStore . readRawData () ; } long readTime = ( mClock . getElapsedSinceBootMillis () ) - readStartTime ; android.util.Log . d ( com.android.server.wifi.WifiConfigStore.TAG , ( ( STRING_CONSTANT + readTime ) + STRING_CONSTANT ) ) ; return com.android.server.wifi.WifiConfigStoreData . parseRawData ( sharedDataBytes , userDataBytes ) ; }
private com.android.build.gradle.internal.test.report.PackageTestResults addPackageForClass ( java.lang.String className ) { java.lang.String packageName ; int pos = className . lastIndexOf ( STRING_CONSTANT ) ; if ( pos != ( - NUMBER_CONSTANT ) ) { packageName = className . substring ( NUMBER_CONSTANT , pos ) ; } else { packageName = STRING_CONSTANT ; } return addPackage ( packageName ) ; }
@ java.lang.Override public void fidelityWarning ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable , java.lang.Object data ) { java.lang.String description = describe ( message ) ; com.android.ide.eclipse.adt.AdtPlugin . log ( throwable , STRING_CONSTANT , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addFidelityWarning ( tag , description ) ; }
public void test_getPort ( ) throws java.io.IOException { try ( java.net.DatagramSocket theSocket = new java.net.DatagramSocket () ) { assertEquals ( STRING_CONSTANT , ( - NUMBER_CONSTANT ) , theSocket . getPort () ) ; int portNumber = NUMBER_CONSTANT ; theSocket . connect ( java.net.InetAddress . getLocalHost () , portNumber ) ; assertEquals ( STRING_CONSTANT , portNumber , theSocket . getPort () ) ; } }
public void testNormaliseOtherDigits () { java.lang.StringBuilder inputNumber = new java.lang.StringBuilder ( STRING_CONSTANT ) ; java.lang.String expectedOutput = STRING_CONSTANT ; assertEquals ( STRING_CONSTANT , expectedOutput , com.google.i18n.phonenumbers.PhoneNumberUtil . normalize ( inputNumber ) . toString () ) ; inputNumber = new java.lang.StringBuilder ( STRING_CONSTANT ) ; expectedOutput = STRING_CONSTANT ; assertEquals ( STRING_CONSTANT , expectedOutput , com.google.i18n.phonenumbers.PhoneNumberUtil . normalize ( inputNumber ) . toString () ) ; }
public boolean isSpeakEasyEligible () { return ( ( ( ( ( ! ( isPotentialEmergencyCallback () ) ) && ( ! ( isEmergencyCall () ) ) ) && ( ! ( isActiveRttCall () ) ) ) && ( ! ( isConferenceCall () ) ) ) && ( ! ( isVideoCall () ) ) ) && ( ! ( isVoiceMailNumber () ) ) ; }
private static com.google.common.collect.ImmutableList < java.util.zip.ZipEntry > getSortedClassEntriess ( java.util.zip.ZipFile jar ) { return jar . stream () . filter ( ( entry ) - > entry . getName () . endsWith ( STRING_CONSTANT ) ) . sorted () . collect ( com.google.common.collect.ImmutableList . toImmutableList ( com.google.common.collect.ImmutableList ) ) ; }
private static java.lang.String makeKeyStringFromBytes ( byte [] keyBytes , int keyOffset ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; byte b ; while ( ( b = keyBytes [ keyOffset ] ) != NUMBER_CONSTANT ) { ++ keyOffset ; sb . append ( ( ( char ) ( b ) ) ) ; } return sb . toString () ; }
public void doHandshake ( ) throws java.lang.Exception { java.net.ServerSocket listener = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.util.concurrent.Future < org.conscrypt.OpenSSLSocketImpl > clientFuture = handshake ( listener , clientHooks ) ; java.util.concurrent.Future < org.conscrypt.OpenSSLSocketImpl > serverFuture = handshake ( listener , serverHooks ) ; client = clientFuture . get ( org.conscrypt.OpenSSLSocketImplTest.TIMEOUT_SECONDS , java.util.concurrent.TimeUnit.SECONDS ) ; server = serverFuture . get ( org.conscrypt.OpenSSLSocketImplTest.TIMEOUT_SECONDS , java.util.concurrent.TimeUnit.SECONDS ) ; }
@ java.lang.Override public boolean createBondOutOfBand ( android.bluetooth.BluetoothDevice device , int transport , android.bluetooth.OobData oobData ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . createBond ( device , transport , oobData ) ; }
public static void testSendMessage7bitMultipageGsm ( android.app.Activity activity , int serialNumber , int category ) { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_CB_RECEIVED_ACTION ) ; byte [] [] pdus = new byte [ [] NUMBER_CONSTANT ] [ ] ; pdus [ NUMBER_CONSTANT ] = com.android.cellbroadcastreceiver.tests.SendTestMessages.gsm7BitTestMultipage1 ; pdus [ NUMBER_CONSTANT ] = com.android.cellbroadcastreceiver.tests.SendTestMessages.gsm7BitTestMultipage2 ; intent . putExtra ( STRING_CONSTANT , com.android.cellbroadcastreceiver.tests.SendTestMessages . createFromPdus ( activity , pdus , serialNumber , category ) ) ; activity . sendOrderedBroadcastAsUser ( intent , UserHandle.ALL , Manifest.permission.RECEIVE_SMS , AppOpsManager.OP_RECEIVE_SMS , null , null , Activity.RESULT_OK , null , null ) ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [] args ) { if ( ( ( benchmarkClassChecker ) != null ) && ( benchmarkClassChecker . isBenchmark ( klass ) ) ) { return new vogar.target.CaliperRunner ( monitor , profile , klass , args ) ; } else { return null ; } }
private com.android.server.am.HistoryRecord getCallingRecordLocked ( android.os.IBinder token ) { int index = indexOfTokenLocked ( token ) ; if ( index >= NUMBER_CONSTANT ) { com.android.server.am.HistoryRecord r = ( ( com.android.server.am.HistoryRecord ) ( mHistory . get ( index ) ) ) ; if ( r != null ) { return r.resultTo ; } } return null ; }
@ com.android.annotations.Nullable public org.w3c.dom.Document getProjectDocument ( ) throws java.io.IOException { if ( ( mProjectDoc ) == null ) { java.io.File file = new java.io.File ( mDir , com.android.tools.gradle.eclipse.GradleImport.ECLIPSE_DOT_PROJECT ) ; if ( file . exists () ) { mProjectDoc = mImporter . getXmlDocument ( file , false ) ; } else { mImporter . reportError ( this , mDir , ( STRING_CONSTANT + ( mDir . getPath () ) ) ) ; return null ; } } return mProjectDoc ; }
@ java.lang.Override public void beforeCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { mApiDatabase = com.android.tools.lint.checks.ApiLookup . get ( context . getClient () ) ; if ( ( ( mApiDatabase ) == null ) && ( ! ( mWarnedMissingDb ) ) ) { mWarnedMissingDb = true ; context . report ( IssueRegistry.LINT_ERROR , com.android.tools.lint.detector.api.Location . create ( context.file ) , STRING_CONSTANT , null ) ; } }
public void test_getSendBufferSize ( ) throws java.lang.Exception { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () ) ) { client . setSendBufferSize ( NUMBER_CONSTANT ) ; assertTrue ( STRING_CONSTANT , ( ( client . getSendBufferSize () ) >= NUMBER_CONSTANT ) ) ; } }
private void logNudFailed ( android.net.LinkProperties.ProvisioningChange delta ) { long duration = ( android.os.SystemClock . elapsedRealtime () ) - ( mLastProbeTimeMs ) ; boolean isFromProbe = duration < ( android.net.ip.IpReachabilityMonitor . getProbeWakeLockDuration () ) ; boolean isProvisioningLost = delta == ( android.net.LinkProperties.ProvisioningChange.LOST_PROVISIONING ) ; int eventType = android.net.metrics.IpReachabilityEvent . nudFailureEventType ( isFromProbe , isProvisioningLost ) ; mMetricsLog . log ( mInterfaceName , new android.net.metrics.IpReachabilityEvent ( eventType ) ) ; }
private static long getCentralDirOffset ( java.nio.ByteBuffer eocd , long eocdOffset ) throws android.util.apk.ApkSignatureSchemeV2Verifier.SignatureNotFoundException { long centralDirOffset = android.util.apk.ZipUtils . getZipEocdCentralDirectoryOffset ( eocd ) ; if ( centralDirOffset > eocdOffset ) { throw new android.util.apk.ApkSignatureSchemeV2Verifier.SignatureNotFoundException ( ( ( ( STRING_CONSTANT + centralDirOffset ) + STRING_CONSTANT ) + eocdOffset ) ) ; } long centralDirSize = android.util.apk.ZipUtils . getZipEocdCentralDirectorySizeBytes ( eocd ) ; if ( ( centralDirOffset + centralDirSize ) != eocdOffset ) { throw new android.util.apk.ApkSignatureSchemeV2Verifier.SignatureNotFoundException ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } return centralDirOffset ; }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [] pkgs = intent . getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { if ( forceStopPackageLocked ( pkg , ( - NUMBER_CONSTANT ) , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return; } } } }
private static com.ibm.icu.util.Calendar.PatternData make ( com.ibm.icu.util.ULocale loc , java.lang.String calType ) { java.lang.String key = ( ( loc . getBaseName () ) + STRING_CONSTANT ) + calType ; com.ibm.icu.util.Calendar.PatternData patternData = com.ibm.icu.util.Calendar.PATTERN_CACHE . get ( key ) ; if ( patternData == null ) { try { patternData = com.ibm.icu.util.Calendar . getPatternData ( loc , calType ) ; } catch ( java.util.MissingResourceException e ) { patternData = new com.ibm.icu.util.Calendar.PatternData ( com.ibm.icu.util.Calendar.DEFAULT_PATTERNS , null ) ; } com.ibm.icu.util.Calendar.PATTERN_CACHE . put ( key , patternData ) ; } return patternData ; }
private java.security.cert.X509Certificate [] setX509Certificate ( ) throws java.lang.Exception { java.security.cert.CertificateFactory certFact = java.security.cert.CertificateFactory . getInstance ( STRING_CONSTANT ) ; java.security.cert.X509Certificate pemCert = ( ( java.security.cert.X509Certificate ) ( certFact . generateCertificate ( new java.io.ByteArrayInputStream ( org.apache.harmony.security.tests.support.cert.TestUtils . getX509Certificate_v3 () ) ) ) ) ; java.security.cert.X509Certificate [] xcert = new java.security.cert.X509Certificate [] { pemCert } ; return xcert ; }
@ org.junit.Test public void testBufferedWrite ( ) throws java.lang.Exception { mWifiConfigStore . switchUserStoreAndRead ( mUserStore ) ; mWifiConfigStore . write ( false ) ; assertTrue ( mAlarmManager . isPending ( WifiConfigStore.BUFFERED_WRITE_ALARM_TAG ) ) ; assertFalse ( mSharedStore . isStoreWritten () ) ; assertFalse ( mUserStore . isStoreWritten () ) ; mAlarmManager . dispatch ( WifiConfigStore.BUFFERED_WRITE_ALARM_TAG ) ; mLooper . dispatchAll () ; assertTrue ( mSharedStore . isStoreWritten () ) ; assertTrue ( mUserStore . isStoreWritten () ) ; }
@ java.lang.Override public void addOutput ( byte [] data , int offset , int length ) { if ( ! ( isCancelled () ) ) { java.lang.String s ; try { s = new java.lang.String ( data , offset , length , STRING_CONSTANT ) ; } catch ( java.io.UnsupportedEncodingException e ) { s = new java.lang.String ( data , offset , length ) ; } mOutputBuffer . append ( s ) ; } }
public void test_useRadix_I () { s = new java.util.Scanner ( STRING_CONSTANT ) ; try { s . useRadix ( ( ( java.lang.Character.MIN_RADIX ) - NUMBER_CONSTANT ) ) ; fail () ; } catch ( java.lang.IllegalArgumentException expected ) {} try { s . useRadix ( ( ( java.lang.Character.MAX_RADIX ) + NUMBER_CONSTANT ) ) ; fail () ; } catch ( java.lang.IllegalArgumentException expected ) {} s . useRadix ( NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , s . radix () ) ; }
public void testMergeConflict ( ) throws java.io.IOException { com.android.dex.Dex a = resourceToDexBuffer ( STRING_CONSTANT ) ; com.android.dex.Dex b = resourceToDexBuffer ( STRING_CONSTANT ) ; com.android.dex.Dex ab = new com.android.dx.merge.DexMerger ( new com.android.dex.Dex [] { a , b } , CollisionPolicy.FAIL ) . merge () ; com.android.dx.merge.DexMerger dexMerger = new com.android.dx.merge.DexMerger ( new com.android.dex.Dex [] { a , ab } , CollisionPolicy.FAIL ) ; try { dexMerger . merge () ; fail () ; } catch ( com.android.dex.DexException expected ) { assertEquals ( STRING_CONSTANT , expected . getMessage () ) ; } }
public void testAddAll2 () { java.util.NavigableSet q = jsr166.TreeSubSetTest . set0 () ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public static java.lang.Integer getInteger ( java.lang.String nm , java.lang.Integer val ) { java.lang.String v = null ; try { v = java.lang.System . getProperty ( nm ) ; } catch ( java.lang.IllegalArgumentException | java.lang.NullPointerException e ) {} if ( v != null ) { try { return java.lang.Integer . decode ( v ) ; } catch ( java.lang.NumberFormatException e ) {} } return val ; }
@ android.support.annotation.VisibleForTesting static android.net.Uri getContentFilterUri ( java.lang.String query , long directoryId ) { return com.android.dialer.searchfragment.directories.DirectoryContactsCursorLoader.ENTERPRISE_CONTENT_FILTER_URI . buildUpon () . appendPath ( query ) . appendQueryParameter ( ContactsContract.DIRECTORY_PARAM_KEY , java.lang.String . valueOf ( directoryId ) ) . appendQueryParameter ( ContactsContract.REMOVE_DUPLICATE_ENTRIES , STRING_CONSTANT ) . appendQueryParameter ( ContactsContract.LIMIT_PARAM_KEY , com.android.dialer.searchfragment.directories.DirectoryContactsCursorLoader.MAX_RESULTS ) . build () ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , NUMBER_CONSTANT , callback , new android.os.Handler ( android.os.Looper . getMainLooper () ) ) ; }
public void testBaseResourceSetByName ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceSet resourceSet = com.android.ide.common.res2.ResourceSetTest . getBaseResourceSet () ; verifyResourceExists ( resourceSet , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
private boolean isSizeStyle ( java.lang.String style , java.util.Set < java.lang.String > sizeStyles ) { if ( com.android.tools.lint.checks.RequiredAttributeDetector . isFrameworkSizeStyle ( style ) ) { return true ; } if ( sizeStyles == null ) { return false ; } return isSizeStyle ( com.android.tools.lint.checks.RequiredAttributeDetector . stripStylePrefix ( style ) , sizeStyles , NUMBER_CONSTANT ) ; }
@ java.lang.Override public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor . visit ( this ) ) { visitor . accept ( lhs ) ; for ( com.android.jack.ir.ast.JSsaVariableRef rhsVar : rhs . values () ) { if ( rhsVar == null ) { throw new java.lang.RuntimeException ( STRING_CONSTANT ) ; } visitor . accept ( rhsVar ) ; } } visitor . endVisit ( this ) ; }
private void requestThreadStackTrace ( com.android.ddmlib.ThreadInfo selectedThread ) { if ( selectedThread != null ) { com.android.ddmlib.Client client = ( ( com.android.ddmlib.Client ) ( mThreadViewer . getInput () ) ) ; if ( client != null ) { client . requestThreadStackTrace ( selectedThread . getThreadId () ) ; } } }
private void connect ( java.net.InetAddress anAddr , int aPort , int timeout ) throws java.io.IOException { java.net.InetAddress normalAddr = ( anAddr . isAnyLocalAddress () ) ? java.net.InetAddress . getLocalHost () : anAddr ; if ( ( streaming ) && ( usingSocks () ) ) { socksConnect ( anAddr , aPort , NUMBER_CONSTANT ) ; } else { libcore.io.IoBridge . connect ( fd , normalAddr , aPort , timeout ) ; } address = normalAddr ; port = aPort ; }
private java.lang.String loadText ( android.content.pm.PackageItemInfo pii , int res , java.lang.CharSequence nonLocalized ) { if ( nonLocalized != null ) { return nonLocalized . toString () ; } if ( res != NUMBER_CONSTANT ) { android.content.res.Resources r = getResources ( pii ) ; if ( r != null ) { return r . getString ( res ) ; } } return null ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.ast.NestedAssignRemover.Visitor visitor = new com.android.jack.transformations.ast.NestedAssignRemover.Visitor ( method ) ; visitor . accept ( method ) ; }
private void loadEfLiAndEfPl () { if ( ( mParentApp . getType () ) == ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType.APPTYPE_USIM ) ) { mFh . loadEFTransparent ( com.android.internal.telephony.uicc.EF_LI , obtainMessage ( com.android.internal.telephony.uicc.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.uicc.SIMRecords.EfUsimLiLoaded () ) ) ; ( mRecordsToLoad ) ++ ; mFh . loadEFTransparent ( com.android.internal.telephony.uicc.EF_PL , obtainMessage ( com.android.internal.telephony.uicc.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.uicc.SIMRecords.EfPlLoaded () ) ) ; ( mRecordsToLoad ) ++ ; } }
private int getDexoptNeeded ( java.lang.String path , java.lang.String isa , java.lang.String compilerFilter , boolean newProfile ) { int dexoptNeeded ; try { dexoptNeeded = dalvik.system.DexFile . getDexOptNeeded ( path , isa , compilerFilter , newProfile , false ) ; } catch ( java.io.IOException ioe ) { android.util.Slog . w ( com.android.server.pm.PackageDexOptimizer.TAG , ( STRING_CONSTANT + path ) , ioe ) ; return com.android.server.pm.PackageDexOptimizer.DEX_OPT_FAILED ; } return adjustDexoptNeeded ( dexoptNeeded ) ; }
public android.net.LinkAddress createFromParcel ( android.os.Parcel in ) { java.net.InetAddress address = null ; try { address = java.net.InetAddress . getByAddress ( in . createByteArray () ) ; } catch ( java.net.UnknownHostException e ) {} int prefixLength = in . readInt () ; return new android.net.LinkAddress ( address , prefixLength ) ; }
public android.bluetooth.BluetoothSocket createRfcommSocket ( int channel ) throws java.io.IOException { if ( ! ( isBluetoothEnabled () ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; throw new java.io.IOException () ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - NUMBER_CONSTANT ) , true , true , this , channel , null ) ; }
public void TestJB3879 () { try { com.ibm.icu.util.UResourceBundle bundle = ( ( com.ibm.icu.util.UResourceBundle ) ( com.ibm.icu.util.UResourceBundle . getBundleInstance ( STRING_CONSTANT , com.ibm.icu.util.ULocale . getDefault () , com.ibm.icu.dev.test.util.ICUResourceBundleTest.testLoader ) ) ) ; if ( bundle == null ) { errln ( STRING_CONSTANT ) ; } } catch ( java.util.MissingResourceException ex ) { warnln ( ( STRING_CONSTANT + ( ex . getMessage () ) ) ) ; } }
@ java.lang.Override public boolean equals ( java.lang.Object ob ) { if ( ob == ( this ) ) return true ; if ( ! ( ob instanceof sun.nio.fs.UnixFileStore ) ) return false ; sun.nio.fs.UnixFileStore other = ( ( sun.nio.fs.UnixFileStore ) ( ob ) ) ; return ( ( ( this . dev ) == ( other.dev ) ) && ( java.util.Arrays . equals ( this . entry . dir () , other.entry . dir () ) ) ) && ( this . entry . name () . equals ( other.entry . name () ) ) ; }
public byte [] getData ( ) throws java.io.IOException { if ( ( ( contentType . equals ( ( ( java.lang.Object ) ( sun.security.pkcs.ContentInfo.DATA_OID ) ) ) ) || ( contentType . equals ( ( ( java.lang.Object ) ( sun.security.pkcs.ContentInfo.OLD_DATA_OID ) ) ) ) ) || ( contentType . equals ( ( ( java.lang.Object ) ( sun.security.pkcs.ContentInfo.TIMESTAMP_TOKEN_INFO_OID ) ) ) ) ) { if ( ( content ) == null ) return null ; else return content . getOctetString () ; } throw new java.io.IOException ( ( STRING_CONSTANT + ( contentType ) ) ) ; }
private java.lang.Object waitForFinalization () { long startCount = java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter . get () ; if ( ! ( sleepFor ( java.lang.Daemons.MAX_FINALIZE_NANOS ) ) ) { return null ; } if ( ( getNeedToWork () ) && ( ( java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter . get () ) == startCount ) ) { java.lang.Object finalizing = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject ; sleepFor ( ( ( java.lang.Daemons.NANOS_PER_SECOND ) / NUMBER_CONSTANT ) ) ; if ( ( getNeedToWork () ) && ( ( java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter . get () ) == startCount ) ) { return finalizing ; } } return null ; }
@ java.lang.Override public void binderDied () { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( ( STRING_CONSTANT + ( mAppIf ) ) + STRING_CONSTANT ) ) ; if ( isScanClient ( mAppIf ) ) { com.android.bluetooth.gatt.ScanClient client = new com.android.bluetooth.gatt.ScanClient ( mAppIf , false ) ; client.appDied = true ; stopScan ( client ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer putFloat ( float x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putFloat ( ix ( nextPutIndex ( SizeOf.FLOAT ) ) , x ) ; return this ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.internal.policy.impl.GlobalActions.MESSAGE_DISMISS : if ( ( mDialog ) != null ) { mDialog . dismiss () ; mDialog = null ; } break; case com.android.internal.policy.impl.GlobalActions.MESSAGE_REFRESH : refreshSilentMode () ; mAdapter . notifyDataSetChanged () ; break; case com.android.internal.policy.impl.GlobalActions.MESSAGE_SHOW : handleShow () ; break; } }
private static void report ( com.android.tools.lint.detector.api.Context context , com.android.tools.lint.detector.api.Issue issue , com.android.tools.lint.detector.api.Location.Handle handle , java.lang.String message ) { com.android.tools.lint.detector.api.Location location = handle . resolve () ; java.lang.Object clientData = handle . getClientData () ; if ( clientData instanceof org.w3c.dom.Node ) { if ( context . getDriver () . isSuppressed ( null , issue , ( ( org.w3c.dom.Node ) ( clientData ) ) ) ) { return; } } context . report ( issue , location , message ) ; }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [] pkgs = intent . getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - NUMBER_CONSTANT ) , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return; } } } } }
private void writeAnnotationMethods ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn ) throws java.io.IOException { assert com.android.jill.frontend.java.AsmHelper . isAnnotation ( cn ) ; writer . writeOpenNodeList () ; for ( org.objectweb.asm.tree.MethodNode mn : cn.methods ) { new com.android.jill.frontend.java.MethodBodyWriter ( writer , annotWriter , cn , mn , sourceInfoWriter , options ) . write () ; } writer . writeCloseNodeList () ; }
private void deleteFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath vpath ) throws com.android.jack.incremental.IncrementalException { assert ( incrementalInputLibrary ) != null ; try { incrementalInputLibrary . delete ( fileType , vpath ) ; } catch ( com.android.jack.library.FileTypeDoesNotExistException e ) {} catch ( com.android.sched.util.file.CannotDeleteFileException e ) { throw new com.android.jack.incremental.IncrementalException ( e ) ; } }
public boolean createBond ( android.bluetooth.BluetoothDevice device , int transport ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) return false ; return service . createBond ( device , transport , null ) ; }
private android.view.DisplayList buildDisplayList ( android.view.View view , android.view.HardwareCanvas canvas ) { view.mRecreateDisplayList = ( ( view.mPrivateFlags ) & ( View.PFLAG_INVALIDATED ) ) == ( View.PFLAG_INVALIDATED ) ; view.mPrivateFlags &= ~ ( View.PFLAG_INVALIDATED ) ; long buildDisplayListStartTime = startBuildDisplayListProfiling () ; canvas . clearLayerUpdates () ; android.os.Trace . traceBegin ( Trace.TRACE_TAG_VIEW , STRING_CONSTANT ) ; android.view.DisplayList displayList = view . getDisplayList () ; android.os.Trace . traceEnd ( Trace.TRACE_TAG_VIEW ) ; endBuildDisplayListProfiling ( buildDisplayListStartTime ) ; return displayList ; }
@ java.lang.Override public void onDestroy () { super . onDestroy () ; com.android.internal.telephony.cat.CatLog . d ( com.android.stk.StkDialogActivity.LOG_TAG , ( ( ( STRING_CONSTANT + ( mIsResponseSent ) ) + STRING_CONSTANT ) + ( mSlotId ) ) ) ; if ( ( appService ) == null ) { return; } if ( ( ! ( mIsResponseSent ) ) && ( ! ( appService . isDialogPending ( mSlotId ) ) ) ) { sendResponse ( StkAppService.RES_ID_CONFIRM , false ) ; } cancelTimeOut () ; if ( ( mBroadcastReceiver ) != null ) { unregisterReceiver ( mBroadcastReceiver ) ; } }
private void validateSdk ( com.android.ide.eclipse.adt.internal.sdk.Sdk sdk ) { assertTrue ( STRING_CONSTANT , ( ( sdk . getTargets () . length ) > NUMBER_CONSTANT ) ) ; for ( com.android.sdklib.IAndroidTarget target : sdk . getTargets () ) { if ( ! ( validateSdk ( target ) ) ) { continue; } org.eclipse.core.runtime.IStatus status = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetParser ( target ) . run ( new org.eclipse.core.runtime.NullProgressMonitor () ) ; if ( ( status . getCode () ) != ( org.eclipse.core.runtime.IStatus.OK ) ) { fail ( STRING_CONSTANT ) ; } } }
public void test_flush ( ) throws java.io.IOException { java.util.zip.InflaterOutputStream ios = new java.util.zip.InflaterOutputStream ( os ) ; ios . close () ; try { ios . flush () ; fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) {} ios = new java.util.zip.InflaterOutputStream ( os ) ; ios . flush () ; ios . flush () ; ios . close () ; }
public void testMaxLengthName ( ) throws java.lang.Exception { java.lang.String maxLengthName = libcore.java.util.zip.ZipEntryTest . makeString ( NUMBER_CONSTANT , STRING_CONSTANT ) ; java.io.File f = libcore.java.util.zip.ZipEntryTest . createTemporaryZipFile () ; java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest . createZipOutputStream ( f ) ; out . putNextEntry ( new java.util.zip.ZipEntry ( maxLengthName ) ) ; out . closeEntry () ; out . close () ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( f ) ; assertNotNull ( zipFile . getEntry ( maxLengthName ) ) ; zipFile . close () ; }
@ org.junit.Test public void testEvaluateNetworks_untrustedNetworksAllowed_onlyDeletedEphemeral () { when ( mWifiConfigManager . wasEphemeralNetworkDeleted ( com.android.server.wifi.util.ScanResultUtil . createQuotedSSID ( mUntrustedScanDetail . getScanResult () . SSID ) ) ) . thenReturn ( true ) ; android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator . evaluateNetworks ( com.google.android.collect.Lists . newArrayList ( mUntrustedScanDetail ) , null , null , false , true , null ) ; junit.framework.Assert . assertNull ( result ) ; verifyZeroInteractions ( mNetworkScoreManager ) ; }
private void onContactInfoComplete ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry , boolean isPrimary ) { updateContactEntry ( entry , isPrimary ) ; if ( ( entry.name ) != null ) { com.android.incallui.Log . d ( com.android.incallui.CallCardPresenter.TAG , ( STRING_CONSTANT + entry ) ) ; } if ( ( entry.contactUri ) != null ) { com.android.incallui.CallerInfoUtils . sendViewNotification ( mContext , entry.contactUri ) ; } }
public void addImsServiceFeatureCallback ( com.android.ims.internal.IImsServiceFeatureCallback callback ) { mImsStatusCallbacks . add ( callback ) ; synchronized ( mLock ) { if ( ( ( mImsFeatures ) == null ) || ( mImsFeatures . isEmpty () ) ) { return; } try { for ( android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair i : mImsFeatures ) { callback . imsFeatureCreated ( i.slotId , i.featureType ) ; } } catch ( android.os.RemoteException e ) { android.util.Log . w ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , STRING_CONSTANT ) ; } } }
@ javax.annotation.Nonnull private static com.android.jack.ir.ast.JMethodCall makeMethodCall ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.CheckForNull com.android.jack.ir.ast.JExpression instance , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface receiverType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod targetMethod ) { com.android.jack.ir.ast.JMethodId methodId = targetMethod . getMethodId () ; assert ( ( methodId . getKind () ) == ( com.android.jack.ir.ast.MethodKind.STATIC ) ) || ( instance != null ) ; com.android.jack.ir.ast.JMethodCall call = new com.android.jack.ir.ast.JMethodCall ( info , instance , receiverType , methodId , targetMethod . getType () , methodId . canBeVirtual () ) ; return call ; }
@ java.lang.Override public final java.nio.DoubleBuffer asDoubleBuffer () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } int off = this . position () ; int lim = this . limit () ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : NUMBER_CONSTANT ; int size = rem > > NUMBER_CONSTANT ; return new java.nio.ByteBufferAsDoubleBuffer ( this , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , size , size , off , order () ) ; }
@ java.lang.Override protected int compareTo0 ( com.android.jack.dx.rop.cst.Constant other ) { int cmp = super . compareTo0 ( other ) ; if ( cmp != NUMBER_CONSTANT ) { return cmp ; } com.android.jack.dx.rop.cst.CstFieldRef otherField = ( ( com.android.jack.dx.rop.cst.CstFieldRef ) ( other ) ) ; com.android.jack.dx.rop.cst.CstString thisDescriptor = getDescriptor () ; com.android.jack.dx.rop.cst.CstString otherDescriptor = otherField . getDescriptor () ; return thisDescriptor . compareTo ( otherDescriptor ) ; }
void registerClient ( java.util.UUID uuid , android.bluetooth.IBluetoothGattCallback callback ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , STRING_CONSTANT ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( STRING_CONSTANT + uuid ) ) ; mClientMap . add ( uuid , null , callback , this ) ; gattClientRegisterAppNative ( uuid . getLeastSignificantBits () , uuid . getMostSignificantBits () ) ; }
private static java.lang.String quoteSsid ( android.net.wifi.ScanResult scanResult ) { if ( ( scanResult.wifiSsid ) != null ) { return ( STRING_CONSTANT + ( scanResult.wifiSsid ) ) + STRING_CONSTANT ; } else if ( ( scanResult.SSID ) != null ) { return ( STRING_CONSTANT + ( scanResult.SSID ) ) + STRING_CONSTANT ; } else { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private static void checkOnTouchListener ( com.android.tools.lint.detector.api.ClassContext context , org.objectweb.asm.tree.ClassNode classNode ) { org.objectweb.asm.tree.MethodNode onTouchNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector . findMethod ( classNode.methods , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH_SIG ) ; if ( onTouchNode != null ) { org.objectweb.asm.tree.AbstractInsnNode performClickInsnNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector . findMethodCallInstruction ( onTouchNode.instructions , com.android.SdkConstants.ANDROID_VIEW_VIEW , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK_SIG ) ; if ( performClickInsnNode == null ) { java.lang.String message = java.lang.String . format ( STRING_CONSTANT , classNode.name ) ; context . report ( com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ISSUE , onTouchNode , null , context . getLocation ( onTouchNode , classNode ) , message , null ) ; } } }
public java.lang.Object clone () { try { java.util.IdentityHashMap < , > m = ( ( java.util.IdentityHashMap < , > ) ( super . clone () ) ) ; m.entrySet = null ; m.table = table . clone () ; return m ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } }
@ org.junit.Test public void testRenameCoreLibrary_prefixedLoader ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , null , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; }
@ java.lang.Override public void writeToParcel ( android.os.Parcel dest , int flags ) { dest . writeInt ( mCallId ) ; dest . writeInt ( mState ) ; dest . writeInt ( getDisconnectCause () ) ; dest . writeInt ( getCapabilities () ) ; dest . writeLong ( getConnectTime () ) ; dest . writeIntArray ( com.google.common.primitives.Ints . toArray ( mChildCallIds ) ) ; dest . writeString ( getGatewayNumber () ) ; dest . writeString ( getGatewayPackage () ) ; dest . writeParcelable ( mIdentification , NUMBER_CONSTANT ) ; }
private com.google.gerrit.common.data.LabelTypes getLabelTypes ( ) throws java.lang.Exception { db . create () ; com.google.gerrit.server.git.ProjectConfig c = new com.google.gerrit.server.git.ProjectConfig ( allProjects ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( allProjects ) ) { c . load ( repo ) ; return new com.google.gerrit.common.data.LabelTypes ( com.google.common.collect.ImmutableList . copyOf ( c . getLabelSections () . values () ) ) ; } }
@ java.lang.Override public com.google.gerrit.reviewdb.client.StarredChange parse ( com.google.gerrit.server.account.AccountResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent . getUser () ; try { user . asyncStarredChanges () ; com.google.gerrit.server.change.ChangeResource change = changes . parse ( TopLevelResource.INSTANCE , id ) ; if ( user . getStarredChanges () . contains ( change . getId () ) ) { return new com.google.gerrit.server.account.AccountResource.StarredChange ( user , change ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } finally { user . abortStarredChanges () ; } }
@ java.lang.Override public synchronized void init ( javax.servlet.ServletConfig config ) throws javax.servlet.ServletException { super . init ( config ) ; java.lang.String path = config . getServletContext () . getContextPath () ; base = ( com.google.common.base.Strings . nullToEmpty ( path ) ) + STRING_CONSTANT ; for ( com.google.gerrit.server.plugins.Plugin plugin : pending ) { install ( plugin ) ; } pending = null ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Project.NameKey projectKey = change . getProject () ; try { return projectControl . controlFor ( projectKey , user ) . controlFor ( db , change ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } }
@ java.lang.Override public java.lang.String toString () { final java.lang.String val = getValue () ; if ( com.google.gerrit.server.query.QueryParser . isSingleWord ( val ) ) { return ( ( getOperator () ) + STRING_CONSTANT ) + val ; } return ( ( ( getOperator () ) + STRING_CONSTANT ) + val ) + STRING_CONSTANT ; }
private static < T > T readContentFromJson ( com.google.gerrit.acceptance.RestResponse r , java.lang.Class < T > clazz ) throws java.lang.Exception { r . assertOK () ; com.google.gson.stream.JsonReader jsonReader = new com.google.gson.stream.JsonReader ( r . getReader () ) ; jsonReader . setLenient ( true ) ; return newGson () . fromJson ( jsonReader , clazz ) ; }
java.util.List < com.google.gerrit.server.project.SectionMatcher > getAllSections () { if ( isAllProjects ) { return getLocalAccessSections () ; } java.util.List < com.google.gerrit.server.project.SectionMatcher > all = new java.util.ArrayList <> () ; for ( com.google.gerrit.server.project.ProjectState s : tree () ) { all . addAll ( s . getLocalAccessSections () ) ; } return all ; }
private void checkPermission ( ) throws com.google.gerrit.common.errors.PermissionDeniedException { com.google.gerrit.server.account.CapabilityControl ctl = userProvider . get () . getCapabilities () ; if ( ! ( ctl . canPerform ( com.googlesource.gerrit.plugins.verifystatus.SaveReportCapability . getName ( pluginName ) ) ) ) { throw new com.google.gerrit.common.errors.PermissionDeniedException ( java.lang.String . format ( STRING_CONSTANT , userProvider . get () . getUserName () , new com.googlesource.gerrit.plugins.verifystatus.SaveReportCapability () . getDescription () ) ) ; } }
public com.google.gerrit.client.admin.AccountGroupDetail run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gerrit.server.rpc.Failure , com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.AccountGroup group = db . accountGroups () . get ( groupId ) ; assertAmGroupOwner ( db , group ) ; final com.google.gerrit.client.admin.AccountGroupDetail d = new com.google.gerrit.client.admin.AccountGroupDetail () ; d . load ( db , new com.google.gerrit.client.data.AccountInfoCacheFactory ( db ) , group ) ; return d ; }
protected PushOneCommit.Result amendChange ( java.lang.String changeId , java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Collections . shuffle ( com.google.gerrit.acceptance.AbstractDaemonTest.RANDOM ) ; com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , PushOneCommit.SUBJECT , PushOneCommit.FILE_NAME , new java.lang.String ( com.google.common.primitives.Chars . toArray ( com.google.gerrit.acceptance.AbstractDaemonTest.RANDOM ) ) , changeId ) ; return push . to ( ref ) ; }
@ org.junit.Test public void byKey ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change = insert ( newChange ( repo ) ) ; java.lang.String key = change . getKey () . get () ; assertQuery ( STRING_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; i ++ ) { java.lang.String q = key . substring ( NUMBER_CONSTANT , ( NUMBER_CONSTANT - i ) ) ; assertQuery ( q , change ) ; } }
@ java.lang.Override public final int parseArguments ( final org.kohsuke.args4j.spi.Parameters params ) throws org.kohsuke.args4j.CmdLineException { final java.lang.String n = params . getParameter ( NUMBER_CONSTANT ) ; final com.google.gerrit.reviewdb.AccountGroup group = get ( n ) ; if ( group == null ) { throw new org.kohsuke.args4j.CmdLineException ( owner , ( ( STRING_CONSTANT + n ) + STRING_CONSTANT ) ) ; } setter . addValue ( group . getId () ) ; return NUMBER_CONSTANT ; }
@ org.junit.Test public void testGetUrl ( ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( getConfiguration () . peerInfoStatic () . url () ) . isEmpty () ; globalPluginConfig . setString ( com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION , com.ericsson.gerrit.plugins.highavailability.Configuration.STATIC_SUBSECTION , com.ericsson.gerrit.plugins.highavailability.Configuration.URL_KEY , com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.URL ) ; com.google.common.truth.Truth . assertThat ( getConfiguration () . peerInfoStatic () . url () ) . isEqualTo ( com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.URL ) ; }
@ org.junit.Test public void abandonReviewableChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . to ( sc.reviewerByEmail ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
@ org.junit.Test public void commentOnReviewableChangeByOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private void innerTest ( ) throws java.lang.Exception { try { outer () ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalStateException e ) { java.lang.StackTraceElement [] trimmed = com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener . trimStack ( e . getStackTrace () , java.lang.Thread . currentThread () . getStackTrace () [ NUMBER_CONSTANT ] ) ; java.lang.String str = java.util.Arrays . toString ( trimmed ) ; com.google.common.truth.Truth . assertThat ( str ) . doesNotContain ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( str ) . contains ( STRING_CONSTANT ) ; } }
@ java.lang.Override protected void configure () { factory ( LuceneChangeIndex.Factory . class ) ; install ( new com.google.gerrit.server.index.IndexModule ( threads ) ) ; if ( ( ( singleVersion ) == null ) && ( ( base ) == null ) ) { install ( new com.google.gerrit.lucene.LuceneIndexModule.MultiVersionModule () ) ; } else { install ( new com.google.gerrit.lucene.LuceneIndexModule.SingleVersionModule () ) ; } }
@ java.lang.Override void send ( java.lang.String message ) { com.google.gerrit.client.changes.ChangeApi . createChange ( project , branch , null , message , base , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( result . legacyId () ) ) ; hide () ; } } ) ; }
@ com.google.gerrit.common.Nullable com.google.gerrit.httpd.raw.ResourceServlet.Resource getResource ( java.lang.String name ) { try { java.nio.file.Path p = getResourcePath ( name ) ; return cache . get ( p , newLoader ( p ) ) ; } catch ( java.util.concurrent.ExecutionException | java.io.IOException e ) { com.google.gerrit.httpd.raw.ResourceServlet.log . warn ( java.lang.String . format ( STRING_CONSTANT , name ) , e ) ; return null ; } }
private void assertUserIds ( org.bouncycastle.openpgp.PGPPublicKeyRing keyRing , java.lang.String . . . expected ) throws java.lang.Exception { java.util.List < java.lang.String > actual = new java.util.ArrayList <> () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.Iterator < java.lang.String > userIds = store . get ( keyRing . getPublicKey () . getKeyID () ) . iterator () . next () . getPublicKey () . getUserIDs () ; while ( userIds . hasNext () ) { actual . add ( userIds . next () ) ; } org.junit.Assert . assertEquals ( java.util.Arrays . asList ( expected ) , actual ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { mergeResults = com.google.common.collect.Maps . newHashMap () ; com.google.gerrit.server.CurrentUser listenerUser = factory . create ( user.id ) ; source . addEventListener ( new com.google.gerrit.common.EventListener () { @ java.lang.Override public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.ChangeMergedEvent ) { com.google.gerrit.server.events.ChangeMergedEvent changeMergedEvent = ( ( com.google.gerrit.server.events.ChangeMergedEvent ) ( event ) ) ; mergeResults . put ( changeMergedEvent.change.number , changeMergedEvent.newRev ) ; } } } , listenerUser ) ; }
@ java.lang.Override public com.google.gerrit.server.change.VoteResource parse ( com.google.gerrit.server.change.ReviewerResource reviewer , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException { if ( ( ( reviewer . getRevisionResource () ) != null ) && ( ! ( reviewer . getRevisionResource () . isCurrent () ) ) ) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException ( STRING_CONSTANT ) ; } return new com.google.gerrit.server.change.VoteResource ( reviewer , id . get () ) ; }
static boolean needsQuotedPrintableWithinPhrase ( final int cp ) { switch ( cp ) { case CHAR_CONS : case CHAR_CONS : case CHAR_CONS : case CHAR_CONS : case CHAR_CONS : case CHAR_CONS : case CHAR_CONS : return false ; default: if ( ( ( ( CHAR_CONS <= cp ) && ( cp <= CHAR_CONS ) ) || ( ( CHAR_CONS <= cp ) && ( cp <= CHAR_CONS ) ) ) || ( ( CHAR_CONS <= cp ) && ( cp <= CHAR_CONS ) ) ) { return false ; } return true ; } }
protected void assertApproved ( java.lang.String changeId ) throws java.io.IOException { com.google.gerrit.extensions.common.ChangeInfo c = getChange ( changeId , com.google.gerrit.extensions.client.ListChangesOption.DETAILED_LABELS ) ; com.google.gerrit.extensions.common.LabelInfo cr = c.labels . get ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( cr.all ) . hasSize ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( cr.all . get ( NUMBER_CONSTANT ) . value ) . isEqualTo ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( cr.all . get ( NUMBER_CONSTANT ) . _accountId ) ) . isEqualTo ( admin . getId () ) ; }
@ org.junit.Test public void testLimit ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; org.junit.Assert . assertSame ( com.google.gerrit.server.query.change.AndSource . class , out . getClass () ) ; org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableList . of ( query ( in . getChild ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) , in . getChild ( NUMBER_CONSTANT ) ) , out . getChildren () ) ; }
@ java.lang.Override public AccountGroup.Id call ( ) throws com.google.gerrit.common.errors.NameAlreadyUsedException , com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.PerformCreateGroup performCreateGroup = performCreateGroupFactory . create () ; final com.google.gerrit.reviewdb.Account.Id me = user . getAccountId () ; return performCreateGroup . createGroup ( groupName , null , false , null , java.util.Collections . singleton ( me ) , null ) ; }
@ org.junit.Test public void testCreateProjectWithGitSuffix ( ) throws java.lang.Exception { java.lang.String newProjectName = name ( STRING_CONSTANT ) ; com.google.gerrit.extensions.common.ProjectInfo p = gApi . projects () . create ( ( newProjectName + STRING_CONSTANT ) ) . get () ; com.google.common.truth.Truth . assertThat ( p.name ) . isEqualTo ( newProjectName ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( newProjectName ) ) ; com.google.common.truth.Truth . assertThat ( projectState ) . isNotNull () ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjectInfo ( projectState . getProject () , p ) ; assertHead ( newProjectName , STRING_CONSTANT ) ; }
private static void editTree ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation op , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.dircache.DirCacheEditor dce , org.eclipse.jgit.lib.ObjectInserter ins , java.lang.String path , byte [] content ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { switch ( op ) { case DELETE_ENTRY : dce . add ( new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath ( path ) ) ; break; case CHANGE_ENTRY : case RESTORE_ENTRY : dce . add ( com.google.gerrit.server.edit.ChangeEditModifier . getPathEdit ( op , rw , base , path , ins , content ) ) ; break; } dce . finish () ; }
@ org.junit.Test public void commentOnReviewableChangeByOwnerNotifyOwnerReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( sc.owner , sc.starrer ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory . create ( cd ) . getSubmitType () ; if ( ( rec.status ) != ( SubmitTypeRecord.Status.OK ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_CONSTANT + rec ) ) ; } return rec.type ; }
@ org.junit.Test public void testCommitDashV ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) + ( SOB1 ) ) + ( SOB2 ) ) , call ( ( ( ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( SOB1 ) ) + ( SOB2 ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) ) ; }
private void innerTest ( ) throws java.lang.Exception { try { outer () ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalStateException e ) { java.lang.StackTraceElement [] trimmed = com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener . trimStack ( e . getStackTrace () , java.lang.Thread . currentThread () . getStackTrace () [ NUMBER_CONSTANT ] ) ; java.lang.String str = java.util.Arrays . toString ( trimmed ) ; com.google.common.truth.Truth . assertThat ( str ) . doesNotContain ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( str ) . contains ( STRING_CONSTANT ) ; } }
private static java.lang.String getVersion ( final java.io.File me ) { if ( me == null ) { return STRING_CONSTANT ; } try ( java.util.jar.JarFile jar = new java.util.jar.JarFile ( me ) ) { java.util.jar.Manifest mf = jar . getManifest () ; java.util.jar.Attributes att = mf . getMainAttributes () ; java.lang.String val = att . getValue ( java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION ) ; return val != null ? val : STRING_CONSTANT ; } catch ( java.io.IOException e ) { return STRING_CONSTANT ; } }
@ org.junit.Test public void symlinkText ( ) throws java.lang.Exception { final org.eclipse.jgit.revwalk.RevBlob link = repo . blob ( STRING_CONSTANT ) ; repo . branch ( STRING_CONSTANT ) . commit () . edit ( new org.eclipse.jgit.dircache.DirCacheEditor.PathEdit ( STRING_CONSTANT ) { @ java.lang.Override public void apply ( org.eclipse.jgit.dircache.DirCacheEntry ent ) { ent . setFileMode ( FileMode.SYMLINK ) ; ent . setObjectId ( link ) ; } } ) . create () ; java.lang.String text = buildBlob ( STRING_CONSTANT , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( text ) . isEqualTo ( STRING_CONSTANT ) ; }
@ java.lang.Override public void put ( final K key , V val ) { final com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder < V > h = new com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder <> ( val ) ; h.created = com.google.gerrit.common.TimeUtil . nowMs () ; mem . put ( key , h ) ; executor . execute ( ( ) - > store . put ( key , h ) ) ; }
@ java.lang.Override public void onSuccess ( com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info ) { if ( info . showJobsSummaryPanel () ) { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory () ) ; } if ( info . showJobsPanel () ) { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory ( info ) ) ; } if ( info . showJobsDropDownPanel () ) { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS , new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory ( info ) ) ; } }
protected void renderJson ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.Object src , java.lang.reflect.Type typeOfSrc ) throws java.io.IOException { setApiHeaders ( req , res , com.google.gitiles.FormatType.JSON ) ; res . setStatus ( javax.servlet.http.HttpServletResponse.SC_OK ) ; try ( java.io.Writer writer = com.google.gitiles.BaseServlet . newWriter ( req , res ) ) { newGsonBuilder ( req ) . create () . toJson ( src , typeOfSrc , writer ) ; writer . write ( CHAR_CONS ) ; } }
@ org.junit.Test public void uploadPackSubsetOfBranchesVisibleNotIncludingHead ( ) throws java.lang.Exception { deny ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; allow ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; assertUploadPackRefs ( ( ( r2 ) + STRING_CONSTANT ) , ( ( r2 ) + STRING_CONSTANT ) , ( ( r4 ) + STRING_CONSTANT ) , ( ( r4 ) + STRING_CONSTANT ) , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
public com.google.gerrit.server.git.WorkQueue.Task.State getState () { if ( isCancelled () ) { return com.google.gerrit.server.git.WorkQueue.Task.State.CANCELLED ; } else if ( ( isDone () ) && ( ! ( isPeriodic () ) ) ) { return com.google.gerrit.server.git.WorkQueue.Task.State.DONE ; } else if ( running . get () ) { return com.google.gerrit.server.git.WorkQueue.Task.State.RUNNING ; } final long delay = getDelay ( java.util.concurrent.TimeUnit.MILLISECONDS ) ; if ( delay <= NUMBER_CONSTANT ) { return com.google.gerrit.server.git.WorkQueue.Task.State.READY ; } return com.google.gerrit.server.git.WorkQueue.Task.State.SLEEPING ; }
@ java.lang.Override public com.google.gerrit.extensions.client.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.client.Project.NameKey project , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) { try { com.google.gerrit.server.change.ChangeKindCacheImpl.Key key = new com.google.gerrit.server.change.ChangeKindCacheImpl.Key ( prior , next , useRecursiveMerge ) ; return new com.google.gerrit.server.change.ChangeKindCacheImpl.Loader ( key , repoManager , project , repo , rw ) . call () ; } catch ( java.io.IOException e ) { com.google.gerrit.server.change.ChangeKindCacheImpl.log . warn ( ( ( ( STRING_CONSTANT + ( next . name () ) ) + STRING_CONSTANT ) + project ) , e ) ; return com.google.gerrit.extensions.client.ChangeKind.REWORK ; } }
@ org.junit.Test public void listProjects ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey someProject = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; com.google.gerrit.acceptance.GitUtil . createProject ( sshSession , someProject . get () ) ; com.google.gerrit.acceptance.RestResponse r = GET ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ProjectInfo > result = com.google.gerrit.acceptance.rest.project.ListProjectsIT . toProjectInfoMap ( r ) ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjects ( java.util.Arrays . asList ( allUsers , someProject , project ) , result . values () ) ; }
@ org.junit.Test public void testListDrafts ( ) throws java.lang.Exception { assertListDrafts ( revRes1 , java.util.Collections . < java.lang.String , java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchLineComment > > emptyMap () ) ; assertListDrafts ( revRes2 , com.google.common.collect.ImmutableMap . of ( STRING_CONSTANT , com.google.common.collect.Lists . newArrayList ( plc4 , plc5 ) ) ) ; }
public void login ( final com.google.gerrit.server.account.AuthResult res , final boolean rememberMe ) { final com.google.gerrit.reviewdb.Account.Id id = res . getAccountId () ; final com.google.gerrit.reviewdb.AccountExternalId.Key identity = res . getExternalId () ; if ( ( val ) != null ) { manager . destroy ( key ) ; } key = manager . createKey ( id ) ; val = manager . createVal ( key , id , rememberMe , identity , null ) ; saveCookie () ; }
@ java.lang.Override public void run () { try { future . get () ; } catch ( java.lang.InterruptedException e ) { fail ( project , e ) ; } catch ( java.util.concurrent.ExecutionException e ) { fail ( project , e ) ; } catch ( java.lang.RuntimeException e ) { failAndThrow ( project , e ) ; } catch ( java.lang.Error e ) { failAndThrow ( project , e ) ; } finally { projTask . update ( NUMBER_CONSTANT ) ; } }
@ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { event . preventDefault () ; event . stopPropagation () ; select () ; if ( ( com.google.gerrit.client.Gerrit . isSignedIn () ) && ( ( urlType ) != null ) ) { com.google.gerrit.reviewdb.client.AccountGeneralPreferences pref = com.google.gerrit.client.Gerrit . getUserAccount () . getGeneralPreferences () ; pref . setDownloadUrl ( urlType ) ; com.google.gerrit.client.account.Util.ACCOUNT_SVC . changePreferences ( pref , new com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > () { @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) {} @ java.lang.Override public void onSuccess ( com.google.gwtjsonrpc.common.VoidResult result ) {} } ) ; } }
private java.util.Set < java.lang.Integer > removableReviewers ( com.google.gerrit.client.changes.ChangeInfo change ) { java.util.Set < java.lang.Integer > result = new java.util.HashSet ( change . removable_reviewers () . length () ) ; for ( int i = NUMBER_CONSTANT ; i < ( change . removable_reviewers () . length () ) ; i ++ ) { result . add ( change . removable_reviewers () . get ( i ) . _account_id () ) ; } return result ; }
private static org.apache.lucene.search.Query notTimestampQuery ( com.google.gerrit.server.index.TimestampRangePredicate < com.google.gerrit.server.query.change.ChangeData > r ) throws com.google.gerrit.server.query.QueryParseException { if ( ( r . getMinTimestamp () . getTime () ) == NUMBER_CONSTANT ) { return org.apache.lucene.search.NumericRangeQuery . newIntRange ( r . getField () . getName () , com.google.gerrit.lucene.LuceneChangeIndex . toIndexTime ( r . getMaxTimestamp () ) , null , true , true ) ; } throw new com.google.gerrit.server.query.QueryParseException ( ( STRING_CONSTANT + r ) ) ; }
@ org.junit.Test public void testEmpty1 () { final java.lang.String name = STRING_CONSTANT ; final com.google.gerrit.server.patch.PatchListEntry e = com.google.gerrit.server.patch.PatchListEntry . empty ( name ) ; org.junit.Assert . assertNull ( e . getOldName () ) ; org.junit.Assert . assertEquals ( name , e . getNewName () ) ; org.junit.Assert . assertSame ( Patch.PatchType.UNIFIED , e . getPatchType () ) ; org.junit.Assert . assertSame ( Patch.ChangeType.MODIFIED , e . getChangeType () ) ; org.junit.Assert . assertTrue ( e . getEdits () . isEmpty () ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byProjectCommits ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { int n = ( indexConfig . maxTerms () ) - NUMBER_CONSTANT ; com.google.common.base.Preconditions . checkArgument ( ( ( hashes . size () ) <= n ) , STRING_CONSTANT , n ) ; return query ( com.google.gerrit.server.query.Predicate . and ( com.google.gerrit.server.query.change.InternalChangeQuery . project ( project ) , com.google.gerrit.server.query.Predicate . or ( com.google.gerrit.server.query.change.InternalChangeQuery . commits ( hashes ) ) ) ) ; }
private java.util.List < java.lang.String > scan ( com.google.gerrit.reviewdb.client.Account.Id userId , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { java.util.List < java.lang.String > r = new java.util.ArrayList <> () ; for ( com.google.gerrit.reviewdb.client.AccountPatchReview w : db . get () . accountPatchReviews () . byReviewer ( userId , psId ) ) { r . add ( w . getKey () . getPatchKey () . getFileName () ) ; } return r ; }
private static java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > predicates ( java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > ids ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > r = com.google.common.collect.Lists . newArrayListWithCapacity ( ids . size () ) ; for ( com.google.gerrit.reviewdb.client.Change.Id id : ids ) { r . add ( new com.google.gerrit.server.query.change.LegacyChangeIdPredicate ( id ) ) ; } return r ; }
@ org.junit.Test public void testCarriageReturnIgnoringBinaries ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithPseudoBinaries () ; java.util.Set < java.lang.String > ignoreFiles = com.google.common.collect.Sets . newHashSet ( new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator . performValidation ( repo , c , ignoreFiles ) ; com.google.common.truth.Truth . assertThat ( m ) . isEmpty () ; }
public boolean canAbandon () { return ( ( ( ( isOwner () ) || ( getRefControl () . isOwner () ) ) || ( getProjectControl () . isOwner () ) ) || ( getCurrentUser () . getCapabilities () . canAdministrateServer () ) ) || ( getRefControl () . canAbandon () ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.extensions.api.GerritApi . class ) . to ( com.google.gerrit.server.api.GerritApiImpl . class ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; }
@ org.junit.Test public void testWithSymlink ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithSymlink ( rw ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator . performValidation ( repo , rw . parseCommit ( c ) , rw ) ; java.util.Set < java.lang.String > expected = com.google.common.collect.ImmutableSet . of ( STRING_CONSTANT , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; } }
private com.google.gerrit.reviewdb.client.ChangeMessage message ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx , com.google.gerrit.reviewdb.client.PatchSet.Id psId , java.lang.String body ) { com.google.common.base.Preconditions . checkNotNull ( psId ) ; java.lang.String uuid ; try { uuid = com.google.gerrit.server.ChangeUtil . messageUUID ( ctx . getDb () ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return null ; } com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage ( new com.google.gerrit.reviewdb.client.ChangeMessage.Key ( psId . getParentKey () , uuid ) , ctx . getAccountId () , ctx . getWhen () , psId ) ; m . setMessage ( body ) ; return m ; }
protected synchronized void startThread ( final com.google.gerrit.sshd.BaseCommand.CommandRunnable thunk ) { final com.google.gerrit.sshd.BaseCommand.TaskThunk tt = new com.google.gerrit.sshd.BaseCommand.TaskThunk ( thunk ) ; if ( ( isAdminHighPriorityCommand () ) && ( userProvider . get () . getCapabilities () . canAdministrateServer () ) ) { new java.lang.Thread ( tt , tt . toString () ) . start () ; } else { task = executor . submit ( tt ) ; } }
@ java.lang.Override protected boolean onSave ( org.eclipse.jgit.lib.CommitBuilder commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( ( commit . getMessage () ) == null ) || ( STRING_CONSTANT . equals ( commit . getMessage () ) ) ) { commit . setMessage ( STRING_CONSTANT ) ; } saveConfig ( fileName , cfg ) ; return true ; }
public com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope [] getDefaultScopes () { if ( ( ( scopes ) == null ) || ( ( scopes . get ( STRING_CONSTANT ) ) == null ) ) { return new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope [ NUMBER_CONSTANT ] ; } else { return scopes . get ( STRING_CONSTANT ) . toArray ( new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope [ NUMBER_CONSTANT ] ) ; } }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onSave ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.changes.ChangeApi . topic ( project . get () , psId . getParentKey () . get () , input . getValue () . trim () , new com.google.gerrit.client.rpc.GerritCallback < java.lang.String > () { @ java.lang.Override public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( project , psId ) ) ; } } ) ; onCancel ( null ) ; }
@ com.google.common.annotations.VisibleForTesting static java.lang.String getTargetDisplayName ( java.lang.String target ) { if ( ( target . length () ) <= ( com.google.gitiles.TreeSoyData.MAX_SYMLINK_TARGET_LENGTH ) ) { return target ; } int lastSlash = target . lastIndexOf ( CHAR_CONS ) ; return lastSlash >= NUMBER_CONSTANT ? STRING_CONSTANT + ( target . substring ( lastSlash ) ) : target ; }
@ java.lang.Override protected org.eclipse.jgit.lib.CommitBuilder applyImpl ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectInserter ins , org.eclipse.jgit.lib.ObjectId curr ) throws com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder () ; cb . setMessage ( STRING_CONSTANT ) ; try { return storeCommentsInNotes ( rw , ins , curr , cb ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { org.apache.lucene.index.Term id = com.google.gerrit.lucene.QueryBuilder . idTerm ( cd ) ; try { com.google.common.util.concurrent.Futures . allAsList ( openIndex . delete ( id ) , closedIndex . delete ( id ) ) . get () ; } catch ( java.util.concurrent.ExecutionException | java.lang.InterruptedException e ) { throw new java.io.IOException ( e ) ; } }
@ java.lang.Override public java.io.File get () { if ( ! ( ready ) ) { synchronized ( dataDir ) { if ( ! ( ready ) ) { if ( ( ! ( dataDir . exists () ) ) && ( ! ( dataDir . mkdirs () ) ) ) { throw new com.google.inject.ProvisionException ( java.lang.String . format ( STRING_CONSTANT , dataDir . getAbsolutePath () , getName () ) ) ; } ready = true ; } } } return dataDir ; }
protected void startThread ( final com.google.gerrit.sshd.BaseCommand.CommandRunnable thunk ) { final com.google.gerrit.sshd.BaseCommand.TaskThunk tt = new com.google.gerrit.sshd.BaseCommand.TaskThunk ( thunk ) ; if ( ( isAdminHighPriorityCommand () ) && ( user . getCapabilities () . canAdministrateServer () ) ) { new java.lang.Thread ( tt , tt . toString () ) . start () ; } else { task . set ( executor . submit ( tt ) ) ; } }
public com.google.gerrit.acceptance.RestResponse post ( java.lang.String endPoint , java.lang.Object content ) throws java.io.IOException { org.apache.http.client.fluent.Request post = org.apache.http.client.fluent.Request . Post ( ( ( ( url ) + STRING_CONSTANT ) + endPoint ) ) ; if ( content != null ) { post . addHeader ( new org.apache.http.message.BasicHeader ( STRING_CONSTANT , STRING_CONSTANT ) ) ; post . body ( new org.apache.http.entity.StringEntity ( OutputFormat.JSON_COMPACT . newGson () . toJson ( content ) , java.nio.charset.StandardCharsets.UTF_8 ) ) ; } return execute ( post ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > closed ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > dbProvider ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > ( NUMBER_CONSTANT ) ; for ( final com.google.gerrit.reviewdb.client.Change.Status e : Change.Status . values () ) { if ( e . isClosed () ) { r . add ( new com.google.gerrit.server.query.change.ChangeStatusPredicate ( e ) ) ; } } return ( r . size () ) == NUMBER_CONSTANT ? r . get ( NUMBER_CONSTANT ) : or ( r ) ; }
private com.google.gerrit.acceptance.server.mail.StagedChange stageChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setApiUser ( admin ) ; gApi . changes () . id ( sc.changeId ) . revision ( STRING_CONSTANT ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . approve () ) ; gApi . changes () . id ( sc.changeId ) . revision ( STRING_CONSTANT ) . submit () ; sender . clear () ; return sc ; }
@ org.junit.Test public void deleteBranchesNotFoundContinue ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput () ; java.util.List < java.lang.String > branches = com.google.common.collect.Lists . newArrayList ( STRING_CONSTANT ) ; branches . addAll ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; input.branches = branches ; try { project () . deleteBranches ( input ) ; fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceConflictException e ) { com.google.common.truth.Truth . assertThat ( e ) . hasMessageThat () . isEqualTo ( errorMessageForBranches ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) ) ) ; } assertBranchesDeleted ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; }
private com.google.gwt.user.client.ui.Widget createEditIcon () { com.google.gerrit.reviewdb.client.PatchSet.Id id = ( idActive . isBaseOrAutoMerge () ) ? other.idActive . asPatchSetId () : idActive . asPatchSetId () ; com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor ( new com.google.gwt.user.client.ui.ImageResourceRenderer () . render ( Gerrit.RESOURCES . edit () ) , ( STRING_CONSTANT + ( com.google.gerrit.client.Dispatcher . toEditScreen ( project , id , path ) ) ) ) ; anchor . setTitle ( PatchUtil.C . edit () ) ; return anchor ; }
private static java.lang.String metricNameOf ( com.google.gerrit.extensions.registration.DynamicMap.Entry < com.google.common.cache.Cache < , > > e ) { if ( STRING_CONSTANT . equals ( e . getPluginName () ) ) { return e . getExportName () ; } return java.lang.String . format ( STRING_CONSTANT , e . getPluginName () , e . getExportName () ) ; }
@ org.junit.Test public void submitWithFastForward ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead () ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange () ; submit ( change . getChangeId () ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead () ; com.google.common.truth.Truth . assertThat ( head . getId () ) . isEqualTo ( change . getCommitId () ) ; com.google.common.truth.Truth . assertThat ( head . getParent ( NUMBER_CONSTANT ) ) . isEqualTo ( oldHead ) ; assertSubmitter ( change . getChangeId () , NUMBER_CONSTANT ) ; }
public static com.google.gerrit.reviewdb.client.Change newChange ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.IdentifiedUser user , int id ) { com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id ( id ) ; com.google.gerrit.reviewdb.client.Change c = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change.Key ( STRING_CONSTANT ) , changeId , user . getAccount () . getId () , new com.google.gerrit.reviewdb.client.Branch.NameKey ( project , STRING_CONSTANT ) , com.google.gerrit.server.util.TimeUtil . nowTs () ) ; com.google.gerrit.testutil.TestChanges . incrementPatchSet ( c ) ; return c ; }
private static java.lang.String describe ( com.google.gerrit.server.CurrentUser user ) { if ( user . isIdentifiedUser () ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId () . toString () ; } if ( user instanceof com.google.gerrit.server.query.change.SingleGroupUser ) { return STRING_CONSTANT + ( user . getEffectiveGroups () . getKnownGroups () . iterator () . next () . toString () ) ; } return user . toString () ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewriteImpl ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.server.query.QueryParseException { com.google.gerrit.server.index.change.ChangeIndex index = indexes . getSearchIndex () ; org.eclipse.jgit.util.MutableInteger leafTerms = new org.eclipse.jgit.util.MutableInteger () ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewriteImpl ( in , index , opts , leafTerms ) ; if ( ( in == out ) || ( out instanceof com.google.gerrit.server.index.IndexPredicate ) ) { return new com.google.gerrit.server.index.change.IndexedChangeQuery ( index , out , opts ) ; } else if ( out == null ) { return in ; } else { return out ; } }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi revert ( com.google.gerrit.extensions.api.changes.RevertInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changeApi . id ( revert . get () . apply ( change , in ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.common.errors.EmailException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit , int maxPages , int maxTerms ) { return new com.google.gerrit.server.index.AutoValue_IndexConfig ( com.google.gerrit.server.index.IndexConfig . checkLimit ( maxLimit , STRING_CONSTANT , java.lang.Integer.MAX_VALUE ) , com.google.gerrit.server.index.IndexConfig . checkLimit ( maxPages , STRING_CONSTANT , java.lang.Integer.MAX_VALUE ) , com.google.gerrit.server.index.IndexConfig . checkLimit ( maxTerms , STRING_CONSTANT , java.lang.Integer.MAX_VALUE ) ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.reviewdb.AccountGroup.UUID groupId ) throws com.google.gerrit.common.errors.NoSuchGroupException { final com.google.gerrit.reviewdb.AccountGroup group = groupCache . get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.common.errors.NoSuchGroupException ( groupId ) ; } return new com.google.gerrit.server.account.GroupControl ( groupCache , user . get () , group ) ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestInfo maniphestInfo ( int taskId ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { java.util.Map < java.lang.String , java.lang.Object > params = new java.util.HashMap <> () ; params . put ( STRING_CONSTANT , taskId ) ; com.google.gson.JsonElement callResult = conduitConnection . call ( STRING_CONSTANT , params , token ) ; com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestInfo result = gson . fromJson ( callResult , com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestInfo . class ) ; return result ; }
public com.google.common.base.Optional < com.google.gerrit.server.edit.ChangeEdit > byChange ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gwtorm.server.OrmException , java.io.IOException { try { return byChange ( changeControlFactory . controlFor ( db . get () , change , user . get () ) ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new java.io.IOException ( e ) ; } }
@ org.junit.Test @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void testChildren () { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.Predicate < java.lang.String > n = com.google.gerrit.server.query.Predicate . or ( a , b ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , n . getChildCount () ) ; org.junit.Assert . assertSame ( a , n . getChild ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , n . getChild ( NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testReplaceOverlappingAtFirstCharFirstMatch () { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . html ( STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.RawFindReplace ab1 = new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.RawFindReplace ab2 = new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( ab1 , ab2 ) ) . asString () ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( ab2 , ab1 ) ) . asString () ) . isEqualTo ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testAppend_SafeHtml () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( ( ( com.google.gwtexpui.safehtml.client.SafeHtml ) ( null ) ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; org.junit.Assert . assertSame ( b , b . append ( new com.google.gwtexpui.safehtml.client.SafeHtmlString ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertSame ( b , b . append ( new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () . append ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ java.lang.Override public org.scribe.model.Token extract ( java.lang.String response ) { org.scribe.utils.Preconditions . checkEmptyString ( response , STRING_CONSTANT ) ; java.util.regex.Matcher matcher = accessTokenPattern . matcher ( response ) ; if ( matcher . find () ) { return new org.scribe.model.Token ( matcher . group ( NUMBER_CONSTANT ) , STRING_CONSTANT , response ) ; } throw new org.scribe.exceptions.OAuthException ( ( STRING_CONSTANT + response ) ) ; }
protected void renderTextError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String message ) throws java.io.IOException { res . setStatus ( statusCode ) ; setApiHeaders ( req , res , com.google.gitiles.FormatType.TEXT ) ; setCacheHeaders ( req , res ) ; try ( java.io.Writer out = com.google.gitiles.BaseServlet . newWriter ( req , res ) ) { out . write ( message ) ; } }
private java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > safeGetApprovals ( com.google.gerrit.server.git.CodeReviewCommit n ) { try { return approvalsUtil . byPatchSet ( db . get () , n . notes () , n.patchsetId ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.git.MergeUtil.log . error ( ( STRING_CONSTANT + ( n.patchsetId ) ) , e ) ; return java.util.Collections . emptyList () ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void testChildren () { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.Predicate < java.lang.String > n = com.google.gerrit.server.query.Predicate . or ( a , b ) ; assertEquals ( NUMBER_CONSTANT , n . getChildCount () ) ; assertSame ( a , n . getChild ( NUMBER_CONSTANT ) ) ; assertSame ( b , n . getChild ( NUMBER_CONSTANT ) ) ; }
private void updateAccountInNoteDb ( org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , allUsersName , allUsersRepo ) ; org.eclipse.jgit.lib.PersonIdent ident = serverIdent . get () ; md . getCommitBuilder () . setAuthor ( ident ) ; md . getCommitBuilder () . setCommitter ( ident ) ; com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig ( account . getId () ) ; accountConfig . load ( allUsersRepo ) ; accountConfig . setAccount ( account ) ; accountConfig . commit ( md ) ; }
@ java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.AddIncludedGroups.PutIncludedGroup.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddIncludedGroups.Input in = new com.google.gerrit.server.group.AddIncludedGroups.Input () ; in.groups = com.google.common.collect.ImmutableList . of ( id ) ; java.util.List < com.google.gerrit.server.group.GroupJson.GroupInfo > list = put . apply ( resource , in ) ; if ( ( list . size () ) == NUMBER_CONSTANT ) { return list . get ( NUMBER_CONSTANT ) ; } throw new java.lang.IllegalStateException () ; }
io.searchbox.client.http.JestHttpClient build () { io.searchbox.client.JestClientFactory factory = new io.searchbox.client.JestClientFactory () ; factory . setHttpClientConfig ( new io.searchbox.client.config.HttpClientConfig.Builder ( url ) . multiThreaded ( true ) . discoveryEnabled ( false ) . discoveryFrequency ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.MINUTES ) . build () ) ; return ( ( io.searchbox.client.http.JestHttpClient ) ( factory . getObject () ) ) ; }
public void testPattern () { com.googlesource.gerrit.plugins.hooks.its.ItsConfig itsConfig = createItsConfig () ; org.easymock.EasyMock . expect ( serverConfig . getString ( STRING_CONSTANT , null , STRING_CONSTANT ) ) . andReturn ( null ) . atLeastOnce () ; org.easymock.EasyMock . expect ( serverConfig . getString ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) . andReturn ( STRING_CONSTANT ) . atLeastOnce () ; replayMocks () ; assertEquals ( STRING_CONSTANT , STRING_CONSTANT , itsConfig . getIssuePattern () . pattern () ) ; }
private com.google.inject.Injector createSshInjector () { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > () ; modules . add ( new com.google.gerrit.sshd.SshModule () ) ; if ( slave ) { modules . add ( new com.google.gerrit.sshd.commands.SlaveCommandModule () ) ; } else { modules . add ( new com.google.gerrit.sshd.commands.MasterCommandModule () ) ; } return sysInjector . createChildInjector ( modules ) ; }
private boolean canReadCommitFromVisibleRef ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return isMergedIntoVisibleRef ( repo , rw , commit , repo . getAllRefs () . values () ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String . format ( STRING_CONSTANT , commit . name () , getProject () . getNameKey () ) ; com.google.gerrit.server.project.ProjectControl.log . error ( msg , e ) ; return false ; } }
@ java.lang.Override protected void onRequestSuggestions ( com.google.gerrit.client.ui.Request request , com.google.gerrit.client.ui.Callback done ) { java.util.LinkedList < com.google.gerrit.client.ui.CherryPickDialog.BranchSuggestion > suggestions = new java.util.LinkedList < com.google.gerrit.client.ui.CherryPickDialog.BranchSuggestion > () ; for ( final com.google.gerrit.client.projects.BranchInfo b : branches ) { if ( b . ref () . contains ( request . getQuery () ) ) { suggestions . add ( new com.google.gerrit.client.ui.CherryPickDialog.BranchSuggestion ( b ) ) ; } } done . onSuggestionsReady ( request , new com.google.gerrit.client.ui.Response ( suggestions ) ) ; }
@ org.junit.Test public void testAppend_int () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . append ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . append ( ( - NUMBER_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ java.lang.Override public java.lang.String format ( java.lang.String projectName , java.lang.String revision , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) throws java.io.UnsupportedEncodingException { com.googlesource.gerrit.plugins.xdocs.formatter.MarkdownFormatter f = new com.googlesource.gerrit.plugins.xdocs.formatter.MarkdownFormatter () ; if ( ! ( cfg . getBoolean ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_ALLOW_HTML , false ) ) ) { f . suppressHtml () ; } f . setCss ( getCss ( projectName ) ) ; byte [] b = f . markdownToDocHtml ( raw , java.nio.charset.StandardCharsets.UTF_8 . name () ) ; return new java.lang.String ( b , java.nio.charset.StandardCharsets.UTF_8 ) ; }
private com.google.gerrit.server.git.ReceiveCommits.RequestState requestState ( java.lang.Thread caller ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( caller == ( java.lang.Thread . currentThread () ) ) { return new com.google.gerrit.server.git.ReceiveCommits.RequestState ( db , repo , rp . getRevWalk () ) ; } return new com.google.gerrit.server.git.ReceiveCommits.RequestState ( project . getNameKey () ) ; }
public void delete ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { ensurePatchSetMatches ( ps . getId () , update ) ; com.google.common.base.Preconditions . checkArgument ( ps . isDraft () , STRING_CONSTANT , ps . getId () ) ; update . setPatchSetState ( PatchSetState.DELETED ) ; db . patchSets () . delete ( java.util.Collections . singleton ( ps ) ) ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.FileInfo > m ) { files . set ( base , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , rev . _number () ) , getProject () , style , reply , fileTableMode , ( ( edit ) != null ) ) ; files . setValue ( m , myLastReply , ( comments != null ? comments . get ( NUMBER_CONSTANT ) : null ) , ( drafts != null ? drafts . get ( NUMBER_CONSTANT ) : null ) ) ; }
protected void removeGlobalCapabilities ( com.google.gerrit.reviewdb.client.AccountGroup.UUID id , java.lang.Iterable < java.lang.String > capabilityNames ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache . checkedGet ( allProjects ) . getConfig () ; for ( java.lang.String capabilityName : capabilityNames ) { com.google.gerrit.server.project.Util . remove ( cfg , capabilityName , id ) ; } saveProjectConfig ( allProjects , cfg ) ; }
@ org.junit.Test public void createAnnotatedTagNotAllowed ( ) throws java.lang.Exception { block ( ( ( org.eclipse.jgit.lib.Constants.R_TAGS ) + STRING_CONSTANT ) , Permission.CREATE_TAG , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput () ; input.ref = STRING_CONSTANT ; input.message = STRING_CONSTANT ; exception . expect ( com.google.gerrit.extensions.restapi.AuthException . class ) ; exception . expectMessage ( ( ( STRING_CONSTANT + ( org.eclipse.jgit.lib.Constants.R_TAGS ) ) + STRING_CONSTANT ) ) ; tag ( input.ref ) . create ( input ) ; }
@ java.lang.Override protected void configureServlets () { rpc ( com.google.gerrit.server.rpc.AccountServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.AccountSecurityImpl . class ) ; rpc ( com.google.gerrit.server.rpc.GroupAdminServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ChangeDetailServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ChangeListServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ChangeManageServiceImpl . class ) ; rpc ( com.google.gerrit.server.patch.PatchDetailServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ProjectAdminServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.SuggestServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.SystemInfoServiceImpl . class ) ; }
public static void suggest ( java.lang.String prefix , int limit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > cb ) { com.google.gerrit.client.projects.ProjectMap . projects () . addParameter ( STRING_CONSTANT , prefix ) . addParameter ( STRING_CONSTANT , limit ) . addParameterRaw ( STRING_CONSTANT , STRING_CONSTANT ) . addParameterTrue ( STRING_CONSTANT ) . background () . get ( com.google.gerrit.client.rpc.NativeMap . copyKeysIntoChildren ( cb ) ) ; }
@ org.junit.Test public void testUnblockMoreSpecificRef_Fails () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canUpdate () ) ; }
private java.lang.String toHex ( final byte [] b ) { final java.lang.StringBuilder sec = new java.lang.StringBuilder () ; for ( byte c : b ) { final int u = ( c > > NUMBER_CONSTANT ) & NUMBER_CONSTANT ; final int l = c & NUMBER_CONSTANT ; sec . append ( org.apache.commons.net.smtp.AuthSMTPClient.hexchar [ u ] ) ; sec . append ( org.apache.commons.net.smtp.AuthSMTPClient.hexchar [ l ] ) ; } return sec . toString () ; }
private static java.lang.String getParameter ( java.lang.String name ) { java.util.List < java.lang.String > values = com.googlesource.gerrit.plugins.imagare.client.ImageUploadScreen . getParameters () . get ( name ) ; if ( values == null ) { return null ; } return values . get ( ( ( values . size () ) - NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void defaultMessage ( ) throws java.lang.Exception { java.lang.String changeId = createChange () . getChangeId () ; com.google.gerrit.extensions.common.ChangeInfo c = get ( changeId ) ; com.google.common.truth.Truth . assertThat ( c.messages ) . isNotNull () ; com.google.common.truth.Truth . assertThat ( c.messages ) . hasSize ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( c.messages . iterator () . next () . message ) . isEqualTo ( STRING_CONSTANT ) ; }
private static void populateBottomMenu () { final com.google.gwt.user.client.ui.RootPanel btmmenu = com.google.gwt.user.client.ui.RootPanel . get ( STRING_CONSTANT ) ; final com.google.gwt.user.client.ui.Label keyHelp = new com.google.gwt.user.client.ui.Label ( com.google.gerrit.client.Gerrit.C . keyHelp () ) ; keyHelp . setStyleName ( STRING_CONSTANT ) ; btmmenu . add ( keyHelp ) ; final java.lang.String vs = com.google.gerrit.client.Gerrit . getVersion () ; final com.google.gwt.user.client.ui.HTML version = new com.google.gwt.user.client.ui.HTML ( com.google.gerrit.client.Gerrit.M . poweredBy ( vs ) ) ; version . setStyleName ( STRING_CONSTANT ) ; btmmenu . add ( version ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { org.eclipse.jgit.internal.storage.dfs.DfsRepository r = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ; repo = new org.eclipse.jgit.junit.TestRepository ( r ) ; servlet = new com.google.gitiles.PathServlet ( new com.google.gitiles.TestGitilesAccess ( repo . getRepository () ) , com.google.gitiles.PathServletTest.RENDERER , TestGitilesUrls.URLS ) ; }
public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink ( int index , com.google.gerrit.client.patches.PatchScreen.Type patchType ) { int previousPatchIndex = getPreviousPatch ( index , PREFERENCE_VALIDATOR ) ; if ( previousPatchIndex < NUMBER_CONSTANT ) { return null ; } return createLink ( previousPatchIndex , patchType , com.google.gwtexpui.safehtml.client.SafeHtml . asis ( Util.C . prevPatchLinkIcon () ) , null ) ; }
@ java.lang.Override protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision () ; if ( rev == null ) { return; } try ( org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( reader ) ; com.google.gerrit.server.notedb.DraftCommentNotesParser parser = new com.google.gerrit.server.notedb.DraftCommentNotesParser ( getChangeId () , walk , rev , repoManager , draftsProject , author ) ) { parser . parseDraftComments () ; buildCommentTable ( draftBaseComments , parser.draftBaseComments ) ; buildCommentTable ( draftPsComments , parser.draftPsComments ) ; noteMap = parser.noteMap ; } }
private com.google.gerrit.extensions.client.SubmitType getSubmitType ( com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory . create ( cd ) . setPatchSet ( patchSet ) . getSubmitType () ; if ( ( rec.status ) != ( SubmitTypeRecord.Status.OK ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_CONSTANT + rec ) ) ; } return rec.type ; }
private java.util.Map < com.google.gerrit.reviewdb.client.AccountGroup.UUID , com.google.gerrit.reviewdb.client.AccountGroupById > getIncludedGroups ( final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.AccountGroup.UUID , com.google.gerrit.reviewdb.client.AccountGroupById > groups = com.google.common.collect.Maps . newHashMap () ; for ( com.google.gerrit.reviewdb.client.AccountGroupById g : db . get () . accountGroupById () . byGroup ( groupId ) ) { groups . put ( g . getIncludeUUID () , g ) ; } return groups ; }
static com.google.gerrit.server.notedb.ChangeNotesState empty ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.AutoValue_ChangeNotesState ( null , change . getId () , null , com.google.common.collect.ImmutableSet . of () , com.google.common.collect.ImmutableSet . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.gerrit.server.ReviewerSet . empty () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableListMultimap . of () , com.google.common.collect.ImmutableListMultimap . of () , null ) ; }
private java.util.Map < com.google.gerrit.reviewdb.client.Change.Key , com.google.gerrit.reviewdb.client.Change > openChangesByKey ( com.google.gerrit.reviewdb.client.Branch.NameKey branch ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Change.Key , com.google.gerrit.reviewdb.client.Change > r = new java.util.HashMap <> () ; for ( com.google.gerrit.reviewdb.client.Change c : db . changes () . byBranchOpenAll ( branch ) ) { r . put ( c . getKey () , c ) ; } return r ; }
public java.util.Map < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , java.util.Set < com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType > > getProjectWatches ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = repoManager . openRepository ( allUsersName ) ) { com.google.gerrit.server.account.WatchConfig watchConfig = new com.google.gerrit.server.account.WatchConfig ( accountId ) ; watchConfig . load ( git ) ; return watchConfig . getProjectWatches () ; } }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.common.ChangeHookRunner . class ) ; bind ( com.google.gerrit.common.ChangeHooks . class ) . to ( com.google.gerrit.common.ChangeHookRunner . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.extensions.events.NewProjectCreatedListener . class ) . to ( com.google.gerrit.common.ChangeHookRunner . class ) ; listener () . to ( com.google.gerrit.common.ChangeHookRunner . class ) ; }
@ com.google.gerrit.common.Nullable protected org.eclipse.jgit.lib.ObjectId getObjectId ( java.lang.String fileName ) throws java.io.IOException { if ( ( revision ) == null ) { return null ; } try ( org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk . forPath ( reader , fileName , revision . getTree () ) ) { if ( tw != null ) { return tw . getObjectId ( NUMBER_CONSTANT ) ; } } return null ; }
@ org.junit.Test public void testHostname () { org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.util.SocketUtil . hostname ( new java.net.InetSocketAddress ( NUMBER_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.util.SocketUtil . hostname ( new java.net.InetSocketAddress ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.util.SocketUtil . hostname ( java.net.InetSocketAddress . createUnresolved ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ) ; }
private java.util.List < com.google.gerrit.server.query.Predicate < T > > children ( final org.antlr.runtime.tree.Tree r ) throws com.google.gerrit.server.query.QueryParseException , java.lang.IllegalArgumentException { java.util.List < com.google.gerrit.server.query.Predicate < T > > p = new java.util.ArrayList ( r . getChildCount () ) ; for ( int i = NUMBER_CONSTANT ; i < ( r . getChildCount () ) ; i ++ ) { p . add ( toPredicate ( r . getChild ( i ) ) ) ; } return p ; }
public void run () { synchronized ( cleanup ) { run = true ; for ( final java.util.Iterator < java.lang.Runnable > i = cleanup . iterator () ; i . hasNext () ; ) { try { i . next () . run () ; } catch ( java.lang.Throwable err ) { com.google.gerrit.server.RequestCleanup.log . error ( STRING_CONSTANT , err ) ; } i . remove () ; } } }
@ java.lang.Override public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws java.lang.Exception { com.google.gerrit.server.git.CodeReviewCommit c = composeGitlinksCommit ( branch ) ; if ( c != null ) { ctx . addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( c . getParent ( NUMBER_CONSTANT ) , c , branch . get () ) ) ; addBranchTip ( branch , c ) ; } }
@ org.junit.Test public void deleteBranchesNotFoundContinue ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput () ; java.util.List < java.lang.String > branches = com.google.common.collect.Lists . newArrayList ( STRING_CONSTANT ) ; branches . addAll ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; input.branches = branches ; try { project () . deleteBranches ( input ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceConflictException e ) { com.google.common.truth.Truth . assertThat ( e ) . hasMessageThat () . isEqualTo ( errorMessageForBranches ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) ) ) ; } assertBranchesDeleted ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; }
public java.util.List < com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition.Item > getTransitions ( java.lang.String issueKey ) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi < com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition > api = apiBuilder . get ( com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition . class , STRING_CONSTANT ) ; return java.util.Arrays . asList ( api . doGet ( ( ( STRING_CONSTANT + issueKey ) + STRING_CONSTANT ) , java.net.HttpURLConnection.HTTP_OK ) . getTransitions () ) ; }
private org.eclipse.jgit.lib.Ref getBranchRef ( com.google.gerrit.reviewdb.Project.NameKey projectName ) { try { final org.eclipse.jgit.lib.Repository r = repoManager . openRepository ( projectName ) ; try { return r . getRef ( showBranch ) ; } finally { r . close () ; } } catch ( java.io.IOException ioe ) { return null ; } }
public static java.util.List < com.google.gitiles.blame.Region > loadBlame ( com.google.gitiles.blame.BlameCacheImpl.Key key , org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { try ( org.eclipse.jgit.blame.BlameGenerator gen = new org.eclipse.jgit.blame.BlameGenerator ( repo , key.path ) ) { gen . push ( null , key.commitId ) ; return com.google.gitiles.blame.BlameCacheImpl . loadRegions ( gen ) ; } }
@ java.lang.Override public boolean equals ( final java.lang.Object other ) { if ( other == null ) return false ; if ( ( getClass () ) == ( other . getClass () ) ) { final com.google.gerrit.server.query.OperatorPredicate < > p = ( ( com.google.gerrit.server.query.OperatorPredicate < > ) ( other ) ) ; return ( getOperator () . equals ( p . getOperator () ) ) && ( getValue () . equals ( p . getValue () ) ) ; } return false ; }
private void retryIfAllowed ( int failedConnections ) throws java.lang.InterruptedException { if ( failedConnections < ( ( maxTries ) - NUMBER_CONSTANT ) ) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log . info ( STRING_CONSTANT ) ; java.lang.Thread . sleep ( waitTime ) ; } else { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log . error ( ( ( STRING_CONSTANT + ( maxTries ) ) + STRING_CONSTANT ) ) ; setOnline ( false ) ; } }
private void sendCreateChange ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gerrit.common.errors.EmailException { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory . create ( ctx . getProject () , change . getId () ) ; cm . setFrom ( ctx . getAccountId () ) ; cm . setPatchSet ( patchSet , patchSetInfo ) ; cm . addReviewers ( recipients . getReviewers () ) ; cm . addExtraCC ( recipients . getCcOnly () ) ; cm . send () ; }
private void init ( final com.google.reviewit.app.Change change ) { android.support.v4.widget.SwipeRefreshLayout swipeRefreshLayout = ( ( android.support.v4.widget.SwipeRefreshLayout ) ( v ( R.id.swipeRefreshLayout ) ) ) ; swipeRefreshLayout . setColorSchemeColors ( R.color.progressBar ) ; swipeRefreshLayout . setRefreshing ( true ) ; swipeRefreshLayout . setOnRefreshListener ( new android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener () { @ java.lang.Override public void onRefresh () { refresh ( change ) ; } } ) ; }
@ org.junit.Test public void copyMinScoreOnRework ( ) throws java.lang.Exception { codeReview . setCopyMinScore ( true ) ; saveLabelConfig () ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; revision ( r ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . reject () ) ; assertApproval ( r , ( - NUMBER_CONSTANT ) ) ; r = amendChange ( r . getChangeId () ) ; assertApproval ( r , ( - NUMBER_CONSTANT ) ) ; }
public com.google.gerrit.common.data.Permission getPermission ( java.lang.String name , boolean create ) { for ( com.google.gerrit.common.data.Permission p : getPermissions () ) { if ( p . getName () . equalsIgnoreCase ( name ) ) { return p ; } } if ( create ) { com.google.gerrit.common.data.Permission p = new com.google.gerrit.common.data.Permission ( name ) ; permissions . add ( p ) ; return p ; } return null ; }
public static java.lang.String getRemoteUser ( javax.servlet.http.HttpServletRequest req , java.lang.String loginHeader ) { if ( com.google.common.net.HttpHeaders.AUTHORIZATION . equals ( loginHeader ) ) { java.lang.String user = com.google.common.base.Strings . emptyToNull ( req . getRemoteUser () ) ; if ( user != null ) { return user ; } java.lang.String auth = req . getHeader ( com.google.common.net.HttpHeaders.AUTHORIZATION ) ; return com.google.gerrit.httpd.RemoteUserUtil . extractUsername ( auth ) ; } return com.google.common.base.Strings . emptyToNull ( req . getHeader ( loginHeader ) ) ; }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.client.OrmException { if ( cd . fastIsVisibleTo ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.Change c = cd . change ( db ) ; if ( ( c != null ) && ( changeControl . controlFor ( c , user ) . isVisible () ) ) { cd . cacheVisibleTo ( user ) ; return true ; } else { return false ; } } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { return false ; } }
public com.google.common.collect.SetMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Branch.NameKey > branchesByProject ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Branch.NameKey > ret = com.google.common.collect.HashMultimap . create () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData . values () ) { ret . put ( cd . change () . getProject () , cd . change () . getDest () ) ; } return ret ; }
private void generateProxyConstructor ( final com.google.gwt.user.rebind.SourceWriter w ) { final com.google.gwt.user.client.rpc.RemoteServiceRelativePath relPath = svcInf . getAnnotation ( com.google.gwt.user.client.rpc.RemoteServiceRelativePath . class ) ; if ( relPath != null ) { w . println () ; w . println ( ( ( STRING_CONSTANT + ( getProxySimpleName () ) ) + STRING_CONSTANT ) ) ; w . indent () ; w . println ( ( ( STRING_CONSTANT + ( relPath . value () ) ) + STRING_CONSTANT ) ) ; w . outdent () ; w . println ( STRING_CONSTANT ) ; } }
private static void assertCommentInfo ( com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput expected , com.google.gerrit.extensions.common.CommentInfo actual ) { com.google.common.truth.Truth . assertThat ( actual.line ) . isEqualTo ( expected.line ) ; com.google.common.truth.Truth . assertThat ( actual.message ) . isEqualTo ( expected.message ) ; com.google.common.truth.Truth . assertThat ( actual.inReplyTo ) . isEqualTo ( expected.inReplyTo ) ; if ( ( actual.side ) == null ) { com.google.common.truth.Truth . assertThat ( Comment.Side.REVISION ) . isEqualTo ( expected.side ) ; } }
protected byte [] readFile ( java.lang.String fileName ) throws java.io.IOException { if ( ( revision ) == null ) { return new byte [] {} ; } org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk . forPath ( reader , fileName , revision . getTree () ) ; if ( tw != null ) { org.eclipse.jgit.lib.ObjectLoader obj = reader . open ( tw . getObjectId ( NUMBER_CONSTANT ) , Constants.OBJ_BLOB ) ; return obj . getCachedBytes ( java.lang.Integer.MAX_VALUE ) ; } return new byte [] {} ; }
public synchronized void removeWriteIndex ( int version ) { int removeIndex = - NUMBER_CONSTANT ; for ( int i = NUMBER_CONSTANT ; i < ( writeIndexes . size () ) ; i ++ ) { if ( ( writeIndexes . get ( i ) . getSchema () . getVersion () ) == version ) { removeIndex = i ; break; } } if ( removeIndex >= NUMBER_CONSTANT ) { try { writeIndexes . get ( removeIndex ) . close () ; } finally { writeIndexes . remove ( removeIndex ) ; } } }
public void onSuccess ( final com.google.gerrit.reviewdb.PatchLineComment result ) { notifyDraftDelta ( ( isNew () ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ; comment = result ; text . setReadOnly ( false ) ; save . setEnabled ( true ) ; cancel . setEnabled ( true ) ; discard . setEnabled ( true ) ; render () ; onSave . onSuccess ( VoidResult.INSTANCE ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.ChangeMessage > byChange ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( migration . readChanges () ) ) { return com.google.gerrit.server.ChangeMessagesUtil . sortChangeMessages ( db . changeMessages () . byChange ( notes . getChangeId () ) ) ; } else { return notes . load () . getChangeMessages () ; } }
public static com.google.gerrit.client.rpc.RestApi revision ( @ com.google.gerrit.common.Nullable java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id ) { int cn = id . getParentKey () . get () ; java.lang.String revision = com.google.gerrit.client.changes.RevisionInfoCache . get ( id ) ; if ( revision != null ) { return com.google.gerrit.client.changes.ChangeApi . revision ( project , cn , revision ) ; } return com.google.gerrit.client.changes.ChangeApi . change ( project , cn ) . view ( STRING_CONSTANT ) . id ( id . get () ) ; }
private void verifyComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { com.google.common.base.Preconditions . checkArgument ( ( ( c . getRevId () ) != null ) ) ; com.google.common.base.Preconditions . checkArgument ( c . getAuthor () . equals ( getUser () . getAccountId () ) , ( STRING_CONSTANT + STRING_CONSTANT ) , getUser () . getAccountId () , c ) ; }
protected byte [] readFile ( java.lang.String fileName ) throws java.io.IOException { if ( ( revision ) == null ) { return new byte [] {} ; } try ( org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk . forPath ( reader , fileName , revision . getTree () ) ) { if ( tw != null ) { org.eclipse.jgit.lib.ObjectLoader obj = reader . open ( tw . getObjectId ( NUMBER_CONSTANT ) , Constants.OBJ_BLOB ) ; return obj . getCachedBytes ( java.lang.Integer.MAX_VALUE ) ; } } return new byte [] {} ; }
public static com.google.gerrit.common.data.LabelType withDefaultValues ( java.lang.String name ) { com.google.gerrit.common.data.LabelType . checkName ( name ) ; java.util.List < com.google.gerrit.common.data.LabelValue > values = new java.util.ArrayList < com.google.gerrit.common.data.LabelValue > ( NUMBER_CONSTANT ) ; values . add ( new com.google.gerrit.common.data.LabelValue ( ( ( short ) ( NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ) ; values . add ( new com.google.gerrit.common.data.LabelValue ( ( ( short ) ( NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ) ; return new com.google.gerrit.common.data.LabelType ( name , values ) ; }
private java.lang.String getBranchUrl ( java.lang.String projectName , java.lang.String branchName ) { com.google.gerrit.server.project.ProjectState state = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; if ( state == null ) { return null ; } return getFileUrl ( projectName , branchName , cfgFactory . create ( state ) . getIndexFile () , true ) ; }
@ java.lang.Override public void run ( ) throws java.lang.Exception { if ( ( ( impl . getUser () ) != null ) && ( ! ( impl . getProjects () . isEmpty () ) ) ) { throw new com.google.gerrit.sshd.commands.UnloggedFailure ( NUMBER_CONSTANT , STRING_CONSTANT ) ; } impl . display ( stdout ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( caller == ( java.lang.Thread . currentThread () ) ) { insertChange ( db ) ; } else { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory . open () ) { insertChange ( db ) ; } } synchronized ( newProgress ) { newProgress . update ( NUMBER_CONSTANT ) ; } return null ; }
static com.google.gerrit.server.notedb.ChangeNotesState empty ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.AutoValue_ChangeNotesState ( null , change . getId () , null , com.google.common.collect.ImmutableSet . of () , com.google.common.collect.ImmutableSet . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.gerrit.server.ReviewerSet . empty () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableListMultimap . of () , com.google.common.collect.ImmutableListMultimap . of () ) ; }
private com.google.gerrit.server.account.AuthResult byUserName ( final java.lang.String userName ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ; try { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME , userName ) ; return auth ( db . accountExternalIds () . get ( key ) ) ; } finally { db . close () ; } } catch ( com.google.gwtorm.server.OrmException e ) { getServletContext () . log ( STRING_CONSTANT , e ) ; return null ; } }
@ java.lang.Override protected void loadDefaults () { approvals = com.google.common.collect.ImmutableListMultimap . of () ; reviewers = com.google.common.collect.ImmutableSetMultimap . of () ; submitRecords = com.google.common.collect.ImmutableList . of () ; changeMessages = com.google.common.collect.ImmutableListMultimap . of () ; commentsForBase = com.google.common.collect.ImmutableListMultimap . of () ; commentsForPS = com.google.common.collect.ImmutableListMultimap . of () ; }
private void computeAllowed () { final java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > am = user . getEffectiveGroups () ; final com.google.gerrit.server.project.ProjectState pe = projectCache . get ( change . getProject () ) ; computeAllowed ( am , pe . getRights () ) ; computeAllowed ( am , projectCache . getWildcardRights () ) ; }
public void setAuthorNameText ( final com.google.gerrit.client.account.AccountInfo author , final java.lang.String nameText ) { header . setWidget ( NUMBER_CONSTANT , NUMBER_CONSTANT , new com.google.gerrit.client.AvatarImage ( author ) ) ; header . setText ( NUMBER_CONSTANT , NUMBER_CONSTANT , nameText ) ; body . getElement () . setAttribute ( STRING_CONSTANT , author . email () ) ; body . getElement () . setAttribute ( STRING_CONSTANT , author . name () ) ; }
@ org.junit.Test public void testListTables ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { org.junit.Assert . assertTrue ( dialect . listTables ( db ) . isEmpty () ) ; execute ( STRING_CONSTANT ) ; execute ( STRING_CONSTANT ) ; java.util.Set < java.lang.String > s = dialect . listTables ( db ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , s . size () ) ; org.junit.Assert . assertFalse ( s . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( s . contains ( STRING_CONSTANT ) ) ; }
public void onCellClicked ( com.google.gwt.user.client.ui.SourcesTableEvents sender , int row , int cell ) { if ( cell == ( com.google.gerrit.client.changes.ChangeTable.C_STAR ) ) { onStarClick ( row ) ; } else if ( cell == ( com.google.gerrit.client.changes.ChangeTable.C_OWNER ) ) {} else if ( ( getRowItem ( row ) ) != null ) { movePointerTo ( row ) ; } }
void set ( com.google.gerrit.client.info.ChangeInfo info ) { this . changeId = info . legacyId () ; this . canEdit = ( info . hasActions () ) && ( info . actions () . containsKey ( STRING_CONSTANT ) ) ; setAssignee ( info . assignee () ) ; editAssigneeIcon . setVisible ( canEdit ) ; if ( ! ( canEdit ) ) { show . setTitle ( null ) ; } }
public org.kohsuke.github.GHRepository getGHRepository ( ) throws java.io.IOException { if ( ghLogin . getMyself () . getLogin () . equals ( organisation ) ) { return ghLogin . getMyself () . getRepository ( repoName ) ; } return ghLogin . getHub () . getOrganization ( organisation ) . getRepository ( repoName ) ; }
private java.util.List < com.google.gerrit.client.ui.InlineHyperlink > getLinks () { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink () ; toUnifiedDiffLink . setHTML ( new com.google.gwt.user.client.ui.ImageResourceRenderer () . render ( Gerrit.RESOURCES . unifiedDiff () ) ) ; toUnifiedDiffLink . setTargetHistoryToken ( getUnifiedDiffUrl () ) ; toUnifiedDiffLink . setTitle ( PatchUtil.C . unifiedDiff () ) ; return java.util.Collections . singletonList ( toUnifiedDiffLink ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > and ( final java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > that ) { if ( ( that . size () ) == NUMBER_CONSTANT ) { return com.google.common.collect.Iterables . getOnlyElement ( that ) ; } return new com.google.gerrit.server.query.AndPredicate ( that ) ; }
protected com.google.gerrit.server.util.RequestContext newRequestContext ( com.google.gerrit.reviewdb.client.Account.Id requestUserId ) { final com.google.gerrit.server.CurrentUser requestUser = userFactory . create ( requestUserId ) ; return new com.google.gerrit.server.util.RequestContext () { @ java.lang.Override public com.google.gerrit.server.CurrentUser getUser () { return requestUser ; } @ java.lang.Override public com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > getReviewDbProvider () { return com.google.inject.util.Providers . of ( db ) ; } } ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.Set < java.lang.String > reviewed ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return com.google.common.collect.ImmutableSet . copyOf ( ( ( java.lang.Iterable < java.lang.String > ) ( listFiles . setReviewed ( true ) . apply ( revision ) . value () ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private static java.util.List < com.google.gwtorm.schema.ColumnModel > leaves ( java.util.List < com.google.gwtorm.schema.ColumnModel > in ) { java.util.ArrayList < com.google.gwtorm.schema.ColumnModel > r = new java.util.ArrayList ( in . size () ) ; for ( com.google.gwtorm.schema.ColumnModel m : in ) { if ( m . isNested () ) { r . addAll ( m . getAllLeafColumns () ) ; } else { r . add ( m ) ; } } return r ; }
@ java.lang.Override public void run () { net.codemirror.lib.CodeMirror.LineHandle handle = cm . extras () . activeLine () ; int line = ( cm . getLineNumber ( handle ) ) + NUMBER_CONSTANT ; java.lang.String token = com.google.gerrit.client.Dispatcher . toEditScreen ( revision , path , line ) ; if ( ! ( com.google.gerrit.client.Gerrit . isSignedIn () ) ) { com.google.gerrit.client.Gerrit . doSignIn ( token ) ; } else { com.google.gerrit.client.Gerrit . display ( token ) ; } }
@ org.junit.Test public void testGetPassword ( ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( getConfiguration () . http () . password () ) . isEmpty () ; globalPluginConfig . setString ( com.ericsson.gerrit.plugins.highavailability.Configuration.HTTP_SECTION , null , com.ericsson.gerrit.plugins.highavailability.Configuration.PASSWORD_KEY , com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.PASS ) ; com.google.common.truth.Truth . assertThat ( getConfiguration () . http () . password () ) . isEqualTo ( com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.PASS ) ; }
java.lang.String elide ( final java.lang.String s ) { if ( ( s == null ) || ( ( s . length () ) < NUMBER_CONSTANT ) ) { return s ; } return ( ( s . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) + STRING_CONSTANT ) + ( s . substring ( ( ( s . length () ) - NUMBER_CONSTANT ) ) ) ; }
@ java.lang.Override public void onLoad () { super . onLoad () ; Util.PROJECT_SVC . projectDetail ( projectId , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.admin.ProjectDetail > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.admin.ProjectDetail result ) { display ( result ) ; tabs . selectTab ( tabTokens . indexOf ( initialTabToken ) ) ; } } ) ; }
@ org.junit.Test public void testHtmlInFind () { java.lang.String rawFind = STRING_CONSTANT ; com.google.gwtexpui.safehtml.client.LinkFindReplace a = new com.google.gwtexpui.safehtml.client.LinkFindReplace ( rawFind , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( a . pattern () . getSource () ) . isEqualTo ( rawFind ) ; com.google.common.truth.Truth . assertThat ( a . replace ( rawFind ) ) . isEqualTo ( ( ( STRING_CONSTANT + rawFind ) + STRING_CONSTANT ) ) ; }
public com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > changesByProject ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > ret = com.google.common.collect.ArrayListMultimap . create () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData . values () ) { ret . put ( cd . change () . getProject () , cd ) ; } return ret ; }
private void updateChange ( java.lang.String changeId , com.google.gerrit.extensions.client.ChangeKind changeKind ) throws java.lang.Exception { switch ( changeKind ) { case com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE : noCodeChange ( changeId ) ; return; case com.google.gerrit.extensions.client.ChangeKind.REWORK : rework ( changeId ) ; return; case com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE : trivialRebase ( changeId ) ; return; case com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE : updateFirstParent ( changeId ) ; return; case com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE : noChange ( changeId ) ; return; default: fail ( ( STRING_CONSTANT + changeKind ) ) ; } }
private void onCommentAdded ( final com.google.gerrit.server.events.CommentAddedEvent newComment ) { if ( ! ( shouldProcessCommentEvent ( newComment ) ) ) { return; } com.google.gerrit.server.data.ChangeAttribute change = newComment.change . get () ; try { checkReviewExists ( change.number ) ; autoSubmitIfMergeable ( change ) ; } catch ( java.lang.Exception e ) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log . error ( STRING_CONSTANT , e ) ; throw new java.lang.RuntimeException ( e ) ; } }
@ java.lang.Override protected void configureServlets () { filter ( STRING_CONSTANT ) . through ( com.google.gerrit.httpd.ProjectAccessPathFilter . class ) ; if ( authConfig . isTrustContainerAuth () ) { filter ( STRING_CONSTANT ) . through ( com.google.gerrit.httpd.ContainerAuthFilter . class ) ; } else { filter ( STRING_CONSTANT ) . through ( com.google.gerrit.httpd.ProjectDigestFilter . class ) ; } serve ( STRING_CONSTANT ) . with ( com.google.gerrit.httpd.ProjectServlet . class ) ; }
void close () { try { searcherManager . close () ; } catch ( java.io.IOException e ) { com.google.gerrit.lucene.SubIndex.log . warn ( STRING_CONSTANT , e ) ; } try { writer . close () ; } catch ( java.io.IOException e ) { com.google.gerrit.lucene.SubIndex.log . warn ( STRING_CONSTANT , e ) ; } try { dir . close () ; } catch ( java.io.IOException e ) { com.google.gerrit.lucene.SubIndex.log . warn ( STRING_CONSTANT , e ) ; } }
private boolean combineA ( final int i ) { final org.eclipse.jgit.diff.Edit s = edits . get ( i ) ; final org.eclipse.jgit.diff.Edit e = edits . get ( ( i - NUMBER_CONSTANT ) ) ; return ( ( s . getBeginA () ) - ( e . getEndA () ) ) <= ( ( NUMBER_CONSTANT * ( context ) ) + NUMBER_CONSTANT ) ; }
private static boolean valid ( final com.google.gerrit.client.data.ApprovalType at , final com.google.gerrit.server.workflow.FunctionState state ) { if ( ( state . getChange () . getStatus () ) != ( Change.Status.NEW ) ) { return false ; } for ( final com.google.gerrit.client.data.ApprovalType t : com.google.gerrit.client.rpc.Common . getGerritConfig () . getApprovalTypes () . getApprovalTypes () ) { if ( ! ( state . isValid ( t ) ) ) { return false ; } } return true ; }
@ org.junit.Test public void testAppend_long () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . append ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ java.lang.Override public void onFailure ( java.lang.Throwable err ) { com.google.gerrit.client.change.EditActions . setEnabled ( true , editButtons ) ; if ( com.google.gerrit.client.change.SubmitFailureDialog . isConflict ( err ) ) { new com.google.gerrit.client.change.SubmitFailureDialog ( err . getMessage () ) . center () ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( project , id ) ) ; } else { super . onFailure ( err ) ; } }
public void onSuccess ( final java.util.List < com.google.gerrit.common.data.GroupReference > result ) { priorResults . clear () ; final java.util.ArrayList < com.google.gerrit.client.ui.AccountGroupSuggestOracle.AccountGroupSuggestion > r = new java.util.ArrayList ( result . size () ) ; for ( final com.google.gerrit.common.data.GroupReference p : result ) { r . add ( new com.google.gerrit.client.ui.AccountGroupSuggestOracle.AccountGroupSuggestion ( p ) ) ; priorResults . put ( p . getName () , p . getUUID () ) ; } callback . onSuggestionsReady ( req , new com.google.gerrit.client.ui.Response ( r ) ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private void doList () { for ( java.lang.String name : ( ( java.util.List < java.lang.String > ) ( listCaches . setFormat ( OutputFormat.LIST ) . apply ( new com.google.gerrit.server.config.ConfigResource () ) ) ) ) { stderr . print ( name ) ; stderr . print ( CHAR_CONS ) ; } stderr . flush () ; }
private static void assertSingleWord ( final java.lang.String name , final java.lang.String value , final org.antlr.runtime.tree.Tree r ) { org.junit.Assert . assertEquals ( QueryParser.FIELD_NAME , r . getType () ) ; org.junit.Assert . assertEquals ( name , r . getText () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , r . getChildCount () ) ; final org.antlr.runtime.tree.Tree c = r . getChild ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( QueryParser.SINGLE_WORD , c . getType () ) ; org.junit.Assert . assertEquals ( value , c . getText () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , c . getChildCount () ) ; }
@ java.lang.Override protected void onRequestSuggestions ( com.google.gerrit.client.ui.Request req , com.google.gerrit.client.ui.Callback cb ) { if ( ( ( req . getQuery () ) != null ) && ( ( req . getQuery () . length () ) >= ( com.google.gerrit.client.Gerrit . info () . suggest () . from () ) ) ) { _onRequestSuggestions ( req , cb ) ; } else { java.util.List < com.google.gerrit.client.ui.Suggestion > none = java.util.Collections . emptyList () ; cb . onSuggestionsReady ( req , new com.google.gerrit.client.ui.Response ( none ) ) ; } }
@ org.junit.Test public void rootText ( ) throws java.lang.Exception { java.lang.String name = repo . getRepository () . getDescription () . getRepositoryName () ; com.google.gitiles.FakeHttpServletResponse res = buildText ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( new java.lang.String ( res . getActualBody () , java.nio.charset.StandardCharsets.UTF_8 ) ) . isEqualTo ( ( name + STRING_CONSTANT ) ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( caller == ( java.lang.Thread . currentThread () ) ) { updateGroups ( db ) ; } else { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory . open () ) { updateGroups ( db ) ; } } return null ; }
protected java.lang.String getTaskDescription () { java.lang.String [] ta = getTrimmedArguments () ; if ( ta != null ) { return ( ( commandName ) + STRING_CONSTANT ) + ( com.google.common.base.Joiner . on ( STRING_CONSTANT ) . join ( ta ) ) ; } return commandName ; }
private static org.eclipse.jgit.lib.ObjectId createNewTree ( org.eclipse.jgit.lib.Repository repository , org.eclipse.jgit.revwalk.RevCommit baseCommit , com.google.gerrit.server.edit.tree.TreeModification treeModification ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { com.google.gerrit.server.edit.tree.TreeCreator treeCreator = new com.google.gerrit.server.edit.tree.TreeCreator ( baseCommit ) ; treeCreator . addTreeModification ( treeModification ) ; org.eclipse.jgit.lib.ObjectId newTreeId = treeCreator . createNewTreeAndGetId ( repository ) ; if ( org.eclipse.jgit.lib.ObjectId . equals ( newTreeId , baseCommit . getTree () ) ) { throw new com.google.gerrit.server.project.InvalidChangeOperationException ( STRING_CONSTANT ) ; } return newTreeId ; }
@ org.junit.Test public void testStyleName () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . openSpan () ) ; org.junit.Assert . assertSame ( b , b . setStyleName ( STRING_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . addStyleName ( STRING_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . append ( STRING_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . closeSpan () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ java.lang.Override protected void run ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { if ( ( ( names ) == null ) || ( names . isEmpty () ) ) { loader . rescan () ; } else { try { loader . reload ( names ) ; } catch ( com.google.gerrit.server.plugins.InvalidPluginException e ) { throw die ( e . getMessage () ) ; } catch ( com.google.gerrit.server.plugins.PluginInstallException e ) { throw die ( e . getMessage () ) ; } } }
private static org.apache.lucene.store.Directory dir ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.account.AccountState > schema , org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths ) throws java.io.IOException { if ( com.google.gerrit.lucene.LuceneIndexModule . isInMemoryTest ( cfg ) ) { return new org.apache.lucene.store.RAMDirectory () ; } java.nio.file.Path indexDir = com.google.gerrit.lucene.LuceneVersionManager . getDir ( sitePaths , com.google.gerrit.lucene.LuceneAccountIndex.ACCOUNTS , schema ) ; return org.apache.lucene.store.FSDirectory . open ( indexDir ) ; }
@ org.junit.Test public void testReplaceInOrder () { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . html ( STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.SafeHtml n = o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) , new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) , n . asString () ) ; }
private void initWildCardProject ( final com.google.gerrit.client.reviewdb.ReviewDb c ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Project proj ; proj = new com.google.gerrit.client.reviewdb.Project ( new com.google.gerrit.client.reviewdb.Project.NameKey ( STRING_CONSTANT ) , com.google.gerrit.client.reviewdb.ProjectRight.WILD_PROJECT ) ; proj . setDescription ( STRING_CONSTANT ) ; proj . setUseContributorAgreements ( false ) ; c . projects () . insert ( java.util.Collections . singleton ( proj ) ) ; }
@ java.lang.Override public void onLoad () { super . onLoad () ; Util.ACCOUNT_SVC . myAccount ( new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.reviewdb.Account > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.reviewdb.Account result ) { display ( result ) ; tabs . selectTab ( tabTokens . indexOf ( initialTabToken ) ) ; } } ) ; }
@ java.lang.Override public void stop () { I read = searchIndex . get () ; if ( read != null ) { read . close () ; } for ( I write : writeIndexes ) { if ( write != read ) { write . stop () ; write . close () ; } } }
private com.google.gerrit.server.plugins.Plugin loadPlugin ( java.lang.String name , java.nio.file.Path srcPlugin , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot ) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.String pluginName = srcPlugin . getFileName () . toString () ; if ( isUiPlugin ( pluginName ) ) { return loadJsPlugin ( name , srcPlugin , snapshot ) ; } else if ( serverPluginFactory . handles ( srcPlugin ) ) { return loadServerPlugin ( srcPlugin , snapshot ) ; } else { throw new com.google.gerrit.server.plugins.InvalidPluginException ( java.lang.String . format ( STRING_CONSTANT , srcPlugin . getFileName () ) ) ; } }
private java.io.File getLauncherLoadedFrom () { java.io.File war ; try { war = com.google.gerrit.launcher.GerritLauncher . getDistributionArchive () ; } catch ( java.io.IOException e ) { if ( ( e instanceof java.io.FileNotFoundException ) && ( GerritLauncher.NOT_ARCHIVED . equals ( e . getMessage () ) ) ) { return null ; } com.google.inject.ProvisionException pe = new com.google.inject.ProvisionException ( STRING_CONSTANT ) ; pe . initCause ( e ) ; throw pe ; } return war ; }
public com.google.gerrit.extensions.registration.DynamicMap < T > get () { com.google.gerrit.extensions.registration.PrivateInternals_DynamicMapImpl < T > m = new com.google.gerrit.extensions.registration.PrivateInternals_DynamicMapImpl () ; java.util.List < com.google.inject.Binding < T > > bindings = injector . findBindingsByType ( type ) ; if ( bindings != null ) { for ( com.google.inject.Binding < T > b : bindings ) { if ( ( b . getKey () . getAnnotation () ) != null ) { m . put ( STRING_CONSTANT , b . getKey () , b . getProvider () ) ; } } } return m ; }
@ java.lang.Override protected void service ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException , javax.servlet.ServletException { if ( ( filter . get () ) == null ) { com.google.gwtexpui.server.CacheHeaders . setNotCacheable ( res ) ; res . sendError ( javax.servlet.http.HttpServletResponse.SC_NOT_IMPLEMENTED ) ; return; } filter . get () . doFilter ( req , res , chain ) ; }
@ org.junit.Test public void deleteVoteFromWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange () ; deleteVote ( sc , voter ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( voter ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public com.google.gerrit.server.project.RefControl forUser ( com.google.gerrit.server.CurrentUser who ) { com.google.gerrit.server.project.ProjectControl newCtl = projectControl . forUser ( who ) ; if ( relevant . isUserSpecific () ) { return newCtl . controlForRef ( getRefName () ) ; } return new com.google.gerrit.server.project.RefControl ( newCtl , getRefName () , relevant ) ; }
private java.lang.String configurationToString () { java.lang.StringBuilder b = new java.lang.StringBuilder () ; b . append ( STRING_CONSTANT ) . append ( config . size () ) . append ( STRING_CONSTANT ) ; for ( com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.ConfigEntry c : config ) { b . append ( STRING_CONSTANT ) . append ( c ) . append ( STRING_CONSTANT ) ; } b . append ( STRING_CONSTANT ) ; return b . toString () ; }
@ java.lang.Override public void populateDownloadCommandLinks () { if ( ! ( urls . isEmpty () ) ) { commands . add ( cmdLinkfactory . new com.google.gerrit.client.admin.CloneCommandLink () ) ; if ( ( ( com.google.gerrit.client.Gerrit . getConfig () . getSshdAddress () ) != null ) && ( com.google.gerrit.client.admin.ProjectInfoScreen . hasUserName () ) ) { commands . add ( cmdLinkfactory . new com.google.gerrit.client.admin.CloneWithCommitMsgHookCommandLink ( getProjectKey () ) ) ; } } }
private < T > boolean callHander ( com.googlesource.gerrit.plugins.github.notification.WebhookEventHandler < T > handler , java.lang.String jsonBody ) throws java.io.IOException { T payload = gson . fromJson ( jsonBody , handler . getPayloadType () ) ; if ( payload != null ) { return handler . doAction ( payload ) ; } com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger . error ( ( ( ( STRING_CONSTANT + jsonBody ) + STRING_CONSTANT ) + ( handler . getPayloadType () . getName () ) ) ) ; return false ; }
@ org.junit.Test public void testCannotUploadToAnyRef () { com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.REGISTERED , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , ( ( u . canPushToAtLeastOneRef () ) == ( com.google.gerrit.common.data.Capable.OK ) ) ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canUpload () ) ; }
public void start ( final org.apache.sshd.server.Environment env ) throws java.io.IOException { com.google.gerrit.sshd.SshScope.Context old = sshScope . set ( context ) ; java.lang.String message ; try { message = messageFactory . get () . getMessage () ; } finally { sshScope . set ( old ) ; } err . write ( org.eclipse.jgit.lib.Constants . encode ( message ) ) ; err . flush () ; in . close () ; out . close () ; err . close () ; exit . onExit ( NUMBER_CONSTANT ) ; }
public final com.google.gerrit.extensions.client.EditPreferencesInfo copyTo ( com.google.gerrit.extensions.client.EditPreferencesInfo p ) { p.tabSize = tabSize () ; p.lineLength = lineLength () ; p.cursorBlinkRate = cursorBlinkRate () ; p.hideTopMenu = hideTopMenu () ; p.showTabs = showTabs () ; p.showWhitespaceErrors = showWhitespaceErrors () ; p.syntaxHighlighting = syntaxHighlighting () ; p.hideLineNumbers = hideLineNumbers () ; p.matchBrackets = matchBrackets () ; p.autoCloseBrackets = autoCloseBrackets () ; p.theme = theme () ; p.keyMapType = keyMapType () ; return p ; }
@ org.junit.Test public void queryChangesOwnerWithDifferentUsers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.common.truth.Truth . assertThat ( com.google.common.collect.Iterables . getOnlyElement ( query ( STRING_CONSTANT ) ) . changeId ) . isEqualTo ( r . getChangeId () ) ; setApiUser ( user ) ; com.google.common.truth.Truth . assertThat ( query ( STRING_CONSTANT ) ) . isEmpty () ; }
protected void completeImageData ( org.ovirt.engine.core.common.businessentities.DiskImage fromIRS ) { getDestinationDiskImage () . setCreationDate ( fromIRS . getCreationDate () ) ; getDestinationDiskImage () . setLastModifiedDate ( fromIRS . getLastModifiedDate () ) ; getDestinationDiskImage () . setLastModified ( getDestinationDiskImage () . getLastModifiedDate () ) ; org.ovirt.engine.core.common.businessentities.DiskImageDynamic destinationDiskDynamic = getDiskImageDynamicDAO () . get ( getDestinationDiskImage () . getImageId () ) ; if ( destinationDiskDynamic != null ) { destinationDiskDynamic . setactual_size ( fromIRS . getActualSizeFromDiskImage () ) ; getDiskImageDynamicDAO () . update ( destinationDiskDynamic ) ; } }
public static void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForRemove () ; mockBackend ( false , EngineError.GlusterHookRemoveFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . remove ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_REMOVE_FAILED ) ; }
public void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
@ org.junit.Before public void setUp ( ) throws java.io.IOException { storagePoolId = org.ovirt.engine.core.compat.Guid . newGuid () ; clusterId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.mockito.Mockito . doReturn ( cluster ) . when ( cmd ) . getCluster () ; org.mockito.Mockito . doReturn ( java.util.Collections . emptyList () ) . when ( cmd ) . getImages () ; mockCluster () ; setXmlOvfData () ; }
protected void RemoveSnapshot ( org.ovirt.engine.core.common.businessentities.DiskImage snapshot ) { org.ovirt.engine.core.bll.BaseImagesCommand . getImageStorageDomainMapDao () . remove ( snapshot . getImageId () ) ; getImageDao () . remove ( snapshot . getImageId () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesForDisk = org.ovirt.engine.core.bll.BaseImagesCommand . getDiskImageDao () . getAllSnapshotsForImageGroup ( snapshot . getId () ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk . isEmpty () ) ) { getBaseDiskDao () . remove ( snapshot . getId () ) ; } }
protected void updateDisksStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksList ) { disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( storageDomain . getId () ) ) ) ; } updateDiskVolumeType ( storageDomain . getStorageType () , disksList . get ( NUMBER_CONSTANT ) ) ; }
protected void EndImportCommand () { setVm ( null ) ; EndActionOnAllImageGroups () ; if ( ( getVm () ) != null ) { org.ovirt.engine.core.bll.VmHandler . UnLockVm ( getVm () . getId () ) ; UpdateVmImSpm () ; } else { setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.ImportVmCommand.log . warn ( STRING_CONSTANT ) ; } setSucceeded ( true ) ; }
@ org.junit.Test public void testSave () { org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entry = new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID_WITH_NO_MAP_ENTRY , org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DOMAIN_ID , FixturesTool.DEFAULT_QUOTA_GENERAL , FixturesTool.DISK_PROFILE_1 ) ; dao . save ( entry ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap > entries = dao . getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID_WITH_NO_MAP_ENTRY ) ; org.junit.Assert . assertNotNull ( entries ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , entries . size () ) ; org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entryFromDb = entries . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( entry , entryFromDb ) ; }
protected boolean performImagesChecks () { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getVm () , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getVm () . getStoragePoolId () , Guid.Empty , true , true , false , false , false , true , true , getImagesList () ) ; }
private void setIconType ( org.gwtbootstrap3.client.ui.html.Span icon , org.ovirt.engine.core.common.businessentities.AuditLog model ) { switch ( model . getSeverity () ) { case ALERT : icon . addStyleName ( PatternflyConstants.PFICON_WARNING_TRIANGLE_O ) ; break; case ERROR : icon . addStyleName ( PatternflyConstants.PFICON_ERROR_CIRCLE_O ) ; break; case NORMAL : icon . addStyleName ( PatternflyConstants.PFICON_INFO ) ; break; case WARNING : icon . addStyleName ( PatternflyConstants.PFICON_WARNING_TRIANGLE_O ) ; break; default: icon . addStyleName ( PatternflyConstants.PFICON_OK ) ; break; } }
public java.util.Map < java.lang.String , java.lang.String > getPeers ( java.lang.String server , java.lang.String username , java.lang.String password , java.lang.String fingerprint ) throws java.io.IOException , javax.naming.AuthenticationException { try ( final org.ovirt.engine.core.uutils.ssh.SSHClient client = getSSHClient () ) { connect ( client , server , username , password ) ; authenticate ( client ) ; java.lang.String serversXml = executePeerStatusCommand ( client ) ; return getFingerprints ( extractServers ( serversXml ) ) ; } }
private java.lang.Boolean getAutoConverge () { if ( ( org.ovirt.engine.core.bll.MigrateVmCommand . getVm () . getAutoConverge () ) != null ) { return org.ovirt.engine.core.bll.MigrateVmCommand . getVm () . getAutoConverge () ; } if ( ( org.ovirt.engine.core.bll.MigrateVmCommand . getCluster () . getAutoConverge () ) != null ) { return org.ovirt.engine.core.bll.MigrateVmCommand . getCluster () . getAutoConverge () ; } return org.ovirt.engine.core.common.config.Config . getValue ( ConfigValues.DefaultAutoConvergence ) ; }
public static void getRoleActionGroupsByRoleId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid roleId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetRoleActionGroupsByRoleId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( roleId ) , aQuery ) ; }
protected void initAppsTable () { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable ( false , true ) ; org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > () { @ java.lang.Override public java.lang.String getValue ( java.lang.String appName ) { return appName ; } } ; appsTable . addColumn ( appNameColumn , org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants . nameSnapshot () ) ; appsTable . setRowData ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > () ) ; appsTable . setWidth ( STRING_CONSTANT , true ) ; appsTable . setSelectionModel ( new com.google.gwt.view.client.NoSelectionModel () ) ; }
@ java.lang.Override protected void executeCommand () { java.util.List < org.ovirt.engine.core.common.businessentities.vds_spm_id_map > vds_spm_id_mapList = org.ovirt.engine.core.bll.AddVdsSpmIdCommand . getVdsSpmIdMapDao () . getAll ( org.ovirt.engine.core.bll.AddVdsSpmIdCommand . getVds () . getStoragePoolId () ) ; if ( ( vds_spm_id_mapList . size () ) >= ( org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.MaxNumberOfHostsInStoragePool ) ) ) { buildFaultResult () ; return; } insertSpmIdToDb ( vds_spm_id_mapList ) ; org.ovirt.engine.core.bll.AddVdsSpmIdCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testIncompleteMove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; try { control . replay () ; resource . move ( new org.ovirt.engine.api.model.Action () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void shouldHandleEmptyHostList () { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filteredHost = policyUnit . filter ( cluster , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () , vm , null , org.mockito.Mockito . mock ( org.ovirt.engine.core.common.scheduling.PerHostMessages . class ) ) ; org.hamcrest.MatcherAssert . assertThat ( filteredHost , org.hamcrest.CoreMatchers . is ( org.hamcrest.Matchers . empty () ) ) ; org.hamcrest.MatcherAssert . assertThat ( messages () , org.hamcrest.CoreMatchers . is ( org.hamcrest.Matchers . empty () ) ) ; }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setAllContentHeaderExpectation () ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; control . replay () ; org.ovirt.engine.api.model.NIC nic = resource . get () ; assertTrue ( nic . isSetStatistics () ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest . verifyModelSpecific ( nic , NUMBER_CONSTANT ) ; verifyLinks ( nic ) ; } finally { accepts . clear () ; } }
private void testIsManagementNetworkInGivenClusterCommon ( boolean expectedResult ) { org.mockito.Mockito . when ( mockNetworkClusterDao . get ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_CLUSTER_ID ) ) . thenReturn ( mockNetworkCluster ) ; org.mockito.Mockito . when ( mockNetworkCluster . isManagement () ) . thenReturn ( expectedResult ) ; final boolean actual = underTest . isManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_ID , org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_CLUSTER_ID ) ; org.junit.Assert . assertEquals ( expectedResult , actual ) ; }
public boolean isTaskOfType ( org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport supportObj , org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType type ) { if ( ( ( supportObj . getAsyncTask () ) != null ) && ( ( supportObj . getAsyncTask () . getType () ) == type ) ) { return true ; } return false ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.VM model = new org.ovirt.engine.api.model.VM () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public boolean fetch () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue getList = getResourceManager () . runVdsCommand ( VDSCommandType.List , new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase ( vdsManager . getCopyVds () ) ) ; if ( getList . getSucceeded () ) { vdsmVms = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > ) ( getList . getReturnValue () ) ) ; onFetchVms () ; return true ; } else { onError () ; return false ; } }
private void buildSmartcardDevice () { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevices = vmDeviceDao . getVmDeviceByVmIdTypeAndDevice ( vm . getId () , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD . getName () ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices ) { java.util.Map < java.lang.String , java.lang.Object > struct = new java.util.HashMap <> () ; struct . put ( VdsProperties.Type , vmDevice . getType () . getValue () ) ; struct . put ( VdsProperties.Device , vmDevice . getDevice () ) ; addDevice ( struct , vmDevice , null ) ; } }
private void updateCachedIsoFileListFromVdsm ( org.ovirt.engine.core.common.businessentities.RepoFileMetaData repoFileMetaData ) { boolean isRefreshed = false ; try { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > problematicRepoFileList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > () ; isRefreshed = refreshIsoDomain ( repoFileMetaData . getRepoDomainId () , problematicRepoFileList , repoFileMetaData . getFileType () ) ; addRepoFileToProblematicList ( problematicRepoFileList ) ; } finally { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log . infoFormat ( STRING_CONSTANT , repoFileMetaData . getFileType () , ( isRefreshed ? STRING_CONSTANT : STRING_CONSTANT ) , repoFileMetaData . getRepoDomainId () ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < org.ovirt.engine.core.bll.utils.PermissionSubject > () ; permissionList . add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getVmPoolId () , org.ovirt.engine.core.common.VdcObjectType.VmPool , org.ovirt.engine.core.bll.VmPoolCommandBase . getActionType () . getActionGroup () ) ) ; return permissionList ; }
private org.ovirt.engine.core.bll.RemoveQuotaCommand createCommand () { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters () ; param . setQuotaId ( generalGuidQuota ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveQuotaCommand ( param , null ) ) ; org.mockito.Mockito . doReturn ( storagePoolDao ) . when ( command ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( quotaDao ) . when ( command ) . getQuotaDao () ; org.mockito.Mockito . doReturn ( vmDao ) . when ( command ) . getVmDao () ; org.mockito.Mockito . doReturn ( quotaManager ) . when ( command ) . getQuotaManager () ; return command ; }
private void logException ( java.lang.RuntimeException ex ) { if ( ( ( ex . getMessage () ) == null ) || ( ! ( ex . getMessage () . contains ( STRING_CONSTANT ) ) ) ) { log . error ( STRING_CONSTANT , this , ex . getMessage () ) ; log . debug ( STRING_CONSTANT , ex ) ; } }
@ java.lang.Override protected boolean canDoAction () { boolean retVal = true ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > domainsMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > () ; retVal = canDoAction_beforeCloneVm ( domainsMap ) ; if ( retVal && ( getParameters () . isImportAsNewEntity () ) ) { initImportClonedVm () ; } return retVal && ( canDoAction_afterCloneVm ( domainsMap ) ) ; }
@ java.lang.Override protected void syncSearch () { if ( ( getEntity () ) == null ) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getGlusterHooks ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > glusterHooks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ) ( returnValue ) ) ; setItems ( glusterHooks ) ; } } ) , getEntity () . getId () ) ; }
private void mockNullVm () { org.mockito.Mockito . doReturn ( vmDAO ) . when ( command ) . getVmDAO () ; mockGetForDisk ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( null ) ) ) ; mockGetVmsListForDisk ( null ) ; org.mockito.Mockito . when ( vmDAO . get ( command . getParameters () . getVmId () ) ) . thenReturn ( null ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model = createIncompleteNetworkAttachment () ; setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . setUpBasicUriExpectations () ) ; setUpVerifyHostExpectations () ; try { collection . add ( model ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , getIncompleteFields () ) ; } }
public void loadVmsFromExportDomain () { clearProblem () ; startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmsFromExportDomain , new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenters () . getSelectedItem () . getId () , exportDomain . getId () ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateVms ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue () ) ; } } ) ) ; }
private void readMessage ( java.nio.channels.SocketChannel socketChannel ) throws java.io.IOException { socketChannel . read ( this . ibuff ) ; if ( this . ibuff . hasRemaining () ) { return; } this . ibuff . rewind () ; this . worker . processData ( this , socketChannel , this . ibuff . array () ) ; this . ibuff = null ; this . byteBuffer . clear () ; }
@ org.junit.Test public void testList ( ) throws java.lang.Exception { resource . setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( VdcQueryType.GetVdsHooksById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getEntity ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.Hooks hooks = resource . list () ; assertNotNull ( hooks . getHooks () ) ; assertEquals ( NUMBER_CONSTANT , hooks . getHooks () . size () ) ; }
private void initializeOsRepository ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface ) { java.util.ArrayList < java.lang.String > supportedDiskInterfaces = new java.util.ArrayList <> () ; supportedDiskInterfaces . add ( diskInterface . name () ) ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( NUMBER_CONSTANT , null ) ) . thenReturn ( supportedDiskInterfaces ) ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( NUMBER_CONSTANT , null ) ) . thenReturn ( new java.util.ArrayList <> () ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . bind ( org.ovirt.engine.core.common.osinfo.OsRepository . class , osRepository ) ; }
@ java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity entity ) { return new org.springframework.jdbc.core.namedparam.MapSqlParameterSource () . addValue ( STRING_CONSTANT , entity . getId () ) . addValue ( STRING_CONSTANT , entity . getSnapshotName () ) . addValue ( STRING_CONSTANT , entity . getVolumeId () ) . addValue ( STRING_CONSTANT , entity . getDescription () ) . addValue ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.EnumUtils . nameOrNull ( entity . getStatus () ) ) . addValue ( STRING_CONSTANT , entity . getCreatedAt () ) ; }
private void setCorrelationId ( org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { if ( ( httpHeaders ) == null ) { return; } java.util.List < java.lang.String > correlationIds = httpHeaders . getRequestHeader ( org.ovirt.engine.api.restapi.resource.BackendResource.CORRELATION_ID ) ; if ( ( correlationIds != null ) && ( ( correlationIds . size () ) > NUMBER_CONSTANT ) ) { params . setCorrelationId ( correlationIds . get ( NUMBER_CONSTANT ) ) ; } }
public void updateDc ( org.ovirt.engine.core.compat.Version dcCompatibilityVersion , org.ovirt.engine.core.compat.Guid dcId ) { this . dcCompatibilityVersion = dcCompatibilityVersion ; this . dcId = dcId ; customPropertiesSupported = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.SupportCustomDeviceProperties , dcCompatibilityVersion . toString () ) ) ) ; getPortMirroring () . setIsChangable ( isPortMirroringSupported () ) ; initCustomPropertySheet () ; initNetworkQoSList () ; }
private void updateReportsAvailability () { if ( org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . isReportsEnabled () ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.StoragePool > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper . getInstance () . getResourceSubActions ( STRING_CONSTANT , getModelProvider () ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions . size () ) > NUMBER_CONSTANT ) ) { getTable () . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabDataCenterView.constants . showReportDC () , resourceSubActions ) ) ; } } }
@ java.lang.Override public void flush ( org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos ) { qos . setOutAverageLinkshare ( parseInteger ( getOutAverageLinkshare () . getEntity () ) ) ; qos . setOutAverageUpperlimit ( parseInteger ( getOutAverageUpperlimit () . getEntity () ) ) ; qos . setOutAverageRealtime ( parseInteger ( getOutAverageRealtime () . getEntity () ) ) ; }
public void edit () { final org.ovirt.engine.core.common.businessentities.network.Network network = getSelectedItem () ; if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ( network , this ) ; setWindow ( networkModel ) ; networkModel . getDataCenters () . setItems ( java.util.Arrays . asList ( getEntity () ) ) ; networkModel . getDataCenters () . setSelectedItem ( getEntity () ) ; }
@ java.lang.Override public void testListCrashClientLocale () { collection . setUriInfo ( setUpUriExpectations ( null ) ) ; locales . add ( org.ovirt.engine.api.restapi.resource.gluster.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpHooksQueryExpectations ( t ) ; try { getCollection () ; org.junit.jupiter.api.Assertions . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
public void loadVmsFromExportDomain () { clearProblem () ; startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmsFromExportDomain , new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenters () . getSelectedItem () . getId () , exportDomain . getEntity () . getId () ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateVms ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue () ) ; } } ) ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( getEntityList () ) ; org.ovirt.engine.api.model.NetworkLabel model = resource . get () ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendNetworkLabelResourceTest.LABELS [ NUMBER_CONSTANT ] , model . getId () ) ; verifyLinks ( model ) ; }
private void executeFenceVdsManuallyAction ( final org.ovirt.engine.core.compat.Guid vdsId , java.lang.String sessionId ) { org.ovirt.engine.core.common.action.FenceVdsManualyParameters fenceVdsManuallyParams = new org.ovirt.engine.core.common.action.FenceVdsManualyParameters ( false ) ; fenceVdsManuallyParams . setStoragePoolId ( org.ovirt.engine.core.bll.RestartVdsCommand . getVds () . getStoragePoolId () ) ; fenceVdsManuallyParams . setVdsId ( vdsId ) ; fenceVdsManuallyParams . setSessionId ( sessionId ) ; fenceVdsManuallyParams . setParentCommand ( VdcActionType.RestartVds ) ; runInternalAction ( VdcActionType.FenceVdsManualy , fenceVdsManuallyParams , org.ovirt.engine.core.bll.RestartVdsCommand . getContext () ) ; }
@ org.junit.Test public void mapWatchdog () { org.ovirt.engine.api.model.Watchdog model = new org.ovirt.engine.api.model.Watchdog () ; model . setAction ( WatchdogAction.RESET ) ; model . setModel ( WatchdogModel.I6300ESB ) ; model . setId ( Guid.Empty . toString () ) ; org.ovirt.engine.core.common.businessentities.VmWatchdog entity = org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( model , null ) ; org.junit.Assert . assertNotNull ( entity ) ; org.junit.Assert . assertEquals ( VmWatchdogAction.RESET , entity . getAction () ) ; org.junit.Assert . assertEquals ( VmWatchdogType.i6300esb , entity . getModel () ) ; }
@ org.junit.Test public void testEmptyDiskStats () { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap <> () ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . setDisksStats ( disksStats ) ; validateDisksStatsList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . getVds () , xml , false ) ; }
private static void getVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVlanParent , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
@ org.junit.Test public void testAddLunDiskMissingType () { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk () ; model . getLunStorage () . setType ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void testGetStorageConnectionNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , getIscsiBondContainingStorageConnection () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetStorageServerConnectionById , org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondStorageConnectionResourceTest.STORAGE_CONNECTION_ID . toString () } , null ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; model . setDataCentersAndClusters ( model , java.util.Arrays . asList ( dataCenter ) , clusters , vm . getVdsGroupId () ) ; initTemplate () ; }
@ org.junit.Test public void validateFailsOnNoConflictServers () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity () ; hook . setServerHooks ( java.util.Collections . singletonList ( getGlusterServerHook ( NUMBER_CONSTANT , GlusterHookStatus.MISSING ) ) ) ; setUpMocksForUpdate ( true , hook ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS . toString () ) ) ; }
@ java.lang.Override protected boolean canDoAction () { org.ovirt.engine.core.bll.validator.NetworkValidator validator = new org.ovirt.engine.core.bll.validator.NetworkValidator ( org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand . getNetworkDAO () . get ( getNetwork () . getId () ) ) ; return ( ( ( validate ( validator . networkIsSet () ) ) && ( validate ( validator . notManagementNetwork () ) ) ) && ( validate ( validator . networkNotUsedByVms () ) ) ) && ( validate ( validator . networkNotUsedByTemplates () ) ) ; }
private void setupMock () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; returnValue . setSucceeded ( true ) ; returnValue . setReturnValue ( expectedProfileInfo ) ; org.mockito.Mockito . doReturn ( returnValue ) . when ( getQuery () ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeProfileInfo ) , org.mockito.ArgumentMatchers . any () ) ; }
private java.util.List < java.lang.Object > createItems () { java.util.List < java.lang.Object > items = new java.util.ArrayList ( ( ( ReplacementUtils.DEFAULT_MAX_NUMBER_OF_PRINTED_ITEMS ) * NUMBER_CONSTANT ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( ( ReplacementUtils.DEFAULT_MAX_NUMBER_OF_PRINTED_ITEMS ) * NUMBER_CONSTANT ) ; i ++ ) { items . add ( buildPropertyValue ( i ) ) ; } return items ; }
@ java.lang.Override public java.lang.Void runInTransaction () { try { jobDao . updateJobLastUpdateTime ( step . getJobId () , new java.util.Date () ) ; stepDao . update ( step ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.job.JobRepositoryImpl.log . errorFormat ( STRING_CONSTANT , step . getId () , step . getStepName () , e ) ; } return null ; }
public static void GetAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > () ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
private void perform () { org.ovirt.engine.core.bll.MigrateVmCommand . getParameters () . setStartTime ( new java.util.Date () ) ; boolean migrateSucceeded = ( connectLunDisks ( getDestinationVdsId () ) ) && ( migrateVm () ) ; if ( ! migrateSucceeded ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.RESOURCE_MANAGER_MIGRATION_FAILED_AT_DST ) ; } org.ovirt.engine.core.bll.job.ExecutionHandler . setAsyncJob ( org.ovirt.engine.core.bll.MigrateVmCommand . getExecutionContext () , true ) ; }
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address () ; iPv4Address . setAddress ( nic . getAddress () ) ; iPv4Address . setNetmask ( nic . getSubnet () ) ; iPv4Address . setGateway ( nic . getGateway () ) ; iPv4Address . setBootProtocol ( nic . getBootProtocol () ) ; org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration () ; ipConfiguration . setIPv4Addresses ( java.util.Collections . singletonList ( iPv4Address ) ) ; return ipConfiguration ; }
private void UpdateCanSpecify () { org.ovirt.engine.core.common.businessentities.network network = ( ( org.ovirt.engine.core.common.businessentities.network ) ( getNetwork () . getSelectedItem () ) ) ; boolean isChangable = getIsStaticAddress () ; getAddress () . setIsChangable ( isChangable ) ; getSubnet () . setIsChangable ( isChangable ) ; }
private void initStoragePool () { storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; storagePool . setCompatibilityVersion ( Version.v3_1 ) ; org.mockito.Mockito . when ( storagePoolDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito . when ( command . getStoragePoolId () ) . thenReturn ( storagePoolId ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain mockGetExistingDomain ( boolean answerWithDomain ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = java.util.Collections . emptyList () ; if ( answerWithDomain ) { sd = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; sd . getStorageStaticData () . setConnection ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections () ) ; domains = java.util.Collections . singletonList ( sd ) ; } org.mockito.Mockito . doReturn ( createQueryReturnValueWith ( domains ) ) . when ( backend ) . runInternalQuery ( org.mockito.ArgumentMatchers . eq ( QueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers . any () ) ; return sd ; }
private void edit () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditTemplateInterfaceModel . createInstance ( getEntity () , getEntity () . getStoragePoolId () , cluster . getCompatibilityVersion () , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems () ) ) , getSelectedItem () , this ) ; setWindow ( model ) ; }
protected java.util.Map < java.lang.String , java.lang.String > createClusterPolicyParameters ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < java.lang.String , java.lang.String > () ; if ( ( cluster . getClusterPolicyProperties () ) != null ) { parameters . putAll ( cluster . getClusterPolicyProperties () ) ; } return parameters ; }
@ java.lang.Override public void validateEnums ( org.ovirt.engine.api.model.DataCenter dataCenter ) { if ( dataCenter != null ) { if ( dataCenter . isSetStorageFormat () ) { org.ovirt.engine.api.common.util.EnumValidator . validateEnum ( org.ovirt.engine.api.model.StorageFormat . class , dataCenter . getStorageFormat () , true ) ; } if ( dataCenter . isSetQuotaMode () ) { org.ovirt.engine.api.common.util.EnumValidator . validateEnum ( org.ovirt.engine.api.model.QuotaModeType . class , dataCenter . getQuotaMode () , true ) ; } } }
@ org.junit.Test public void testTryParse () { org.ovirt.engine.core.compat.TimeSpan ref = org.ovirt.engine.core.compat.TimeSpan . tryParse ( STRING_CONSTANT ) ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , ref ) ; org.junit.Assert . assertEquals ( ( - NUMBER_CONSTANT ) , ref.Days ) ; ref = org.ovirt.engine.core.compat.TimeSpan . tryParse ( STRING_CONSTANT ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , ref ) ; }
public static org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel createNewSnapshotModel ( org.ovirt.engine.ui.uicommonweb.ICommandTarget cancelCommandTarget ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel () ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . createSnapshotTitle () ) ; model . setHashName ( STRING_CONSTANT ) ; model . setCancelCommand ( new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_CONSTANT , cancelCommandTarget ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . cancel () ) . setIsCancel ( true ) ) ; return model ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc create ( java.util.Map createInfo ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . create ( createInfo ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void dontRunNextInCaseOfErrorCommon ( boolean waitForResult ) { org.ovirt.engine.ui.uicommonweb.action.UiAction action1 = createAction ( waitForResult , false ) ; org.ovirt.engine.ui.uicommonweb.action.UiAction action2 = createAction () ; action1 . then ( action2 ) ; action1 . runAction () ; org.ovirt.engine.ui.uicommonweb.action.UiAction.ActionFlowState flowState = action1 . getActionFlowState () ; verifyRunActionAndExecuteCallbacksRandomly ( flowState , waitForResult ) ; verifyRunAction ( NUMBER_CONSTANT , waitForResult ) ; assertFinishedWithErrors ( java.util.Collections . singletonList ( action1 ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void testGetNetworkDiskTypeForV41 () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setClusterCompatibilityVersion ( Version.v4_1 ) ; vm . setClusterId ( org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildUtilsTest.CLUSTER_ID ) ; org.mockito.Mockito . doReturn ( getSupportedAdditionalClusterFeatures ( false ) ) . when ( clusterFeatureDao ) . getSupportedFeaturesByClusterId ( org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildUtilsTest.CLUSTER_ID ) ; org.junit.Assert . assertEquals ( false , underTest . getNetworkDiskType ( vm , StorageType.GLUSTERFS ) . isPresent () ) ; }
@ java.lang.Override protected boolean canDoAction () { if ( ! ( super . canDoAction () ) ) { return false ; } if ( ( getSnapshot () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.DEACTIVATED ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_DEACTIVATED , getSnapshot () . getSnapshotName () ) ; } return true ; }
public boolean getHostnameEnabled () { if ( isWindowsOS ) { return ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( getWindowsHostname () . getEntity () ) ) ; } else { return ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( getHostname () . getEntity () ) ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > convert ( java.lang.Object source ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > list = new java.util.ArrayList <> () ; if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) { if ( ( template . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK ) ) { list . add ( template ) ; } } java.util.Collections . sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; } return list ; }
private javax.ws.rs.core.Response handleFailure ( org.ovirt.engine.api.model.Action action , java.lang.String message ) { action . setStatus ( CreationStatus.FAILED . value () ) ; action . setFault ( new org.ovirt.engine.api.model.Fault () ) ; action . getFault () . setReason ( message ) ; return javax.ws.rs.core.Response . ok () . entity ( action ) . build () ; }
void addItems ( org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model ) { listPanel . clear () ; for ( final org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaItemModel itemModel : ( ( java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaItemModel > ) ( model . getItems () ) ) ) { org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaItemView itemView = new org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaItemView () ; itemView . edit ( itemModel ) ; listPanel . add ( itemView ) ; } }
@ java.lang.Override public void save ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , map . getstorage_id () ) . addValue ( STRING_CONSTANT , map . getstorage_pool_id () ) . addValue ( STRING_CONSTANT , map . getstatus () ) ; getCallsHandler () . executeModification ( STRING_CONSTANT , parameterSource ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > () ; getStorageQuota () . setItems ( quotas ) ; getStorageQuota () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( quotas ) ) ; }
@ org.junit.Test public void shouldNotCreateCpuPinningForVirtualNumaNodes () { for ( org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode : org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) { numaNode . getVdsNumaNodeList () . clear () ; } java.util.Map < java.lang.String , java.lang.Object > cpuPinning = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory . buildCpuPinningWithNumaSetting ( org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes ) ; org.assertj.core.api.Assertions . assertThat ( cpuPinning ) . isEmpty () ; java.util.Map < java.lang.String , java.lang.Object > mapping = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory . buildVmNumatuneSetting ( NumaTuneMode.INTERLEAVE , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) ; org.assertj.core.api.Assertions . assertThat ( mapping ) . doesNotContainKeys ( VdsProperties.NUMA_TUNE_MODE , VdsProperties.NUMA_TUNE_NODESET ) ; }
public java.util.List < java.lang.Long > allocateAvailableMacs ( int numberOfMacs ) { if ( ( getAvailableMacsCount () ) < numberOfMacs ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT ) ; } final java.util.List < java.lang.Long > result = new java.util.ArrayList <> ( numberOfMacs ) ; int remainingMacs = numberOfMacs ; while ( remainingMacs > NUMBER_CONSTANT ) { final java.util.List < java.lang.Long > allocatedMacs = getRangeWithAvailableMac () . allocateMacs ( remainingMacs ) ; remainingMacs -= allocatedMacs . size () ; result . addAll ( allocatedMacs ) ; } return result ; }
public void setDefaultNames2 () { org.ovirt.engine.core.common.businessentities.VDS host = context.host ; if ( ( host . getVdsGroupId () ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getClusterById ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { context.hostCluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; setDefaultNames3 () ; } } , frontendHash ) , host . getVdsGroupId () ) ; } else { setDefaultNames3 () ; } }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumeList ) { int volumesUp = NUMBER_CONSTANT ; int volumesDown = NUMBER_CONSTANT ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity : volumeList ) { if ( ( volumeEntity . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP ) ) { volumesUp ++ ; } else { volumesDown ++ ; } } setNoOfVolumesTotal ( volumeList . size () ) ; setNoOfVolumesUp ( volumesUp ) ; setNoOfVolumesDown ( volumesDown ) ; }
@ org.junit.Before public void setup () { executor = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor ( fencedHost , new org.ovirt.engine.core.common.businessentities.FencingPolicy () ) ) ; org.mockito.Mockito . doReturn ( agentExecutor1 ) . doReturn ( agentExecutor2 ) . when ( executor ) . createFenceActionExecutor ( org.mockito.Matchers . any ( java.util.List . class ) ) ; }
private void mockStoragePoolDao ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid storagePoolId = getQueryParameters () . getStoragePoolId () ; if ( pool != null ) { pool . setId ( storagePoolId ) ; } org.mockito.Mockito . when ( storagePoolDaoMock . get ( storagePoolId , getUser () . getId () , getQueryParameters () . isFiltered () ) ) . thenReturn ( pool ) ; }
@ org.junit.Test public void checkShowLocks () { org.junit.Assert . assertTrue ( org.ovirt.engine.core.utils.lock.LockManagerFactory . getLockManager () . acquireLock ( lockLock1 ) . getFirst () ) ; org.junit.Assert . assertTrue ( org.ovirt.engine.core.utils.lock.LockManagerFactory . getLockManager () . acquireLock ( lockLock2 ) . getFirst () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , lockMager . showAllLocks () . size () ) ; org.ovirt.engine.core.utils.lock.LockManagerFactory . getLockManager () . clear () ; org.junit.Assert . assertTrue ( lockMager . showAllLocks () . isEmpty () ) ; }
@ org.junit.Test public void testGetAllMultiVmSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery . executeQueryCommand () ; org.junit.Assert . assertEquals ( vmResultList , searchQuery . getQueryReturnValue () . getReturnValue () ) ; }
protected java.lang.Object runQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams , java.lang.String sessionId ) { initQueryParams ( queryParams , sessionId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend . runQuery ( queryType , queryParams ) ; return ( result != null ) && ( result . getSucceeded () ) ? result . getReturnValue () : null ; }
static org.ovirt.engine.api.model.Disk getModel ( int index ) { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk () ; model . setSize ( ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) ; model . setFormat ( DiskFormat.COW . value () ) ; model . setInterface ( org.ovirt.engine.api.model.DiskInterface.IDE . value () ) ; model . setSparse ( true ) ; model . setBootable ( false ) ; model . setShareable ( false ) ; model . setPropagateErrors ( true ) ; return model ; }
@ java.lang.Override public void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( volume == null ) { return; } org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus status = org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils . getVolumeStatus ( volume ) ; com.google.gwt.resources.client.ImageResource statusImage = getStatusImage ( status ) ; java.lang.String tooltip = getToolTip ( status ) ; com.google.gwt.safehtml.shared.SafeHtml statusImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils . fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype . create ( statusImage ) . getHTML () ) ; sb . append ( applicationTemplates . statusTemplate ( statusImageHtml , tooltip , id ) ) ; }
public void calculateFreeVirtualMemory () { if ( ( ( ( getmem_commited () ) != null ) && ( ( getphysical_mem_mb () ) != null ) ) && ( ( getreserved_mem () ) != null ) ) { maxSchedulingMemory = ( ( ( getmax_vds_memory_over_commit () ) * ( getphysical_mem_mb () ) ) / NUMBER_CONSTANT ) - ( ( getmem_commited () ) + ( getreserved_mem () ) ) ; maxSchedulingMemory = ( ( maxSchedulingMemory ) > NUMBER_CONSTANT ) ? maxSchedulingMemory : NUMBER_CONSTANT ; } }
@ org.junit.Test public void validateFailsWithForceNotSupported () { org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters parameters = new org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters ( getVolume ( NUMBER_CONSTANT , true ) , true ) ; org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommand command = new org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommand ( parameters , null ) ; cmd = org.mockito.Mockito . spy ( command ) ; prepareMocks ( cmd ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED ) ; }
@ edu.umd.cs.findbugs.annotations.SuppressFBWarnings ( value = STRING_CONSTANT ) public org.ovirt.optimizer.config.ConfigProvider load () { try ( java.io.FileReader reader = new java.io.FileReader ( configFile ) ) { config . load ( reader ) ; } catch ( java.io.IOException ex ) { org.ovirt.optimizer.config.ConfigProvider.log . warn ( STRING_CONSTANT , configFile , config . getProperty ( org.ovirt.optimizer.config.ConfigProvider.SDK_SERVER ) ) ; } return this ; }
@ org.junit.Test public void testGetRelatedTableName () { org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , comp . getRelatedTableName ( STRING_CONSTANT , true ) ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , comp . getRelatedTableName ( STRING_CONSTANT , true ) ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , comp . getRelatedTableName ( null , true ) ) ; }
@ org.junit.Test public void nGuidGuidCtor () { b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; final org.ovirt.engine.core.compat.Guid g = b . getVdsId () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; final org.ovirt.engine.core.compat.Guid gu = b . getVmId () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 , gu ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { buildChildCommandInfos () ; for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > > entry : childCommandInfoMap . entrySet () ) { org.ovirt.engine.core.bll.CommandBase < > command = org.ovirt.engine.core.bll.utils.BackendUtils . getBackendCommandObjectsHandler ( log ) . createAction ( entry . getValue () . getFirst () , entry . getValue () . getSecond () , context ) ; command . insertAsyncTaskPlaceHolders () ; childCommandsMap . put ( entry . getKey () , command ) ; } return null ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.junit.Before public void setUp () { org.ovirt.engine.core.common.action.RemoveImageParameters params = new org.ovirt.engine.core.common.action.RemoveImageParameters ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveImageCommand < org.ovirt.engine.core.common.action.RemoveImageParameters > ( params , null ) { @ java.lang.Override protected void initImage () {} @ java.lang.Override protected void initStoragePoolId () {} @ java.lang.Override protected void initStorageDomainId () {} @ java.lang.Override protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) {} } ) ; org.mockito.Mockito . doReturn ( snapshotDAO ) . when ( cmd ) . getSnapshotDao () ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector . getInstance () . bind ( org.ovirt.engine.core.common.osinfo.OsRepository . class , osRepository ) ; }
public static org.ovirt.engine.api.model.WatchdogAction map ( org.ovirt.engine.core.common.businessentities.VmWatchdogAction action ) { switch ( action ) { case DUMP : return org.ovirt.engine.api.model.WatchdogAction.DUMP ; case NONE : return org.ovirt.engine.api.model.WatchdogAction.NONE ; case PAUSE : return org.ovirt.engine.api.model.WatchdogAction.PAUSE ; case POWEROFF : return org.ovirt.engine.api.model.WatchdogAction.POWEROFF ; case RESET : return org.ovirt.engine.api.model.WatchdogAction.RESET ; default: return null ; } }
private void onSave () { if ( ( org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel . getProgress () ) != null ) { return; } if ( ! ( validate () ) ) { return; } flush () ; org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel . startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( vdcActionType , getParameters () , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress () ; cancel () ; } } , this ) ; }
protected boolean setAndValidateCpuProfile () { getVm () . getStaticData () . setVdsGroupId ( org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroupId () ) ; getVm () . getStaticData () . setCpuProfileId ( org.ovirt.engine.core.bll.ImportVmCommandBase . getParameters () . getCpuProfileId () ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper . setAndValidateCpuProfile ( getVm () . getStaticData () , org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroup () . getCompatibilityVersion () ) ) ; }
private void createVmDiskOnSd ( boolean wipeAfterDelete , boolean passDiscard ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid . newGuid () ; disk . setId ( diskId ) ; disk . setWipeAfterDelete ( wipeAfterDelete ) ; storageDomainDisks . add ( disk ) ; storageDomainVmDisks . add ( createVmDisk ( diskId , passDiscard ) ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue . getReturnValue () ) ) ) ; setIsEmpty ( ( ( ( ( java.util.List ) ( getItems () ) ) . size () ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( T obj ) { return createIdParameterMapper ( obj . getId () ) . addValue ( STRING_CONSTANT , obj . getName () ) . addValue ( STRING_CONSTANT , obj . getQosId () ) . addValue ( STRING_CONSTANT , obj . getDescription () ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getResolveContentConflict () . getEntity () ) == null ) { getServerHooksList () . setIsChangable ( false ) ; } else { getServerHooksList () . setIsChangable ( getResolveContentConflict () . getEntity () ) ; } }
@ java.lang.Override protected boolean validate () { if ( ( org.ovirt.engine.core.bll.VmSlaPolicyCommand . getVm () ) == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } if ( ( org.ovirt.engine.core.bll.VmSlaPolicyCommand . getVm () . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) { return org.ovirt.engine.core.bll.VmSlaPolicyCommand . failVmStatusIllegal () ; } return true ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( volume ) . when ( volumeDao ) . getById ( masterVolumeId ) ; org.mockito.Mockito . doReturn ( GlusterStatus.UP ) . when ( volume ) . getStatus () ; org.mockito.Mockito . doReturn ( cluster ) . when ( command ) . getCluster () ; org.mockito.Mockito . doReturn ( vds ) . when ( command ) . getUpServer () ; org.mockito.Mockito . doReturn ( VDSStatus.Up ) . when ( vds ) . getStatus () ; }
@ org.junit.Test public void testUpdate () { existingGroup . setName ( existingGroup . getName () . toUpperCase () ) ; existingGroup . setDomain ( existingGroup . getDomain () . toUpperCase () ) ; dao . update ( existingGroup ) ; org.ovirt.engine.core.common.businessentities.aaa.DbGroup result = dao . get ( existingGroup . getId () ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( existingGroup , result ) ; }
private boolean isOptionEnabledOnVolume ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , java.util.List < org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > > predicates ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > volumeOptionsEnabled = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > ( volume . getOptions () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > filteredOptions = volumeOptionsEnabled ; for ( org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > predicate : predicates ) { filteredOptions = org.ovirt.engine.core.common.utils.ListUtils . filter ( filteredOptions , predicate ) ; } return ! ( filteredOptions . isEmpty () ) ; }
private java.lang.String addressesAsString ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NameServer > nameServers ) { if ( nameServers . isEmpty () ) { return null ; } return nameServers . stream () . map ( NameServer : : getAddress ) . sorted () . collect ( java.util.stream.Collectors . joining ( STRING_CONSTANT ) ) ; }
private void removeNetwork () { networkMap . remove ( getNetworkList () . getSelectedItem () ) ; getNetworkList () . setItems ( new java.util.ArrayList < java.lang.String > ( networkMap . keySet () ) ) ; getNetworkList () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrDefault ( networkMap . keySet () ) ) ; }
private void initNetworkModels () { java.util.Map < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > networkModels = new java.util.HashMap < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > () ; for ( org.ovirt.engine.core.common.businessentities.Network network : allNetworks ) { networkModels . put ( network . getname () , new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ( network , this ) ) ; } setNetworks ( networkModels ) ; }
@ org.junit.Test public void testCanEditARunningVM () { prepareVmToPassValidate () ; vm . setStatus ( VMStatus.Up ) ; mockDiskDaoGetAllForVm ( java.util.Collections . emptyList () ) ; mockVmValidator () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areUpdatedFieldsLegal () ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getRestoreCommand () ) ) { restore () ; } else if ( command == ( getRemoveCommand () ) ) { remove () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancelConfirm () ; } }
private void createCommand () { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase () ; params . setStorageDomainId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; params . setStoragePoolId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand ( params ) ) ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao () ; org.mockito.Mockito . doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( vdsDao ) . when ( cmd ) . getVdsDao () ; }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
private java.util.List < org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback > verifyRunAction ( int exepectedNumOfRunActionExecutions , boolean waitForResult ) { org.mockito.Mockito . verify ( frontend , org.mockito.Mockito . times ( exepectedNumOfRunActionExecutions ) ) . runMultipleAction ( org.mockito.ArgumentMatchers . eq ( org.ovirt.engine.ui.uicommonweb.action.ACTION_TYPE ) , org.mockito.ArgumentMatchers . any () , callbackCaptor . capture () , org.mockito.ArgumentMatchers . eq ( false ) , org.mockito.ArgumentMatchers . eq ( waitForResult ) ) ; return callbackCaptor . getAllValues () ; }
@ org.junit.Test public void testVmOvfCreation ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.utils.ovf.OvfVmWriterTest . createVM () ; java.lang.String xml = manager . ExportVm ( vm , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ) ; org.junit.Assert . assertNotNull ( xml ) ; final org.ovirt.engine.core.common.businessentities.VM newVm = new org.ovirt.engine.core.common.businessentities.VM () ; manager . ImportVm ( xml , newVm , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ) ; org.ovirt.engine.core.utils.ovf.OvfVmWriterTest . assertVm ( vm , newVm , vm . getDbGeneration () ) ; }
protected void initFrontend () { frontend . setEventsHandler ( frontendEventsHandler ) ; frontend . getFrontendFailureEvent () . addListener ( frontendFailureEventListener ) ; frontend . getFrontendNotLoggedInEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { user . logout () ; } } ) ; frontend . setFilterQueries ( filterFrontendQueries () ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyValue ) ) { return false ; } org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyValue other = ( ( org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyValue ) ( obj ) ) ; return ( ( length ) == ( other.length ) ) && ( ( width ) == ( other.width ) ) ; }
public void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
java.lang.String getFullPath ( final java.io.File brandingRootPath , final java.lang.String path ) { java.lang.String result = null ; java.lang.String mergedPath = new java.io.File ( brandingRootPath . getAbsolutePath () , ( path == null ? STRING_CONSTANT : path ) ) . getAbsolutePath () ; if ( ( path != null ) && ( org.ovirt.engine.core.utils.servlet.ServletUtils . isSane ( mergedPath ) ) ) { result = mergedPath ; } else { org.ovirt.engine.ui.frontend.server.gwt.BrandingServlet.log . error ( ( ( STRING_CONSTANT + mergedPath ) + STRING_CONSTANT ) ) ; } return result ; }
@ org.junit.Test public void validateFailsForDeviceAlreadyInUse () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice ( STRING_CONSTANT , null ) ; storageDevice . setCanCreateBrick ( false ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays . asList ( storageDevice ) ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
public java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.Object > description = new java.util.TreeMap <> () ; description . put ( org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.DISK_ALIAS , disk . getDiskAlias () ) ; description . put ( org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.DISK_DESCRIPTION , ( ( disk . getDiskDescription () ) != null ? disk . getDiskDescription () : STRING_CONSTANT ) ) ; return org.ovirt.engine.core.utils.JsonHelper . mapToJson ( description , false ) ; }
public void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( STRING_CONSTANT , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams . setMaxCount ( NUMBER_CONSTANT ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
@ org.junit.Test public void encodeDecodeWithNonAsciiDiskAliasAndDescription ( ) throws java.lang.Exception { disk . setDiskAlias ( STRING_CONSTANT ) ; disk . setDiskDescription ( STRING_CONSTANT ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( STRING_CONSTANT ) ) , generateDiskDescriptionJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( STRING_CONSTANT ) ) , generateEncodingJsonEntry ( NUMBER_CONSTANT ) ) ; assertDiskDescriptionDecoding ( disk ) ; }
public static org.ovirt.engine.api.model.Vm map ( java.lang.String data , org.ovirt.engine.api.model.ConfigurationType type , org.ovirt.engine.api.model.Vm vm ) { org.ovirt.engine.api.model.Initialization initialization = vm . getInitialization () ; if ( initialization == null ) { initialization = new org.ovirt.engine.api.model.Initialization () ; vm . setInitialization ( initialization ) ; } org.ovirt.engine.api.model.Configuration configuration = initialization . getConfiguration () ; if ( configuration == null ) { configuration = new org.ovirt.engine.api.model.Configuration () ; initialization . setConfiguration ( configuration ) ; } configuration . setData ( data ) ; configuration . setType ( type ) ; return vm ; }
public void runCommand ( ) throws org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult { if ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ACTION_ADD . equals ( action ) ) { addDomain () ; } else if ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ACTION_EDIT . equals ( action ) ) { editDomain () ; } else if ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ACTION_DELETE . equals ( action ) ) { deleteDomain () ; } else if ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ACTION_VALIDATE . equals ( action ) ) { validate () ; } else if ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ACTION_LIST . equals ( action ) ) { getConfiguration () ; } }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.CancelMigrate , new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase ( org.ovirt.engine.core.bll.CancelMigrateVmCommand . getVm () . getRunOnVds () , org.ovirt.engine.core.bll.CancelMigrateVmCommand . getParameters () . getVmId () ) ) ; setSucceeded ( retVal . getSucceeded () ) ; }
public boolean isImagesExists ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images , org.ovirt.engine.core.compat.Guid storagePoolId ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage fromIrs = isImageExist ( storagePoolId , image ) ; if ( fromIrs == null ) { return false ; } } return true ; }
private void isToSyncChanged () { setBootProtocolsAvailable ( true ) ; initValues () ; java.lang.Boolean isEditingEnabled = ( ! ( getIsToSync () . getIsChangable () ) ) || ( getIsToSync () . getEntity () ) ; setBootProtocolsAvailable ( isEditingEnabled ) ; getQosOverridden () . setIsChangeable ( isEditingEnabled ) ; updateQosChangeability () ; getCustomPropertiesModel () . setIsChangeable ( isEditingEnabled ) ; }
@ org.junit.Test public void failWhenProxyHostNotAvailable () { org.mockito.Mockito . when ( proxyLocator . isProxyHostAvailable () ) . thenReturn ( false ) ; java.util.List < java.lang.String > messages = new java.util.LinkedList <> () ; boolean result = validator . isProxyHostAvailable ( new org.ovirt.engine.core.common.businessentities.VDS () , messages ) ; org.junit.Assert . assertFalse ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , messages . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , messages . get ( NUMBER_CONSTANT ) ) ; }
void registerModelEventListeners ( final org.ovirt.engine.ui.common.uicommon.model.ModelProvider < ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel > modelProvider ) { modelProvider . getModel () . getPropertyChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = args ; if ( STRING_CONSTANT . equals ( pcArgs.propertyName ) ) { boolean isAvailable = modelProvider . getModel () . getIsAvailable () ; setAccessible ( isAvailable ) ; } } } ) ; }
protected static boolean CanAttachPrestartedVmToUser ( org.ovirt.engine.core.compat.Guid vmId ) { boolean returnValue = true ; java.util.ArrayList < java.lang.String > messages = new java.util.ArrayList < java.lang.String > () ; if ( org.ovirt.engine.core.bll.VmPoolCommandBase . vmAssignedToUser ( vmId , messages ) ) { returnValue = false ; } if ( returnValue ) { if ( ! ( org.ovirt.engine.core.bll.VmPoolCommandBase . vmIsRunningStateless ( vmId ) ) ) { returnValue = false ; } } return returnValue ; }
@ java.lang.Override public java.lang.Void runInTransaction () { initializeVds ( true ) ; AlertIfPowerManagementNotConfigured ( getParameters () . getVdsStaticData () ) ; TestVdsPowerManagementStatus ( getParameters () . getVdsStaticData () ) ; setSucceeded ( true ) ; setActionReturnValue ( getVdsIdRef () ) ; getCompensationContext () . resetCompensation () ; return null ; }
@ org.junit.Test public void testGet () { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID } , getEntity ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.Disk disk = resource . get () ; org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest . verifyModelSpecific ( disk , NUMBER_CONSTANT ) ; verifyLinks ( disk ) ; }
private org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand < org.ovirt.engine.core.common.action.VmNumaNodeOperationParameters > mockedCommand ( org.ovirt.engine.core.common.action.VmNumaNodeOperationParameters parameters ) { final org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand < org.ovirt.engine.core.common.action.VmNumaNodeOperationParameters > command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand ( parameters , null ) ) ; org.mockito.Mockito . when ( command . getDbFacade () ) . thenReturn ( dbFacade ) ; org.mockito.Mockito . when ( dbFacade . getVmNumaNodeDao () ) . thenReturn ( vmNumaNodeDao ) ; org.mockito.Mockito . when ( dbFacade . getVdsNumaNodeDao () ) . thenReturn ( vdsNumaNodeDao ) ; org.mockito.Mockito . when ( dbFacade . getVmDao () ) . thenReturn ( vmDao ) ; command . init () ; return command ; }
@ java.lang.Override public void run () { org.ovirt.engine.core.notifier.Notifier.log . info ( STRING_CONSTANT ) ; if ( ( serviceHandler . size () ) > NUMBER_CONSTANT ) { for ( java.util.concurrent.ScheduledFuture < > scheduled : serviceHandler ) { scheduled . cancel ( true ) ; } } if ( ( scheduler . size () ) > NUMBER_CONSTANT ) { for ( java.util.concurrent.ScheduledExecutorService executer : scheduler ) { executer . shutdown () ; } } org.ovirt.engine.core.notifier.Notifier.log . info ( STRING_CONSTANT ) ; }
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > setUpTemplates ( boolean notFound ) { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > ret = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > () ; if ( notFound ) { return ret ; } for ( int i = NUMBER_CONSTANT ; i < ( NAMES.length ) ; i ++ ) { ret . put ( getEntity ( i ) , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ) ; } return ret ; }
private void setUpDaoMocks () { vmDaoMock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.VmDao . class ) ; org.mockito.Mockito . doReturn ( vmDaoMock ) . when ( snapshotVmConfigurationHelper ) . getVmDao () ; org.mockito.Mockito . doReturn ( snapshotDaoMock ) . when ( snapshotVmConfigurationHelper ) . getSnapshotDao () ; diskImageDaoMock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.DiskImageDao . class ) ; org.mockito.Mockito . doReturn ( diskImageDaoMock ) . when ( snapshotVmConfigurationHelper ) . getDiskImageDao () ; org.mockito.Mockito . when ( diskImageDaoMock . get ( existingImageId ) ) . thenReturn ( existingDiskImage ) ; }
public void onForceRemove () { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow () ) ) ; if ( ! ( model . validate () ) ) { return; } org.ovirt.engine.core.common.action.StoragePoolParametersBase tempVar = new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem () ) ) . getId () ) ; tempVar . setForceDelete ( true ) ; org.ovirt.engine.core.common.action.VdcActionParametersBase parametersBase = tempVar ; org.ovirt.engine.ui.frontend.Frontend . RunAction ( VdcActionType.RemoveStoragePool , parametersBase ) ; cancel () ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { if ( ( _resultError ) || ( ! ( _installIncomplete ) ) ) { _parser . cliNoop () ; } else { java.lang.String [] msgs = ( ( java.lang.String [] ) ( _parser . cliEnvironmentGet ( org.ovirt.ovirt_host_deploy.constants.CoreEnv.INSTALL_INCOMPLETE_REASONS ) ) ) ; _messages . post ( InstallerMessages.Severity.WARNING , STRING_CONSTANT ) ; for ( java.lang.String m : msgs ) { _messages . post ( InstallerMessages.Severity.WARNING , m ) ; } } return true ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand . getNetwork () . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getNetworkDao () . save ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand . getNetwork () ) ; addPermissions () ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand . getReturnValue () . setActionReturnValue ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand . getNetwork () . getId () ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void validateSpaceNotEnough ( ) throws java.lang.Exception { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( storageDomainValidator ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers . anyList () ) ; org.junit.Assert . assertFalse ( cmd . validateSpaceRequirements () ) ; org.mockito.Mockito . verify ( storageDomainValidator ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers . anyList () ) ; org.mockito.Mockito . verify ( storageDomainValidator , org.mockito.Mockito . never () ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers . anyList () ) ; }
@ java.lang.Override public void doFilter ( final javax.servlet.ServletRequest request , final javax.servlet.ServletResponse response , final javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { java.util.Locale locale = determineLocale ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ) ; request . setAttribute ( org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE , locale ) ; setCookie ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) , ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) , locale ) ; chain . doFilter ( request , response ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetMacPoolById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendMacPoolResourceTest.MAC_POOL_ID } , null ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void labelBeingAttachedToValidBondExistingBondValid () { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( STRING_CONSTANT ) ; bond . setSlaves ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = new java.util.ArrayList ( java.util.Arrays . asList ( bond ) ) ; org.ovirt.engine.core.common.businessentities.network.NicLabel nicLabel = new org.ovirt.engine.core.common.businessentities.network.NicLabel ( bond . getId () , bond . getName () , STRING_CONSTANT ) ; org.junit.Assert . assertThat ( createNicLabelValidator ( nics ) . labelBeingAttachedToValidBond ( nicLabel ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private static void addBondDeviceToHost ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , java.lang.Object [] interfaces ) { vds . getInterfaces () . add ( iface ) ; if ( interfaces != null ) { for ( java.lang.Object name : interfaces ) { for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface tempInterface : vds . getInterfaces () ) { if ( tempInterface . getName () . equals ( name . toString () ) ) { tempInterface . setBondName ( iface . getName () ) ; break; } } } } }
public void getDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : NUMBER_CONSTANT ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit , getDefaultConfigurationVersion () ) , aQuery ) ; }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParameters () { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getId () , org.ovirt.engine.core.bll.RunVmCommand.STATELESS_SNAPSHOT_DESCRIPTION , false ) ; parameters . setShouldBeLogged ( false ) ; parameters . setParentCommand ( org.ovirt.engine.core.bll.RunVmCommand . getActionType () ) ; parameters . setParentParameters ( org.ovirt.engine.core.bll.RunVmCommand . getParameters () ) ; parameters . setEntityInfo ( org.ovirt.engine.core.bll.RunVmCommand . getParameters () . getEntityInfo () ) ; parameters . setSnapshotType ( SnapshotType.STATELESS ) ; return parameters ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.lang.Iterable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > iVdcQueryableItems = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > items = new java.util.ArrayList <> () ; java.util.Iterator < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > networkInterfacesIterator = iVdcQueryableItems . iterator () ; while ( networkInterfacesIterator . hasNext () ) { items . add ( ( ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) ( networkInterfacesIterator . next () ) ) ) ; } updateItems ( items ) ; }
@ org.junit.Test public void testIsQcowV2SupportedForDcVersionV3 () { disk1 . setVolumeFormat ( VolumeFormat.COW ) ; disk1 . setQcowCompat ( QcowCompat.QCOW2_V2 ) ; org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool () ; sp . setStoragePoolFormatType ( StorageFormatType.V3 ) ; org.mockito.Mockito . when ( storagePoolDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( sp ) ; org.junit.Assert . assertThat ( validator . isQcowVersionSupportedForDcVersion () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private void updateRemovedLabelOnNics ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsToConfigureByName ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > labelToNic = getLabelToNic ( nicsToConfigureByName . values () ) ; for ( java.lang.String removedLabel : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand . getParameters () . getRemovedLabels () ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithLabel = labelToNic . get ( removedLabel ) ; if ( nicWithLabel != null ) { nicWithLabel . getLabels () . remove ( removedLabel ) ; } } }
private void mockDaos ( boolean pluggedInterface ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.network.FindActiveVmsUsingNetworkTest . createVM ( org.ovirt.engine.core.bll.network.FindActiveVmsUsingNetworkTest.VM_NAME , org.ovirt.engine.core.bll.network.FindActiveVmsUsingNetworkTest.NETWORK_NAME , pluggedInterface ) ; org.mockito.Mockito . when ( vmDao . getAllRunningForVds ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . singletonList ( vm ) ) ; org.mockito.Mockito . when ( vmNetworkInterfaceDao . getAllForVm ( vm . getId () ) ) . thenReturn ( vm . getInterfaces () ) ; }
private void writeJaxbCustomization ( java.lang.String tag , java.lang.String name , java.lang.String value ) { writer . writeStartElement ( org.ovirt.api.metamodel.tool.SchemaGenerator.XS_URI , STRING_CONSTANT ) ; writer . writeStartElement ( org.ovirt.api.metamodel.tool.SchemaGenerator.XS_URI , STRING_CONSTANT ) ; writer . writeStartElement ( org.ovirt.api.metamodel.tool.SchemaGenerator.JAXB_URI , tag ) ; writer . writeAttribute ( name , value ) ; writer . writeEndElement () ; writer . writeEndElement () ; writer . writeEndElement () ; }
private void initEditors () { volumeTypeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelLabelEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType > () ) ; forceEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; showBricksListEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; serverEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.common.businessentities.VDS > () { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds . getHostName () ; } } ) ; }
@ org.junit.Test public void testVmWithDisks () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = new java.util.ArrayList <> () ; disks . add ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , disks , null ) , true , null ) ; }
private void filter () { java.lang.String [] ids = this . getParsedId () ; this . filteredId = new java.util.ArrayList <> () ; for ( java.lang.String id : ids ) { if ( ! ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.ALL . equals ( id ) ) ) { this . filteredId . add ( id ) ; } } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { stopProgress () ; java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ; providers . add ( NUMBER_CONSTANT , null ) ; getProviders () . setItems ( providers ) ; }
private org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel.GlusterSwiftAction getGlusterSwiftAction ( boolean isStart , boolean isStop , boolean isRestart ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel.GlusterSwiftAction action = null ; if ( isStart ) { action = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel.GlusterSwiftAction.START ; } else if ( isStop ) { action = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel.GlusterSwiftAction.STOP ; } else if ( isRestart ) { action = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel.GlusterSwiftAction.RESTART ; } return action ; }
@ java.lang.Override protected void ExecuteVdsBrokerCommand () { int storageType = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . getParameters () . getStorageType () . getValue () ; _result = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . getBroker () . getDeviceList ( storageType ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . ProceedProxyReturnValue () ; setReturnValue ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . ParseLUNList ( _result.lunList ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult validateNetworkInterfaces () { org.ovirt.engine.core.bll.ValidationResult validationResult = validateInterfacesAttachedToClusterNetworks ( getClusterNetworksNames () , getInterfaceNetworkNames () ) ; if ( ! ( validationResult . isValid () ) ) { return validationResult ; } validationResult = validateInterfacesAttachedToVmNetworks ( getClusterNetworks () , getInterfaceNetworkNames () ) ; if ( ! ( validationResult . isValid () ) ) { return validationResult ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; if ( ( value == null ) || ( ( value instanceof java.lang.String ) && ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( ( ( java.lang.String ) ( value ) ) ) ) ) ) { result . setSuccess ( false ) ; result . getReasons () . add ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . quotaMustBeSelectedInvalidReason () ) ; } return result ; }
protected org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData getCurrentIrsProxyData () { if ( ! ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData . containsKey ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand . getParameters () . getStoragePoolId () ) ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData . put ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand . getParameters () . getStoragePoolId () , new org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand . getParameters () . getStoragePoolId () ) ) ; } return org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData . get ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand . getParameters () . getStoragePoolId () ) ; }
@ org.junit.Test public void canDoActionFailsOnNullCluster () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( null ) ) ) ; org.junit.Assert . assertFalse ( cmd . canDoAction () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getCanDoActionMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID . toString () ) ) ; }
@ java.lang.Override protected void ExecuteIrsBrokerCommand () { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.log . infoFormat ( STRING_CONSTANT , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand . getParameters () . getStoragePoolId () ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . runVdsCommand ( VDSCommandType.HSMGetAllTasksInfo , new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand . getCurrentIrsProxyData () . getCurrentVdsId () ) ) . getReturnValue () ) ; }
@ org.junit.Test public void failsInNotImportedAndNotExists ( ) throws java.lang.Exception { mockGetExistingDomain ( false ) ; cmd . init () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( STRING_CONSTANT , cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; org.mockito.Mockito . verify ( backend , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . runInternalQuery ( org.mockito.Matchers . eq ( VdcQueryType.GetExistingStorageDomainList ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class ) ) ; org.mockito.Mockito . verify ( cmd , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . executeCommand () ; }
private void refreshTooltip () { if ( ( ! ( isAttached () ) ) || ( ! ( isVisible () ) ) ) { return; } if ( org.ovirt.engine.ui.common.utils.ElementUtils . detectHorizontalOverflow ( label . getElement () ) ) { tooltip . setText ( getText () ) ; } else { tooltip . setText ( null ) ; } }
@ java.lang.Override protected void executeQuery ( org.ovirt.engine.core.bll.adbroker.DirectorySearcher directorySearcher ) { final java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > userList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LdapUser > () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) final java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > usersList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ) ( directorySearcher . findAll ( getLdapQueryData () ) ) ) ; for ( final org.ovirt.engine.core.common.businessentities.LdapUser searchResult : usersList ) { { org.ovirt.engine.core.common.businessentities.LdapUser user = populateUserData ( searchResult , getLdapQueryData () . getDomain () , false ) ; userList . add ( user ) ; } } setReturnValue ( userList ) ; setSucceeded ( true ) ; }
public java.util.Map activateStorageDomain ( java.lang.String sdUUID , java.lang.String spUUID ) { try { log . info ( STRING_CONSTANT , new java.lang.Object [] { spUUID , sdUUID } ) ; final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById ( spUUID ) ; final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter . getStorageDomainMap () . get ( sdUUID ) ; if ( storageDomain != null ) { storageDomain . setDomainStatus ( StorageDomain.DomainStatus.ACTIVE ) ; updateStorageDomain ( storageDomain ) ; } return getOKStatus () ; } catch ( java.lang.Exception e ) { throw error ( e ) ; } }
void initAlertEventFooterPanel ( org.ovirt.engine.ui.webadmin.uicommon.model.AlertModelProvider alertModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.EventModelProvider eventModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.TaskModelProvider taskModelProvider , org.ovirt.engine.ui.webadmin.ApplicationResources resources , org.ovirt.engine.ui.webadmin.ApplicationTemplates templates , com.google.gwt.event.shared.EventBus eventBus , org.ovirt.engine.ui.common.system.ClientStorage clientStorage , org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { alertEventFooterPanel . add ( new org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView ( alertModelProvider , eventModelProvider , taskModelProvider , resources , templates , eventBus , clientStorage , constants ) ) ; }
protected void initFrontend () { frontend . setEventsHandler ( frontendEventsHandler ) ; frontend . getFrontendFailureEvent () . addListener ( frontendFailureEventListener ) ; frontend . getFrontendNotLoggedInEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { user . logout () ; } } ) ; frontend . setFilterQueries ( filterFrontendQueries () ) ; }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
protected void initSoundCard ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . isSoundcardEnabled ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel () , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel () . getIsSoundcardEnabled () . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( NUMBER_CONSTANT , false , false , false ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , true , true , true ) ; setUpClusterExpectations ( GUIDS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateNetworkOnCluster , org.ovirt.engine.core.common.action.NetworkClusterParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , true , true ) ) ; verifyUpdate ( resource . update ( getModel ( NUMBER_CONSTANT ) ) ) ; }
@ org.junit.Test ( expected = java.util.concurrent.TimeoutException . class ) public void testGetRootDSENoServers ( ) throws java.lang.Exception { java.util.List < java.net.URI > urls = new java.util.ArrayList < java.net.URI > () ; org.ovirt.engine.core.bll.adbroker.DirectorySearcher dirSearcher = mockDirectorySearcher ( urls ) ; org.ovirt.engine.core.bll.adbroker.GetRootDSETask getRootDSETask = new org.ovirt.engine.core.bll.adbroker.GetRootDSETask ( dirSearcher , STRING_CONSTANT , null ) ; org.ovirt.engine.core.bll.adbroker.DirectorySearcherTest . execute ( getRootDSETask ) ; }
private java.lang.Integer parseInt ( java.lang.Object entity ) { if ( entity instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( entity ) ) ; } if ( ! ( entity instanceof java.lang.String ) ) { return null ; } java.lang.String text = ( ( java.lang.String ) ( entity ) ) ; try { return java.lang.Integer . valueOf ( text ) ; } catch ( java.lang.Exception e ) { return null ; } }
@ java.lang.Override public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllCanDoPass , boolean waitForResult ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > () ; list . add ( returnValue ) ; return list ; } else { return runMultipleActionsImpl ( actionType , parameters , false , isRunOnlyIfAllCanDoPass , waitForResult , null ) ; } }
private void doProviderSearch () { org.ovirt.engine.ui.frontend.AsyncQuery providersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; providersQuery . setModel ( this ) ; providersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setProviders ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllProviders ( providersQuery ) ; }
@ java.lang.Override protected boolean canDoAction () { org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand < T > . DetachNetworkValidator validator = new DetachNetworkValidator ( getNetwork () , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand . getParameters () . getNetworkCluster () ) ; return ( ( validate ( validator . notManagementNetwork () ) ) && ( validate ( validator . clusterNetworkNotUsedByVms () ) ) ) && ( validate ( validator . clusterNetworkNotUsedByTemplates () ) ) ; }
@ org.junit.Test public void testGetRootWithHierarchy () { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( STRING_CONSTANT , STRING_CONSTANT ) ; tagsDirector . addTag ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags tags = tagsDirector . getRootTag () ; org.junit.Assert . assertNotNull ( tags ) ; org.junit.Assert . assertEquals ( TagsDirector.ROOT_TAG_ID , tags . getTagId () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , tags . getChildren () . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , tags . getChildren () . get ( NUMBER_CONSTANT ) . getTagName () ) ; }
private void networkNameTest ( org.ovirt.engine.core.bll.ValidationResult expected , boolean networkLinkingSupported , java.lang.String networkName ) { mockConfigRule . mockConfigValue ( ConfigValues.NetworkLinkingSupported , version , networkLinkingSupported ) ; org.mockito.Mockito . when ( nic . getNetworkName () ) . thenReturn ( networkName ) ; org.junit.Assert . assertEquals ( expected , validator . networkNameValid () ) ; }
public static void getDataCenterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
private org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > setupCanAddVmFromSnapshotTests ( final int domainSizeGB , final int sizeRequired , org.ovirt.engine.core.compat.Guid sourceSnapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB , sizeRequired ) ; initializeVmDAOMock ( vm ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = createVmFromSnapshotCommand ( vm , sourceSnapshotId ) ; org.ovirt.engine.core.bll.AddVmCommandTest . initCommandMethods ( cmd ) ; return cmd ; }
private void updateDcLabels () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNetworkLabelsByDataCenterId ( getSelectedDc () . getId () , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String label = getNetworkLabel () . getSelectedItem () ; getNetworkLabel () . setItems ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; getNetworkLabel () . setSelectedItem ( label ) ; onExportChanged () ; } } ) ) ; }
private boolean initVirtResources () { if ( InitializeStorage () ) { processFence () ; processStoragePoolStatus () ; } else { java.util.Map < java.lang.String , java.lang.String > customLogValues = java.util.Collections . singletonMap ( STRING_CONSTANT , getStoragePoolName () ) ; setNonOperational ( NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE , customLogValues ) ; return false ; } return true ; }
private void setUpDisks () { com.woorea.openstack.cinder.model.Volume existingVolume = volumes . get ( NUMBER_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > existingDisks = new java.util.ArrayList ( org.ovirt.engine.core.bll.storage.disk.cinder.CinderBroker . volumesToCinderDisks ( java.util.Collections . singletonList ( existingVolume ) , getQueryParameters () . getId () ) ) ; org.mockito.Mockito . when ( diskDao . getAllFromDisksByDiskStorageType ( DiskStorageType.CINDER , getUser () . getId () , false ) ) . thenReturn ( existingDisks ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.NetworkView mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.NetworkView entity = super . mapRow ( rs , rowNum ) ; entity . setStoragePoolName ( rs . getString ( STRING_CONSTANT ) ) ; entity . setCompatabilityVersion ( new org.ovirt.engine.core.compat.Version ( rs . getString ( STRING_CONSTANT ) ) ) ; return entity ; }
private void mockBackendQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue () ; queryReturnValue . setReturnValue ( returnValue ) ; org.mockito.Mockito . when ( mockBackend . runPublicQuery ( org.mockito.ArgumentMatchers . eq ( queryType ) , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( queryReturnValue ) ; }
protected final org.ovirt.engine.core.common.businessentities.network.NetworkAttachment setUpEntityExpectations ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity , int index ) { org.mockito.Mockito . when ( entity . getId () ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito . when ( entity . getNetworkId () ) . thenReturn ( GUIDS [ index ] ) ; setUpEntityExpectations ( entity ) ; return entity ; }
static org.ovirt.engine.core.common.businessentities.VM setUpEntityExpectations ( org.ovirt.engine.core.common.businessentities.VM entity , org.ovirt.engine.core.common.businessentities.VmDynamic dynamicVm ) { org.mockito.Mockito . when ( entity . getQueryableId () ) . thenReturn ( org.ovirt.engine.api.restapi.resource.BackendVmApplicationResourceTest.VM_ID ) ; org.mockito.Mockito . when ( entity . getDynamicData () ) . thenReturn ( dynamicVm ) ; org.mockito.Mockito . when ( entity . getAppList () ) . thenReturn ( org.ovirt.engine.api.restapi.resource.BackendVmApplicationResourceTest . getAppList () ) ; return entity ; }
@ java.lang.Override public void setAcceptableValues ( java.util.Collection < java.util.List < T > > newValues ) { if ( ( newValues == null ) || ( newValues . isEmpty () ) ) { return; } super . setValue ( newValues . iterator () . next () , false ) ; super . setAcceptableValues ( newValues ) ; itemIndex . clear () ; for ( java.util.List < T > value : newValues ) { addToItems ( value ) ; itemIndex . add ( value . get ( NUMBER_CONSTANT ) ) ; } }
@ org.junit.Test public void testIncompleteImport ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; try { resource . doImport ( new org.ovirt.engine.api.model.Action () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public void checkIsENGINEUser ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel loginModel ) { loginModel . getIsENGINEUser () . setEntity ( null ) ; boolean isENGINEUser = true ; for ( org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup : loginModel . getLoggedUserActionGroupList () ) { if ( ! ( loginModel . getENGINEUserActionGroupList () . contains ( actionGroup ) ) ) { isENGINEUser = false ; break; } } loginModel . getIsENGINEUser () . setEntity ( isENGINEUser ) ; }
private void doTestGetNotFound ( java.lang.String id ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendPermitResource resource = new org.ovirt.engine.api.restapi.resource.BackendPermitResource ( id , new org.ovirt.engine.api.restapi.resource.BackendPermitsResource ( org.ovirt.engine.api.restapi.resource.BackendPermitResourceTest.ROLE_ID ) ) ; resource . getParent () . setMappingLocator ( mapperLocator ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ java.lang.Override protected void onEntityChanged () { super . onEntityChanged () ; if ( ( getEntity () ) != null ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.users.UserGroup > items = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.users.UserGroup > () ; for ( java.lang.String groupFullName : getEntity () . getGroupNames () ) { items . add ( org.ovirt.engine.ui.uicommonweb.models.users.UserGroupListModel . createUserGroup ( groupFullName ) ) ; } setItems ( items ) ; } else { setItems ( null ) ; } }
@ javax.annotation.PostConstruct public void initDictionaries () { org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log . info ( STRING_CONSTANT ) ; org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary . clear () ; for ( org.ovirt.engine.core.compat.Version ver : org.ovirt.engine.core.common.config.Config . < java.util.HashSet < org.ovirt.engine.core.compat.Version > > getValue ( ConfigValues.SupportedClusterLevels ) ) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary . put ( ver , new org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager ( ver ) ) ; } org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log . info ( STRING_CONSTANT ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( STRING_CONSTANT . equals ( args.propertyName ) ) { addDiskList ( model ) ; } else if ( STRING_CONSTANT . equals ( args.propertyName ) ) { updateColumnsAvailability ( model ) ; updateListHeader () ; } }
@ java.lang.SuppressWarnings ( value = { STRING_CONSTANT } ) private void initManualWidgets () { usageTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer () ) ; uuidEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxOnlyEditor () ; uuidEditorWithInfo = new org.ovirt.engine.ui.common.widget.EntityModelWidgetWithInfo ( new org.ovirt.engine.ui.common.widget.label.EnableableFormLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderSecretPopupView.constants . idLibvirtSecret () ) , uuidEditor ) ; uuidEditorWithInfo . setExplanation ( org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderSecretPopupView.constants . idLibvirtSecretHint () ) ; }
@ java.lang.Override public boolean disconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.Provider provider = getProviderDao () . get ( org.ovirt.engine.core.compat.Guid . createGuidFromString ( storageDomain . getStorage () ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = getLibvirtSecretDao () . getAllByProviderId ( provider . getId () ) ; org.ovirt.engine.core.common.businessentities.VDS vds = getVdsDao () . get ( vdsId ) ; return unregisterLibvirtSecrets ( storageDomain , vds , libvirtSecrets ) ; }
@ org.junit.Test public void testFirstMatch () { java.util.List < java.lang.String > source = java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( source , STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( source , STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( null , org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( source , ( ( java.lang.String [] ) ( null ) ) ) ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters () { return new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( getEnclosingCommand () . getParameters () . getStoragePoolId () , getEnclosingCommand () . getParameters () . getSourceStorageDomainId () , getEnclosingCommand () . getParameters () . getImageGroupID () , org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskImageDao () . get ( getEnclosingCommand () . getParameters () . getDestinationImageId () ) . isWipeAfterDelete () , getEnclosingCommand () . getParameters () . getForceDelete () ) ; }
private boolean validateAttachment () { final org.ovirt.engine.core.bll.network.cluster.UpdateNetworkClusterValidator networkClusterValidator = createNetworkClusterValidator () ; return ( ( validate ( networkClusterValidator . managementNetworkUnset () ) ) && ( validate ( networkClusterValidator . glusterNetworkInUseAndUnset ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand . getCluster () ) ) ) ) && ( validateAttachment ( networkClusterValidator ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters ) { for ( org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters ) { reportModel . addDataCenterID ( dataCenter . getId () . toString () ) ; } if ( reportModel == null ) { return; } setWidgetModel ( reportModel ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command , java.lang.Object . . . parameters ) { if ( ( ( command == ( getEditCommand () ) ) && ( ( parameters.length ) > NUMBER_CONSTANT ) ) && ( java.lang.Boolean.TRUE . equals ( parameters [ NUMBER_CONSTANT ] ) ) ) { super . executeCommand ( command , parameters ) ; } }
@ java.lang.Override public org.ovirt.engine.api.model.Template update ( org.ovirt.engine.api.model.Template incoming ) { validateIconParams ( incoming ) ; org.ovirt.engine.api.model.Template result = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters . class ) , VdcActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendTemplateResource.UpdateParametersProvider () ) ; if ( result != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper . adjustDisplayData ( this , result ) ; } return result ; }
private < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < org.ovirt.engine.core.compat.Guid > & org.ovirt.engine.core.common.businessentities.Nameable > boolean isNameAndIdIncoherent ( org.ovirt.engine.core.compat.Guid id , java.lang.String name , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < T > map ) { T entityById = map . get ( id ) ; T entityByName = map . get ( name ) ; return ! ( java.util.Objects . equals ( entityById , entityByName ) ) ; }
@ org.junit.Test public void testUpdateConsoleUserWithOptimisticLockingFailure ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmDynamic vmWithoutConsoleUser = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; vmWithoutConsoleUser . setConsoleUserId ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; boolean result = dao . updateConsoleUserWithOptimisticLocking ( vmWithoutConsoleUser ) ; org.junit.Assert . assertFalse ( result ) ; }
@ org.junit.Test public void validateFailsOnServerNotUp () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate ( VDSStatus.Down ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP . toString () ) ) ; }
@ org.junit.Test public void testDoFilterFromCookieNull ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito . when ( mockRequest . getCookies () ) . thenReturn ( null ) ; testFilter . doFilter ( mockRequest , mockResponse , mockChain ) ; org.mockito.Mockito . verify ( mockChain ) . doFilter ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( LocaleFilter.LOCALE , java.util.Locale.US ) ; org.mockito.Mockito . verify ( mockResponse , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . addCookie ( org.mockito.Mockito . any () ) ; }
private void setDefaultNames7 () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getStorageDomainList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { context.storageList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; setDefaultNames8 () ; } } , frontendHash ) ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_UPDATED ) ; }
@ org.junit.Test public void testGetCdInterface ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( STRING_CONSTANT , OsRepositoryImpl.INSTANCE . getCdInterface ( NUMBER_CONSTANT , null , null ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , OsRepositoryImpl.INSTANCE . getCdInterface ( NUMBER_CONSTANT , null , ChipsetType.I440FX ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , OsRepositoryImpl.INSTANCE . getCdInterface ( NUMBER_CONSTANT , null , ChipsetType.Q35 ) ) ; }
private void printKey ( ) throws java.lang.Exception { java.lang.String key = parser . getKey () ; java.lang.String version = parser . getVersion () ; if ( org.apache.commons.lang.StringUtils . isBlank ( version ) ) { org.ovirt.engine.core.config.entity.ConfigKey configKey = getConfigKey ( key ) ; if ( configKey == null ) { throw new java.lang.RuntimeException ( ( ( STRING_CONSTANT + key ) + STRING_CONSTANT ) ) ; } testIfConfigKeyCanBeFetchedOrPrinted ( configKey ) ; printAllValuesForKey ( configKey . getKey () ) ; } else { printKeyWithSpecifiedVersion ( key , version ) ; } }
private void mockJobSubjectEntityDao ( org.ovirt.engine.core.compat.Guid jobId ) { org.mockito.Mockito . when ( jobSubjectEntityDao . getJobSubjectEntityByJobId ( org.mockito.ArgumentMatchers . eq ( jobId ) ) ) . thenReturn ( org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP ) ; org.mockito.Mockito . when ( jobSubjectEntityDao . getJobIdByEntityId ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . singletonList ( jobId ) ) ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.VmConsoles > getAutoConnectableConsoles () { java.util.List < org.ovirt.engine.ui.uicommonweb.models.VmConsoles > autoConnectableConsoles = new java.util.LinkedList < org.ovirt.engine.ui.uicommonweb.models.VmConsoles > () ; if ( ( items ) != null ) { for ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel upItem : items ) { if ( ( ! ( upItem . isPool () ) ) && ( upItem . getVmConsoles () . canConnectToConsole () ) ) { autoConnectableConsoles . add ( upItem . getVmConsoles () ) ; } } } return autoConnectableConsoles ; }
public void testSelfAndIdentifyEquality () { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid deviceId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VmDevice device1 = createVmDevice ( deviceId , vmId ) ; org.junit.Assert . assertTrue ( ( ( device1 . compareTo ( device1 ) ) == NUMBER_CONSTANT ) ) ; org.ovirt.engine.core.common.businessentities.VmDevice device2 = createVmDevice ( deviceId , vmId ) ; org.junit.Assert . assertTrue ( ( ( device1 . compareTo ( device2 ) ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip () { com.google.gwt.safehtml.shared.SafeHtml tooltip = null ; if ( ( getModel () . isHotPlugAvailable () ) && ( ! ( getModel () . getIsDiskHotPlugSupported () ) ) ) { tooltip = com.google.gwt.safehtml.shared.SafeHtmlUtils . fromString ( org.ovirt.engine.ui.common.widget.uicommon.vm.VmDiskListModelTable.constants . diskHotPlugNotSupported () ) ; } return tooltip ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > scores = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { scores . add ( new org.ovirt.engine.core.common.utils.Pair ( vds . getId () , calcEvenGuestDistributionScore ( vds , parameters ) ) ) ; } return scores ; }
private boolean checkLunsInStorageDomain ( java.util.List < java.lang.String > lunIds ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > lunsFromDb = org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand . getLunDao () . getAllForVolumeGroup ( org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand . getStorageDomain () . getStorage () ) ; java.util.Set < java.lang.String > lunsSet = new java.util.HashSet <> ( lunIds ) ; for ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun : lunsFromDb ) { if ( lunsSet . contains ( lun . getLUN_id () ) ) { lunsSet . remove ( lun . getLUN_id () ) ; } } return lunsSet . isEmpty () ; }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand command ) { org.mockito.Mockito . doReturn ( serverServiceDao ) . when ( command ) . getGlusterServerServiceDao () ; org.mockito.Mockito . doReturn ( serviceDao ) . when ( command ) . getGlusterServiceDao () ; org.mockito.Mockito . doReturn ( glusterUtils ) . when ( command ) . getGlusterUtils () ; org.mockito.Mockito . doReturn ( getUpServers () ) . when ( glusterUtils ) . getAllUpServers ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Integer returnValue ) { cachedMaxPriority = returnValue ; int value = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getRoundedPriority ( priority , cachedMaxPriority ) ; org.ovirt.engine.ui.uicommonweb.models.EntityModel tempVar = new org.ovirt.engine.ui.uicommonweb.models.EntityModel () ; tempVar . setEntity ( value ) ; before ( callbacks ) ; model . getPriority () . setSelectedItem ( tempVar ) ; after ( callbacks ) ; updatePriority ( callbacks ) ; }
public boolean invokeAsString ( com.google.gwt.core.client.JsArray < > args , org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler ) { clearResultInformation () ; return function . invoke ( args , JsFunction.RESULT_TYPE_STRING , ( java.lang.String result ) - > { this . resultValue = result ; this . resultType = JsFunction.RESULT_TYPE_STRING ; } , errorHandler ) ; }
public static void initNicHotplugSupportMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.nicHotplugSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetNicHotplugSupportMap ) , callback ) ; }
@ java.lang.Override public void setEntity ( org.ovirt.engine.core.common.businessentities.VDS vds ) { updateUpgradeAlert = ( ( ( vds == null ) || ( ( getEntity () ) == null ) ) || ( ! ( vds . getId () . equals ( getEntity () . getId () ) ) ) ) || ( ! ( vds . getStatus () . equals ( getEntity () . getStatus () ) ) ) ; super . setEntity ( vds ) ; }
private void cacheConfigValues ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { cachedConfigValuesPreConvert . putAll ( ( ( java.util.HashMap < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return cachedConfigValuesPreConvert ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetConfigurationValues , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
public static org.ovirt.engine.ui.common.widget.tab.TabDefinition createTab ( com.gwtplatform.mvp.client.TabData tabData , org.ovirt.engine.ui.common.widget.tab.AbstractTabPanel tabPanel , com.google.gwt.event.shared.EventBus eventBus ) { if ( tabData instanceof org.ovirt.engine.ui.common.widget.tab.DynamicTabData ) { return new org.ovirt.engine.ui.common.widget.tab.DynamicTab ( ( ( org.ovirt.engine.ui.common.widget.tab.DynamicTabData ) ( tabData ) ) , tabPanel , eventBus ) ; } else if ( tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ) { return new org.ovirt.engine.ui.common.widget.tab.GroupedTab ( ( ( org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ) ( tabData ) ) , tabPanel ) ; } else { return new org.ovirt.engine.ui.common.widget.tab.SimpleTab ( tabData , tabPanel ) ; } }
public static org.ovirt.engine.core.common.businessentities.DbUser persistAuthenticatedUser ( org.ovirt.engine.core.aaa.DirectoryUser directoryUser ) { org.ovirt.engine.core.dao.DbUserDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDbUserDao () ; org.ovirt.engine.core.common.businessentities.DbUser dbUser = dao . getByExternalId ( directoryUser . getDirectoryName () , directoryUser . getId () ) ; if ( dbUser != null ) { dao . update ( dbUser ) ; } else { dbUser = new org.ovirt.engine.core.common.businessentities.DbUser ( directoryUser ) ; dao . save ( dbUser ) ; } return dbUser ; }
public void InternalSetVmStatus ( org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VMStatus status ) { vm . setStatus ( status ) ; boolean isVmStatusDown = org.ovirt.engine.core.common.businessentities.VM . isStatusDown ( status ) ; if ( isVmStatusDown || ( status == ( org.ovirt.engine.core.common.businessentities.VMStatus.Unknown ) ) ) { resetVmAttributes ( vm ) ; if ( isVmStatusDown ) { vm . setRunOnVds ( null ) ; vm . setVmPauseStatus ( VmPauseStatus.NONE ) ; } } }
private void initAppsTable () { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable ( false , true ) ; org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > () { @ java.lang.Override public java.lang.String getValue ( java.lang.String appName ) { return appName ; } } ; appsTable . addColumn ( appNameColumn , org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants . nameSnapshot () ) ; appsTable . setRowData ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > () ) ; appsTable . setWidth ( STRING_CONSTANT , true ) ; appsTable . setSelectionModel ( new com.google.gwt.view.client.NoSelectionModel () ) ; }
@ org.junit.Test public void canDoActionFailsOnNullHookId () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand < org.ovirt.engine.core.common.action.gluster.GlusterHookParameters > ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( null ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert . assertFalse ( cmd . canDoAction () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED . toString () ) ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model = getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
@ org.junit.Test public void getVdsSwallowsException () { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; b . setVds ( vds ) ; b . setVdsId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID3 ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertNull ( v ) ; }
@ org.junit.Before public void setUp () { clusterId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.mockito.Mockito . doReturn ( cluster ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . when ( glusterUtils . getUpServer ( clusterId ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
private void updateWANDisableEffects ( final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getWANDisableEffects ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice . setWANDisableEffects ( ( ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects > ) ( returnValue ) ) ) ; } } ) ) ; }
private void updatePriority () { if ( ( cachedMaxPriority ) == null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxVmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( model , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { cachedMaxPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; postUpdatePriority () ; } } ) ) ; } else { postUpdatePriority () ; } }
@ java.lang.Override public org.ovirt.engine.api.model.IscsiBond update ( org.ovirt.engine.api.model.IscsiBond iscsiBond ) { return performUpdate ( iscsiBond , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetIscsiBondById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) , VdcActionType.EditIscsiBond , new org.ovirt.engine.api.restapi.resource.ParametersProvider < org.ovirt.engine.api.model.IscsiBond , org.ovirt.engine.api.model.IscsiBond > () { @ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.IscsiBond incoming , org.ovirt.engine.api.model.IscsiBond entity ) { return new org.ovirt.engine.core.common.action.EditIscsiBondParameters ( getMapper ( modelType , org.ovirt.engine.api.model.IscsiBond . class ) . map ( incoming , entity ) ) ; } } ) ; }
private void alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; alert . setVdsId ( getVdsId () ) ; alert . addCustomValue ( STRING_CONSTANT , reason ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector . alert ( alert , logType , auditLogDirector ) ; }
@ org.junit.Test public void testCheckAddEditValidations () { org.ovirt.engine.core.compat.Guid clusterPolicyId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy = new org.ovirt.engine.core.common.scheduling.ClusterPolicy () ; clusterPolicy . setId ( clusterPolicyId ) ; org.ovirt.engine.core.bll.scheduling.commands.ClusterPolicyCRUDCommand command = new org.ovirt.engine.core.bll.scheduling.commands.ClusterPolicyCRUDCommand ( new org.ovirt.engine.core.common.scheduling.parameters.ClusterPolicyCRUDParameters ( clusterPolicyId , clusterPolicy ) , null ) { @ java.lang.Override protected void executeCommand () {} } ; command.schedulingManager = mockScheduler () ; org.junit.Assert . assertTrue ( command . checkAddEditValidations () ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > () { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.VdsNumaNode lookupEntity ( org.ovirt.engine.core.compat.Guid guid ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return parent . lookupEntity ( guid ) ; } } ; org.ovirt.engine.api.restapi.resource.NumaStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.NumaStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
public static boolean interfaceHasVlan ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allIfaces ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : allIfaces ) { if ( ( org.ovirt.engine.core.utils.NetworkUtils . isVlan ( i ) ) && ( org.ovirt.engine.core.utils.NetworkUtils . interfaceBasedOn ( i , iface . getName () ) ) ) { return true ; } } return false ; }
private java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaConsumptionParameters () { if ( ( consumptionParameters ) == null ) { switch ( getActionType () . getQuotaDependency () ) { case NONE : return null ; case STORAGE : consumptionParameters = getThisQuotaStorageDependent () . getQuotaStorageConsumptionParameters () ; break; case VDS_GROUP : consumptionParameters = getThisQuotaVdsDependent () . getQuotaVdsConsumptionParameters () ; break; default: consumptionParameters = getThisQuotaStorageDependent () . getQuotaStorageConsumptionParameters () ; consumptionParameters . addAll ( getThisQuotaVdsDependent () . getQuotaVdsConsumptionParameters () ) ; break; } } return consumptionParameters ; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool ( org.ovirt.engine.core.bll.network.macpool.MacPool macPool , java.util.List < org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator > decorators ) { org.ovirt.engine.core.bll.network.macpool.MacPool lockedPool = lockedObjectFactory . createLockingInstance ( macPool , org.ovirt.engine.core.bll.network.macpool.MacPool . class , lockForMacPool ( macPool . getId () ) ) ; org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool ( lockedPool , decorators ) ; return decoratedPool ; }
private java.lang.Integer parseInt ( java.lang.Object entity ) { if ( entity instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( entity ) ) ; } if ( ! ( entity instanceof java.lang.String ) ) { return null ; } java.lang.String text = ( ( java.lang.String ) ( entity ) ) ; try { return new java.lang.Integer ( text ) ; } catch ( java.lang.Exception e ) { return null ; } }
@ org.junit.Test public void testGetRootDSENoServers ( ) throws java.lang.Exception { java.util.List < java.net.URI > urls = new java.util.ArrayList < java.net.URI > () ; org.ovirt.engine.core.bll.adbroker.DirectorySearcher dirSearcher = mockDirectorySearcher ( urls ) ; try { org.ovirt.engine.core.bll.adbroker.GetRootDSETask getRootDSETask = new org.ovirt.engine.core.bll.adbroker.GetRootDSETask ( dirSearcher , STRING_CONSTANT , null ) ; org.ovirt.engine.core.bll.adbroker.DirectorySearcherTest . execute ( getRootDSETask ) ; } catch ( java.lang.Exception e ) { return; } org.junit.Assert . fail ( STRING_CONSTANT ) ; }
private void ChangePassword () { org.ovirt.engine.ui.frontend.Frontend . RunAction ( VdcActionType.ChangeUserPassword , new org.ovirt.engine.core.common.action.ChangeUserPasswordParameters ( ( ( java.lang.String ) ( getUserName () . getEntity () ) ) , ( ( java.lang.String ) ( getPassword () . getEntity () ) ) , ( ( java.lang.String ) ( getNewPassword () . getEntity () ) ) , ( ( java.lang.String ) ( getDomain () . getSelectedItem () ) ) ) ) ; }
private void assertValidationWorks ( int nameLength , int numOfVms , boolean expected ) { org.ovirt.engine.ui.uicommonweb.validation.PoolNameLengthValidation object = new org.ovirt.engine.ui.uicommonweb.validation.PoolNameLengthValidation ( nameOfLength ( nameLength ) , numOfVms , NUMBER_CONSTANT ) ; org.ovirt.engine.ui.uicommonweb.validation.PoolNameLengthValidation spy = org.mockito.Mockito . spy ( object ) ; org.junit.Assert . assertThat ( spy . validate ( null ) . getSuccess () , org.hamcrest.core.Is . is ( org.hamcrest.core.IsEqual . equalTo ( expected ) ) ) ; }
@ org.junit.Test public void testCompareToVmIdsAreEqual () { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid deviceId1 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid deviceId2 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VmDevice device1 = createVmDevice ( deviceId1 , vmId ) ; org.ovirt.engine.core.common.businessentities.VmDevice device2 = createVmDevice ( deviceId2 , vmId ) ; assertCompareTo ( device1 , device2 ) ; }
@ org.junit.Test public void testMapHostId () { org.ovirt.engine.api.model.VM entity = new org.ovirt.engine.api.model.VM () ; entity . setStatus ( VMStatus.Up ) ; org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.core.compat.Guid . newGuid () ; entity . setRunOnVds ( guid ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.types.VmMapper . map ( entity , null ) ; assertEquals ( guid . toString () , model . getHost () . getId () ) ; }
@ org.junit.Test public void validateFailsForNoStorageDevice () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . emptyList () ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void validateSucceeds () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . singletonList ( getStorageDevice ( STRING_CONSTANT , null ) ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
@ org.junit.Test public void testFilter ( ) throws org.apache.xmlrpc.XmlRpcException { java.util.List < java.lang.String > result = proxy . filter ( new java.lang.String [] { org.ovirt.schedulerproxy.SchedulerProxyTest.FILE_NAME } , org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ARRAY , org.ovirt.schedulerproxy.SchedulerProxyTest.VM_ID , STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ( result . size () ) == ( org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ARRAY.length ) ) ) ; org.junit.Assert . assertTrue ( result . contains ( org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ID1 ) ) ; org.junit.Assert . assertTrue ( result . contains ( org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ID2 ) ) ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > () , null ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAffinityGroupsByClusterId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , setUpAffinityGroups () , failure ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest . setUpBasicUriExpectations () ) ; try { collection . add ( new org.ovirt.engine.api.model.Tag () ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public void onSuccess ( final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger . finer ( STRING_CONSTANT ) ; callback . getDel () . onSuccess ( callback . getModel () , result ) ; if ( ( getLoginHandler () ) != null ) { getLoginHandler () . onLogout () ; } }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; newNet = new org.ovirt.engine.core.common.businessentities.network.Network () ; newNet . setName ( STRING_CONSTANT ) ; newNet . setVdsmName ( STRING_CONSTANT ) ; newNet . setDescription ( STRING_CONSTANT ) ; newNet . setDataCenterId ( FixturesTool.DATA_CENTER ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Host postPopulate ( org.ovirt.engine.api.model.Host from ) { while ( ( from . getPort () ) == NUMBER_CONSTANT ) { from . setPort ( org.ovirt.engine.api.restapi.types.MappingTestHelper . rand ( NUMBER_CONSTANT ) ) ; } from . getSpm () . setPriority ( NUMBER_CONSTANT ) ; from . getPowerManagement () . setPmProxies ( new org.ovirt.engine.api.model.PmProxies () ) ; return from ; }
@ org.junit.Test public void testAddForceFalse () { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; setUriInfo ( setUpGetMatrixConstraintsExpectations ( BackendResource.FORCE_CONSTRAINT , false , STRING_CONSTANT , uriInfo ) ) ; setUpVolumeCreationExpectations ( false ) ; collection . setParent ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.parentMock ) ; javax.ws.rs.core.Response response = collection . add ( createModel () ) ; assertEquals ( NUMBER_CONSTANT , response . getStatus () ) ; assertTrue ( ( ( response . getEntity () ) instanceof org.ovirt.engine.api.model.GlusterVolume ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.GlusterVolume ) ( response . getEntity () ) ) , NUMBER_CONSTANT ) ; }
private org.ovirt.engine.core.common.businessentities.IscsiBond createIscsiBond () { org.ovirt.engine.core.common.businessentities.IscsiBond newIscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond () ; newIscsiBond . setStoragePoolId ( getStoragePool () . getId () ) ; newIscsiBond . setName ( getName () . getEntity () ) ; newIscsiBond . setDescription ( getDescription () . getEntity () ) ; newIscsiBond . setNetworkIds ( getSelectedNetworks () ) ; newIscsiBond . setStorageConnectionIds ( getSelectedConnections () ) ; return newIscsiBond ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void refreshHeavyWeightData () { org.ovirt.engine.core.bll.gluster.GlusterManager.log . debug ( STRING_CONSTANT ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusterDao () . getAll () ) { try { refreshClusterHeavyWeightData ( cluster ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.gluster.GlusterManager.log . errorFormat ( STRING_CONSTANT , cluster . getname () , e ) ; } } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > setUpLunsFromDeviceList () { java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > luns = setUpLuns ( false ) ; for ( int i = NUMBER_CONSTANT ; i < ( luns . size () ) ; i ++ ) { java.util.HashMap < java.lang.String , java.lang.Boolean > pathsDictionary = new java.util.HashMap < java.lang.String , java.lang.Boolean > () ; pathsDictionary . put ( org.ovirt.engine.core.bll.GetLunsByVgIdTest.PHYSICAL_DEVICE_FIELD , true ) ; luns . get ( i ) . setPathsDictionary ( pathsDictionary ) ; } return luns ; }
@ java.lang.Override protected void service ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { try { org.ovirt.engine.core.sso.utils.SsoUtils . sendJsonData ( response , org.ovirt.engine.core.sso.servlets.OpenIdUtils . getJson ( buildResponse () ) ) ; } catch ( java.lang.Exception ex ) { org.ovirt.engine.core.sso.utils.SsoUtils . sendJsonDataWithMessage ( request , response , SsoConstants.ERR_CODE_SERVER_ERROR , ex ) ; } }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { hostsModel . stopProgress () ; boolean isAllValidatePassed = true ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result . getReturnValue () ) { isAllValidatePassed = isAllValidatePassed && ( returnValueBase . isValid () ) ; if ( ! isAllValidatePassed ) { break; } } if ( isAllValidatePassed ) { cancel () ; } }
@ org.junit.Test public void testConfiguration () { org.ovirt.engine.core.notifier.utils.NotificationConfigurator configurator = null ; configurator = new org.ovirt.engine.core.notifier.utils.NotificationConfigurator () ; org.junit.Assert . assertNotNull ( configurator ) ; long timerInterval = - NUMBER_CONSTANT ; try { timerInterval = configurator . getTimerInterval ( NotificationProperties.INTERVAL_IN_SECONDS , NUMBER_CONSTANT ) ; } catch ( org.ovirt.engine.core.notifier.NotificationServiceException e ) {} org.junit.Assert . assertEquals ( timerInterval , NUMBER_CONSTANT ) ; }
private org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey getModel ( int index ) { org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey model = new org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey () ; model . setId ( GUIDS [ index ] . toString () ) ; model . setDescription ( DESCRIPTIONS [ index ] ) ; org.ovirt.engine.api.model.OpenStackVolumeProvider provider = new org.ovirt.engine.api.model.OpenStackVolumeProvider () ; provider . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; model . setOpenstackVolumeProvider ( provider ) ; model . setUsageType ( OpenstackVolumeAuthenticationKeyUsageType.CEPH ) ; return model ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; model . setDataCentersAndClusters ( model , dataCenters , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) ; initCdImage () ; }
@ java.lang.Override public java.lang.Object runInTransaction () { getCompensationContext () . snapshotEntityStatus ( getStoragePool () ) ; getStoragePool () . setStatus ( StoragePoolStatus.Maintenance ) ; getStoragePoolDAO () . updateStatus ( getStoragePool () . getId () , getStoragePool () . getStatus () ) ; getCompensationContext () . stateChanged () ; return null ; }
protected boolean disconnectStorage () { return org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.DisconnectStorageServer , new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters ( org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand . getParameters () . getVdsId () , org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand . getParameters () . getStoragePoolId () , org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand . getParameters () . getStorageServerConnection () . getstorage_type () , new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections [] { org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand . getConnection () } ) ) ) ) . getSucceeded () ; }
@ org.junit.Test public void testAddExistingSuccessfully () { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command . getStorageDomain () . getStorageStaticData () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.utils.Pair ( sdStatic , sdStatic . getId () ) ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.ArgumentMatchers . any () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; command . executeCommand () ; org.junit.Assert . assertTrue ( command . getReturnValue () . getSucceeded () ) ; }
@ org.junit.Test public void testDoGet_ExtraAttributes_WithoutUserInfoObject ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito . doReturn ( mockApplicationModeObject ) . when ( testServlet ) . getApplicationModeObject ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . doReturn ( mockPluginDefinitionsArray ) . when ( testServlet ) . getPluginDefinitionsArray ( org.mockito.ArgumentMatchers . any () ) ; testServlet . doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( WebAdminHostPageServlet.ATTR_APPLICATION_MODE , mockApplicationModeObject ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( WebAdminHostPageServlet.ATTR_PLUGIN_DEFS , mockPluginDefinitionsArray ) ; }
@ java.lang.Override protected void syncSearch () { if ( ( getEntity () ) == null ) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getGlusterSwiftServices ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ) ( returnValue ) ) ) ; updateActionAvailability () ; } } ) , getEntity () . getId () ) ; }
@ java.lang.Override public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < T > event ) { T value = event . getValue () ; boolean becomingGhost = isGhost ( value ) ; if ( becomingGhost != ( wasGhost ) ) { setButtonEnabled ( widget , ( ! becomingGhost ) ) ; toggleGhost ( value , widget , becomingGhost ) ; wasGhost = becomingGhost ; } }
public static void getDefaultTimeZone ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.TimeZoneType timeZoneType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_CONSTANT ; } } ; org.ovirt.engine.core.common.queries.TimeZoneQueryParams params = new org.ovirt.engine.core.common.queries.TimeZoneQueryParams () ; params . setTimeZoneType ( timeZoneType ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetDefaultTimeZone , params , aQuery ) ; }
protected R addLinks ( R model , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParent , java.lang.String . . . subCollectionMembersToExclude ) { model = addParents ( model ) ; model = linkSubCollections ( model , suggestedParent , subCollectionMembersToExclude ) ; model = org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( model , suggestedParent ) ; return model ; }
public void onRemove () { org.ovirt.engine.core.common.businessentities.Bookmark selectedBookmark = ( ( org.ovirt.engine.core.common.businessentities.Bookmark ) ( getSelectedItem () ) ) ; org.ovirt.engine.core.common.action.BookmarksParametersBase parameters = new org.ovirt.engine.core.common.action.BookmarksParametersBase ( selectedBookmark . getbookmark_id () ) ; org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback async = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { postOnSave ( result . getReturnValue () ) ; } } ; getWindow () . startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.RemoveBookmark , parameters , async ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.VDS > hostNameListModel = getExternalHostName () ; hostNameListModel . setItems ( hosts ) ; hostNameListModel . setIsChangable ( true ) ; setEnableSearchHost ( true ) ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void refreshLightWeightData () { org.ovirt.engine.core.bll.gluster.GlusterManager.log . debug ( STRING_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = getClusterDao () . getAll () ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { if ( cluster . supportsGlusterService () ) { try { refreshClusterData ( cluster ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.gluster.GlusterManager.log . errorFormat ( STRING_CONSTANT , cluster . getname () , e ) ; } } } }
@ org.junit.Before public void setUp () { initializeOsRepository ( NUMBER_CONSTANT , DiskInterface.VirtIO ) ; disk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest . createDiskImage () ; disk . setDiskAlias ( STRING_CONSTANT ) ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ) ; org.mockito.Mockito . doReturn ( vmDao ) . when ( validator ) . getVmDao () ; }
@ java.lang.Override protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.File > collection ) throws java.lang.Exception { assertNotNull ( collection ) ; assertEquals ( NAMES.length , collection . size () ) ; for ( int i = NUMBER_CONSTANT ; i < ( NAMES.length ) ; i ++ ) { verifyModel ( collection . get ( i ) , i ) ; } }
private boolean internalConsumeAndReleaseHandler ( org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters , org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.AuditLogType , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase > auditLogPair ) { boolean result = validateAndSetStorageQuotaHelper ( parameters , auditLogPair ) ; if ( result ) { result = validateAndSetClusterQuota ( parameters , auditLogPair ) ; if ( result ) { return true ; } else { org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper revertedParams = revertParametersQuantities ( parameters ) ; validateAndSetStorageQuotaHelper ( revertedParams , auditLogPair ) ; } } return result ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . update ( getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override public void setVmIdOnVfs ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.compat.Guid vmId , final java.util.Set < java.lang.String > vfsNames ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > hostDevices = hostDeviceDao . getHostDevicesByHostId ( hostId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > vfs = org.ovirt.engine.core.utils.linq.LinqUtils . filter ( hostDevices , new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.HostDevice > () { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.HostDevice device ) { return ( vfsNames . contains ( device . getDeviceName () ) ) && ( isVf ( device ) ) ; } } ) ; setVmIdOnVfsDevices ( vmId , new java.util.HashSet ( vfs ) ) ; }
private org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.util.Set < java.lang.String > > insertExclusiveLock ( java.lang.String key , java.lang.String message , boolean isCheckOnly ) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks . get ( key ) ; if ( lock != null ) { return new org.ovirt.engine.core.common.utils.Pair ( java.lang.Boolean.FALSE , lock . getMessages () ) ; } if ( ! isCheckOnly ) { locks . put ( key , new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView ( NUMBER_CONSTANT , message , true ) ) ; } return org.ovirt.engine.core.bll.lock.InMemoryLockManager.LOCK_INSERT_SUCCESS_RESULT ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; org.ovirt.engine.api.model.DiskProfile model = org.ovirt.engine.api.restapi.resource.BackendDiskProfileResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
private void populateValueForConfigValue ( org.ovirt.engine.core.common.config.ConfigValues configValue , java.lang.String version , java.util.Map < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.config.ConfigValues , java.lang.String > , java.lang.Object > configValuesMap ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.config.ConfigValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat ( configValue , version ) ; java.lang.Object value = org.ovirt.engine.core.common.config.Config . getValue ( configValue , version ) ; configValuesMap . put ( key , value ) ; }
@ java.lang.Override protected void lockEntities () { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { getCompensationContext () . snapshotEntityStatus ( getSnapshot () ) ; getSnapshotDao () . updateStatus ( sourceSnapshotId , SnapshotStatus.LOCKED ) ; lockVmWithCompensationIfNeeded () ; getCompensationContext () . stateChanged () ; return null ; } } ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . freeLock () ; }
protected boolean shouldPerformOvfUpdate () { return ( ( ! ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand . getParameters () . isInactive () ) ) && ( ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand . getStorageDomain () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) && ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand . getStorageDomain () . getStorageDomainType () . isDataDomain () ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getRemoveCommand () ) ) { remove () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { onRemove () ; } }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; org.ovirt.engine.api.restapi.resource.BackendVnicProfileResource resource = ( ( org.ovirt.engine.api.restapi.resource.BackendVnicProfileResource ) ( this . resource ) ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendVnicProfileResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void setNetworkToDcValues () { org.ovirt.engine.ui.uicommonweb.models.hosts.DcNetworkParams dcNetParams = getSetupModel () . getNetDcParams ( getName () ) ; if ( dcNetParams != null ) { getEntity () . setvlan_id ( dcNetParams . getVlanId () ) ; getEntity () . setMtu ( dcNetParams . getMtu () ) ; getEntity () . setVmNetwork ( dcNetParams . isVmNetwork () ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllForVdsGroupWithStatus ( org.ovirt.engine.core.compat.Guid vdsGroupId , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { return getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , vdsGroupId ) . addValue ( STRING_CONSTANT , status . getValue () ) ) ; }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getVm () { if ( ( ( diskVm ) == null ) && ( ( getDisk () ) != null ) ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.GetDiskAlignmentCommand . getVmDAO () . getVmsListForDisk ( getDisk () . getId () , false ) ) { diskVm = vm ; break; } } return diskVm ; }
private void takeVm () { org.ovirt.engine.core.common.businessentities.VmPool entity = ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( getItem () . getEntity () ) ) ; org.ovirt.engine.core.common.action.VmPoolUserParameters params = new org.ovirt.engine.core.common.action.VmPoolUserParameters ( entity . getVmPoolId () , org.ovirt.engine.ui.frontend.Frontend . getInstance () . getLoggedInUser () . getId () , false ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.AttachUserToVmFromPoolAndRun , params , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ! ( result . getReturnValue () . getSucceeded () ) ) { return; } } } , this ) ; }
protected void cretaeVirtIODisk () { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage () ; disk . setImageId ( diskImageGuid ) ; disk . setDiskInterface ( DiskInterface.VirtIO ) ; disk . setactive ( true ) ; org.mockito.Mockito . doReturn ( diskDao ) . when ( command ) . getDiskDao () ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( disk ) ; mockVmDevice ( false ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters buildCreateVmParameters () { org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters createVmParams = super . buildCreateVmParameters () ; org.ovirt.engine.core.common.action.RunVmOnceParams runOnceParams = org.ovirt.engine.core.bll.RunVmOnceCommand . getParameters () ; org.ovirt.engine.core.common.action.SysPrepParams sysPrepParams = new org.ovirt.engine.core.common.action.SysPrepParams () ; sysPrepParams . setSysPrepDomainName ( runOnceParams . getSysPrepDomainName () ) ; sysPrepParams . setSysPrepUserName ( runOnceParams . getSysPrepUserName () ) ; sysPrepParams . setSysPrepPassword ( runOnceParams . getSysPrepPassword () ) ; createVmParams . setSysPrepParams ( sysPrepParams ) ; createVmParams . getVm () . setVmInit ( org.ovirt.engine.core.bll.RunVmOnceCommand . getParameters () . getVmInit () ) ; return createVmParams ; }
@ org.junit.Test public void testDedicatedHostNotExistOrNotSameCluster () { prepareVmToPassValidate () ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isDedicatedVdsExistOnSameCluster ( org.mockito.ArgumentMatchers . any () ) ; vmStatic . setDedicatedVmForVdsList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , command . validate () ) ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.ImageStatus . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType . class ) ; } return null ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions . class , to = org.ovirt.engine.api.model.ErrorHandling . class ) private static org.ovirt.engine.api.model.ErrorHandling map ( org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions migrateOnError , org.ovirt.engine.api.model.ErrorHandling template ) { org.ovirt.engine.api.model.MigrateOnError value = org.ovirt.engine.api.restapi.types.ClusterMapper . map ( migrateOnError , ( ( org.ovirt.engine.api.model.MigrateOnError ) ( null ) ) ) ; if ( value == null ) { return null ; } else { template = ( template == null ) ? new org.ovirt.engine.api.model.ErrorHandling () : template ; template . setOnError ( value ) ; return template ; } }
private void hostName_SelectedItemChanged () { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getExternalHostName () . getSelectedItem () ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS () ; } updateModelFromVds ( vds , null , false , null ) ; }
@ org.junit.Test public void testGetCurrent ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; uriInfo = addMatrixParameterExpectations ( uriInfo , STRING_CONSTANT ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( getVm () ) ; org.ovirt.engine.api.model.Cdrom cdrom = resource . get () ; verifyModelWithCurrentCd ( cdrom ) ; }
@ org.junit.Test public void testAddIncompleteParametersNoPermits ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Role model = new org.ovirt.engine.api.model.Role () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void testGetVmsByInstanceTypeId () { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . getVmsListByInstanceType ( FixturesTool.INSTANCE_TYPE ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , result . size () ) ; org.junit.Assert . assertEquals ( FixturesTool.VM_RHEL5_POOL_50 , result . iterator () . next () . getId () ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VmManagementParametersBase param = new org.ovirt.engine.core.common.action.VmManagementParametersBase ( gettempVm () ) ; param . setSoundDeviceEnabled ( model . getIsSoundcardEnabled () . getEntity () ) ; param . setConsoleEnabled ( model . getIsConsoleDeviceEnabled () . getEntity () ) ; org.ovirt.engine.ui.frontend.Frontend . RunAction ( VdcActionType.UpdateVm , param , new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback ( model , defaultNetworkCreatingManager , gettempVm () . getId () ) , this ) ; }
@ org.junit.Test public void executeCommandFailedWhenServerIdPresent () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID , org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID ) , null ) ) ; setUpMocksForUpdate () ; mockForReadContent ( false , EngineError.GlusterHookNotFound ) ; try { cmd . executeCommand () ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.junit.Assert . assertEquals ( EngineError.GlusterHookNotFound , e . getErrorCode () ) ; } org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; }
@ org.junit.Test public void validateFailsWhenGlusterServerHasPeers ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS () , true ) ; org.mockito.Mockito . when ( glusterDBUtils . serverExists ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . eq ( org.ovirt.engine.core.bll.hostdeploy.AddVdsCommandTest.PEER_1 ) ) ) . thenReturn ( false ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.SERVER_ALREADY_PART_OF_ANOTHER_CLUSTER . toString () ) ) ; }
public static void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue () ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
@ java.lang.Override public void updateHibernationMemory ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid memoryDumpDiskId , org.ovirt.engine.core.compat.Guid memoryMetadataDiskId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , memoryDumpDiskId ) . addValue ( STRING_CONSTANT , memoryMetadataDiskId ) . addValue ( STRING_CONSTANT , vmId ) . addValue ( STRING_CONSTANT , SnapshotType.ACTIVE . name () ) ; getCallsHandler () . executeModification ( STRING_CONSTANT , parameterSource ) ; }
@ org.junit.Test public void testAllByConnectionId () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = dao . getAllByConnectionId ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , domains . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , FixturesTool.STORAGE_DOAMIN_NFS_MASTER , domains . get ( NUMBER_CONSTANT ) . getId () ) ; }
private java.lang.String getRenderedValue ( java.lang.String value ) { java.lang.String result = value ; if ( ( ( maxTextLength ) > NUMBER_CONSTANT ) && ( ( result . length () ) > ( maxTextLength ) ) ) { result = result . substring ( NUMBER_CONSTANT , java.lang.Math . max ( ( ( maxTextLength ) - ( org.ovirt.engine.ui.common.widget.table.cell.TextCell.ELLIPSE . length () ) ) , NUMBER_CONSTANT ) ) ; result = result + ( org.ovirt.engine.ui.common.widget.table.cell.TextCell.ELLIPSE ) ; } return result ; }
@ org.junit.Test public void encodeDecodeWithNonAsciiDiskAlias ( ) throws java.lang.Exception { disk . setDiskAlias ( STRING_CONSTANT ) ; disk . setDiskDescription ( STRING_CONSTANT ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( STRING_CONSTANT ) ) , generateDiskDescriptionJsonEntry ( STRING_CONSTANT ) , generateEncodingJsonEntry ( NUMBER_CONSTANT ) ) ; assertDiskDescriptionDecoding ( disk ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [] array = ( ( java.lang.Object [] ) ( target ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.ImportStorageModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.ImportStorageModelBehavior ) ( array [ NUMBER_CONSTANT ] ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel storageModelItem = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel ) ( array [ NUMBER_CONSTANT ] ) ) ; behavior . postUpdateItemsAvailability ( storageModelItem , ( returnValue == null ) ) ; }
protected void mockVmDevice ( boolean plugged ) { vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice () ; vmDevice . setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId () ) ; vmDevice . setIsPlugged ( plugged ) ; org.mockito.Mockito . doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDao () ; org.mockito.Mockito . when ( vmDeviceDao . get ( org.mockito.Mockito . any ( org.ovirt.engine.core.common.businessentities.VmDeviceId . class ) ) ) . thenReturn ( vmDevice ) ; }
public void updateVirtioScsiController ( org.ovirt.engine.core.compat.Guid vmId , java.lang.Boolean isVirtioScsiEnabled ) { if ( isVirtioScsiEnabled == null ) { return; } if ( isVirtioScsiEnabled ) { if ( ! ( hasVirtioScsiController ( vmId ) ) ) { addVirtioScsiController ( vmId ) ; } } else { removeVirtioScsiControllers ( vmId ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.Collections . sort ( vms , new org.ovirt.engine.ui.uicommonweb.Linq.VmComparator () ) ; setItems ( vms ) ; setIsEmpty ( ( ( vms . size () ) == NUMBER_CONSTANT ) ) ; }
private java.util.List < org.ovirt.engine.api.restapi.model.Directory > getCollection () { java.util.List < org.ovirt.engine.api.restapi.model.Directory > dsl = new java.util.ArrayList < org.ovirt.engine.api.restapi.model.Directory > () ; for ( java.lang.String domain : getDomainList () ) { org.ovirt.engine.api.restapi.model.Directory ds = new org.ovirt.engine.api.restapi.model.Directory () ; ds . setDomain ( domain ) ; org.ovirt.engine.core.compat.NGuid guid = new org.ovirt.engine.core.compat.NGuid ( domain . getBytes () , true ) ; ds . setId ( guid . toString () ) ; dsl . add ( ds ) ; } return dsl ; }
@ org.junit.Test @ java.lang.Override public void testListFailure ( ) throws java.lang.Exception { collection . setUriInfo ( setUpUriExpectations ( null ) ) ; setUpEntityQueryExpectations ( org.ovirt.engine.api.restapi.resource.FAILURE ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertTrue ( ( ( wae . getResponse () . getEntity () ) instanceof org.ovirt.engine.api.model.Fault ) ) ; assertEquals ( mockl10n ( org.ovirt.engine.api.restapi.resource.FAILURE ) , ( ( org.ovirt.engine.api.model.Fault ) ( wae . getResponse () . getEntity () ) ) . getDetail () ) ; } }
public void enableHaReservationCheck () { if ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log . info ( STRING_CONSTANT ) ; java.lang.Integer interval = org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.VdsHaReservationIntervalInMinutes ) ; org.ovirt.engine.core.di.Injector . get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl . class ) . scheduleAFixedDelayJob ( this , STRING_CONSTANT , new java.lang.Class [] {} , new java.lang.Object [] {} , interval , interval , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log . info ( STRING_CONSTANT ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public static < M extends org.ovirt.engine.ui.uicommonweb.models.SearchableListModel > M getMainListModel ( org.ovirt.engine.ui.uicommonweb.models.CommonModel commonModel , java.lang.Class < M > mainModelClass ) { if ( commonModel == null ) { return null ; } for ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel list : commonModel . getItems () ) { if ( ( list != null ) && ( list . getClass () . equals ( mainModelClass ) ) ) { return ( ( M ) ( list ) ) ; } } throw new java.lang.IllegalStateException ( ( ( STRING_CONSTANT + mainModelClass ) + STRING_CONSTANT ) ) ; }
@ java.lang.Override public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , java.lang.String value , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < java.lang.String > valueUpdater ) { delegate . onBrowserEvent ( context , parent , value , event , valueUpdater ) ; super . onBrowserEvent ( context , parent , value , event , valueUpdater ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model1 , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.Collections . sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer () ) ; setItems ( disks ) ; }
private void testAddInvalidSDStatusMessage ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { cmd . addInvalidSDStatusMessage ( status ) ; java.util.List < java.lang.String > messages = cmd . getReturnValue () . getCanDoActionMessages () ; org.junit.Assert . assertEquals ( messages . get ( NUMBER_CONSTANT ) , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 . toString () ) ; org.junit.Assert . assertEquals ( messages . get ( NUMBER_CONSTANT ) , java.lang.String . format ( STRING_CONSTANT , status ) ) ; }
public void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , getDefaultConfigurationVersion () ) , aQuery ) ; }
private void lockImageInDb () { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getOldDisk () ) ) ; org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { getCompensationContext () . snapshotEntityStatus ( diskImage . getImage () ) ; getCompensationContext () . stateChanged () ; diskImage . setImageStatus ( ImageStatus.LOCKED ) ; org.ovirt.engine.core.bll.ImagesHandler . updateImageStatus ( diskImage . getImageId () , ImageStatus.LOCKED ) ; return null ; } } ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVMFromDAO ( org.ovirt.engine.core.compat.Guid requestedUser ) { org.ovirt.engine.core.common.businessentities.VM expectedVM = new org.ovirt.engine.core.common.businessentities.VM () ; org.ovirt.engine.core.dao.VmDAO vmDaoMock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.VmDAO . class ) ; org.mockito.Mockito . when ( vmDaoMock . getAllForUserWithGroupsAndUserRoles ( requestedUser ) ) . thenReturn ( java.util.Collections . singletonList ( expectedVM ) ) ; org.mockito.Mockito . when ( getDbFacadeMockInstance () . getVmDAO () ) . thenReturn ( vmDaoMock ) ; return expectedVM ; }
public void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
private void updatePriority () { if ( ( cachedMaxPriority ) == null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxVmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { cachedMaxPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; postUpdatePriority () ; } } , model . getHash () ) ) ; } else { postUpdatePriority () ; } }
protected void updateIsDiskHotPlugAvailable () { org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = vm . getVdsGroupCompatibilityVersion () ; if ( clusterCompatibilityVersion == null ) { setIsDiskHotPlugSupported ( false ) ; } else { setIsDiskHotPlugSupported ( ( ( java.lang.Boolean ) ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDiskHotpluggableInterfaces ( getEntity () . getOs () , clusterCompatibilityVersion ) . isEmpty () ) ) ) ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; if ( response . getSucceeded () ) { model . applyData ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( response . getReturnValue () ) ) , false ) ; model . setGetLUNsFailure ( STRING_CONSTANT ) ; } else { model . setGetLUNsFailure ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . couldNotRetrieveLUNsLunsFailure () ) ; } }
public void enableLoadBalancer () { if ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log . info ( STRING_CONSTANT ) ; org.ovirt.engine.core.di.Injector . get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl . class ) . scheduleAFixedDelayJob ( this , STRING_CONSTANT , new java.lang.Class [] {} , new java.lang.Object [] {} , org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log . info ( STRING_CONSTANT ) ; } }
@ java.lang.Override public void init () { super . init () ; getIsAutoAssign () . setEntity ( true ) ; getCustomPropertySheet () . setKeyValueMap ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getCustomPropertiesList () . get ( vm . getVdsGroupCompatibilityVersion () ) ) ; getCustomPropertySheet () . deserialize ( vm . getCustomProperties () ) ; loadHosts () ; }
protected boolean validateVmProperties ( org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String runOnceCustomProperties , java.util.List < java.lang.String > messages ) { java.lang.String customProperties = ( runOnceCustomProperties != null ) ? runOnceCustomProperties : vm . getCustomProperties () ; return getVmPropertiesUtils () . validateVmProperties ( vm . getVdsGroupCompatibilityVersion () , customProperties , messages ) ; }
public static < P extends org.ovirt.engine.core.common.action.VdcActionParametersBase > boolean hasConstructor ( org.ovirt.engine.core.common.action.VdcActionType action , P parameters , org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { return ( org.ovirt.engine.core.utils.ReflectionUtils . findConstructor ( org.ovirt.engine.core.bll.CommandsFactory . getCommandClass ( action . name () ) , parameters . getClass () , cmdContext . getClass () ) ) != null ; }
private com.google.gwt.resources.client.ImageResource getImage ( T value ) { com.google.gwt.resources.client.ResourcePrototype resource = resources . getResource ( imageName ( value ) ) ; if ( ! ( resource instanceof com.google.gwt.resources.client.ImageResource ) ) { return ( ( com.google.gwt.resources.client.ImageResource ) ( resources . getResource ( defaultImageName ( value ) ) ) ) ; } return ( ( com.google.gwt.resources.client.ImageResource ) ( resource ) ) ; }
@ org.junit.Test public void testAllocateVm ( ) throws java.lang.Exception { setUpGetVmExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.AttachUserToVmFromPoolAndRun , org.ovirt.engine.core.common.action.VmPoolUserParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.FALSE } , GUIDS [ NUMBER_CONSTANT ] ) ) ; verifyTestAllocateVmActionResponse ( resource . allocatevm ( new org.ovirt.engine.api.model.Action () ) ) ; }
@ java.lang.Override public void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { sb . appendHtmlConstant ( ( ( STRING_CONSTANT + id ) + STRING_CONSTANT ) ) ; java.util.Iterator < com.google.gwt.cell.client.HasCell < T , > > iterator = hasCells . iterator () ; while ( iterator . hasNext () ) { render ( context , value , sb , iterator . next () , id ) ; } sb . appendHtmlConstant ( STRING_CONSTANT ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.VMStatus getRawValue ( org.ovirt.engine.core.common.businessentities.VM object ) { final org.ovirt.engine.core.common.businessentities.VDS vds = getDetailModel () . getEntity () ; if ( ( ( object . getStatus () . equals ( VMStatus.MigratingFrom ) ) && ( vds != null ) ) && ( vds . getId () . equals ( object . getMigratingToVds () ) ) ) { return org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo ; } return object . getStatus () ; }
private void validateVnicProfileMapping ( org.ovirt.engine.api.model.VnicProfileMapping mapping ) { if ( ! ( mapping . isSetSourceNetworkName () ) ) { badRequest ( STRING_CONSTANT ) ; } if ( ! ( mapping . isSetSourceNetworkProfileName () ) ) { badRequest ( STRING_CONSTANT ) ; } if ( ( mapping . isSetTargetVnicProfile () ) && ( mapping . getTargetVnicProfile () . isSetId () ) ) { asGuid ( mapping . getTargetVnicProfile () . getId () ) ; } }
@ org.junit.Test public void diskSnapshotsCanBePreviewed () { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot () ; org.mockito.Mockito . when ( snapshotDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( activeSnapshot ) ; org.junit.Assert . assertThat ( validator . canDiskSnapshotsBePreviewed ( activeSnapshot . getId () ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.providers.ProviderNetworkListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand == ( getModel () . getDiscoverCommand () ) ) { return discoverNetworkPopupProvider . get () ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
private void testUpdateManagementNetworkChange ( boolean emptyCluster , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > expectedResult ) { org.mockito.Mockito . when ( vdsDao . getAllForCluster ( org.ovirt.engine.core.bll.network.cluster.TEST_CLUSTER_ID ) ) . thenReturn ( ( emptyCluster ? java.util.Collections . emptyList () : java.util.Collections . singletonList ( null ) ) ) ; org.junit.Assert . assertThat ( validator . managementNetworkChange () , expectedResult ) ; }
@ org.junit.Test public void testVmWithDisks () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = new java.util.ArrayList <> () ; disks . add ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , disks ) , true , null ) ; }
private void prepareMocks () { org.mockito.Mockito . doReturn ( storagePoolIsoMapDao ) . when ( command ) . getStoragePoolIsoMapDao () ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . findConnectionWithSameDetails ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.StorageServerConnections . class ) ) ; org.mockito.Mockito . doReturn ( vmDao ) . when ( command ) . getVmDao () ; }
private void doInit ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) { this . ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider ( configuration ) . provide () ; this . authorization = new org.ovirt.engine.extension.aaa.jdbc.core.Authorization ( ds ) ; this . tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks ( ds , this . authorization ) ; output . put ( Base.InvokeKeys.RESULT , Base.InvokeResult.SUCCESS ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLUNs ( org.ovirt.engine.core.compat.Guid sdId , java.lang.String vgId ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs () ; lun1 . setStorageDomainId ( sdId ) ; lun1 . setVolumeGroupId ( vgId ) ; lun1 . setLunConnections ( getConnections () ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs () ; lun2 . setStorageDomainId ( sdId ) ; lun2 . setVolumeGroupId ( vgId ) ; lun2 . setLunConnections ( getConnections () ) ; return new java.util.ArrayList ( java.util.Arrays . asList ( lun1 , lun2 ) ) ; }
private void executeActionInTransactionScope () { if ( ( org.ovirt.engine.core.utils.transaction.TransactionSupport . current () ) != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . registerRollbackHandler ( this ) ; } if ( ! ( executeWithoutTransaction () ) ) { if ( ( org.ovirt.engine.core.utils.transaction.TransactionSupport . current () ) == null ) { cancelTasks () ; } org.ovirt.engine.core.utils.transaction.TransactionSupport . setRollbackOnly () ; } }
@ java.lang.Override protected void logToAudit () { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vds . getId () ) ; auditLogableBase . setVds ( vds ) ; auditLogableBase . addCustomValue ( STRING_CONSTANT , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand . getReturnStatus () . message ) ; auditLogDirector . log ( auditLogableBase , AuditLogType.VDS_BROKER_COMMAND_FAILURE ) ; }
private static void addAddress ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { java.util.Map < java.lang.String , java.lang.String > addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils . string2Map ( vmDevice . getAddress () ) ; if ( ! ( addressMap . isEmpty () ) ) { struct . put ( VdsProperties.Address , addressMap ) ; } }
public static void fillImagesBySnapshots ( org.ovirt.engine.core.common.businessentities.VM vm ) { for ( org.ovirt.engine.core.common.businessentities.Disk disk : vm . getDiskMap () . values () ) { if ( ( disk . getDiskStorageType () ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( disk ) ) ; diskImage . getSnapshots () . addAll ( org.ovirt.engine.core.bll.ImagesHandler . getAllImageSnapshots ( diskImage . getImageId () ) ) ; } } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.EngineBackupLog ) ) { return false ; } org.ovirt.engine.core.common.businessentities.EngineBackupLog other = ( ( org.ovirt.engine.core.common.businessentities.EngineBackupLog ) ( obj ) ) ; return ( java.util.Objects . equals ( scope , other.scope ) ) && ( java.util.Objects . equals ( doneAt , other.doneAt ) ) ; }
public void flatGroups ( org.ovirt.engine.api.extensions.ExtMap principal ) { java.util.Map < java.lang.String , org.ovirt.engine.api.extensions.ExtMap > accumulator = new java.util.HashMap <> () ; flatGroups ( principal , PrincipalRecord.GROUPS , accumulator ) ; principal . put ( PrincipalRecord.GROUPS , new java.util.ArrayList ( accumulator . values () ) ) ; }
private void connectStorageToHost ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , org.ovirt.engine.api.model.LogicalUnit unit ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = org.ovirt.engine.api.restapi.util.StorageDomainHelper . getConnection ( storageType , unit . getAddress () , unit . getTarget () , unit . getUsername () , unit . getPassword () , unit . getPort () ) ; performAction ( VdcActionType.ConnectStorageToVds , new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( cnx , hostId , false ) ) ; }
@ org.junit.Test public void testAddIncompleteParametersNoName ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setDescription ( DESCRIPTIONS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call () { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( getRecoveryStoragePoolParametersData () . getNewMasterDomainId () , getRecoveryStoragePoolParametersData () . getStoragePoolId () , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStoragePoolIsoMapDao () . save ( domainPoolMap ) ; getStoragePool () . setstatus ( StoragePoolStatus.Problematic ) ; executeReconstruct () ; return new org.ovirt.engine.core.common.eventqueue.EventResult ( reconstructOpSucceeded , org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT ) ; }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
@ org.junit.Test public void testRemoveStoragePoolIsoMap () { dao . remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap . getstorage_id () , existingStoragePoolIsoMap . getstorage_pool_id () ) ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap result = dao . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap . getstorage_id () , existingStoragePoolIsoMap . getstorage_pool_id () ) ) ; org.junit.Assert . assertNull ( result ) ; }
private org.ovirt.engine.core.bll.AddQuotaCommand createCommand () { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( mockGeneralStorageQuota () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.AddQuotaCommand ( param , null ) ) ; org.mockito.Mockito . doReturn ( quotaDao ) . when ( command ) . getQuotaDao () ; return command ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > convert ( java.lang.Object source ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > allStorageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > isoStorageDomains = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : allStorageDomains ) { if ( ( storageDomain . getStorageDomainType () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { isoStorageDomains . add ( storageDomain ) ; } } return isoStorageDomains ; } return new java.util.ArrayList <> () ; }
@ org.junit.Test public void isVirtioScsiEnabledDefaultedToTrue () { cmd . getParameters () . getVm () . setClusterId ( cluster . getId () ) ; cmd . initEffectiveCompatibilityVersion () ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( org.mockito.ArgumentMatchers . anyInt () , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( new java.util.ArrayList <> ( java.util.Collections . singletonList ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , cmd . isVirtioScsiEnabled () ) ; }
@ java.lang.Override protected void addJNDIBeans () { addBeanJNDIName ( BeanType.BACKEND , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.SCHEDULER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.USERS_DOMAINS_CACHE , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.VDS_EVENT_LISTENER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.LOCK_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; }
public void getRoleActionGroupsByRoleId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid roleId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetRoleActionGroupsByRoleId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( roleId ) , aQuery ) ; }
private void addResource ( final org.ovirt.engine.api.restapi.resource.BackendResource resource ) { resource . setMessageBundle ( messageBundle ) ; resource . setBackend ( backend ) ; resource . setSessionHelper ( sessionHelper ) ; resource . setMappingLocator ( mappingLocator ) ; resource . setValidatorLocator ( validatorLocator ) ; singletons . add ( resource ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage () { disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; disk . setId ( diskId ) ; java.util.Collections . singletonList ( storageId ) ; disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( storageId ) ) ) ; return disk ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getStoragePoolDao () ; existingPool = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; existingPool . setstatus ( StoragePoolStatus.Up ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; vdsGroup = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; newPool = new org.ovirt.engine.core.common.businessentities.storage_pool () ; newPool . setname ( STRING_CONSTANT ) ; newPool . setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( STRING_CONSTANT ) ) ; }
@ java.lang.Override protected boolean canDoAction () { boolean returnValue = super . canDoAction () ; org.ovirt.engine.core.common.businessentities.vm_pools oldPool = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand . getVmPoolDAO () . get ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand . getVmPool () . getvm_pool_id () ) ; if ( returnValue && ( oldPool == null ) ) { addCanDoActionMessage ( VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND ) ; returnValue = false ; } else if ( returnValue && ( ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand . getParameters () . getVmsCount () ) < NUMBER_CONSTANT ) ) { addCanDoActionMessage ( VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL ) ; returnValue = false ; } return returnValue ; }
@ java.lang.Override protected void executeQueryCommand () { try { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase . getQueryReturnValue () . setReturnValue ( getUserRequestForStorageDomainRepoFileList () ) ; } catch ( java.lang.Exception e ) { java.lang.String message = java.util.Optional . ofNullable ( e . getCause () ) . orElse ( e ) . getMessage () ; log . error ( STRING_CONSTANT , message ) ; org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase . getQueryReturnValue () . setExceptionString ( message ) ; org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase . getQueryReturnValue () . setSucceeded ( false ) ; } }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils . createDiskDummies ( getVm () . getTotalMemorySizeInBytes () , MemoryUtils.META_DATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler . getInstance () . findStorageDomainForMemory ( getParameters () . getStoragePoolId () , memoryDisksList ) ; disksList . addAll ( memoryDisksList ) ; return storageDomain ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , null ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void setUpFormatDomain ( boolean shouldFail ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; ret . setSucceeded ( ( ! shouldFail ) ) ; org.mockito.Mockito . doReturn ( ret ) . when ( command ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.FormatStorageDomain ) , org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Test public void executeCommand () { setUpMocksForRemove () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . remove ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_REMOVED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { this . postInitQosList ( ( returnValue == null ? new java.util.ArrayList < Q > () : ( ( java.util.List < Q > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { java.util.Set < java.lang.String > emulatedSet = new java.util.TreeSet <> ( ( ( java.util.HashSet < java.lang.String > ) ( returnValue ) ) ) ; emulatedSet . add ( STRING_CONSTANT ) ; java.lang.String oldVal = getModel () . getEmulatedMachine () . getSelectedItem () ; getModel () . getEmulatedMachine () . setItems ( emulatedSet ) ; getModel () . getEmulatedMachine () . setSelectedItem ( oldVal ) ; } }
@ org.junit.Test public void testRemoveStorageDomainNull ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; setUriInfo ( uriInfo ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
public static void RunAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback , final java.lang.Object state ) { org.ovirt.engine.ui.frontend.Frontend . RunAction ( actionType , parameters , ( callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK ) , state , true ) ; }
@ java.lang.Override public int setTabIndexes ( int nextTabIndex ) { nameEditor . setTabIndex ( ( nextTabIndex ++ ) ) ; descriptionEditor . setTabIndex ( ( nextTabIndex ++ ) ) ; clusterEditor . setTabIndex ( ( nextTabIndex ++ ) ) ; quotaEditor . setTabIndex ( ( nextTabIndex ++ ) ) ; nextTabIndex = disksAllocationView . setTabIndexes ( nextTabIndex ) ; isTemplatePublicEditor . setTabIndex ( ( nextTabIndex ++ ) ) ; return nextTabIndex ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsInterfacesByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > () ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( createTestCommand ( volumeId2 , NUMBER_CONSTANT ) ) ; prepareMocks ( cmd ) ; mockBackend ( false , EngineError.GlusterVolumeRemoveBricksStartFailed ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS_FAILED , cmd . getAuditLogTypeValue () ) ; }
public void updateDisksStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksList ) { disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( storageDomain . getId () ) ) ) ; } updateDiskVolumeType ( storageDomain . getStorageType () , disksList . get ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest . assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.queryType , org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.queryParams , new java.lang.String [] { org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.parentIdName } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.PARENT_GUID . toString () } , org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest . setUpTags () , failure ) ; }
@ java.lang.Override protected void readOsSection ( org.ovirt.engine.core.compat.backendcompat.XmlNode section ) { _vm . getStaticData () . setId ( new org.ovirt.engine.core.compat.Guid ( section.Attributes . get ( STRING_CONSTANT ) . getValue () ) ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = section . SelectSingleNode ( STRING_CONSTANT ) ; if ( node != null ) { _vm . getStaticData () . setOsId ( osRepository . getOsIdByUniqueName ( node.InnerText ) ) ; } }
@ org.junit.Test public void disableGlusterWhenVolumesExist () { createCommandWithVirtEnabled () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; cpuExists () ; cpuFlagsNotMissing () ; clusterHasGlusterVolumes () ; validateFailedWithReason ( EngineMessage.CLUSTER_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
@ java.lang.Override protected void verifyModel ( org.ovirt.engine.api.model.HostStorage model , int index ) { assertEquals ( StorageType.ISCSI , model . getType () ) ; assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertEquals ( NUMBER_CONSTANT , model . getLogicalUnits () . getLogicalUnits () . size () ) ; assertEquals ( GUIDS [ index ] . toString () , model . getLogicalUnits () . getLogicalUnits () . get ( NUMBER_CONSTANT ) . getId () ) ; verifyLinks ( model ) ; }
private void initStoragePool () { storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; org.mockito.Mockito . when ( storagePoolDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito . when ( command . getStoragePoolId () ) . thenReturn ( storagePoolId ) ; }
@ org.junit.Test public void testGetEntityPermissionsByUserAndGroups () { org.junit.Assert . assertNotNull ( dbFacade . getEntityPermissionsForUserAndGroups ( org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.dao.DbFacadeDAOTest.DIRECTORY_ELEMENT_ID_WITH_BASIC_PERMISSIONS . toString () , ActionGroup.VM_BASIC_OPERATIONS , org.ovirt.engine.core.dao.DbFacadeDAOTest.VMT_ID , VdcObjectType.VM , false ) ) ; org.junit.Assert . assertNull ( dbFacade . getEntityPermissionsForUserAndGroups ( org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.dao.DbFacadeDAOTest.DIRECTORY_ELEMENT_ID_WITH_BASIC_PERMISSIONS . toString () , ActionGroup.CREATE_TEMPLATE , org.ovirt.engine.core.dao.DbFacadeDAOTest.VMT_ID , VdcObjectType.VM , false ) ) ; }
@ java.lang.Override protected void ProceedProxyReturnValue () { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand . getReturnStatus () ) ; switch ( returnStatus ) { case UnknownTask : log . error ( java.lang.String . format ( STRING_CONSTANT , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand . getParameters () . getTaskId () ) ) ; return; case TaskStateError : InitializeVdsError ( returnStatus ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand . getVDSReturnValue () . setSucceeded ( false ) ; return; } super . ProceedProxyReturnValue () ; }
protected void postInitDisks () { onDataLoad () ; checkDestFormatCompatibility () ; StopProgress () ; getStorage () . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.core.compat.IEventListener () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { onDataLoad () ; } } ) ; }
public static final org.ovirt.engine.ui.common.widget.table.column.DiskSizeColumn < org.ovirt.engine.core.common.businessentities.Disk > getSnapshotSizeColumn ( java.lang.String sortBy ) { org.ovirt.engine.ui.common.widget.table.column.DiskSizeColumn < org.ovirt.engine.core.common.businessentities.Disk > column = new org.ovirt.engine.ui.common.widget.table.column.DiskSizeColumn < org.ovirt.engine.core.common.businessentities.Disk > () { @ java.lang.Override protected java.lang.Long getRawValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . getActualSizeInBytes () ; } } ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns . makeSortable ( column , sortBy ) ; }
public boolean isMemorySnapshotSupported ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( vm == null ) { return false ; } boolean archMemorySnapshotSupported = isMemorySnapshotSupportedByArchitecture ( vm . getClusterArch () , vm . getVdsGroupCompatibilityVersion () ) ; return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.MemorySnapshotSupported , vm . getVdsGroupCompatibilityVersion () . toString () ) ) ) && archMemorySnapshotSupported ; }
public void refreshGeoRepDataForVolume ( final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume ) { if ( volume == null ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterVolumeGeoRepSyncFailed , STRING_CONSTANT ) ; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getClusterDao () . get ( volume . getClusterId () ) ; discoverGeoRepDataInCluster ( cluster , volume ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > geoRepSessions = getGeoRepDao () . getGeoRepSessions ( volume . getId () ) ; refreshGeoRepSessionStatusForSessions ( cluster , geoRepSessions ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.Collections . sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer () ) ; setItems ( disks ) ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc getDeviceList ( int storageType ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . getDeviceList ( storageType ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void initDestSDs ( org.ovirt.engine.core.bll.AddVmCommand < ? extends org.ovirt.engine.core.common.action.VmManagementParametersBase > command ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd1 = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; org.ovirt.engine.core.common.businessentities.StorageDomain sd2 = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; sd1 . setId ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ; sd2 . setId ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_2 ) ; command.destStorages . put ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 , sd1 ) ; command.destStorages . put ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_2 , sd2 ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.StorageDomain > list = ( ( org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( sender ) ) ; if ( ( ( ( list . getSelectedItem () ) != null ) && ( list . getSelectedItem () . getStorageType () . isBlockDomain () ) ) && ( containsKvmOrigin () ) ) { setMessage ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExternalSourceModel.constants . kvmBlockDomainWraning () ) ; } else { setMessage ( STRING_CONSTANT ) ; } }
