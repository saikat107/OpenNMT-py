private static com.android.vts.entity.ProfilingPointRunEntity createProfilingReport ( java.lang.String [] labels , long [] values , com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode regressionMode ) { java.util.List < java.lang.String > labelList = java.util.Arrays . asList ( labels ) ; java.util.List < java.lang.Long > valueList = new java.util.ArrayList <> () ; for ( long value : values ) { valueList . add ( value ) ; } return new com.android.vts.entity.ProfilingPointRunEntity ( com.google.appengine.api.datastore.KeyFactory . createKey ( TestEntity.KIND , STRING_CONSTANT ) , STRING_CONSTANT , NUMBER_CONSTANT , regressionMode . getNumber () , labelList , valueList , STRING_CONSTANT , STRING_CONSTANT ) ; }
public void callOnDropped ( com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.eclipse.adt.editors.layout.gscripts.IDragElement [] elements , com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback feedback , com.android.ide.eclipse.adt.editors.layout.gscripts.Point where , boolean isCopy , boolean sameCanvas ) { com.android.ide.eclipse.adt.editors.layout.gscripts.IViewRule rule = loadRule ( targetNode . getNode () ) ; if ( rule != null ) { try { rule . onDropped ( targetNode , elements , feedback , where , isCopy , sameCanvas ) ; } catch ( java.lang.Exception e ) { logError ( STRING_CONSTANT , rule . getClass () . getSimpleName () , e . toString () ) ; } } }
public void finish () { if ( ( ! ( mHaveConditional ) ) && ( ( mNodes ) != null ) ) { for ( lombok.ast.Node node : mNodes ) { java.lang.String message = STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ; mContext . report ( com.android.tools.lint.checks.ViewHolderDetector.ISSUE , node , mContext . getLocation ( node ) , message , null ) ; } } }
public void testAspectRatio ( ) throws java.lang.Exception { double aspectRatio = getRealAspectRatio ( getActivity () ) ; android.util.Log . i ( android.dpi.cts.AspectRatioTest.TAG , ( STRING_CONSTANT + aspectRatio ) ) ; if ( ( aspectRatio >= NUMBER_CONSTANT ) && ( aspectRatio <= NUMBER_CONSTANT ) ) { return; } if ( getActivity () . getPackageManager () . hasSystemFeature ( PackageManager.FEATURE_WATCH ) ) { if ( ( aspectRatio >= NUMBER_CONSTANT ) && ( aspectRatio <= NUMBER_CONSTANT ) ) { return; } } fail ( ( STRING_CONSTANT + aspectRatio ) ) ; }
@ java.lang.Override public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices () { android.util.Log . v ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { return service . getConnectedDevices () ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > () ; }
@ dalvik.annotation.AndroidOnly ( value = STRING_CONSTANT ) public void test_unwrap_ByteBuffer_ByteBuffer_04 () { java.lang.String host = STRING_CONSTANT ; int port = NUMBER_CONSTANT ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; javax.net.ssl.SSLEngine sse = getEngine ( host , port ) ; try { sse . unwrap ( bbs , bbd ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalStateException iobe ) {} catch ( java.lang.Exception e ) { fail ( ( e + STRING_CONSTANT ) ) ; } }
protected void buildSourceFileList () { mFiles . clear () ; org.eclipse.core.resources.IWorkspaceRoot root = org.eclipse.core.resources.ResourcesPlugin . getWorkspace () . getRoot () ; java.util.List < org.eclipse.core.runtime.IPath > sourceFolderPathList = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper . getSourceClasspaths ( mJavaProject ) ; for ( org.eclipse.core.runtime.IPath sourceFolderPath : sourceFolderPathList ) { org.eclipse.core.resources.IFolder sourceFolder = root . getFolder ( sourceFolderPath ) ; if ( ( sourceFolder . exists () ) && ( ( sourceFolder . equals ( getGenFolder () ) ) == false ) ) { scanFolderForSourceFiles ( sourceFolder , sourceFolder ) ; } } }
@ java.lang.Override public void testFailed ( com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { if ( ( mLogger ) != null ) { mLogger . warning ( java.lang.String . format ( STRING_CONSTANT , test . getClassName () , test . getTestName () , mDeviceName ) ) ; mLogger . warning ( getModifiedTrace ( trace ) ) ; } mFailedTests . add ( test ) ; super . testFailed ( test , trace ) ; }
private java.lang.String getRootId () { org.w3c.dom.Element primaryNode = getPrimaryNode () ; if ( primaryNode != null ) { java.lang.String oldId = primaryNode . getAttributeNS ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID ) ; if ( ( oldId . length () ) > NUMBER_CONSTANT ) { return oldId ; } } return null ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ( o == null ) || ( ( getClass () ) != ( o . getClass () ) ) ) { return false ; } if ( ! ( super . equals ( o ) ) ) { return false ; } com.android.ide.common.res2.ResourceItem that = ( ( com.android.ide.common.res2.ResourceItem ) ( o ) ) ; if ( ( mType ) != ( that.mType ) ) { return false ; } return true ; }
private void addThrow ( @ org.jetbrains.annotations.NonNls java.lang.String throwableClass , @ org.jetbrains.annotations.NonNls java.lang.String ctorSignature , java.lang.String message ) { mv . visitTypeInsn ( Opcodes.NEW , throwableClass ) ; mv . visitInsn ( Opcodes.DUP ) ; mv . visitLdcInsn ( message ) ; mv . visitMethodInsn ( Opcodes.INVOKESPECIAL , throwableClass , STRING_CONSTANT , ctorSignature ) ; mv . visitInsn ( Opcodes.ATHROW ) ; }
@ android.annotation.SystemApi public boolean getDataEnabled ( int subId ) { boolean retVal = false ; try { com.android.internal.telephony.ITelephony telephony = getITelephony () ; if ( telephony != null ) retVal = telephony . getDataEnabled ( subId ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.telephony.TelephonyManager.TAG , STRING_CONSTANT , e ) ; } catch ( java.lang.NullPointerException e ) {} android.util.Log . d ( android.telephony.TelephonyManager.TAG , ( STRING_CONSTANT + retVal ) ) ; return retVal ; }
private void checkDslProperty ( java.lang.String parent , org.codehaus.groovy.ast.expr.MethodCallExpression c , java.lang.String parentParent ) { java.lang.String property = c . getMethodAsString () ; if ( isInterestingProperty ( property , parent , getParentParent () ) ) { java.lang.String value = getText ( c . getArguments () ) ; checkDslPropertyAssignment ( context , property , value , parent , parentParent , c ) ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp ( getClass () . getSimpleName () ) ; mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus [] {} ; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = - NUMBER_CONSTANT ; mIccIoResult = new com.android.internal.telephony.uicc.IccIoResult ( NUMBER_CONSTANT , NUMBER_CONSTANT , com.android.internal.telephony.uicc.IccUtils . hexStringToBytes ( STRING_CONSTANT ) ) ; mSimulatedCommands . setIccIoResultForApduLogicalChannel ( mIccIoResult ) ; mTestHandlerThread = new com.android.internal.telephony.uicc.UiccCardTest.UiccCardHandlerThread ( TAG ) ; mTestHandlerThread . start () ; waitUntilReady () ; replaceInstance ( com.android.internal.telephony.uicc.UiccCard . class , STRING_CONSTANT , mUicccard , mCAT ) ; }
public static org.bouncycastle.asn1.x9.X9ECParameters getByName ( java.lang.String name ) { org.bouncycastle.asn1.x9.X9ECParameters ecP = org.bouncycastle.asn1.x9.X962NamedCurves . getByName ( name ) ; if ( ecP == null ) { ecP = org.bouncycastle.asn1.sec.SECNamedCurves . getByName ( name ) ; } if ( ecP == null ) { ecP = org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves . getByName ( name ) ; } if ( ecP == null ) { ecP = org.bouncycastle.asn1.nist.NISTNamedCurves . getByName ( name ) ; } return ecP ; }
public void testStageInstallWithErrorCode_withNewerDistroVersion ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) . replaceFormatVersionForTests ( NUMBER_CONSTANT , NUMBER_CONSTANT ) . buildUnvalidated () ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_FORMAT_VERSION , installer . stageInstallWithErrorCode ( distro . getBytes () ) ) ; assertNoDistroOperationStaged () ; assertNoInstalledDistro () ; }
@ org.junit.Test public void testHandleUserUnlockAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user1 = com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ; when ( mWifiConfigStoreLegacy . areStoresPresent () ) . thenReturn ( true ) ; when ( mWifiConfigStore . areStoresPresent () ) . thenReturn ( false ) ; mWifiConfigManager . handleUserUnlock ( user1 ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile . class ) ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . write ( anyBoolean () , any ( com.android.server.wifi.WifiConfigStoreData . class ) ) ; }
private void createAndUpdateCatServiceLocked () { if ( ( ( mUiccApplications.length ) > NUMBER_CONSTANT ) && ( ( mUiccApplications [ NUMBER_CONSTANT ] ) != null ) ) { if ( ( mCatService ) == null ) { mCatService = com.android.internal.telephony.cat.CatService . getInstance ( mCi , mContext , mUiccCard , mPhoneId ) ; } else { mCatService . update ( mCi , mContext , mUiccCard ) ; } } else { if ( ( mCatService ) != null ) { mCatService . dispose () ; } mCatService = null ; } }
public java.lang.Object clone () { try { java.util.zip.ZipEntry e = ( ( java.util.zip.ZipEntry ) ( super . clone () ) ) ; e.extra = ( ( extra ) == null ) ? null : extra . clone () ; return e ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError () ; } }
public android.os.Bundle sendWallpaperCommand ( android.os.IBinder window , java.lang.String action , int x , int y , int z , android.os.Bundle extras , boolean sync ) { synchronized ( mWindowMap ) { long ident = android.os.Binder . clearCallingIdentity () ; try { return sendWindowWallpaperCommandLocked ( windowForClientLocked ( this , window ) , action , x , y , z , extras , sync ) ; } finally { android.os.Binder . restoreCallingIdentity ( ident ) ; } } }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod jmethod ) { if ( ( ! ( jmethod . isStatic () ) ) && ( ( jmethod . getEnclosingType () ) instanceof com.android.jack.ir.ast.JDefinedClass ) ) { com.android.jack.ir.ast.JVariable thisVar = jmethod . getThis () ; assert thisVar != null ; if ( ( thisVar . getMarker ( com.android.jack.analysis.DefinitionMarker . class ) ) == null ) { thisVar . addMarker ( new com.android.jack.analysis.DefinitionMarker ( thisVar ) ) ; } } return super . visit ( jmethod ) ; }
private static void extractVariantSubtags ( java.lang.String [] subtags , int startIndex , int endIndex , java.util.List < java.lang.String > normalizedVariants ) { for ( int i = startIndex ; i < endIndex ; i ++ ) { final java.lang.String subtag = subtags [ i ] ; if ( java.util.Locale.Builder . isValidVariantSubtag ( subtag ) ) { normalizedVariants . add ( subtag . toUpperCase ( java.util.Locale.ROOT ) ) ; } else { break; } } }
public static android.telephony.SmsMessage.SubmitPdu getSubmitPdu ( java.lang.String scAddress , java.lang.String destinationAddress , java.lang.String message , boolean statusReportRequested ) { com.android.internal.telephony.SmsMessageBase.SubmitPduBase spb ; if ( android.telephony.SmsMessage . useCdmaFormatForMoSms () ) { spb = com.android.internal.telephony.cdma.SmsMessage . getSubmitPdu ( scAddress , destinationAddress , message , statusReportRequested , null ) ; } else { spb = com.android.internal.telephony.gsm.SmsMessage . getSubmitPdu ( scAddress , destinationAddress , message , statusReportRequested ) ; } return new android.telephony.SmsMessage.SubmitPdu ( spb ) ; }
public static java.util.ArrayList < com.google.gct.testing.GoogleCloudTestingConfiguration > getCustomConfigurationsFromStorage ( org.jetbrains.android.facet.AndroidFacet facet ) { java.util.List < com.google.gct.testing.GoogleCloudTestingPersistentConfiguration > googleCloudTestingPersistentConfigurations = com.google.gct.testing.GoogleCloudTestingCustomPersistentConfigurations . getInstance ( facet . getModule () . getProject () ) . getState () . myGoogleCloudTestingPersistentConfigurations ; return com.google.common.collect.Lists . newArrayList ( com.google.gct.testing.GoogleCloudTestingConfigurationFactory . deserializeConfigurations ( googleCloudTestingPersistentConfigurations , true , facet ) ) ; }
public static java.util.Set < java.lang.Integer > allFromKeymaster ( int userAuthenticators ) { int userAuthenticator = NUMBER_CONSTANT ; java.util.Set < java.lang.Integer > result = null ; while ( userAuthenticators != NUMBER_CONSTANT ) { if ( ( userAuthenticators & NUMBER_CONSTANT ) != NUMBER_CONSTANT ) { if ( result == null ) { result = new java.util.HashSet < java.lang.Integer > () ; } result . add ( android.security.KeyStoreKeyConstraints.UserAuthenticator . fromKeymaster ( userAuthenticator ) ) ; } userAuthenticators > > > = NUMBER_CONSTANT ; userAuthenticator < < = NUMBER_CONSTANT ; } return result != null ? result : java.util.Collections . < java.lang.Integer > emptySet () ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface enclosingType = method . getEnclosingType () ; if ( ( ( ( enclosingType . isExternal () ) || ( method . isNative () ) ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } session = enclosingType . getSession () ; com.android.jack.transformations.ast.ConcatRemover.Visitor visitor = new com.android.jack.transformations.ast.ConcatRemover.Visitor ( method ) ; visitor . accept ( method ) ; }
private boolean acquireWakeLock ( java.lang.String lockName ) { if ( ( mWakeLock ) == null ) { mWakeLockName = lockName ; mWakeLock = mPowerManager . newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , lockName ) ; } if ( ! ( mWakeLock . isHeld () ) ) mWakeLock . acquire () ; return true ; }
public static boolean isAssistedDialingEnabled ( @ android.support.annotation.NonNull com.android.dialer.configprovider.ConfigProvider configProvider ) { if ( configProvider == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } return ( ( ( ( Build.VERSION.SDK_INT ) >= ( com.android.dialer.assisteddialing.ConcreteCreator.BUILD_CODE_FLOOR ) ) && ( ( Build.VERSION.SDK_INT ) <= ( com.android.dialer.assisteddialing.ConcreteCreator.BUILD_CODE_CEILING ) ) ) && ( ! ( android.support.v4.os.BuildCompat . isAtLeastP () ) ) ) && ( configProvider . getBoolean ( STRING_CONSTANT , false ) ) ; }
public void test_initWithSecureRandom ( ) throws java.lang.Exception { java.security.SecureRandom sr = new java.security.SecureRandom () ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( ( ( org.apache.harmony.crypto.tests.javax.crypto.CipherTest.ALGORITHM_3DES ) + STRING_CONSTANT ) ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , sr ) ; cipher = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; try { cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , sr ) ; fail () ; } catch ( java.security.InvalidKeyException expected ) {} }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testQuerySupportedImsFeatures ( ) throws android.os.RemoteException { android.telephony.ims.stub.ImsFeatureConfiguration config = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder () . addFeature ( ImsFeature.FEATURE_MMTEL ) . addFeature ( ImsFeature.FEATURE_RCS ) . build () ; mTestImsService.testFeatureConfig = config ; android.telephony.ims.stub.ImsFeatureConfiguration result = mTestImsServiceBinder . querySupportedImsFeatures () ; junit.framework.Assert . assertEquals ( config , result ) ; }
public boolean removeBond ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) return false ; return service . removeBond ( device ) ; }
private void newLine () { try { synchronized ( this ) { ensureOpen () ; java.io.BufferedWriter textOut = getTextOut () ; textOut . newLine () ; textOut . flushBuffer () ; charOut . flushBuffer () ; if ( autoFlush ) out . flush () ; } } catch ( java.io.InterruptedIOException x ) { java.lang.Thread . currentThread () . interrupt () ; } catch ( java.io.IOException x ) { trouble = true ; } }
public java.lang.String getTree ( com.android.sdkuilib.internal.repository.core.PackagesDiffLogic l , boolean displaySortByApi ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for ( com.android.sdkuilib.internal.repository.core.PkgCategory cat : m . getCategories ( displaySortByApi ) ) { sb . append ( cat . toString () ) . append ( CHAR_CONS ) ; for ( com.android.sdklib.internal.repository.updater.PkgItem item : cat . getItems () ) { sb . append ( STRING_CONSTANT ) . append ( item . toString () ) . append ( CHAR_CONS ) ; } } return sb . toString () ; }
@ com.android.annotations.NonNull static com.android.builder.model.ProductFlavorContainer createPFC ( @ com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData productFlavorData , @ com.android.annotations.NonNull java.util.Collection < com.android.builder.model.SourceProviderContainer > sourceProviderContainers ) { java.util.List < com.android.builder.model.SourceProviderContainer > clonedContainer = com.android.build.gradle.internal.model.SourceProviderContainerImpl . cloneCollection ( sourceProviderContainers ) ; com.android.builder.model.SourceProviderContainer testASP = com.android.build.gradle.internal.model.SourceProviderContainerImpl . create ( com.android.builder.model.AndroidProject.ARTIFACT_ANDROID_TEST , productFlavorData . getTestSourceSet () ) ; clonedContainer . add ( testASP ) ; return new com.android.build.gradle.internal.model.ProductFlavorContainerImpl ( com.android.build.gradle.internal.model.ProductFlavorImpl . cloneFlavor ( productFlavorData . getProductFlavor () ) , com.android.build.gradle.internal.model.SourceProviderImpl . cloneProvider ( productFlavorData . getSourceSet () ) , clonedContainer ) ; }
private void replaceUninitializedTypeInStack ( com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType oldType , com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType newType ) { com.google.common.base.Preconditions . checkArgument ( oldType . isUninitialized () , STRING_CONSTANT , oldType ) ; for ( int i = NUMBER_CONSTANT , size = operandStack . size () ; i < size ; ++ i ) { com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType type = operandStack . get ( i ) ; if ( type == oldType ) { operandStack . set ( i , newType ) ; } } }
@ javax.annotation.Nonnull private java.util.Collection < com.android.jack.ir.ast.JMethodId > collectAllMethodIdsInHierarchy ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface referenceType ) { java.util.Set < com.android.jack.ir.ast.JMethodId > collectedMethods = new java.util.HashSet < com.android.jack.ir.ast.JMethodId > () ; assert ( allTypes ) != null ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : allTypes ) { if ( ( referenceType . canBeSafelyUpcast ( type ) ) || ( type . canBeSafelyUpcast ( referenceType ) ) ) { for ( com.android.jack.ir.ast.JMethod method : type . getMethods () ) { collectedMethods . add ( method . getMethodId () ) ; } } } return collectedMethods ; }
private long getBlockSuppressSecondsFromCarrierConfig () { android.telephony.CarrierConfigManager carrierConfigManager = getContext () . getSystemService ( android.telephony.CarrierConfigManager . class ) ; int carrierConfigValue = carrierConfigManager . getConfig () . getInt ( CarrierConfigManager.KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT ) ; boolean isValidValue = ( carrierConfigValue >= NUMBER_CONSTANT ) && ( carrierConfigValue <= ( com.android.providers.blockednumber.BlockedNumberProvider.MAX_BLOCKING_DISABLED_DURATION_SECONDS ) ) ; return isValidValue ? carrierConfigValue : android.telephony.CarrierConfigManager . getDefaultConfig () . getInt ( CarrierConfigManager.KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT ) ; }
private void testScriptSide ( android.renderscript.RenderScript pRS ) { com.android.rs.unittest.ScriptC_element s = new com.android.rs.unittest.ScriptC_element ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s . invoke_element_test () ; pRS . finish () ; s . get_complexStruct () . getAllocation () . destroy () ; s . get_complexStruct () . getElement () . destroy () ; s . destroy () ; }
@ java.lang.Override @ javax.annotation.Nonnull protected com.android.jack.test.toolchain.JackBasedToolchain getReferenceToolchain () { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain . class ) ; java.io.File internalJackOutputLib ; try { internalJackOutputLib = com.android.jack.TestTools . createTempDir ( STRING_CONSTANT , STRING_CONSTANT ) ; toolchain . addProperty ( Options.EMIT_LINE_NUMBER_DEBUG_INFO . getName () , java.lang.Boolean . toString ( withDebugInfos ) ) ; toolchain . addProperty ( ScheduleInstance.DEFAULT_RUNNER . getName () , STRING_CONSTANT ) ; toolchain . addProperty ( Options.INTERNAL_LIBRARY_OUTPUT_DIR . getName () , internalJackOutputLib . getAbsolutePath () ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } return toolchain ; }
public void onFinished ( android.preference.Preference preference , boolean reading ) { if ( DBG ) dumpState () ; if ( DBG ) android.util.Log . d ( com.android.phone.TimeConsumingPreferenceActivity.LOG_TAG , ( ( ( STRING_CONSTANT + ( preference . getKey () ) ) + STRING_CONSTANT ) + reading ) ) ; mBusyList . remove ( preference . getKey () ) ; if ( ( mBusyList . isEmpty () ) && ( mIsForeground ) ) { if ( reading ) { dismissDialogSafely ( com.android.phone.TimeConsumingPreferenceActivity.BUSY_READING_DIALOG ) ; } else { dismissDialogSafely ( com.android.phone.TimeConsumingPreferenceActivity.BUSY_SAVING_DIALOG ) ; } } }
private com.android.jack.ir.ast.JCatchBlock createCatchBlock ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass exceptionType ) { com.android.jack.ir.ast.JLocal catchLocal = new com.android.jack.ir.ast.JLocal ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , STRING_CONSTANT , exceptionType , com.android.jack.ir.ast.JModifier.SYNTHETIC , ( ( com.android.jack.ir.ast.JMethodBody ) ( syntheticSwitchMapInitializer . getBody () ) ) ) ; com.android.jack.ir.ast.JCatchBlock catchBlock = new com.android.jack.ir.ast.JCatchBlock ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , java.util.Collections . < com.android.jack.ir.ast.JClass > singletonList ( exceptionType ) , catchLocal ) ; return catchBlock ; }
@ android.support.annotation.MainThread @ java.lang.Override public void loadQuickContactBadge ( android.widget.QuickContactBadge badge , com.android.dialer.glidephotomanager.PhotoInfo photoInfo ) { com.android.dialer.common.Assert . isMainThread () ; badge . assignContactUri ( com.android.dialer.glidephotomanager.impl.GlidePhotoManagerImpl . parseUri ( photoInfo . lookupUri () ) ) ; badge . setOverlay ( null ) ; com.android.dialer.lettertile.LetterTileDrawable defaultDrawable = getDefaultDrawable ( photoInfo ) ; com.android.dialer.glide.GlideRequest < android.graphics.drawable.Drawable > request = buildRequest ( com.android.dialer.glide.GlideApp . with ( badge ) , photoInfo ) . placeholder ( defaultDrawable ) . fallback ( defaultDrawable ) ; if ( photoInfo . isCircular () ) { request . circleCrop () ; } request . into ( badge ) ; }
private void setAdvertisingParameters ( com.android.bluetooth.gatt.AdvertiseClient client ) { int advertiserId = client.advertiserId ; int minAdvertiseUnit = ( ( int ) ( getAdvertisingIntervalUnit ( client.settings ) ) ) ; int maxAdvertiseUnit = minAdvertiseUnit + ( com.android.bluetooth.gatt.AdvertiseManager.AdvertiseNative.ADVERTISING_INTERVAL_DELTA_UNIT ) ; int advertiseEventType = getAdvertisingEventType ( client ) ; int txPowerLevel = getTxPowerLevel ( client.settings ) ; if ( mAdapterService . isMultiAdvertisementSupported () ) { gattClientSetParamsNative ( advertiserId , minAdvertiseUnit , maxAdvertiseUnit , advertiseEventType , com.android.bluetooth.gatt.AdvertiseManager.AdvertiseNative.ADVERTISING_CHANNEL_ALL , txPowerLevel ) ; } else {} }
public void testAbiOnlyWithMultiMatch () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput () ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT ) ) ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT ) ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
public synchronized void setTrafficClass ( int tc ) throws java.net.SocketException { if ( ( tc < NUMBER_CONSTANT ) || ( tc > NUMBER_CONSTANT ) ) throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; if ( isClosed () ) throw new java.net.SocketException ( STRING_CONSTANT ) ; try { getImpl () . setOption ( java.net.SocketOptions.IP_TOS , tc ) ; } catch ( java.net.SocketException se ) { if ( ! ( isConnected () ) ) throw se ; } }
void addToSubroutine ( final long id , final int nbSubroutines ) { if ( ( ( status ) & ( org.objectweb.asm.Label.VISITED ) ) == NUMBER_CONSTANT ) { status |= org.objectweb.asm.Label.VISITED ; srcAndRefPositions = new int [ ( ( nbSubroutines - NUMBER_CONSTANT ) / NUMBER_CONSTANT ) + NUMBER_CONSTANT ] ; } srcAndRefPositions [ ( ( int ) ( id > > > NUMBER_CONSTANT ) ) ] |= ( ( int ) ( id ) ) ; }
private static void addPackageLoaderForLibrary ( com.android.jack.ir.ast.JSession session , com.android.sched.util.config.ReflectFactory < com.android.jack.jayce.JaycePackageLoader > factory , com.android.jack.library.InputJackLibrary inputJackLibrary ) { if ( inputJackLibrary . containsFileType ( FileType.JAYCE ) ) { com.android.jack.jayce.JaycePackageLoader rootPLoader = factory . create ( inputJackLibrary , session . getPhantomLookup () ) ; session . getTopLevelPackage () . addLoader ( rootPLoader ) ; } }
@ java.lang.Override @ javax.annotation.Nonnull public synchronized com.android.sched.vfs.BaseVDir createVDir ( @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { try { return getVDir ( name ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { com.android.sched.vfs.BaseVDir dir = vfs . createVDir ( this , name ) ; map . put ( name , dir ) ; return dir ; } catch ( com.android.sched.util.file.NotDirectoryException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( vfs . getVDirLocation ( this , name ) ) ; } }
public boolean equals ( java.lang.Object other ) { if ( ! ( other instanceof com.ibm.icu.text.DateTimePatternGenerator.DateTimeMatcher ) ) { return false ; } com.ibm.icu.text.DateTimePatternGenerator.DateTimeMatcher that = ( ( com.ibm.icu.text.DateTimePatternGenerator.DateTimeMatcher ) ( other ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( original.length ) ; ++ i ) { if ( ! ( original [ i ] . equals ( that.original [ i ] ) ) ) return false ; } return true ; }
@ java.lang.Override public boolean visit ( org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration , org.eclipse.jdt.internal.compiler.lookup.MethodScope scope ) { org.eclipse.jdt.internal.compiler.ast.Annotation [] annotations = fieldDeclaration.annotations ; if ( hasRelevantAnnotations ( annotations ) ) { org.eclipse.jdt.internal.compiler.lookup.FieldBinding fieldBinding = fieldDeclaration.binding ; if ( fieldBinding == null ) { return false ; } java.lang.String fqn = com.android.build.gradle.tasks.annotations.Extractor . getFqn ( scope ) ; com.android.build.gradle.tasks.annotations.Extractor.Item item = com.android.build.gradle.tasks.annotations.Extractor.FieldItem . create ( fqn , fieldBinding ) ; if ( item != null ) { assert fqn != null ; addItem ( fqn , item ) ; addAnnotations ( annotations , item ) ; } } return false ; }
@ java.lang.Override public void handleSetListening ( boolean listening ) { if ( ( mListening ) == listening ) return; mListening = listening ; if ( mListening ) { mController . addCallback ( mZenCallback ) ; com.android.systemui.Prefs . registerListener ( mContext , mPrefListener ) ; } else { mController . removeCallback ( mZenCallback ) ; com.android.systemui.Prefs . unregisterListener ( mContext , mPrefListener ) ; } }
@ android.test.suitebuilder.annotation.MediumTest public void testProcessChldHoldActiveHold ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall () ; addCallCapability ( activeCall , Connection.CAPABILITY_HOLD ) ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_HOLDACTIVE_ACCEPTHELD ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . holdCall ( org.mockito.Matchers . eq ( activeCall ) ) ; assertEquals ( didProcess , true ) ; }
private lombok.ast.Node findSurroundingMethod ( lombok.ast.Node scope ) { while ( scope != null ) { java.lang.Class < ? extends lombok.ast.Node > type = scope . getClass () ; if ( ( type == ( lombok.ast.MethodDeclaration . class ) ) || ( type == ( lombok.ast.ConstructorDeclaration . class ) ) ) { return scope ; } scope = scope . getParent () ; } return null ; }
private void sendImsFeatureCreatedCallback ( int slot , int feature ) { synchronized ( mLock ) { for ( java.util.Iterator < com.android.ims.internal.IImsServiceFeatureCallback > i = mImsStatusCallbacks . iterator () ; i . hasNext () ; ) { com.android.ims.internal.IImsServiceFeatureCallback callbacks = i . next () ; try { callbacks . imsFeatureCreated ( slot , feature ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( e . getMessage () ) ) ) ; i . remove () ; } } } }
public java.nio.IntBuffer asIntBuffer () { int size = ( this . remaining () ) > > NUMBER_CONSTANT ; int off = position () ; return ( ( java.nio.IntBuffer ) ( new java.nio.ByteBufferAsIntBuffer ( this , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , size , size , off , order () ) ) ) ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest @ android.test.FlakyTest @ org.junit.Ignore public void testSendImsGmsTest ( ) throws java.lang.Exception { switchImsSmsFormat ( PhoneConstants.PHONE_TYPE_GSM ) ; mImsSmsDispatcher . sendText ( STRING_CONSTANT , STRING_CONSTANT , com.android.internal.telephony.TAG , null , null , null , null , false , ( - NUMBER_CONSTANT ) , false , ( - NUMBER_CONSTANT ) ) ; org.mockito.Mockito . verify ( mSimulatedCommandsVerifier ) . sendImsGsmSms ( org.mockito.Mockito . eq ( STRING_CONSTANT ) , org.mockito.Mockito . eq ( STRING_CONSTANT ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Matchers . any ( android.os.Message . class ) ) ; }
public static java.lang.String getCurveName ( org.bouncycastle.asn1.ASN1ObjectIdentifier oid ) { java.lang.String name = org.bouncycastle.asn1.x9.X962NamedCurves . getName ( oid ) ; if ( name == null ) { name = org.bouncycastle.asn1.sec.SECNamedCurves . getName ( oid ) ; if ( name == null ) { name = org.bouncycastle.asn1.nist.NISTNamedCurves . getName ( oid ) ; } if ( name == null ) { name = org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves . getName ( oid ) ; } if ( name == null ) { name = org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves . getName ( oid ) ; } } return name ; }
public void testMergeConflict ( ) throws java.io.IOException { com.android.dex.Dex a = resourceToDexBuffer ( STRING_CONSTANT ) ; com.android.dex.Dex b = resourceToDexBuffer ( STRING_CONSTANT ) ; com.android.dex.Dex ab = new com.android.dx.merge.DexMerger ( new com.android.dex.Dex [] { a , b } , CollisionPolicy.FAIL ) . merge () ; com.android.dx.merge.DexMerger dexMerger = new com.android.dx.merge.DexMerger ( new com.android.dex.Dex [] { a , ab } , CollisionPolicy.FAIL ) ; try { dexMerger . merge () ; fail () ; } catch ( com.android.dex.DexException expected ) { assertEquals ( STRING_CONSTANT , expected . getMessage () ) ; } }
public static com.android.jack.dx.rop.code.Rop opMoveParam ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type . getBasicFrameType () ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.MOVE_PARAM_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.MOVE_PARAM_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.MOVE_PARAM_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.MOVE_PARAM_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.MOVE_PARAM_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_CLOSURE : return com.android.jack.dx.rop.code.Rops.MOVE_PARAM_LONG ; } return com.android.jack.dx.rop.code.Rops . throwBadType ( type ) ; }
void regularScanTimeout ( com.android.bluetooth.gatt.ScanClient client ) { if ( ( ! ( isExemptFromScanDowngrade ( client ) ) ) && ( client.stats . isScanningTooLong () ) ) { android.util.Log . w ( com.android.bluetooth.gatt.ScanManager.TAG , ( ( STRING_CONSTANT + ( client.scannerId ) ) + STRING_CONSTANT ) ) ; setOpportunisticScanClient ( client ) ; removeScanFilters ( client.scannerId ) ; client.stats . setScanTimeout () ; } configureRegularScanParams () ; if ( ( numRegularScanClients () ) == NUMBER_CONSTANT ) { if ( com.android.bluetooth.gatt.ScanManager.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.ScanManager.TAG , STRING_CONSTANT ) ; gattClientScanNative ( false ) ; } }
@ java.lang.Override public boolean processMessage ( android.os.Message message ) { if ( android.net.wifi.WifiStateMachine.DBG ) log ( ( ( ( getName () ) + ( message . toString () ) ) + STRING_CONSTANT ) ) ; switch ( message.what ) { case android.net.wifi.WifiStateMachine.CMD_SET_SCAN_MODE : if ( ( message.arg1 ) == ( android.net.wifi.WifiStateMachine.SCAN_ONLY_MODE ) ) { deferMessage ( message ) ; } break; case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT : deferMessage ( message ) ; handleNetworkDisconnect () ; transitionTo ( mDisconnectedState ) ; break; default: return NOT_HANDLED ; } android.util.EventLog . writeEvent ( android.net.wifi.WifiStateMachine.EVENTLOG_WIFI_EVENT_HANDLED , message.what ) ; return HANDLED ; }
public void testDensityOnlyWithMatch () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput () ) ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT ) ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
private void generateTestList ( java.lang.String path ) { try { java.io.File tests_list = new java.io.File ( com.android.dumprendertree.Menu.LAYOUT_TESTS_LIST_FILE ) ; java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( tests_list , false ) ) ; com.android.dumprendertree.FsUtils . findLayoutTestsRecursively ( bos , path ) ; bos . flush () ; bos . close () ; } catch ( java.lang.Exception e ) { android.util.Log . e ( com.android.dumprendertree.Menu.LOGTAG , ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; } }
@ android.support.annotation.Nullable private static android.net.Uri getVoicemailRingtoneUri ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle handle ) { if ( ( android.os.Build.VERSION.SDK_INT ) < ( android.os.Build.VERSION_CODES.N ) ) { return null ; } if ( handle == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; handle = com.android.dialer.app.calllog.VisualVoicemailNotifier . getFallbackAccount ( context ) ; if ( handle == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; return null ; } } return context . getSystemService ( android.telephony.TelephonyManager . class ) . getVoicemailRingtoneUri ( handle ) ; }
private static java.lang.String concatenateRange ( java.lang.String [] array , int start , int end ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( NUMBER_CONSTANT ) ; for ( int i = start ; i < end ; ++ i ) { if ( i != NUMBER_CONSTANT ) { builder . append ( CHAR_CONS ) ; } builder . append ( array [ i ] ) ; } return builder . toString () ; }
@ java.lang.Override public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { assert ( ( enclosingPackage ) == null ) || ( ! ( enclosingPackage.deletedItems . contains ( getName () ) ) ) ; if ( visitor . visit ( this ) ) { if ( visitor . needLoading () ) { loadSubPackages () ; loadClassesAndInterfaces () ; } visitor . accept ( subPackages ) ; visitor . accept ( declaredTypes ) ; } visitor . endVisit ( this ) ; }
@ org.junit.Test public void testAppManager ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework . getInstrumentation () ; com.android.devtools.systemimage.uitest.utils.AppManager . installApp ( instrumentation , STRING_CONSTANT ) ; com.android.devtools.systemimage.uitest.utils.AppManager . installApp ( instrumentation , STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , com.android.devtools.systemimage.uitest.utils.AppManager . isAppInstalled ( instrumentation , STRING_CONSTANT , null ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , com.android.devtools.systemimage.uitest.utils.AppManager . isAppInstalled ( instrumentation , STRING_CONSTANT , null ) ) ; com.android.devtools.systemimage.uitest.utils.AppManager . uninstallApp ( instrumentation , STRING_CONSTANT , null ) ; com.android.devtools.systemimage.uitest.utils.AppManager . uninstallApp ( instrumentation , STRING_CONSTANT , null ) ; }
void write ( java.io.PrintWriter writer ) { if ( ( ! ( isValid () ) ) || ( annotations . isEmpty () ) ) { return; } writer . print ( STRING_CONSTANT ) ; writer . print ( getSignature () ) ; writer . println ( STRING_CONSTANT ) ; for ( com.android.build.gradle.tasks.annotations.Extractor.AnnotationData annotation : annotations ) { annotation . write ( writer ) ; } writer . print ( STRING_CONSTANT ) ; writer . println () ; }
public void test_run_for_LongTest2_with_time_limit_should_not_report_time_out () { java.lang.Class < > target = vogar.target.junit3.LongTest2 . class ; java.lang.String actionName = STRING_CONSTANT ; vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , actionName , null , target , skipPastReference , testEnvironment , NUMBER_CONSTANT ) ; runner . run ( STRING_CONSTANT , null , null ) ; org.mockito.Mockito . verify ( monitor , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . outcomeFinished ( Result.SUCCESS ) ; }
public int read ( ) throws java.io.IOException { java.lang.Object traceContext = sun.misc.IoTrace . fileReadBegin ( path ) ; byte [] b = new byte [ NUMBER_CONSTANT ] ; int res = - NUMBER_CONSTANT ; try { res = read ( b , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } finally { sun.misc.IoTrace . fileReadEnd ( traceContext , res ) ; } return res != ( - NUMBER_CONSTANT ) ? ( b [ NUMBER_CONSTANT ] ) & NUMBER_CONSTANT : - NUMBER_CONSTANT ; }
@ org.junit.Test public void testFind_exception ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , false , false ) ; org.mockito.Mockito . when ( mISupplicantP2pIfaceMock . find ( anyInt () ) ) . thenThrow ( mRemoteException ) ; assertFalse ( mDut . find () ) ; assertFalse ( mDut . isInitializationComplete () ) ; }
@ java.lang.Deprecated public static int forkAndSpecialize ( int uid , int gid , int [] gids , boolean enableDebugger , int [] [] rlimits ) { int debugFlags = ( enableDebugger ) ? dalvik.system.Zygote.DEBUG_ENABLE_DEBUGGER : NUMBER_CONSTANT ; return dalvik.system.Zygote . forkAndSpecialize ( uid , gid , gids , debugFlags , rlimits ) ; }
public java.util.concurrent.ConcurrentSkipListSet < E > clone () { java.util.concurrent.ConcurrentSkipListSet < E > clone = null ; try { clone = ( ( java.util.concurrent.ConcurrentSkipListSet < E > ) ( super . clone () ) ) ; clone . setMap ( new java.util.concurrent.ConcurrentSkipListMap ( m ) ) ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError () ; } return clone ; }
private synchronized void acquireWakeLock () { if ( ( ( mCompleted ) == true ) || ( ( mWakeLock ) != null ) ) { return; } android.os.PowerManager pm = ( ( android.os.PowerManager ) ( mContext . getSystemService ( Context.POWER_SERVICE ) ) ) ; mWakeLock = pm . newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , android.hardware.cts.helpers.sensoroperations.AlarmOperation.WAKE_LOCK_TAG ) ; }
void stopProfileServices () { mAdapterProperties . onBluetoothDisable () ; java.lang.Class [] supportedProfileServices = com.android.bluetooth.btservice.Config . getSupportedProfiles () ; if ( ( ( mRunningProfiles . size () ) < NUMBER_CONSTANT ) || ( ( ( mRunningProfiles . size () ) == NUMBER_CONSTANT ) && ( com.android.bluetooth.gatt.GattService . class . getSimpleName () . equals ( mRunningProfiles . get ( NUMBER_CONSTANT ) . getName () ) ) ) ) { debugLog ( STRING_CONSTANT ) ; mAdapterStateMachine . sendMessage ( AdapterState.BREDR_STOPPED ) ; } setAllProfileServiceStates ( supportedProfileServices , BluetoothAdapter.STATE_OFF ) ; }
public void test_SSLEngine_getEnabledProtocols ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext . create () ; javax.net.ssl.SSLEngine e = c.clientContext . createSSLEngine () ; java.lang.String [] protocols = e . getEnabledProtocols () ; libcore.java.security.StandardNames . assertValidProtocols ( StandardNames.SSL_SOCKET_PROTOCOLS , protocols ) ; assertNotSame ( protocols , e . getEnabledProtocols () ) ; c . close () ; }
@ java.lang.Override public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ( mPendingErrors ) != null ) { for ( com.android.utils.Pair < java.lang.String , com.android.tools.lint.detector.api.Location > pair : mPendingErrors ) { java.lang.String inflatedLayout = pair . getFirst () ; if ( ( ( mLayoutsWithRootLayoutParams ) == null ) || ( ! ( mLayoutsWithRootLayoutParams . contains ( inflatedLayout ) ) ) ) { continue; } com.android.tools.lint.detector.api.Location location = pair . getSecond () ; context . report ( com.android.tools.lint.checks.LayoutInflationDetector.ISSUE , location , com.android.tools.lint.checks.LayoutInflationDetector.ERROR_MESSAGE , null ) ; } } }
public void dump ( java.lang.StringBuilder sb ) { sb . append ( STRING_CONSTANT ) ; if ( ( com.android.bluetooth.avrcp.AvrcpTargetService.sInstance ) == null ) { sb . append ( STRING_CONSTANT ) ; return; } if ( ( mMediaPlayerList ) != null ) { mMediaPlayerList . dump ( sb ) ; } else { sb . append ( STRING_CONSTANT ) ; } mVolumeManager . dump ( sb ) ; sb . append ( STRING_CONSTANT ) ; }
public static final java.util.HashMap readMapXml ( java.io.InputStream in ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { org.xmlpull.v1.XmlPullParser parser = android.util.Xml . newPullParser () ; parser . setInput ( in , null ) ; return ( ( java.util.HashMap ) ( com.android.internal.util.XmlUtils . readValueXml ( parser , new java.lang.String [ NUMBER_CONSTANT ] ) ) ) ; }
public char getChar ( int i ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } checkIndex ( i , SizeOf.CHAR ) ; char x = ( ( char ) ( libcore.io.Memory . peekShort ( ix ( i ) , ( ! ( nativeByteOrder ) ) ) ) ) ; return x ; }
public void addRegistrationListener ( int serviceClass , com.android.ims.ImsConnectionStateListener listener ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable () ; if ( listener == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } try { com.android.ims.ImsManager.ImsRegistrationListenerProxy p = createRegistrationListenerProxy ( serviceClass , listener ) ; mRegistrationListeners . add ( p ) ; mImsServiceProxy . addRegistrationListener ( ImsFeature.MMTEL , p ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
static org.eclipse.swt.dnd.DropTarget createDropTarget ( org.eclipse.swt.widgets.Control control , org.eclipse.swt.dnd.DropTargetListener dropListener ) { org.eclipse.swt.dnd.DropTarget dropTarget = new org.eclipse.swt.dnd.DropTarget ( control , ( ( ( org.eclipse.swt.dnd.DND.DROP_COPY ) | ( org.eclipse.swt.dnd.DND.DROP_MOVE ) ) | ( org.eclipse.swt.dnd.DND.DROP_DEFAULT ) ) ) ; dropTarget . setTransfer ( new org.eclipse.swt.dnd.Transfer [] { com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleXmlTransfer . getInstance () } ) ; dropTarget . addDropListener ( dropListener ) ; return dropTarget ; }
@ java.lang.Override public void checkBinaryResource ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ResourceContext context ) { if ( ( mPrefix ) != null ) { com.android.resources.ResourceFolderType folderType = context . getResourceFolderType () ; if ( ( folderType != null ) && ( folderType != ( com.android.resources.ResourceFolderType.VALUES ) ) ) { java.lang.String name = com.android.tools.lint.detector.api.LintUtils . getBaseName ( context.file . getName () ) ; if ( ! ( name . startsWith ( mPrefix ) ) ) { com.android.tools.lint.detector.api.Location location = com.android.tools.lint.detector.api.Location . create ( context.file ) ; context . report ( com.android.tools.lint.checks.ResourcePrefixDetector.ISSUE , location , getErrorMessage ( name ) , null ) ; } } } }
protected com.android.jack.test.toolchain.JackBasedToolchain createToolchain ( ) throws org.junit.internal.AssumptionViolatedException { java.util.List < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > excludeList = new java.util.ArrayList < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > ( NUMBER_CONSTANT ) ; excludeList . add ( com.android.jack.test.toolchain.JillBasedToolchain . class ) ; excludeList . add ( com.android.jack.test.toolchain.JackApiV01 . class ) ; com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = null ; jackToolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain . class , excludeList ) ; java.io.File [] bootclasspath = jackToolchain . getDefaultBootClasspath () ; jackToolchain . addToClasspath ( bootclasspath ) ; jackToolchain . setSourceLevel ( SourceLevel.JAVA_8 ) ; return jackToolchain ; }
protected boolean launchSuggestion ( int position , int actionKey , java.lang.String actionMsg ) { android.database.Cursor c = mSuggestionsAdapter . getCursor () ; if ( ( c != null ) && ( c . moveToPosition ( position ) ) ) { android.content.Intent intent = createIntentFromSuggestion ( c , actionKey , actionMsg ) ; launchIntent ( intent ) ; return true ; } return false ; }
@ android.test.suitebuilder.annotation.MediumTest public void testPullNonExternalCall ( ) throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( STRING_CONSTANT , mPhoneAccountA0 . getAccountHandle () , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX . getCall ( ids.mCallId ) . getState () ) ; mInCallServiceFixtureX.mInCallAdapter . pullExternalCall ( ids.mCallId ) ; java.lang.Thread . sleep ( com.android.server.telecom.tests.TEST_TIMEOUT ) ; org.mockito.Mockito . verify ( mConnectionServiceFixtureA . getTestDouble () , org.mockito.Mockito . never () ) . pullExternalCall ( org.mockito.Matchers . eq ( ids.mCallId ) , org.mockito.Matchers . any () ) ; }
@ java.lang.Override @ javax.annotation.Nonnull void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( isClosed () ) ; java.io.File path = getNativeFile ( file . getPath () ) ; if ( ( ! ( path . delete () ) ) || ( path . exists () ) ) { throw new com.android.sched.util.file.CannotDeleteFileException ( file . getLocation () ) ; } file . deleteFromCache () ; }
public void write ( boolean forceSync , com.android.server.wifi.WifiConfigStoreData storeData ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { byte [] sharedDataBytes = storeData . createSharedRawData () ; byte [] userDataBytes = storeData . createUserRawData () ; mSharedStore . storeRawDataToWrite ( sharedDataBytes ) ; mUserStore . storeRawDataToWrite ( userDataBytes ) ; if ( forceSync ) { writeBufferedData () ; } else { startBufferedWriteAlarm () ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp ( this . getClass () . getSimpleName () ) ; mSimulatedCommands . setRadioPower ( true , null ) ; mPhone.mCi = this . mSimulatedCommands ; mContextFixture . putStringArrayResource ( com.android.internal.R.array.dial_string_replace , new java.lang.String [] {} ) ; new com.android.internal.telephony.GsmCdmaCallTrackerTest.GsmCdmaCTHandlerThread ( TAG ) . start () ; waitUntilReady () ; logd ( STRING_CONSTANT ) ; com.android.internal.telephony.TelephonyTestUtils . waitForMs ( NUMBER_CONSTANT ) ; }
static com.android.dialer.searchfragment.cp2.SearchContactsCursor newInstance ( android.content.Context context , com.android.dialer.searchfragment.cp2.ContactFilterCursor contactFilterCursor ) { android.database.MatrixCursor headerCursor = new android.database.MatrixCursor ( HEADER_PROJECTION ) ; headerCursor . addRow ( new java.lang.String [] { context . getString ( R.string.all_contacts ) } ) ; return new com.android.dialer.searchfragment.cp2.SearchContactsCursor ( new android.database.Cursor [] { headerCursor , contactFilterCursor } ) ; }
private static int maybeThrowAfterSendto ( boolean isDatagram , libcore.io.ErrnoException errnoException ) throws java.net.SocketException { if ( isDatagram ) { if ( ( ( errnoException.errno ) == ( ECONNRESET ) ) || ( ( errnoException.errno ) == ( ECONNREFUSED ) ) ) { return NUMBER_CONSTANT ; } } else { if ( ( ( errnoException.errno ) == ( EAGAIN ) ) || ( ( errnoException.errno ) == ( EWOULDBLOCK ) ) ) { return NUMBER_CONSTANT ; } } throw errnoException . rethrowAsSocketException () ; }
private boolean isNetworkInConfigStoreData ( android.net.wifi.WifiConfiguration configuration ) { com.android.server.wifi.WifiConfigStoreData storeData = captureWriteStoreData () ; if ( storeData == null ) { return false ; } boolean foundNetworkInStoreData = false ; for ( android.net.wifi.WifiConfiguration retrievedConfig : storeData . getConfigurations () ) { if ( retrievedConfig . configKey () . equals ( configuration . configKey () ) ) { foundNetworkInStoreData = true ; } } return foundNetworkInStoreData ; }
@ java.lang.Override public void enter () { android.telecom.Log . i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , STRING_CONSTANT ) ; if ( mCallAudioManager . startRinging () ) { mAudioManager . requestAudioFocusForCall ( AudioManager.STREAM_RING , AudioManager.AUDIOFOCUS_GAIN_TRANSIENT ) ; if ( ( mMostRecentMode ) == ( android.media.AudioManager.MODE_IN_CALL ) ) { android.telecom.Log . i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; mAudioManager . setMode ( AudioManager.MODE_NORMAL ) ; } mAudioManager . setMode ( AudioManager.MODE_RINGTONE ) ; mCallAudioManager . setCallAudioRouteFocusState ( CallAudioRouteStateMachine.RINGING_FOCUS ) ; } else { android.telecom.Log . i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , STRING_CONSTANT ) ; } mCallAudioManager . stopCallWaiting () ; }
@ java.lang.Override java.util.List < com.android.internal.util.Predicate < android.test.suitebuilder.TestMethod > > getBuilderRequirements () { java.util.List < com.android.internal.util.Predicate < android.test.suitebuilder.TestMethod > > builderRequirements = super . getBuilderRequirements () ; com.android.internal.util.Predicate < android.test.suitebuilder.TestMethod > brokenTestPredicate = com.android.internal.util.Predicates . not ( new android.test.suitebuilder.annotation.HasAnnotation ( dalvik.annotation.BrokenTest . class ) ) ; builderRequirements . add ( brokenTestPredicate ) ; builderRequirements . add ( getFeaturePredicate () ) ; if ( ! ( mSingleTest ) ) { com.android.internal.util.Predicate < android.test.suitebuilder.TestMethod > sideEffectPredicate = com.android.internal.util.Predicates . not ( new android.test.suitebuilder.annotation.HasAnnotation ( dalvik.annotation.SideEffect . class ) ) ; builderRequirements . add ( sideEffectPredicate ) ; } return builderRequirements ; }
@ java.lang.Override public void visitDocument ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Document document ) { org.w3c.dom.Element root = document . getDocumentElement () ; if ( ( root != null ) && ( root . getTagName () . equals ( com.android.SdkConstants.TAG_RESOURCES ) ) ) { context . report ( com.android.tools.lint.checks.WrongLocationDetector.ISSUE , root , context . getLocation ( root ) , STRING_CONSTANT , null ) ; } }
public int stopUsingNetworkFeature ( int networkType , java.lang.String feature ) { android.net.NetworkCapabilities netCap = networkCapabilitiesForFeature ( networkType , feature ) ; if ( netCap == null ) { android.util.Log . d ( android.net.ConnectivityManager.TAG , ( ( ( STRING_CONSTANT + networkType ) + STRING_CONSTANT ) + feature ) ) ; return - NUMBER_CONSTANT ; } android.net.ConnectivityManager.NetworkCallback networkCallback = removeRequestForFeature ( netCap ) ; if ( networkCallback != null ) { android.util.Log . d ( android.net.ConnectivityManager.TAG , ( ( ( STRING_CONSTANT + networkType ) + STRING_CONSTANT ) + feature ) ) ; unregisterNetworkCallback ( networkCallback ) ; } return NUMBER_CONSTANT ; }
@ org.junit.Test public void recommendation_noScans_noCurrentConfig_returnsEmpty ( ) throws java.lang.Exception { android.net.wifi.ScanResult [] scanResults = new android.net.wifi.ScanResult [ NUMBER_CONSTANT ] ; android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder () . setScanResults ( scanResults ) . setNetworkCapabilities ( new android.net.NetworkCapabilities () . removeCapability ( NetworkCapabilities.NET_CAPABILITY_TRUSTED ) ) . build () ; android.net.RecommendationResult result = verifyAndCaptureResult ( mProvider , request ) ; org.junit.Assert . assertNull ( result . getWifiConfiguration () ) ; }
private android.net.wifi.WifiScanner.ScanSettings cloneScanSettings ( android.net.wifi.WifiScanner.ScanSettings originalSettings ) { android.net.wifi.WifiScanner.ScanSettings settings = new android.net.wifi.WifiScanner.ScanSettings () ; settings.band = originalSettings.band ; settings.channels = originalSettings.channels ; settings.hiddenNetworkIds = originalSettings.hiddenNetworkIds ; settings.periodInMs = originalSettings.periodInMs ; settings.reportEvents = originalSettings.reportEvents ; settings.numBssidsPerScan = originalSettings.numBssidsPerScan ; settings.maxScansToCache = originalSettings.maxScansToCache ; settings.maxPeriodInMs = originalSettings.maxPeriodInMs ; settings.stepCount = originalSettings.stepCount ; settings.isPnoScan = originalSettings.isPnoScan ; return settings ; }
@ java.lang.Override public boolean processMessage ( android.os.Message message ) { switch ( message.what ) { case com.android.bluetooth.pbap.PbapStateMachine.REQUEST_PERMISSION : mService . checkOrGetPhonebookPermission ( this ) ; case com.android.bluetooth.pbap.PbapStateMachine.AUTHORIZED : transitionTo ( mConnected ) ; break; case com.android.bluetooth.pbap.PbapStateMachine.REJECTED : rejectConnection () ; transitionTo ( mFinished ) ; break; case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : mServiceHandler . removeMessages ( BluetoothPbapService.USER_TIMEOUT , this ) ; mServiceHandler . obtainMessage ( BluetoothPbapService.USER_TIMEOUT , this ) . sendToTarget () ; transitionTo ( mFinished ) ; break; } return HANDLED ; }
private void handleReleasedFocus ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionServiceFocus ) { android.telecom.Log . d ( this , STRING_CONSTANT , connectionServiceFocus ) ; if ( java.util.Objects . equals ( mCurrentFocus , connectionServiceFocus ) ) { mEventHandler . removeMessages ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_RELEASE_FOCUS_TIMEOUT , mCurrentFocusRequest ) ; com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus newCSF = null ; if ( ( mCurrentFocusRequest ) != null ) { newCSF = mCurrentFocusRequest.call . getConnectionServiceWrapper () ; } updateConnectionServiceFocus ( newCSF ) ; updateCurrentFocusCall () ; if ( ( mCurrentFocusRequest ) != null ) { onRequestFocusDone ( mCurrentFocusRequest ) ; mCurrentFocusRequest = null ; } } }
public static void writeUint24 ( int i , byte [] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > NUMBER_CONSTANT ) ) ; buf [ ( offset + NUMBER_CONSTANT ) ] = ( ( byte ) ( i > > NUMBER_CONSTANT ) ) ; buf [ ( offset + NUMBER_CONSTANT ) ] = ( ( byte ) ( i ) ) ; }
private void tryConnect ( java.net.InetSocketAddress dest , int timeout ) throws java.io.IOException { if ( isConnected () ) { disconnect () ; } server = doConnect ( dest , timeout ) ; try { out = new java.io.PrintStream ( new java.io.BufferedOutputStream ( server . getOutputStream () ) , true , sun.net.ftp.impl.FtpClient.encoding ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.InternalError ( ( ( sun.net.ftp.impl.FtpClient.encoding ) + STRING_CONSTANT ) ) ; } in = new java.io.BufferedInputStream ( server . getInputStream () ) ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile ) { if ( new vogar.ClassAnalyzer ( klass ) . hasMethod ( true , void . class , STRING_CONSTANT , java.lang.String [] . class ) ) { return new vogar.target.MainRunner ( monitor , klass ) ; } else { return null ; } }
@ org.junit.Test public void testEvaluateNetworks_potentialConnectableNetworksIsNull () { org.mockito.Mockito . when ( mWifiConfigManager . wasEphemeralNetworkDeleted ( org.mockito.Matchers . anyString () ) ) . thenReturn ( false ) ; org.mockito.Mockito . when ( mNetworkScoreManager . requestRecommendation ( org.mockito.Mockito . any ( android.net.RecommendationRequest . class ) ) ) . thenReturn ( android.net.RecommendationResult . createDoNotConnectRecommendation () ) ; mRecommendedNetworkEvaluator . evaluateNetworks ( com.google.android.collect.Lists . newArrayList ( mTrustedScanDetail , mEphemeralScanDetail , mUntrustedScanDetail ) , null , null , false , true , null ) ; }
public void testFindBoundaryCases6 () { java.lang.String [] res = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ; java.util.regex.Pattern pat = java.util.regex.Pattern . compile ( STRING_CONSTANT ) ; java.util.regex.Matcher mat = pat . matcher ( STRING_CONSTANT ) ; int k = NUMBER_CONSTANT ; for ( ; mat . find () ; k ++ ) { assertEquals ( res [ k ] , mat . group () ) ; } }
public void test_ConstructorI () { java.util.ArrayList al = new java.util.ArrayList ( NUMBER_CONSTANT ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , al . size () ) ; try { new java.util.ArrayList ( ( - NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} }
@ org.junit.Test public void test002f ( ) throws java.lang.Exception { java.io.File jackOutput ; jackOutput = runTest002 ( true , STRING_CONSTANT ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( jackOutput ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH , STRING_CONSTANT ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH , STRING_CONSTANT ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH , STRING_CONSTANT ) ; }
@ android.test.suitebuilder.annotation.LargeTest public void testAllFilesInSysAreNotWritable ( ) throws java.lang.Exception { java.util.Set < java.io.File > writable = android.permission.cts.FileSystemPermissionTest . getAllWritableFilesInDirAndSubDir ( new java.io.File ( STRING_CONSTANT ) ) ; java.util.Set < java.io.File > ignorables = android.permission.cts.FileSystemPermissionTest . getIgnorablesFromPaths ( android.permission.cts.FileSystemPermissionTest.SYS_EXCEPTIONS ) ; writable . removeAll ( ignorables ) ; assertTrue ( ( STRING_CONSTANT + ( writable . toString () ) ) , writable . isEmpty () ) ; }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . d2i_SSL_SESSION ( null ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} assertEquals ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , org.apache.harmony.xnet.provider.jsse.NativeCrypto . d2i_SSL_SESSION ( new byte [ NUMBER_CONSTANT ] ) ) ; assertEquals ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , org.apache.harmony.xnet.provider.jsse.NativeCrypto . d2i_SSL_SESSION ( new byte [ NUMBER_CONSTANT ] ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCryptoTest . assertNoErrors () ; }
public final void verify ( java.security.PublicKey key , java.lang.String sigProvider ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , java.security.SignatureException , java.security.cert.CertificateException { java.lang.String sigName = org.bouncycastle.jcajce.provider.asymmetric.x509.X509SignatureUtil . getSignatureName ( c . getSignatureAlgorithm () ) ; java.security.Signature signature = java.security.Signature . getInstance ( sigName , sigProvider ) ; checkSignature ( key , signature ) ; }
public static com.android.incallui.incall.protocol.PrimaryCallState createEmptyPrimaryCallStateWithState ( int state , java.lang.String customLabel ) { return new com.android.incallui.incall.protocol.PrimaryCallState ( state , false , com.android.incallui.videotech.utils.SessionModificationState.NO_REQUEST , new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.UNKNOWN ) , null , null , null , null , null , false , false , false , false , false , false , false , NUMBER_CONSTANT , false , false , false , true , com.android.incallui.incall.protocol.PrimaryCallState.ButtonState.NOT_SUPPORT , false , customLabel ) ; }
public int createPbapPseRecord ( java.lang.String serviceName , int rfcommChannel , int l2capPsm , int version , int repositories , int features ) { if ( ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) == false ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + STRING_CONSTANT ) ) ; } return sdpCreatePbapPseRecordNative ( serviceName , rfcommChannel , l2capPsm , version , repositories , features ) ; }
public static boolean checkFolderForPackaging ( java.lang.String folderName ) { return ( ( ( ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) && ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) ) && ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) ) && ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) ) && ( ! ( folderName . startsWith ( STRING_CONSTANT ) ) ) ; }
void checkTokenizer ( java.lang.String [] expected , java.lang.String toParse ) { java.lang.String [] actual = org.chromium.base.CommandLine . tokenizeQuotedAruments ( toParse . toCharArray () ) ; org.junit.Assert . assertEquals ( expected.length , actual.length ) ; for ( int i = NUMBER_CONSTANT ; i < ( expected.length ) ; ++ i ) { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + i ) , expected [ i ] , actual [ i ] ) ; } }
private static com.ibm.icu.text.RelativeDateTimeFormatter getFormatter ( java.lang.String localeName , libcore.icu.RelativeDateTimeFormatter.Style style , com.ibm.icu.text.DisplayContext capitalizationContext ) { java.lang.String key = ( ( ( localeName + STRING_CONSTANT ) + style ) + STRING_CONSTANT ) + capitalizationContext ; libcore.icu.RelativeDateTimeFormatter formatter = libcore.icu.RelativeDateTimeFormatter.CACHED_FORMATTERS . get ( key ) ; if ( formatter == null ) { formatter = libcore.icu.com.ibm.icu.text.RelativeDateTimeFormatter . getInstance ( new com.ibm.icu.util.ULocale ( localeName ) , null , style , capitalizationContext ) ; libcore.icu.RelativeDateTimeFormatter.CACHED_FORMATTERS . put ( key , formatter ) ; } return formatter ; }
private boolean isGoodVersion ( int magic , int minorVersion , int majorVersion ) { if ( ( magic == ( com.android.dx.cf.direct.DirectClassFile.CLASS_FILE_MAGIC ) ) && ( minorVersion >= NUMBER_CONSTANT ) ) { if ( majorVersion == ( com.android.dx.cf.direct.DirectClassFile.CLASS_FILE_MAX_MAJOR_VERSION ) ) { if ( minorVersion <= ( com.android.dx.cf.direct.DirectClassFile.CLASS_FILE_MAX_MINOR_VERSION ) ) { return true ; } } else if ( ( majorVersion < ( com.android.dx.cf.direct.DirectClassFile.CLASS_FILE_MAX_MAJOR_VERSION ) ) && ( majorVersion >= ( com.android.dx.cf.direct.DirectClassFile.CLASS_FILE_MIN_MAJOR_VERSION ) ) ) { return true ; } } return false ; }
private java.nio.channels.SocketChannel openAdbConnection () { com.android.ddmlib.Log . d ( STRING_CONSTANT , STRING_CONSTANT ) ; java.nio.channels.SocketChannel adbChannel = null ; try { adbChannel = java.nio.channels.SocketChannel . open ( com.android.ddmlib.AndroidDebugBridge . getSocketAddress () ) ; adbChannel . socket () . setTcpNoDelay ( true ) ; } catch ( java.io.IOException e ) {} return adbChannel ; }
public void onCreate () { com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog dialog = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog ( mParent . getShell () , mEditedFile . getName () , com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () . getTarget ( mEditedFile . getProject () ) , mConfigComposite . getCurrentConfig () ) ; if ( ( dialog . open () ) == ( org.eclipse.jface.dialogs.Dialog.OK ) ) { final com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = new com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration () ; dialog . getConfiguration ( config ) ; createAlternateLayout ( config ) ; } }
public void stopStreaming ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } try { mService . stopStreaming ( mAppName , mSubscriptionId , mServiceInfo . getServiceId () ) ; } catch ( android.os.DeadObjectException e ) { android.util.Log . w ( android.telephony.mbms.StreamingService.LOG_TAG , STRING_CONSTANT ) ; mService = null ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_SERVICE_LOST ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.telephony.mbms.StreamingService.LOG_TAG , ( STRING_CONSTANT + e ) ) ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_UNKNOWN_REMOTE_EXCEPTION ) ; } }
public void test_addSubjectAlternativeNameLintLjava_lang_String () { int [] types = new int [] { sun.security.x509.GeneralNameInterface.NAME_ANY , sun.security.x509.GeneralNameInterface.NAME_RFC822 , sun.security.x509.GeneralNameInterface.NAME_DNS , sun.security.x509.GeneralNameInterface.NAME_X400 , sun.security.x509.GeneralNameInterface.NAME_DIRECTORY , sun.security.x509.GeneralNameInterface.NAME_EDI , sun.security.x509.GeneralNameInterface.NAME_URI , sun.security.x509.GeneralNameInterface.NAME_IP , sun.security.x509.GeneralNameInterface.NAME_OID } ; for ( int i = NUMBER_CONSTANT ; i < ( types.length ) ; i ++ ) { try { new java.security.cert.X509CertSelector () . addSubjectAlternativeName ( types [ i ] , STRING_CONSTANT ) ; fail ( ( STRING_CONSTANT + ( types [ i ] ) ) ) ; } catch ( java.io.IOException expected ) {} } }
@ com.android.annotations.Nullable @ java.lang.Override public java.lang.Package getPackage () { java.lang.Package pkg = super . getPackage () ; if ( pkg == null ) { try { pkg = com.android.sdklib.internal.repository.packages.PlatformToolPackage . create ( null , getSourceProperties () , NUMBER_CONSTANT , null , STRING_CONSTANT , null , com.android.sdklib.internal.repository.archives.Archive.Os . getCurrentOs () , com.android.sdklib.internal.repository.archives.Archive.Arch . getCurrentArch () , getLocalDir () . getPath () ) ; setPackage ( pkg ) ; } catch ( java.lang.Exception e ) { appendLoadError ( STRING_CONSTANT , e . toString () ) ; } } return pkg ; }
public static org.eclipse.jdt.core.IJavaProject [] getJavaProjects ( org.eclipse.core.resources.IProject [] projects ) throws org.eclipse.core.runtime.CoreException { java.util.ArrayList < org.eclipse.jdt.core.IJavaProject > list = new java.util.ArrayList < org.eclipse.jdt.core.IJavaProject > () ; for ( org.eclipse.core.resources.IProject p : projects ) { if ( ( p . isOpen () ) && ( p . hasNature ( org.eclipse.jdt.core.JavaCore.NATURE_ID ) ) ) { list . add ( org.eclipse.jdt.core.JavaCore . create ( p ) ) ; } } return list . toArray ( new org.eclipse.jdt.core.IJavaProject [ list . size () ] ) ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; mFocusManagerUT = new com.android.server.telecom.ConnectionServiceFocusManager ( mockCallsManagerRequester , android.os.Looper . getMainLooper () ) ; mNewCall = com.android.server.telecom.tests.ConnectionServiceFocusManagerTest . createFakeCall ( mNewConnectionService , CallState.NEW ) ; mActiveCall = com.android.server.telecom.tests.ConnectionServiceFocusManagerTest . createFakeCall ( mActiveConnectionService , CallState.ACTIVE ) ; org.mockito.ArgumentCaptor < com.android.server.telecom.CallsManager.CallsManagerListener > captor = org.mockito.ArgumentCaptor . forClass ( CallsManager.CallsManagerListener . class ) ; org.mockito.Mockito . verify ( mockCallsManagerRequester ) . setCallsManagerListener ( captor . capture () ) ; mCallsManagerListener = captor . getValue () ; }
public java.util.ArrayList < android.content.SyncStorageEngine.AuthorityInfo > getAuthorities () { synchronized ( mAuthorities ) { final int N = mAuthorities . size () ; java.util.ArrayList < android.content.SyncStorageEngine.AuthorityInfo > infos = new java.util.ArrayList < android.content.SyncStorageEngine.AuthorityInfo > ( N ) ; for ( int i = NUMBER_CONSTANT ; i < N ; i ++ ) { infos . add ( mAuthorities . valueAt ( i ) ) ; } return infos ; } }
public synchronized boolean enable ( boolean quietMode ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , STRING_CONSTANT ) ; if ( mUserManager . hasUserRestriction ( UserManager.DISALLOW_BLUETOOTH , UserHandle.SYSTEM ) ) { debugLog ( STRING_CONSTANT ) ; return false ; } debugLog ( ( STRING_CONSTANT + quietMode ) ) ; mQuietmode = quietMode ; android.os.Message m = mAdapterStateMachine . obtainMessage ( AdapterState.BLE_TURN_ON ) ; mAdapterStateMachine . sendMessage ( m ) ; return true ; }
private int writeNewClass ( java.lang.Class < > object , boolean unshared ) throws java.io.IOException { output . writeByte ( java.io.ObjectStreamConstants.TC_CLASS ) ; java.io.ObjectStreamClass clDesc = java.io.ObjectStreamClass . lookupStreamClass ( object ) ; if ( clDesc . isEnum () ) { writeEnumDesc ( object , clDesc , unshared ) ; } else { writeClassDesc ( clDesc , unshared ) ; } int handle = nextHandle () ; if ( ! unshared ) { objectsWritten . put ( object , handle ) ; } return handle ; }
public int indexOf ( com.android.jack.dx.rop.type.Prototype prototype ) { if ( prototype == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } throwIfNotPrepared () ; com.android.jack.dx.dex.file.ProtoIdItem item = protoIds . get ( prototype ) ; if ( item == null ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return item . getIndex () ; }
public void test_getI () { assertTrue ( STRING_CONSTANT , ( ( alist . get ( NUMBER_CONSTANT ) ) == ( objArray [ NUMBER_CONSTANT ] ) ) ) ; try { alist . get ( NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IndexOutOfBoundsException e ) {} }
public void maybeShowErrorDialogOnDisconnect ( com.android.services.telephony.common.Call.DisconnectCause cause ) { com.android.incallui.Log . d ( this , STRING_CONSTANT ) ; if ( ! ( isFinishing () ) ) { final int resId = getResIdForDisconnectCause ( cause ) ; if ( resId != ( com.android.incallui.InCallActivity.INVALID_RES_ID ) ) { showErrorDialog ( resId ) ; } } }
public static java.util.UUID nameUUIDFromBytes ( byte [] name ) { java.security.MessageDigest md ; try { md = java.security.MessageDigest . getInstance ( STRING_CONSTANT ) ; } catch ( java.security.NoSuchAlgorithmException nsae ) { throw new java.lang.InternalError ( STRING_CONSTANT ) ; } byte [] md5Bytes = md . digest ( name ) ; md5Bytes [ NUMBER_CONSTANT ] &= NUMBER_CONSTANT ; md5Bytes [ NUMBER_CONSTANT ] |= NUMBER_CONSTANT ; md5Bytes [ NUMBER_CONSTANT ] &= NUMBER_CONSTANT ; md5Bytes [ NUMBER_CONSTANT ] |= NUMBER_CONSTANT ; return new java.util.UUID ( md5Bytes ) ; }
private static int getSignatureAlgorithmContentDigestAlgorithm ( int sigAlgorithm ) { switch ( sigAlgorithm ) { case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PSS_WITH_SHA256 : case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256 : case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA256 : case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA256 : return com.android.signapk.ApkSignerV2.CONTENT_DIGEST_CHUNKED_SHA256 ; case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PSS_WITH_SHA512 : case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512 : case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA512 : case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA512 : return com.android.signapk.ApkSignerV2.CONTENT_DIGEST_CHUNKED_SHA512 ; default: throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + ( java.lang.Long . toHexString ( ( sigAlgorithm & - NUMBER_CONSTANT ) ) ) ) ) ; } }
private void deleteFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath vpath ) throws com.android.jack.incremental.IncrementalException { assert ( incrementalInputLibrary ) != null ; try { incrementalInputLibrary . getFile ( fileType , vpath ) ; try { incrementalInputLibrary . delete ( fileType , vpath ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } } catch ( com.android.jack.library.FileTypeDoesNotExistException e ) {} catch ( com.android.sched.util.file.CannotDeleteFileException e ) { throw new com.android.jack.incremental.IncrementalException ( e ) ; } }
public void test_isIdentifierIgnorableC () { assertTrue ( STRING_CONSTANT , java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , ( ! ( java.lang.Character . isIdentifierIgnorable ( CHAR_CONS ) ) ) ) ; }
@ org.junit.Before public void setUp () { org.mockito.MockitoAnnotations . initMocks ( this ) ; android.content.Context context = mock ( android.content.Context . class ) ; when ( context . getSystemService ( Context.ALARM_SERVICE ) ) . thenReturn ( mAlarmManager ) ; doNothing () . when ( mAlarmManager ) . setExact ( anyInt () , anyLong () , any ( java.lang.String . class ) , mListenerCaptor . capture () , any ( android.os.Handler . class ) ) ; mMessage = new com.android.internal.util.WakeupMessage ( context , mHandler , com.android.internal.util.WakeupMessageTest.TEST_CMD_NAME , com.android.internal.util.WakeupMessageTest.TEST_CMD , com.android.internal.util.WakeupMessageTest.TEST_ARG1 , com.android.internal.util.WakeupMessageTest.TEST_ARG2 , com.android.internal.util.WakeupMessageTest.TEST_OBJ ) ; }
public boolean setPasskey ( android.bluetooth.BluetoothDevice device , boolean accept , int len , byte [] passkey ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) return false ; return service . setPasskey ( device , accept , len , passkey ) ; }
@ com.google.common.annotations.Beta static < K , V > java.util.Map < K , V > asMap ( java.util.Set < K > set , com.google.common.base.Function < ? super K , V > function ) { if ( set instanceof java.util.SortedSet ) { return com.google.common.collect.Maps . asMap ( ( ( java.util.SortedSet < K > ) ( set ) ) , function ) ; } else { return new com.google.common.collect.Maps.AsMapView < K , V > ( set , function ) ; } }
@ java.lang.Override protected java.lang.String getCipherName ( int keySize , org.conscrypt.OpenSSLCipher.Mode mode ) { final java.lang.String baseCipherName ; if ( keySize == NUMBER_CONSTANT ) { baseCipherName = STRING_CONSTANT ; } else { baseCipherName = STRING_CONSTANT ; } if ( mode == ( org.conscrypt.OpenSSLCipher.Mode.ECB ) ) { return baseCipherName ; } else { return ( baseCipherName + STRING_CONSTANT ) + ( mode . toString () . toLowerCase ( java.util.Locale.US ) ) ; } }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassLiteral literal ) { com.android.jack.dx.rop.cst.Constant cst = com.android.jack.backend.dex.rop.RopHelper . getCstType ( literal . getRefType () ) ; com.android.jack.ir.ast.JType type = literal . getType () ; com.android.jack.dx.rop.code.Rop constOp = com.android.jack.dx.rop.code.Rops . opConst ( com.android.jack.backend.dex.rop.RopHelper . convertTypeToDx ( type ) ) ; com.android.jack.dx.rop.code.SourcePosition literalSrcPos = com.android.jack.backend.dex.rop.RopHelper . getSourcePosition ( literal ) ; com.android.jack.dx.rop.code.Insn constInst = new com.android.jack.dx.rop.code.ThrowingCstInsn ( constOp , literalSrcPos , com.android.jack.dx.rop.code.RegisterSpecList.EMPTY , getCatchTypes () , cst ) ; addInstruction ( constInst ) ; addMoveResultPseudoAsExtraInstruction ( destReg , literalSrcPos ) ; return false ; }
@ javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded ) throws com.android.jack.jayce.JayceFormatException , com.android.jack.jayce.JayceVersionException , java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode . get () ; if ( ( methodNode == null ) || ( ( methodNode . getLevel () ) != ( NodeLevel.FULL ) ) ) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader . getNNode ( NodeLevel.FULL , loaded . getEnclosingType () . getSession () . getUserLogger () ) ; methodNode = declaredTypeNode . getMethodNode ( loaded ) ; } return methodNode ; }
private void preRenderingTargetChangeCleanUp ( com.android.sdklib.IAndroidTarget oldTarget ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () ; if ( currentSdk != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = currentSdk . getTargetData ( oldTarget ) ; if ( data != null ) { com.android.ide.common.rendering.LayoutLibrary layoutLib = data . getLayoutLibrary () ; layoutLib . clearCaches ( mEditedFile . getProject () ) ; } } if ( ( ( mProjectCallback ) != null ) && ( mProjectCallback . isUsed () ) ) { mProjectCallback = null ; } }
private void copyResourceToZip ( java.io.InputStream is , java.util.zip.ZipOutputStream zipOutputStream , java.lang.String name ) { try { java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry ( name ) ; zipOutputStream . putNextEntry ( zipEntry ) ; copyResource ( is , zipOutputStream , name ) ; } catch ( java.lang.Exception e ) { throw new com.android.jill.JillException ( ( STRING_CONSTANT + name ) , e ) ; } }
public static synchronized int insertProviderAt ( java.security.Provider provider , int position ) { java.lang.String providerName = provider . getName () ; java.security.Security . check ( ( STRING_CONSTANT + providerName ) ) ; sun.security.jca.ProviderList list = sun.security.jca.Providers . getFullProviderList () ; sun.security.jca.ProviderList newList = sun.security.jca.ProviderList . insertAt ( list , provider , ( position - NUMBER_CONSTANT ) ) ; if ( list == newList ) { return - NUMBER_CONSTANT ; } java.security.Security . increaseVersion () ; sun.security.jca.Providers . setProviderList ( newList ) ; return ( newList . getIndex ( providerName ) ) + NUMBER_CONSTANT ; }
public static org.conscrypt.OpenSSLX509Certificate fromX509PemInputStream ( java.io.InputStream is ) throws org.conscrypt.OpenSSLX509CertificateFactory.ParsingException { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) final org.conscrypt.OpenSSLBIOInputStream bis = new org.conscrypt.OpenSSLBIOInputStream ( is ) ; try { final long certCtx = org.conscrypt.NativeCrypto . PEM_read_bio_X509 ( bis . getBioContext () ) ; if ( certCtx == NUMBER_CONSTANT ) { return null ; } return new org.conscrypt.OpenSSLX509Certificate ( certCtx ) ; } catch ( java.lang.Exception e ) { throw new org.conscrypt.OpenSSLX509CertificateFactory.ParsingException ( e ) ; } finally { bis . release () ; } }
void putDecString ( java.lang.String original ) { java.lang.String s = checkString ( original , NUMBER_CONSTANT ) ; this . makeValid () ; int usedLen = java.math.NativeBN . BN_dec2bn ( this . bignum , s ) ; java.math.BigInt . Check ( ( usedLen > NUMBER_CONSTANT ) ) ; if ( usedLen < ( s . length () ) ) { throw invalidBigInteger ( original ) ; } }
public android.telephony.CellLocation getCellLocation () { try { android.os.Bundle bundle = getITelephony () . getCellLocation () ; android.telephony.CellLocation cl = android.telephony.CellLocation . newFromBundle ( bundle ) ; if ( cl . isEmpty () ) return null ; return cl ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
@ org.junit.Test public void testRemoveSingleOpenNetwork () { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil . createOpenNetwork () ; java.util.List < android.net.wifi.WifiConfiguration > networks = new java.util.ArrayList <> () ; networks . add ( openNetwork ) ; verifyAddNetworkToWifiConfigManager ( openNetwork ) ; verifyRemoveNetworkFromWifiConfigManager ( openNetwork ) ; assertTrue ( mWifiConfigManager . getConfiguredNetworks () . isEmpty () ) ; }
public void dismissKeyguardLw () { if ( ( ( mKeyguardDelegate ) != null ) && ( mKeyguardDelegate . isShowing () ) ) { mHandler . post ( new java.lang.Runnable () { public void run () { if ( mKeyguardDelegate . isDismissable () ) { mKeyguardDelegate . keyguardDone ( false , true ) ; } else { mKeyguardDelegate . dismiss () ; } } } ) ; } }
public void deviceAdded ( com.android.server.midi.MidiService.Device device ) { if ( ! ( device . isUidAllowed ( mUid ) ) ) return; android.media.midi.MidiDeviceInfo deviceInfo = device . getDeviceInfo () ; try { for ( android.media.midi.IMidiDeviceListener listener : mListeners ) { listener . onDeviceAdded ( deviceInfo ) ; } } catch ( android.os.RemoteException e ) { android.util.Log . e ( com.android.server.midi.MidiService.TAG , STRING_CONSTANT , e ) ; } }
private final boolean checkUriPermissionLocked ( android.net.Uri uri , int uid , int modeFlags ) { if ( ( uid == NUMBER_CONSTANT ) || ( ! ( java.lang.Process . supportsProcesses () ) ) ) { return true ; } java.util.HashMap < android.net.Uri , com.android.server.am.UriPermission > perms = mGrantedUriPermissions . get ( uid ) ; if ( perms == null ) return false ; com.android.server.am.UriPermission perm = perms . get ( uri ) ; if ( perm == null ) return false ; return ( modeFlags & ( perm.modeFlags ) ) == modeFlags ; }
@ org.junit.Test public void testRenameCoreLibrary_prefixedLoader ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , null , null , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; }
private void responseString ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String str ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { java.lang.String ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = str ; com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
private android.telecom.ParcelableConnection parcelable ( com.android.server.telecom.tests.ConnectionServiceFixture.ConnectionInfo c ) { return new android.telecom.ParcelableConnection ( c.request . getAccountHandle () , c.state , c.capabilities , c.properties , c.supportedAudioRoutes , c.request . getAddress () , c.addressPresentation , c.callerDisplayName , c.callerDisplayNamePresentation , c.videoProvider , c.videoState , false , false , NUMBER_CONSTANT , c.statusHints , c.disconnectCause , c.conferenceableConnectionIds , c.extras ) ; }
static void setDevice ( java.nio.channels.SocketChannel adbChan , com.android.ddmlib.IDevice device ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.TimeoutException , java.io.IOException { if ( device != null ) { java.lang.String msg = STRING_CONSTANT + ( device . getSerialNumber () ) ; byte [] device_query = com.android.ddmlib.AdbHelper . formAdbRequest ( msg ) ; com.android.ddmlib.AdbHelper . write ( adbChan , device_query ) ; com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper . readAdbResponse ( adbChan , false ) ; if ( ( resp.okay ) == false ) { throw new com.android.ddmlib.AdbCommandRejectedException ( resp.message , true ) ; } } }
private void runInBatchMode ( final java.lang.String javaPkgName , android.annotation.cts.Profile profile ) throws com.android.cts.DeviceDisconnectedException { mTimeOutTimer = new com.android.cts.HostTimer ( new com.android.cts.TestPackage.TimeOutTask ( this ) , HostConfig.Ints.batchStartTimeoutMs . value () ) ; mTimeOutTimer . start () ; mProgressObserver = new com.android.cts.ProgressObserver () ; if ( ( javaPkgName != null ) && ( ( javaPkgName . length () ) > NUMBER_CONSTANT ) ) { runInBatchModeImpl ( javaPkgName , profile ) ; } else { for ( java.lang.String pkgName : getPackageNames () ) { runInBatchModeImpl ( pkgName , profile ) ; } } }
private void responseSetupDataCall ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SetupDataCallResult setupDataCallResult ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { android.telephony.data.DataCallResponse ret = com.android.internal.telephony.RIL . convertDataCallResult ( setupDataCallResult ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
public static android.net.wifi.WifiConfiguration generateWifiConfig ( int networkId , int uid , java.lang.String ssid , boolean shared , boolean enabled , java.lang.String fqdn , java.lang.String providerFriendlyName ) { final android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration () ; config.SSID = ssid ; config.networkId = networkId ; config.creatorUid = uid ; config.shared = shared ; config.status = ( enabled ) ? WifiConfiguration.Status.ENABLED : WifiConfiguration.Status.DISABLED ; if ( fqdn != null ) { config.FQDN = fqdn ; config.providerFriendlyName = providerFriendlyName ; config.enterpriseConfig . setEapMethod ( WifiEnterpriseConfig.Eap.SIM ) ; } return config ; }
private ECPoint.F2m multiplyWTnaf ( org.bouncycastle.math.ec.ECPoint.F2m p , org.bouncycastle.math.ec.ZTauElement lambda , org.bouncycastle.math.ec.PreCompInfo preCompInfo , byte a , byte mu ) { org.bouncycastle.math.ec.ZTauElement [] alpha ; if ( a == NUMBER_CONSTANT ) { alpha = Tnaf.alpha0 ; } else { alpha = Tnaf.alpha1 ; } java.math.BigInteger tw = org.bouncycastle.math.ec.Tnaf . getTw ( mu , Tnaf.WIDTH ) ; byte [] u = org.bouncycastle.math.ec.Tnaf . tauAdicWNaf ( mu , lambda , Tnaf.WIDTH , java.math.BigInteger . valueOf ( Tnaf.POW_2_WIDTH ) , tw , alpha ) ; return org.bouncycastle.math.ec.WTauNafMultiplier . multiplyFromWTnaf ( p , u , preCompInfo ) ; }
@ java.lang.Override public int [] blend ( int [] src , int [] dst ) { return new int [] { src [ NUMBER_CONSTANT ] , dst [ NUMBER_CONSTANT ] , dst [ NUMBER_CONSTANT ] , java.lang.Math . min ( NUMBER_CONSTANT , ( ( src [ NUMBER_CONSTANT ] ) + ( dst [ NUMBER_CONSTANT ] ) ) ) } ; }
static int oneArrayAbs ( int [] a , int lo ) { int x = NUMBER_CONSTANT ; for ( int i = java.lang.Math . abs ( lo ) ; i < ( a.length ) ; i ++ ) { x += a [ i ] ; } return x ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . getEnclosingType () . isExternal () ) || ( method . isNative () ) ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } solve ( method ) ; checker . check ( method ) ; }
@ android.test.suitebuilder.annotation.MediumTest public void testAndroidStrings () { assertEquals ( mAppTextView1 . getText () , STRING_CONSTANT ) ; assertEquals ( mLib1TextView1 . getText () , STRING_CONSTANT ) ; assertEquals ( mLib2TextView1 . getText () , STRING_CONSTANT ) ; assertEquals ( mLib2bTextView1 . getText () , STRING_CONSTANT ) ; assertEquals ( mLibappTextView1 . getText () , STRING_CONSTANT ) ; }
@ java.lang.Override protected void onRoamingOff () { if ( DBG ) log ( STRING_CONSTANT ) ; if ( ( mUserDataEnabled ) == false ) return; if ( ( getDataOnRoamingEnabled () ) == false ) { notifyOffApnsOfAvailability ( Phone.REASON_ROAMING_OFF ) ; setupDataOnConnectableApns ( Phone.REASON_ROAMING_OFF ) ; } else { notifyDataConnection ( Phone.REASON_ROAMING_OFF ) ; } }
public static org.conscrypt.OpenSSLKey getInstance ( java.security.interfaces.ECPublicKey ecPublicKey ) throws java.security.InvalidKeyException { try { org.conscrypt.OpenSSLECGroupContext group = org.conscrypt.OpenSSLECGroupContext . getInstance ( ecPublicKey . getParams () ) ; org.conscrypt.OpenSSLECPointContext pubKey = org.conscrypt.OpenSSLECPointContext . getInstance ( org.conscrypt.NativeCrypto . get_EC_GROUP_type ( group . getNativeRef () ) , group , ecPublicKey . getW () ) ; return new org.conscrypt.OpenSSLKey ( org.conscrypt.NativeCrypto . EVP_PKEY_new_EC_KEY ( group . getNativeRef () , pubKey . getNativeRef () , null ) ) ; } catch ( java.lang.Exception e ) { throw new java.security.InvalidKeyException ( e ) ; } }
public java.lang.String printPosition ( boolean shortFormat ) { com.android.utils.PositionXmlParser.Position position = getPosition () ; if ( position == null ) { return com.android.manifmerger.XmlNode.UNKNOWN_POSITION ; } return new java.lang.StringBuilder () . append ( ( ( getSourceLocation () ) != null ? getSourceLocation () . print ( shortFormat ) : STRING_CONSTANT ) ) . append ( STRING_CONSTANT ) . append ( position . getLine () ) . append ( STRING_CONSTANT ) . append ( position . getColumn () ) . toString () ; }
@ com.android.annotations.NonNull @ java.lang.Override public com.android.tools.lint.detector.api.Severity getSeverity ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue ) { com.android.tools.lint.detector.api.Severity severity = computeSeverity ( issue ) ; if ( ( mFatalOnly ) && ( severity != ( com.android.tools.lint.detector.api.Severity.FATAL ) ) ) { return com.android.tools.lint.detector.api.Severity.IGNORE ; } if ( ( mFlags . isWarningsAsErrors () ) && ( ( severity . compareTo ( Severity.ERROR ) ) < NUMBER_CONSTANT ) ) { severity = com.android.tools.lint.detector.api.Severity.ERROR ; } if ( ( mFlags . isIgnoreWarnings () ) && ( severity == ( com.android.tools.lint.detector.api.Severity.WARNING ) ) ) { severity = com.android.tools.lint.detector.api.Severity.IGNORE ; } return severity ; }
public static com.android.ide.common.resources.configuration.CountryCodeQualifier getQualifier ( java.lang.String segment ) { java.util.regex.Matcher m = com.android.ide.common.resources.configuration.CountryCodeQualifier.sCountryCodePattern . matcher ( segment ) ; if ( m . matches () ) { java.lang.String v = m . group ( NUMBER_CONSTANT ) ; int code = - NUMBER_CONSTANT ; try { code = java.lang.Integer . parseInt ( v ) ; } catch ( java.lang.NumberFormatException e ) { return null ; } com.android.ide.common.resources.configuration.CountryCodeQualifier qualifier = new com.android.ide.common.resources.configuration.CountryCodeQualifier ( code ) ; return qualifier ; } return null ; }
public void copy1DRangeFromUnchecked ( int off , int count , byte [] d ) { int dataSize = ( mType.mElement . getBytesSize () ) * count ; data1DChecks ( off , count , d.length , dataSize ) ; mRS . nAllocationData1D ( getIDSafe () , off , mSelectedLOD , count , d , dataSize ) ; }
private void inflateTable ( int toSize ) { int capacity = java.util.HashMap . roundUpToPowerOf2 ( toSize ) ; float thresholdFloat = capacity * ( loadFactor ) ; if ( thresholdFloat > ( ( java.util.HashMap.MAXIMUM_CAPACITY ) + NUMBER_CONSTANT ) ) { thresholdFloat = ( java.util.HashMap.MAXIMUM_CAPACITY ) + NUMBER_CONSTANT ; } threshold = ( ( int ) ( thresholdFloat ) ) ; table = new java.util.HashMap.HashMapEntry [ capacity ] ; initHashSeedAsNeeded ( capacity ) ; }
private void generateTestManifest ( java.lang.String testPackageName , int minSdkVersion , int targetSdkVersion , java.lang.String testedPackageName , java.lang.String instrumentationRunner , java.lang.Boolean handleProfiling , java.lang.Boolean functionalTest , java.lang.String outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator . generate () ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public static libcore.io.MemoryMappedFile mmapRO ( java.lang.String path ) throws android.system.ErrnoException { java.io.FileDescriptor fd = Libcore.os . open ( path , libcore.io.O_RDONLY , NUMBER_CONSTANT ) ; long size = Libcore.os . fstat ( fd ) . st_size ; long address = Libcore.os . mmap ( NUMBER_CONSTANT , size , libcore.io.PROT_READ , libcore.io.MAP_SHARED , fd , NUMBER_CONSTANT ) ; Libcore.os . close ( fd ) ; return new libcore.io.MemoryMappedFile ( address , size ) ; }
@ com.android.annotations.NonNull private static java.util.Set < java.lang.String > getFilters ( @ com.android.annotations.NonNull java.util.List < com.android.ide.common.res2.ResourceSet > resourceSets , @ com.android.annotations.NonNull com.android.build.gradle.internal.variant.BaseVariantData.DiscoverableFilterType filterType , @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.Splits splits ) { java.util.Set < java.lang.String > filtersList = new java.util.HashSet < java.lang.String > () ; if ( filterType . isAuto ( splits ) ) { filtersList . addAll ( com.android.build.gradle.internal.variant.BaseVariantData . getAllFilters ( resourceSets , filterType.folderPrefix ) ) ; } else { filtersList . addAll ( com.android.build.gradle.internal.variant.BaseVariantData . removeAllNullEntries ( filterType . getConfiguredFilters ( splits ) ) ) ; } return filtersList ; }
public static void showTimeEditDialog ( android.app.FragmentManager manager , final com.android.deskclock.Alarm alarm ) { final android.app.FragmentTransaction ft = manager . beginTransaction () ; final android.app.Fragment prev = manager . findFragmentByTag ( STRING_CONSTANT ) ; if ( prev != null ) { ft . remove ( prev ) ; } ft . addToBackStack ( null ) ; final com.android.deskclock.AlarmTimePickerDialogFragment fragment = com.android.deskclock.AlarmTimePickerDialogFragment . newInstance ( alarm ) ; fragment . show ( ft , STRING_CONSTANT ) ; }
@ java.lang.Override public boolean onDisconnect ( int cause ) { boolean changed = false ; mCause = cause ; if ( ! ( mDisconnected ) ) { doDisconnect () ; if ( com.android.internal.telephony.GsmCdmaConnection.DBG ) android.telephony.Rlog . d ( com.android.internal.telephony.GsmCdmaConnection.LOG_TAG , ( STRING_CONSTANT + cause ) ) ; mOwner . getPhone () . notifyDisconnect ( this ) ; if ( ( mParent ) != null ) { changed = mParent . connectionDisconnected ( this ) ; } mOrigConnection = null ; } clearPostDialListeners () ; releaseWakeLock () ; return changed ; }
@ java.lang.Override protected void engineInit ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( ( params != null ) && ( ( padding ) != ( NativeConstants.RSA_PKCS1_OAEP_PADDING ) ) ) { throw new java.security.InvalidAlgorithmParameterException ( ( STRING_CONSTANT + ( params . getClass () . getName () ) ) ) ; } engineInitInternal ( opmode , key ) ; }
@ org.junit.Test public void testConfigRequestBuilderDefaults () { android.net.wifi.nan.ConfigRequest configRequest = new android.net.wifi.nan.ConfigRequest.Builder () . build () ; collector . checkThat ( STRING_CONSTANT , ConfigRequest.CLUSTER_ID_MAX , org.hamcrest.core.IsEqual . equalTo ( configRequest.mClusterHigh ) ) ; collector . checkThat ( STRING_CONSTANT , ConfigRequest.CLUSTER_ID_MIN , org.hamcrest.core.IsEqual . equalTo ( configRequest.mClusterLow ) ) ; collector . checkThat ( STRING_CONSTANT , NUMBER_CONSTANT , org.hamcrest.core.IsEqual . equalTo ( configRequest.mMasterPreference ) ) ; collector . checkThat ( STRING_CONSTANT , false , org.hamcrest.core.IsEqual . equalTo ( configRequest.mSupport5gBand ) ) ; collector . checkThat ( STRING_CONSTANT , false , org.hamcrest.core.IsEqual . equalTo ( configRequest.mEnableIdentityChangeCallback ) ) ; }
void checkTokenizer ( java.lang.String [] expected , java.lang.String toParse ) { java.lang.String [] actual = org.chromium.base.CommandLine . tokenizeQuotedAruments ( toParse . toCharArray () ) ; assertEquals ( expected.length , actual.length ) ; for ( int i = NUMBER_CONSTANT ; i < ( expected.length ) ; ++ i ) { assertEquals ( ( STRING_CONSTANT + i ) , expected [ i ] , actual [ i ] ) ; } }
public void test_ConstructorLjava_lang_StringIZ ( ) throws java.io.IOException { int sport = startServer ( STRING_CONSTANT ) ; s = new java.net.Socket ( java.net.InetAddress . getLocalHost () . getHostName () , sport , true ) ; assertTrue ( STRING_CONSTANT , ( ( s . getPort () ) == sport ) ) ; s = new java.net.Socket ( java.net.InetAddress . getLocalHost () . getHostName () , sport , false ) ; }
@ javax.annotation.Nonnull protected com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface ( @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JTypeLookupException { assert ! ( deletedItems . contains ( simpleName ) ) ; for ( com.android.jack.load.PackageLoader loader : loaders ) { try { return loader . loadClassOrInterface ( this , simpleName ) ; } catch ( com.android.jack.lookup.JLookupException e ) {} } throw new com.android.jack.ir.ast.MissingJTypeLookupException ( this , simpleName ) ; }
public java.nio.ByteBuffer asReadOnlyBuffer () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return new java.nio.DirectByteBuffer ( memoryRef , this . markValue () , this . position () , this . limit () , this . capacity () , offset , true ) ; }
@ org.junit.Test public void pnoRetryForLowRssiNetwork () { when ( mWifiNS . selectNetwork ( anyObject () , anyBoolean () , anyBoolean () , anyBoolean () ) ) . thenReturn ( null ) ; mWifiConnectivityManager . handleScreenStateChanged ( false ) ; int lowRssiNetworkRetryDelayStartValue = mWifiConnectivityManager . getLowRssiNetworkRetryDelay () ; mWifiConnectivityManager . handleConnectionStateChanged ( WifiConnectivityManager.WIFI_STATE_DISCONNECTED ) ; int lowRssiNetworkRetryDelayAfterPnoValue = mWifiConnectivityManager . getLowRssiNetworkRetryDelay () ; assertEquals ( ( lowRssiNetworkRetryDelayStartValue * NUMBER_CONSTANT ) , lowRssiNetworkRetryDelayAfterPnoValue ) ; }
private int getCmasMessageClass () { switch ( messageIdentifier ) { case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_PRESIDENTIAL_LEVEL : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_PRESIDENTIAL_LEVEL_ALERT ; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED : case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY : case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED : case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_EXTREME_THREAT ; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_IMMEDIATE_OBSERVED : case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_IMMEDIATE_LIKELY : case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_EXPECTED_OBSERVED : case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_SEVERE_EXPECTED_LIKELY : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_SEVERE_THREAT ; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_CHILD_ABDUCTION_EMERGENCY : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_CHILD_ABDUCTION_EMERGENCY ; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_REQUIRED_MONTHLY_TEST : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_REQUIRED_MONTHLY_TEST ; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_EXERCISE : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_CMAS_EXERCISE ; case SmsCbConstants.MESSAGE_ID_CMAS_ALERT_OPERATOR_DEFINED_USE : return android.telephony.SmsCbCmasInfo.CMAS_CLASS_OPERATOR_DEFINED_USE ; default: return android.telephony.SmsCbCmasInfo.CMAS_CLASS_UNKNOWN ; } }
public void testGetResources () { android.support.test.espresso.IdlingResource r1 = new android.support.test.espresso.base.OnDemandIdlingResource ( STRING_CONSTANT ) ; android.support.test.espresso.IdlingResource r2 = new android.support.test.espresso.base.OnDemandIdlingResource ( STRING_CONSTANT ) ; assertEquals ( registry . getResources () . size () , NUMBER_CONSTANT ) ; registry . registerResources ( com.google.common.collect.Lists . newArrayList ( r1 , r2 ) ) ; assertEquals ( registry . getResources () . size () , NUMBER_CONSTANT ) ; registry . unregisterResources ( com.google.common.collect.Lists . newArrayList ( r1 , r2 ) ) ; assertEquals ( registry . getResources () . size () , NUMBER_CONSTANT ) ; }
public void testWeakCompareAndSet () { java.util.concurrent.atomic.AtomicBoolean ai = new java.util.concurrent.atomic.AtomicBoolean ( true ) ; while ( ! ( ai . weakCompareAndSet ( true , false ) ) ) ; assertFalse ( ai . get () ) ; while ( ! ( ai . weakCompareAndSet ( false , false ) ) ) ; assertFalse ( ai . get () ) ; while ( ! ( ai . weakCompareAndSet ( false , true ) ) ) ; assertTrue ( ai . get () ) ; }
@ android.test.suitebuilder.annotation.SmallTest public void testEquals ( ) throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataProfile dp1 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn1 , false ) ; com.android.internal.telephony.dataconnection.DataProfile dp2 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn1 , false ) ; assertEquals ( dp1 , dp2 ) ; dp2 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn1 , true ) ; assertFalse ( dp1 . equals ( dp2 ) ) ; dp2 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn2 , false ) ; assertFalse ( dp1 . equals ( dp2 ) ) ; }
@ java.lang.Override public void enter () { if ( ( mServerSession ) != null ) { mServerSession . close () ; mServerSession = null ; } try { mConnSocket . close () ; mConnSocket = null ; } catch ( java.io.IOException e ) { android.util.Log . e ( com.android.bluetooth.pbap.PbapStateMachine.TAG , ( STRING_CONSTANT + ( e . toString () ) ) ) ; } mServiceHandler . obtainMessage ( BluetoothPbapService.MSG_STATE_MACHINE_DONE ) . sendToTarget () ; }
public java.lang.String getClassName () { if ( ( className ) == null ) { if ( ! ( ( isReference () ) || ( isClosure () ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + ( descriptor ) ) ) ; } if ( ( descriptor . charAt ( NUMBER_CONSTANT ) ) == CHAR_CONS ) { className = descriptor ; } else { className = descriptor . substring ( NUMBER_CONSTANT , ( ( descriptor . length () ) - NUMBER_CONSTANT ) ) ; } } return className ; }
public static void releaseContent ( int contentId ) { try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; com.intellij.openapi.vfs.newvfs.persistent.RefCountingStorage contentStorage = com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getContentStorage () ; if ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.weHaveContentHashes ) { contentStorage . releaseRecord ( contentId , false ) ; } else { contentStorage . releaseRecord ( contentId ) ; } } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
private void setUsbFunction ( int mode ) { switch ( mode ) { case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_MTP : mUsbManager . setCurrentFunction ( UsbManager.USB_FUNCTION_MTP ) ; mUsbManager . setUsbDataUnlocked ( true ) ; break; case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_PTP : mUsbManager . setCurrentFunction ( UsbManager.USB_FUNCTION_PTP ) ; mUsbManager . setUsbDataUnlocked ( true ) ; break; case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_MIDI : mUsbManager . setCurrentFunction ( UsbManager.USB_FUNCTION_MIDI ) ; mUsbManager . setUsbDataUnlocked ( true ) ; break; default: mUsbManager . setCurrentFunction ( null ) ; mUsbManager . setUsbDataUnlocked ( false ) ; break; } }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; org.mockito.MockitoAnnotations . initMocks ( this ) ; mSystemDpmi = com.android.server.LocalServices . getService ( android.app.admin.DevicePolicyManagerInternal . class ) ; com.android.server.LocalServices . removeServiceForTest ( android.app.admin.DevicePolicyManagerInternal . class ) ; com.android.server.LocalServices . addService ( android.app.admin.DevicePolicyManagerInternal . class , mDpmi ) ; org.mockito.Mockito . when ( mContext . getSystemService ( Context.TELEPHONY_SERVICE ) ) . thenReturn ( mTm ) ; org.mockito.Mockito . when ( mContext . getSystemService ( Context.APP_OPS_SERVICE ) ) . thenReturn ( mAppOps ) ; }
private boolean isValidSdkLocation ( java.lang.String sdkLocation ) { if ( sdkLocation == null ) { return false ; } if ( ( sdkLocation . trim () . length () ) == NUMBER_CONSTANT ) { return false ; } com.android.ide.eclipse.monitor.SdkToolsLocator locator = new com.android.ide.eclipse.monitor.SdkToolsLocator ( sdkLocation ) ; return ( locator . isValidInstallation () ) == ( com.android.ide.eclipse.monitor.SdkToolsLocator.SdkInstallStatus.VALID ) ; }
@ com.android.annotations.Nullable private static org.eclipse.core.resources.IProject findSupportProjectV7 () { for ( org.eclipse.jdt.core.IJavaProject javaProject : com.android.ide.eclipse.adt.AdtUtils . getOpenAndroidProjects () ) { org.eclipse.core.resources.IProject project = javaProject . getProject () ; com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk . getProjectState ( project ) ; if ( state . isLibrary () ) { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifestInfo = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo . get ( project ) ; if ( manifestInfo . getPackage () . equals ( STRING_CONSTANT ) ) { return project ; } } } return null ; }
private void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull java.lang.Object cookie , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull java.lang.String message ) { if ( context . isEnabled ( issue ) ) { boolean checkComments = context . containsCommentSuppress () ; if ( checkComments ) { int startOffset = getStartOffset ( context , cookie ) ; if ( ( startOffset >= NUMBER_CONSTANT ) && ( context . isSuppressedWithComment ( startOffset , issue ) ) ) { return; } } context . report ( issue , createLocation ( context , cookie ) , message , null ) ; } }
@ java.lang.Override public void writeZeroes ( int count ) { if ( count < NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } int end = ( cursor ) + count ; if ( stretchy ) { ensureCapacity ( end ) ; } else if ( end > ( data.length ) ) { com.android.dx.util.ByteArrayAnnotatedOutput . throwBounds () ; return; } java.util.Arrays . fill ( data , cursor , end , ( ( byte ) ( NUMBER_CONSTANT ) ) ) ; cursor = end ; }
@ android.support.annotation.VisibleForTesting static com.google.common.base.Optional < com.android.dialer.smartdial.map.SmartDialMap > getExtraMap ( android.content.Context context ) { if ( ! ( com.android.dialer.configprovider.ConfigProviderBindings . get ( context ) . getBoolean ( com.android.dialer.smartdial.map.CompositeSmartDialMap.FLAG_ENABLE_DUAL_ALPHABETS , false ) ) ) { return com.google.common.base.Optional . absent () ; } java.lang.String languageCode = com.android.dialer.compat.CompatUtils . getLocale ( context ) . getISO3Language () ; return com.android.dialer.smartdial.map.CompositeSmartDialMap.EXTRA_MAPS . containsKey ( languageCode ) ? com.google.common.base.Optional . of ( com.android.dialer.smartdial.map.CompositeSmartDialMap.EXTRA_MAPS . get ( languageCode ) ) : com.google.common.base.Optional . absent () ; }
@ java.lang.Override public void showSearchPanel () { super . showSearchPanel () ; mHandler . removeCallbacks ( mShowSearchPanel ) ; mSearchPanelView . setSystemUiVisibility ( mSystemUiVisibility ) ; android.view.WindowManager.LayoutParams lp = ( ( android.view.WindowManager.LayoutParams ) ( mNavigationBarView . getLayoutParams () ) ) ; lp.flags &= ~ ( android.view.ViewGroup.LayoutParams.FLAG_NOT_TOUCH_MODAL ) ; mWindowManager . updateViewLayout ( mNavigationBarView , lp ) ; }
public void test_getKeepAlive ( ) throws java.lang.Exception { java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () , null , NUMBER_CONSTANT ) ; client . setKeepAlive ( true ) ; assertTrue ( STRING_CONSTANT , client . getKeepAlive () ) ; client . setKeepAlive ( false ) ; assertFalse ( STRING_CONSTANT , client . getKeepAlive () ) ; }
public static void writeUint32 ( long i , java.io.OutputStream output ) throws java.io.IOException { output . write ( ( ( int ) ( i > > NUMBER_CONSTANT ) ) ) ; output . write ( ( ( int ) ( i > > NUMBER_CONSTANT ) ) ) ; output . write ( ( ( int ) ( i > > NUMBER_CONSTANT ) ) ) ; output . write ( ( ( int ) ( i ) ) ) ; }
public java.lang.String toGenericString () { int mod = getModifiers () ; java.lang.reflect.Type fieldType = getGenericType () ; return ( ( ( ( ( mod == NUMBER_CONSTANT ? STRING_CONSTANT : ( java.lang.reflect.Modifier . toString ( mod ) ) + STRING_CONSTANT ) + ( fieldType instanceof java.lang.Class ? java.lang.reflect.Field . getTypeName ( ( ( java.lang.Class ) ( fieldType ) ) ) : fieldType . toString () ) ) + STRING_CONSTANT ) + ( java.lang.reflect.Field . getTypeName ( getDeclaringClass () ) ) ) + STRING_CONSTANT ) + ( getName () ) ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . getEnclosingType () . isExternal () ) || ( method . isNative () ) ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.threeaddresscode.ThreeAddressCodeBuilder.ThreeAddressCode tcaBuilder = new com.android.jack.transformations.threeaddresscode.ThreeAddressCodeBuilder.ThreeAddressCode ( method ) ; tcaBuilder . accept ( method ) ; new com.android.jack.transformations.threeaddresscode.ThreeAddressCodeBuilder.SubTreeDefinitionMarkersRemover () . accept ( method ) ; }
@ android.test.suitebuilder.annotation.SmallTest public void testHeadsetAnswerCall ( ) throws java.lang.Exception { com.android.server.telecom.Call mockCall = createRingingCall () ; boolean callAnswered = mBluetoothPhoneService.mBinder . answerCall () ; org.mockito.Mockito . verify ( mMockCallsManager ) . answerCall ( org.mockito.Matchers . eq ( mockCall ) , org.mockito.Matchers . any ( int . class ) ) ; assertEquals ( callAnswered , true ) ; }
public final void onSmsStatusReportReceived ( int token , int messageRef , java.lang.String format , byte [] pdu ) { synchronized ( mLock ) { if ( ( mListener ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } try { mListener . onSmsStatusReportReceived ( token , messageRef , format , pdu ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.telephony.ims.internal.stub.SmsImplBase.LOG_TAG , ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; acknowledgeSmsReport ( token , messageRef , android.telephony.ims.internal.stub.SmsImplBase.STATUS_REPORT_STATUS_ERROR ) ; } } }
@ java.lang.Override public void tearDown ( ) throws java.lang.Exception { libcore.io.IoUtils . deleteContents ( mStatsDir ) ; mServiceContext = null ; mStatsDir = null ; mNetManager = null ; mTime = null ; mSettings = null ; mConnManager = null ; mSession . close () ; mService = null ; super . tearDown () ; }
protected void doAdbReboot ( final java.lang.String into ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( getIDevice () . isEmulator () ) { com.android.tradefed.log.LogUtil.CLog . i ( STRING_CONSTANT ) ; executeShellCommand ( STRING_CONSTANT ) ; executeShellCommand ( java.lang.String . format ( STRING_CONSTANT , DeviceStateMonitor.BOOTCOMPLETE_PROP ) ) ; executeShellCommand ( STRING_CONSTANT ) ; return; } com.android.tradefed.device.NativeDevice.DeviceAction rebootAction = new com.android.tradefed.device.NativeDevice.DeviceAction () { @ java.lang.Override public boolean run ( ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.TimeoutException , java.io.IOException { getIDevice () . reboot ( into ) ; return true ; } } ; performDeviceAction ( STRING_CONSTANT , rebootAction , com.android.tradefed.device.NativeDevice.MAX_RETRY_ATTEMPTS ) ; }
public synchronized long skip ( long n ) throws java.io.IOException { if ( closed ) { return NUMBER_CONSTANT ; } if ( ( in ) instanceof sun.net.www.http.ChunkedInputStream ) { n = in . skip ( n ) ; } else { long min = ( n > ( ( expected ) - ( count ) ) ) ? ( expected ) - ( count ) : n ; n = in . skip ( min ) ; } justRead ( n ) ; return n ; }
public void reveal ( java.lang.String applicationName , java.lang.String className , int line ) { if ( ( mSourceRevealers ) != null ) { for ( com.android.ide.eclipse.ddms.ISourceRevealer revealer : mSourceRevealers ) { if ( revealer . reveal ( applicationName , className , line ) ) { break; } } } }
public void acquireMulticastLock ( android.os.IBinder binder , java.lang.String tag ) { enforceMulticastChangePermission () ; synchronized ( mMulticasters ) { ( mMulticastEnabled ) ++ ; mMulticasters . add ( new com.android.server.WifiService.Multicaster ( tag , binder ) ) ; mWifiStateMachine . stopFilteringMulticastV4Packets () ; } int uid = android.os.Binder . getCallingUid () ; java.lang.Long ident = android.os.Binder . clearCallingIdentity () ; try { mBatteryStats . noteWifiMulticastEnabled ( uid ) ; } catch ( android.os.RemoteException e ) {} finally { android.os.Binder . restoreCallingIdentity ( ident ) ; } }
protected void methodSetUp () { mv = cv . visitMethod ( NUMBER_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , null , null ) ; mv . visitCode () ; mv . visitVarInsn ( org.objectweb.asm.xml.ALOAD , NUMBER_CONSTANT ) ; mv . visitMethodInsn ( org.objectweb.asm.xml.INVOKESPECIAL , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) { if ( ! ( containsFileType ( fileType ) ) ) { return com.google.common.collect.ImmutableSet . < com.android.sched.vfs.InputVFile > of () . iterator () ; } java.util.List < com.android.sched.vfs.InputVFile > inputVFiles = new java.util.ArrayList < com.android.sched.vfs.InputVFile > () ; fillFiles ( getSectionVFS ( fileType ) . getRootInputVDir () , fileType , inputVFiles ) ; return inputVFiles . listIterator () ; }
@ java.lang.Override public void onCameraPermissionGranted () { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.dialer.util.PermissionsUtil . setCameraPrivacyToastShown ( mContext ) ; enableCamera ( mPrimaryCall . getVideoCall () , isCameraRequired () ) ; showVideoUi ( mPrimaryCall . getVideoState () , mPrimaryCall . getState () , mPrimaryCall . getVideoTech () . getSessionModificationState () , mPrimaryCall . isRemotelyHeld () ) ; com.android.incallui.InCallPresenter . getInstance () . getInCallCameraManager () . onCameraPermissionGranted () ; }
private void findClasses ( java.lang.String packageName , java.util.Set < java.lang.String > classNames , java.util.Set < java.lang.String > subpackageNames ) throws java.io.IOException { java.lang.String packagePrefix = packageName + CHAR_CONS ; java.lang.String pathPrefix = packagePrefix . replace ( CHAR_CONS , CHAR_CONS ) ; for ( java.lang.String entry : classPath ) { java.io.File entryFile = new java.io.File ( entry ) ; if ( ( entryFile . exists () ) && ( ! ( entryFile . isDirectory () ) ) ) { classFinder . find ( entryFile , pathPrefix , packageName , classNames , subpackageNames ) ; } } }
@ java.lang.Override @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public java.util.Iterator iterator () { return new java.util.EnumMap.EnumMapIterator < KT , KT , VT > ( new java.util.MapEntry.Type < KT , KT , VT > () { public java.util.KT get ( MapEntry < java.util.KT , java.util.VT > entry ) { return entry.key ; } } , enumMap ) ; }
private com.android.jack.ir.ast.JExpression maybeCast ( com.android.jack.ir.ast.JType expected , com.android.jack.ir.ast.JExpression expression ) { if ( ! ( expected . isSameType ( expression . getType () ) ) ) { com.android.jack.ir.ast.JReferenceType toType = ( ( com.android.jack.ir.ast.JReferenceType ) ( expected ) ) ; return new com.android.jack.ir.ast.JDynamicCastOperation ( expression . getSourceInfo () , expression , toType ) ; } else { return expression ; } }
@ java.lang.Override public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( event . getSource () . equals ( mUseAdbHost ) ) { mAdbHostValue . setEnabled ( mUseAdbHost . getBooleanValue () , getFieldEditorParent () ) ; } else if ( event . getSource () . equals ( mProfilerBufsize ) ) { com.android.ddmlib.DdmPreferences . setProfilerBufferSizeMb ( mProfilerBufsize . getIntValue () ) ; } }
private vogar.Mode createMode ( vogar.ModeId modeId , vogar.Variant variant ) { switch ( modeId ) { case JVM : return new vogar.JavaVm ( this ) ; case HOST : case HOST_DALVIK : case HOST_ART_KITKAT : return new vogar.android.HostRuntime ( this , modeId , variant ) ; case DEVICE : case DEVICE_DALVIK : case DEVICE_ART_KITKAT : case APP_PROCESS : return new vogar.android.DeviceRuntime ( this , modeId , variant ) ; case ACTIVITY : return new vogar.android.ActivityMode ( this ) ; default: throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + modeId ) ) ; } }
@ java.lang.Override @ javax.annotation.CheckForNull @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public < T extends com.android.sched.marker.Marker > T getMarker ( @ javax.annotation.Nonnull java.lang.Class < T > cls ) { synchronized ( lock ) { if ( ( markers ) == null ) { return null ; } } return ( ( T ) ( markers . get ( cls ) ) ) ; }
public com.android.ahat.proguard.ProguardMap.Frame getFrame ( java.lang.String clearClassName , java.lang.String obfuscatedMethodName , java.lang.String clearSignature , java.lang.String obfuscatedFilename , int obfuscatedLine ) { java.lang.String key = obfuscatedMethodName + clearSignature ; com.android.ahat.proguard.ProguardMap.FrameData frame = mFrames . get ( key ) ; if ( frame == null ) { return new com.android.ahat.proguard.ProguardMap.Frame ( obfuscatedMethodName , clearSignature , obfuscatedFilename , obfuscatedLine ) ; } return new com.android.ahat.proguard.ProguardMap.Frame ( frame.clearMethodName , clearSignature , com.android.ahat.proguard.ProguardMap . getFileName ( clearClassName , frame.clearMethodName ) , ( obfuscatedLine - ( frame.lineDelta ) ) ) ; }
public void testStageInstallWithErrorCode_withBadlyFormedRevision ( ) throws java.lang.Exception { com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( NUMBER_CONSTANT , NUMBER_CONSTANT , libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; byte [] invalidRevisionBytes = validDistroVersion . toBytes () ; invalidRevisionBytes [ ( ( invalidRevisionBytes.length ) - NUMBER_CONSTANT ) ] = CHAR_CONS ; com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createTimeZoneDistroWithVersionBytes ( invalidRevisionBytes ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer . stageInstallWithErrorCode ( distro . getBytes () ) ) ; assertNoDistroOperationStaged () ; assertNoInstalledDistro () ; }
@ java.lang.Override public void ensureAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded ) { synchronized ( this ) { if ( isAnnotationsLoaded ) { return; } com.android.jack.jayce.MethodNode node ; try { node = getNNode ( NodeLevel.STRUCTURE ) ; node . loadAnnotations ( loaded ) ; } catch ( com.android.jack.LibraryException e ) { throw new com.android.jack.load.JackLoadingException ( getLocation ( loaded ) , e ) ; } isAnnotationsLoaded = true ; if ( isBodyLoaded ) { loaded . removeLoader () ; } } }
public void testInflatingStreamsRequiringZipRefill ( ) throws java.io.IOException { int originalSize = NUMBER_CONSTANT * NUMBER_CONSTANT ; byte [] readBuffer = new byte [ NUMBER_CONSTANT ] ; java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream ( new java.io.FileInputStream ( createZipFile ( originalSize ) ) ) ; while ( ( in . getNextEntry () ) != null ) { while ( ( in . read ( readBuffer , NUMBER_CONSTANT , readBuffer.length ) ) != ( - NUMBER_CONSTANT ) ) {} } in . close () ; }
private void incCallbackHandlerRefCount () { synchronized ( android.net.ConnectivityManager.sCallbackRefCount ) { if ( ( android.net.ConnectivityManager.sCallbackRefCount . incrementAndGet () ) == NUMBER_CONSTANT ) { android.os.HandlerThread callbackThread = new android.os.HandlerThread ( STRING_CONSTANT ) ; callbackThread . start () ; android.net.ConnectivityManager.sCallbackHandler = new android.net.ConnectivityManager.CallbackHandler ( callbackThread . getLooper () , android.net.ConnectivityManager.sNetworkCallback , android.net.ConnectivityManager.sCallbackRefCount , this ) ; } } }
public static void check ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.FileOrDirLocation location ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { assert file != null ; if ( ! ( file . exists () ) ) { throw new com.android.sched.util.file.NoSuchFileException ( location ) ; } if ( ! ( file . isFile () ) ) { throw new com.android.sched.util.file.NotFileException ( ( ( com.android.sched.util.location.FileLocation ) ( location ) ) ) ; } }
public static org.bouncycastle.asn1.x9.DHValidationParms getInstance ( java.lang.Object obj ) { if ( ( obj == null ) || ( obj instanceof org.bouncycastle.asn1.x9.DHDomainParameters ) ) { return ( ( org.bouncycastle.asn1.x9.DHValidationParms ) ( obj ) ) ; } if ( obj instanceof org.bouncycastle.asn1.ASN1Sequence ) { return new org.bouncycastle.asn1.x9.DHValidationParms ( ( ( org.bouncycastle.asn1.ASN1Sequence ) ( obj ) ) ) ; } throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + ( obj . getClass () . getName () ) ) ) ; }
@ java.lang.Override void transfer ( java.util.HashMapEntry [] newTable , boolean rehash ) { int newCapacity = newTable.length ; for ( java.util.LinkedHashMap.LinkedHashMapEntry < K , V > e = header.after ; e != ( header ) ; e = e.after ) { if ( rehash ) e.hash = ( ( e.key ) == null ) ? NUMBER_CONSTANT : java.util.HashMap . hash ( e.key ) ; int index = indexFor ( e.hash , newCapacity ) ; e.next = newTable [ index ] ; newTable [ index ] = e ; } }
@ android.test.suitebuilder.annotation.MediumTest public void testReceiveSessionModifyRequest ( ) throws java.lang.Exception { org.mockito.Mockito . doAnswer ( mVerification ) . when ( mVideoCallCallback ) . onSessionModifyRequestReceived ( org.mockito.Matchers . any ( android.telecom.VideoProfile . class ) ) ; mConnectionInfo.mockVideoProvider . sendMockSessionModifyRequest () ; mVerificationLock . await ( com.android.server.telecom.tests.TEST_TIMEOUT , java.util.concurrent.TimeUnit.MILLISECONDS ) ; org.mockito.ArgumentCaptor < android.telecom.VideoProfile > requestProfileCaptor = org.mockito.ArgumentCaptor . forClass ( android.telecom.VideoProfile . class ) ; org.mockito.Mockito . verify ( mVideoCallCallback , org.mockito.Mockito . timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . onSessionModifyRequestReceived ( requestProfileCaptor . capture () ) ; android.test.MoreAsserts . assertEquals ( VideoProfile.STATE_BIDIRECTIONAL , requestProfileCaptor . getValue () . getVideoState () ) ; }
public com.google.common.collect.ImmutableMap.Builder < K , V > putAll ( java.util.Map < ? extends K , ? extends V > map ) { entries . ensureCapacity ( ( ( entries . size () ) + ( map . size () ) ) ) ; for ( java.util.Map.Entry < ? extends K , ? extends V > entry : map . entrySet () ) { put ( entry . getKey () , entry . getValue () ) ; } return this ; }
public static org.eclipse.ui.IEditorPart getActiveEditor () { org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI . getWorkbench () ; org.eclipse.ui.IWorkbenchWindow window = workbench . getActiveWorkbenchWindow () ; if ( window == null ) { org.eclipse.ui.IWorkbenchWindow [] windows = workbench . getWorkbenchWindows () ; if ( ( windows.length ) > NUMBER_CONSTANT ) { window = windows [ NUMBER_CONSTANT ] ; } } if ( window != null ) { org.eclipse.ui.IWorkbenchPage page = window . getActivePage () ; if ( page != null ) { return page . getActiveEditor () ; } } return null ; }
public boolean setSimAccessPermission ( android.bluetooth.BluetoothDevice device , int value ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) return false ; return service . setSimAccessPermission ( device , value ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.test.toolchain.JackApiV02Toolchain setWithDebugInfos ( boolean withDebugInfos ) { try { if ( withDebugInfos ) { apiV02Config . setDebugInfoLevel ( DebugInfoLevel.FULL ) ; } else { apiV02Config . setDebugInfoLevel ( DebugInfoLevel.LINES ) ; } return this ; } catch ( com.android.jack.api.v01.ConfigurationException e ) { throw new com.android.jack.test.TestConfigurationException ( e ) ; } }
boolean checkAllowNonWakeupDelayLocked ( long nowELAPSED ) { if ( mInteractive ) { return false ; } if ( ( mLastAlarmDeliveryTime ) <= NUMBER_CONSTANT ) { return false ; } if ( ( ( mPendingNonWakeupAlarms . size () ) > NUMBER_CONSTANT ) && ( ( mNextNonWakeupDeliveryTime ) > nowELAPSED ) ) { return false ; } long timeSinceLast = nowELAPSED - ( mLastAlarmDeliveryTime ) ; return timeSinceLast <= ( currentNonWakeupFuzzLocked ( nowELAPSED ) ) ; }
@ javax.annotation.CheckForNull protected com.android.jack.ir.ast.JMethod findMethod ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId , @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface enclosingType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JType returnType ) { for ( com.android.jack.ir.ast.JMethod m : methodId . getMethods () ) { if ( ( m . getEnclosingType () . equals ( enclosingType ) ) && ( m . getType () . equals ( returnType ) ) ) { return m ; } } return null ; }
public void testConfigurationUpdatesWhenRotatingWhileDocked ( ) throws java.lang.Exception { if ( ! ( supportsMultiWindowMode () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } setDeviceRotation ( NUMBER_CONSTANT ) ; launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; setDeviceRotation ( NUMBER_CONSTANT ) ; final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; android.server.cts.ActivityManagerAppConfigurationTests . assertSizesRotate ( orientationASizes , orientationBSizes ) ; }
private void parseProfileButtons ( com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes buttonAttributes , java.lang.String elementName , org.xml.sax.Attributes xmlAtts ) { buttonAttributes.mHasBtnA = ( java.lang.Integer . parseInt ( xmlAtts . getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnA ) ) ) == NUMBER_CONSTANT ; buttonAttributes.mHasBtnB = ( java.lang.Integer . parseInt ( xmlAtts . getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnB ) ) ) == NUMBER_CONSTANT ; buttonAttributes.mHasBtnC = ( java.lang.Integer . parseInt ( xmlAtts . getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnC ) ) ) == NUMBER_CONSTANT ; buttonAttributes.mHasBtnD = ( java.lang.Integer . parseInt ( xmlAtts . getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnD ) ) ) == NUMBER_CONSTANT ; }
public com.android.dx.cf.code.LocalVariableList.Item pcAndIndexToLocal ( int pc , int index ) { if ( ! ( isSorted () ) ) { throw new java.lang.AssertionError ( STRING_CONSTANT ) ; } int sz = size () ; for ( int i = NUMBER_CONSTANT ; i < sz ; i ++ ) { com.android.dx.cf.code.LocalVariableList.Item one = ( ( com.android.dx.cf.code.LocalVariableList.Item ) ( get0 ( i ) ) ) ; if ( ( one != null ) && ( one . matchesPcAndIndex ( pc , index ) ) ) { return one ; } } return null ; }
@ java.lang.Override public void init () { if ( ! ( org.jetbrains.android.sdk.AndroidSdkUtils . isAndroidSdkAvailable () ) ) { java.lang.String title = STRING_CONSTANT ; java.lang.String msg = STRING_CONSTANT + STRING_CONSTANT ; super . init () ; com.intellij.openapi.ui.Messages . showErrorDialog ( msg , title ) ; throw new java.lang.IllegalStateException ( msg ) ; } addPath ( new com.google.gct.idea.samples.SampleImportWizardPath ( mySampleList , getDisposable () ) ) ; super . init () ; }
@ org.junit.Test public void testRoamFailureDueToBssidSet ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; int connectedNetworkId = NUMBER_CONSTANT ; executeAndValidateConnectSequence ( connectedNetworkId , false , false ) ; org.mockito.Mockito . when ( mSupplicantStaNetworkMock . setBssid ( org.mockito.Matchers . anyString () ) ) . thenReturn ( false ) ; android.net.wifi.WifiConfiguration roamingConfig = new android.net.wifi.WifiConfiguration () ; roamingConfig.networkId = connectedNetworkId ; roamingConfig . getNetworkSelectionStatus () . setNetworkSelectionBSSID ( STRING_CONSTANT ) ; assertFalse ( mDut . roamToNetwork ( roamingConfig ) ) ; }
@ org.jetbrains.annotations.NotNull private static java.lang.CharSequence getRangeContent ( @ org.jetbrains.annotations.NotNull com.intellij.diff.fragments.MergeLineFragment fragment , @ org.jetbrains.annotations.NotNull java.util.List < com.intellij.openapi.editor.ex.EditorEx > editors , @ org.jetbrains.annotations.NotNull com.intellij.diff.tools.simple.ThreeSide side ) { com.intellij.openapi.editor.ex.DocumentEx document = side . select ( editors ) . getDocument () ; int line1 = fragment . getStartLine ( side ) ; int line2 = fragment . getEndLine ( side ) ; return com.intellij.diff.tools.simple.DiffUtil . getLinesContent ( document , line1 , line2 ) ; }
private int getNewSpiResourceId ( int direction , java.lang.String remoteAddress , int returnSpi ) throws java.lang.Exception { org.mockito.Mockito . when ( mMockNetd . ipSecAllocateSpi ( org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyString () , org.mockito.Matchers . anyString () , org.mockito.Matchers . anyInt () ) ) . thenReturn ( returnSpi ) ; android.net.IpSecSpiResponse spi = mIpSecService . allocateSecurityParameterIndex ( direction , android.net.NetworkUtils . numericToInetAddress ( remoteAddress ) . getHostAddress () , IpSecManager.INVALID_SECURITY_PARAMETER_INDEX , new android.os.Binder () ) ; return spi.resourceId ; }
public boolean isIncomingCallPermitted ( android.telecom.PhoneAccountHandle phoneAccountHandle ) { com.android.internal.telecom.ITelecomService service = getTelecomService () ; if ( service != null ) { try { return service . isIncomingCallPermitted ( phoneAccountHandle ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.telecom.TelecomManager.TAG , STRING_CONSTANT , e ) ; } } return false ; }
public android.bluetooth.IBluetooth registerAdapter ( android.bluetooth.IBluetoothManagerCallback callback ) { if ( callback == null ) { android.util.Log . w ( com.android.server.BluetoothManagerService.TAG , STRING_CONSTANT ) ; return null ; } android.os.Message msg = mHandler . obtainMessage ( com.android.server.BluetoothManagerService.MESSAGE_REGISTER_ADAPTER ) ; msg.obj = callback ; mHandler . sendMessage ( msg ) ; synchronized ( mConnection ) { return mBluetooth ; } }
@ java.lang.Override protected boolean cleanup () { mHandler = null ; if ( mNativeAvailable ) { cleanupNative () ; mNativeAvailable = false ; } if ( ( mHealthChannels ) != null ) { mHealthChannels . clear () ; } if ( ( mHealthDevices ) != null ) { mHealthDevices . clear () ; } if ( ( mApps ) != null ) { mApps . clear () ; } return true ; }
public void downloadSubscription ( android.telephony.euicc.DownloadableSubscription subscription , boolean switchAfterDownload , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . downloadSubscription ( subscription , switchAfterDownload , mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public void testPoll () { java.util.concurrent.DelayQueue q = populatedQueue ( jsr166.SIZE ) ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) { assertEquals ( new jsr166.DelayQueueTest.PDelay ( i ) , ( ( jsr166.DelayQueueTest.PDelay ) ( q . poll () ) ) ) ; } assertNull ( q . poll () ) ; }
@ org.junit.Test public void testAssociationRejectionCallback ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; assertNotNull ( mISupplicantStaIfaceCallback ) ; int statusCode = NUMBER_CONSTANT ; mISupplicantStaIfaceCallback . onAssociationRejected ( com.android.server.wifi.util.NativeUtil . macAddressToByteArray ( com.android.server.wifi.SupplicantStaIfaceHalTest.BSSID ) , statusCode ) ; org.mockito.Mockito . verify ( mWifiMonitor ) . broadcastAssociationRejectionEvent ( org.mockito.Matchers . eq ( com.android.server.wifi.SupplicantStaIfaceHalTest.WLAN_IFACE_NAME ) , org.mockito.Matchers . eq ( statusCode ) , org.mockito.Matchers . eq ( com.android.server.wifi.SupplicantStaIfaceHalTest.BSSID ) ) ; }
@ org.junit.Test public void testNotifyResponseConfigSuccess ( ) throws org.json.JSONException { final short transactionId = NUMBER_CONSTANT ; android.os.Bundle args = new android.os.Bundle () ; args . putInt ( STRING_CONSTANT , WifiAwareNative.AWARE_STATUS_SUCCESS ) ; args . putInt ( STRING_CONSTANT , NUMBER_CONSTANT ) ; args . putInt ( STRING_CONSTANT , WifiAwareNative.AWARE_RESPONSE_ENABLED ) ; com.android.server.wifi.aware.WifiAwareHalMock . callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils . convertBundleToJson ( args ) . toString () ) ; org.mockito.Mockito . verify ( mAwareStateManager ) . onConfigSuccessResponse ( transactionId ) ; org.mockito.Mockito . verifyNoMoreInteractions ( mAwareStateManager ) ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . getEnclosingType () . isExternal () ) || ( method . isNative () ) ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( method ) ; com.android.jack.transformations.ast.ExpressionStatementLegalizer.Visitor visitor = new com.android.jack.transformations.ast.ExpressionStatementLegalizer.Visitor ( tr , method ) ; visitor . accept ( method ) ; tr . commit () ; }
public void test_getComment_unset ( ) throws java.lang.Exception { java.io.File file = libcore.java.util.zip.AbstractZipFileTest . createTemporaryZipFile () ; java.util.zip.ZipOutputStream out = createZipOutputStream ( file ) ; java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry ( STRING_CONSTANT ) ; ze . setComment ( STRING_CONSTANT ) ; out . putNextEntry ( ze ) ; out . close () ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( file ) ; assertEquals ( null , zipFile . getComment () ) ; }
@ org.junit.Test public void testNotifySecondaryForeign () { java.util.List < java.lang.String > barSecondaries = mBarUser0 . getSecondaryDexPaths () ; notifyDexLoad ( mFooUser0 , barSecondaries , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mBarUser0 ) ; org.junit.Assert . assertNotNull ( pui ) ; org.junit.Assert . assertFalse ( pui . isUsedByOtherApps () ) ; org.junit.Assert . assertEquals ( barSecondaries . size () , pui . getDexUseInfoMap () . size () ) ; assertSecondaryUse ( mFooUser0 , pui , barSecondaries , true , mUser0 ) ; }
private void updateRequestCounts ( boolean add , android.net.NetworkRequest request ) { int delta = ( add ) ? + NUMBER_CONSTANT : - NUMBER_CONSTANT ; switch ( request.type ) { case REQUEST : case TRACK_DEFAULT : mNumRequestNetworkRequests += delta ; break; case BACKGROUND_REQUEST : mNumRequestNetworkRequests += delta ; mNumBackgroundNetworkRequests += delta ; break; case LISTEN : break; case NONE : default: android.util.Log . wtf ( com.android.server.connectivity.NetworkAgentInfo.TAG , ( STRING_CONSTANT + ( request.type ) ) ) ; break; } }
public static void run () { art.Main . bindAgentJNIForClass ( art.Test901 . class ) ; java.lang.System.out . println ( STRING_CONSTANT ) ; if ( art.Test901 . checkLivePhase () ) { java.lang.System.out . println ( STRING_CONSTANT ) ; } if ( art.Test901 . checkUnattached () ) { java.lang.System.out . println ( STRING_CONSTANT ) ; } art.Test901 . set ( NUMBER_CONSTANT ) ; art.Test901 . set ( NUMBER_CONSTANT ) ; art.Test901 . set ( NUMBER_CONSTANT ) ; art.Test901 . set ( NUMBER_CONSTANT ) ; art.Test901 . set ( NUMBER_CONSTANT ) ; }
public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration ( int sessionId ) throws com.android.ims.ImsException { if ( ( ( mUt ) == null ) || ( ! ( mImsServiceProxy . isBinderAlive () ) ) ) { checkAndThrowExceptionIfServiceUnavailable () ; try { com.android.ims.internal.IImsUt iUt = mImsServiceProxy . getUtInterface ( sessionId ) ; if ( iUt == null ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , ImsReasonInfo.CODE_UT_NOT_SUPPORTED ) ; } mUt = new com.android.ims.ImsUt ( iUt ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mUt ; }
private static void checkExpression ( java.lang.Object expected , java.lang.String expressionSource ) { @ org.intellij.lang.annotations.Language ( value = STRING_CONSTANT ) java.lang.String source = ( ( ( ( ( ( ( STRING_CONSTANT + ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) + expressionSource ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ; com.android.tools.lint.detector.api.ConstantEvaluatorTest . check ( expected , source , STRING_CONSTANT ) ; }
@ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil . getApiLevel () ) <= NUMBER_CONSTANT ) { return device . findObject ( new android.support.test.uiautomator.UiSelector () . description ( ( STRING_CONSTANT + email ) ) ) . exists () ; } else { return device . findObject ( new android.support.test.uiautomator.UiSelector () . text ( ( STRING_CONSTANT + email ) ) ) . exists () ; } }
public java.lang.Class findClass ( java.lang.String name , java.util.List < java.lang.Throwable > suppressed ) { for ( dalvik.system.DexPathList.Element element : dexElements ) { dalvik.system.DexFile dex = element.dexFile ; if ( dex != null ) { java.lang.Class clazz = dex . loadClassBinaryName ( name , definingContext , suppressed ) ; if ( clazz != null ) { return clazz ; } } } if ( ( dexElementsSuppressedExceptions ) != null ) { suppressed . addAll ( java.util.Arrays . asList ( dexElementsSuppressedExceptions ) ) ; } return null ; }
private com.ibm.icu.text.UnicodeSet getEquivalentDecimals ( char decimal , boolean strictParse ) { com.ibm.icu.text.UnicodeSet equivSet = UnicodeSet.EMPTY ; if ( strictParse ) { if ( com.ibm.icu.text.DecimalFormat.strictDotEquivalents . contains ( decimal ) ) { equivSet = com.ibm.icu.text.DecimalFormat.strictDotEquivalents ; } else if ( com.ibm.icu.text.DecimalFormat.strictCommaEquivalents . contains ( decimal ) ) { equivSet = com.ibm.icu.text.DecimalFormat.strictCommaEquivalents ; } } else { if ( com.ibm.icu.text.DecimalFormat.dotEquivalents . contains ( decimal ) ) { equivSet = com.ibm.icu.text.DecimalFormat.dotEquivalents ; } else if ( com.ibm.icu.text.DecimalFormat.commaEquivalents . contains ( decimal ) ) { equivSet = com.ibm.icu.text.DecimalFormat.commaEquivalents ; } } return equivSet ; }
private void verifyStats ( android.hardware.cts.helpers.SensorStats stats , boolean passed , float [] means ) { assertEquals ( passed , stats . getValue ( MeanVerification.PASSED_KEY ) ) ; float [] actual = ( ( float [] ) ( stats . getValue ( SensorStats.MEAN_KEY ) ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( means.length ) ; i ++ ) { assertEquals ( means [ i ] , actual [ i ] , NUMBER_CONSTANT ) ; } }
public void TestJB3879 () { try { android.icu.util.UResourceBundle bundle = ( ( android.icu.util.UResourceBundle ) ( android.icu.util.UResourceBundle . getBundleInstance ( STRING_CONSTANT , android.icu.util.ULocale . getDefault () , android.icu.dev.test.util.ICUResourceBundleTest.testLoader ) ) ) ; if ( bundle == null ) { errln ( STRING_CONSTANT ) ; } } catch ( java.util.MissingResourceException ex ) { warnln ( ( STRING_CONSTANT + ( ex . getMessage () ) ) ) ; } }
private void checkJvm () { if ( ( com.intellij.openapi.util.text.StringUtil . containsIgnoreCase ( java.lang.System . getProperty ( STRING_CONSTANT , STRING_CONSTANT ) , STRING_CONSTANT ) ) && ( ! ( com.intellij.ide.SystemInfo . isJavaVersionAtLeast ( STRING_CONSTANT ) ) ) ) { notifyUnsupportedJvm ( STRING_CONSTANT ) ; } else if ( com.intellij.openapi.util.text.StringUtil . endsWithIgnoreCase ( java.lang.System . getProperty ( STRING_CONSTANT , STRING_CONSTANT ) , STRING_CONSTANT ) ) { notifyUnsupportedJvm ( STRING_CONSTANT ) ; } }
synchronized void recordAttributeAction ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.Actions.ActionType actionType , @ com.android.annotations.Nullable com.android.manifmerger.AttributeOperationType attributeOperationType ) { com.android.manifmerger.XmlElement originElement = attribute . getOwnerElement () ; java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = new com.android.manifmerger.Actions.AttributeRecord ( actionType , new com.android.manifmerger.Actions.ActionLocation ( originElement . getDocument () . getSourceLocation () , attribute . getPosition () ) , attribute . getId () , null , attributeOperationType ) ; attributeRecords . add ( attributeRecord ) ; }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID uuid ) { android.bluetooth.BluetoothGattService service = getService () ; if ( service == null ) return null ; android.bluetooth.BluetoothGattCharacteristic characteristic = service . getCharacteristic ( uuid ) ; if ( characteristic == null ) { showMessage ( STRING_CONSTANT ) ; return null ; } return characteristic ; }
private void init ( com.android.ide.common.xml.ManifestData manifestData ) { com.android.ide.common.xml.ManifestData.Instrumentation [] instrumentations = manifestData . getInstrumentations () ; mInstrumentationNames = new java.lang.String [ instrumentations.length ] ; for ( int i = NUMBER_CONSTANT ; i < ( instrumentations.length ) ; i ++ ) { mInstrumentationNames [ i ] = instrumentations [ i ] . getName () ; } mHasRunnerLibrary = hasTestRunnerLibrary ( manifestData ) ; }
public java.lang.String substring ( int beginIndex ) { if ( beginIndex < NUMBER_CONSTANT ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } int subLen = ( count ) - beginIndex ; if ( subLen < NUMBER_CONSTANT ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } return beginIndex == NUMBER_CONSTANT ? this : fastSubstring ( beginIndex , subLen ) ; }
private static java.util.List < com.android.ide.eclipse.gltrace.state.transforms.IStateTransform > transformsForGlActiveTexture ( com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage msg ) { com.android.ide.eclipse.gltrace.GLEnum texture = com.android.ide.eclipse.gltrace.GLEnum . valueOf ( msg . getArgs ( NUMBER_CONSTANT ) . getIntValue ( NUMBER_CONSTANT ) ) ; java.lang.Integer textureIndex = java.lang.Integer . valueOf ( ( ( texture.value ) - ( GLEnum.GL_TEXTURE0.value ) ) ) ; com.android.ide.eclipse.gltrace.state.transforms.IStateTransform transform = new com.android.ide.eclipse.gltrace.state.transforms.PropertyChangeTransform ( com.android.ide.eclipse.gltrace.state.transforms.GLPropertyAccessor . makeAccessor ( msg . getContextId () , GLStateType.TEXTURE_STATE , GLStateType.ACTIVE_TEXTURE_UNIT ) , textureIndex ) ; return java.util.Collections . singletonList ( transform ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof sun.security.x509.AccessDescription ) ) ) { return false ; } sun.security.x509.AccessDescription that = ( ( sun.security.x509.AccessDescription ) ( obj ) ) ; if ( ( this ) == that ) { return true ; } return ( accessMethod . equals ( that . getAccessMethod () ) ) && ( accessLocation . equals ( that . getAccessLocation () ) ) ; }
public void test_getSoLinger ( ) throws java.lang.Exception { java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () ) ; client . setSoLinger ( true , NUMBER_CONSTANT ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , client . getSoLinger () ) ; client . setSoLinger ( false , NUMBER_CONSTANT ) ; client . close () ; server . close () ; }
public boolean satisfiedByUids ( android.net.NetworkCapabilities nc ) { if ( null == ( nc.mUids ) ) return true ; if ( null == ( mUids ) ) return false ; for ( android.net.UidRange requiredRange : mUids ) { if ( requiredRange . contains ( nc.mEstablishingVpnAppUid ) ) return true ; if ( ! ( nc . appliesToUidRange ( requiredRange ) ) ) { return false ; } } return true ; }
public java.nio.IntBuffer asIntBuffer () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } int off = this . position () ; int lim = this . limit () ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : NUMBER_CONSTANT ; int size = rem > > NUMBER_CONSTANT ; return ( ( java.nio.IntBuffer ) ( new java.nio.ByteBufferAsIntBuffer ( this , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , size , size , off , order () ) ) ) ; }
private void runPreloadDensityTestForDrawable ( int drawableResId , boolean isConstantSize ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = mResources ; final int densityDpi = res . getConfiguration () . densityDpi ; try { runPreloadDensityTestForDrawableInner ( res , drawableResId , isConstantSize ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils . setResourcesDensity ( res , densityDpi ) ; } }
private android.graphics.drawable.Drawable getCachedDrawable ( android.util.LongSparseArray < java.lang.ref.WeakReference < android.graphics.drawable.Drawable.ConstantState > > drawableCache , long key ) { synchronized ( mTmpValue ) { java.lang.ref.WeakReference < android.graphics.drawable.Drawable.ConstantState > wr = drawableCache . get ( key ) ; if ( wr != null ) { android.graphics.drawable.Drawable.ConstantState entry = wr . get () ; if ( entry != null ) { return entry . newDrawable () ; } else { drawableCache . delete ( key ) ; } } } return null ; }
@ java.lang.Override public void onResume () { super . onResume () ; createPreferenceHierarchy () ; updateLocationToggles () ; if ( ( mSettingsObserver ) == null ) { mSettingsObserver = new java.util.Observer () { public void update ( java.util.Observable o , java.lang.Object arg ) { updateLocationToggles () ; } } ; mContentQueryMap . addObserver ( mSettingsObserver ) ; } }
private void initForReal () { mAwContents = new org.chromium.android_webview.AwContents ( mFactory . getBrowserContext () , mWebView , new com.android.webview.chromium.WebViewChromium.InternalAccessAdapter () , mContentsClientAdapter , new org.chromium.android_webview.AwLayoutSizer () , mWebSettings . getAwSettings () ) ; if ( ( mAppTargetSdkVersion ) >= ( Build.VERSION_CODES.KITKAT ) ) { org.chromium.android_webview.AwContents . setShouldDownloadFavicons () ; } }
public void createTest ( com.android.rs.image2.Resources res ) { int width = mOutPixelsAllocation . getType () . getX () ; int height = mOutPixelsAllocation . getType () . getY () ; mScript = new com.android.rs.image2.ScriptC_mandelbrot ( mRS , res , R.raw.mandelbrot ) ; mScript . set_gDimX ( width ) ; mScript . set_gDimY ( height ) ; mScript . set_gMaxIteration ( NUMBER_CONSTANT ) ; }
public void testGetContentLengthConnects ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; assertEquals ( NUMBER_CONSTANT , connection . getContentLength () ) ; connection . disconnect () ; }
@ java.lang.Override public void stop ( org.osgi.framework.BundleContext context ) throws java.lang.Exception { super . stop ( context ) ; stopEditors () ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder . stop () ; org.eclipse.wb.internal.core.DesignerPlugin . dispose () ; mRed . dispose () ; synchronized ( com.android.ide.eclipse.adt.AdtPlugin . class ) { com.android.ide.eclipse.adt.AdtPlugin.sPlugin = null ; } }
private void checkPreparationPhasesForPackage ( java.lang.String expectedPackage , int numPreparation ) { org.mockito.Mockito . verify ( mTestSystemImpl , org.mockito.Mockito . times ( numPreparation ) ) . onWebViewProviderChanged ( org.mockito.Mockito . argThat ( new com.android.server.webkit.WebViewUpdateServiceTest.IsPackageInfoWithName ( expectedPackage ) ) ) ; mWebViewUpdateServiceImpl . notifyRelroCreationCompleted () ; android.webkit.WebViewProviderResponse response = mWebViewUpdateServiceImpl . waitForAndGetProvider () ; assertEquals ( WebViewFactory.LIBLOAD_SUCCESS , response.status ) ; assertEquals ( expectedPackage , response.packageInfo.packageName ) ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [] bootclasspath , @ javax.annotation.CheckForNull java.io.File [] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , boolean compareInstructionNumber , float instructionNumberTolerance ) throws java.lang.Exception { com.android.jack.TestTools . checkStructure ( bootclasspath , classpath , fileOrSourceList , withDebugInfo , compareInstructionNumber , instructionNumberTolerance , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [] ) ( null ) ) ) ; }
@ android.test.UiThreadTest public void testSmsUsageMonitor () { if ( ! ( mPackageManager . hasSystemFeature ( PackageManager.FEATURE_TELEPHONY ) ) ) { return; } com.android.internal.telephony.SmsUsageMonitor monitor = new com.android.internal.telephony.SmsUsageMonitor ( mContext ) ; for ( android.telephony.cts.SmsUsageMonitorShortCodeTest.ShortCodeTest test : android.telephony.cts.SmsUsageMonitorShortCodeTest.sShortCodeTests ) { assertEquals ( ( ( ( STRING_CONSTANT + ( test.countryIso ) ) + STRING_CONSTANT ) + ( test.address ) ) , test.category , ( isCDMA112 ( test.address ) ? android.telephony.cts.SmsUsageMonitorShortCodeTest.CATEGORY_NOT_SHORT_CODE : monitor . checkDestination ( test.address , test.countryIso ) ) ) ; } }
public android.hardware.usb.UsbDeviceConnection openDevice ( android.hardware.usb.UsbDevice device ) { try { java.lang.String deviceName = device . getDeviceName () ; android.os.ParcelFileDescriptor pfd = mService . openDevice ( deviceName ) ; if ( pfd != null ) { android.hardware.usb.UsbDeviceConnection connection = new android.hardware.usb.UsbDeviceConnection ( device ) ; boolean result = connection . open ( deviceName , pfd ) ; pfd . close () ; if ( result ) { return connection ; } } } catch ( java.lang.Exception e ) { android.util.Log . e ( android.hardware.usb.UsbManager.TAG , STRING_CONSTANT , e ) ; } return null ; }
private void loadInternalDataFromUserStore ( java.util.List < android.net.wifi.WifiConfiguration > configurations , java.util.Set < java.lang.String > deletedEphemeralSSIDs ) { for ( android.net.wifi.WifiConfiguration configuration : configurations ) { configuration.networkId = ( mNextNetworkId ) ++ ; if ( mVerboseLoggingEnabled ) { android.util.Log . v ( com.android.server.wifi.WifiConfigManager.TAG , ( STRING_CONSTANT + ( configuration . configKey () ) ) ) ; } addMissingPskPassphraseQuotes ( configuration ) ; mConfiguredNetworks . put ( configuration ) ; } for ( java.lang.String ssid : deletedEphemeralSSIDs ) { mDeletedEphemeralSSIDs . add ( ssid ) ; } }
public void run () { com.android.mms.data.ContactList recipients = ( isRecipientsEditorVisible () ) ? mRecipientsEditor . constructContactsFromInput ( false ) : getRecipients () ; if ( android.util.Log . isLoggable ( LogTag.APP , Log.VERBOSE ) ) { com.android.mms.ui.ComposeMessageActivity . log ( ( STRING_CONSTANT + updated ) ) ; com.android.mms.ui.ComposeMessageActivity . log ( ( STRING_CONSTANT + recipients ) ) ; } updateTitle ( recipients ) ; this . mMsgListAdapter . notifyDataSetChanged () ; if ( ( mRecipientsEditor ) != null ) { mRecipientsEditor . populate ( recipients ) ; } }
@ android.support.annotation.MainThread public static boolean shouldShowSetupActivity ( android.content.Context context ) { com.android.tv.common.SoftPreconditions . checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP ) ; } else { return com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , false ) ; } }
static java.lang.String getResourceForFirstArg ( org.w3c.dom.Node method , org.w3c.dom.Node call ) { assert ( call instanceof lombok.ast.MethodInvocation ) || ( call instanceof lombok.ast.ConstructorInvocation ) ; com.android.tools.lint.checks.StringFormatDetector.StringTracker tracker = new com.android.tools.lint.checks.StringFormatDetector.StringTracker ( null , method , call , NUMBER_CONSTANT ) ; method . accept ( tracker ) ; java.lang.String name = tracker . getFormatStringName () ; return name ; }
private static void verifyRequestFocusDone ( com.android.server.telecom.ConnectionServiceFocusManager focusManager , com.android.server.telecom.tests.CallFocus call , com.android.server.telecom.tests.RequestFocusCallback callback , boolean isConnectionServiceFocusChanged ) { org.mockito.Mockito . verify ( callback ) . onRequestFocusDone ( call ) ; org.mockito.Mockito . verify ( call . getConnectionServiceWrapper () , org.mockito.Mockito . times ( ( isConnectionServiceFocusChanged ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ) . connectionServiceFocusGained () ; assertEquals ( call . getConnectionServiceWrapper () , focusManager . getCurrentFocusConnectionService () ) ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String actionName , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile ) { if ( new vogar.ClassAnalyzer ( klass ) . hasMethod ( true , void . class , STRING_CONSTANT , java.lang.String [] . class ) ) { return new vogar.target.MainRunner ( monitor , klass ) ; } else { return null ; } }
public int getModifiers () { if ( isArray () ) { int componentModifiers = getComponentType () . getModifiers () ; if ( ( componentModifiers & ( java.lang.reflect.Modifier.INTERFACE ) ) != NUMBER_CONSTANT ) { componentModifiers &= ~ ( ( java.lang.reflect.Modifier.INTERFACE ) | ( java.lang.reflect.Modifier.STATIC ) ) ; } return ( ( java.lang.reflect.Modifier.ABSTRACT ) | ( java.lang.reflect.Modifier.FINAL ) ) | componentModifiers ; } int JAVA_FLAGS_MASK = NUMBER_CONSTANT ; int modifiers = libcore.reflect.AnnotationAccess . getInnerClassFlags ( this , ( ( accessFlags ) & JAVA_FLAGS_MASK ) ) ; return modifiers & JAVA_FLAGS_MASK ; }
private static void addModuleForAccessingCallDetails ( android.content.Context context , java.util.List < com.android.dialer.contactactions.ContactActionModule > modules , com.android.dialer.calllog.model.CoalescedRow row ) { boolean canReportAsInvalidNumber = row . numberAttributes () . getCanReportAsInvalidNumber () ; boolean canSupportAssistedDialing = ! ( android.text.TextUtils . isEmpty ( row . numberAttributes () . getLookupUri () ) ) ; modules . add ( new com.android.dialer.contactactions.IntentModule ( context , com.android.dialer.calldetails.CallDetailsActivity . newInstance ( context , row . coalescedIds () , com.android.dialer.calllog.ui.menu.Modules . createDialerContactFromRow ( row ) , canReportAsInvalidNumber , canSupportAssistedDialing ) , R.string.call_details_menu_label , R.drawable.quantum_ic_info_outline_vd_theme_24 ) ) ; }
@ java.lang.Override public void onFocusChanged ( final boolean focused , final int direction , final android.graphics.Rect previouslyFocusedRect ) { if ( checkNeedsPost () ) { mRunQueue . addTask ( new java.lang.Runnable () { @ java.lang.Override public void run () { onFocusChanged ( focused , direction , previouslyFocusedRect ) ; } } ) ; return; } mAwContents . getAwContentsProxy () . onFocusChanged ( focused , direction , previouslyFocusedRect ) ; }
public void testLineEndings ( ) throws java.lang.Exception { java.lang.String xml = STRING_CONSTANT + ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; com.android.utils.PositionXmlParser parser = new com.android.utils.PositionXmlParser () ; java.io.File file = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; java.io.Writer fw = new java.io.BufferedWriter ( new java.io.FileWriter ( file ) ) ; fw . write ( xml ) ; fw . close () ; org.w3c.dom.Document document = parser . parse ( new java.io.FileInputStream ( file ) ) ; assertNotNull ( document ) ; file . delete () ; }
private synchronized boolean onConnect ( android.bluetooth.BluetoothDevice device , android.bluetooth.BluetoothSocket conSocket ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log . d ( TAG , ( ( ( STRING_CONSTANT + conSocket ) + STRING_CONSTANT ) + ( mConAccepted ) ) ) ; if ( ( ( mConAccepted ) == false ) && ( ( mConHandler . onConnect ( device , conSocket ) ) == true ) ) { mConAccepted = true ; return true ; } return false ; }
@ java.lang.Override public void fidelityWarning ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { java.lang.String description = describe ( tag , message ) ; com.android.ide.eclipse.adt.AdtPlugin . log ( throwable , STRING_CONSTANT , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addFidelityWarning ( description ) ; }
public void testDensityOnlyWithNoMatch () { java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertNull ( result ) ; }
private void sync ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor ) { if ( mEditorMaximized ) { editor . showStructureViews ( true , true , true ) ; } else if ( mOutlineOpen ) { editor . showStructureViews ( false , false , true ) ; editor . getCanvasControl () . getOutlinePage () . setShowPropertySheet ( ( ! ( mPropertiesOpen ) ) ) ; } else { editor . showStructureViews ( true , ( ! ( mPropertiesOpen ) ) , true ) ; } }
@ org.junit.Test public void testNotifySecondary () { java.util.List < java.lang.String > fooSecondaries = mFooUser0 . getSecondaryDexPaths () ; notifyDexLoad ( mFooUser0 , fooSecondaries , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mFooUser0 ) ; org.junit.Assert . assertNotNull ( pui ) ; org.junit.Assert . assertFalse ( pui . isUsedByOtherApps () ) ; org.junit.Assert . assertEquals ( fooSecondaries . size () , pui . getDexUseInfoMap () . size () ) ; assertSecondaryUse ( mFooUser0 , pui , fooSecondaries , false , mUser0 ) ; }
@ dagger.Provides static com.android.dialer.calllog.datasources.DataSources provideCallLogDataSources ( com.android.dialer.calllog.datasources.systemcalllog.SystemCallLogDataSource systemCallLogDataSource , com.android.dialer.calllog.datasources.contacts.ContactsDataSource contactsDataSource , com.android.dialer.calllog.datasources.phonelookup.PhoneLookupDataSource phoneLookupDataSource ) { com.google.common.collect.ImmutableList < com.android.dialer.calllog.datasources.CallLogDataSource > allDataSources = com.google.common.collect.ImmutableList . of ( systemCallLogDataSource , contactsDataSource , phoneLookupDataSource ) ; return new com.android.dialer.calllog.datasources.DataSources () { @ java.lang.Override public com.android.dialer.calllog.datasources.systemcalllog.SystemCallLogDataSource getSystemCallLogDataSource () { return systemCallLogDataSource ; } @ java.lang.Override public com.google.common.collect.ImmutableList < com.android.dialer.calllog.datasources.CallLogDataSource > getDataSourcesIncludingSystemCallLog () { return allDataSources ; } @ java.lang.Override public com.google.common.collect.ImmutableList < com.android.dialer.calllog.datasources.CallLogDataSource > getDataSourcesExcludingSystemCallLog () { return allDataSources . subList ( NUMBER_CONSTANT , allDataSources . size () ) ; } } ; }
public com.android.ide.common.resources.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget . getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes . exists () ) { com.android.ide.common.resources.FrameworkResources resources = new com.android.ide.common.resources.FrameworkResources () ; try { resources . loadResources ( frameworkRes ) ; resources . loadPublicResources ( frameworkRes , com.android.ide.eclipse.adt.AdtPlugin . getDefault () ) ; return resources ; } catch ( java.io.IOException e ) {} } return null ; }
@ java.lang.Override public void onWindowFocusChanged ( final boolean hasWindowFocus ) { if ( checkNeedsPost () ) { mRunQueue . addTask ( new java.lang.Runnable () { @ java.lang.Override public void run () { onWindowFocusChanged ( hasWindowFocus ) ; } } ) ; return; } mAwContents . getAwContentsProxy () . onWindowFocusChanged ( hasWindowFocus ) ; }
public boolean setPriority ( android.bluetooth.BluetoothDevice device , int priority ) { Settings.Global . putInt ( getContentResolver () , Settings.Global . getBluetoothMapPriorityKey ( device . getAddress () ) , priority ) ; if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + priority ) ) ; } return true ; }
@ android.support.annotation.MainThread public static int getChannelDataVersion ( android.content.Context context ) { com.android.tv.common.SoftPreconditions . checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues . getInt ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_CHANNEL_DATA_VERSION , com.android.tv.tuner.TunerPreferences.CHANNEL_DATA_VERSION_NOT_SET ) ; } else { return com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . getInt ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_CHANNEL_DATA_VERSION , com.android.tv.tuner.TunerPreferences.CHANNEL_DATA_VERSION_NOT_SET ) ; } }
static java.lang.String getResourceArg ( org.w3c.dom.Node method , org.w3c.dom.Node call , int argIndex ) { assert ( call instanceof lombok.ast.MethodInvocation ) || ( call instanceof lombok.ast.ConstructorInvocation ) ; com.android.tools.lint.checks.StringFormatDetector.StringTracker tracker = new com.android.tools.lint.checks.StringFormatDetector.StringTracker ( method , call , argIndex ) ; method . accept ( tracker ) ; java.lang.String name = tracker . getFormatStringName () ; return name ; }
public android.net.wifi.p2p.WifiP2pConfig createFromParcel ( android.os.Parcel in ) { android.net.wifi.p2p.WifiP2pConfig config = new android.net.wifi.p2p.WifiP2pConfig () ; config.deviceAddress = in . readString () ; config.wps = ( ( android.net.wifi.WpsInfo ) ( in . readParcelable ( null ) ) ) ; config.groupOwnerIntent = in . readInt () ; config.persist = android.net.wifi.p2p.WifiP2pConfig.Persist . valueOf ( in . readString () ) ; return config ; }
@ javax.annotation.Nonnull private com.android.jill.frontend.java.Variable getVariable ( @ javax.annotation.Nonnull java.lang.String id , @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull org.objectweb.asm.Type type , @ javax.annotation.CheckForNull java.lang.String signature ) { com.android.jill.frontend.java.Variable var = nameToVar . get ( id ) ; if ( var == null ) { var = new com.android.jill.frontend.java.Variable ( id , name , type , signature ) ; nameToVar . put ( id , var ) ; } return var ; }
@ android.test.suitebuilder.annotation.SmallTest public void testHeadsetSendDTMFNull ( ) throws java.lang.Exception { org.mockito.Mockito . when ( mMockCallsManager . getForegroundCall () ) . thenReturn ( null ) ; boolean sentDtmf = mBluetoothPhoneService.mBinder . sendDtmf ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_DTMF_TONE ) ; org.mockito.Mockito . verify ( mMockCallsManager , org.mockito.Mockito . never () ) . playDtmfTone ( org.mockito.Matchers . any ( com.android.server.telecom.Call . class ) , org.mockito.Matchers . anyChar () ) ; org.mockito.Mockito . verify ( mMockCallsManager , org.mockito.Mockito . never () ) . stopDtmfTone ( org.mockito.Matchers . any ( com.android.server.telecom.Call . class ) ) ; assertEquals ( sentDtmf , false ) ; }
private org.eclipse.jgit.lib.Repository openRepository ( final com.google.gerrit.reviewdb.Project.NameKey name ) { try { return repoManager . openRepository ( name . get () ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException err ) { com.google.gerrit.common.ChangeHookRunner.log . warn ( ( STRING_CONSTANT + ( name . get () ) ) , err ) ; return null ; } }
static com.google.gerrit.acceptance.GerritServer.Description forTestClass ( com.google.gerrit.acceptance.Description testDesc , java.lang.String configName ) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description ( configName , true , ( ! ( com.google.gerrit.acceptance.GerritServer.Description . has ( com.google.gerrit.acceptance.NoHttpd . class , testDesc . getTestClass () ) ) ) , com.google.gerrit.acceptance.GerritServer.Description . has ( com.google.gerrit.acceptance.Sandboxed . class , testDesc . getTestClass () ) , com.google.gerrit.acceptance.GerritServer.Description . has ( com.google.gerrit.acceptance.UseSsh . class , testDesc . getTestClass () ) , null , null ) ; }
@ java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec ( com.googlecode.prolog_cafe.lang.Prolog engine ) throws com.googlecode.prolog_cafe.lang.PrologException { engine . setB0 () ; com.googlecode.prolog_cafe.lang.Term a1 = arg1 . dereference () ; com.google.gerrit.rules.PrologEnvironment env = ( ( com.google.gerrit.rules.PrologEnvironment ) ( engine.control ) ) ; com.google.gerrit.reviewdb.Change change = StoredValues.CHANGE . get ( engine ) ; com.google.gerrit.reviewdb.Project.NameKey name = change . getProject () ; if ( ! ( a1 . unify ( com.googlecode.prolog_cafe.lang.SymbolTerm . create ( name . get () ) , engine.trail ) ) ) { return engine . fail () ; } return cont ; }
private com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo openRepo ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( p ) ; org.eclipse.jgit.lib.ObjectInserter ins = repo . newObjectInserter () ; return new com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo ( repo , new org.eclipse.jgit.revwalk.RevWalk ( ins . newReader () ) , ins , new com.google.gerrit.server.git.ChainedReceiveCommands () , true ) ; }
public java.lang.String toRevision ( final com.google.gerrit.reviewdb.client.Project.NameKey project , final com.google.gerrit.reviewdb.client.PatchSet ps ) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString ( type . getRevision () ) ; final java.util.Map < java.lang.String , java.lang.String > p = new java.util.HashMap < java.lang.String , java.lang.String > () ; p . put ( STRING_CONSTANT , encode ( project . get () ) ) ; p . put ( STRING_CONSTANT , encode ( ps . getRevision () . get () ) ) ; return ( baseUrl ) + ( pattern . replace ( p ) ) ; }
@ java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse ( com.google.gerrit.server.project.ProjectResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection . get () . parse ( TopLevelResource.INSTANCE , id ) ; for ( com.google.gerrit.server.project.ProjectState pp : p . getControl () . getProjectState () . parents () ) { if ( parent . getNameKey () . equals ( pp . getProject () . getNameKey () ) ) { return new com.google.gerrit.server.project.ChildProjectResource ( parent , p . getControl () ) ; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public < T > void put ( com.google.gerrit.server.CurrentUser.PropertyKey < T > key , @ com.google.gerrit.common.Nullable T value ) { com.google.common.cache.Cache < com.google.gerrit.server.CurrentUser.PropertyKey < java.lang.Object > , java.lang.Object > p = properties ( ( value != null ) ) ; if ( ( p != null ) || ( value != null ) ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gerrit.server.CurrentUser.PropertyKey < java.lang.Object > k = ( ( com.google.gerrit.server.CurrentUser.PropertyKey < java.lang.Object > ) ( key ) ) ; if ( value != null ) { p . put ( k , value ) ; } else { p . invalidate ( k ) ; } } }
public void add ( com.google.gerrit.extensions.registration.RegistrationHandle handle ) { if ( handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle ) { if ( ( reloadableHandles ) == null ) { reloadableHandles = com.google.common.collect.Lists . newArrayList () ; } reloadableHandles . add ( ( ( com.google.gerrit.extensions.registration.ReloadableRegistrationHandle < > ) ( handle ) ) ) ; } manager . add ( handle ) ; }
public com.google.gerrit.server.events.PatchSetAttribute asPatchSetAttribute ( final com.google.gerrit.reviewdb.PatchSet patchSet ) { com.google.gerrit.server.events.PatchSetAttribute p = new com.google.gerrit.server.events.PatchSetAttribute () ; p.revision = patchSet . getRevision () . get () ; p.number = java.lang.Integer . toString ( patchSet . getPatchSetId () ) ; p.ref = patchSet . getRefName () ; final com.google.gerrit.server.account.AccountState uploader = accountCache . get ( patchSet . getUploader () ) ; p.uploader = asAccountAttribute ( uploader . getAccount () ) ; return p ; }
@ org.junit.Test public void testSkipSubTreesWithImproperPrefix ( ) throws java.lang.Exception { changedPaths = com.google.common.collect.Sets . newHashSet ( STRING_CONSTANT ) ; runCheck ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidatorTest.INITIAL_PATHNAMES , changedPaths , messages , vistedPaths ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( messages ) ) . containsExactly ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessage ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator . conflict ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( vistedPaths ) . containsExactlyElementsIn ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; }
private < T > com.google.gerrit.client.rpc.CallbackGroup.Callback < T > handleAdd ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { if ( failed ) { cb . onFailure ( failedThrowable ) ; return com.google.gerrit.client.rpc.CallbackGroup . emptyCallback () ; } com.google.gerrit.client.rpc.CallbackGroup.CallbackImpl < T > wrapper = new com.google.gerrit.client.rpc.CallbackGroup.CallbackImpl < T > ( cb ) ; callbacks . add ( wrapper ) ; remaining . add ( wrapper ) ; return wrapper ; }
@ org.junit.Test public void testEquals ( ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( entry1 . equals ( null ) ) . isFalse () ; com.google.common.truth.Truth . assertThat ( entry1 . equals ( STRING_CONSTANT ) ) . isFalse () ; com.google.common.truth.Truth . assertThat ( entry1 . equals ( entry1 ) ) . isTrue () ; com.google.common.truth.Truth . assertThat ( entry1 . equals ( entry2 ) ) . isFalse () ; com.google.common.truth.Truth . assertThat ( entry1 . equals ( entry4 ) ) . isTrue () ; }
public void testUnsupportedIndexOperator ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; assertEquals ( query ( in ) , rewrite ( in ) ) ; indexes . setSearchIndex ( new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V1 ) ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; assertTrue ( ( out instanceof com.google.gerrit.server.query.AndPredicate ) ) ; assertEquals ( com.google.common.collect.ImmutableList . of ( query ( in . getChild ( NUMBER_CONSTANT ) ) , in . getChild ( NUMBER_CONSTANT ) ) , out . getChildren () ) ; }
@ org.junit.Test public void testNestedQuotes1 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyQuoteTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertEquals ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyQuoteTest . quote ( ( ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyQuoteTest . quote ( STRING_CONSTANT ) ) + STRING_CONSTANT ) ) , n . asString () ) ; }
private java.util.Set < java.lang.String > parseHashtags ( org.eclipse.jgit.revwalk.RevCommit commit ) { java.util.List < java.lang.String > hashtagsLines = commit . getFooterLines ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_HASHTAGS ) ; if ( ( hashtagsLines . isEmpty () ) || ( ( hashtagsLines . size () ) > NUMBER_CONSTANT ) ) { return null ; } if ( hashtagsLines . get ( NUMBER_CONSTANT ) . isEmpty () ) { return com.google.common.collect.ImmutableSet . of () ; } else { return com.google.common.collect.Sets . newHashSet ( com.google.common.base.Splitter . on ( CHAR_CONS ) . split ( hashtagsLines . get ( NUMBER_CONSTANT ) ) ) ; } }
private void addIssuesOccurrence ( java.lang.String text , java.lang.String occurrence , java.util.Map < java.lang.String , java.util.Set < java.lang.String > > map ) { for ( java.lang.String issue : getIssueIds ( text ) ) { java.util.Set < java.lang.String > occurrences = map . computeIfAbsent ( issue , ( k ) - > com.google.common.collect.Sets . newLinkedHashSet () ) ; occurrences . add ( occurrence ) ; } }
@ java.lang.Override public com.google.gerrit.server.notedb.ChangeNotes call ( ) throws java.lang.Exception { com.google.common.base.Preconditions . checkArgument ( change . getProject () . equals ( project ) , ( STRING_CONSTANT + STRING_CONSTANT ) , project , changeId , change . getProject () ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load () ; }
@ java.lang.Override protected void run ( ) throws com.googlesource.gerrit.plugins.verifystatus.UnloggedFailure { try { checkPermission () ; } catch ( com.google.gerrit.common.errors.PermissionDeniedException err ) { throw new com.googlesource.gerrit.plugins.verifystatus.UnloggedFailure ( ( STRING_CONSTANT + ( err . getMessage () ) ) ) ; } final com.googlesource.gerrit.plugins.verifystatus.VerifyStatusQueryShell shell = factory . create ( in , out ) ; shell . setOutputFormat ( format ) ; if ( ( query ) != null ) { shell . execute ( query ) ; } else { shell . run () ; } }
public void testReplaceNoLeadingOrTrailingText () { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . html ( STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.SafeHtml n = o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; assertNotSame ( o , n ) ; assertEquals ( STRING_CONSTANT , n . asString () ) ; }
@ java.lang.Override public void run () { int line = ( cm . extras () . hasActiveLine () ) ? cm . getLineNumber ( cm . extras () . activeLine () ) : NUMBER_CONSTANT ; int res = java.util.Collections . binarySearch ( chunks , new com.google.gerrit.client.diff.UnifiedDiffChunkInfo ( cm . side () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , line , false ) , getDiffChunkComparatorCmLine () ) ; diffChunkNavHelper ( chunks , host , res , dir ) ; }
private com.google.gerrit.extensions.common.CommitInfo getCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession . get ( ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) + ( id . name () ) ) ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_OK , r . getStatusCode () ) ; com.google.gerrit.extensions.common.CommitInfo result = newGson () . fromJson ( r . getReader () , com.google.gerrit.extensions.common.CommitInfo . class ) ; r . consume () ; return result ; }
public void testChildHashCode () { final long pId = NUMBER_CONSTANT ; final long cId = NUMBER_CONSTANT ; final com.google.gwtorm.client.LongKeyTestCase.Parent p = new com.google.gwtorm.client.LongKeyTestCase.Parent ( pId ) ; final com.google.gwtorm.client.LongKeyTestCase.Child c = new com.google.gwtorm.client.LongKeyTestCase.Child ( p , cId ) ; assertSame ( p , c . getParentKey () ) ; assertTrue ( ( cId != ( c . hashCode () ) ) ) ; }
public void testChildren () { final com.google.gerrit.server.query.NotPredicateTest.TestPredicate p = com.google.gerrit.server.query.NotPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.Predicate < java.lang.String > n = com.google.gerrit.server.query.Predicate . not ( p ) ; assertEquals ( NUMBER_CONSTANT , n . getChildCount () ) ; assertSame ( p , n . getChild ( NUMBER_CONSTANT ) ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo > toParentInfos ( final org.eclipse.jgit.revwalk.RevCommit [] parents , final org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { java.util.List < com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo > pInfos = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo > ( parents.length ) ; for ( org.eclipse.jgit.revwalk.RevCommit parent : parents ) { walk . parseBody ( parent ) ; com.google.gerrit.reviewdb.client.RevId rev = new com.google.gerrit.reviewdb.client.RevId ( parent . getId () . name () ) ; java.lang.String msg = parent . getShortMessage () ; pInfos . add ( new com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo ( rev , msg ) ) ; } return pInfos ; }
@ java.lang.Override protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager ( this , getBase () , getRevision () , getPath () , result . getCommentLinkProcessor () , getChangeStatus () . isOpen () ) ; setTheme ( result . getTheme () ) ; display ( comments ) ; }
@ java.lang.Override protected void configureServlets () { rpc ( com.google.gerrit.server.rpc.GroupAdminServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ChangeListServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.SuggestServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.SystemInfoServiceImpl . class ) ; install ( new com.google.gerrit.server.rpc.account.AccountModule () ) ; install ( new com.google.gerrit.server.rpc.changedetail.ChangeModule () ) ; install ( new com.google.gerrit.server.rpc.patch.PatchModule () ) ; install ( new com.google.gerrit.server.rpc.project.ProjectModule () ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onLineLength ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > e ) { java.lang.String v = e . getValue () ; if ( ( v != null ) && ( ( v . length () ) > NUMBER_CONSTANT ) ) { prefs . lineLength ( java.lang.Math . max ( NUMBER_CONSTANT , java.lang.Integer . parseInt ( v ) ) ) ; view . setLineLength ( prefs . lineLength () ) ; } }
@ org.junit.Test @ com.google.gerrit.acceptance.UseSsh @ com.google.gerrit.acceptance.GerritConfig ( name = STRING_CONSTANT , value = STRING_CONSTANT ) public void serverConfigWithPlugin ( ) throws java.lang.Exception { java.nio.file.Path plugins = sitePaths.plugins_dir ; java.nio.file.Files . createDirectory ( plugins ) ; java.nio.file.Path jsplugin = plugins . resolve ( STRING_CONSTANT ) ; java.nio.file.Files . write ( jsplugin , STRING_CONSTANT . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ; adminSshSession . exec ( STRING_CONSTANT ) ; com.google.gerrit.extensions.common.ServerInfo i = gApi . config () . server () . getInfo () ; com.google.common.truth.Truth . assertThat ( i.plugin.jsResourcePaths ) . hasSize ( NUMBER_CONSTANT ) ; }
@ org.junit.Test public void currentRevisionAndMessages ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo c = get ( changeId , com.google.gerrit.extensions.client.ListChangesOption.CURRENT_REVISION , com.google.gerrit.extensions.client.ListChangesOption.MESSAGES ) ; com.google.common.truth.Truth . assertThat ( c.revisions ) . hasSize ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( c.currentRevision ) . isEqualTo ( commitId ( NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( ( ( java.lang.Iterable < > ) ( c.revisions . keySet () ) ) ) . containsAllIn ( com.google.common.collect.ImmutableSet . of ( commitId ( NUMBER_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( c.revisions . get ( commitId ( NUMBER_CONSTANT ) ) . _number ) . isEqualTo ( NUMBER_CONSTANT ) ; }
private void updateSuperProjects ( java.util.Collection < com.google.gerrit.reviewdb.client.Branch.NameKey > branches ) { logDebug ( STRING_CONSTANT ) ; com.google.gerrit.server.git.SubmoduleOp subOp = subOpFactory . create ( orm ) ; try { subOp . updateSuperProjects ( branches ) ; logDebug ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.server.git.SubmoduleException e ) { logError ( ( STRING_CONSTANT + STRING_CONSTANT ) , e ) ; } }
@ org.junit.Test public void setParent_Forbidden ( ) throws java.lang.Exception { java.lang.String parent = STRING_CONSTANT ; createProject ( parent , null , true ) ; com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , newParentInput ( parent ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; r . consume () ; }
@ java.lang.Override public java.lang.Object apply ( com.google.gerrit.extensions.restapi.TopLevelResource resource ) throws com.google.gerrit.extensions.restapi.BadRequestException { if ( ( format ) == ( com.google.gerrit.server.OutputFormat.TEXT ) ) { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream () ; display ( buf ) ; return com.google.gerrit.extensions.restapi.BinaryResult . create ( buf . toByteArray () ) . setContentType ( STRING_CONSTANT ) . setCharacterEncoding ( java.nio.charset.StandardCharsets.UTF_8 . name () ) ; } return apply () ; }
@ java.lang.Override public org.eclipse.jgit.lib.ObjectId findLastCommit ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId commitId , java.lang.String path ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . markStart ( rw . parseCommit ( commitId ) ) ; rw . setRewriteParents ( false ) ; rw . setTreeFilter ( org.eclipse.jgit.treewalk.filter.AndTreeFilter . create ( org.eclipse.jgit.treewalk.filter.PathFilterGroup . createFromStrings ( path ) , TreeFilter.ANY_DIFF ) ) ; return rw . next () ; } finally { rw . release () ; } }
protected void bccWatchesNotifyAllComments ( ) throws javax.mail.MessagingException { if ( ( db ) != null ) { try { final com.google.gerrit.client.reviewdb.Project project = getProject () ; if ( project != null ) { for ( com.google.gerrit.client.reviewdb.AccountProjectWatch w : db . accountProjectWatches () . notifyAllComments ( project . getId () ) ) { add ( RecipientType.BCC , w . getAccountId () ) ; } } } catch ( com.google.gwtorm.client.OrmException err ) {} } }
private java.lang.String getSortValue () { if ( ( accountInfo ) != null ) { if ( ( accountInfo . getPreferredEmail () ) != null ) { return accountInfo . getPreferredEmail () ; } return accountInfo . getFullName () . toString () ; } return groupReference . getName () ; }
public void testMultipleIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; assertSame ( com.google.gerrit.server.query.change.OrSource . class , out . getClass () ) ; assertEquals ( com.google.common.collect.ImmutableList . of ( query ( com.google.gerrit.server.query.Predicate . or ( in . getChild ( NUMBER_CONSTANT ) , in . getChild ( NUMBER_CONSTANT ) ) ) , in . getChild ( NUMBER_CONSTANT ) , in . getChild ( NUMBER_CONSTANT ) ) , out . getChildren () ) ; }
private static void diffChanges ( java.util.List < java.lang.String > diffs , com.google.gerrit.server.notedb.ChangeBundle bundleA , com.google.gerrit.server.notedb.ChangeBundle bundleB ) { com.google.gerrit.reviewdb.client.Change a = bundleA.change ; com.google.gerrit.reviewdb.client.Change b = bundleB.change ; java.lang.String desc = ( a . getId () . equals ( b . getId () ) ) ? com.google.gerrit.server.notedb.ChangeBundle . describe ( a . getId () ) : STRING_CONSTANT ; com.google.gerrit.server.notedb.ChangeBundle . diffColumns ( diffs , com.google.gerrit.reviewdb.client.Change . class , desc , a , b ) ; }
private void openLine ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , boolean isForTableHeader ) { m . openTr () ; m . openTd () ; m . setStyleName ( Gerrit.RESOURCES . css () . iconCell () ) ; if ( isForTableHeader ) { m . addStyleName ( Gerrit.RESOURCES . css () . fileColumnHeader () ) ; } else { m . setAttribute ( STRING_CONSTANT , STRING_CONSTANT ) ; } m . closeTd () ; }
@ java.lang.Override public void onSuccess ( java.lang.Void result ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . valueOf ( base . get () ) : null ; java.lang.String rev = java.lang.String . valueOf ( revision . get () ) ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( changeId , rev ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , b , rev , openReplyBox ) ) ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < ? extends java.util.Set < java.lang.String > > apply ( com.google.gerrit.server.change.ChangeResource req ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.project.ChangeControl control = req . getControl () ; com.google.gerrit.server.notedb.ChangeNotes notes = control . getNotes () . load () ; java.util.Set < java.lang.String > hashtags = notes . getHashtags () ; if ( hashtags == null ) { hashtags = java.util.Collections . emptySet () ; } return com.google.gerrit.extensions.restapi.Response . ok ( new java.util.TreeSet < java.lang.String > ( hashtags ) ) ; }
static java.lang.String makeKey ( int change , int patch , java.lang.String branch ) { if ( ( branch . indexOf ( com.googlesource.gerrit.plugins.findowners.Cache.REFS_HEADS ) ) == NUMBER_CONSTANT ) { branch = branch . substring ( com.googlesource.gerrit.plugins.findowners.Cache.REFS_HEADS . length () ) ; } return ( ( ( change + STRING_CONSTANT ) + patch ) + STRING_CONSTANT ) + branch ; }
private void addMergedMessage ( com.google.gerrit.reviewdb.client.PatchSetApproval submitter , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { if ( msg != null ) { if ( ( submitter != null ) && ( ( msg . getAuthor () ) == null ) ) { msg . setAuthor ( submitter . getAccountId () ) ; } try { db . changeMessages () . insert ( java.util.Collections . singleton ( msg ) ) ; } catch ( com.google.gwtorm.server.OrmException err ) { com.google.gerrit.server.git.MergeOp.log . warn ( STRING_CONSTANT , err ) ; } } }
private void formatHtmlDiff ( java.io.OutputStream out , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree , org.eclipse.jgit.treewalk.AbstractTreeIterator newTree , java.lang.String path ) throws java.io.IOException { org.eclipse.jgit.diff.DiffFormatter diff = new com.google.gitiles.HtmlDiffFormatter ( renderer , out ) ; try { if ( ! ( path . equals ( STRING_CONSTANT ) ) ) { diff . setPathFilter ( org.eclipse.jgit.treewalk.filter.PathFilter . create ( path ) ) ; } diff . setRepository ( repo ) ; diff . setDetectRenames ( true ) ; diff . format ( oldTree , newTree ) ; } finally { diff . release () ; } }
public java.util.List < com.google.gerrit.server.git.validators.ValidationMessage > validateForRefOperation ( ) throws com.google.gerrit.server.git.validators.RefOperationValidationException { java.util.List < com.google.gerrit.server.git.validators.ValidationMessage > messages = com.google.common.collect.Lists . newArrayList () ; boolean withException = false ; try { for ( com.google.gerrit.server.git.validators.RefOperationValidationListener listener : refOperationValidationListeners ) { messages . addAll ( listener . onRefOperation ( event ) ) ; } } catch ( com.google.gerrit.server.validators.ValidationException e ) { messages . add ( new com.google.gerrit.server.git.validators.ValidationMessage ( e . getMessage () , true ) ) ; withException = true ; } if ( withException ) { throwException ( messages , event ) ; } return messages ; }
@ java.lang.Override public boolean equals ( java.lang.Object other ) { if ( other instanceof com.google.gerrit.server.query.ObjectIdPredicate ) { final com.google.gerrit.server.query.ObjectIdPredicate p = ( ( com.google.gerrit.server.query.ObjectIdPredicate ) ( other ) ) ; return ( getOperator () . equals ( p . getOperator () ) ) && ( id . equals ( p.id ) ) ; } return false ; }
public void publishComments ( final com.google.gerrit.reviewdb.PatchSet.Id psid , final java.lang.String msg , final java.util.Set < com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > tags , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > cb ) { com.google.gerrit.httpd.rpc.Handler . wrap ( publishCommentsFactory . create ( psid , msg , tags ) ) . to ( cb ) ; }
private com.google.gerrit.server.account.AccountState missing ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil . nowTs () ) ; account . setActive ( false ) ; java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > anon = com.google.common.collect.ImmutableSet . of () ; return new com.google.gerrit.server.account.AccountState ( allUsersName , account , anon , java.util.Collections . emptySet () , new java.util.HashMap < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , java.util.Set < com.google.gerrit.server.account.WatchConfig.NotifyType > > () ) ; }
@ java.lang.Override public boolean evict ( final java.lang.String cacheName , final java.lang.Object key ) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request ( ( ( ( ( STRING_CONSTANT + cacheName ) + STRING_CONSTANT ) + key ) + STRING_CONSTANT ) ) { @ java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send ( ) throws java.io.IOException { java.lang.String json = com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser . toJson ( cacheName , key ) ; return httpSession . post ( com.google.common.base.Joiner . on ( STRING_CONSTANT ) . join ( pluginRelativePath , STRING_CONSTANT , cacheName ) , json ) ; } } . execute () ; }
private org.eclipse.jgit.internal.storage.file.LockFile lockForImport ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { java.io.File importStatus = projects.FS_LAYOUT . getImportStatusFile ( targetProject . get () ) ; org.eclipse.jgit.internal.storage.file.LockFile lockFile = new org.eclipse.jgit.internal.storage.file.LockFile ( importStatus ) ; try { if ( lockFile . lock () ) { return lockFile ; } else { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } } catch ( java.io.IOException e1 ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } }
static com.google.gerrit.acceptance.GerritServer.Description forTestClass ( com.google.gerrit.acceptance.Description testDesc , java.lang.String configName ) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description ( testDesc , configName , true , ( ! ( com.google.gerrit.acceptance.GerritServer.Description . has ( com.google.gerrit.acceptance.NoHttpd . class , testDesc . getTestClass () ) ) ) , com.google.gerrit.acceptance.GerritServer.Description . has ( com.google.gerrit.acceptance.Sandboxed . class , testDesc . getTestClass () ) , com.google.gerrit.acceptance.GerritServer.Description . has ( com.google.gerrit.acceptance.UseSsh . class , testDesc . getTestClass () ) , null , null ) ; }
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String login , java.lang.String name , java.lang.String email ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.AccountExternalId.Key userExtKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME , login ) ; com.google.gerrit.reviewdb.server.AccountExternalIdAccess gerritExtIds = db . accountExternalIds () ; com.google.gerrit.reviewdb.client.AccountExternalId userExtId = gerritExtIds . get ( userExtKey ) ; if ( userExtId == null ) { return accountImporter . importAccount ( login , name , email ) ; } return userExtId . getAccountId () ; }
@ org.junit.Test public void noConflictingChanges ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git , true ) ; createChange ( git , false ) ; java.util.Set < java.lang.String > changes = queryConflictingChanges ( change ) ; com.google.common.truth.Truth . assertThat ( ( ( java.lang.Iterable < > ) ( changes ) ) ) . isEmpty () ; }
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory . create ( getProjectName () ) ; updateManager . add ( this ) ; com.google.gerrit.server.notedb.NoteDbChangeState . applyDelta ( getChange () , updateManager . stage () . get ( getId () ) ) ; updateManager . execute () ; return getResult () ; }
private java.lang.String buildJsonRaw ( java.lang.String path , java.lang.String additionalQueryString ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = buildResponse ( path , ( STRING_CONSTANT + additionalQueryString ) , javax.servlet.http.HttpServletResponse.SC_OK ) ; com.google.common.truth.Truth . assertThat ( res . getHeader ( com.google.common.net.HttpHeaders.CONTENT_TYPE ) ) . isEqualTo ( STRING_CONSTANT ) ; java.lang.String body = res . getActualBodyString () ; java.lang.String magic = STRING_CONSTANT ; com.google.common.truth.Truth . assertThat ( body ) . startsWith ( magic ) ; java.lang.String result = body . substring ( magic . length () ) ; java.lang.System.out . println ( result ) ; return result ; }
public static void topic ( int id , java.lang.String topic , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.String > cb ) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi . call ( id , STRING_CONSTANT ) ; topic = com.google.gerrit.client.changes.ChangeApi . emptyToNull ( topic ) ; if ( topic != null ) { com.google.gerrit.client.changes.ChangeApi.TopicInput input = com.google.gerrit.client.changes.ChangeApi.TopicInput . create () ; input . topic ( topic ) ; call . put ( input , com.google.gerrit.client.rpc.NativeString . unwrap ( cb ) ) ; } else { call . delete ( com.google.gerrit.client.rpc.NativeString . unwrap ( cb ) ) ; } }
public com.google.gerrit.common.data.Capable canPushToAtLeastOneRef () { if ( ( ( ! ( canPerformOnAnyRef ( Permission.PUSH ) ) ) && ( ! ( canPerformOnAnyRef ( Permission.CREATE_TAG ) ) ) ) && ( ! ( isOwner () ) ) ) { java.lang.String pName = state . getProject () . getName () ; return new com.google.gerrit.common.data.Capable ( ( ( STRING_CONSTANT + pName ) + STRING_CONSTANT ) ) ; } if ( state . isUseContributorAgreements () ) { return verifyActiveContributorAgreement () ; } return com.google.gerrit.common.data.Capable.OK ; }
private void mockUnconnectableStoryboard () { org.easymock.EasyMock . expect ( serverConfig . getString ( STRING_CONSTANT , null , STRING_CONSTANT ) ) . andReturn ( STRING_CONSTANT ) . anyTimes () ; org.easymock.EasyMock . expect ( serverConfig . getString ( STRING_CONSTANT , null , STRING_CONSTANT ) ) . andReturn ( STRING_CONSTANT ) . anyTimes () ; org.easymock.EasyMock . expect ( serverConfig . getString ( STRING_CONSTANT , null , STRING_CONSTANT ) ) . andReturn ( STRING_CONSTANT ) . anyTimes () ; }
@ org.junit.Test public void testNoMissingDownstreamMerges ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result result = createChange ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; java.lang.String projectName = result . getChange () . change () . getProject () . get () ; createBranch ( new com.google.gerrit.reviewdb.client.Branch.NameKey ( projectName , STRING_CONSTANT ) ) ; pushConfig ( STRING_CONSTANT , projectName ) ; amendChange ( result . getChangeId () ) ; result . assertOkStatus () ; merge ( result ) ; }
private static java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > commits ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.util.List < java.lang.String > hashes ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > commits = new java.util.ArrayList <> ( hashes . size () ) ; for ( java.lang.String s : hashes ) { commits . add ( com.google.gerrit.server.query.change.InternalChangeQuery . commit ( schema , s ) ) ; } return commits ; }
private void enableForm ( final boolean canModifyAgreements , final boolean canModifyDescription , final boolean canModifyMergeType ) { submitType . setEnabled ( canModifyMergeType ) ; descTxt . setEnabled ( canModifyDescription ) ; useContributorAgreements . setEnabled ( canModifyAgreements ) ; useSignedOffBy . setEnabled ( canModifyAgreements ) ; requireChangeID . setEnabled ( canModifyMergeType ) ; saveProject . setEnabled ( ( ( canModifyAgreements || canModifyDescription ) || canModifyMergeType ) ) ; }
@ java.lang.Override public void update ( final int completed ) { count += completed ; if ( ( total ) != ( com.google.gerrit.server.git.MultiProgressMonitor.UNKNOWN ) ) { int percent = ( ( count ) * NUMBER_CONSTANT ) / ( total ) ; if ( percent > ( lastPercent ) ) { lastPercent = percent ; wakeUp () ; } } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . getRepository () ) ; cache = new com.google.gitiles.TimeCache () ; start = ( repo . getDate () . getTime () ) / NUMBER_CONSTANT ; }
@ java.lang.Override public void cleanUp () { for ( java.nio.file.Path path : listFiles () ) { com.google.gerrit.httpd.WebSessionManager.Val val = readFile ( path ) ; org.joda.time.DateTime expires = new org.joda.time.DateTime ( val . getExpiresAt () ) ; if ( expires . isBefore ( new org.joda.time.DateTime () ) ) { deleteFile ( path ) ; } } }
public void testParentString () { final java.lang.String pv = STRING_CONSTANT ; final com.google.gwtorm.client.StringKeyTestCase.Parent p1 = new com.google.gwtorm.client.StringKeyTestCase.Parent ( pv ) ; assertEquals ( STRING_CONSTANT , p1 . toString () ) ; final com.google.gwtorm.client.StringKeyTestCase.Parent p2 = new com.google.gwtorm.client.StringKeyTestCase.Parent ( STRING_CONSTANT ) ; p2 . fromString ( p1 . toString () ) ; assertEquals ( p1 , p2 ) ; }
@ java.lang.Override public SiteIndexer.Result indexAll ( final com.google.gerrit.server.index.project.ProjectIndex index ) { org.eclipse.jgit.lib.ProgressMonitor progress = new org.eclipse.jgit.lib.TextProgressMonitor ( new java.io.PrintWriter ( progressOut ) ) ; progress . start ( NUMBER_CONSTANT ) ; com.google.common.base.Stopwatch sw = com.google.common.base.Stopwatch . createStarted () ; java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > names ; try { names = collectProjects ( progress ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.index.project.AllProjectsIndexer.log . error ( STRING_CONSTANT , e ) ; return new com.google.gerrit.index.SiteIndexer.Result ( sw , false , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } return reindexProjects ( index , names , progress ) ; }
private void commit ( org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.server.group.db.GroupConfig groupConfig , com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes ) throws java.io.IOException { org.eclipse.jgit.lib.BatchRefUpdate batchRefUpdate = allUsersRepo . getRefDatabase () . newBatchUpdate () ; try ( com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate ( allUsersRepo , batchRefUpdate ) ) { groupConfig . commit ( metaDataUpdate ) ; } try ( com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate ( allUsersRepo , batchRefUpdate ) ) { groupNameNotes . commit ( metaDataUpdate ) ; } try ( org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk ( allUsersRepo ) ) { com.google.gerrit.server.update.RefUpdateUtil . executeChecked ( batchRefUpdate , revWalk ) ; } }
private static java.util.LinkedList < java.lang.String > chain ( com.google.gerrit.sshd.CommandName command ) { java.util.LinkedList < java.lang.String > chain = com.google.common.collect.Lists . newLinkedList () ; while ( command != null ) { chain . addFirst ( command . value () ) ; command = com.google.gerrit.sshd.Commands . parentOf ( command ) ; } chain . removeLast () ; return chain ; }
public void setInfo ( java.lang.String msg ) { if ( ( ( info ) == null ) && ( ( titlePanel ) != null ) ) { info = new com.google.gwt.user.client.ui.Image ( Gerrit.RESOURCES . info () ) ; titlePanel . add ( info ) ; } info . setTitle ( msg ) ; }
private void load ( ) throws java.io.IOException { if ( ( migration . writeChanges () ) && ( ( getRevision () ) == null ) ) { org.eclipse.jgit.lib.Repository repo = repoManager . openMetadataRepository ( getProjectName () ) ; try { load ( repo ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new java.io.IOException ( e ) ; } finally { repo . close () ; } } }
public java.lang.String getStatusDescription () { if ( ( exception ) != null ) { return getErrorDescription ( exception ) ; } else { switch ( status . getStatus () ) { case COMPLETE : return STRING_CONSTANT ; case CANCELLED : return STRING_CONSTANT ; default: return ( ( ( ( ( STRING_CONSTANT + ( currTask ) ) + STRING_CONSTANT ) + ( task ) ) + STRING_CONSTANT ) + ( lastPercentage ) ) + STRING_CONSTANT ; } } }
protected java.lang.String textTemplate ( java.lang.String name ) throws com.google.gerrit.common.errors.EmailException { java.lang.String velocityName = name + STRING_CONSTANT ; java.nio.file.Path filePath = args.site.mail_dir . resolve ( velocityName ) ; if ( java.nio.file.Files . isRegularFile ( filePath ) ) { return velocifyFile ( velocityName ) ; } else { return soyTextTemplate ( name ) ; } }
@ org.junit.Test ( expected = java.lang.IllegalStateException . class ) public void testRelativeAlternateLocation () { configMock = org.easymock.EasyMock . createNiceMock ( com.google.gerrit.server.config.RepositoryConfig . class ) ; org.easymock.EasyMock . expect ( configMock . getAllBasePaths () ) . andReturn ( java.util.Arrays . asList ( java.nio.file.Paths . get ( STRING_CONSTANT ) ) ) . anyTimes () ; org.easymock.EasyMock . replay ( configMock ) ; repoManager = new com.google.gerrit.server.git.MultiBaseLocalDiskRepositoryManager ( site , cfg , org.easymock.EasyMock . createNiceMock ( com.google.gerrit.server.notedb.NotesMigration . class ) , configMock ) ; }
@ java.lang.Override public synchronized < F1 , F2 , F3 > com.google.gerrit.metrics.Counter3 < F1 , F2 , F3 > newCounter ( java.lang.String name , com.google.gerrit.metrics.Description desc , com.google.gerrit.metrics.Field < F1 > field1 , com.google.gerrit.metrics.Field < F2 > field2 , com.google.gerrit.metrics.Field < F3 > field3 ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . checkCounterDescription ( desc ) ; com.google.gerrit.metrics.dropwizard.CounterImplN m = new com.google.gerrit.metrics.dropwizard.CounterImplN ( this , name , desc , field1 , field2 , field3 ) ; define ( name , desc ) ; bucketed . put ( name , m ) ; return m . counter3 () ; }
private void saveChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) { change = ctx . getChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx . getUpdate ( psId ) ; wasDraftChange = ( change . getStatus () ) == ( Change.Status.DRAFT ) ; if ( wasDraftChange ) { change . setStatus ( Change.Status.NEW ) ; update . setStatus ( change . getStatus () ) ; ctx . saveChange () ; } }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi cherryPick ( com.google.gerrit.extensions.api.changes.CherryPickInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changes . id ( cherryPick . get () . apply ( revision , in ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } catch ( com.google.gerrit.common.errors.EmailException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private static boolean sameUpdate ( com.google.gerrit.server.notedb.ChangeRebuilder.Event event , com.google.gerrit.server.notedb.ChangeUpdate update ) { return ( ( ( update != null ) && ( ( com.google.gerrit.server.notedb.ChangeRebuilder . round ( event.when ) ) == ( com.google.gerrit.server.notedb.ChangeRebuilder . round ( update . getWhen () ) ) ) ) && ( event.who . equals ( update . getUser () ) ) ) && ( event.psId . equals ( update . getPatchSetId () ) ) ; }
protected < T > void doInvoke ( final java.lang.String methodName , final boolean allowXsrf , final java.lang.String reqData , final com.google.gwtjsonrpc.client.JsonSerializer < T > ser , final com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) throws com.google.gwt.user.client.rpc.InvocationException { if ( ( url ) == null ) { throw new com.google.gwtjsonrpc.client.NoServiceEntryPointSpecifiedException () ; } new com.google.gwtjsonrpc.client.JsonCall < T > ( this , methodName , allowXsrf , reqData , ser , cb ) . send () ; }
public void assertChange ( com.google.gerrit.reviewdb.client.Change.Status expectedStatus , java.lang.String expectedTopic , com.google.gerrit.acceptance.TestAccount . . . expectedReviewers ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = getChange () . change () ; com.google.common.truth.Truth . assertThat ( resSubj ) . isEqualTo ( c . getSubject () ) ; com.google.common.truth.Truth . assertThat ( expectedStatus ) . isEqualTo ( c . getStatus () ) ; com.google.common.truth.Truth . assertThat ( expectedTopic ) . isEqualTo ( com.google.common.base.Strings . emptyToNull ( c . getTopic () ) ) ; assertReviewers ( c , expectedReviewers ) ; }
@ java.lang.Override protected void configure () { factory ( AddBranch.Factory . class ) ; factory ( AddRefRight.Factory . class ) ; factory ( ChangeProjectSettings.Factory . class ) ; factory ( DeleteBranches.Factory . class ) ; factory ( DeleteRefRights.Factory . class ) ; factory ( ListBranches.Factory . class ) ; factory ( VisibleProjects.Factory . class ) ; factory ( ProjectDetailFactory.Factory . class ) ; }
private void loadCommit ( final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev , com.google.gerrit.client.rpc.CallbackGroup group ) { if ( rev . isEdit () ) { return; } com.google.gerrit.client.changes.ChangeApi . commitWithLinks ( changeId . get () , rev . name () , group . add ( new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.CommitInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.info.ChangeInfo.CommitInfo info ) { rev . setCommit ( info ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) {} } ) ) ; }
public void testChildString () { final long pId = NUMBER_CONSTANT ; final long cId = NUMBER_CONSTANT ; final com.google.gwtorm.client.LongKeyTestCase.Child c1 = new com.google.gwtorm.client.LongKeyTestCase.Child ( new com.google.gwtorm.client.LongKeyTestCase.Parent ( pId ) , cId ) ; assertEquals ( ( ( pId + STRING_CONSTANT ) + cId ) , c1 . toString () ) ; final com.google.gwtorm.client.LongKeyTestCase.Child c2 = new com.google.gwtorm.client.LongKeyTestCase.Child ( new com.google.gwtorm.client.LongKeyTestCase.Parent ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; c2 . fromString ( c1 . toString () ) ; assertEquals ( c1 , c2 ) ; }
private org.eclipse.jgit.revwalk.RevObject resolve ( java.lang.String name , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException { try { org.eclipse.jgit.lib.ObjectId id = repo . resolve ( name ) ; return id != null ? walk . parseAny ( id ) : null ; } catch ( org.eclipse.jgit.errors.AmbiguousObjectException e ) { return null ; } catch ( org.eclipse.jgit.errors.RevisionSyntaxException e ) { return null ; } catch ( org.eclipse.jgit.errors.MissingObjectException e ) { return null ; } }
public static void copyLabels ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.common.data.LabelTypes labelTypes , com.google.gerrit.reviewdb.client.PatchSet.Id source , com.google.gerrit.reviewdb.client.PatchSet dest , com.google.gerrit.server.change.PatchSetInserter.ChangeKind changeKind ) throws com.google.gwtorm.server.OrmException { java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval > sourceApprovals = db . patchSetApprovals () . byPatchSet ( source ) ; com.google.gerrit.server.ApprovalsUtil . copyLabels ( db , labelTypes , sourceApprovals , source , dest , changeKind ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; project1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; com.google.gerrit.acceptance.GitUtil . createProject ( sshSession , project1 . get () ) ; project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; com.google.gerrit.acceptance.GitUtil . createProject ( sshSession , project2 . get () ) ; sshSession . close () ; }
public void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.RevisionInfo revision , com.google.gerrit.extensions.common.AccountInfo publisher , java.sql.Timestamp when ) { if ( ! ( listeners . iterator () . hasNext () ) ) { return; } com.google.gerrit.server.extensions.events.DraftPublished.Event event = new com.google.gerrit.server.extensions.events.DraftPublished.Event ( change , revision , publisher , when ) ; for ( com.google.gerrit.extensions.events.DraftPublishedListener l : listeners ) { try { l . onDraftPublished ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( com.google.gerrit.server.extensions.events.DraftPublished.log , e ) ; } } }
protected void assertCurrentRevision ( java.lang.String changeId , int expectedNum , org.eclipse.jgit.lib.ObjectId expectedId ) throws java.io.IOException { com.google.gerrit.extensions.common.ChangeInfo c = getChange ( changeId , com.google.gerrit.extensions.common.ListChangesOption.CURRENT_REVISION ) ; org.junit.Assert . assertEquals ( expectedId . name () , c.currentRevision ) ; org.junit.Assert . assertEquals ( expectedNum , c.revisions . get ( expectedId . name () ) . _number ) ; }
private void parseDelete ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { com.google.gerrit.server.project.RefControl ctl = projectControl . controlForRef ( cmd . getRefName () ) ; if ( ctl . canDelete () ) { cmd . execute ( rp ) ; } else { com.google.gerrit.server.git.ReceiveCommits . reject ( cmd , STRING_CONSTANT ) ; } }
private void enable ( boolean enabled ) { commitMessage . setEnabled ( enabled ) ; commit . setEnabled ( ( enabled ? ! ( access . getOwnerOf () . isEmpty () ) : false ) ) ; review . setEnabled ( ( enabled ? access . canUpload () : false ) ) ; cancel1 . setEnabled ( enabled ) ; cancel2 . setEnabled ( enabled ) ; }
private void sendCreateChange ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gerrit.common.errors.EmailException { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory . create ( change . getId () ) ; cm . setFrom ( ctx . getUser () . getAccountId () ) ; cm . setPatchSet ( patchSet , patchSetInfo ) ; cm . addReviewers ( recipients . getReviewers () ) ; cm . addExtraCC ( recipients . getCcOnly () ) ; cm . send () ; }
public static boolean canFastForward ( final com.google.gerrit.server.git.MergeSorter mergeSorter , final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final org.eclipse.jgit.revwalk.RevWalk rw , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { if ( com.google.gerrit.server.git.MergeUtil . hasMissingDependencies ( mergeSorter , toMerge ) ) { return false ; } try { return ( mergeTip == null ) || ( rw . isMergedInto ( mergeTip , toMerge ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.git.MergeException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public com.google.gerrit.server.project.ProjectState load ( java.lang.String projectName ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey key = new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; org.eclipse.jgit.lib.Repository git = mgr . openRepository ( key ) ; try { com.google.gerrit.server.git.ProjectConfig cfg = new com.google.gerrit.server.git.ProjectConfig ( key ) ; cfg . load ( git ) ; return projectStateFactory . create ( cfg ) ; } finally { git . close () ; } }
public com.google.gitiles.GitilesView.Builder setRepositoryPrefix ( java.lang.String prefix ) { switch ( type ) { case HOST_INDEX : this . repositoryPrefix = ( prefix != null ) ? com.google.common.base.Strings . emptyToNull ( com.google.gitiles.GitilesView . maybeTrimLeadingAndTrailingSlash ( prefix ) ) : null ; return this ; case ARCHIVE : case BLAME : case DESCRIBE : case DIFF : case DOC : case LOG : case PATH : case REFS : case REPOSITORY_INDEX : case REVISION : case ROOTED_DOC : case SHOW : default: throw new java.lang.IllegalStateException ( java.lang.String . format ( STRING_CONSTANT , type ) ) ; } }
private java.lang.String readOutput ( java.io.InputStream is ) throws java.io.IOException { output = new java.io.StringWriter () ; java.io.InputStreamReader input = new java.io.InputStreamReader ( is ) ; char [] buffer = new char [ NUMBER_CONSTANT ] ; int n = NUMBER_CONSTANT ; while ( ( n = input . read ( buffer ) ) != ( - NUMBER_CONSTANT ) ) { output . write ( buffer , NUMBER_CONSTANT , n ) ; } return output . toString () ; }
private void savePatchSet ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { patchSet = ctx . getDb () . patchSets () . get ( psId ) ; if ( ! ( patchSet . isDraft () ) ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } patchSet . setDraft ( false ) ; }
void resizePaddingWidget () { com.google.gwt.core.client.Scheduler . get () . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand () { public void execute () { if ( ( ( selfWidget ) == null ) || ( ( widgetManager ) == null ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } selfWidget . changed () ; widgetManager . resizePaddingWidget () ; } } ) ; }
@ java.lang.Override protected void configure () { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.extensions.webui.TopMenu . class ) . to ( com.googlesource.gerrit.plugins.manager.PluginManagerTopMenu . class ) ; bind ( com.googlesource.gerrit.plugins.manager.repository.PluginsRepository . class ) . to ( com.googlesource.gerrit.plugins.manager.repository.JenkinsCiPluginsRepository . class ) ; install ( com.googlesource.gerrit.plugins.manager.PluginsCentralCache . module () ) ; bind ( com.google.gerrit.extensions.events.LifecycleListener . class ) . annotatedWith ( com.google.inject.internal.UniqueAnnotations . create () ) . to ( com.googlesource.gerrit.plugins.manager.OnStartStop . class ) ; }
private static synchronized javax.sql.DataSource newDataSource ( ) throws java.sql.SQLException { final java.util.Properties p = new java.util.Properties () ; p . setProperty ( STRING_CONSTANT , org.h2.Driver . class . getName () ) ; p . setProperty ( STRING_CONSTANT , ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( ++ ( com.google.gerrit.testutil.InMemoryDatabase.dbCnt ) ) ) ) ; final javax.sql.DataSource dataSource = new com.google.gwtorm.jdbc.SimpleDataSource ( p ) ; return dataSource ; }
private void migrateStartReplicationCapability ( com.google.gerrit.reviewdb.server.ReviewDb db , java.io.File [] matches ) throws java.io.IOException , java.sql.SQLException , org.eclipse.jgit.errors.ConfigInvalidException , org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.schema.Schema_81.Description d = new com.google.gerrit.server.schema.Schema_81.Description () ; if ( ( matches == null ) || ( ( matches.length ) == NUMBER_CONSTANT ) ) { d.what = com.google.gerrit.server.schema.Schema_81.Description.Action.REMOVE ; } else { d.what = com.google.gerrit.server.schema.Schema_81.Description.Action.RENAME ; d.prefix = com.google.gerrit.server.schema.Schema_81 . nameOf ( matches [ NUMBER_CONSTANT ] ) ; } migrateStartReplicationCapability ( db , d ) ; }
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory . create ( getProjectName () ) ; updateManager . add ( this ) ; com.google.gerrit.server.notedb.NoteDbChangeState . applyDelta ( getChange () , updateManager . stage () . get ( ctl . getId () ) ) ; updateManager . execute () ; return getResult () ; }
public synchronized void addWriteIndex ( com.google.gerrit.server.index.ChangeIndex index ) { int version = index . getSchema () . getVersion () ; for ( com.google.gerrit.server.index.ChangeIndex i : writeIndexes ) { if ( ( i . getSchema () . getVersion () ) == version ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_CONSTANT + version ) + STRING_CONSTANT ) ) ; } } writeIndexes . add ( index ) ; }
private PatchSet.Id parsePatchSetId ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.util.List < java.lang.String > psIdLines = commit . getFooterLines ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET ) ; if ( ( psIdLines . size () ) != NUMBER_CONSTANT ) { throw parseException ( STRING_CONSTANT , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET , psIdLines ) ; } java.lang.Integer psId = com.google.common.primitives.Ints . tryParse ( psIdLines . get ( NUMBER_CONSTANT ) ) ; if ( psId == null ) { throw parseException ( STRING_CONSTANT , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET , psIdLines . get ( NUMBER_CONSTANT ) ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getId () , psId ) ; }
@ org.junit.Test public void createNewChangeSignedOffByFooter ( ) throws java.lang.Exception { HEAD ( NUMBER_CONSTANT ) ; com.google.gerrit.acceptance.rest.change.af28d Merge ; into ( ( ( stable ) - NUMBER_CONSTANT ) ) ; setSignedOffByFooter () ; com.google.gerrit.extensions.common.ChangeInfo info = assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; java.lang.String message = info.revisions . get ( info.currentRevision ) . commit . message ; com.google.common.truth.Truth . assertThat ( message ) . contains ( java.lang.String . format ( STRING_CONSTANT , org.eclipse.jgit.lib.Constants.SIGNED_OFF_BY_TAG , admin . getIdent () . getEmailAddress () ) ) ; }
private static com.google.gerrit.testutil.FakeEmailSender.Message create ( com.google.gerrit.server.mail.Address from , java.util.Collection < com.google.gerrit.server.mail.Address > rcpt , java.util.Map < java.lang.String , com.google.gerrit.server.mail.send.EmailHeader > headers , java.lang.String body , java.lang.String htmlBody ) { return new com.google.gerrit.testutil.AutoValue_FakeEmailSender_Message ( from , com.google.common.collect.ImmutableList . copyOf ( rcpt ) , com.google.common.collect.ImmutableMap . copyOf ( headers ) , body , htmlBody ) ; }
private void merge ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { revision ( r ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . approve () ) ; revision ( r ) . submit () ; org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( project ) ; try { org.junit.Assert . assertEquals ( r . getCommitId () , repo . getRef ( STRING_CONSTANT ) . getObjectId () ) ; } finally { repo . close () ; } }
public void testReadString ( ) throws java.io.IOException { assertNull ( com.google.gerrit.server.ioutil.BasicSerialization . readString ( com.google.gerrit.server.ioutil.BasicSerializationTest . r ( com.google.gerrit.server.ioutil.BasicSerializationTest . b ( NUMBER_CONSTANT ) ) ) ) ; assertEquals ( STRING_CONSTANT , com.google.gerrit.server.ioutil.BasicSerialization . readString ( com.google.gerrit.server.ioutil.BasicSerializationTest . r ( com.google.gerrit.server.ioutil.BasicSerializationTest . b ( NUMBER_CONSTANT , CHAR_CONS ) ) ) ) ; assertEquals ( STRING_CONSTANT , com.google.gerrit.server.ioutil.BasicSerialization . readString ( com.google.gerrit.server.ioutil.BasicSerializationTest . r ( com.google.gerrit.server.ioutil.BasicSerializationTest . b ( NUMBER_CONSTANT , CHAR_CONS , CHAR_CONS , CHAR_CONS , CHAR_CONS , CHAR_CONS , CHAR_CONS , CHAR_CONS ) ) ) ) ; }
@ org.junit.Test public void voteOnBehalfOfInvalidLabel ( ) throws java.lang.Exception { allowCodeReviewOnBehalfOf () ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi . changes () . id ( r . getChangeId () ) . current () ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput () ; in.onBehalfOf = user.id . toString () ; in . label ( STRING_CONSTANT , NUMBER_CONSTANT ) ; exception . expect ( com.google.gerrit.extensions.restapi.BadRequestException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; revision . review ( in ) ; }
@ java.lang.Override public com.google.gerrit.server.group.GroupInfo apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.AddIncludedGroups.PutIncludedGroup.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddIncludedGroups.Input in = new com.google.gerrit.server.group.AddIncludedGroups.Input () ; in.groups = com.google.common.collect.ImmutableList . of ( id ) ; java.util.List < com.google.gerrit.server.group.GroupInfo > list = put . get () . apply ( resource , in ) ; if ( ( list . size () ) == NUMBER_CONSTANT ) { return list . get ( NUMBER_CONSTANT ) ; } else { throw new java.lang.IllegalStateException () ; } }
private static com.google.gerrit.server.account.AccountState missing ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil . nowTs () ) ; account . setActive ( false ) ; java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids = java.util.Collections . emptySet () ; java.util.Collection < com.google.gerrit.reviewdb.client.AccountProjectWatch > projectWatches = java.util.Collections . emptySet () ; java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > anon = com.google.common.collect.ImmutableSet . of () ; return new com.google.gerrit.server.account.AccountState ( account , anon , ids , projectWatches ) ; }
java.lang.Runnable navigate ( com.google.gerrit.client.diff.Direction dir ) { switch ( dir ) { case PREV : return ( ) - > { ( hasPrev ? prev : up ) . go () ; } ; case NEXT : return ( ) - > { ( hasNext ? next : up ) . go () ; } ; default: return ( ) - > {} ; } }
private java.util.Set < com.google.gerrit.server.git.CodeReviewCommit > commits ( java.util.List < com.google.gerrit.server.query.change.ChangeData > cds ) throws com.google.gwtorm.server.OrmException { java.util.LinkedHashSet < com.google.gerrit.server.git.CodeReviewCommit > result = com.google.common.collect.Sets . newLinkedHashSetWithExpectedSize ( cds . size () ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : cds ) { com.google.gerrit.server.git.CodeReviewCommit commit = commits . get ( cd . getId () ) ; com.google.common.base.Preconditions . checkState ( ( commit != null ) , STRING_CONSTANT , cd . change () . getId () ) ; result . add ( commit ) ; } return result ; }
@ org.junit.Test public void commentOnReviewableChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setApiUser ( sc.owner ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override protected void initColumnHeaders () { super . initColumnHeaders () ; if ( ( com.google.gerrit.client.Gerrit . getGitwebLink () ) != null ) { table . setText ( NUMBER_CONSTANT , ProjectsTable.C_REPO_BROWSER , Util.C . projectRepoBrowser () ) ; table . getFlexCellFormatter () . addStyleName ( NUMBER_CONSTANT , ProjectsTable.C_REPO_BROWSER , Gerrit.RESOURCES . css () . dataHeader () ) ; } }
private void runImpl ( ) throws java.io.IOException { org.eclipse.jgit.transport.Transport tn = org.eclipse.jgit.transport.Transport . open ( git , uri ) ; org.eclipse.jgit.transport.PushResult res ; try { res = pushVia ( tn ) ; updateHead () ; } finally { try { tn . close () ; } catch ( java.lang.Throwable e2 ) { com.googlesource.gerrit.plugins.replication.PushOne.repLog . warn ( ( STRING_CONSTANT + ( uri ) ) , e2 ) ; } } updateStates ( res . getRemoteUpdates () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > files ( java.lang.String base ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return ( ( java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > ) ( listFiles . get () . setBase ( base ) . apply ( revision ) . value () ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
public < T > java.util.List < T > getTaskInfos ( com.google.gerrit.server.git.TaskInfoFactory < T > factory ) { java.util.List < T > taskInfos = com.google.common.collect.Lists . newArrayList () ; for ( com.google.gerrit.server.git.WorkQueue.Executor exe : queues ) { for ( com.google.gerrit.server.git.WorkQueue.Task < > task : exe . getTasks () ) { taskInfos . add ( factory . getTaskInfo ( task ) ) ; } } return taskInfos ; }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi rebase ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changes . id ( rebase . get () . apply ( revision , null ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } catch ( com.google.gerrit.common.errors.EmailException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public void stop () { I read = searchIndex . get () ; if ( read != null ) { read . close () ; } for ( I write : writeIndexes ) { if ( write != read ) { write . stop () ; write . close () ; } } }
public boolean isAssignee () { com.google.gerrit.reviewdb.client.Account.Id currentAssignee = notes . getChange () . getAssignee () ; if ( ( currentAssignee != null ) && ( getUser () . isIdentifiedUser () ) ) { com.google.gerrit.reviewdb.client.Account.Id id = getUser () . getAccountId () ; return id . equals ( currentAssignee . get () ) ; } return false ; }
private static org.eclipse.jgit.lib.ObjectId writeNewTree ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation op , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectInserter ins , org.eclipse.jgit.revwalk.RevCommit prevEdit , org.eclipse.jgit.lib.ObjectReader reader , java.lang.String fileName , byte [] content , org.eclipse.jgit.revwalk.RevCommit base ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.dircache.DirCache newTree = com.google.gerrit.server.edit.ChangeEditModifier . createTree ( reader , prevEdit ) ; com.google.gerrit.server.edit.ChangeEditModifier . editTree ( op , repo , rw , base , newTree . editor () , ins , fileName , content ) ; return newTree . writeTree ( ins ) ; }
@ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine () ; final com.google.gerrit.sshd.commands.QueryShell shell = factory . create ( in , out ) ; shell . setOutputFormat ( format ) ; if ( ( query ) != null ) { shell . execute ( query ) ; } else { shell . run () ; } }
public void testUnblockNoForce () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canUpdate () ) ; }
public java.lang.String getCookieText ( final java.lang.String cookieName ) { final java.lang.String val = com.google.gwtjsonrpc.client.CookieAccess . get ( cookieName ) ; boolean ok ; try { ok = checkToken ( val , null ) ; } catch ( com.google.gwtjsonrpc.server.XsrfException e ) { ok = false ; } return ok ? com.google.gwtjsonrpc.client.CookieAccess . getTokenText ( cookieName ) : null ; }
@ java.lang.Override public void onOpen ( final com.google.gwt.event.logical.shared.OpenEvent < com.google.gwt.user.client.ui.DisclosurePanel > event ) { if ( ( infoTable ) == null ) { Util.DETAIL_SVC . patchSetDetail ( patchSet . getId () , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.common.data.PatchSetDetail > () { public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { ensureLoaded ( result ) ; patchTable . setRegisterKeys ( true ) ; } } ) ; } }
@ org.junit.Test public void setParent_Forbidden ( ) throws java.lang.Exception { java.lang.String parent = STRING_CONSTANT ; com.google.gerrit.acceptance.GitUtil . createProject ( sshSession , parent , null , true ) ; com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , newParentInput ( parent ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; r . consume () ; }
private void initColumns ( ) throws com.google.gwtorm.server.OrmException { final java.util.List < com.google.gwtorm.schema.java.JavaColumnModel > col = new java.util.ArrayList < com.google.gwtorm.schema.java.JavaColumnModel > () ; java.lang.Class < > in = entityType ; while ( in != null ) { for ( final java.lang.reflect.Field f : in . getDeclaredFields () ) { if ( ( f . getAnnotation ( com.google.gwtorm.client.Column . class ) ) != null ) { col . add ( new com.google.gwtorm.schema.java.JavaColumnModel ( f ) ) ; } } in = in . getSuperclass () ; } initColumns ( col ) ; }
@ com.google.inject.Provides @ com.google.inject.Singleton @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET ) javax.servlet.http.HttpServlet getGwtUiServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { com.google.gerrit.httpd.raw.StaticModule.Paths p = getPaths () ; if ( ( p.warFs ) != null ) { return new com.google.gerrit.httpd.raw.WarGwtUiServlet ( cache , p.warFs ) ; } else { return new com.google.gerrit.httpd.raw.DirectoryGwtUiServlet ( cache , p.unpackedWar , p . isDev () ) ; } }
public com.google.gerrit.server.git.ChangeSet completeChangeSet ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory . create ( db , change . getProject () , change . getId () ) ; cd . changeControl ( user ) ; if ( com.google.gerrit.server.change.Submit . wholeTopicEnabled ( cfg ) ) { return completeChangeSetIncludingTopics ( db , new com.google.gerrit.server.git.ChangeSet ( cd , db , null ) , user ) ; } return completeChangeSetWithoutTopic ( db , new com.google.gerrit.server.git.ChangeSet ( cd , db , null ) , user ) ; }
@ org.junit.Test public void filterOutAllResults ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; int user2 = accountManager . authenticate ( com.google.gerrit.server.account.AuthRequest . forUser ( STRING_CONSTANT ) ) . getAccountId () . get () ; for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { newChange ( repo , null , null , user2 , null ) . insert () ; } assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testCreateProjectApiWithGitSuffix ( ) throws java.lang.Exception { final java.lang.String newProjectName = STRING_CONSTANT ; com.google.gerrit.extensions.common.ProjectInfo p = gApi . projects () . name ( ( newProjectName + STRING_CONSTANT ) ) . create () . get () ; com.google.common.truth.Truth . assertThat ( p.name ) . isEqualTo ( newProjectName ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( newProjectName ) ) ; com.google.common.truth.Truth . assertThat ( projectState ) . isNotNull () ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjectInfo ( projectState . getProject () , p ) ; assertHead ( newProjectName , STRING_CONSTANT ) ; }
private void parsePostRequest ( final CallType call ) throws java.io.IOException , java.io.UnsupportedEncodingException { try { final com.google.gson.GsonBuilder gb = createGsonBuilder () ; gb . registerTypeAdapter ( com.google.gwtjsonrpc.server.ActiveCall . class , new com.google.gwtjsonrpc.server.CallDeserializer < CallType > ( call , this ) ) ; gb . create () . fromJson ( com.google.gwtjsonrpc.server.JsonServlet . readBody ( call ) , com.google.gwtjsonrpc.server.ActiveCall . class ) ; } catch ( com.google.gson.JsonParseException err ) { call.method = null ; call.params = null ; throw err ; } }
@ java.lang.Override protected void configure () { com.google.gerrit.extensions.registration.DynamicMap . mapOf ( binder () , com.googlesource.gerrit.plugins.imagare.ImageResource.IMAGE_KIND ) ; bind ( com.googlesource.gerrit.plugins.imagare.ImagesCollection . class ) ; child ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , STRING_CONSTANT ) . to ( com.googlesource.gerrit.plugins.imagare.ImagesCollection . class ) ; delete ( com.googlesource.gerrit.plugins.imagare.ImageResource.IMAGE_KIND ) . to ( com.googlesource.gerrit.plugins.imagare.DeleteImage . class ) ; get ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , STRING_CONSTANT ) . to ( com.googlesource.gerrit.plugins.imagare.GetConfig . class ) ; put ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , STRING_CONSTANT ) . to ( com.googlesource.gerrit.plugins.imagare.PutConfig . class ) ; get ( com.google.gerrit.server.account.AccountResource.ACCOUNT_KIND , STRING_CONSTANT ) . to ( com.googlesource.gerrit.plugins.imagare.GetPreference . class ) ; put ( com.google.gerrit.server.account.AccountResource.ACCOUNT_KIND , STRING_CONSTANT ) . to ( com.googlesource.gerrit.plugins.imagare.PutPreference . class ) ; }
@ org.junit.Test public void getRelatedNoResult ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = push . to ( git , STRING_CONSTANT ) . getPatchSetId () ; java.util.List < com.google.gerrit.server.change.GetRelated.ChangeAndCommit > related = getRelated ( ps ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , related . size () ) ; }
@ org.junit.Test public void testCreateProject ( ) throws java.lang.Exception { final java.lang.String newProjectName = STRING_CONSTANT ; com.google.gerrit.extensions.common.ProjectInfo p = gApi . projects () . create ( newProjectName ) . get () ; com.google.common.truth.Truth . assertThat ( p.name ) . isEqualTo ( newProjectName ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( newProjectName ) ) ; com.google.common.truth.Truth . assertThat ( projectState ) . isNotNull () ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjectInfo ( projectState . getProject () , p ) ; assertHead ( newProjectName , STRING_CONSTANT ) ; }
private com.google.gerrit.reviewdb.client.AccountGroup group ( java.lang.String name ) throws java.lang.Exception { com.google.gerrit.server.account.CreateGroupArgs args = new com.google.gerrit.server.account.CreateGroupArgs () ; args . setGroupName ( name ) ; args.initialMembers = java.util.Collections . singleton ( admin . getId () ) ; return createGroupFactory . create ( args ) . createGroup () ; }
private void delete ( java.lang.String path ) { hide () ; com.google.gerrit.client.changes.ChangeEditApi . delete ( changeId . get () , path , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChangeInEditMode ( changeId ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) {} } ) ; }
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String login , java.lang.String name , java.lang.String email ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.AccountExternalId.Key userExtKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME , login ) ; com.google.gerrit.reviewdb.server.AccountExternalIdAccess gerritExtIds = db . accountExternalIds () ; com.google.gerrit.reviewdb.client.AccountExternalId userExtId = gerritExtIds . get ( userExtKey ) ; if ( userExtId == null ) { return accountImporter . importAccount ( login , name , email ) ; } else { return userExtId . getAccountId () ; } }
protected java.util.SortedSet < java.lang.String > cacheNames () { final java.util.SortedSet < java.lang.String > names = new java.util.TreeSet < java.lang.String > () ; names . add ( STRING_CONSTANT ) ; for ( final net.sf.ehcache.Ehcache c : getAllCaches () ) { names . add ( c . getName () ) ; } return names ; }
private static java.lang.StringBuilder buildRefsPrefix ( java.lang.String prefix , com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = new java.lang.StringBuilder () ; r . append ( prefix ) ; int n = ( accountId . get () ) % NUMBER_CONSTANT ; if ( n < NUMBER_CONSTANT ) { r . append ( CHAR_CONS ) ; } r . append ( n ) ; r . append ( CHAR_CONS ) ; r . append ( accountId . get () ) ; r . append ( CHAR_CONS ) ; return r ; }
private static void codemirrorForEdit ( final java.lang.String token , final com.google.gerrit.reviewdb.client.Patch.Key id , final int line ) { com.google.gwt.core.client.GWT . runAsync ( new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { @ java.lang.Override public void onSuccess () { com.google.gerrit.client.Gerrit . display ( token , new com.google.gerrit.client.editor.EditScreen ( id , line ) ) ; } } ) ; }
com.google.gerrit.httpd.WebSessionManager.Val createVal ( final com.google.gerrit.httpd.WebSessionManager.Key key , final com.google.gerrit.httpd.WebSessionManager.Val val ) { final com.google.gerrit.reviewdb.client.Account.Id who = val . getAccountId () ; final boolean remember = val . isPersistentCookie () ; final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val . getExternalId () ; return createVal ( key , who , remember , lastLogin , val.sessionId ) ; }
private long getSeconds ( java.lang.String n , java.lang.String setting , long def ) { final long d = java.util.concurrent.TimeUnit.MINUTES . convert ( def , java.util.concurrent.TimeUnit.SECONDS ) ; final long m ; m = com.google.gerrit.server.config.ConfigUtil . getTimeUnit ( config , STRING_CONSTANT , n , setting , d , java.util.concurrent.TimeUnit.MINUTES ) ; return java.util.concurrent.TimeUnit.SECONDS . convert ( m , java.util.concurrent.TimeUnit.MINUTES ) ; }
private void add ( com.google.gerrit.reviewdb.server.ReviewDb db , java.util.List < com.google.gerrit.sshd.SshKeyCacheEntry > kl , com.google.gerrit.reviewdb.client.AccountSshKey k ) { try { kl . add ( new com.google.gerrit.sshd.SshKeyCacheEntry ( k . getKey () , com.google.gerrit.sshd.SshUtil . parse ( k ) ) ) ; } catch ( java.lang.OutOfMemoryError e ) { throw e ; } catch ( java.lang.Throwable e ) { markInvalid ( db , k ) ; } }
@ org.junit.Test public void commentOnWipChangeByOwnerNotifyAll ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private com.google.gerrit.httpd.raw.HostPageServlet.Page get () { com.google.gerrit.httpd.raw.HostPageServlet.Page p = page ; if ( ( refreshHeaderFooter ) && ( p . isStale () ) ) { final com.google.gerrit.httpd.raw.HostPageServlet.Page newPage ; try { newPage = new com.google.gerrit.httpd.raw.HostPageServlet.Page () ; } catch ( java.io.IOException e ) { com.google.gerrit.httpd.raw.HostPageServlet.log . error ( STRING_CONSTANT , e ) ; return p ; } p = newPage ; page = p ; } return p ; }
@ org.junit.Test public void noConflictingChanges ( ) throws com.jcraft.jsch.JSchException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.api.Git git = createProject () ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git , true ) ; createChange ( git , false ) ; java.util.Set < java.lang.String > changes = queryConflictingChanges ( change ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , changes . size () ) ; }
private java.util.Set < java.lang.String > getAllGroups ( com.google.gerrit.server.notedb.ChangeNotes notes ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > result = new java.util.HashSet <> () ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : psUtil . byChange ( db . get () , notes ) ) { java.util.List < java.lang.String > groups = ps . getGroups () ; if ( groups != null ) { result . addAll ( groups ) ; } } return result ; }
public void add ( com.google.gerrit.extensions.registration.RegistrationHandle handle ) { if ( ( manager ) != null ) { if ( handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle ) { if ( ( reloadableHandles ) == null ) { reloadableHandles = com.google.common.collect.Lists . newArrayList () ; } reloadableHandles . add ( ( ( com.google.gerrit.extensions.registration.ReloadableRegistrationHandle < > ) ( handle ) ) ) ; } manager . add ( handle ) ; } }
@ java.lang.Override public com.google.gerrit.common.data.ChangeDetail call ( ) throws com.google.gerrit.common.errors.NoSuchEntityException , com.google.gerrit.server.mail.EmailException , com.google.gerrit.server.patch.PatchSetInfoNotAvailableException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { final com.google.gerrit.common.data.ReviewResult result = abandonChangeFactory . create ( patchSetId , message ) . call () ; if ( ( result . getErrors () . size () ) > NUMBER_CONSTANT ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( result . getChangeId () ) ; } return changeDetailFactory . create ( result . getChangeId () ) . call () ; }
public void testUnblockForceWithAllowNoForce_NotPossible () { com.google.gerrit.common.data.PermissionRule r = com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) ; r . setBlock () ; r . setForce ( true ) ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canForceUpdate () ) ; }
protected void setUseSignedOffBy ( com.google.gerrit.extensions.client.InheritableBoolean value ) throws java.lang.Exception { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory . create ( project ) ; com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig . read ( md ) ; config . getProject () . setUseSignedOffBy ( value ) ; config . commit ( md ) ; projectCache . evict ( config . getProject () ) ; }
public void patchScript ( final com.google.gerrit.reviewdb.client.Patch.Key patchKey , final com.google.gerrit.reviewdb.client.PatchSet.Id psa , final com.google.gerrit.reviewdb.client.PatchSet.Id psb , final com.google.gerrit.reviewdb.client.AccountDiffPreference dp , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.PatchScript > callback ) { if ( psb == null ) { callback . onFailure ( new com.google.gerrit.common.errors.NoSuchEntityException () ) ; return; } com.google.gerrit.httpd.rpc.Handler . wrap ( patchScriptFactoryFactory . create ( patchKey , psa , psb , dp ) ) . to ( callback ) ; }
public static void scheduleUpdate ( final com.google.gerrit.client.reviewdb.Project.NameKey project , final java.lang.String ref ) { for ( final com.google.gerrit.git.PushQueue.ReplicationConfig cfg : com.google.gerrit.git.PushQueue . allConfigs () ) { if ( cfg . wouldPushRef ( ref ) ) { for ( final org.spearce.jgit.transport.URIish uri : cfg . getURIs ( project ) ) { com.google.gerrit.git.PushQueue . scheduleImp ( project , ref , cfg , uri ) ; } } } }
@ java.lang.Override protected void configure () { bind ( java.util.concurrent.ScheduledThreadPoolExecutor . class ) . annotatedWith ( com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor . class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.ExecutorProvider . class ) ; bind ( com.googlesource.gerrit.plugins.webhooks.Configuration . class ) . in ( Scopes.SINGLETON ) ; bind ( org.apache.http.impl.client.CloseableHttpClient . class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.HttpClientProvider . class ) . in ( Scopes.SINGLETON ) ; factory ( PostTask.Factory . class ) ; factory ( RemoteConfig.Factory . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.common.EventListener . class ) . to ( com.googlesource.gerrit.plugins.webhooks.EventHandler . class ) ; install ( processors ) ; }
@ java.lang.Override public void onStop ( com.google.gerrit.server.plugins.Plugin plugin ) { synchronized ( caches ) { for ( java.util.Map.Entry < java.lang.String , com.google.inject.Provider < com.google.common.cache.Cache < , > > > entry : cacheMap . byPlugin ( plugin . getName () ) . entrySet () ) { com.google.common.cache.Cache < , > cache = entry . getValue () . get () ; if ( caches . remove ( cache ) ) { ( ( com.google.gerrit.server.cache.h2.H2CacheImpl < , > ) ( cache ) ) . stop () ; } } } }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.index.IndexConfig . class ) . toInstance ( com.google.gerrit.server.index.IndexConfig . createDefault () ) ; factory ( LuceneChangeIndex.Factory . class ) ; install ( new com.google.gerrit.server.index.IndexModule ( threads ) ) ; if ( ( ( singleVersion ) == null ) && ( ( base ) == null ) ) { install ( new com.google.gerrit.lucene.LuceneIndexModule.MultiVersionModule () ) ; } else { install ( new com.google.gerrit.lucene.LuceneIndexModule.SingleVersionModule () ) ; } }
public com.google.gerrit.common.data.AccountInfoCache create () { final java.util.List < com.google.gerrit.common.data.AccountInfo > r = new java.util.ArrayList < com.google.gerrit.common.data.AccountInfo > ( out . size () ) ; for ( final com.google.gerrit.reviewdb.client.Account a : out . values () ) { r . add ( new com.google.gerrit.common.data.AccountInfo ( a ) ) ; } return new com.google.gerrit.common.data.AccountInfoCache ( r ) ; }
public static void getContent ( boolean editExists , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String filename , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.String > cb ) { com.google.gerrit.client.changes.ChangeFileApi . contentEditOrPs ( editExists , id , filename ) . get ( new com.google.gerrit.client.changes.ChangeFileApi.CallbackWrapper < com.google.gerrit.client.rpc.NativeString , java.lang.String > ( cb ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeString b64 ) { wrapped . onSuccess ( com.google.gerrit.client.changes.ChangeFileApi . b64decode ( b64 . asString () ) ) ; } } ) ; }
private int limit ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > s ) { int n = ( queryBuilder . hasLimit ( s ) ) ? queryBuilder . getLimit ( s ) : maxLimit ; return ( limit ) > NUMBER_CONSTANT ? ( java.lang.Math . min ( n , limit ) ) + NUMBER_CONSTANT : n ; }
private boolean canRebase ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( isOwner () ) || ( refControl . canSubmit ( isOwner () ) ) ) || ( refControl . canRebase () ) ) && ( refControl . asForRef () . testOrFalse ( RefPermission.CREATE_CHANGE ) ) ) && ( getProjectControl () . getProjectState () . statePermitsWrite () ) ) && ( ! ( isPatchSetLocked ( db ) ) ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.reviewdb.AccountGroup.Id groupId ) throws com.google.gerrit.common.errors.NoSuchGroupException { final com.google.gerrit.reviewdb.AccountGroup group = groupCache . get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.common.errors.NoSuchGroupException ( groupId ) ; } return new com.google.gerrit.server.account.GroupControl ( user . get () , group ) ; }
private void parsePostRequest ( final CallType call ) throws java.io.IOException , java.io.UnsupportedEncodingException { try { final com.google.gson.GsonBuilder gb = createGsonBuilder () ; gb . registerTypeAdapter ( com.google.gwtjsonrpc.server.ActiveCall . class , new com.google.gwtjsonrpc.server.CallDeserializer < CallType > ( call , this ) ) ; gb . create () . fromJson ( readBody ( call ) , com.google.gwtjsonrpc.server.ActiveCall . class ) ; } catch ( com.google.gson.JsonParseException err ) { call.method = null ; call.params = null ; throw err ; } }
protected org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.InMemoryRepository > createProject ( java.lang.String name ) throws java.lang.Exception { com.google.gerrit.server.project.CreateProject create = projectFactory . create ( name ) ; create . apply ( com.google.gerrit.server.query.change.AbstractQueryChangesTest.TLR , new com.google.gerrit.extensions.api.projects.ProjectInput () ) ; return new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.InMemoryRepository > ( repoManager . openRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.common.data.ReviewerInfo > result ) { final java.util.List < com.google.gerrit.client.ui.ReviewerSuggestOracle.ReviewerSuggestion > r = new java.util.ArrayList < com.google.gerrit.client.ui.ReviewerSuggestOracle.ReviewerSuggestion > ( result . size () ) ; for ( final com.google.gerrit.common.data.ReviewerInfo reviewer : result ) { r . add ( new com.google.gerrit.client.ui.ReviewerSuggestOracle.ReviewerSuggestion ( reviewer ) ) ; } callback . onSuggestionsReady ( req , new com.google.gerrit.client.ui.Response ( r ) ) ; }
private static org.apache.lucene.store.Directory dir ( com.google.gerrit.server.index.Schema < com.google.gerrit.reviewdb.client.AccountGroup > schema , org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths ) throws java.io.IOException { if ( com.google.gerrit.lucene.LuceneIndexModule . isInMemoryTest ( cfg ) ) { return new org.apache.lucene.store.RAMDirectory () ; } java.nio.file.Path indexDir = com.google.gerrit.lucene.LuceneVersionManager . getDir ( sitePaths , ( ( com.google.gerrit.lucene.LuceneGroupIndex.GROUPS ) + STRING_CONSTANT ) , schema ) ; return org.apache.lucene.store.FSDirectory . open ( indexDir ) ; }
@ java.lang.Override public boolean evict ( final java.lang.String cacheName , final java.lang.Object key ) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request ( ( ( ( ( STRING_CONSTANT + cacheName ) + STRING_CONSTANT ) + ( keyToString ( key ) ) ) + STRING_CONSTANT ) ) { @ java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send ( ) throws java.io.IOException { java.lang.String json = com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser . toJson ( cacheName , key ) ; return httpSession . post ( com.google.common.base.Joiner . on ( STRING_CONSTANT ) . join ( pluginRelativePath , STRING_CONSTANT , cacheName ) , json ) ; } } . execute () ; }
@ org.junit.Test public void byId ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( newChange ( repo ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( change1 . getId () . get () , change1 ) ; assertQuery ( change2 . getId () . get () , change2 ) ; }
@ java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo apply ( com.google.gerrit.server.change.ChangeResource req , final com.google.gerrit.extensions.api.changes.AbandonInput input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl control = req . getControl () ; com.google.gerrit.server.IdentifiedUser caller = control . getUser () . asIdentifiedUser () ; if ( ! ( control . canAbandon ( dbProvider . get () ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( STRING_CONSTANT ) ; } com.google.gerrit.reviewdb.client.Change change = abandon ( control , input.message , caller . getAccount () ) ; return json . create ( ChangeJson.NO_OPTIONS ) . format ( change ) ; }
@ java.lang.Override protected void configure () { bind ( java.util.concurrent.ScheduledExecutorService . class ) . annotatedWith ( com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor . class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.ExecutorProvider . class ) ; bind ( com.googlesource.gerrit.plugins.webhooks.Configuration . class ) . in ( Scopes.SINGLETON ) ; bind ( org.apache.http.impl.client.CloseableHttpClient . class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.HttpClientProvider . class ) . in ( Scopes.SINGLETON ) ; factory ( PostTask.Factory . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.common.EventListener . class ) . to ( com.googlesource.gerrit.plugins.webhooks.EventHandler . class ) ; }
private com.google.gerrit.server.account.AuthResult byUserName ( final java.lang.String userName ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ; try { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME , userName ) ; return auth ( db . accountExternalIds () . get ( key ) ) ; } finally { db . close () ; } } catch ( com.google.gwtorm.server.OrmException e ) { getServletContext () . log ( STRING_CONSTANT , e ) ; return null ; } }
@ java.lang.Override public com.google.gerrit.server.CurrentUser getUser () { final com.google.gerrit.server.CurrentUser user = session . getUser () ; if ( ( user != null ) && ( user . isIdentifiedUser () ) ) { com.google.gerrit.server.IdentifiedUser identifiedUser = userFactory . create ( ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId () ) ; identifiedUser . setAccessPath ( user . getAccessPath () ) ; return identifiedUser ; } return user ; }
public void testPatternNullMatch () { com.googlesource.gerrit.plugins.hooks.its.ItsConfig itsConfig = createItsConfig () ; org.easymock.EasyMock . expect ( serverConfig . getString ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) . andReturn ( null ) . atLeastOnce () ; replayMocks () ; assertNull ( STRING_CONSTANT , itsConfig . getIssuePattern () ) ; }
@ java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gerrit.httpd.rpc.account.Failure , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = getAccountId () ; for ( final com.google.gerrit.reviewdb.client.AccountProjectWatch.Key keyId : keys ) { if ( ! ( me . equals ( keyId . getParentKey () ) ) ) throw new com.google.gerrit.httpd.rpc.account.Failure ( new com.google.gerrit.common.errors.NoSuchEntityException () ) ; } db . accountProjectWatches () . deleteKeys ( keys ) ; return com.google.gwtjsonrpc.common.VoidResult.INSTANCE ; }
@ org.junit.Test public void systemGroupsCreated_ssh ( ) throws com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession ( admin ) ; java.lang.String result = session . exec ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( result . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( result . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( result . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( result . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( result . contains ( STRING_CONSTANT ) ) ; session . close () ; }
@ org.junit.Test public void deleteBranch_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession . delete ( ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) + ( branch . getShortName () ) ) ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_FORBIDDEN , r . getStatusCode () ) ; r . consume () ; }
private static com.google.gerrit.server.change.GetRelated.ChangeAndCommit changeAndCommit ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.lib.ObjectId commitId , int currentRevisionNum ) { com.google.gerrit.server.change.GetRelated.ChangeAndCommit result = new com.google.gerrit.server.change.GetRelated.ChangeAndCommit () ; result._changeNumber = psId . getParentKey () . get () ; result.commit = new com.google.gerrit.extensions.common.CommitInfo () ; result.commit.commit = commitId . name () ; result._revisionNumber = psId . get () ; result._currentRevisionNumber = currentRevisionNum ; result.status = STRING_CONSTANT ; return result ; }
@ org.junit.Test public void byId ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( newChange ( repo , null , null , null , null ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( change1 . getId () . get () , change1 ) ; assertQuery ( change2 . getId () . get () , change2 ) ; }
public void delete ( com.google.gerrit.server.edit.ChangeEdit edit ) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit . getChange () ; org.eclipse.jgit.lib.Repository repo = gitManager . openRepository ( change . getProject () ) ; try { com.google.gerrit.server.edit.ChangeEditUtil . deleteRef ( repo , edit ) ; } finally { repo . close () ; } indexer . index ( db . get () , change ) ; }
private static void assertInvalid ( final java.lang.String in ) { try { com.google.gerrit.server.mail.Address . parse ( in ) ; fail ( ( STRING_CONSTANT + in ) ) ; } catch ( java.lang.IllegalArgumentException e ) { assertEquals ( ( STRING_CONSTANT + in ) , e . getMessage () ) ; } }
public org.kohsuke.github.GHRepository getGHRepository ( ) throws java.io.IOException { if ( ghLogin . getMyself () . getLogin () . equals ( organisation ) ) { return ghLogin . getMyself () . getRepository ( repoName ) ; } return ghLogin . getHub () . getOrganization ( organisation ) . getRepository ( repoName ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gerrit.server.Failure , com.google.gwtorm.client.OrmException { assertAmGroupOwner ( db , groupId ) ; final com.google.gerrit.client.reviewdb.AccountGroup group = db . accountGroups () . get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.server.Failure ( new com.google.gerrit.client.rpc.NoSuchEntityException () ) ; } group . setDescription ( description ) ; db . accountGroups () . update ( java.util.Collections . singleton ( group ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
public com.google.gerrit.client.data.ChangeDetail run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gerrit.client.changes.Failure , com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Change change = db . changes () . get ( id ) ; if ( change == null ) { throw new com.google.gerrit.client.changes.Failure ( new com.google.gerrit.client.rpc.NoSuchEntityException () ) ; } final com.google.gerrit.client.workflow.RightRule rules = new com.google.gerrit.client.workflow.RightRule () ; final com.google.gerrit.client.data.ChangeDetail d = new com.google.gerrit.client.data.ChangeDetail () ; d . load ( db , new com.google.gerrit.client.data.AccountInfoCacheFactory ( db ) , rules , change ) ; return d ; }
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory . create ( getProjectName () ) ; updateManager . add ( this ) ; updateManager . stageAndApplyDelta ( getChange () ) ; updateManager . execute () ; return getResult () ; }
private org.kohsuke.github.PagedIterable < org.kohsuke.github.GHRepository > getRepositories ( com.googlesource.gerrit.plugins.github.oauth.GitHubLogin hubLogin , java.lang.String organisation ) throws java.io.IOException { if ( organisation . equals ( hubLogin . getMyself () . getLogin () ) ) { return hubLogin . getMyself () . listRepositories ( config.repositoryListPageSize , RepositoryListFilter.OWNER ) ; } else { org.kohsuke.github.GHOrganization ghOrganisation = hubLogin . getMyself () . getAllOrganizations () . byLogin ( organisation ) ; return ghOrganisation . listRepositories ( config.repositoryListPageSize ) ; } }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.extensions.api.GerritApi . class ) . to ( com.google.gerrit.server.api.GerritApiImpl . class ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; }
private Project.NameKey getProjectName ( java.nio.file.Path p ) { java.lang.String projectName = startFolder . relativize ( p ) . toString () ; if ( ( java.io.File.separatorChar ) != CHAR_CONS ) { projectName = projectName . replace ( java.io.File.separatorChar , CHAR_CONS ) ; } if ( projectName . endsWith ( Constants.DOT_GIT_EXT ) ) { int newLen = ( projectName . length () ) - ( Constants.DOT_GIT_EXT . length () ) ; projectName = projectName . substring ( NUMBER_CONSTANT , newLen ) ; } return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; }
private static com.google.gerrit.server.query.change.LabelPredicate.Test op ( java.lang.String op ) { if ( STRING_CONSTANT . equals ( op ) ) { return com.google.gerrit.server.query.change.LabelPredicate.Test.EQ ; } else if ( STRING_CONSTANT . equals ( op ) ) { return com.google.gerrit.server.query.change.LabelPredicate.Test.GT_EQ ; } else if ( STRING_CONSTANT . equals ( op ) ) { return com.google.gerrit.server.query.change.LabelPredicate.Test.LT_EQ ; } else { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + op ) ) ; } }
private void onPatchSetCreated ( final com.google.gerrit.server.events.PatchSetCreatedEvent event ) { com.google.gerrit.server.data.ChangeAttribute change = event.change . get () ; if ( atomicityHelper . isAtomicReview ( change ) ) { processNewAtomicPatchSet ( change ) ; } try { autoSubmitIfMergeable ( change ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.extensions.restapi.RestApiException | java.io.IOException | com.google.gerrit.server.update.UpdateException e ) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log . error ( ( STRING_CONSTANT + ( change.number ) ) , e ) ; } }
protected java.util.SortedSet < java.lang.String > cacheNames () { final java.util.SortedSet < java.lang.String > names = new java.util.TreeSet < java.lang.String > () ; names . add ( STRING_CONSTANT ) ; names . add ( STRING_CONSTANT ) ; for ( final net.sf.ehcache.Ehcache c : getAllCaches () ) { names . add ( c . getName () ) ; } return names ; }
@ org.junit.Test public void skipWhenUserBelongsToGroupUUID ( ) throws java.lang.Exception { java.lang.String config = STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ; com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , config ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( STRING_CONSTANT , STRING_CONSTANT ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName () ) ; com.google.common.truth.Truth . assertThat ( validatorConfig . isEnabledForRef ( projectName , STRING_CONSTANT , STRING_CONSTANT ) ) . isFalse () ; }
@ org.junit.Test public void incompleteHtmlIsLiteral ( ) throws java.lang.Exception { java.lang.String markdown = STRING_CONSTANT ; repo . branch ( STRING_CONSTANT ) . commit () . add ( STRING_CONSTANT , markdown ) . create () ; java.lang.String html = buildHtml ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( html . contains ( STRING_CONSTANT ) ) ; }
public static void assertProjectOwners ( java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > expectedOwners , com.google.gerrit.server.project.ProjectState state ) { for ( com.google.gerrit.reviewdb.client.AccountGroup.UUID g : state . getOwners () ) { com.google.common.truth.Truth . assertThat ( expectedOwners . remove ( g ) ) . isTrue () ; } com.google.common.truth.Truth . assertThat ( ( ( java.lang.Iterable < > ) ( expectedOwners ) ) ) . isEmpty () ; }
private void columnDelta1 ( com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb , com.google.gerrit.client.diff.FileInfo info ) { sb . openTd () . setStyleName ( com.google.gerrit.client.change.FileTable.R . css () . deltaColumn1 () ) ; if ( ( ! ( Patch.COMMIT_MSG . equals ( info . path () ) ) ) && ( ! ( info . binary () ) ) ) { sb . append ( ( ( info . lines_inserted () ) - ( info . lines_deleted () ) ) ) ; } sb . closeTd () ; }
@ org.junit.Test public void deleteReviewerFromReviewableChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( extraReviewer ) . to ( sc.reviewerByEmail ) . cc ( extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public com.google.gitiles.GitilesView.Builder setOldRevision ( com.google.gitiles.Revision revision ) { switch ( type ) { case DIFF : case LOG : break; case ARCHIVE : case BLAME : case DESCRIBE : case DOC : case HOST_INDEX : case PATH : case REFS : case REPOSITORY_INDEX : case REVISION : case ROOTED_DOC : case SHOW : default: revision = com.google.common.base.MoreObjects . firstNonNull ( revision , Revision.NULL ) ; com.google.common.base.Preconditions . checkState ( ( revision == ( Revision.NULL ) ) , STRING_CONSTANT , type ) ; break; } this . oldRevision = revision ; return this ; }
public final java.util.List < java.lang.String > archives () { java.util.List < java.lang.String > archives = new java.util.ArrayList <> () ; for ( com.google.gerrit.client.config.DownloadInfo.ArchiveFormatInfo f : com.google.gerrit.client.rpc.Natives . asList ( _archives () ) ) { archives . add ( f . get () ) ; } return archives ; }
public static com.google.gerrit.reviewdb.client.PatchSet newPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id id , org.eclipse.jgit.lib.ObjectId revision , com.google.gerrit.reviewdb.client.Account.Id userId ) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet ( id ) ; ps . setRevision ( new com.google.gerrit.reviewdb.client.RevId ( revision . name () ) ) ; ps . setUploader ( userId ) ; ps . setCreatedOn ( com.google.gerrit.common.TimeUtil . nowTs () ) ; return ps ; }
private java.util.Set < java.lang.String > getRefNamesAllUsers ( java.lang.String prefix ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = repoManager . openRepository ( allUsers ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { org.eclipse.jgit.lib.RefDatabase refDb = repo . getRefDatabase () ; return refDb . getRefs ( prefix ) . keySet () ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close () ; } }
@ org.junit.Test public void abandonReviewableChangeNotifyOwnersReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.starrer ) . cc ( sc.reviewer , sc.ccer ) . to ( sc.reviewerByEmail ) . cc ( sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
private void initProviderBouncyCastle ( org.eclipse.jgit.lib.Config cfg ) { setKeyExchangeFactories ( NamedFactory.Utils . setUpTransformedFactories ( true , java.util.Collections . unmodifiableList ( java.util.Arrays . asList ( BuiltinDHFactories.dhg14 , BuiltinDHFactories.dhg1 ) ) , ServerBuilder.DH2KEX ) ) ; org.apache.sshd.common.NamedFactory < org.apache.sshd.common.random.Random > factory ; if ( cfg . getBoolean ( STRING_CONSTANT , null , STRING_CONSTANT , false ) ) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory () ; } else { factory = org.apache.sshd.common.util.SecurityUtils . getRandomFactory () ; } setRandomFactory ( new org.apache.sshd.common.random.SingletonRandomFactory ( factory ) ) ; }
private org.kohsuke.github.PagedIterable < org.kohsuke.github.GHRepository > getRepositories ( com.googlesource.gerrit.plugins.github.oauth.GitHubLogin hubLogin , java.lang.String organisation ) throws java.io.IOException { if ( organisation . equals ( hubLogin . getMyself () . getLogin () ) ) { return hubLogin . getMyself () . listRepositories ( config.repositoryListPageSize , RepositoryListFilter.OWNER ) ; } org.kohsuke.github.GHOrganization ghOrganisation = hubLogin . getMyself () . getAllOrganizations () . byLogin ( organisation ) ; return ghOrganisation . listRepositories ( config.repositoryListPageSize ) ; }
void setValue ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.diff.FileInfo > fileMap , java.sql.Timestamp myLastReply , com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > comments , com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > drafts , com.google.gerrit.client.change.FileTable.Mode mode ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.diff.FileInfo > list = fileMap . values () ; com.google.gerrit.client.diff.FileInfo . sortFileInfoByPath ( list ) ; com.google.gerrit.client.change.FileTable.DisplayCommand cmd = new com.google.gerrit.client.change.FileTable.DisplayCommand ( fileMap , list , myLastReply , comments , drafts , mode ) ; if ( cmd . execute () ) { cmd . showProgressBar () ; com.google.gwt.core.client.Scheduler . get () . scheduleIncremental ( cmd ) ; } }
public static com.google.gitiles.Revision peel ( java.lang.String name , org.eclipse.jgit.lib.ObjectId id , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject obj = walk . parseAny ( id ) ; org.eclipse.jgit.revwalk.RevObject peeled = walk . peel ( obj ) ; return new com.google.gitiles.Revision ( name , obj , obj . getType () , peeled , peeled . getType () ) ; }
public void testCreate ( ) throws java.io.FileNotFoundException { final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( new java.io.File ( STRING_CONSTANT ) ) ; final com.google.gerrit.pgm.util.ConsoleUI ui = org.easymock.EasyMock . createStrictMock ( com.google.gerrit.pgm.util.ConsoleUI . class ) ; org.easymock.EasyMock . replay ( ui ) ; com.google.gerrit.pgm.init.Libraries lib = new com.google.gerrit.pgm.init.Libraries ( new com.google.inject.Provider < com.google.gerrit.pgm.init.LibraryDownloader > () { @ java.lang.Override public com.google.gerrit.pgm.init.LibraryDownloader get () { return new com.google.gerrit.pgm.init.LibraryDownloader ( ui , site ) ; } } ) ; assertNotNull ( lib.bouncyCastle ) ; assertNotNull ( lib.mysqlDriver ) ; org.easymock.EasyMock . verify ( ui ) ; }
@ java.lang.Override public com.google.common.base.Optional < com.google.gerrit.reviewdb.client.Account.Id > load ( java.lang.String username ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ; try { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME , username ) ; final com.google.gerrit.reviewdb.client.AccountExternalId id = db . accountExternalIds () . get ( key ) ; if ( id != null ) { return com.google.common.base.Optional . of ( id . getAccountId () ) ; } return com.google.common.base.Optional . absent () ; } finally { db . close () ; } }
public void PostOnSaveInternal ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel ) ( getWindow () ) ) ; model . StopProgress () ; Cancel () ; if ( model . getIsNew () ) { setGuideContext ( returnValue . getActionReturnValue () ) ; UpdateActionAvailability () ; getGuideCommand () . Execute () ; } }
@ org.junit.Test public void testZeroLatency () { java.lang.String doubleValue = STRING_CONSTANT ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . getVmDynamic () ; java.util.Map < java.lang.String , java.lang.Object > diskData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDiskData () ; diskData . put ( VdsProperties.vm_disk_write_latency , doubleValue ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setMockForTesting ( diskData ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . updateVMDynamicData ( vmDynamic , xml , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . getVds () ) ; org.junit.Assert . assertEquals ( vmDynamic . getDisks () . get ( NUMBER_CONSTANT ) . getWriteLatency () , new java.lang.Double ( STRING_CONSTANT ) ) ; }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.GlusterVolumeRemoveBricksCommand command ) { org.mockito.Mockito . doReturn ( volumeDao ) . when ( command ) . getGlusterVolumeDao () ; org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( command ) . getUpServer () ; org.mockito.Mockito . doReturn ( getSingleBrickVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito . doReturn ( getMultiBrickVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; org.mockito.Mockito . doReturn ( null ) . when ( volumeDao ) . getById ( null ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( STRING_CONSTANT , isRollbackOnFailure () ) . append ( STRING_CONSTANT , getConnectivityTimeout () ) . append ( STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.Entities . collectionToString ( getNetworks () , STRING_CONSTANT ) ) . append ( STRING_CONSTANT , getRemovedNetworks () ) . append ( STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.Entities . collectionToString ( getCreateOrUpdateBonds () , STRING_CONSTANT ) ) . append ( STRING_CONSTANT , getRemovedBonds () ) . append ( STRING_CONSTANT , getClusterSwitchType () ) ; }
@ org.junit.Test public void testGetNextConfiguration ( ) throws java.lang.Exception { setUriInfo ( addMatrixParameterExpectations ( setUpBasicUriExpectations () , BackendVmResource.NEXT_RUN ) ) ; setUpGetEntityNextRunExpectations () ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUpGetNextRunGraphicsExpectations ( NUMBER_CONSTANT ) ; setUpGetCertuficateExpectations () ; control . replay () ; org.ovirt.engine.api.model.Vm response = resource . get () ; verifyModel ( response , NUMBER_CONSTANT ) ; verifyCertificate ( response ) ; }
private void memSize_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior . updateMinAllocatedMemory () ; if ( ( getMemSize () . getEntity () ) != null ) { setNumaChanged ( true ) ; maxMemorySize . setEntity ( org.ovirt.engine.core.common.utils.VmCommonUtils . getMaxMemorySizeDefault ( getMemSize () . getEntity () ) ) ; } }
protected static org.dbunit.database.IDatabaseConnection getConnection ( ) throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDAOTestCase.dataSource . getConnection () ; org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection ( con ) ; connection . getConfig () . setProperty ( DatabaseConfig.PROPERTY_DATATYPE_FACTORY , org.ovirt.engine.core.dao.BaseDAOTestCase.dataFactory ) ; if ( org.ovirt.engine.core.dao.BaseDAOTestCase.needInitializationSql ) { java.sql.Statement stmt = con . createStatement () ; stmt . executeUpdate ( org.ovirt.engine.core.dao.BaseDAOTestCase.initSql ) ; } return connection ; }
protected org.ovirt.engine.core.bll.ValidationResult validateInterfacesConfigured ( org.ovirt.engine.core.common.businessentities.VM vm ) { for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vm . getInterfaces () ) { if ( ( nic . getVnicProfileId () ) == null ) { return ! ( org.ovirt.engine.core.common.FeatureSupported . networkLinking ( vm . getVdsGroupCompatibilityVersion () ) ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static void addImportedDiskDevices ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevicesToUpdate ) { final org.ovirt.engine.core.compat.Guid vmId = vmBase . getId () ; for ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : org.ovirt.engine.core.bll.utils.VmDeviceUtils . getDisks ( vmBase . getImages () ) ) { org.ovirt.engine.core.compat.Guid deviceId = disk . getId () ; org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils . addDiskDevice ( vmId , deviceId , org.ovirt.engine.core.bll.utils.VmDeviceUtils . getVmDeviceAddress ( vmBase , vmId ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . updateImportedVmDevice ( vmBase , vmDevice , deviceId , vmDevicesToUpdate ) ; } }
private void doProviderSearch () { org.ovirt.engine.ui.frontend.AsyncQuery providersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; providersQuery . setModel ( this ) ; providersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setProviders ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllProviders ( providersQuery ) ; }
@ org.junit.Test public void validateFails () { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters () ; params . setActionType ( STRING_CONSTANT ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( params ) ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; params . setClusterId ( null ) ; params . setServerId ( null ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ java.lang.Override public java.lang.String encodedId ( org.ovirt.engine.core.compat.Guid id ) { byte [] bytes = id . toByteArray () ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for ( int idx = NUMBER_CONSTANT ; idx < ( bytes.length ) ; idx ++ ) { sb . append ( ( STRING_CONSTANT + ( java.lang.String . format ( STRING_CONSTANT , bytes [ idx ] ) ) ) ) ; } return sb . toString () ; }
private void audit ( org.ovirt.engine.core.common.AuditLogType auditMessage ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; logable . addCustomValue ( STRING_CONSTANT , getAction () . name () . toLowerCase () ) ; logable . addCustomValue ( STRING_CONSTANT , org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand . getVds () . getName () ) ; logable . setVdsId ( org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand . getVdsId () ) ; auditLogDirector . log ( logable , auditMessage ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( modelProvider . getModel () . getSelectedItem () ) == null ) { getView () . clear () ; return; } getView () . edit ( modelProvider . getModel () ) ; getView () . displayVmOsImages ( true ) ; setupDisks ( modelProvider ) ; setupConsole ( modelProvider ) ; }
@ org.junit.Test public void testGetIdsForOvfDeletionOneToDelete () { org.ovirt.engine.core.dao.VmDao vmDao = dbFacade . getVmDao () ; vmDao . remove ( FixturesTool.VM_RHEL5_POOL_50 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > guidsToDelete = vmAndTemplatesGenerationsDao . getIdsForOvfDeletion ( FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , guidsToDelete . size () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , guidsToDelete . contains ( FixturesTool.VM_RHEL5_POOL_50 ) ) ; }
public java.util.concurrent.Future < java.util.List < org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse > > batchCall ( java.util.List < org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest > requests ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.BatchCall call = new org.ovirt.vdsm.jsonrpc.client.internal.BatchCall ( requests ) ; for ( final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request : requests ) { this . tracker . registerCall ( request , call ) ; } this . getClient () . sendMessage ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils . jsonToByteArray ( requests ) ) ; retryBatchCall ( requests , call ) ; return call ; }
public static < T > java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > toEntityModelList ( java.util.ArrayList < T > list ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > entityModelList = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > () ; if ( list != null ) { for ( T item : list ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > model = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > () ; model . setEntity ( item ) ; entityModelList . add ( model ) ; } } return entityModelList ; }
@ java.lang.Override public void rollback () { super . rollback () ; final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.RestartVdsCommand . getVdsId () ; org.ovirt.engine.core.bll.RestartVdsCommand.log . warnFormat ( STRING_CONSTANT , vdsId , VDSStatus.NonResponsive . name () ) ; runVdsCommand ( VDSCommandType.SetVdsStatus , new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters ( vdsId , org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive ) ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object other ) { if ( ( other != null ) && ( other instanceof org.ovirt.engine.core.utils.customprop.ValidationError ) ) { org.ovirt.engine.core.utils.customprop.ValidationError otherError = ( ( org.ovirt.engine.core.utils.customprop.ValidationError ) ( other ) ) ; return ( keyName . equals ( otherError . getKeyName () ) ) && ( ( reason ) == ( otherError . getReason () ) ) ; } return false ; }
void showModels ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel > interfaceLineModels ) { this . setVisible ( true ) ; grid . resizeRows ( interfaceLineModels . size () ) ; int row = NUMBER_CONSTANT ; for ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel : interfaceLineModels ) { setGridWidget ( row , NUMBER_CONSTANT , createInterfacePanel ( lineModel ) ) ; setGridWidget ( row , NUMBER_CONSTANT , createBondPanel ( lineModel ) ) ; setGridWidget ( row , NUMBER_CONSTANT , createVLanPanel ( lineModel ) ) ; setGridWidget ( row , NUMBER_CONSTANT , createStatisticsPanel ( lineModel ) ) ; row ++ ; } }
private org.ovirt.engine.core.compat.Guid getVmToAttach ( org.ovirt.engine.core.compat.NGuid poolId ) { if ( ( vmToAttach ) == null ) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand . getPrestartedVmToAttach ( poolId ) ; if ( ( vmGuid == null ) || ( Guid.Empty . equals ( vmGuid ) ) ) { vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand . getNonPrestartedVmToAttach ( poolId ) ; } vmToAttach = vmGuid ; } return vmToAttach ; }
private java.util.Map < java.lang.String , java.lang.Object > setMockForTesting ( java.util.Map < java.lang.String , java.lang.Object > diskData ) { java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > disksData = new java.util.HashMap < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > () ; disksData . put ( STRING_CONSTANT , diskData ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDisksInXmlRpc ( disksData ) ; mockDiskImageDao () ; return xml ; }
@ org.junit.Test public void testUpdateSetAndUploadIconFailure ( ) throws java.lang.Exception { control . replay () ; final org.ovirt.engine.api.model.Template model = getRestModel ( NUMBER_CONSTANT ) ; model . setSmallIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIcon ( GUIDS [ NUMBER_CONSTANT ] ) ) ; model . setLargeIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIconWithData () ) ; try { verifyModel ( resource . update ( model ) , NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BAD_REQUEST ) ; } }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.VDS server ) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters nonOpParams = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( server . getId () , org.ovirt.engine.core.common.businessentities.NonOperationalReason.GLUSTER_COMMAND_FAILED , java.util.Collections . singletonMap ( GlusterConstants.COMMAND , STRING_CONSTANT ) ) ; nonOpParams . setSaveToDb ( true ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SetNonOperationalVds , nonOpParams , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails details = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails ) ( result ) ) ; if ( ( details . getServiceInfo () ) != null ) { setActualServiceList ( details . getServiceInfo () ) ; } else { setActualServiceList ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > () ) ; } filterServices () ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskInterface . class ) ) ; model . setStatus ( org.ovirt.engine.api.common.util.StatusUtils . create ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ) ; model . setLunStorage ( new org.ovirt.engine.api.model.HostStorage () ) ; return model ; }
@ org.junit.Test public void removeAll () { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > interfaces = java.util.Arrays . asList ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest . createNewInterface () , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest . createNewInterface () ) ; org.mockito.Mockito . when ( vmNicDao . getAllForVm ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( interfaces ) ; vmInterfaceManager . removeAll ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces ) { verifyRemoveAllDelegatedCorrectly ( iface ) ; } }
@ org.junit.Before public void setUp () { clusterId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.mockito.Mockito . doReturn ( cluster ) . when ( clusterDao ) . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( clusterUtils ) . when ( command ) . getClusterUtils () ; org.mockito.Mockito . doReturn ( glusterUtils ) . when ( command ) . getGlusterUtils () ; org.mockito.Mockito . doReturn ( vdsStatisticsDao ) . when ( command ) . getVdsStatisticsDao () ; org.mockito.Mockito . when ( glusterUtils . getUpServer ( clusterId ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > cpuProfiles = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; getModel () . getCpuProfiles () . setItems ( cpuProfiles ) ; if ( cpuProfiles != null ) { for ( org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile : cpuProfiles ) { if ( cpuProfile . getId () . equals ( cpuProfileId ) ) { getModel () . getCpuProfiles () . setSelectedItem ( cpuProfile ) ; break; } } } }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure , org.ovirt.engine.core.compat.Guid adElementId ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( queryType , queryParams . getClass () , new java.lang.String [] { queryParameterName } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpPermissionsWithAdElementId ( adElementId ) , failure ) ; control . replay () ; }
protected void mockVmRunHandler () { org.mockito.Mockito . doReturn ( vmRunHandler ) . when ( command ) . getVmRunHandler () ; org.mockito.Mockito . doReturn ( true ) . when ( vmRunHandler ) . performImageChecksForRunningVm ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VM . class ) , org.mockito.Matchers . anyListOf ( java.lang.String . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.action.RunVmParams . class ) , org.mockito.Matchers . anyListOf ( org.ovirt.engine.core.common.businessentities.Disk . class ) ) ; org.mockito.Mockito . doReturn ( false ) . when ( vmRunHandler ) . isVmInPreview ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VM . class ) ) ; }
@ java.lang.Override public void processOnVmStop ( final java.util.Collection < org.ovirt.engine.core.compat.Guid > vmIds ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil . execute ( new java.lang.Runnable () { @ java.lang.Override public void run () { for ( org.ovirt.engine.core.compat.Guid vmId : vmIds ) { org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.IdParameters ( vmId ) ) ; } } } ) ; }
protected boolean isQuotaDependant () { boolean result ; if ( ( getActionType () . getQuotaDependency () ) == ( VdcActionType.QuotaDependency.NONE ) ) result = false ; else if ( ! ( org.ovirt.engine.core.bll.CommandBase . isInternalExecution () ) ) result = true ; else if ( getActionType () . isQuotaDependentAsInternalCommand () ) result = true ; else result = false ; return result ; }
@ org.junit.Test public void testConvertPiBToZiB () { double pib = NUMBER_CONSTANT * ( java.lang.Math . pow ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; int zib = org.ovirt.engine.core.common.utils.SizeConverter . convert ( ( ( long ) ( pib ) ) , SizeUnit.PiB , SizeUnit.ZiB ) . intValue () ; org.junit.Assert . assertEquals ( zib , NUMBER_CONSTANT ) ; }
protected boolean detachStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain dom ) { org.ovirt.engine.core.compat.Guid domId = dom . getId () ; org.ovirt.engine.core.compat.Guid poolId = dom . getStoragePoolId () . getValue () ; org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters params = new org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters ( domId , poolId ) ; params . setDestroyingPool ( org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand . getParameters () . getDestroyingPool () ) ; return org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand . getBackend () . runInternalAction ( VdcActionType.DetachStorageDomainFromPool , params ) . getSucceeded () ; }
public void showForm ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { this . model = model ; formPanel . clear () ; for ( org.ovirt.engine.ui.common.widget.form.FormItem item : formItems ) { if ( ( item . getIsAvailable () ) && ( item . isVisible () ) ) { formPanel . addFormItem ( item ) ; } } model . getPropertyChangedEvent () . removeListener ( propertyChangedEventListener ) ; model . getPropertyChangedEvent () . addListener ( propertyChangedEventListener ) ; }
@ org.junit.Test public void commandSucceeds () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( masterVolumeId , slaveVolumeName , org.ovirt.engine.core.compat.Guid . newGuid () , null , null , false ) , null ) ) ; prepareMocks () ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeGeoRepSessionCommandTest.SUPPORTED_VERSION ) . when ( cluster ) . getCompatibilityVersion () ; org.mockito.Mockito . doReturn ( volume ) . when ( command ) . getSlaveVolume () ; org.mockito.Mockito . doReturn ( vds ) . when ( command ) . getSlaveHost () ; org.junit.Assert . assertTrue ( command . validate () ) ; }
private org.ovirt.engine.core.common.businessentities.VM createVmForTesting ( java.lang.String initrd , java.lang.String kernel ) { org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > spyCommand = createCommand () ; mockVm ( spyCommand ) ; org.ovirt.engine.core.common.action.RunVmParams runVmParams = command . getParameters () ; runVmParams . setinitrd_url ( initrd ) ; runVmParams . setkernel_url ( kernel ) ; spyCommand . CreateVm () ; org.ovirt.engine.core.common.businessentities.VM vm = vmDAO . get ( command . getParameters () . getVmId () ) ; return vm ; }
@ org.junit.Test public void testGetAllNetworkSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.Network ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery . executeQueryCommand () ; org.junit.Assert . assertTrue ( ( ( networkResultList ) == ( searchQuery . getQueryReturnValue () . getReturnValue () ) ) ) ; }
@ org.junit.Test public void testDiskStats () { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap <> () ; java.util.Map < java.lang.String , java.lang.Object > disk = new java.util.HashMap <> () ; disk . put ( VdsProperties.DISK_STATS_FREE , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.SIZE_FOR_DISK_STATS ) ; disksStats . put ( STRING_CONSTANT , disk ) ; disksStats . put ( STRING_CONSTANT , disk ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . setDisksStats ( disksStats ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . validateDisksStatsList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . getVds () , xml , false ) ; }
private void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertTrue ( model . isSparse () ) ; assertTrue ( ( ! ( model . isBootable () ) ) ) ; assertTrue ( model . isPropagateErrors () ) ; }
private void testValidSql ( java.lang.String dynamicQuery , java.lang.String exepctedSQLResult ) { org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.searchbackend.ISyntaxChecker curSyntaxChecker = org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory . createBackendSyntaxChecker ( STRING_CONSTANT ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = curSyntaxChecker . analyzeSyntaxState ( dynamicQuery , true ) ; org.junit.Assert . assertTrue ( ( STRING_CONSTANT + dynamicQuery ) , res . getvalid () ) ; java.lang.String query = chkr . generateQueryFromSyntaxContainer ( res , true ) ; java.lang.System.out . println ( exepctedSQLResult ) ; java.lang.System.out . println ( query ) ; org.junit.Assert . assertEquals ( exepctedSQLResult , query ) ; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog ( final org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; logable . setVmId ( iface . getVmId () . getValue () ) ; logable . addCustomValue ( STRING_CONSTANT , iface . getMacAddress () ) ; logable . addCustomValue ( STRING_CONSTANT , iface . getName () ) ; return logable ; }
@ org.junit.Test public void attestationServerConfigured () { mockConfigRule . mockConfigValue ( ConfigValues.AttestationServer , org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) ) ; org.mockito.Mockito . when ( cluster . supportsTrustedService () ) . thenReturn ( true ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( clusterDao , dataCenterDao , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert . assertThat ( validator . attestationServerConfigured () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsForDiskId () { if ( ( listVms ) == null ) { listVms = org.ovirt.engine.core.bll.RemoveDiskCommand . getVmDAO () . getVmsListForDisk ( ( ( org.ovirt.engine.core.compat.Guid ) ( org.ovirt.engine.core.bll.RemoveDiskCommand . getParameters () . getDiskId () ) ) ) ; } return listVms ; }
private void dataCenterQueryResult ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { final java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = clusterDao . getAllForStoragePool ( storagePool . getId () ) ; final java.util.Set < org.ovirt.engine.core.compat.Guid > macPoolIds = clusters . stream () . map ( Cluster : : getMacPoolId ) . collect ( java.util.stream.Collectors . toSet () ) ; storagePool . setMacPoolId ( ( ( macPoolIds . size () ) > NUMBER_CONSTANT ? null : macPoolIds . iterator () . next () ) ) ; }
@ java.lang.Override protected boolean canDoAction () { boolean retVal = true ; java.util.List < java.lang.String > canDoActionMessages = getReturnValue () . getCanDoActionMessages () ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > domainsMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > () ; retVal = canDoAction_beforeCloneVm ( canDoActionMessages , domainsMap ) ; if ( retVal && ( getParameters () . isImportAsNewEntity () ) ) { initImportClonedVm () ; } return retVal && ( canDoAction_afterCloneVm ( retVal , canDoActionMessages , domainsMap ) ) ; }
public static void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters () ; param . setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param . setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
private org.ovirt.engine.core.vdsbroker.monitoring.VmStatsRefresher getRefresherForVds ( org.ovirt.engine.core.vdsbroker.VdsManager vdsManager ) { org.ovirt.engine.core.compat.Version version = vdsManager . getCompatibilityVersion () ; org.ovirt.engine.core.common.businessentities.VDS vds = vdsManager . getCopyVds () ; if ( ( ( ( org.ovirt.engine.core.common.FeatureSupported . jsonProtocol ( version ) ) && ( ( org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP ) == ( vds . getProtocol () ) ) ) && ( org.ovirt.engine.core.common.FeatureSupported . vmStatsEvents ( version ) ) ) && ( org.ovirt.engine.core.common.FeatureSupported . events ( version ) ) ) { return new org.ovirt.engine.core.vdsbroker.monitoring.EventVmStatsRefresher ( vdsManager ) ; } return new org.ovirt.engine.core.vdsbroker.monitoring.PollListAndAllVmStatsRefresher ( vdsManager ) ; }
private void cleanupPassthroughVnics () { java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > vnicToVfMap = getVnicToVfMap () ; if ( vnicToVfMap != null ) { hostNicVfsConfigHelper . setVmIdOnVfs ( org.ovirt.engine.core.bll.RunVmCommand . getVdsId () , null , new java.util.HashSet < java.lang.String > ( vnicToVfMap . values () ) ) ; } vfScheduler . cleanVmData ( org.ovirt.engine.core.bll.RunVmCommand . getVmId () ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { return ( ( o != null ) && ( ( getClass () ) == ( o . getClass () ) ) ) && ( map . equals ( ( ( org.ovirt.engineextensions.aaa.ldap.MapProperties ) ( o ) ) . map ) ) ; }
private void setEngineSessionSoftLimit ( java.lang.String engineSessionId , int ttlValue ) throws java.io.IOException , javax.naming.NamingException { javax.naming.InitialContext context = null ; try { context = new javax.naming.InitialContext () ; org.ovirt.engine.core.aaa.filters.FiltersHelper . getBackend ( context ) . runAction ( VdcActionType.SetSesssionSoftLimit , new org.ovirt.engine.core.common.action.SetSesssionSoftLimitCommandParameters ( engineSessionId , ttlValue ) ) ; } finally { try { context . close () ; } catch ( javax.naming.NamingException e ) { org.ovirt.engine.core.aaa.filters.RestApiSessionMgmtFilter.log . error ( ( STRING_CONSTANT + STRING_CONSTANT ) , e ) ; } } }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel.CMD_IMPORT ) ) { onImport () ; } else if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel.CMD_CANCEL ) ) { cancel () ; } else if ( getAddImportCommand () . equals ( command ) ) { addImport () ; } else if ( getCancelImportCommand () . equals ( command ) ) { cancelImport () ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( STRING_CONSTANT . equals ( pcArgs.propertyName ) ) { boolean isAvailable = modelProvider . getModel () . getIsAvailable () ; setAccessible ( isAvailable ) ; } org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent . fire ( this , this ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createVdsInterface ( java.lang.String name , java.lang.Boolean bonded , java.lang.String bondName , java.lang.Integer vlanId , java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.VdsNetworkInterface () ; iface . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; iface . setName ( name ) ; iface . setBonded ( bonded ) ; iface . setBondName ( bondName ) ; iface . setVlanId ( vlanId ) ; iface . setNetworkName ( networkName ) ; return iface ; }
private boolean handleQueryError ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue , org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel model ) { model . setMessage ( null ) ; if ( ! ( returnValue . getSucceeded () ) ) { model . setMessage ( org.ovirt.engine.ui.frontend.Frontend . getAppErrorsTranslator () . TranslateErrorTextSingle ( returnValue . getExceptionString () ) ) ; getSearchInProgress () . setEntity ( false ) ; return true ; } return false ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name , boolean isHostedEngine ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = createDataStorageDomain ( status , name , HE_SD_ID ) ; domain . setHostedEngineStorage ( isHostedEngine ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( domain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; return domain ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; behavior . postInitTemplate ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . filterTemplatesByArchitecture ( templates , dataCenterWithCluster . getCluster () . getArchitecture () ) ) ; }
protected void synchronizeNics ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > nics , org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager () ; vmInterfaceManager . removeAll ( true , vmId ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmInterface : nics ) { if ( ( vmInterface . getId () ) == null ) { vmInterface . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; } vmInterface . setVmId ( vmId ) ; vmInterfaceManager . add ( vmInterface , compensationContext ) ; } }
private static void addUsbSlots ( org.ovirt.engine.core.common.businessentities.VmBase vm , int numOfSlots ) { for ( int index = NUMBER_CONSTANT ; index <= numOfSlots ; index ++ ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . NewGuid () , vm . getId () ) , VmDeviceGeneralType.CHANNEL , VmDeviceType.SPICEVMC , org.ovirt.engine.core.bll.utils.VmDeviceUtils . getUsbSlotSpecParams () , true , false ) ; } }
@ java.lang.Override public java.lang.Object lookupEntity ( java.lang.Object id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.businessentities.VM vm = doGetEntity ( org.ovirt.engine.core.common.businessentities.VM . class , query , getQueryParams ( queryParamsClass , id ) , id . toString () ) ; org.ovirt.engine.api.restapi.resource.Vm model = new org.ovirt.engine.api.restapi.resource.Vm () ; model . setId ( vm . getId () . toString () ) ; return org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( getUriInfo () , model ) ; }
@ java.lang.Override public org.ovirt.engine.api.v3.types.V3Usb adapt ( org.ovirt.engine.api.model.Usb from ) { org.ovirt.engine.api.v3.types.V3Usb to = new org.ovirt.engine.api.v3.types.V3Usb () ; if ( from . isSetEnabled () ) { to . setEnabled ( from . isEnabled () ) ; } if ( from . isSetType () ) { to . setType ( from . getType () ) ; } return to ; }
@ org.junit.Test public void diskImagesExist () { org.mockito.Mockito . doReturn ( true ) . when ( validator ) . isDiskExists ( disk1 . getId () ) ; org.mockito.Mockito . doReturn ( true ) . when ( validator ) . isDiskExists ( disk2 . getId () ) ; org.junit.Assert . assertEquals ( validator . diskImagesNotExist () , ValidationResult.VALID ) ; }
public void onSucceeded () { syncDbRecords ( true ) ; endSuccessfully () ; org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.log . info ( STRING_CONSTANT , org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand . getDiskImage () . getImage () . getSnapshotId () , org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand . getDiskImage () . getImageId () , ( ( org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand . getDestinationDiskImage () ) != null ? org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand . getDestinationDiskImage () . getImageId () : STRING_CONSTANT ) ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Vm deprecatedPopulate ( org.ovirt.engine.api.model.Vm model , org.ovirt.engine.api.restapi.resource.VM entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper . getDetails ( httpHeaders , uriInfo ) ; parent . addInlineDetails ( details , model ) ; if ( details . contains ( STRING_CONSTANT ) ) { addStatistics ( model , entity , uriInfo ) ; } parent . setPayload ( model ) ; parent . setCertificateInfo ( model ) ; org.ovirt.engine.api.restapi.resource.MemoryPolicyHelper . setupMemoryBalloon ( model , this ) ; return model ; }
@ org.junit.Test public void migrationSupported () { org.mockito.Mockito . when ( cluster . getCompatibilityVersion () ) . thenReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.compat.Version . class ) ) ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( validator ) . migrationSupportedForArch ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) ; org.junit.Assert . assertThat ( validator . migrationSupported ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextEnum ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
public void fetchPublicKey () { org.ovirt.engine.ui.frontend.AsyncQuery aQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; aQuery . setModel ( this ) ; aQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String pk = ( ( java.lang.String ) ( result ) ) ; if ( ( pk != null ) && ( ( pk . length () ) > NUMBER_CONSTANT ) ) { getPublicKey () . setEntity ( pk ) ; } } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getHostPublicKey ( aQuery ) ; }
@ org.junit.Test public void testGetDiskHotpluggableInterfaces ( ) throws java.lang.Exception { java.util.Set < java.lang.String > diskHotpluggableInterfaces = OsRepositoryImpl.INSTANCE . getDiskHotpluggableInterfaces ( NUMBER_CONSTANT , null ) ; org.junit.Assert . assertTrue ( ( ( diskHotpluggableInterfaces . size () ) == NUMBER_CONSTANT ) ) ; for ( java.lang.String diskHotpluggableInterface : org.ovirt.engine.core.utils.OsRepositoryImplTest.DISK_HOTPLUGGABLE_INTERFACES . split ( STRING_CONSTANT ) ) { org.junit.Assert . assertTrue ( diskHotpluggableInterfaces . contains ( diskHotpluggableInterface . trim () ) ) ; } }
@ java.lang.Override public void addQuotaPermissionSubject ( java.util.List < org.ovirt.engine.core.common.PermissionSubject > quotaPermissionList ) { if ( ( ( ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getStoragePool () ) != null ) && ( ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getQuotaId () ) != null ) ) && ( ! ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getStoragePool () . getQuotaEnforcementType () . equals ( QuotaEnforcementTypeEnum.DISABLED ) ) ) ) { quotaPermissionList . add ( new org.ovirt.engine.core.common.PermissionSubject ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getQuotaId () , org.ovirt.engine.core.common.VdcObjectType.Quota , org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA ) ) ; } }
public static void initDiskHotpluggableInterfacesMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.diskHotpluggableInterfacesMap = ( ( java.util.Map < org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > , java.util.Set < java.lang.String > > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetDiskHotpluggableInterfacesMap ) , callback ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( getClass () ) != ( obj . getClass () ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VmPoolMap other = ( ( org.ovirt.engine.core.common.businessentities.VmPoolMap ) ( obj ) ) ; return ( java.util.Objects . equals ( vmId , other.vmId ) ) && ( java.util.Objects . equals ( vmPoolId , other.vmPoolId ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredClusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . filterByArchitecture ( clusters , vm . getClusterArch () ) ; model . setDataCentersAndClusters ( model , dataCenters , filteredClusters , vm . getVdsGroupId () ) ; initTemplate () ; initCdImage () ; initSoundCard ( vm . getId () ) ; }
@ org.junit.Test public void testValidationCallOnSuppliedImage () { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.compat.Guid . newGuid () ; transferImageCommand . getParameters () . setImageId ( imageId ) ; org.mockito.Mockito . doReturn ( true ) . when ( transferImageCommand ) . validateImageTransfer ( imageId ) ; transferImageCommand . validate () ; org.mockito.Mockito . verify ( transferImageCommand , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . validateImageTransfer ( imageId ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig getConfigByVolumeIdAndName ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId , java.lang.String paramName ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig config = getCallsHandler () . executeRead ( STRING_CONSTANT , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoImpl.snapshotConfigRowMapper , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , clusterId ) . addValue ( STRING_CONSTANT , volumeId ) . addValue ( STRING_CONSTANT , paramName ) ) ; return config ; }
protected void endVmCommand () { if ( ( org.ovirt.engine.core.bll.VmCommand . getVm () ) != null ) { this . vmStaticDao . incrementDbGeneration ( org.ovirt.engine.core.bll.VmCommand . getVm () . getId () ) ; } endActionOnDisks () ; unlockVm () ; org.ovirt.engine.core.bll.VmCommand . setSucceeded ( true ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateQos ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure ) { org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID ; vr = ( skipValidation ( vr ) ) ? vr : validateQosOverriddenInterfaces () ; vr = ( skipValidation ( vr ) ) ? vr : validateQosNotPartiallyConfigured ( attachmentsToConfigure ) ; vr = ( skipValidation ( vr ) ) ? vr : validateQosCommitment ( attachmentsToConfigure ) ; return vr ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice > devs = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; getModel () . getIsRngEnabled () . setEntity ( ( ! ( devs . isEmpty () ) ) ) ; getModel () . setRngDevice ( ( devs . isEmpty () ? new org.ovirt.engine.core.common.businessentities.VmRngDevice () : devs . get ( NUMBER_CONSTANT ) ) ) ; }
@ java.lang.Override @ org.junit.jupiter.api.Test public void testListCrashClientLocale () { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; org.junit.jupiter.api.Assertions . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
@ java.lang.Override protected void endVmCommand () { org.ovirt.engine.core.bll.StopVmCommandBase . setCommandShouldBeLogged ( false ) ; if ( ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () ) != null ) { org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . setstatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . sethibernation_vol_handle ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmDynamicDao () . update ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getDynamicData () ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase.log . warn ( STRING_CONSTANT ) ; } setSucceeded ( true ) ; }
private org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.compat.Guid > , org.ovirt.engine.core.compat.Guid > internalRunBalance ( org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit , org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = getVdsDAO () . getAllOfTypes ( new org.ovirt.engine.core.common.businessentities.VDSType [] { org.ovirt.engine.core.common.businessentities.VDSType.VDS , org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode } ) ; return policyUnit . balance ( cluster , hosts , cluster . getClusterPolicyProperties () , new java.util.ArrayList < java.lang.String > () ) ; }
private void cluster_SelectedItemChanged () { if ( ( getCluster () . getSelectedItem () ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getHostList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost moveHost = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; moveHost . postGetHostList ( hosts ) ; } } ) ) ; } }
@ java.lang.Override protected void executeCommand () { super . executeCommand () ; if ( removeImages () ) { if ( ( org.ovirt.engine.core.bll.RestoreFromSnapshotCommand . getParameters () . getSnapshot () . getType () ) != ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.REGULAR ) ) { org.ovirt.engine.core.bll.RestoreFromSnapshotCommand . getImage () . setActive ( true ) ; org.ovirt.engine.core.bll.RestoreFromSnapshotCommand . getImageDao () . update ( org.ovirt.engine.core.bll.RestoreFromSnapshotCommand . getImage () . getImage () ) ; } org.ovirt.engine.core.bll.RestoreFromSnapshotCommand . setSucceeded ( true ) ; } }
private boolean isOptionEnabledOnVolume ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , java.util.List < org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > > predicates ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > filteredOptions = new java.util.ArrayList ( volume . getOptions () ) ; for ( org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > predicate : predicates ) { filteredOptions = org.ovirt.engine.core.common.utils.ListUtils . filter ( filteredOptions , predicate ) ; } return ! ( filteredOptions . isEmpty () ) ; }
@ java.lang.Override protected void updateWipeAfterDelete ( org.ovirt.engine.core.common.businessentities.StorageType storageType ) { if ( storageType . isFileDomain () ) { getIsWipeAfterDelete () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.CONSTANTS . wipeAfterDeleteNotSupportedForFileDomains () ) ; getIsWipeAfterDelete () . setIsChangable ( false ) ; getIsWipeAfterDelete () . setEntity ( false ) ; } else { getIsWipeAfterDelete () . setIsChangable ( true ) ; getIsWipeAfterDelete () . setEntity ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.SANWipeAfterDelete ) ) ; } }
public java.lang.String getDisplayValue () { if ( isDefault () ) { final java.lang.String defaultTimeZoneKey = ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( timeZoneType . getDefaultTimeZoneConfigurationKey () ) ) ) ; if ( ! ( timeZoneType . getTimeZoneList () . containsKey ( defaultTimeZoneKey ) ) ) { timeZoneKey = timeZoneType . getUltimateFallback () ; } return timeZoneType . getTimeZoneList () . get ( defaultTimeZoneKey ) ; } else { return timeZoneType . getTimeZoneList () . get ( timeZoneKey ) ; } }
public static void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > () ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
protected boolean validate ( org.ovirt.engine.core.bll.ValidationResult validationResult ) { if ( ! ( validationResult . isValid () ) ) { addCanDoActionMessage ( validationResult . getMessage () ) ; if ( ( validationResult . getVariableReplacements () ) != null ) { for ( java.lang.String variableReplacement : validationResult . getVariableReplacements () ) { addCanDoActionMessage ( variableReplacement ) ; } } } return validationResult . isValid () ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase removeVmImages ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.RemoveAllVmImages , buildRemoveAllVmImagesParameters ( images ) , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContexForTasks ( org.ovirt.engine.core.bll.RemoveVmCommand . getExecutionContext () ) ) ; if ( vdcRetValue . getSucceeded () ) { org.ovirt.engine.core.bll.RemoveVmCommand . getReturnValue () . getVdsmTaskIdList () . addAll ( vdcRetValue . getInternalVdsmTaskIdList () ) ; } return vdcRetValue ; }
public static org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.compat.Version version ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported . cpuQoS ( version ) ) ) return org.ovirt.engine.core.bll.ValidationResult.VALID ; if ( ( vmBase . getCpuProfileId () ) == null ) { return org.ovirt.engine.core.bll.profiles.CpuProfileHelper . assignFirstCpuProfile ( vmBase ) ; } else { return new org.ovirt.engine.core.bll.profiles.CpuProfileValidator ( vmBase . getCpuProfileId () ) . isParentEntityValid ( vmBase . getVdsGroupId () ) ; } }
public java.util.List < java.lang.String > getList ( org.ovirt.engine.sdk.entities.DetailedLink link , java.lang.String key ) { java.lang.String value = get ( link , key ) ; if ( ( value == null ) || ( value . isEmpty () ) ) { return java.util.Collections . emptyList () ; } return java.util.Arrays . asList ( value . split ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public java.lang.Object runInTransaction () { getCompensationContext () . snapshotEntityStatus ( getVm () . getDynamicData () , getVm () . getStatus () ) ; getVm () . setStatus ( VMStatus.PreparingForHibernate ) ; org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( getVdsId () , getVm () . getDynamicData () ) ) ; getCompensationContext () . stateChanged () ; return null ; }
@ org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMismatches ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( storageId ) ; mockVmWithDisk ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; mockVmNetworks () ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap () ; org.mockito.Mockito . doReturn ( storageDomainStaticDAO ) . when ( command ) . getStorageDomainStaticDao () ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; }
@ org.junit.Test public void testAddSetAndUploadIconFailure ( ) throws java.lang.Exception { control . replay () ; final org.ovirt.engine.api.model.Template restModel = getRestModel ( NUMBER_CONSTANT ) ; restModel . setLargeIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIconWithData () ) ; restModel . setSmallIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIcon ( GUIDS [ NUMBER_CONSTANT ] ) ) ; try { collection . add ( restModel ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BAD_REQUEST ) ; } }
@ org.junit.Before public void setUp () { params = generateParameters () ; command = org.mockito.Mockito . spy ( generateCommand () ) ; role = new org.ovirt.engine.core.common.businessentities.Role () ; role . setId ( params . getRoleId () ) ; org.mockito.Mockito . doReturn ( roleDaoMock ) . when ( command ) . getRoleDao () ; org.mockito.Mockito . when ( roleDaoMock . get ( params . getRoleId () ) ) . thenReturn ( role ) ; org.mockito.Mockito . doReturn ( roleGroupMapDaoMock ) . when ( command ) . getRoleGroupMapDao () ; }
@ java.lang.Override protected org.ovirt.engine.api.model.ReportedDevice postPopulate ( org.ovirt.engine.api.model.ReportedDevice model ) { model . setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ReportedDeviceType . class ) . value () ) ; for ( org.ovirt.engine.api.model.Ip ip : model . getIps () . getIps () ) { ip . setVersion ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.restapi.types.IpVersion . class ) . value () ) ; ip . setGateway ( null ) ; ip . setNetmask ( null ) ; } return model ; }
@ org.junit.Test public void diskSnapshotsCanBePreviewed () { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot () ; org.mockito.Mockito . when ( snapshotDao . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( activeSnapshot ) ; org.junit.Assert . assertThat ( validator . canDiskSnapshotsBePreviewed ( activeSnapshot . getId () ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
public void updateSortOptions ( java.lang.String sortBy , boolean sortAscending ) { if ( ! ( supportsServerSideSorting () ) ) { return; } boolean shouldRefresh = ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( this . sortBy , sortBy ) ) ) || ( ( this . sortAscending ) != sortAscending ) ; this . sortBy = sortBy ; this . sortAscending = sortAscending ; if ( shouldRefresh ) { refresh () ; } }
@ org.junit.Test public void testGetAllStorageDomainsByImageId () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . getAllStorageDomainsByImageId ( FixturesTool.TEMPLATE_IMAGE_ID ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertFalse ( result . isEmpty () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , result . size () ) ; org.junit.Assert . assertEquals ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 , result . get ( NUMBER_CONSTANT ) . getId () ) ; }
public java.lang.String customProperties ( java.lang.String predefinedProperties , java.lang.String userDefinedProperties ) { java.lang.StringBuilder result = new java.lang.StringBuilder () ; result . append ( ( org.apache.commons.lang.StringUtils . isEmpty ( predefinedProperties ) ? STRING_CONSTANT : predefinedProperties ) ) ; result . append ( ( ( result . length () ) == NUMBER_CONSTANT ? STRING_CONSTANT : STRING_CONSTANT ) ) ; result . append ( ( org.apache.commons.lang.StringUtils . isEmpty ( userDefinedProperties ) ? STRING_CONSTANT : userDefinedProperties ) ) ; return result . toString () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; model . getQuota () . setItems ( quotas ) ; model . getQuota () . setIsEmpty ( quotas . isEmpty () ) ; model . updateControlsAvailability () ; stopProgress () ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; org.ovirt.engine.api.model.Tag model = org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . getModel ( NUMBER_CONSTANT , false ) ; model . setId ( org.ovirt.engine.api.restapi.resource.BackendTagResourceTest.NEW_PARENT_ID . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ParseLUNList ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct [] lunList ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > result = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( lunList.length ) ; for ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xlun : lunList ) { result . add ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . ParseLunFromXmlRpc ( xlun ) ) ; } return result ; }
@ java.lang.Override protected void revertTasks () { org.ovirt.engine.core.compat.Guid destImageId = org.ovirt.engine.core.bll.CreateImageTemplateCommand . getDestinationDiskImage () . getImageId () ; org.ovirt.engine.core.common.action.RemoveImageParameters p = new org.ovirt.engine.core.common.action.RemoveImageParameters ( destImageId ) ; p . setEntityInfo ( new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.Disk , destImageId ) ) ; p . setParentParameters ( p ) ; p . setParentCommand ( VdcActionType.RemoveImage ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = checkAndPerformRollbackUsingCommand ( VdcActionType.RemoveImage , p ) ; if ( returnValue . getSucceeded () ) { startPollingAsyncTasks ( returnValue . getInternalVdsmTaskIdList () ) ; } }
protected void setUpCommand () { command = createCommand () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isMemorySizeLegal ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . verifyAddVM ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ org.junit.Test public void validateFailsOnNullCluster () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( null ) ) ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID . toString () ) ) ; }
private void validateInvalidDestinationAndSourceDomainOfDifferentStorageSubtypes ( org.ovirt.engine.core.common.businessentities.storage.StorageType sourceType , org.ovirt.engine.core.common.businessentities.storage.StorageType destType ) { createParameters () ; org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain . setStatus ( StorageDomainStatus.Active ) ; srcStorageDomain . setStorageType ( sourceType ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain . setStatus ( StorageDomainStatus.Active ) ; dstStorageDomain . setStorageType ( destType ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_UPDATED ) ; }
@ org.junit.Test public void canDoActionThinProvisioningSpaceCheckSucceeds ( ) throws java.lang.Exception { final int availableSize = NUMBER_CONSTANT ; final int usedSize = NUMBER_CONSTANT ; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( sdid , VolumeType.Sparse ) ; mockVm () ; org.ovirt.engine.core.common.businessentities.storage_domains domains = mockStorageDomain ( sdid , availableSize , usedSize ) ; mockStoragePoolIsoMap () ; mockStorageDomainSpaceChecker ( domains , true ) ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderDisk > cinderDisks , org.ovirt.engine.core.compat.Guid vmSnapshotId ) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters ( cinderDisks , vmSnapshotId , diskInfoDestinationMap ) ; createParams . setParentHasTasks ( ( ! ( org.ovirt.engine.core.bll.AddVmTemplateCommand . getReturnValue () . getVdsmTaskIdList () . isEmpty () ) ) ) ; return withRootCommandInfo ( createParams , org.ovirt.engine.core.bll.AddVmTemplateCommand . getActionType () ) ; }
@ org.junit.Test public void testCanDoActionWithEmptySnapshotGuid () { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters ( vmId , org.ovirt.engine.core.compat.Guid.Empty ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand < org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters > ( params ) ) ; org.mockito.Mockito . doNothing () . when ( cmd ) . updateVmDisksFromDb () ; org.mockito.Mockito . doReturn ( snapshotDao ) . when ( cmd ) . getSnapshotDao () ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID ) ; }
public static org.ovirt.engine.core.bll.ValidationResult isConnectionExtensionExists ( org.ovirt.engine.core.compat.Guid connExtId ) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageServerConnectionExtensionDao () . get ( connExtId ) ; if ( connExt == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_EXTENSION_DOES_NOT_EXIST , java.lang.String . format ( STRING_CONSTANT , STRING_CONSTANT , connExtId . toString () ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ java.lang.Override protected boolean validate () { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getParameters () . getImageId () ; if ( isImageProvided () ) { return validateImageTransfer ( imageId ) ; } else if ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getParameters () . getTransferType () ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Download ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD ) ; } return validateCreateImage () ; }
private boolean isValidOtp ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.Long otp ) { if ( ( otp . longValue () ) == ( vds . getOtpValidity () ) ) { java.lang.Integer otpExpiration = org.ovirt.engine.core.common.config.Config . < java.lang.Integer > GetValue ( ConfigValues.OtpExpirationInSeconds ) ; org.ovirt.engine.core.compat.DateTime otpValidity = new org.ovirt.engine.core.compat.DateTime ( otp ) ; otpValidity . AddSeconds ( otpExpiration ) ; if ( otpValidity . before ( org.ovirt.engine.core.compat.DateTime . getUtcNow () ) ) { return true ; } } return false ; }
@ org.junit.Test public void validateVmIsNotDown ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmDiskImage ( false ) ; mockGetVmsListForDisk () ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN . toString () ) ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.junit.Test public void testCleanExpiredUsersSessionsWithUsers () { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER ) ; container . cleanExpiredUsersSessions () ; container . cleanExpiredUsersSessions () ; org.junit.Assert . assertNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , false ) ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , container . getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; org.mockito.Mockito . verify ( dbUserDAOMcok ) . removeUserSessions ( org.mockito.Matchers . anyMap () ) ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( geoRepDao ) . when ( cmd ) . getGlusterGeoRepDao () ; org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getGeoRepSession ( geoRepSessionId ) ) . when ( geoRepDao ) . getById ( geoRepSessionId ) ; org.mockito.Mockito . doReturn ( getGlusterVolume ( startedVolumeId ) ) . when ( volumeDao ) . getById ( startedVolumeId ) ; org.mockito.Mockito . doReturn ( getGlusterVolume ( stoppedVolumeId ) ) . when ( volumeDao ) . getById ( stoppedVolumeId ) ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , true ) ; control . replay () ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction () { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters () ; parameters . setImagesParameters ( org.ovirt.engine.core.bll.RunVmCommand . getParameters () . getImagesParameters () ) ; if ( org.ovirt.engine.core.bll.RunVmCommand . getParameters () . isUseCinderCommandCallback () ) { parameters . setEndProcedure ( EndProcedure.COMMAND_MANAGED ) ; parameters . setCommandId ( org.ovirt.engine.core.bll.RunVmCommand . getParametersForChildCommand () . get ( NUMBER_CONSTANT ) . getCommandId () ) ; } return parameters ; }
private void WatchdogModel_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( STRING_CONSTANT . equals ( getWatchdogModel () . getEntity () ) ) { getWatchdogAction () . setIsChangable ( false ) ; getWatchdogAction () . setSelectedItem ( STRING_CONSTANT ) ; } else { getWatchdogAction () . setIsChangable ( true ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( STRING_CONSTANT . equals ( ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ) ) { boolean value = getIsAvailable () ; getPluginType () . setIsAvailable ( value ) ; isPluginConfigurationAvailable () . setEntity ( ( value && ( ! ( org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator . isDisplayStringCustom ( ( ( java.lang.String ) ( getPluginType () . getSelectedItem () ) ) ) ) ) ) ) ; } }
private boolean restoreInitialState () { org.ovirt.engine.core.compat.Guid statelessVmSnapshotId = getVmSnapshotIdForType ( SnapshotType.STATELESS ) ; if ( statelessVmSnapshotId == null ) { return true ; } java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > statelessDiskSnapshots = getDiskSnapshotsForVmSnapshot ( statelessVmSnapshotId ) ; if ( ! ( detachDisksNotPartOfStatelessSnapshot ( statelessDiskSnapshots ) ) ) { return false ; } if ( ! ( statelessDiskSnapshots . isEmpty () ) ) { return runInternalActionWithTasksContext ( VdcActionType.RestoreAllSnapshots , buildRestoreAllSnapshotsParameters ( statelessDiskSnapshots ) , org.ovirt.engine.core.bll.RestoreStatelessVmCommand . getLock () ) . getSucceeded () ; } return true ; }
@ org.junit.Test public void testSelfAndIdentifyEquality () { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid deviceId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VmDevice device1 = createVmDevice ( deviceId , vmId ) ; org.junit.Assert . assertTrue ( ( ( device1 . compareTo ( device1 ) ) == NUMBER_CONSTANT ) ) ; org.ovirt.engine.core.common.businessentities.VmDevice device2 = createVmDevice ( deviceId , vmId ) ; org.junit.Assert . assertTrue ( ( ( device1 . compareTo ( device2 ) ) == NUMBER_CONSTANT ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > createDiskImageList () { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; disk . setImageId ( diskImageId ) ; disk . setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays . asList ( storageDomainId ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImageList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > () ; diskImageList . add ( disk ) ; return diskImageList ; }
@ java.lang.Override protected void executeCommand () { if ( ( ( org.ovirt.engine.core.bll.RemoveVdsCommand . getVdsIdRef () ) != null ) && ( CanBeRemoved ( org.ovirt.engine.core.bll.RemoveVdsCommand . getVdsId () ) ) ) { org.ovirt.engine.core.compat.Guid vdsGroupId = org.ovirt.engine.core.bll.RemoveVdsCommand . getVds () . getvds_group_id () ; glusterHostRemove () ; RemoveVdsStatisticsFromDb () ; RemoveVdsDynamicFromDb () ; RemoveVdsStaticFromDb () ; RemoveVdsFromCollection () ; org.ovirt.engine.core.bll.RemoveVdsCommand . setSucceeded ( true ) ; } }
private static boolean isDiskProfilePermitted ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile , java.util.Set < org.ovirt.engine.core.compat.Guid > permittedDiskProfilesIds , org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { return ( permittedDiskProfilesIds . contains ( diskProfile . getId () ) ) || ( ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper . getPermissionDAO () . getEntityPermissions ( user . getId () , ActionGroup.ATTACH_DISK_PROFILE , diskProfile . getId () , VdcObjectType.DiskProfile ) ) != null ) ; }
public static void endTaskStep ( org.ovirt.engine.core.compat.NGuid stepId , org.ovirt.engine.core.common.job.JobExecutionStatus exitStatus ) { try { if ( stepId != null ) { org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.JobRepositoryFactory . getJobRepository () . getStep ( stepId . getValue () ) ; if ( step != null ) { step . markStepEnded ( exitStatus ) ; org.ovirt.engine.core.bll.job.JobRepositoryFactory . getJobRepository () . updateStep ( step ) ; } } } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.job.ExecutionHandler.log . errorFormat ( STRING_CONSTANT , stepId , exitStatus , e ) ; } }
private void addCpuModes ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.CpuMode [] values ) { if ( org.ovirt.engine.api.restapi.utils.VersionUtils . greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_2 ) ) { version . setCpuModes ( new org.ovirt.engine.api.model.CpuModes () ) ; for ( org.ovirt.engine.api.model.CpuMode mode : values ) { version . getCpuModes () . getCpuModes () . add ( mode . value () ) ; } } }
@ java.lang.Override protected void asyncSearch () { super . asyncSearch () ; org.ovirt.engine.core.common.VdcObjectType objType = getObjectType () ; boolean directOnly = ( objType == ( org.ovirt.engine.core.common.VdcObjectType.VM ) ) ? true : false ; org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters tempVar = new org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters () ; tempVar . setObjectId ( getEntityGuid () ) ; tempVar . setVdcObjectType ( objType ) ; tempVar . setDirectOnly ( directOnly ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend . RegisterQuery ( VdcQueryType.GetPermissionsForObject , tempVar ) ) ; setItems ( getAsyncResult () . getData () ) ; }
public org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions getMigrateOnErrorOption () { if ( ( getMigrateOnErrorOption_NO () . getEntity () ) == true ) { return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.NO ; } else if ( ( getMigrateOnErrorOption_YES () . getEntity () ) == true ) { return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.YES ; } else if ( ( getMigrateOnErrorOption_HA_ONLY () . getEntity () ) == true ) { return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.HA_ONLY ; } return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.YES ; }
@ org.junit.Test public void testSaveAndGet () { org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service = dao . get ( org.ovirt.engine.core.compat.Guid . createGuidFromStringDefaultEmpty ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.NEW_SERVICE_ID ) ) ; org.junit.Assert . assertNull ( service ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService newService = insertTestService () ; service = dao . get ( org.ovirt.engine.core.compat.Guid . createGuidFromStringDefaultEmpty ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.NEW_SERVICE_ID ) ) ; org.junit.Assert . assertNotNull ( service ) ; org.junit.Assert . assertEquals ( newService , service ) ; }
public void setCommandStatus ( org.ovirt.engine.core.compat.CommandStatus status , boolean updateDB ) { this . commandStatus = status ; if ( updateDB ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport . suspend () ; try { org.ovirt.engine.core.bll.tasks.TaskManagerUtil . updateCommandStatus ( getCommandId () , getTaskType () , commandStatus ) ; } finally { if ( transaction != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . resume ( transaction ) ; } } } }
@ org.junit.Test public void checkStorageDomainNotEqualWithStatusActive () { setStorageDomainStatus ( StorageDomainStatus.Active ) ; org.junit.Assert . assertFalse ( cmd . checkStorageDomainStatusNotEqual ( StorageDomainStatus.Active ) ) ; java.util.List < java.lang.String > messages = cmd . getReturnValue () . getValidationMessages () ; org.junit.Assert . assertEquals ( messages . size () , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( messages . get ( NUMBER_CONSTANT ) , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 . toString () ) ; org.junit.Assert . assertEquals ( messages . get ( NUMBER_CONSTANT ) , java.lang.String . format ( STRING_CONSTANT , StorageDomainStatus.Active ) ) ; }
protected java.lang.String getClusterId ( org.ovirt.engine.api.model.VmPool pool ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup . class , VdcQueryType.GetVdsGroupByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( pool . getCluster () . getName () ) , ( STRING_CONSTANT + ( pool . getCluster () . getName () ) ) ) . getId () . toString () ; }
private static org.ovirt.engine.core.compat.Guid parent ( org.ovirt.engine.api.model.Tag model , org.ovirt.engine.core.compat.Guid current ) { if ( ( ( model . isSetParent () ) && ( model . getParent () . isSetTag () ) ) && ( model . getParent () . getTag () . isSetId () ) ) { return org.ovirt.engine.api.restapi.utils.GuidUtils . asGuid ( model . getParent () . getTag () . getId () ) ; } else { return current == null ? org.ovirt.engine.core.compat.Guid.Empty : current ; } }
protected void updateMemoryBalloon () { if ( ( getModel () . getSelectedCluster () ) != null ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel () . getSelectedCluster () ; boolean hasMemoryBalloon = ( ( cluster . getcompatibility_version () . compareTo ( VmListModel.BALLOON_DEVICE_MIN_VERSION ) ) >= NUMBER_CONSTANT ) && ( cluster . getArchitecture () . equals ( VmListModel.BALLOON_DEVICE_BLACKLISTED_ARCH ) ) ; getModel () . getMemoryBalloonDeviceEnabled () . setIsAvailable ( hasMemoryBalloon ) ; } }
private void verifyCapabilities ( org.ovirt.engine.api.model.Capabilities capabilities ) { assertNotNull ( capabilities ) ; assertEquals ( NUMBER_CONSTANT , capabilities . getVersions () . size () ) ; verifyVersion ( capabilities . getVersions () . get ( NUMBER_CONSTANT ) , NUMBER_CONSTANT , NUMBER_CONSTANT , false , STRING_CONSTANT , NUMBER_CONSTANT , false , false , false ) ; verifyVersion ( capabilities . getVersions () . get ( NUMBER_CONSTANT ) , NUMBER_CONSTANT , NUMBER_CONSTANT , true , STRING_CONSTANT , NUMBER_CONSTANT , true , true , true ) ; verifyPermits ( capabilities ) ; verifySchedulingPolicies ( capabilities ) ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData createVmInternalData ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xmlRpcStruct ) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendedVmDynamic ( org.ovirt.engine.core.vdsbroker.vdsbroker.VmStatsVdsBrokerCommand . getVds () ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . updateVMDynamicData ( vmDynamic , xmlRpcStruct ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData ( vmDynamic , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . buildVMStatisticsData ( xmlRpcStruct ) , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . buildVmGuestAgentInterfacesData ( vmDynamic . getId () , xmlRpcStruct ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( templateExistsInSetup ) { if ( ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity () ) ) ) { getCollapseSnapshots () . setEntity ( true ) ; getCollapseSnapshots () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . importCloneVMMustCollapseSnapshots () ) ; getCollapseSnapshots () . setIsChangable ( false ) ; } else { getCollapseSnapshots () . setIsChangable ( true ) ; } } }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetTagsExpectations ( false ) ; control . replay () ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( wae . getResponse () . getStatus () , NUMBER_CONSTANT ) ; } }
public void initNicHotplugSupportMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.AsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { nicHotplugSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetNicHotplugSupportMap ) , callback ) ; }
@ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : storageDomains ) { if ( ( domain . getStorageDomainType () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { return domain ; } } } return null ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDeviceForDisk ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.storage.Disk disk , org.ovirt.engine.core.compat.Guid snapshotId , boolean isPlugged ) { org.ovirt.engine.core.common.businessentities.VmDevice device = new org.ovirt.engine.core.common.businessentities.VmDevice () ; device . setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( vm . getId () , disk . getId () ) ) ; device . setSnapshotId ( snapshotId ) ; device . setPlugged ( isPlugged ) ; return device ; }
public void flush () { if ( validate ( false ) ) { diskModel . flush () ; ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getDiskModel () . getDisk () ) ) . setVolumeFormat ( getVolumeFormat () . getSelectedItem () ) ; } }
public org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getNetworkAttachmentForNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { if ( networkId == null ) { return null ; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment updatedAttachment = new org.ovirt.engine.core.common.utils.MapNetworkAttachments ( hostSetupNetworksParametersData.newOrModifiedNetworkAttachments ) . byNetworkId () . get ( networkId ) ; if ( updatedAttachment != null ) { return updatedAttachment ; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment = getExistingAttachmentByNetworkId ( networkId ) ; if ( ( existingAttachment != null ) && ( ! ( shouldBeRemoved ( existingAttachment . getId () ) ) ) ) { return existingAttachment ; } throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + networkId ) ) ; }
private void Alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String operation , java.lang.Throwable throwable ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; alert . setVdsId ( org.ovirt.engine.core.bll.VdsCommand . getVds () . getId () ) ; java.lang.String op = ( operation == null ) ? org.ovirt.engine.core.bll.VdsCommand . getActionType () . name () : operation ; alert . addCustomValue ( STRING_CONSTANT , op ) ; alert . updateCallStackFromThrowable ( throwable ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector . alert ( alert , logType , auditLogDirector ) ; }
private static java.lang.Double AssignDoubleValue ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct input , java.lang.String name ) { java.lang.Double returnValue = null ; if ( input . containsKey ( name ) ) { java.lang.String stringValue = ( ( java.lang.String ) ( ( ( input . getItem ( name ) ) instanceof java.lang.String ) ? input . getItem ( name ) : null ) ) ; returnValue = ( stringValue == null ) ? null : java.lang.Double . parseDouble ( stringValue ) ; } return returnValue ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getCinderLeafImages ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > leafCinderDisks = new java.util.ArrayList <> () ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderDisk > cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter . filterCinderDisks ( disks ) ; for ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinder : cinderDisks ) { leafCinderDisks . add ( org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . getSnapshotLeaf ( cinder . getId () ) ) ; } return leafCinderDisks ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( boolean active ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage di = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; di . setActive ( true ) ; di . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; di . setImageId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; di . setParentId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; di . setImageStatus ( ImageStatus.OK ) ; return di ; }
private org.ovirt.engine.core.common.businessentities.VDS makeTestVds ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS newVdsData = new org.ovirt.engine.core.common.businessentities.VDS () ; newVdsData . setHostName ( STRING_CONSTANT ) ; newVdsData . setVdsName ( STRING_CONSTANT ) ; newVdsData . setClusterCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( STRING_CONSTANT ) ) ; newVdsData . setClusterId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; newVdsData . setId ( vdsId ) ; return newVdsData ; }
@ org.junit.Test public void legalNotTimedOut () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase () ; t . setUseTimout ( true ) ; final java.lang.String s = STRING_CONSTANT ; t . setTimeoutObjectId ( s ) ; long c = java.lang.System . currentTimeMillis () ; c += NUMBER_CONSTANT ; final java.util.Date d = new java.util.Date ( c ) ; t . setEndTime ( d ) ; t . getLegal () ; final boolean result = t . getLegal () ; org.junit.Assert . assertFalse ( result ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareSharedStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain sharedDomain = createDataStorageDomain ( status , name , SHARED_SD_ID ) ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao () ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( sharedDomain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; return sharedDomain ; }
private void mockDaoForQuery () { org.mockito.Mockito . when ( getDbFacadeMockInstance () . getPermissionDao () ) . thenReturn ( permissionDao ) ; returnedPermissions = new java.util.ArrayList <> () ; org.ovirt.engine.core.common.businessentities.Permission permissions = new org.ovirt.engine.core.common.businessentities.Permission () ; returnedPermissions . add ( permissions ) ; org.mockito.Mockito . when ( getQueryParameters () . getId () ) . thenReturn ( quotaId ) ; org.mockito.Mockito . when ( permissionDao . getConsumedPermissionsForQuotaId ( quotaId ) ) . thenReturn ( returnedPermissions ) ; }
private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions () { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct () ; options . add ( VdsProperties.CONNECTIVITY_CHECK , java.lang.Boolean . toString ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . isCheckConnectivity () ) ) ; if ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . isCheckConnectivity () ) { options . add ( VdsProperties.CONNECTIVITY_TIMEOUT , org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . getConectivityTimeout () ) ; } return options ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; control . replay () ; org.ovirt.engine.api.model.OpenStackImageProvider model = getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; control . replay () ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendBookmarksResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getVm () { org.ovirt.engine.core.common.businessentities.VM vm = super . getVm () ; if ( vm == null ) { vm = org.ovirt.engine.core.bll.lsm.LiveMigrateDiskCommand . getVmDAO () . getVmsListForDisk ( org.ovirt.engine.core.bll.lsm.LiveMigrateDiskCommand . getImageGroupId () ) . get ( NUMBER_CONSTANT ) ; setVm ( vm ) ; setVmId ( vm . getId () ) ; } return vm ; }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration () { org.ovirt.engine.core.common.businessentities.VM result = null ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = org.ovirt.engine.core.bll.Backend . getInstance () . runInternalQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshot . getId () ) ) ; if ( queryReturnValue . getSucceeded () ) { result = queryReturnValue . getReturnValue () ; } return result ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Erratum > mapErrata ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ExternalErratum > externalErrata ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > errata = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > ( externalErrata . size () ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ExternalErratum externalErratum : externalErrata ) { org.ovirt.engine.core.common.businessentities.Erratum erratum = mapErratum ( externalErratum ) ; errata . add ( erratum ) ; } return errata ; }
@ org.junit.Test public void testGetExportNotFound ( ) throws java.lang.Exception { setUpGetStorageDomainExpectations ( StorageDomainType.ImportExport ) ; setUpGetEntityExpectations ( StorageDomainType.ImportExport , org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID , true ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void validateVmInPreview () { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito . when ( snapshotsValidator . vmNotInPreview ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
@ org.junit.Test public void versionDecreaseNoHostsOrNetwork () { createCommandWithOlderVersion () ; setupCpu () ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.StoragePoolDao . class ) ; org.mockito.Mockito . when ( storagePoolDao2 . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . createStoragePoolLocalFS () ) ; org.mockito.Mockito . doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao () ; org.junit.Assert . assertTrue ( cmd . canDoAction () ) ; }
public java.util.Collection < org.ovirt.engine.api.model.DetailedLink > getLinks ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.util.List < org.ovirt.engine.api.model.DetailedLink > results = new java.util.ArrayList < org.ovirt.engine.api.model.DetailedLink > () ; java.util.List < java.lang.Class < > > classes = org.ovirt.engine.api.utils.ReflectionHelper . getClasses ( org.ovirt.engine.api.rsdl.RsdlBuilder.RESOURCES_PACKAGE ) ; for ( java.lang.String path : rels ) { java.lang.Class < > resource = findResource ( path , classes ) ; results . addAll ( describe ( resource , path , new java.util.HashMap < java.lang.String , java.lang.reflect.Type > () ) ) ; } return results ; }
@ java.lang.Override public void init ( final org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkModel model ) { super . init ( model ) ; model . getDataCenters () . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { ( ( org.ovirt.engine.ui.webadmin.section.main.presenter.popup.cluster.NewClusterNetworkPopupPresenterWidget.ViewDef ) ( getView () ) ) . setDataCenterName ( model . getDataCenters () . getSelectedItem () . getName () ) ; } } ) ; }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncInfoModel ) { return vncInfoPopupProvider . get () ; } else if ( windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceToGuestWithNonRespAgentModel ) { return spiceToGuestWithNonRespAgentPopupProvider . get () ; } else if ( lastExecutedCommand == ( getModel () . getEditConsoleCommand () ) ) { return consolePopupProvider . get () ; } return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; control . replay () ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( wae . getResponse () . getStatus () , NUMBER_CONSTANT ) ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( getClass () ) != ( obj . getClass () ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VmDeviceId other = ( ( org.ovirt.engine.core.common.businessentities.VmDeviceId ) ( obj ) ) ; return ( java.util.Objects . equals ( deviceId , other.deviceId ) ) && ( java.util.Objects . equals ( vmId , other.vmId ) ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVdsStatisticsDao () ; staticDao = dbFacade . getVdsStaticDao () ; dynamicDao = dbFacade . getVdsDynamicDao () ; existingVds = staticDao . get ( FixturesTool.VDS_GLUSTER_SERVER2 ) ; newStaticVds = new org.ovirt.engine.core.common.businessentities.VdsStatic () ; newStaticVds . setHostName ( STRING_CONSTANT ) ; newStaticVds . setClusterId ( existingVds . getClusterId () ) ; newStaticVds . setProtocol ( VdsProtocol.STOMP ) ; newStatistics = new org.ovirt.engine.core.common.businessentities.VdsStatistics () ; }
@ org.junit.Test public void getClusterWithVm () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase () ; final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM () ; v . setClusterId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVm ( v ) ; final org.ovirt.engine.core.common.businessentities.Cluster g = b . getCluster () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g . getId () ) ; }
@ java.lang.Override public void onBootstrap () { super . onBootstrap () ; com.google.gwt.user.client.Window . setTitle ( dynamicMessages . applicationTitle () ) ; org.ovirt.engine.ui.webadmin.uimode.UiModeData uiModeData = org.ovirt.engine.ui.webadmin.uimode.UiModeData . instance () ; if ( uiModeData != null ) { handleUiMode ( uiModeData ) ; } org.ovirt.engine.ui.webadmin.plugin.restapi.EngineSessionTimeoutData engineSessionTimeoutData = org.ovirt.engine.ui.webadmin.plugin.restapi.EngineSessionTimeoutData . instance () ; if ( engineSessionTimeoutData != null ) { restApiSessionManager . setSessionTimeout ( engineSessionTimeoutData . getSessionTimeout () ) ; restApiSessionManager . setHardLimit ( engineSessionTimeoutData . getSessionHardLimit () ) ; } placeManager . revealCurrentPlace () ; }
private boolean handleLibvirtSecrets ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid poolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = libvirtSecretDao . getAllByStoragePoolIdFilteredByActiveStorageDomains ( poolId ) ; if ( ( ! ( libvirtSecrets . isEmpty () ) ) && ( ! ( registerLibvirtSecretsImpl ( vds , libvirtSecrets , false ) ) ) ) { org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.log . error ( STRING_CONSTANT , vds . getName () ) ; setNonOperational ( cmdContext , vds . getId () , NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE ) ; return false ; } return true ; }
private void loadFile ( java.nio.file.Path path ) { try ( java.io.BufferedReader reader = java.nio.file.Files . newBufferedReader ( path , java.nio.charset.StandardCharsets.UTF_8 ) ) { properties = new java.util.Properties ( properties ) ; properties . load ( reader ) ; log . info ( ( STRING_CONSTANT + path ) ) ; } catch ( java.io.IOException e ) { log . error ( ( STRING_CONSTANT + path ) ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.Object > parameters ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > list = new java.util.ArrayList < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > () ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { list . add ( new org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( host . getId () , NUMBER_CONSTANT ) ) ; } return list ; }
@ org.junit.Test public void testGetDataAndSetDataWithSessionParam () { container . SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ) ; }
protected void mockVds () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setClusterCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( STRING_CONSTANT ) ) ; command . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( vdsDao ) . when ( command ) . getVdsDao () ; org.mockito.Mockito . when ( vdsDao . get ( Guid.Empty ) ) . thenReturn ( vds ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh () , aQuery ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( createTestCommand ( volumeId2 , NUMBER_CONSTANT ) ) ; prepareMocks ( cmd ) ; mockBackend ( true , null ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( cmd ) . startSubStep () ; org.mockito.Mockito . verify ( cmd ) . handleTaskReturn ( asyncTaskToBeReturned ) ; org.mockito.Mockito . verify ( cmd ) . updateBricksWithTaskID ( asyncTaskToBeReturned ) ; org.junit.Assert . assertEquals ( AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS , cmd . getAuditLogTypeValue () ) ; }
public org.ovirt.engine.core.common.businessentities.VDS getUpServer ( org.ovirt.engine.core.compat.Guid clusterId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > servers = getVdsDao () . getAllForVdsGroupWithStatus ( clusterId , VDSStatus.Up ) ; if ( ( servers == null ) || ( servers . isEmpty () ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.NO_UP_SERVER_FOUND ) ; } return org.ovirt.engine.core.utils.RandomUtils . instance () . pickRandom ( servers ) ; }
private void fixNetworkLabelsLink ( org.ovirt.engine.api.v3.types.V3Link link ) { link . setRel ( STRING_CONSTANT ) ; java.lang.String href = link . getHref () ; int index = href . lastIndexOf ( STRING_CONSTANT ) ; if ( index > NUMBER_CONSTANT ) { href = ( href . substring ( NUMBER_CONSTANT , index ) ) + STRING_CONSTANT ; link . setHref ( href ) ; } }
protected void mockVmDevice ( boolean plugged ) { vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice () ; vmDevice . setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId () ) ; vmDevice . setPlugged ( plugged ) ; org.mockito.Mockito . when ( vmDeviceDao . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.VmDeviceId . class ) ) ) . thenReturn ( vmDevice ) ; }
public static void initOsNames () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . initOsIds () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetOsNames ) , callback ) ; }
public static void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size () ) > NUMBER_CONSTANT ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private java.util.Map < java.lang.String , java.lang.Class < > > addExceptions ( java.util.Map < java.lang.String , java.lang.Class < > > map ) { map . put ( STRING_CONSTANT , org.ovirt.engine.sdk.entities.GlusterBrick . class ) ; map . put ( STRING_CONSTANT , org.ovirt.engine.sdk.entities.GlusterBricks . class ) ; map . put ( STRING_CONSTANT , org.ovirt.engine.sdk.entities.HostNIC . class ) ; map . put ( STRING_CONSTANT , org.ovirt.engine.sdk.entities.HostNics . class ) ; map . put ( STRING_CONSTANT , org.ovirt.engine.sdk.entities.Device . class ) ; return map ; }
public static void isStorageDomainNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return storageDomains . isEmpty () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + name ) , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) , aQuery ) ; }
public static void getAllProviders ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > () ; } java.util.Collections . sort ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( source ) ) , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters () , aQuery ) ; }
protected void setUpGetClusterExpectations ( int times , java.lang.Object failure ) { while ( ( times -- ) > NUMBER_CONSTANT ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setStoragePoolId ( GUIDS [ NUMBER_CONSTANT ] ) ; setUpEntityQueryExpectations ( VdcQueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , cluster , null ) ; } }
@ java.lang.Override public void migrateVM ( java.util.List < org.ovirt.engine.core.compat.Guid > initialHosts , org.ovirt.engine.core.compat.Guid vmToMigrate ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vmToMigrate ) ; parameters . setInitialHosts ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( initialHosts ) ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.MigrateVm , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
@ org.junit.Test public void testAuditLogMacInUseUnplug () { final org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest . createNewInterface () ; vmInterfaceManager . auditLogMacInUseUnplug ( iface , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ; verifyCommonAuditLogFilledProperly ( AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG , iface ) ; org.junit.Assert . assertEquals ( auditLogableCaptor . getValue () . getVmName () , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetDomainExpectations ( StorageType.NFS , false ) ; control . replay () ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) ) ) ; setUpMocksForRemove () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . remove ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_REMOVED ) ; }
@ org.junit.Test public void testRemoveByName () { dao . removeByName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.EXISTING_VOL_REPL_NAME ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = dao . getByClusterId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID ) ; org.junit.Assert . assertTrue ( ( ( volumes . size () ) == NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( volumes . contains ( existingDistVol ) ) ; org.junit.Assert . assertFalse ( volumes . contains ( existingReplVol ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters = new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.businessentities.StoragePool [] { dataCenter } ) ) ; initClusters ( dataCenters ) ; } else { getModel () . disableEditing ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . notAvailableWithNoUpDC () ) ; } }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( STRING_CONSTANT . equals ( command . getName () ) ) { onRemove () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { onRestore () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancelConfirmation () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { removeTemplateBackup () ; } else { super . executeCommand ( command ) ; } }
@ org.junit.Test public void testCredentialsWithNoConnectionExtension () { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . createConnectionWithCredentials ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > credentials = helper . getStorageConnectionCredentialsForhost ( org.ovirt.engine.core.compat.Guid . newGuid () , conn ) ; org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . assertCredentials ( credentials , conn . getUserName () , conn . getPassword () ) ; }
protected void sortStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > vmDisks ) { java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comp = null ; for ( java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comparator : getStorageDomainComparators ( vmDisks ) ) { comp = ( comp == null ) ? comparator . reversed () : comp . thenComparing ( comparator . reversed () ) ; } java.util.Collections . sort ( domainsInPool , comp ) ; }
@ org.junit.Test public void testMemoryMapping () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setId ( Guid.Empty ) ; vds . setPhysicalMemMb ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper . map ( vds , ( ( org.ovirt.engine.api.model.Host ) ( null ) ) ) ; assertNotNull ( host . getMemory () ) ; assertEquals ( new java.lang.Long ( host . getMemory () ) , new java.lang.Long ( NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testUpdateBrickTask () { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = dao . getById ( FixturesTool.GLUSTER_BRICK_UUID1 ) ; org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask = new org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask () ; asyncTask . setTaskId ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; org.junit.Assert . assertNotNull ( existingBrick ) ; org.junit.Assert . assertEquals ( GlusterStatus.UP , existingBrick . getStatus () ) ; dao . updateBrickTask ( existingBrick . getId () , FixturesTool.GLUSTER_ASYNC_TASK_ID1 ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newEnity = dao . getById ( FixturesTool.GLUSTER_BRICK_UUID1 ) ; org.junit.Assert . assertEquals ( FixturesTool.GLUSTER_ASYNC_TASK_ID1 , newEnity . getAsyncTask () . getTaskId () ) ; }
@ org.junit.Test public void testListIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetCertificateInfo ( NAMES.length ) ; setUpQueryExpectations ( STRING_CONSTANT ) ; collection . setUriInfo ( uriInfo ) ; java.util.List < org.ovirt.engine.api.model.Host > hosts = getCollection () ; assertTrue ( hosts . get ( NUMBER_CONSTANT ) . isSetStatistics () ) ; verifyCollection ( hosts ) ; } finally { accepts . clear () ; } }
@ org.junit.Test public void testGetWithInvalidStorageId ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , getIscsiBondWithNoMatchingStorages () ) ; control . replay () ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assert query . equals ( STRING_CONSTANT ) ; setUpEntityQueryExpectations ( VdcQueryType.GetStorageDomainsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ ( ( NAMES.length ) - NUMBER_CONSTANT ) ] } , setUpStorageDomains () , failure ) ; control . replay () ; }
@ org.junit.Test public void testChangeQuotaForDisk () { org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap = dao . getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) . get ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.compat.Guid quotaId = imageStorageDomainMap . getQuotaId () ; if ( quotaId . equals ( FixturesTool.DEFAULT_QUOTA_GENERAL ) ) { org.junit.Assert . fail ( STRING_CONSTANT ) ; } dao . updateQuotaForImageAndSnapshots ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DISK_ID , org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DOMAIN_ID , FixturesTool.DEFAULT_QUOTA_GENERAL ) ; imageStorageDomainMap = dao . getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) . get ( NUMBER_CONSTANT ) ; quotaId = imageStorageDomainMap . getQuotaId () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , quotaId , FixturesTool.DEFAULT_QUOTA_GENERAL ) ; }
@ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.DbUser source ) { return ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( source . getDomain () , target . getDomain () ) ) && ( ( ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( target . getLoginName () ) ) || ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( target . getLoginName () , STRING_CONSTANT ) ) ) || ( source . getLoginName () . toLowerCase () . startsWith ( target . getLoginName () ) ) ) ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
@ org.junit.Test public void testVmInPreview () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) . when ( snapshotsValidator ) . vmNotInPreview ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest . getEmptyDiskList () ) . when ( cmd ) . getDisksList () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW . name () ) ) ; }
@ java.lang.Override protected void executeVmCommand () { org.ovirt.engine.core.bll.StopVmCommandBase . getParameters () . setEntityId ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getId () ) ; if ( ( ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getstatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Suspended ) ) || ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . gethibernation_vol_handle () ) ) ) ) { setSuspendedVm ( true ) ; setSucceeded ( stopSuspendedVm () ) ; } else { super . executeVmCommand () ; } removeStatelessVmUnmanagedDevices () ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.VmDevice generateNewEntity () { java.util.Map < java.lang.String , java.lang.String > customProp = new java.util.LinkedHashMap <> () ; customProp . put ( STRING_CONSTANT , STRING_CONSTANT ) ; return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT , new java.util.HashMap < java.lang.String , java.lang.Object > () , true , false , false , STRING_CONSTANT , customProp ) ; }
@ org.junit.Test public void testParseHugeRange () { java.lang.String start = STRING_CONSTANT ; java.lang.String end = STRING_CONSTANT ; final long expectedStart = org.ovirt.engine.core.utils.MacAddressRangeUtils . macToLong ( start ) ; final long expectedEnd = ( org.ovirt.engine.core.utils.MacAddressRangeUtils . macToLong ( start ) ) + ( java.lang.Integer.MAX_VALUE ) ; testRange ( start , end , expectedStart , expectedEnd ) ; }
private static void cacheConfigValues ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDefaultConfigurationVersion () ; aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert . putAll ( ( ( java.util.HashMap < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetConfigurationValues , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
@ org.junit.Test public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setAllContentHeaderExpectation () ; setGetVmQueryExpectations ( NUMBER_CONSTANT ) ; setGetNetworksQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmInterface , org.ovirt.engine.core.common.action.RemoveVmInterfaceParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID } , true , true ) ) ; verifyRemove ( resource . remove () ) ; }
private org.ovirt.engine.core.compat.Guid getProxyHostIdFromParameters () { org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao . get ( org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery . getParameters () . getProxyHostId () ) ; if ( vds == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . format ( STRING_CONSTANT , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery . getParameters () . getProxyHostId () ) ) ; } if ( ( vds . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) { logHostCannotBeProxy ( vds . getName () ) ; throw new java.lang.IllegalArgumentException () ; } return vds . getId () ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.Object > parameters ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > scores = new java.util.ArrayList < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > () ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { scores . add ( new org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId () , ( NUMBER_CONSTANT - ( vds . getUsageCpuPercent () ) ) ) ) ; } return scores ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true , getEntity ( NUMBER_CONSTANT ) ) ; control . replay () ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainsResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void setupMocks () { org.mockito.Mockito . when ( vdsGroupDao . get ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) . thenReturn ( getVdsGroup () ) ; org.mockito.Mockito . when ( vdsGroupDao . getFromCache ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) . thenReturn ( getVdsGroup () ) ; org.mockito.Mockito . doReturn ( vdsGroupDao ) . when ( cmd ) . getVdsGroupDAO () ; org.mockito.Mockito . when ( cmd . getSyncJobInstance () ) . thenReturn ( hookSyncJob ) ; }
public static void isUSBEnabledByDefault ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue () : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.EnableUSBAsDefault , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDefaultConfigurationVersion () ) , aQuery ) ; }
@ org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { initMocks ( data , true ) ; org.junit.Assume . assumeNotNull ( data . dbVm () , data . vdsmVm () ) ; org.junit.Assume . assumeTrue ( ( ( data . vdsmVm () . getVmDynamic () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) ) ; org.junit.Assert . assertTrue ( vmAnalyzer . isClientIpChanged () ) ; org.mockito.Mockito . verify ( resourceManager , org.mockito.Mockito . never () ) . internalSetVmStatus ( data . dbVm () , VMStatus.MigratingTo ) ; }
@ org.junit.Test public void testGetEntityNameByIdAndTypeForDisk () { org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk = baseDiskDao . get ( org.ovirt.engine.core.dao.EntityDaoImplTest.DISK_ID ) ; org.junit.Assert . assertNotNull ( disk ) ; java.lang.String name = disk . getDiskAlias () ; org.junit.Assert . assertTrue ( name . equals ( underTest . getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.DISK_ID , VdcObjectType.Disk ) ) ) ; }
private static void addBootOrder ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct ) { java.lang.String s = new java.lang.Integer ( vmDevice . getBootOrder () ) . toString () ; if ( ( ! ( org.apache.commons.lang.StringUtils . isEmpty ( s ) ) ) && ( ! ( s . equals ( STRING_CONSTANT ) ) ) ) { struct . add ( VdsProperties.BootOrder , s ) ; } }
public static void updateSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId , boolean smartcardEnabled ) { if ( ! smartcardEnabled ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmDeviceDao () . getVmDeviceByVmIdTypeAndDevice ( vmId , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD . getName () ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice device : vmDevices ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao . remove ( device . getId () ) ; } } else { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addSmartcardDevice ( vmId ) ; } }
@ org.junit.Test public void nameLengthIsTooLong () { mockConfigRule . mockConfigValue ( ConfigValues.MaxVdsNameLength , org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE ) ; org.mockito.Mockito . when ( host . getName () ) . thenReturn ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( ( ( org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE ) * NUMBER_CONSTANT ) ) ) ; org.junit.Assert . assertThat ( validator . nameLengthIsLegal () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ) ; }
private void edit () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditVmInterfaceModel . createInstance ( getEntity () . getStaticData () , getEntity () , getEntity () . getVdsGroupCompatibilityVersion () , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems () ) ) , ( ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ) ( getSelectedItem () ) ) , this ) ; setWindow ( model ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( getClass () ) != ( obj . getClass () ) ) { return false ; } org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot other = ( ( org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot ) ( obj ) ) ; return ( java.util.Objects . equals ( commandId , other.commandId ) ) && ( java.util.Objects . equals ( entityId , other.entityId ) ) ; }
@ java.lang.Override protected void prePersist () { if ( org.ovirt.engine.core.compat.Guid . isNullOrEmpty ( object . getId () ) ) { object . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; } if ( org.apache.commons.lang.StringUtils . isEmpty ( object . getHostName () ) ) { object . setHostName ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) ) ; } if ( ( object . getProtocol () ) == null ) { object . setProtocol ( VdsProtocol.STOMP ) ; } }
@ java.lang.Override public void render ( com.google.gwt.cell.client.Cell.Context context , C value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { sb . append ( getTemplate () . id ( org.ovirt.engine.ui.common.utils.ElementIdUtils . createTableCellElementId ( org.ovirt.engine.ui.common.widget.table.cell.StatusCompositeCellWithElementId . getElementIdPrefix () , org.ovirt.engine.ui.common.widget.table.cell.StatusCompositeCellWithElementId . getColumnId () , context ) ) ) ; for ( com.google.gwt.cell.client.HasCell < C , > hasCell : hasCells ) { render ( context , value , sb , hasCell ) ; } sb . appendHtmlConstant ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testCompareTo () { org.ovirt.engine.core.compat.NGuid guid1 = org.ovirt.engine.core.compat.NGuid . createGuidFromString ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.NGuid guid2 = org.ovirt.engine.core.compat.NGuid . createGuidFromString ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ( guid1 . compareTo ( guid2 ) ) < NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( ( ( guid1 . compareTo ( guid1 ) ) == NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( ( ( guid2 . compareTo ( guid1 ) ) > NUMBER_CONSTANT ) ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > setUpLuns ( boolean withDummyLun ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.compat.Guid GUID : org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs () ; lun . setLUN_id ( GUID . toString () ) ; luns . add ( lun ) ; } if ( withDummyLun ) { org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs () ; dummyLun . setLUN_id ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.DUMMY_LUN_ID ) ; luns . add ( dummyLun ) ; } return luns ; }
@ org.junit.Test public void testGetQuotaByExistingName ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quotaGeneralToSpecific = dao . getQuotaByQuotaName ( STRING_CONSTANT , FixturesTool.STORAGE_POOL_NFS ) ; org.junit.Assert . assertEquals ( dao . getById ( FixturesTool.QUOTA_GENERAL ) . getQuotaName () . equals ( quotaGeneralToSpecific . getQuotaName () ) , true ) ; org.junit.Assert . assertEquals ( dao . getById ( FixturesTool.QUOTA_GENERAL ) . getId () . equals ( quotaGeneralToSpecific . getId () ) , true ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > list = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > newList = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.Permission permission : list ) { if ( ! ( permission . getRoleId () . equals ( ApplicationGuids.quotaConsumer . asGuid () ) ) ) { newList . add ( permission ) ; } } setItems ( newList ) ; }
@ org.junit.Test public void testAddIscsiLunDiskIncompleteParametersConnectionPort () { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk () ; model . getLunStorage () . getLogicalUnits () . getLogicalUnits () . get ( NUMBER_CONSTANT ) . setPort ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel ) ( model ) ) ; java.util.Map < java.lang.String , java.lang.String > serverMap = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ; if ( ! ( serverMap . isEmpty () ) ) { innerGeneralModel . setHasNewGlusterHostsAlert ( true ) ; innerGeneralModel . setHasAnyAlert ( true ) ; } else { setHasNewGlusterHostsAlert ( false ) ; setHasAnyAlert ( false ) ; } }
@ org.junit.Test public void testQueryWithFilter ( ) throws java.lang.Exception { java.util.List < java.lang.String > filterValue = new java.util.ArrayList <> () ; filterValue . add ( STRING_CONSTANT ) ; org.easymock.EasyMock . reset ( httpHeaders ) ; org.easymock.EasyMock . expect ( httpHeaders . getRequestHeader ( org.ovirt.engine.api.restapi.resource.USER_FILTER_HEADER ) ) . andReturn ( filterValue ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; java.util.List < org.ovirt.engine.api.model.Network > networks = getCollection () ; java.util.Collections . sort ( networks , new org.ovirt.engine.api.restapi.resource.BackendNetworksResourceTest.NetworkIdComparator () ) ; verifyCollection ( networks ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Nic deprecatedPopulate ( org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper . getDetails ( httpHeaders , uriInfo ) ; org.ovirt.engine.api.restapi.resource.BackendNicHelper . addReportedDevices ( this , model , entity ) ; if ( details . contains ( STRING_CONSTANT ) ) { org.ovirt.engine.api.restapi.resource.BackendNicHelper . addStatistics ( this , model , entity ) ; } return model ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { boolean selectVnc = false ; java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsDevice > graphicsDevices = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; if ( ( ( graphicsDevices . size () ) == NUMBER_CONSTANT ) && ( ( graphicsDevices . get ( NUMBER_CONSTANT ) . getGraphicsType () ) == ( org.ovirt.engine.core.common.businessentities.GraphicsType.VNC ) ) ) { selectVnc = true ; } getDisplayConsole_Vnc_IsSelected () . setEntity ( selectVnc ) ; getDisplayConsole_Spice_IsSelected () . setEntity ( ( ! selectVnc ) ) ; }
private void mockVmDevice ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { org.mockito.Mockito . when ( vmDeviceDao . getVmDeviceByVmIdAndType ( vm . getId () , vmDevice . getType () ) ) . thenReturn ( java.util.Arrays . asList ( vmDevice ) ) ; org.mockito.Mockito . doReturn ( vmDeviceDao ) . when ( dbFacade ) . getVmDeviceDao () ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . init () ; }
public java.util.Map < java.lang.String , java.lang.String > getDeviceProperties ( org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported . deviceCustomProperties ( version ) ) ) { return new java.util.HashMap <> () ; } java.util.Map < java.lang.String , java.lang.String > map = deviceProperties . get ( version ) . get ( type ) ; if ( map == null ) { map = new java.util.HashMap <> () ; } else { map = new java.util.HashMap <> ( map ) ; } return map ; }
@ org.junit.Test public void testDisksUsagesWithNullEntry () { java.lang.Object [] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . initDisksUsageData () ; disksUsages [ NUMBER_CONSTANT ] = null ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDisksUsageInXmlRpc ( disksUsages ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . validateDisksUsagesList ( getVmStatistics () , disksUsages , xml ) ; }
@ org.junit.Test public void testIsQcowV3SupportedForDcVersionV3 () { disk1 . setVolumeFormat ( VolumeFormat.COW ) ; disk1 . setQcowCompat ( QcowCompat.QCOW2_V3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool () ; sp . setStoragePoolFormatType ( StorageFormatType.V3 ) ; org.mockito.Mockito . when ( storagePoolDao . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( sp ) ; org.junit.Assert . assertThat ( validator . isQcowVersionSupportedForDcVersion () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_QCOW_COMPAT_DOES_NOT_MATCH_DC_VERSION ) ) ; }
private void addPermissionOnNetwork ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.bll.PredefinedRoles role ) { org.ovirt.engine.core.common.businessentities.permissions perms = new org.ovirt.engine.core.common.businessentities.permissions () ; perms . setad_element_id ( userId ) ; perms . setObjectType ( VdcObjectType.Network ) ; perms . setObjectId ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand . getParameters () . getNetwork () . getId () ) ; perms . setrole_id ( role . getId () ) ; org.ovirt.engine.core.bll.MultiLevelAdministrationHandler . addPermission ( perms ) ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc fullList ( java.lang.String [] vmIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( STRING_CONSTANT ) . withOptionalParameterAsList ( STRING_CONSTANT , new java.util.ArrayList <> ( java.util.Arrays . asList ( vmIds ) ) ) . build () ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( STRING_CONSTANT ) . withResponseType ( java.lang.Object [] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( response ) ; }
@ org.junit.Test public void bufferEmpty () { org.junit.Assert . assertArrayEquals ( testedListToArray () , new java.lang.String [ NUMBER_CONSTANT ] ) ; org.junit.Assert . assertEquals ( tested . head () , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( tested . size () , NUMBER_CONSTANT ) ; org.junit.Assert . assertTrue ( tested . isEmpty () ) ; org.junit.Assert . assertFalse ( tested . isFull () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; if ( cluster != null ) { clusters . add ( cluster ) ; } java.util.Collections . sort ( clusters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; model . setDataCentersAndClusters ( model , dataCenters , clusters , vm . getClusterId () ) ; }
private void removeVmStatlessImages () { runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.ProcessDownVmParameters ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getId () ) , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContextForTasks ( org.ovirt.engine.core.bll.RunVmCommand . getContext () , org.ovirt.engine.core.bll.RunVmCommand . getLock () ) ) ; org.ovirt.engine.core.bll.RunVmCommand . setLock ( null ) ; org.ovirt.engine.core.bll.RunVmCommand . setSucceeded ( true ) ; }
private void plugToExternalNetwork () { java.util.Map < java.lang.String , java.lang.String > runtimeProperties = getProviderProxy () . allocate ( getNetwork () , vnicProfile , org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand . getParameters () . getNic () ) ; if ( runtimeProperties != null ) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand . getVm () . getRuntimeDeviceCustomProperties () . put ( vmDevice , runtimeProperties ) ; } }
@ java.lang.Override protected void endWithFailure () { if ( ( getMoveOrCopyImageOperation () ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Copy ) ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . unLockImage () ; if ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getAddImageDomainMapping () ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getImageStorageDomainMapDao () . remove ( new org.ovirt.engine.core.common.businessentities.image_storage_domain_map_id ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getStorageDomainId () ) ) ; } revertTasks () ; } else { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . markImageAsIllegal () ; } org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testVmNotDuringInitialization () { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setStatus ( VMStatus.Down ) ; org.mockito.Mockito . doReturn ( false ) . when ( runVmValidator ) . isVmDuringInitiating ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.VM . class ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . vmDuringInitialization ( vm ) , true , null ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { final java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool prevDataCenter = getPreviousDataCenter ( dataCenters ) ; java.util.Collections . sort ( dataCenters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; dataCenters . add ( NUMBER_CONSTANT , null ) ; getDataCenter () . setItems ( dataCenters ) ; getDataCenter () . setSelectedItem ( prevDataCenter ) ; if ( ( getDataCenter () . getSelectedItem () ) == null ) { getProxyHostPropertiesModel () . disableProxyHost () ; } }
protected boolean verifyAddVM () { final java.util.List < java.lang.String > reasons = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand . getReturnValue () . getValidationMessages () ; final int nicsCount = ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand . getParameters () . getVmsCount () ) * ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand . getVmNicDao () . getAllForTemplate ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand . getVmTemplateId () ) . size () ) ; final int priority = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand . getParameters () . getVmStaticData () . getPriority () ; return org.ovirt.engine.core.bll.VmHandler . verifyAddVm ( reasons , nicsCount , priority , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand . getMacPool () ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getRefreshCommand () ) ) { refreshModel () ; updatePagingAvailability () ; } else if ( command == ( getDetailsCommand () ) ) { details () ; } else if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { cancel () ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ) { returnValue = ( ! ( org.ovirt.engine.core.compat.StringHelper . EqOp ( getid () , STRING_CONSTANT ) ) ) && ( org.ovirt.engine.core.compat.StringHelper . EqOp ( getid () , ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( obj ) ) . getid () ) ) ; } return returnValue ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.VDS > hostNameListModel = getExternalHostName () ; hosts . add ( NUMBER_CONSTANT , null ) ; hostNameListModel . setItems ( hosts ) ; hostNameListModel . setIsChangable ( true ) ; setEnableSearchHost ( true ) ; getProviders () . setIsChangable ( true ) ; }
@ java.lang.Override public org.ovirt.engine.ui.common.widget.ImageWithDecorator getValue ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item ) { org.ovirt.engine.core.common.businessentities.VM vm = item . getVM () ; com.google.gwt.resources.client.ImageResource changesImage = null ; if ( ( vm != null ) && ( vm . isNextRunConfigurationExists () ) ) { changesImage = org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.resources . vmDelta () ; } return new org.ovirt.engine.ui.common.widget.ImageWithDecorator ( getMainImage ( item ) , changesImage , org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_LEFT , org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_TOP ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { org.ovirt.engine.core.compat.PropertyChangedEventArgs pcArgs = ( ( org.ovirt.engine.core.compat.PropertyChangedEventArgs ) ( args ) ) ; if ( STRING_CONSTANT . equals ( pcArgs.PropertyName ) ) { if ( ( modelProvider . getModel () . getProgress () ) != null ) { getView () . setLoadingState ( LoadingState.LOADING ) ; } } }
@ java.lang.Override protected org.ovirt.engine.api.model.DataCenter deprecatedPopulate ( org.ovirt.engine.api.model.DataCenter model , org.ovirt.engine.core.common.businessentities.StoragePool entity ) { org.ovirt.engine.core.common.queries.GetAvailableStoragePoolVersionsParameters parameters = new org.ovirt.engine.core.common.queries.GetAvailableStoragePoolVersionsParameters () ; parameters . setStoragePoolId ( new org.ovirt.engine.core.compat.Guid ( model . getId () ) ) ; model . setSupportedVersions ( getMapper ( java.util.List . class , org.ovirt.engine.api.model.SupportedVersions . class ) . map ( getEntity ( java.util.ArrayList . class , VdcQueryType.GetAvailableStoragePoolVersions , parameters , model . getId () ) , null ) ) ; return model ; }
@ org.junit.Test public void shouldNotCreateCpuPinningForVirtualNumaNodes () { for ( org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode : org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) { numaNode . getVdsNumaNodeList () . clear () ; } java.util.Map < java.lang.String , java.lang.Object > cpuPinning = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory . buildCpuPinningWithNumaSetting ( org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes ) ; org.assertj.core.api.Assertions . assertThat ( cpuPinning ) . isEmpty () ; java.util.Map < java.lang.String , java.lang.Object > mapping = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory . buildVmNumatuneSetting ( NumaTuneMode.INTERLEAVE , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) ; org.assertj.core.api.Assertions . assertThat ( mapping ) . doesNotContainKeys ( VdsProperties.NUMA_TUNE_MODE , VdsProperties.NUMA_TUNE_NODESET ) ; }
private void setupMock () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; returnValue . setSucceeded ( true ) ; returnValue . setReturnValue ( expected ) ; org.mockito.Mockito . doReturn ( returnValue ) . when ( getQuery () ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeOptionsInfo ) , org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase . class ) ) ; org.mockito.Mockito . doReturn ( glusterUtils ) . when ( getQuery () ) . getGlusterUtils () ; org.mockito.Mockito . when ( glusterUtils . getUpServer ( CLUSTER_ID ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ! ( o instanceof org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration ) ) { return false ; } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration that = ( ( org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration ) ( o ) ) ; return java.util.Objects . equals ( getNameServers () , that . getNameServers () ) ; }
private java.lang.String getPasswordInput ( ) throws org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult { java.lang.String pass = null ; if ( args . contains ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_PASSWORD_FILE ) ) { try { pass = readPasswordFile ( args . get ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_PASSWORD_FILE ) ) ; } catch ( java.lang.Exception e ) { throw new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult ( ManageDomainsResultEnum.FAILURE_READING_PASSWORD_FILE , e . getMessage () ) ; } if ( pass == null ) { throw new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult ( ManageDomainsResultEnum.EMPTY_PASSWORD_FILE ) ; } } else { pass = readInteractively ( STRING_CONSTANT , true ) ; } validatePassword ( pass ) ; return pass ; }
public static void getNetworkLabelsByDataCenterId ( org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.ui.frontend.AsyncQuery query ) { query.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.util.SortedSet < java.lang.String > > () { @ java.lang.Override public java.util.SortedSet < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.SortedSet < java.lang.String > sortedSet = new java.util.TreeSet < java.lang.String > ( new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ) ; sortedSet . addAll ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; return sortedSet ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNetworkLabelsByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , query ) ; }
private void updateShareable ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { if ( ( storageType . isBlockDomain () ) && ( volumeType == ( org.ovirt.engine.core.common.businessentities.VolumeType.Sparse ) ) ) { getIsShareable () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS . shareableDiskNotSupportedByConfiguration () ) ; getIsShareable () . setIsChangable ( false ) ; getIsShareable () . setEntity ( false ) ; } else if ( getIsShareable () . getIsChangable () ) { getIsShareable () . setIsChangable ( isEditEnabled () ) ; } }
@ java.lang.Override protected void onSelectedItemChanging ( java.lang.Object newValue , java.lang.Object oldValue ) { super . onSelectedItemChanging ( newValue , oldValue ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel oldModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( oldValue ) ) ; if ( oldValue != null ) { oldModel . setIsEmpty ( false ) ; oldModel . setItems ( null ) ; org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel listWithDetails = ( ( org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel ) ( ( oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel ) ? oldValue : null ) ) ; if ( listWithDetails != null ) { listWithDetails . setActiveDetailModel ( null ) ; } oldModel . stopRefresh () ; } }
@ java.lang.Override public java.util.SortedSet < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.SortedSet < java.lang.String > sortedSet = new java.util.TreeSet < java.lang.String > ( new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ) ; sortedSet . addAll ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; return sortedSet ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.junit.Before public void setUp () { org.mockito.Mockito . when ( iconDefaultsProvider . getVmIconDefaults () ) . thenReturn ( new java.util.HashMap < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > () { { put ( NUMBER_CONSTANT , new org.ovirt.engine.core.common.queries.VmIconIdSizePair ( org.ovirt.engine.core.compat.Guid . createGuidFromString ( STRING_CONSTANT ) , org.ovirt.engine.core.compat.Guid . createGuidFromString ( STRING_CONSTANT ) ) ) ; } } ) ; org.mockito.Mockito . doNothing () . when ( ovfManager ) . updateBootOrderOnDevices ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.VmBase . class ) , org.mockito.ArgumentMatchers . anyBoolean () ) ; ovfManager . setOsRepository ( osRepository ) ; }
private com.google.gwt.user.client.ui.IsWidget createGeneralAdditionalInfo () { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel () ; panel . addStyleName ( PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM ) ; generalExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem ( org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants . generalLabel () , IconType.EYE . getCssName () ) ; getClickHandlerRegistrations () . add ( generalExpand . addClickHandler ( this ) ) ; panel . add ( generalExpand ) ; return panel ; }
@ org.junit.Test public void testMemoryMapping () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setId ( Guid.Empty ) ; vds . setPhysicalMemMb ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper . map ( vds , ( ( org.ovirt.engine.api.model.Host ) ( null ) ) ) ; assertNotNull ( host . getMemory () ) ; assertEquals ( java.lang.Long . valueOf ( host . getMemory () ) , java.lang.Long . valueOf ( NUMBER_CONSTANT ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createNetworkAttachmentWithIpConfiguration ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol , java.lang.String address , java.lang.String netmask ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration () ; org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address () ; primaryAddress . setAddress ( address ) ; primaryAddress . setNetmask ( netmask ) ; ipConfiguration . getIPv4Addresses () . add ( primaryAddress ) ; ipConfiguration . setBootProtocol ( bootProtocol ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment () ; attachment . setIpConfiguration ( ipConfiguration ) ; return attachment ; }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( STRING_CONSTANT , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
private boolean hostUuidExists ( org.ovirt.engine.core.compat.Guid addedServerUuid ) { org.ovirt.engine.core.dao.gluster.GlusterServerDao glusterServerDao = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getGlusterServerDao () ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServer glusterServer = glusterServerDao . getByGlusterServerUuid ( addedServerUuid ) ; if ( ( glusterServer == null ) || ( ( glusterServer != null ) && ( glusterServer . getId () . equals ( getVds () . getId () ) ) ) ) { return false ; } return true ; }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( ( lastExecutedCommand == ( getModel () . getRemoveCommand () ) ) || ( lastExecutedCommand . getName () . equals ( EditNetworkModel.APPLY_COMMAND_NAME ) ) ) { return removeConfirmPopupProvider . get () ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
@ java.lang.Override protected void removeQuotaCommandLeftOver () { if ( ! ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . isInternalExecution () ) ) { org.ovirt.engine.core.bll.QuotaManager . removeStorageDeltaQuotaCommand ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getQuotaId () , getDisksList () . get ( NUMBER_CONSTANT ) . getstorage_ids () . get ( NUMBER_CONSTANT ) . getValue () , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getStoragePool () . getQuotaEnforcementType () , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getCommandId () ) ; } }
@ org.junit.Test public void testCheckGlusterQuorumWithTwoServersDown () { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster ( true , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.CLUSTER_ID ) ; java.lang.Iterable < org.ovirt.engine.core.compat.Guid > hostIds = java.util.Arrays . asList ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ( hostValidator . checkGlusterQuorum ( cluster , hostIds ) . size () ) == NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT ) . equals ( hostValidator . checkGlusterQuorum ( cluster , hostIds ) ) ) ; }
@ org.junit.experimental.theories.Theory public void externalVmAreNotSavedAsLastVm ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { stubCalls ( data ) ; org.junit.Assert . assertTrue ( vmsListFetcher . fetch () ) ; org.junit.Assume . assumeTrue ( ( ( data . vdsmVm () ) != null ) ) ; org.junit.Assume . assumeTrue ( ( ( data . dbVm () ) == null ) ) ; org.mockito.Mockito . verify ( vdsManager ) . setLastVmsList ( vdsManagerArgumentCaptor . capture () ) ; org.junit.Assert . assertTrue ( ( ( vdsManagerArgumentCaptor . getValue () . size () ) == NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.VM_ID } , null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
private void updateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getRunOnVds () ) != null ) { org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getRunOnVds () , vmDynamicData ) ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase . getVmDynamicDao () . update ( vmDynamicData ) ; } }
@ org.junit.Test public void testStatisticalQuery ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity = setUpStatisticalExpectations () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.Nic , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > statisticsResource = ( ( org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.Nic , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( ( ( org.ovirt.engine.api.resource.NicResource ) ( resource ) ) . getStatisticsResource () ) ) ; assertNotNull ( statisticsResource ) ; verifyQuery ( statisticsResource . getQuery () , entity ) ; }
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.core.common.queries.DiskImageList > setUpTemplates ( boolean notFound ) { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.core.common.queries.DiskImageList > ret = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.core.common.queries.DiskImageList > () ; if ( notFound ) { return ret ; } for ( int i = NUMBER_CONSTANT ; i < ( NAMES.length ) ; i ++ ) { ret . put ( getVmTemplateEntity ( i ) , new org.ovirt.engine.core.common.queries.DiskImageList () ) ; } return ret ; }
@ java.lang.Override public void init ( org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos ) { if ( qos == null ) { qos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos () ; } getOutAverageLinkshare () . setEntity ( org.ovirt.engine.ui.uicompat.external.StringUtils . render ( qos . getOutAverageLinkshare () ) ) ; getOutAverageUpperlimit () . setEntity ( org.ovirt.engine.ui.uicompat.external.StringUtils . render ( qos . getOutAverageUpperlimit () ) ) ; getOutAverageRealtime () . setEntity ( org.ovirt.engine.ui.uicompat.external.StringUtils . render ( qos . getOutAverageRealtime () ) ) ; }
private boolean shouldVdsBeReinstalled () { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand . getParameters () . getVdsStaticData () ; org.ovirt.engine.core.common.businessentities.VdsStatic oldVdsStatic = oldHost . getStaticData () ; return ( ( vdsStatic . isReinstallRequired () ) || ( ( vdsStatic . isPmKdumpDetection () ) && ( ! ( oldVdsStatic . isPmKdumpDetection () ) ) ) ) || ( ! ( java.util.Objects . equals ( vdsStatic . getCurrentKernelCmdline () , oldVdsStatic . getCurrentKernelCmdline () ) ) ) ; }
public void onRemove () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > () ; for ( java.lang.Object networkQoS : sourceListModel . getSelectedItems () ) { org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > parameter = new org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > () ; org.ovirt.engine.core.common.businessentities.network.NetworkQoS tempQos = ( ( org.ovirt.engine.core.common.businessentities.network.NetworkQoS ) ( networkQoS ) ) ; parameter . setQos ( tempQos ) ; parameters . add ( parameter ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.RemoveNetworkQoS , parameters ) ; cancel () ; }
public boolean isGraphicsAndDisplaySupported ( int osId , org.ovirt.engine.core.compat.Version version , java.util.Collection < org.ovirt.engine.core.common.businessentities.GraphicsType > graphics , org.ovirt.engine.core.common.businessentities.DisplayType displayType ) { for ( org.ovirt.engine.core.common.businessentities.GraphicsType graphicType : graphics ) { if ( ! ( osRepository . getGraphicsAndDisplays () . get ( osId ) . get ( version ) . contains ( new org.ovirt.engine.core.common.utils.Pair ( graphicType , displayType ) ) ) ) { return false ; } } return true ; }
@ org.junit.Test ( expected = org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException . class ) public void testErrorHandling () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue value = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; value . setSucceeded ( false ) ; value . setExceptionObject ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ( STRING_CONSTANT ) ) ; org.mockito.Mockito . when ( resourceManager . runVdsCommand ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.vdscommands.VDSCommandType . class ) , org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase . class ) ) ) . thenReturn ( value ) ; updater . refreshVdsStats () ; }
private void resumeUpload () { if ( ( ( getSelectedItem () ) == null ) || ( ( getWindow () ) != null ) ) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel . showUploadDialog ( this , HelpTag.resume_upload_image_to_domain , getEntity () . getId () , ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getSelectedItem () ) ) ) ; }
private void updateDisplayProtocol () { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster () ; java.lang.Integer osType = getOSType () . getSelectedItem () ; if ( ( cluster == null ) || ( osType == null ) ) { return; } java.util.List < org.ovirt.engine.core.common.businessentities.DisplayType > displayTypes = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDisplayTypes ( osType , cluster . getcompatibility_version () ) ; initDisplayProtocolWithTypes ( displayTypes ) ; }
private boolean selectedItemsContainBlankTemplate () { if ( ( getSelectedItems () ) != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VmTemplate > cast ( getSelectedItems () ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : templates ) { if ( ( template != null ) && ( template . getId () . equals ( Guid.Empty ) ) ) { return true ; } } } return false ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > runHostListMethod ( org.apache.commons.httpclient.HttpMethod httpMethod ) { try { runHttpMethod ( httpClient , httpMethod ) ; org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostWrapper [] hosts = objectMapper . readValue ( httpMethod . getResponseBody () , org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostWrapper [] . class ) ; return map ( java.util.Arrays . asList ( hosts ) ) ; } catch ( org.codehaus.jackson.JsonParseException e ) { handleException ( e ) ; } catch ( org.codehaus.jackson.map.JsonMappingException e ) { handleException ( e ) ; } catch ( java.io.IOException e ) { handleException ( e ) ; } return null ; }
@ java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue () { org.ovirt.engine.core.common.AuditLogType startMessage = ( org.ovirt.engine.core.bll.MigrateVmCommand . isInternalExecution () ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_START_SYSTEM_INITIATED : org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_START ; return org.ovirt.engine.core.bll.MigrateVmCommand . getSucceeded () ? ( org.ovirt.engine.core.bll.MigrateVmCommand . getActionReturnValue () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_DONE : startMessage : _isRerun ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_TRYING_RERUN : ( org.ovirt.engine.core.bll.MigrateVmCommand . getVds () . getstatus () ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE : org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_FAILED ; }
private com.woorea.openstack.quantum.model.Port updatePort ( com.woorea.openstack.quantum.model.Port port , boolean securityGroupsChanged , boolean hostChanged , java.util.List < java.lang.String > securityGroups , java.lang.String hostId , org.ovirt.engine.core.common.businessentities.network.VmNic nic ) { if ( securityGroupsChanged || hostChanged ) { java.util.List < java.lang.String > modifiedSecurityGroups = ( securityGroupsChanged ) ? securityGroups : port . getSecurityGroups () ; com.woorea.openstack.quantum.model.Port portForUpdate = modifyPortForAllocate ( port , hostId , hostChanged , securityGroupsChanged , modifiedSecurityGroups , nic . getMacAddress () ) ; return getClient () . ports () . update ( portForUpdate ) . execute () ; } return port ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( org.ovirt.engine.core.compat.StringHelper . EqOp ( fieldName , STRING_CONSTANT ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VmOsType . class ) ; } else if ( org.ovirt.engine.core.compat.StringHelper . EqOp ( fieldName , STRING_CONSTANT ) ) { retval = new org.ovirt.engine.core.searchbackend.DateEnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.DateEnumForSearch . class ) ; } else if ( org.ovirt.engine.core.compat.StringHelper . EqOp ( fieldName , STRING_CONSTANT ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VmTemplateStatus . class ) ; } else {} return retval ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy create ( com.google.gwt.event.shared.GwtEvent.Type < com.gwtplatform.mvp.client.RequestTabsHandler > requestTabsEventType , com.google.gwt.event.shared.GwtEvent.Type < com.gwtplatform.mvp.client.ChangeTabHandler > changeTabEventType , com.google.gwt.event.shared.GwtEvent.Type < com.gwtplatform.mvp.client.proxy.RevealContentHandler < > > slot , java.lang.String label , float priority , java.lang.String historyToken , java.lang.String contentUrl , org.ovirt.engine.ui.common.widget.Align align , java.lang.String searchPrefix ) { return new org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy ( placeManager , eventBus , gatekeeper , requestTabsEventType , changeTabEventType , slot , viewProvider , label , priority , historyToken , contentUrl , align ) ; }
public synchronized void updateDataCenter ( org.ovirt.vdsmfake.domain.DataCenter dataCenter ) { if ( ! ( dataCenterMap . containsKey ( dataCenter . getId () ) ) ) { dataCenterMap . put ( dataCenter . getId () , dataCenter ) ; } storeObject ( dataCenter ) ; org.ovirt.vdsmfake.domain.VdsmManager.log . info ( STRING_CONSTANT , dataCenter . getId () ) ; }
private boolean canRemoveNics () { org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; if ( VMStatus.Down . equals ( vm . getStatus () ) ) { return true ; } java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > nics = ( ( getSelectedItems () ) != null ) ? org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > cast ( getSelectedItems () ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics ) { if ( nic . isPlugged () ) { return false ; } } return true ; }
@ org.junit.Test public void isConnWithSameDetailsExistSameConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( STRING_CONSTANT , StorageType.NFS , NfsVersion.V4 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList <> () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection1 = newNFSConnection ; connections . add ( connection1 ) ; org.mockito.Mockito . when ( storageConnDao . getAllForStorage ( newNFSConnection . getConnection () ) ) . thenReturn ( connections ) ; boolean isExists = command . isConnWithSameDetailsExists ( newNFSConnection , null ) ; org.junit.Assert . assertFalse ( isExists ) ; }
protected org.ovirt.engine.ui.common.uicommon.WebsocketProxyConfig getConfig () { if ( ( config ) != null ) { config = new org.ovirt.engine.ui.common.uicommon.WebsocketProxyConfig ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.WebSocketProxy ) ) ) , getOptions () . getHost () ) ; } return config ; }
protected void updateLinkChangability () { boolean isPlugged = ( ( java.lang.Boolean ) ( getPlugged () . getEntity () ) ) ; boolean isNullNetworkSelected = ( getNetwork () . getSelectedItem () ) == null ; if ( isNullNetworkSelected ) { getLinked () . setIsChangable ( false ) ; return; } if ( ! ( hotUpdateSupported ) ) { getLinked () . setIsChangable ( false ) ; return; } getLinked () . setIsChangable ( true ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd . executeCommand () ; org.junit.Assert . assertFalse ( cmd . getReturnValue () . getSucceeded () ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_DISABLE_FAILED ) ; }
private org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue , org.ovirt.engine.core.compat.Guid storageDomainId ) { java.lang.String message = org.ovirt.engine.core.dal.job.ExecutionMessageDirector . resolveStepMessage ( StepEnum.MERGE_SNAPSHOTS , getJobMessageProperties () ) ; return super . createTask ( taskId , vdsReturnValue . getCreationInfo () , org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskCommand . getParameters () . getParentCommand () , message , VdcObjectType.Storage , storageDomainId ) ; }
public static void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand ( final org.ovirt.engine.core.bll.CommandBase < > command , final org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback callback = command . getCallback () ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils . getBackendCommandObjectsHandler ( org.ovirt.engine.core.bll.tasks.CommandExecutor.log ) . runAction ( command , ( cmdContext != null ? cmdContext . getExecutionContext () : null ) ) ; updateCommand ( command , result ) ; return result ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredClusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . filterByArchitecture ( clusters , vm . getClusterArch () ) ; model . setDataCentersAndClusters ( model , dataCenters , filteredClusters , vm . getVdsGroupId () ) ; initTemplate () ; initCdImage () ; }
private void updateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getRunOnVds () ) != null ) { org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getRunOnVds () . getValue () , vmDynamicData ) ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmDynamicDao () . update ( vmDynamicData ) ; } }
@ org.junit.Test public void stringToCpuTune () { org.ovirt.engine.api.model.CpuTune cpuTune = org.ovirt.engine.api.restapi.types.VmMapper . stringToCpuTune ( STRING_CONSTANT ) ; assertNotNull ( cpuTune ) ; assertNotNull ( cpuTune . getVCpuPin () ) ; assertEquals ( NUMBER_CONSTANT , cpuTune . getVCpuPin () . size () ) ; assertEquals ( NUMBER_CONSTANT , cpuTune . getVCpuPin () . get ( NUMBER_CONSTANT ) . getVcpu () ) ; assertEquals ( STRING_CONSTANT , cpuTune . getVCpuPin () . get ( NUMBER_CONSTANT ) . getCpuSet () ) ; }
@ org.junit.Test public void testParameterMapDeserialization () { java.lang.StringBuilder buf = new java.lang.StringBuilder ( STRING_CONSTANT ) ; buf . append ( STRING_CONSTANT ) ; buf . append ( STRING_CONSTANT ) ; buf . append ( STRING_CONSTANT ) ; java.util.Map < java.lang.String , java.io.Serializable > data = new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer () . deserialize ( buf . toString () , java.util.HashMap . class ) ; org.junit.Assert . assertNotNull ( data ) ; org.junit.Assert . assertEquals ( data . get ( STRING_CONSTANT ) , VdcActionType.DestroyImage ) ; }
public static void GetProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
private void removeRequestFromTracking ( org.codehaus.jackson.JsonNode id ) { try ( org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper ( this . lock ) ) { this . queue . remove ( id ) ; org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking tracking = this . map . remove ( id ) ; java.util.List < org.codehaus.jackson.JsonNode > nodes = this . hostToId . get ( tracking . getClient () . getClientId () ) ; nodes . remove ( id ) ; } }
@ java.lang.Override public void executeCommand () { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( org.ovirt.engine.core.bll.storage.ExtendCinderDiskCommand . getNewDisk () ) ) ; org.ovirt.engine.core.bll.storage.ExtendCinderDiskCommand . getCinderBroker () . extendDisk ( cinderDisk , ( ( int ) ( getNewDiskSizeInGB () ) ) ) ; persistCommand ( org.ovirt.engine.core.bll.storage.ExtendCinderDiskCommand . getParameters () . getParentCommand () , true ) ; org.ovirt.engine.core.bll.storage.ExtendCinderDiskCommand . getReturnValue () . setActionReturnValue ( cinderDisk . getId () ) ; org.ovirt.engine.core.bll.storage.ExtendCinderDiskCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testEquals () { org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > p1 = new org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > ( true , STRING_CONSTANT ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > p2 = new org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > ( true , STRING_CONSTANT ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > p3 = new org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > ( false , STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( p1 . equals ( p2 ) ) ; org.junit.Assert . assertFalse ( p1 . equals ( p3 ) ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.RemoveUserCommand . getParameters () . getId () ; for ( org.ovirt.engine.core.common.businessentities.Permissions permission : org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getPermissionDao () . getAllDirectPermissionsForAdElement ( id ) ) { org.ovirt.engine.core.common.action.PermissionsOperationsParameters tempVar = new org.ovirt.engine.core.common.action.PermissionsOperationsParameters ( permission ) ; tempVar . setShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.RemovePermission , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContexForTasks ( org.ovirt.engine.core.bll.RemoveUserCommand . getExecutionContext () ) ) ; } org.ovirt.engine.core.bll.RemoveUserCommand . getDbUserDAO () . remove ( id ) ; org.ovirt.engine.core.bll.RemoveUserCommand . setSucceeded ( true ) ; }
public static void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue () : NUMBER_CONSTANT ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDefaultConfigurationVersion () ) , aQuery ) ; }
@ org.junit.Test public void calculateNetworkImplementationDetailsNetworkDefaultMtuAndVmNetworkOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice () ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface . getNetworkName () , ( ! ( iface . isBridged () ) ) , NUMBER_CONSTANT , org.ovirt.engine.core.utils.RandomUtils . instance () . nextInt () , createQos () ) ; }
private void updateMomPolicy () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > () ; for ( java.lang.Object item : getSelectedItems () ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list . add ( new org.ovirt.engine.core.common.action.VdsActionParameters ( vds . getId () ) ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.UpdateMomPolicy , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) {} } , null ) ; }
@ org.junit.Test public void hasSharedDomain () { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdc = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic () ; sdc . setStorageType ( StorageType.NFS ) ; org.mockito.Mockito . when ( spDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest . createDefaultStoragePool () ) ; org.mockito.Mockito . when ( sdDao . getAllForStoragePool ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( sdc ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.junit.Before public void setUp () { org.mockito.Mockito . when ( iconDefaultsProvider . getVmIconDefaults () ) . thenReturn ( new java.util.HashMap < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > () { { put ( NUMBER_CONSTANT , new org.ovirt.engine.core.common.queries.VmIconIdSizePair ( org.ovirt.engine.core.compat.Guid . createGuidFromString ( STRING_CONSTANT ) , org.ovirt.engine.core.compat.Guid . createGuidFromString ( STRING_CONSTANT ) ) ) ; } } ) ; org.mockito.Mockito . doNothing () . when ( ovfManager ) . updateBootOrderOnDevices ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . anyBoolean () ) ; ovfManager . setOsRepository ( osRepository ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void flushToPrivateModel () { flushCheckBoxes ( ctrlAltDel , enableUsbAutoshare , openInFullScreen , enableSpiceProxy , useLocalDrives , wanEnabled , disableSmartcard ) ; if ( spiceRadioButton . asRadioButton () . getValue () ) { setSelectedProtocol ( ConsoleProtocol.SPICE ) ; setSelectedSpiceImpl () ; } else if ( remoteDesktopRadioButton . asRadioButton () . getValue () ) { setSelectedProtocol ( ConsoleProtocol.RDP ) ; } else if ( vncRadioButton . asRadioButton () . getValue () ) { setSelectedProtocol ( ConsoleProtocol.VNC ) ; } }
private void addBondOptionIfMissing ( java.lang.String candidateOption ) { if ( ! ( pairForBondOption . containsKey ( candidateOption ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel () ; entityModel . setEntity ( candidateOption ) ; java.util.Map.Entry < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > newPair = new org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( STRING_CONSTANT , entityModel ) ; bondOptions . add ( newPair ) ; pairForBondOption . put ( candidateOption , newPair ) ; } }
@ org.junit.Before public void setUp () { parameters = new org.ovirt.engine.core.common.action.StorageDomainManagementParameter ( org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommandTest . getStorageDomain () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand ( parameters , null ) ) ; org.mockito.Mockito . doReturn ( storageDomainStaticDao ) . when ( command ) . getStorageDomainStaticDao () ; org.mockito.Mockito . doNothing () . when ( command ) . addStorageDomainInDb () ; org.mockito.Mockito . doNothing () . when ( command ) . updateStorageDomainDynamicFromIrs () ; org.mockito.Mockito . doNothing () . when ( command ) . saveLUNsInDB ( org.mockito.Matchers . anyListOf ( org.ovirt.engine.core.common.businessentities.storage.LUNs . class ) ) ; }
private static void mockStorageDomainStatic ( org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand command , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { final org.ovirt.engine.core.dao.StorageDomainStaticDao dao = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.StorageDomainStaticDao . class ) ; final org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic () ; domain . setStorageType ( storageType ) ; org.mockito.Mockito . when ( dao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( domain ) ; org.mockito.Mockito . doReturn ( dao ) . when ( command ) . getStorageDomainStaticDao () ; }
@ org.junit.Test public void shouldNotMigrateVmOnClusterTwoWhileInUpgradeMode () { cluster2 . setClusterPolicyId ( ClusterPolicy.UPGRADE_POLICY_GUID ) ; arem . refresh () ; org.mockito.Mockito . verify ( arem ) . migrateVM ( vm1 ) ; org.mockito.Mockito . verify ( arem , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . migrateVM ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.VM . class ) ) ; org.mockito.Mockito . verify ( arem , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . migrateVM ( org.mockito.ArgumentMatchers . eq ( vm2 ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model ) ) ; java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > map = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > () ; templates . add ( map . get ( true ) ) ; searchableListModel . setItems ( templates ) ; }
private org.ovirt.engine.ui.uicommonweb.models.networks.AsyncQuery createProviderReadOnlyCallback () { org.ovirt.engine.ui.uicommonweb.models.networks.AsyncQuery asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.networks.AsyncQuery () ; asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.AsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { setCommandExecutionAllowedForProvider ( ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; } } ; return asyncQuery ; }
public static boolean isTaskStatus ( org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport supportObj , org.ovirt.engine.core.common.job.JobExecutionStatus status ) { if ( ( ( supportObj . getAsyncTask () ) != null ) && ( ( supportObj . getAsyncTask () . getStatus () ) == status ) ) { return true ; } return false ; }
@ java.lang.Override public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . ExecuteCommand ( command ) ; if ( command == ( getLoginCommand () ) ) { Login () ; } else if ( command == ( getAboutCommand () ) ) { About () ; } else if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { Cancel () ; } }
@ org.junit.Test public void testAllDomainsHaveSpaceForMergeSuccess () { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator . class ) ; org.mockito.Mockito . doReturn ( storageDomainValidator ) . when ( validator ) . getStorageDomainValidator ( org.mockito.ArgumentMatchers . any ( java.util.Map.Entry . class ) ) ; org.junit.Assert . assertTrue ( validator . allDomainsHaveSpaceForMerge ( org.mockito.ArgumentMatchers . anyList () , org.mockito.ArgumentMatchers . any () ) . isValid () ) ; org.mockito.Mockito . verify ( storageDomainValidator , org.mockito.Mockito . times ( org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.NUM_DOMAINS ) ) . hasSpaceForMerge ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void poll () { if ( vdsManager . isMonitoringNeeded () ) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher () ; long fetchTime = java.lang.System . nanoTime () ; if ( fetcher . fetch () ) { getVmsMonitoring ( fetchTime ) . perform ( fetcher . getChangedVms () ) ; processDevices ( fetcher . getVdsmVms () . stream () . map ( VmInternalData : : getVmDynamic ) , fetchTime ) ; } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log . info ( STRING_CONSTANT , vdsManager . getVdsName () ) ; } } }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel object ) { super . edit ( object ) ; labelsWidget . edit ( object . getLabelsModel () ) ; bondSuggestEditor . setVisible ( true ) ; bondEditor . setVisible ( false ) ; labelsWidget . setVisible ( true ) ; info . setVisible ( false ) ; message . setVisible ( false ) ; layoutPanel . remove ( infoPanel ) ; layoutPanel . getElement () . getStyle () . setOverflow ( Overflow.HIDDEN ) ; asPopupPanel () . setPixelSize ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void postOnSaveInternalWithImport ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel hostsModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel ) ( getWindow () ) ) ; hostsModel . getClusterModel () . setClusterId ( ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . getActionReturnValue () ) ) ) ; addHosts ( hostsModel ) ; }
@ org.junit.Test public void disableGlusterWhenVolumesExist () { createCommandWithVirtEnabled () ; org.powermock.api.mockito.PowerMockito . when ( vdsGroupDAO . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . createVdsGroupWithNoCpuName () ) ; org.powermock.api.mockito.PowerMockito . when ( vdsGroupDAO . getByName ( org.mockito.Matchers . anyString () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . createVdsGroupWithNoCpuName () ) ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuExists () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuFlagsNotMissing () ; allQueriesEmpty () ; clusterHasGlusterVolumes () ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
@ org.junit.Test public void testNonExistingQuota () { prepareVmToPassValidate () ; vmStatic . setQuotaId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . when ( quotaDao . getById ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito . doReturn ( quotaDao ) . when ( command ) . getQuotaDao () ; org.junit.Assert . assertFalse ( command . validateQuota ( vmStatic . getQuotaId () ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . assertValidationMessages ( STRING_CONSTANT , command , EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; }
private void mockBackend ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito . doReturn ( backend ) . when ( cmd ) . getBackend () ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; vdsReturnValue . setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue . setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , STRING_CONSTANT ) ) ; } org.mockito.Mockito . when ( vdsBrokerFrontend . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.RemoveGlusterHook ) , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( vdsReturnValue ) ; }
@ org.junit.Test public void updateTasksInCluster () { org.mockito.Mockito . doReturn ( getTasks () ) . when ( provider ) . getTaskListForCluster ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.CLUSTER_GUIDS [ NUMBER_CONSTANT ] ) ; prepareMocks () ; tasksSyncJob . updateGlusterAsyncTasks () ; org.mockito.Mockito . verify ( taskUtils , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateSteps ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.Cluster . class ) , org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask . class ) , org.mockito.ArgumentMatchers . anyList () ) ; }
@ org.junit.Before public void setupMock ( org.ovirt.engine.core.bll.utils.GlusterGeoRepUtil geoRepUtil , org.ovirt.engine.core.dao.gluster.GlusterGeoRepDao geoRepDao , org.ovirt.engine.core.dao.ClusterDao clusterDao ) { org.mockito.Mockito . doReturn ( geoRepDao ) . when ( geoRepUtil ) . getGeoRepDao () ; org.mockito.Mockito . doReturn ( getGeoRepSessions () ) . when ( geoRepDao ) . getAllSessions () ; org.mockito.Mockito . doReturn ( clusterDao ) . when ( geoRepUtil ) . getClusterDao () ; org.mockito.Mockito . doReturn ( getCluster ( MASTER_CLUSTER_ID , org.ovirt.engine.core.bll.gluster.GeoRepCreateEligibilityBaseTest.CLUSTER_COMPATIBILITY_VERSION ) ) . when ( clusterDao ) . get ( MASTER_CLUSTER_ID ) ; org.mockito.Mockito . doReturn ( getCluster ( SLAVE_CLUSTER_ID , org.ovirt.engine.core.bll.gluster.GeoRepCreateEligibilityBaseTest.CLUSTER_COMPATIBILITY_VERSION ) ) . when ( clusterDao ) . get ( SLAVE_CLUSTER_ID ) ; }
private java.util.List < org.ovirt.engine.core.compat.Guid > parseFilterResults ( java.lang.Object result ) { if ( ( result == null ) || ( ! ( result instanceof java.lang.Object [] ) ) ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log . error ( STRING_CONSTANT ) ; return null ; } java.util.List < org.ovirt.engine.core.compat.Guid > retValue = new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > () ; for ( java.lang.Object hostID : ( ( java.lang.Object [] ) ( result ) ) ) { retValue . add ( new org.ovirt.engine.core.compat.Guid ( hostID . toString () ) ) ; } return retValue ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.api.model.GraphicsConsole . class , to = org.ovirt.engine.core.common.businessentities.GraphicsDevice . class ) public static org.ovirt.engine.core.common.businessentities.GraphicsDevice map ( org.ovirt.engine.api.model.GraphicsConsole graphicsConsole , org.ovirt.engine.core.common.businessentities.GraphicsDevice template ) { org.ovirt.engine.api.model.GraphicsType type = org.ovirt.engine.api.model.GraphicsType . valueOf ( graphicsConsole . getProtocol () ) ; if ( template != null ) { return template ; } switch ( type ) { case SPICE : return new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ; case VNC : return new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.VNC ) ; default: return template ; } }
@ java.lang.Override public void dataCenterWithClusterSelectedItemChanged () { super . dataCenterWithClusterSelectedItemChanged () ; java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryType > queryTypeList = new java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryType > () ; queryTypeList . add ( VdcQueryType.GetVmTemplatesWithPermittedAction ) ; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters () ; getEntitiesWithPermittedActionParameters . setActionGroup ( actionGroup ) ; java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > parametersList = new java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.queries.VdcQueryParametersBase [] { getEntitiesWithPermittedActionParameters } ) ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleQueries ( queryTypeList , parametersList , this , getModel () . getHash () ) ; }
private void editMacPool () { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel ( this , org.ovirt.engine.core.common.action.VdcActionType.UpdateMacPool ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . editSharedMacPoolTitle () ) ; model . setHashName ( STRING_CONSTANT ) ; model . setHelpTag ( HelpTag.edit_shared_mac_pool ) ; setWindow ( model ) ; model . setEntity ( ( ( org.ovirt.engine.core.common.businessentities.MacPool ) ( getSelectedItem () ) ) ) ; }
@ org.junit.Test public void testAllocateVm ( ) throws java.lang.Exception { setUpGetVmExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.AttachUserToVmFromPoolAndRun , org.ovirt.engine.core.common.action.AttachUserToVmFromPoolAndRunParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.FALSE } , GUIDS [ NUMBER_CONSTANT ] ) ) ; verifyTestAllocateVmActionResponse ( resource . allocateVm ( new org.ovirt.engine.api.model.Action () ) ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.DataCenter deprecatedPopulate ( org.ovirt.engine.api.model.DataCenter model , org.ovirt.engine.core.common.businessentities.storage_pool entity ) { org.ovirt.engine.core.common.queries.GetAvailableStoragePoolVersionsParameters parameters = new org.ovirt.engine.core.common.queries.GetAvailableStoragePoolVersionsParameters () ; parameters . setStoragePoolId ( new org.ovirt.engine.core.compat.Guid ( model . getId () ) ) ; model . setSupportedVersions ( getMapper ( java.util.List . class , org.ovirt.engine.api.model.SupportedVersions . class ) . map ( getEntity ( java.util.ArrayList . class , VdcQueryType.GetAvailableStoragePoolVersions , parameters , model . getId () ) , null ) ) ; return model ; }
@ org.junit.Test public void testGetAllWithQuery () { java.util.List < org.ovirt.engine.core.common.businessentities.NetworkView > result = dao . getAllWithQuery ( java.lang.String . format ( STRING_CONSTANT , FixturesTool.NETWORK_ENGINE ) ) ; org.junit.Assert . assertFalse ( result . isEmpty () ) ; org.junit.Assert . assertEquals ( FixturesTool.NETWORK_ENGINE , result . get ( NUMBER_CONSTANT ) . getNetwork () . getId () ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addInterface ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , boolean plugged , boolean hostDev , java.lang.String address ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( deviceId , vmId ) , VmDeviceGeneralType.INTERFACE , ( hostDev ? org.ovirt.engine.core.common.utils.VmDeviceType.HOST_DEVICE : org.ovirt.engine.core.common.utils.VmDeviceType.BRIDGE ) , org.ovirt.engine.core.bll.utils.VmDeviceUtils.EMPTY_SPEC_PARAMS , plugged , false , address , null , false ) ; }
@ org.junit.Before public void setUp () { setUpQuota () ; params = new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( quota ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.UpdateQuotaCommand ( params ) ) ; org.mockito.Mockito . doReturn ( quotaDao ) . when ( command ) . getQuotaDao () ; org.mockito.Mockito . doNothing () . when ( command ) . removeQuotaFromCache () ; org.mockito.Mockito . doNothing () . when ( command ) . afterUpdate () ; }
private java.lang.StringBuilder runAndCheck ( java.lang.StringBuilder original , java.lang.String pattern , java.lang.String value , java.lang.String expected ) { java.lang.StringBuilder res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler . replace ( original , pattern , value ) ; org.junit.Assert . assertThat ( res . toString () , org.hamcrest.core.Is . is ( org.hamcrest.core.IsEqual . equalTo ( expected ) ) ) ; return res ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Role > getAll () { java.lang.Integer appMode = org.ovirt.engine.core.common.config.Config . < java.lang.Integer > GetValue ( ConfigValues.ApplicationMode ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , appMode . intValue () ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance , parameterSource ) ; }
@ java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId () { if ( ( cachedStorageDomainId ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils . createDiskDummies ( org.ovirt.engine.core.bll.HibernateVmCommand . getVm () . getTotalMemorySizeInBytes () , MemoryUtils.META_DATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler . findStorageDomainForMemory ( org.ovirt.engine.core.bll.HibernateVmCommand . getStoragePoolId () , diskDummiesForMemSize ) ; if ( storageDomain != null ) { cachedStorageDomainId = storageDomain . getId () ; } } return cachedStorageDomainId ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice.Source > mapRngSources ( java.util.List < java.lang.String > model ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice.Source > result = new java.util.ArrayList <> ( ( model != null ? model . size () : NUMBER_CONSTANT ) ) ; if ( model != null ) { for ( java.lang.String sourceString : model ) { try { org.ovirt.engine.api.model.RngSource source = org.ovirt.engine.api.model.RngSource . fromValue ( sourceString ) ; result . add ( org.ovirt.engine.api.restapi.types.RngDeviceMapper . map ( source , null ) ) ; } catch ( java.lang.IllegalArgumentException iae ) {} } } return result ; }
@ org.junit.Before public void setUp () { diskImage . setDiskProfileId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . bind ( org.ovirt.engine.core.dal.dbbroker.DbFacade . class , dbFacade ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . setInstance ( dbFacade ) ; org.mockito.Mockito . when ( dbFacade . getStorageQosDao () ) . thenReturn ( storageQosDao ) ; qos = new org.ovirt.engine.core.common.businessentities.qos.StorageQos () ; qos . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice () ; }
public void removeAll ( boolean removeFromMacPool , org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > interfaces = getVmNetworkInterfaceDAO () . getAllForVm ( vmId ) ; if ( interfaces != null ) { for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces ) { if ( removeFromMacPool ) { getMacPoolManager () . freeMac ( iface . getMacAddress () ) ; } getVmNetworkInterfaceDAO () . remove ( iface . getId () ) ; getVmNetworkStatisticsDAO () . remove ( iface . getId () ) ; } } }
@ org.junit.Test public void validateShareableDiskVolumeFormatSucceeds () { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest . createShareableDiskImage () ; image . setvolumeFormat ( VolumeFormat.RAW ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest . createParameters () ; parameters . setDiskInfo ( image ) ; org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid . newGuid () ; initializeCommand ( storageId , parameters ) ; mockVm () ; mockStorageDomain ( storageId , Version.v3_1 ) ; mockStoragePoolIsoMap () ; mockInterfaceList () ; mockMaxPciSlots () ; runAndAssertValidateSuccess () ; }
private org.ovirt.engine.core.common.mode.ApplicationMode findApplicationMode ( java.lang.String sessionId ) { org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode , org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion ) ; parameters . setSessionId ( sessionId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend . runPublicQuery ( VdcQueryType.GetConfigurationValue , parameters ) ; return org.ovirt.engine.core.common.mode.ApplicationMode . from ( ( ( java.lang.Integer ) ( result . getReturnValue () ) ) ) ; }
@ org.junit.Test public void testEmpty () { org.ovirt.engine.core.searchbackend.IAutoCompleter comp = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter () ; java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ! ( comps . contains ( STRING_CONSTANT ) ) ) ) ; }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy createPoolWithoutLocking ( org.ovirt.engine.core.common.businessentities.MacPool macPool ) { if ( macPools . containsKey ( macPool . getId () ) ) { throw new java.lang.IllegalStateException ( org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST ) ; } org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy poolForScope = new org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges ( macPoolToRanges ( macPool ) , macPool . isAllowDuplicateMacAddresses () ) ; poolForScope . initialize () ; macPools . put ( macPool . getId () , poolForScope ) ; return poolForScope ; }
@ java.lang.Override public void formatValue ( java.lang.String fieldName , org.ovirt.engine.core.compat.RefObject < java.lang.String > relations , org.ovirt.engine.core.compat.RefObject < java.lang.String > value , boolean caseSensitive ) { if ( org.ovirt.engine.core.compat.StringHelper . EqOp ( fieldName , STRING_CONSTANT ) ) { java.util.Date tmp = new java.util.Date ( java.util.Date . parse ( org.ovirt.engine.core.compat.StringHelper . trim ( value.argvalue , CHAR_CONS ) ) ) ; value.argvalue = org.ovirt.engine.core.compat.StringFormat . format ( STRING_CONSTANT , tmp ) ; } else { super . formatValue ( fieldName , relations , value , caseSensitive ) ; } }
@ java.lang.Override public void onLogout () { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery () ; query . setHandleFailure ( true ) ; query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { Window.Location . reload () ; } } ; frontend . logoffAsync ( frontend . getLoggedInUser () , query ) ; }
@ org.junit.Test public void validateFailsForDifferentStorageDevice () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice ( STRING_CONSTANT ) ; storageDevice2 . setDevType ( STRING_CONSTANT ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays . asList ( storageDevice1 , storageDevice2 ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
public static synchronized org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo getInstance () { if ( ( org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo.instance ) == null ) { org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo.instance = new org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo () ; } else { if ( ( org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo.instance ) == null ) { synchronized ( org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo . class ) { if ( ( org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo.instance ) == null ) { org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo.instance = new org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo () ; } } } } return org.ovirt.engine.core.bll.hostdeploy.OVirtNodeInfo.instance ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd . executeCommand () ; org.junit.Assert . assertFalse ( cmd . getReturnValue () . getSucceeded () ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_DISABLE_FAILED ) ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections . sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllForStoragePoolAndStatus ( org.ovirt.engine.core.compat.Guid storagePool , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , storagePool ) . addValue ( STRING_CONSTANT , status . getValue () ) ) ; return uniteAgents ( vdsList ) ; }
@ org.junit.Test public void disableVirtWhenVmsExist () { createCommandWithGlusterEnabled () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createDefaultCluster () ) ; org.mockito.Mockito . when ( clusterDao . getByName ( org.mockito.Matchers . anyString () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createDefaultCluster () ) ; mcr . mockConfigValue ( ConfigValues.GlusterSupport , org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1 , java.lang.Boolean.TRUE ) ; cpuExists () ; cpuFlagsNotMissing () ; clusterHasVds () ; clusterHasVMs () ; validateFailedWithReason ( EngineMessage.CLUSTER_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS ) ; }
@ org.junit.Test public void getFreeVfMoreThanOneFreeVf () { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , freeVfs . size () ) ; org.junit.Assert . assertTrue ( freeVfs . contains ( hostNicVfsConfigHelper . getFreeVf ( nic ) ) ) ; }
@ org.junit.Test public void testQueryWithFilter ( ) throws java.lang.Exception { java.util.List < java.lang.String > filterValue = new java.util.ArrayList < java.lang.String > () ; filterValue . add ( STRING_CONSTANT ) ; org.easymock.EasyMock . reset ( httpHeaders ) ; org.easymock.EasyMock . expect ( httpHeaders . getRequestHeader ( STRING_CONSTANT ) ) . andReturn ( filterValue ) ; resource . setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( true ) ; control . replay () ; resource . get () ; }
private void handleFinalizingFailure ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { log . error ( STRING_CONSTANT , getTransferDescription () ) ; stopImageTransferSession ( context.entity ) ; if ( org.ovirt.engine.core.compat.Guid . isNullOrEmpty ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getParameters () . getImageGroupID () ) ) { setImageStatus ( ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getParameters () . getTransferType () ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload ) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ) ) ; } updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; }
private boolean validateHostUniqueNameAndAddress ( org.ovirt.engine.core.common.businessentities.VdsStatic vdsStaticData ) { org.ovirt.engine.core.compat.Guid vdsForUniqueId = org.ovirt.engine.core.bll.AddVdsCommand . getParameters () . getVdsForUniqueId () ; if ( vdsForUniqueId == null ) { return ! ( org.ovirt.engine.core.bll.VdsHandler . isVdsExist ( org.ovirt.engine.core.bll.AddVdsCommand . getParameters () . getVdsStaticData () , org.ovirt.engine.core.bll.AddVdsCommand . getReturnValue () . getCanDoActionMessages () ) ) ; } else { return ! ( org.ovirt.engine.core.bll.VdsHandler . isVdsExistForPendingOvirt ( org.ovirt.engine.core.bll.AddVdsCommand . getParameters () . getVdsStaticData () , org.ovirt.engine.core.bll.AddVdsCommand . getReturnValue () . getCanDoActionMessages () , vdsForUniqueId ) ) ; } }
@ org.junit.Test public void testRemove () { org.ovirt.engine.core.common.businessentities.CommandEntity cmd = dbFacade . getCommandEntityDao () . get ( getExistingEntityId () ) ; org.junit.Assert . assertNotNull ( cmd ) ; dbFacade . getCommandEntityDao () . remove ( getExistingEntityId () ) ; org.ovirt.engine.core.common.businessentities.CommandEntity cmdAfterRemoval = dbFacade . getCommandEntityDao () . get ( getExistingEntityId () ) ; org.junit.Assert . assertNull ( cmdAfterRemoval ) ; }
protected void verifyFault ( javax.ws.rs.WebApplicationException wae , java.lang.String reason , java.lang.String detail , int status ) { assertEquals ( status , wae . getResponse () . getStatus () ) ; assertTrue ( ( ( wae . getResponse () . getEntity () ) instanceof org.ovirt.engine.api.model.Fault ) ) ; org.ovirt.engine.api.model.Fault fault = ( ( org.ovirt.engine.api.model.Fault ) ( wae . getResponse () . getEntity () ) ) ; assertEquals ( reason , fault . getReason () ) ; assertEquals ( detail , fault . getDetail () ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) , null ) ) ; setupMocks () ; org.mockito.Mockito . doNothing () . when ( hookSyncJob ) . refreshHooksInCluster ( getCluster () , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_REFRESH , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override protected void onEntityChanged () { if ( ( getEntity () ) != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( getEntity () ) ) . getVm () ; setItems ( vm . getInterfaces () ) ; } else { setItems ( null ) ; } }
@ org.junit.Test public void testAddIncompleteParameters_noName ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; model . setDescription ( DESCRIPTIONS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { ( ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource ) ( collection ) ) . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public static java.util.Set < java.lang.String > getExpectations ( javax.ws.rs.core.HttpHeaders headers ) { java.util.Set < java.lang.String > expectations = new java.util.HashSet <> () ; for ( java.lang.String header : org.ovirt.engine.api.restapi.util.ExpectationHelper.HEADERS ) { java.util.List < java.lang.String > values = headers . getRequestHeader ( header ) ; if ( values != null ) { expectations . addAll ( values ) ; } } return expectations ; }
private void extractRemovedBonds () { for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : getExistingIfaces () . values () ) { java.lang.String bondName = iface . getBondName () ; if ( ( org.apache.commons.lang.StringUtils . isNotBlank ( bondName ) ) && ( ! ( bonds . containsKey ( bondName ) ) ) ) { removedBonds . add ( getExistingIfaces () . get ( bondName ) ) ; } } }
public org.ovirt.engine.core.common.businessentities.storage.VolumeClassification deleteVolumeByClassificationType ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderVolumeType = cinderDisk . getVolumeClassification () ; if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { deleteVolume ( cinderDisk ) ; } else if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { deleteSnapshot ( cinderDisk . getImageId () ) ; } org.ovirt.engine.core.bll.storage.CinderBroker.log . error ( STRING_CONSTANT , cinderDisk . getDiskAlias () , cinderDisk . getImageId () ) ; return cinderVolumeType ; }
@ org.junit.Test public void allow36HostWithoutDeployingHostedEngine () { org.mockito.Mockito . when ( hostedEngineHelper . isVmManaged () ) . thenReturn ( false ) ; mockCluster ( Version.v3_6 ) ; org.mockito.Mockito . when ( host . getClusterId () ) . thenReturn ( Guid.Empty ) ; org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration heConfig = new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration ( HostedEngineDeployConfiguration.Action.NONE ) ; org.junit.Assert . assertThat ( validator . supportsDeployingHostedEngine ( heConfig ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration () { return super . createWidgetConfiguration () . update ( foremanTab , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig . hiddenField () ) . putAll ( poolSpecificFields () , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig . hiddenField () ) . putOne ( logicalNetworksEditorPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig . hiddenField () ) . update ( consoleTab , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig . simpleField () . visibleInAdvancedModeOnly () ) . putOne ( baseTemplateEditor , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig . hiddenField () ) ; }
public static void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap ) { try { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . addImage ( image , active , imageStorageDomainMap ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . addDisk ( image ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log . error ( STRING_CONSTANT , ex . getMessage () ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log . debug ( STRING_CONSTANT , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
@ org.junit.Test public void storageTypeUnsupported () { org.ovirt.engine.core.common.businessentities.StorageDomain sd = mockGetExistingDomain ( true ) ; sd . setStorageType ( StorageType.CINDER ) ; sd . setId ( org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HE_SD_ID ) ; cmd . init () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( STRING_CONSTANT , cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED ) ; org.mockito.Mockito . verify ( backend , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . runInternalQuery ( org.mockito.ArgumentMatchers . eq ( QueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.queries.QueryParametersBase . class ) ) ; org.mockito.Mockito . verify ( cmd , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . executeCommand () ; }
@ org.junit.Test public void testLiveSnapshotWhenNoPluggedDiskSnapshot () { setUpGeneralValidations () ; setUpDiskValidations () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . isLiveSnapshotApplicable () ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest . getEmptyDiskList () ) . when ( cmd ) . getDisksList () ; org.junit.Assert . assertTrue ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . isEmpty () ) ; }
private void addDefaultNetworks () { org.ovirt.engine.core.common.businessentities.Network net = new org.ovirt.engine.core.common.businessentities.Network () ; net . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; net . setname ( org.ovirt.engine.core.common.config.Config . < java.lang.String > GetValue ( ConfigValues.ManagementNetwork ) ) ; net . setdescription ( AddVdsGroupCommand.DefaultNetworkDescription ) ; net . setstorage_pool_id ( org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand . getStoragePool () . getId () ) ; net . setVmNetwork ( true ) ; getNetworkDAO () . save ( net ) ; }
@ org.junit.Test public void testSwitchStorageDomainType () { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command . getStorageDomain () . getStorageStaticData () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.utils.Pair ( sdStatic , sdStatic . getId () ) ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters . class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , final org.ovirt.engine.ui.uicommonweb.models.ListModel model , com.google.gwt.safehtml.shared.SafeHtml tooltipContent , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < org.ovirt.engine.ui.uicommonweb.models.ListModel > valueUpdater ) { delegate . onBrowserEvent ( context , parent , renderer . render ( ( ( T ) ( model . getSelectedItem () ) ) ) , event , new com.google.gwt.cell.client.ValueUpdater < java.lang.String > () { @ java.lang.Override public void update ( java.lang.String value ) { if ( value != null ) { model . setSelectedItem ( entityByName . get ( value ) ) ; } } } ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( STRING_CONSTANT , getForce () ) . append ( STRING_CONSTANT , getSecondsToWait () ) . append ( STRING_CONSTANT , getGracefully () ) . append ( STRING_CONSTANT , getReason () ) . append ( STRING_CONSTANT , isIgnoreNoVm () ) ; }
@ org.junit.Test public void commandFailsSlaveNotOvirtMonitored () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.SetupGlusterGeoRepMountBrokerInternalCommand ( new org.ovirt.engine.core.common.action.gluster.SetUpMountBrokerParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , new java.util.HashSet ( java.util.Collections . singletonList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) , null , null ) ) ) ; org.mockito.Mockito . doReturn ( vds ) . when ( command ) . getUpServer () ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . getSlaveVolume () ; org.junit.Assert . assertFalse ( command . validate () ) ; }
private static void addEmptyCD ( org.ovirt.engine.core.compat.Guid dstId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , dstId ) , VmDeviceGeneralType.DISK , VmDeviceType.CDROM , java.util.Collections . < java.lang.String , java.lang.Object > singletonMap ( VdsProperties.Path , STRING_CONSTANT ) , true , true , null ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = prepareDAO ( dbFacade . getStorageServerConnectionDao () ) ; existingConnection = dao . get ( STRING_CONSTANT ) ; existingNfsAutoConnection = dao . get ( FixturesTool.EXISTING_STORAGE_CONNECTION_NFS_AUTO_ID . toString () ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections () ; newServerConnection . setid ( STRING_CONSTANT ) ; newServerConnection . setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionDAOTest.EXISTING_DOMAIN_STORAGE_NAME ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Watchdog model , org.ovirt.engine.core.common.businessentities.VmWatchdog entity ) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters () ; parameters . setAction ( org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( org.ovirt.engine.api.model.WatchdogAction . fromValue ( model . getAction () ) ) ) ; parameters . setModel ( org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( org.ovirt.engine.api.model.WatchdogModel . fromValue ( model . getModel () ) ) ) ; parameters . setId ( vmId ) ; parameters . setVm ( true ) ; return parameters ; }
protected org.codehaus.jackson.node.ObjectNode getUserInfoObject ( org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedInUser , java.lang.String engineSessionId , java.lang.String ssoToken ) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode () ; obj . put ( STRING_CONSTANT , loggedInUser . getId () . toString () ) ; obj . put ( STRING_CONSTANT , loggedInUser . getLoginName () ) ; obj . put ( STRING_CONSTANT , loggedInUser . getDomain () ) ; obj . put ( STRING_CONSTANT , loggedInUser . isAdmin () ) ; obj . put ( STRING_CONSTANT , engineSessionId ) ; obj . put ( STRING_CONSTANT , ssoToken ) ; return obj ; }
public void addFunction ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { usedFunctions . add ( new org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.scheduling.PolicyUnit , java.lang.Integer > ( policyUnit , NUMBER_CONSTANT ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( unusedFunctions . size () ) ; i ++ ) { if ( unusedFunctions . get ( i ) . getId () . equals ( policyUnit . getId () ) ) { unusedFunctions . remove ( policyUnit ) ; break; } } refreshCustomProperties ( null ) ; getFunctionsChangedEvent () . raise ( this , EventArgs.Empty ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , org.ovirt.engine.ui.uicommonweb.models.providers.RemoveProvidersModel.CMD_REMOVE ) ) { onRemove () ; } else if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , org.ovirt.engine.ui.uicommonweb.models.providers.RemoveProvidersModel.CMD_CANCEL ) ) { cancel () ; } }
private void validateAndExpectViolation ( org.ovirt.engine.core.bll.SetupNetworksHelper helper , org.ovirt.engine.core.dal.VdcBllMessages violation ) { java.util.List < org.ovirt.engine.core.dal.VdcBllMessages > violations = helper . validate () ; junit.framework.Assert . assertTrue ( java.text.MessageFormat . format ( STRING_CONSTANT , violation , violations ) , violations . contains ( violation ) ) ; }
private void cancelImportConfirm () { cancelConfirm () ; getWindow () . stopProgress () ; if ( ( fileConnection ) != null ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.DisconnectStorageServerConnection , new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( fileConnection , hostId ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result . getState () ) ) ; cleanConnection ( storageListModel.fileConnection , storageListModel.hostId ) ; storageListModel.fileConnection = null ; } } , this ) ; } }
private org.ovirt.engine.core.common.businessentities.Cluster createCluster ( int index ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setId ( org.ovirt.engine.core.bll.gluster.GlusterHookSyncJobTest.CLUSTER_GUIDS [ index ] ) ; cluster . setName ( STRING_CONSTANT ) ; cluster . setGlusterService ( true ) ; cluster . setVirtService ( false ) ; cluster . setCompatibilityVersion ( Version.v3_2 ) ; return cluster ; }
private void setupMock ( ) throws java.lang.Exception { commandMock = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.ClearExternalJobCommand ( parameters , null ) ) ; org.mockito.Mockito . when ( commandMock . getParameters () ) . thenReturn ( parameters ) ; org.mockito.Mockito . doReturn ( jobDaoMock ) . when ( commandMock ) . getJobDao () ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) . thenReturn ( makeTestJob ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.nonExistingJobId ) ) . thenReturn ( null ) ; }
@ java.lang.Override protected org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > createCommand () { org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters param = new org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters ( vmPools , testVm , VM_COUNT , DISK_SIZE ) ; param . setStorageDomainId ( firstStorageDomainId ) ; org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > ( param ) { @ java.lang.Override protected void initTemplate () {} } ) ; command . postConstruct () ; return command ; }
private void initState () { reportsEnabled = false ; xmlInitialized = false ; reportsWebappDeployed = false ; scheduledStatusCheckInProgress = false ; initEventRaised = false ; reportBaseUrl = STRING_CONSTANT ; reportRightClickUrl = STRING_CONSTANT ; isCommunityEdition = false ; resourceMap = new java.util.HashMap < java.lang.String , org.ovirt.engine.ui.uicompat.ReportParser.Resource > () ; dashboardMap = new java.util.HashMap < java.lang.String , org.ovirt.engine.ui.uicompat.ReportParser.Dashboard > () ; reportsInitEvent = new org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.EventArgs > ( STRING_CONSTANT , org.ovirt.engine.ui.uicommonweb.ReportInit . class ) ; retryCount = NUMBER_CONSTANT ; }
private void addVideoCardByDisplayType ( org.ovirt.engine.core.common.businessentities.DisplayType displayType ) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct () ; struct . add ( VdsProperties.Type , VmDeviceType.VIDEO . getName () ) ; struct . add ( VdsProperties.Device , displayType . getVmDeviceType () . getName () ) ; struct . add ( VdsProperties.SpecParams , org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder . getNewMonitorSpecParams () ) ; struct . add ( VdsProperties.DeviceId , java.lang.String . valueOf ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ) ; devices . add ( struct ) ; }
