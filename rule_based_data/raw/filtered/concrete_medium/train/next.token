public void testGetPropReceiver () { com.android.ddmlib.PropertyFetcher.GetPropReceiver receiver = new com.android.ddmlib.PropertyFetcher.GetPropReceiver () ; byte [] byteData = com.android.ddmlib.PropertyFetcherTest.GETPROP_RESPONSE . getBytes () ; receiver . addOutput ( byteData , NUMBER_CONSTANT , byteData.length ) ; assertEquals ( STRING_CONSTANT , receiver . getCollectedProperties () . get ( STRING_CONSTANT ) ) ; }
@ javax.annotation.Nonnull private com.android.jack.Options getOptions ( @ javax.annotation.Nonnull com.android.jack.errorhandling.TestingEnvironment te ) { com.android.jack.Options options = new com.android.jack.Options () ; java.util.List < java.lang.String > ecjArgs = new java.util.ArrayList < java.lang.String > () ; ecjArgs . add ( te . getSourceFolder () . getAbsolutePath () ) ; options . setEcjArguments ( ecjArgs ) ; options . setClasspath ( com.android.jack.TestTools . getDefaultBootclasspathString () ) ; options . setOutputDir ( te . getTestingFolder () ) ; return options ; }
public boolean tryEnterIf ( com.google.common.util.concurrent.Monitor.Guard guard ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException () ; } final java.util.concurrent.locks.ReentrantLock lock = this . lock ; if ( ! ( lock . tryLock () ) ) { return false ; } boolean satisfied = false ; try { return satisfied = guard . isSatisfied () ; } finally { if ( ! satisfied ) { lock . unlock () ; } } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendTextWithOutDesAddr () { mCdmaSmsDispatcher . sendText ( null , STRING_CONSTANT , com.android.internal.telephony.cdma.TAG , null , null , null , null , false ) ; verify ( mSimulatedCommandsVerifier , times ( NUMBER_CONSTANT ) ) . sendImsGsmSms ( anyString () , anyString () , anyInt () , anyInt () , any ( android.os.Message . class ) ) ; }
@ javax.annotation.Nonnull public void run ( @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.lang.String expected ) throws java.lang.Exception { java.util.List < com.android.jack.test.runner.RuntimeRunner > runnerList = com.android.jack.test.toolchain.AbstractTestTools . listRuntimeTestRunners () ; for ( com.android.jack.test.runner.RuntimeRunner runner : runnerList ) { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream () ; ( ( com.android.jack.test.runner.AbstractRuntimeRunner ) ( runner ) ) . setOutputStream ( out ) ; junit.framework.Assert . assertEquals ( NUMBER_CONSTANT , runner . run ( new java.lang.String [ NUMBER_CONSTANT ] , mainClass , dexFile ) ) ; junit.framework.Assert . assertEquals ( expected , out . toString () ) ; } }
private com.android.builder.VariantConfiguration getVariant () { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT ) ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , STRING_CONSTANT ) ; return variant ; }
public void testNullComment ( ) throws java.io.IOException { try ( java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.ByteArrayOutputStream () ) ) { out . setComment ( null ) ; out . putNextEntry ( new java.util.zip.ZipEntry ( STRING_CONSTANT ) ) ; out . write ( new byte [ NUMBER_CONSTANT ] ) ; out . closeEntry () ; out . finish () ; } }
@ javax.annotation.Nonnull private com.android.jill.frontend.java.Variable getStackVariable ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , int stackIdx ) { int stackHeight = ( frame . getStackSize () ) + stackIdx ; org.objectweb.asm.tree.analysis.BasicValue bv = frame . getStack ( stackHeight ) ; assert bv != ( org.objectweb.asm.tree.analysis.BasicValue.UNINITIALIZED_VALUE ) ; java.lang.String id = ( ( STRING_CONSTANT + stackHeight ) + STRING_CONSTANT ) + ( typeToUntypedDesc ( bv . getType () ) ) ; com.android.jill.frontend.java.Variable variable = getVariable ( id , id , typeToUntyped ( bv . getType () ) , null ) ; return variable ; }
@ java.lang.Override public void setImeWindowStatus ( android.os.IBinder token , int vis , int backDisposition ) { boolean altBack = ( backDisposition == ( android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_DISMISS ) ) || ( ( vis & ( android.inputmethodservice.InputMethodService.IME_VISIBLE ) ) != NUMBER_CONSTANT ) ; setNavigationIconHints ( ( altBack ? ( mNavigationIconHints ) | ( android.app.StatusBarManager.NAVIGATION_HINT_BACK_ALT ) : ( mNavigationIconHints ) & ( ~ ( android.app.StatusBarManager.NAVIGATION_HINT_BACK_ALT ) ) ) ) ; if ( ( mQS ) != null ) mQS . setImeWindowStatus ( ( vis > NUMBER_CONSTANT ) ) ; }
private void run ( @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.io.File [] dexFiles ) throws java.lang.Exception { java.util.List < com.android.jack.test.runner.RuntimeRunner > runnerList = com.android.jack.test.toolchain.AbstractTestTools . listRuntimeTestRunners () ; for ( com.android.jack.test.runner.RuntimeRunner runner : runnerList ) { junit.framework.Assert . assertEquals ( NUMBER_CONSTANT , runner . runJUnit ( new java.lang.String [ NUMBER_CONSTANT ] , AbstractTestTools.JUNIT_RUNNER_NAME , new java.lang.String [] { mainClass } , dexFiles ) ) ; } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testSelfManagedPhoneAccount ( ) throws java.lang.Exception { mComponentContextFixture . addConnectionService ( com.android.server.telecom.tests.PhoneAccountRegistrarTest . makeQuickConnectionServiceComponentName () , org.mockito.Mockito . mock ( com.android.internal.telecom.IConnectionService . class ) ) ; android.telecom.PhoneAccountHandle selfManagedHandle = com.android.server.telecom.tests.PhoneAccountRegistrarTest . makeQuickAccountHandle ( new android.content.ComponentName ( STRING_CONSTANT , STRING_CONSTANT ) , STRING_CONSTANT ) ; android.telecom.PhoneAccount selfManagedAccount = new android.telecom.PhoneAccount.Builder ( selfManagedHandle , STRING_CONSTANT ) . setCapabilities ( PhoneAccount.CAPABILITY_SELF_MANAGED ) . build () ; mRegistrar . registerPhoneAccount ( selfManagedAccount ) ; android.telecom.PhoneAccount registeredAccount = mRegistrar . getPhoneAccountUnchecked ( selfManagedHandle ) ; org.junit.Assert . assertEquals ( com.android.server.telecom.tests.PhoneAccountRegistrarTest.TEST_LABEL , registeredAccount . getLabel () ) ; }
@ java.lang.Override public void visitLabel ( final org.objectweb.asm.Label label ) { checkStartCode () ; checkEndCode () ; checkLabel ( label , false , STRING_CONSTANT ) ; if ( ( labels . get ( label ) ) != null ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } labels . put ( label , insnCount ) ; super . visitLabel ( label ) ; }
@ org.junit.Test public void findBestSampleSize () { org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.android.volley.toolbox.ImageRequest . findBestSampleSize ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.android.volley.toolbox.ImageRequest . findBestSampleSize ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.android.volley.toolbox.ImageRequest . findBestSampleSize ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.android.volley.toolbox.ImageRequest . findBestSampleSize ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( ( ( document ) != null ) && ( mDriver . isSuppressed ( this , issue , document ) ) ) { return; } super . report ( issue , location , message ) ; }
@ org.jetbrains.annotations.NotNull public static com.intellij.lang.properties.IProperty createProperty ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.NonNls @ org.jetbrains.annotations.NotNull java.lang.String name , @ org.jetbrains.annotations.NonNls @ org.jetbrains.annotations.NotNull java.lang.String value ) { java.lang.String text = com.intellij.lang.properties.psi.PropertiesElementFactory . getPropertyText ( name , value , null , project ) ; final com.intellij.lang.properties.psi.PropertiesFile dummyFile = com.intellij.lang.properties.psi.PropertiesElementFactory . createPropertiesFile ( project , text ) ; return dummyFile . getProperties () . get ( NUMBER_CONSTANT ) ; }
public boolean enterIf ( com.google.common.util.concurrent.Monitor.Guard guard ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException () ; } final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock . lock () ; boolean satisfied = false ; try { return satisfied = guard . isSatisfied () ; } finally { if ( ! satisfied ) { lock . unlock () ; } } }
public int getDrmObjectType ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) && ( ( null == mimeType ) || ( mimeType . equals ( STRING_CONSTANT ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _getDrmObjectType ( mUniqueId , path , mimeType ) ; }
@ java.lang.Override public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [] interfaces ) { com.google.common.base.Preconditions . checkArgument ( com.google.devtools.build.android.desugar.BitFlags . isSet ( access , Opcodes.ACC_INTERFACE ) ) ; com.google.common.base.Preconditions . checkState ( ( ( interfaceName ) == null ) ) ; interfaceName = name ; }
public void setInternationalCurrencySymbol ( java.lang.String currencyCode ) { intlCurrencySymbol = currencyCode ; currency = null ; if ( currencyCode != null ) { try { currency = java.util.Currency . getInstance ( currencyCode ) ; currencySymbol = currency . getSymbol () ; } catch ( java.lang.IllegalArgumentException e ) {} } cachedIcuDFS = null ; }
public void registerContentObservers () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( com.android.dialer.configprovider.ConfigProviderBindings . get ( appContext ) . getBoolean ( STRING_CONSTANT , false ) ) { for ( com.android.dialer.calllog.datasources.CallLogDataSource dataSource : dataSources . getDataSourcesIncludingSystemCallLog () ) { dataSource . registerContentObservers () ; } } else { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; } }
public int codePointCount ( int beginIndex , int endIndex ) { if ( ( ( beginIndex < NUMBER_CONSTANT ) || ( endIndex > ( length () ) ) ) || ( beginIndex > endIndex ) ) { throw new java.lang.IndexOutOfBoundsException () ; } return java.lang.Character . codePointCount ( this , beginIndex , endIndex ) ; }
@ java.lang.Override public boolean reportError ( android.bluetooth.BluetoothDevice device , byte error ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + error ) ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return false ; } return service . reportError ( device , error ) ; }
@ java.lang.Override @ com.android.annotations.NonNull public java.util.List < com.android.builder.dependency.JarDependency > getLocalDependencies () { java.util.List < java.io.File > jars = getLocalJars () ; java.util.List < com.android.builder.dependency.JarDependency > localDependencies = com.google.common.collect.Lists . newArrayListWithCapacity ( jars . size () ) ; for ( java.io.File jar : jars ) { localDependencies . add ( new com.android.builder.dependency.JarDependency ( jar , true , true , null , null ) ) ; } return localDependencies ; }
void clientReadPhy ( int clientIf , java.lang.String address ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , STRING_CONSTANT ) ; java.lang.Integer connId = mClientMap . connIdByAddress ( clientIf , address ) ; if ( connId == null ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( STRING_CONSTANT + address ) ) ; return; } if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( STRING_CONSTANT + address ) + STRING_CONSTANT ) + connId ) ) ; gattClientReadPhyNative ( clientIf , address ) ; }
public static java.lang.String [] getDefaultCipherSuites () { return new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , org.conscrypt.NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV } ; }
public com.android.sdklib.devices.DeviceManager.DeviceStatus getDeviceStatus ( java.lang.String name , java.lang.String manufacturer , int hashCode ) { com.android.sdklib.devices.Device d = getDevice ( name , manufacturer ) ; if ( d == null ) { return com.android.sdklib.devices.DeviceManager.DeviceStatus.MISSING ; } else { return ( d . hashCode () ) == hashCode ? com.android.sdklib.devices.DeviceManager.DeviceStatus.EXISTS : com.android.sdklib.devices.DeviceManager.DeviceStatus.CHANGED ; } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testEtwsMessageCancel () { android.telephony.SmsCbMessage msg = createFromPdu ( com.android.internal.telephony.gsm.GsmSmsCbTest.etwsMessageCancel ) ; android.telephony.Rlog . d ( com.android.internal.telephony.gsm.GsmSmsCbTest.TAG , msg . toString () ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , msg . getGeographicalScope () ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , msg . getSerialNumber () ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , msg . getServiceCategory () ) ; assertEquals ( STRING_CONSTANT , SmsCbEtwsInfo.ETWS_WARNING_TYPE_EARTHQUAKE , msg . getEtwsWarningInfo () . getWarningType () ) ; }
@ java.lang.Override public final java.nio.ByteBuffer slice () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } int pos = position () ; int lim = limit () ; assert pos <= lim ; int rem = ( pos <= lim ) ? lim - pos : NUMBER_CONSTANT ; int off = pos + ( offset ) ; assert off >= NUMBER_CONSTANT ; return new java.nio.DirectByteBuffer ( memoryRef , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , rem , rem , off , isReadOnly ) ; }
@ java.lang.Override public void onWindowVisibilityChanged ( final int visibility ) { if ( checkNeedsPost () ) { mRunQueue . addTask ( new java.lang.Runnable () { @ java.lang.Override public void run () { onWindowVisibilityChanged ( visibility ) ; } } ) ; return; } mAwContents . onWindowVisibilityChanged ( visibility ) ; }
public void getWindowDisplayFrame ( com.android.server.WindowManagerService.Session session , android.view.IWindow client , android.graphics.Rect outDisplayFrame ) { synchronized ( mWindowMap ) { com.android.server.WindowManagerService.WindowState win = windowForClientLocked ( session , client , false ) ; if ( win == null ) { outDisplayFrame . setEmpty () ; return; } outDisplayFrame . set ( win.mDisplayFrame ) ; } }
public void test_numberLocalization ( ) throws java.lang.Exception { java.util.Locale arabic = new java.util.Locale ( STRING_CONSTANT ) ; java.text.NumberFormat nf = java.text.NumberFormat . getNumberInstance ( arabic ) ; assertEquals ( CHAR_CONS , new java.text.DecimalFormatSymbols ( arabic ) . getZeroDigit () ) ; assertEquals ( STRING_CONSTANT , nf . format ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public boolean accept ( java.lang.String path ) { if ( path . endsWith ( STRING_CONSTANT ) ) { java.lang.String normalized = com.android.dx.command.dexer.Main . fixPath ( path ) ; java.lang.String simple = getSimpleName ( normalized ) ; java.util.List < java.lang.String > fullPaths = map . get ( simple ) ; if ( fullPaths != null ) { for ( java.lang.String fullPath : fullPaths ) { if ( normalized . endsWith ( fullPath ) ) { return true ; } } } return false ; } else { return true ; } }
public void testNewInstanceString_CharArrayIntIntConstructor () { runTestNewInstanceString ( STRING_CONSTANT , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider () { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature () ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value charArrayValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; constructorArguments . add ( charArrayValue ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; } } ) ; }
private boolean canRejectCallWithSms () { return ( ( primaryCallState ) != null ) && ( ! ( ( ( ( primaryCallState . state () ) == ( com.android.incallui.call.DialerCall.State.DISCONNECTED ) ) || ( ( primaryCallState . state () ) == ( com.android.incallui.call.DialerCall.State.DISCONNECTING ) ) ) || ( ( primaryCallState . state () ) == ( com.android.incallui.call.DialerCall.State.IDLE ) ) ) ) ; }
public void generateTestList () { try { java.io.File tests_list = new java.io.File ( com.android.dumprendertree.LayoutTestsAutoTest.LAYOUT_TESTS_LIST_FILE ) ; java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( tests_list , false ) ) ; com.android.dumprendertree.FsUtils . findLayoutTestsRecursively ( bos , getTestPath () , false ) ; bos . flush () ; bos . close () ; } catch ( java.lang.Exception e ) { android.util.Log . e ( com.android.dumprendertree.LayoutTestsAutoTest.LOGTAG , ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; } }
public static int getPhoneType ( int networkMode ) { switch ( networkMode ) { case com.android.internal.telephony.RILConstants.NETWORK_MODE_CDMA : case com.android.internal.telephony.RILConstants.NETWORK_MODE_CDMA_NO_EVDO : case com.android.internal.telephony.RILConstants.NETWORK_MODE_EVDO_NO_CDMA : return com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA ; case com.android.internal.telephony.RILConstants.NETWORK_MODE_WCDMA_PREF : case com.android.internal.telephony.RILConstants.NETWORK_MODE_GSM_ONLY : case com.android.internal.telephony.RILConstants.NETWORK_MODE_WCDMA_ONLY : case com.android.internal.telephony.RILConstants.NETWORK_MODE_GSM_UMTS : case com.android.internal.telephony.RILConstants.NETWORK_MODE_LTE_GSM_WCDMA : case com.android.internal.telephony.RILConstants.NETWORK_MODE_LTE_WCDMA : case com.android.internal.telephony.RILConstants.NETWORK_MODE_LTE_CMDA_EVDO_GSM_WCDMA : return com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM ; case com.android.internal.telephony.RILConstants.NETWORK_MODE_GLOBAL : case com.android.internal.telephony.RILConstants.NETWORK_MODE_LTE_CDMA_EVDO : return com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA ; case com.android.internal.telephony.RILConstants.NETWORK_MODE_LTE_ONLY : if ( ( android.telephony.TelephonyManager . getLteOnCdmaModeStatic () ) == ( com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE ) ) { return com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA ; } else { return com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM ; } default: return com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM ; } }
void finaliseHandshake ( ) throws java.io.IOException { if ( ( ( ( ( readCompression ) != ( pendingCompression ) ) || ( ( writeCompression ) != ( pendingCompression ) ) ) || ( ( readCipher ) != ( pendingCipher ) ) ) || ( ( writeCipher ) != ( pendingCipher ) ) ) { throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.handshake_failure ) ; } this . pendingCompression = null ; this . pendingCipher = null ; }
public void testDensityOnlyWithUniversalMatch () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput ( NUMBER_CONSTANT ) ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
public static final android.os.Process.ProcessStartResult start ( final java.lang.String processClass , final java.lang.String niceName , int uid , int gid , int [] gids , int debugFlags , int mountExternal , int targetSdkVersion , java.lang.String seInfo , java.lang.String [] zygoteArgs ) { try { return android.os.Process . startViaZygote ( processClass , niceName , uid , gid , gids , debugFlags , mountExternal , targetSdkVersion , seInfo , null , zygoteArgs ) ; } catch ( android.os.ZygoteStartFailedEx ex ) { android.util.Log . e ( android.os.Process.LOG_TAG , STRING_CONSTANT ) ; throw new java.lang.RuntimeException ( STRING_CONSTANT , ex ) ; } }
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { android.widget.Toast . makeText ( this , STRING_CONSTANT , Toast.LENGTH_SHORT ) . show () ; if ( ( item . getItemId () ) == ( R.id.search ) ) { return true ; } else { return super . onOptionsItemSelected ( item ) ; } }
public java.lang.Integer call () { java.lang.Integer result ; try { java.lang.Class < > c = java.lang.Class . forName ( STRING_CONSTANT ) ; java.lang.reflect.Method m = c . getMethod ( STRING_CONSTANT , java.lang.Object . class ) ; result = ( ( java.lang.Integer ) ( m . invoke ( null , m_obj ) ) ) ; } catch ( java.lang.Exception e ) { java.lang.System.err . println ( STRING_CONSTANT ) ; e . printStackTrace () ; result = - NUMBER_CONSTANT ; } return result ; }
public static void main ( java.lang.String [] args ) { com.android.monkeyrunner.MonkeyRunnerOptions options = com.android.monkeyrunner.MonkeyRunnerOptions . processOptions ( args ) ; if ( options == null ) { return; } com.android.monkeyrunner.MonkeyRunnerStarter . replaceAllLogFormatters ( MonkeyFormatter.DEFAULT_INSTANCE , options . getLogLevel () ) ; com.android.monkeyrunner.MonkeyRunnerStarter runner = new com.android.monkeyrunner.MonkeyRunnerStarter ( options ) ; int error = runner . run () ; java.lang.System . exit ( error ) ; }
@ java.lang.Override public void openLibraryOrSdkSettings ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.roots.OrderEntry orderEntry ) { final com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable config = com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable . getInstance ( myProject ) ; com.intellij.openapi.options.ShowSettingsUtil . getInstance () . editConfigurable ( myProject , config , new java.lang.Runnable () { @ java.lang.Override public void run () { if ( orderEntry instanceof com.intellij.openapi.roots.JdkOrderEntry ) { config . select ( ( ( com.intellij.openapi.roots.JdkOrderEntry ) ( orderEntry ) ) . getJdk () , true ) ; } else { config . select ( ( ( com.intellij.openapi.roots.LibraryOrderEntry ) ( orderEntry ) ) , true ) ; } } } ) ; }
public void onDestroy () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( ( rttTranscript ) != null ) { com.google.common.util.concurrent.Futures . addCallback ( com.android.dialer.rtt.RttTranscriptUtil . saveRttTranscript ( context , rttTranscript ) , new com.android.dialer.common.concurrent.DefaultFutureCallback () , com.google.common.util.concurrent.MoreExecutors . directExecutor () ) ; rttTranscript = null ; } }
public boolean startStreaming ( android.telephony.MbmsStreamingManager streamingManager ) { try { mStreamingService = streamingManager . startStreaming ( mStreamingServiceInfo , new com.android.phone.testapps.embmsfrontend.StreamingServiceTracker.Callback () , null ) ; return true ; } catch ( android.telephony.mbms.MbmsException e ) { android.widget.Toast . makeText ( mActivity , ( STRING_CONSTANT + ( e . getErrorCode () ) ) , Toast.LENGTH_SHORT ) . show () ; } return false ; }
public static void writeUint16 ( int i , byte [] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > > NUMBER_CONSTANT ) ) ; buf [ ( offset + NUMBER_CONSTANT ) ] = ( ( byte ) ( i ) ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { scheduler = com.android.sched.scheduler.Scheduler . getScheduler () ; com.android.sched.scheduler.SchedulableManager sm = com.android.sched.scheduler.SchedulableManager . getSchedulableManager () ; scs = sm . getAllSchedulable () ; scs . remove ( com.android.sched.scheduler.Runner8 . class ) ; scs . remove ( com.android.sched.scheduler.Runner9 . class ) ; scs . remove ( com.android.sched.scheduler.Runner10 . class ) ; }
public void notifyChanged () { synchronized ( notifyLock ) { if ( ( listeners ) != null ) { if ( ( notifyThread ) == null ) { notifyThread = new com.ibm.icu.impl.ICUNotifier.NotifyThread ( this ) ; notifyThread . setDaemon ( true ) ; notifyThread . start () ; } notifyThread . queue ( listeners . toArray ( new java.util.EventListener [ listeners . size () ] ) ) ; } } }
@ java.lang.Override public void onServicesDiscovered ( android.bluetooth.BluetoothGatt gatt , int status ) { if ( com.android.cts.verifier.bluetooth.BleClientService.DEBUG ) { android.util.Log . d ( com.android.cts.verifier.bluetooth.BleClientService.TAG , STRING_CONSTANT ) ; } if ( ( status == ( android.bluetooth.BluetoothGatt.GATT_SUCCESS ) ) && ( ( mBluetoothGatt . getService ( com.android.cts.verifier.bluetooth.BleClientService.SERVICE_UUID ) ) != null ) ) { notifyServicesDiscovered () ; } }
private boolean needFullBuild () { com.android.jack.ir.ast.JSession session = com.android.jack.Jack . getSession () ; return ( ( ( incrementalInputLibrary ) == null ) || ( ! ( libraryDependencies . hasSameLibraryOnClasspath ( session . getLibraryDependencies () ) ) ) ) || ( ! ( libraryDependencies . hasSameImportedLibrary ( session . getLibraryDependencies () ) ) ) ; }
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { riljLog ( ( ( ( ( ( STRING_CONSTANT + ( msg.what ) ) + STRING_CONSTANT ) + ( msg.obj ) ) + STRING_CONSTANT ) + ( mRadioProxyCookie . get () ) ) ) ; if ( ( ( msg.what ) == ( com.android.internal.telephony.RIL.EVENT_RADIO_PROXY_DEAD ) ) && ( ( ( long ) ( msg.obj ) ) == ( mRadioProxyCookie . get () ) ) ) { resetProxyAndRequestList () ; getRadioProxy ( null ) ; } }
@ android.support.annotation.VisibleForTesting public void stop () { if ( ! ( mStarted ) ) { return; } mStarted = false ; mDbLoadFinished = false ; mInputManager . removeCallback ( mTvInputCallback ) ; mContentResolver . unregisterContentObserver ( mChannelObserver ) ; mHandler . removeCallbacksAndMessages ( null ) ; mChannelWrapperMap . clear () ; clearChannels () ; mPostRunnablesAfterChannelUpdate . clear () ; if ( ( mChannelsUpdateTask ) != null ) { mChannelsUpdateTask . cancel ( true ) ; mChannelsUpdateTask = null ; } applyUpdatedValuesToDb () ; }
public void test_destroy ( ) throws java.lang.Exception { java.lang.String [] commands = new java.lang.String [] { STRING_CONSTANT } ; java.lang.Process process = java.lang.Runtime . getRuntime () . exec ( commands , null , null ) ; process . destroy () ; process . destroy () ; process . destroy () ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { if ( type instanceof com.android.jack.ir.ast.JDefinedClass ) { com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( type ) ; tr . append ( new com.android.jack.transformations.request.RemoveEnclosingMethod ( ( ( com.android.jack.ir.ast.JDefinedClass ) ( type ) ) ) ) ; tr . commit () ; } }
public void test_allAvailableCharsets ( ) throws java.lang.Exception { for ( java.lang.String charsetName : java.nio.charset.Charset . availableCharsets () . keySet () ) { java.nio.charset.Charset cs = java.nio.charset.Charset . forName ( charsetName ) ; assertNotNull ( cs . newDecoder () ) ; if ( cs . canEncode () ) { java.nio.charset.CharsetEncoder enc = cs . newEncoder () ; assertNotNull ( enc ) ; assertNotNull ( enc . replacement () ) ; } } }
private boolean isCmdInteractive ( com.android.internal.telephony.cat.CatCmdMessage cmd ) { switch ( cmd . getCmdType () ) { case SEND_DTMF : case SEND_SMS : case SEND_SS : case SEND_USSD : case SET_UP_IDLE_MODE_TEXT : case SET_UP_MENU : case CLOSE_CHANNEL : case RECEIVE_DATA : case SEND_DATA : return false ; } return true ; }
@ java.lang.Override public int getCdmaEriIconIndexForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return - NUMBER_CONSTANT ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone . getCdmaEriIconIndex () ; } else { return - NUMBER_CONSTANT ; } }
private void onSetPolicyDataEnabled ( boolean enabled ) { final boolean prevEnabled = isDataEnabled () ; if ( ( mDataEnabledSettings . isPolicyDataEnabled () ) != enabled ) { mDataEnabledSettings . setPolicyDataEnabled ( enabled ) ; if ( prevEnabled != ( isDataEnabled () ) ) { if ( ! prevEnabled ) { reevaluateDataConnections () ; onTrySetupData ( Phone.REASON_DATA_ENABLED ) ; } else { onCleanUpAllConnections ( Phone.REASON_DATA_SPECIFIC_DISABLED ) ; } } } }
private byte [] desugar ( org.objectweb.asm.ClassReader reader ) { org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; com.google.devtools.build.android.desugar.DefaultMethodClassFixer fixer = new com.google.devtools.build.android.desugar.DefaultMethodClassFixer ( writer , classpathReader , DependencyCollector.NoWriteCollectors.FAIL_ON_MISSING , null , bootclassPath , classLoader ) ; reader . accept ( fixer , NUMBER_CONSTANT ) ; return writer . toByteArray () ; }
private static boolean willWorkForMulticast ( java.net.NetworkInterface iface ) throws java.io.IOException { return ( ( ( ( iface . isUp () ) && ( ! ( iface . isLoopback () ) ) ) && ( ! ( iface . isPointToPoint () ) ) ) && ( iface . supportsMulticast () ) ) && ( iface . getInetAddresses () . hasMoreElements () ) ; }
@ java.lang.Override public void saveProperties ( @ com.android.annotations.NonNull java.io.File file , @ com.android.annotations.NonNull java.util.Properties props , @ com.android.annotations.NonNull java.lang.String comments ) throws java.io.IOException { java.io.OutputStream fos = null ; try { fos = newFileOutputStream ( file ) ; props . store ( fos , comments ) ; } finally { if ( fos != null ) { try { fos . close () ; } catch ( java.io.IOException e ) {} } } }
public android.content.ContentValues getConstraints ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) || ( ! ( DrmStore.Action . isValid ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _getConstraints ( mUniqueId , path , action ) ; }
private static java.lang.String getAbiList ( java.io.BufferedWriter writer , java.io.DataInputStream inputStream ) throws java.io.IOException { writer . write ( STRING_CONSTANT ) ; writer . newLine () ; writer . write ( STRING_CONSTANT ) ; writer . newLine () ; writer . flush () ; int numBytes = inputStream . readInt () ; byte [] bytes = new byte [ numBytes ] ; inputStream . readFully ( bytes ) ; return new java.lang.String ( bytes , java.nio.charset.StandardCharsets.US_ASCII ) ; }
@ org.junit.Test public void getIdlingResources () { int originalCount = android.support.test.espresso.Espresso . getIdlingResources () . size () ; android.support.test.espresso.IdlingResource resource = new android.support.test.espresso.EspressoTest.DummyIdlingResource ( STRING_CONSTANT ) ; android.support.test.espresso.Espresso . registerIdlingResources ( resource ) ; org.junit.Assert . assertEquals ( ( originalCount + NUMBER_CONSTANT ) , android.support.test.espresso.Espresso . getIdlingResources () . size () ) ; android.support.test.espresso.Espresso . unregisterIdlingResources ( resource ) ; org.junit.Assert . assertEquals ( originalCount , android.support.test.espresso.Espresso . getIdlingResources () . size () ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putInt ( int i , int x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putInt ( ix ( checkIndex ( i , SizeOf.INT ) ) , x ) ; return this ; }
public void dropAccept ( org.eclipse.swt.dnd.DropTargetEvent event ) { com.android.ide.eclipse.adt.AdtPlugin . printErrorToConsole ( STRING_CONSTANT , STRING_CONSTANT ) ; checkDataType ( event ) ; if ( ( mLeaveTargetNode ) != null ) { mTargetNode = mLeaveTargetNode ; mFeedback = mLeaveFeedback ; mCurrentView = mLeaveView ; } if ( ( ( mLeaveTargetNode ) == null ) || ( ( event.detail ) == ( org.eclipse.swt.dnd.DND.DROP_NONE ) ) ) { clearDropInfo () ; } mLeaveTargetNode = null ; mLeaveFeedback = null ; mLeaveView = null ; }
public void testAccessAdapter () { mGridView = new android.widget.GridView ( mActivity ) ; android.widget.cts.GridViewTest.ImageAdapter adapter = new android.widget.cts.GridViewTest.ImageAdapter ( mActivity ) ; mGridView . setAdapter ( adapter ) ; assertSame ( adapter , mGridView . getAdapter () ) ; mGridView . setAdapter ( null ) ; assertNull ( mGridView . getAdapter () ) ; }
public void testRendering800x480Remotely ( ) throws java.lang.Throwable { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution () ; if ( maxRes == null ) return; if ( ( ( maxRes.first ) >= NUMBER_CONSTANT ) && ( ( maxRes.second ) >= NUMBER_CONSTANT ) ) { runTestRenderingInSeparateThread ( NUMBER_CONSTANT , NUMBER_CONSTANT , true , false ) ; } else { android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; } }
public void testMergedResourcesByName ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger () ; verifyResourceExists ( merger , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
public void testDisconnectAfterOnlyResponseCodeCausesNoCloseGuardWarning ( ) throws java.io.IOException { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( gzip ( STRING_CONSTANT . getBytes ( STRING_CONSTANT ) ) ) . addHeader ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; try { org.junit.Assert . assertEquals ( NUMBER_CONSTANT , connection . getResponseCode () ) ; } finally { connection . disconnect () ; } }
private com.android.builder.VariantConfiguration getVariantWithManifestPackage ( final java.lang.String packageName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getPackageFromManifest () { return packageName ; } } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , STRING_CONSTANT ) ; return variant ; }
private static java.util.Set < java.lang.Integer > getPids () { java.util.List < java.util.List < java.lang.String > > netlink = android.security.cts.VoldExploitTest . parseNetlink () ; java.util.Set < java.lang.Integer > retval = new java.util.HashSet < java.lang.Integer > () ; for ( java.util.List < java.lang.String > i : netlink ) { int pid = java.lang.Integer . decode ( i . get ( NUMBER_CONSTANT ) ) ; if ( pid > NUMBER_CONSTANT ) { retval . add ( pid ) ; } } return retval ; }
public void addF64 ( android.support.v8.renderscript.Double4 v ) { if ( android.support.v8.renderscript.RenderScript . shouldThunk () ) { mN . addF64 ( v ) ; return; } addF64 ( v.x ) ; addF64 ( v.y ) ; addF64 ( v.z ) ; addF64 ( v.w ) ; }
private long getApkVersion () { android.content.pm.PackageManager pm = mContext . getPackageManager () ; try { android.content.pm.PackageInfo pi = pm . getPackageInfo ( mContext . getPackageName () , NUMBER_CONSTANT ) ; return pi.lastUpdateTime ; } catch ( android.content.pm.PackageManager e ) { throw new java.lang.RuntimeException ( e ) ; } }
private static boolean checkPlatformContent ( java.io.File platform , com.android.sdklib.ISdkLog log ) { for ( java.lang.String relativePath : com.android.sdklib.SdkManager.sPlatformContentList ) { java.io.File f = new java.io.File ( platform , relativePath ) ; if ( ! ( f . exists () ) ) { log . warning ( STRING_CONSTANT , platform . getName () , relativePath ) ; return false ; } } return true ; }
protected void decodeParams ( ) throws java.io.IOException { java.lang.String algidString = algid . toString () ; try { algParams = java.security.AlgorithmParameters . getInstance ( algidString ) ; } catch ( java.security.NoSuchAlgorithmException e ) { algParams = null ; return; } algParams . init ( params . toByteArray () ) ; }
protected java.lang.String checkLint ( com.android.tools.lint.checks.AbstractCheckTest.TestLintClient lintClient , java.util.List < java.io.File > files ) throws java.lang.Exception { mOutput = new java.lang.StringBuilder () ; java.lang.String result = lintClient . analyze ( files ) ; if ( ( java.io.File.separatorChar ) != CHAR_CONS ) { result = result . replace ( java.io.File.separatorChar , CHAR_CONS ) ; } for ( java.io.File f : files ) { deleteFile ( f ) ; } return result ; }
static org.eclipse.swt.dnd.DragSource createDragSource ( org.eclipse.swt.widgets.Control control ) { org.eclipse.swt.dnd.DragSource source = new org.eclipse.swt.dnd.DragSource ( control , ( ( org.eclipse.swt.dnd.DND.DROP_COPY ) | ( org.eclipse.swt.dnd.DND.DROP_MOVE ) ) ) ; source . setTransfer ( new org.eclipse.swt.dnd.Transfer [] { org.eclipse.swt.dnd.TextTransfer . getInstance () , com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleXmlTransfer . getInstance () } ) ; return source ; }
public synchronized java.lang.Object clone () { try { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.Vector < E > v = ( ( java.util.Vector < E > ) ( super . clone () ) ) ; v.elementData = java.util.Arrays . copyOf ( elementData , elementCount ) ; v.modCount = NUMBER_CONSTANT ; return v ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } }
public boolean importKey ( java.lang.String keyName , byte [] key ) { try { return ( mBinder . import_key ( keyName , key , ( - NUMBER_CONSTANT ) ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
public static java.lang.String getIndent ( org.eclipse.wst.sse.core.internal.provisional.text.IStructuredDocument document , org.w3c.dom.Node xmlNode ) { if ( xmlNode instanceof org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) { org.eclipse.wst.sse.core.internal.provisional.IndexedRegion region = ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( xmlNode ) ) ; int startOffset = region . getStartOffset () ; return com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor . getIndentAtOffset ( document , startOffset ) ; } return STRING_CONSTANT ; }
private static void assertContentEquals ( java.nio.ByteBuffer buf , byte [] array , int offset , int length ) { for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { assertEquals ( buf . get ( i ) , array [ ( offset + i ) ] ) ; } }
private void enableAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client , boolean enable ) { int advertiserId = client.advertiserId ; int advertiseTimeoutSeconds = ( ( int ) ( java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( client.settings . getTimeout () ) ) ) ; if ( mAdapterService . isMultiAdvertisementSupported () ) { gattClientEnableAdvNative ( advertiserId , enable , advertiseTimeoutSeconds ) ; } else { gattAdvertiseNative ( enable ) ; } }
private void testAES_ECB_NoPadding_IvParameters_Failure ( java.lang.String provider ) throws java.lang.Exception { javax.crypto.Cipher c = javax.crypto.Cipher . getInstance ( STRING_CONSTANT , provider ) ; java.security.spec.AlgorithmParameterSpec spec = new javax.crypto.spec.IvParameterSpec ( libcore.javax.crypto.CipherTest.AES_IV_ZEROES ) ; try { c . init ( javax.crypto.Cipher.ENCRYPT_MODE , libcore.javax.crypto.CipherTest.AES_128_KEY , spec ) ; fail ( ( STRING_CONSTANT + provider ) ) ; } catch ( java.security.InvalidAlgorithmParameterException expected ) {} }
private void addRemoteSample ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.FullRevision minToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newSample ( version , revision , minToolsRev ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
void setInsetsWindow ( com.android.server.WindowManagerService.Session session , android.view.IWindow client , int touchableInsets , android.graphics.Rect contentInsets , android.graphics.Rect visibleInsets ) { long origId = android.os.Binder . clearCallingIdentity () ; try { synchronized ( mWindowMap ) { com.android.server.WindowManagerService.WindowState w = windowForClientLocked ( session , client , false ) ; if ( w != null ) { w.mGivenInsetsPending = false ; w.mGivenContentInsets . set ( contentInsets ) ; w.mGivenVisibleInsets . set ( visibleInsets ) ; w.mTouchableInsets = touchableInsets ; mLayoutNeeded = true ; performLayoutAndPlaceSurfacesLocked () ; } } } finally { android.os.Binder . restoreCallingIdentity ( origId ) ; } }
@ org.junit.Test public void testFreshInstallDoesNotLoadFromStore ( ) throws java.lang.Exception { when ( mWifiConfigStore . areStoresPresent () ) . thenReturn ( false ) ; when ( mWifiConfigStoreLegacy . areStoresPresent () ) . thenReturn ( false ) ; assertTrue ( mWifiConfigManager . loadFromStore () ) ; verify ( mWifiConfigStore , never () ) . read () ; verify ( mWifiConfigStoreLegacy , never () ) . read () ; assertTrue ( mWifiConfigManager . getConfiguredNetworksWithPasswords () . isEmpty () ) ; }
public void test_formatLjava_util_Date () { try { java.text.DateFormat format = java.text.DateFormat . getDateTimeInstance ( java.text.DateFormat.SHORT , java.text.DateFormat.SHORT , java.util.Locale.US ) ; java.util.Date current = new java.util.Date () ; java.lang.String dtf = format . format ( current ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( STRING_CONSTANT , java.util.Locale.US ) ; assertTrue ( STRING_CONSTANT , sdf . format ( current ) . equals ( dtf ) ) ; } catch ( java.lang.Exception e ) { fail ( ( STRING_CONSTANT + ( e . toString () ) ) ) ; } }
void ensureZoomed () { if ( ( mZoomFitNextImage ) && ( ( getClientArea () . height ) > NUMBER_CONSTANT ) ) { mZoomFitNextImage = false ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutActionBar actionBar = getGraphicalEditor () . getLayoutActionBar () ; if ( actionBar . isZoomingAllowed () ) { setFitScale ( true , true ) ; } } }
public java.lang.String substring ( int beginIndex , int endIndex ) { if ( beginIndex < NUMBER_CONSTANT ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } if ( endIndex > ( length () ) ) { throw new java.lang.StringIndexOutOfBoundsException ( this , endIndex ) ; } int subLen = endIndex - beginIndex ; if ( subLen < NUMBER_CONSTANT ) { throw new java.lang.StringIndexOutOfBoundsException ( subLen ) ; } return ( beginIndex == NUMBER_CONSTANT ) && ( endIndex == ( length () ) ) ? this : fastSubstring ( beginIndex , subLen ) ; }
private boolean interceptFallback ( com.android.internal.policy.impl.WindowState win , android.view.KeyEvent fallbackEvent , int policyFlags ) { int actions = interceptKeyBeforeQueueing ( fallbackEvent , policyFlags ) ; if ( ( actions & ( ACTION_PASS_TO_USER ) ) != NUMBER_CONSTANT ) { long delayMillis = interceptKeyBeforeDispatching ( win , fallbackEvent , policyFlags ) ; if ( delayMillis == NUMBER_CONSTANT ) { return true ; } } return false ; }
private void handleStartAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { com.android.bluetooth.Utils . enforceAdminPermission ( mService ) ; int advertiserId = client.advertiserId ; if ( mAdvertiseClients . contains ( client ) ) { postCallback ( advertiserId , AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED ) ; return; } if ( ! ( mAdvertiseNative . startAdverising ( client ) ) ) { postCallback ( advertiserId , AdvertiseCallback.ADVERTISE_FAILED_INTERNAL_ERROR ) ; return; } mAdvertiseClients . add ( client ) ; }
private void runPreloadDensityTestForDrawable ( int drawableResId , boolean isConstantSize ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = mResources ; final int densityDpi = res . getConfiguration () . densityDpi ; try { runPreloadDensityTestForDrawableInner ( res , drawableResId , isConstantSize ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils . setResourcesDensity ( res , densityDpi ) ; } }
private static io.appium.droiddriver.finders.Predicate < ? super io.appium.droiddriver.UiElement > [] getPredicates ( io.appium.droiddriver.finders.MatchFinder . . . finders ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) io.appium.droiddriver.finders.Predicate < ? super io.appium.droiddriver.UiElement > [] predicates = new io.appium.droiddriver.finders.Predicate [ finders.length ] ; for ( int i = NUMBER_CONSTANT ; i < ( finders.length ) ; i ++ ) { predicates [ i ] = finders [ i ] . predicate ; } return predicates ; }
public byte [] exchangeAPDU ( com.android.se.security.arf.pkcs15.EF ef , byte [] cmd ) throws com.android.se.security.arf.SecureElementException , java.io.IOException { try { return mArfChannel . transmit ( cmd ) ; } catch ( java.io.IOException e ) { throw e ; } catch ( java.lang.Exception e ) { throw new com.android.se.security.arf.SecureElementException ( ( STRING_CONSTANT + ( e . getLocalizedMessage () ) ) ) ; } }
public com.android.sdklib.internal.repository.SdkSource [] getSources ( com.android.sdklib.internal.repository.SdkSourceCategory category ) { synchronized ( mSources ) { java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list = mSources . get ( category ) ; if ( list == null ) { return new com.android.sdklib.internal.repository.SdkSource [ NUMBER_CONSTANT ] ; } else { return list . toArray ( new com.android.sdklib.internal.repository.SdkSource [ list . size () ] ) ; } } }
@ android.annotation.SystemApi @ android.annotation.RequiresPermission ( value = android.Manifest.permission.BLUETOOTH_ADMIN ) public boolean enableNoAutoConnect () { if ( isEnabled () ) { if ( android.bluetooth.BluetoothAdapter.DBG ) { android.util.Log . d ( android.bluetooth.BluetoothAdapter.TAG , STRING_CONSTANT ) ; } return true ; } try { return mManagerService . enableNoAutoConnect ( android.app.ActivityThread . currentPackageName () ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothAdapter.TAG , STRING_CONSTANT , e ) ; } return false ; }
public void testOneSystemOneUserOneDeleted ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; store . installCertificate ( org.conscrypt.TrustedCertificateStoreTest . getCa2 () ) ; store . deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest . getCa2 () , org.conscrypt.TrustedCertificateStoreTest . getAliasUserCa2 () ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest . getAliasUserCa2 () ) ; }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent . getAction () ; if ( ( action . equals ( AudioManager.RINGER_MODE_CHANGED_ACTION ) ) || ( action . equals ( AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION ) ) ) { updateVolumeZen () ; } else if ( action . equals ( TelephonyIntents.ACTION_SIM_STATE_CHANGED ) ) { updateSimState ( intent ) ; } else if ( action . equals ( TelecomManager.ACTION_CURRENT_TTY_MODE_CHANGED ) ) { updateTTY ( intent ) ; } }
public static void startCallForRow ( android.app.Activity activity , com.android.dialer.calllog.model.CoalescedRow row ) { com.android.dialer.precall.PreCall . start ( activity , new com.android.dialer.callintent.CallIntentBuilder ( row . getNumber () . getNormalizedNumber () , CallInitiationType.Type.CALL_LOG ) . setIsVideoCall ( ( ( ( row . getFeatures () ) & ( android.provider.CallLog.Calls.FEATURES_VIDEO ) ) == ( android.provider.CallLog.Calls.FEATURES_VIDEO ) ) ) ) ; }
public boolean hasNextInt ( int radix ) { java.util.regex.Pattern integerPattern = getIntegerPattern ( radix ) ; boolean isIntValue = false ; if ( hasNext ( integerPattern ) ) { java.lang.String intString = matcher . group () ; intString = removeLocaleInfo ( intString , int . class ) ; try { cachedNextValue = java.lang.Integer . valueOf ( intString , radix ) ; isIntValue = true ; } catch ( java.lang.NumberFormatException e ) { matchSuccessful = false ; } } return isIntValue ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testNoNumberSupplied () { android.net.Uri handle = android.net.Uri . parse ( STRING_CONSTANT ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL , handle ) ; int result = processIntent ( intent , true ) ; org.junit.Assert . assertEquals ( DisconnectCause.NO_PHONE_NUMBER_SUPPLIED , result ) ; verifyNoBroadcastSent () ; verifyNoCallPlaced () ; }
@ java.lang.Override public java.util.Iterator < VT > iterator () { return new java.util.EnumMap.EnumMapIterator < VT , KT , VT > ( new java.util.MapEntry.Type < VT , KT , VT > () { public java.util.VT get ( MapEntry < java.util.KT , java.util.VT > entry ) { return entry.value ; } } , enumMap ) ; }
public void downloadSubscription ( android.telephony.euicc.DownloadableSubscription subscription , boolean switchAfterDownload , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . downloadSubscription ( subscription , switchAfterDownload , mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
@ java.lang.Override protected void replaceImpl ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode existingNode , @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode newNode ) throws java.lang.UnsupportedOperationException { if ( ( lhs ) == existingNode ) { lhs = ( ( com.android.jack.ir.ast.JSsaVariableDefRef ) ( newNode ) ) ; return; } for ( int i = NUMBER_CONSTANT ; i < ( rhs.length ) ; i ++ ) { if ( ( rhs [ i ] ) == existingNode ) { rhs [ i ] = ( ( com.android.jack.ir.ast.JSsaVariableUseRef ) ( newNode ) ) ; return; } } super . replaceImpl ( existingNode , newNode ) ; }
public void initialize ( int gsmSignalStrength , int gsmBitErrorRate , int cdmaDbm , int cdmaEcio , int evdoDbm , int evdoEcio , int evdoSnr , boolean gsm ) { initialize ( gsmSignalStrength , gsmBitErrorRate , cdmaDbm , cdmaEcio , evdoDbm , evdoEcio , evdoSnr , NUMBER_CONSTANT , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , NUMBER_CONSTANT , gsm , false ) ; }
@ java.lang.Override protected void test () { if ( ( com.android.cts.verifier.notifications.MockListener.MockListener . getInstance () ) == null ) { status = PASS ; } else { java.util.List < java.lang.String > result = new java.util.ArrayList ( com.android.cts.verifier.notifications.MockListener.MockListener . getInstance () . mPosted ) ; if ( ( result . size () ) == NUMBER_CONSTANT ) { status = PASS ; } else { logFail () ; status = FAIL ; } } next () ; }
@ java.lang.Override public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices () { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.map.BluetoothMapService service = getService () ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( NUMBER_CONSTANT ) ; } return service . getConnectedDevices () ; }
@ org.junit.BeforeClass public static void setUpClass () { com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest . class . getClassLoader () . setDefaultAssertionStatus ( true ) ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.CLASSPATH = new java.io.File [] { com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) } ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.SOURCELIST = com.android.jack.TestTools . getTargetLibSourcelist ( STRING_CONSTANT ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.util.config.id.PropertyId.IValue < T > check ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context ) throws com.android.sched.util.codec.ParsingException { T val = this . codec . checkString ( context , value ) ; if ( val != null ) { return new IValueObject < T > ( context , val ) ; } else { return new IValueCheckedString ( value ) ; } }
@ java.lang.Override @ android.support.annotation.MainThread public void markDirtyAndNotify ( android.content.Context appContext ) { com.android.dialer.common.Assert . isMainThread () ; com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; sharedPreferences . edit () . putBoolean ( com.android.dialer.calllog.CallLogFramework.PREF_FORCE_REBUILD , true ) . apply () ; if ( ( ui ) != null ) { ui . invalidateUi () ; } }
@ java.lang.Override public void addSuppressed ( java.lang.Throwable receiver , java.lang.Throwable suppressed ) { if ( suppressed == receiver ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT , suppressed ) ; } if ( suppressed == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } map . get ( receiver , true ) . add ( suppressed ) ; }
@ java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get ( com.android.jack.dx.rop.cst.Constant cst ) { assert cst != null ; throwIfNotPrepared () ; com.android.jack.dx.dex.file.IndexedItem result = typeIds . get ( cst ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + cst ) ) ; } return result ; }
public void cleanup () { mNumTextureUpdated . set ( NUMBER_CONSTANT ) ; if ( ( mTextureId ) != NUMBER_CONSTANT ) { int [] textures = new int [] { mTextureId } ; android.opengl.GLES20 . glDeleteTextures ( NUMBER_CONSTANT , textures , NUMBER_CONSTANT ) ; } android.opengl.GLES20 . glFinish () ; if ( ( mSurface ) != null ) { mSurface . release () ; mSurface = null ; } if ( ( mSurfaceTexture ) != null ) { mSurfaceTexture . release () ; mSurfaceTexture = null ; } }
@ org.junit.Test public void testConnectFailureDueToNetworkAddFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito . doAnswer ( new android.app.test.MockAnswerUtil.AnswerWithArguments () { public void answer ( ISupplicantStaIface.addNetworkCallback cb ) throws android.os.RemoteException { cb . onValues ( mStatusFailure , org.mockito.Mockito . mock ( android.hardware.wifi.supplicant.V1_0.ISupplicantStaNetwork . class ) ) ; return; } } ) . when ( mISupplicantStaIfaceMock ) . addNetwork ( org.mockito.Matchers . any ( ISupplicantStaIface.addNetworkCallback . class ) ) ; assertFalse ( mDut . connectToNetwork ( new android.net.wifi.WifiConfiguration () ) ) ; }
private static void assertCns ( java.lang.String dn , java.lang.String . . . expected ) { java.lang.String [] result = org.apache.http.conn.ssl.AbstractVerifier . getCNs ( org.apache.http.conn.ssl.cts.AbstractVerifierTest . createStubCertificate ( dn ) ) ; if ( ( expected.length ) == NUMBER_CONSTANT ) { assertNull ( result ) ; } else { assertNotNull ( dn , result ) ; assertEquals ( dn , java.util.Arrays . asList ( expected ) , java.util.Arrays . asList ( result ) ) ; } }
@ org.junit.Test public void testGetCoreInterfaceRewritingTarget_abstractMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , java.lang.Thread . currentThread () . getContextClassLoader () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . getCoreInterfaceRewritingTarget ( Opcodes.INVOKEINTERFACE , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , true ) ) . isNull () ; com.google.common.truth.Truth . assertThat ( support . getCoreInterfaceRewritingTarget ( Opcodes.INVOKEVIRTUAL , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , false ) ) . isNull () ; }
private static void addNonStaticPublicMethods ( java.lang.Class < > clazz , java.util.Set < java.lang.reflect.Method > methodSet ) { for ( java.lang.reflect.Method interfaceMethod : clazz . getDeclaredMethods () ) { int modifiers = interfaceMethod . getModifiers () ; if ( ( ! ( java.lang.reflect.Modifier . isStatic ( modifiers ) ) ) && ( java.lang.reflect.Modifier . isPublic ( modifiers ) ) ) { methodSet . add ( interfaceMethod ) ; } } }
@ org.junit.Test public void Test4089106 () { com.ibm.icu.util.TimeZone def = com.ibm.icu.util.TimeZone . getDefault () ; try { com.ibm.icu.util.TimeZone z = new com.ibm.icu.util.SimpleTimeZone ( ( ( int ) ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ; com.ibm.icu.util.TimeZone . setDefault ( z ) ; com.ibm.icu.text.SimpleDateFormat f = new com.ibm.icu.text.SimpleDateFormat () ; if ( ! ( f . getTimeZone () . equals ( z ) ) ) errln ( STRING_CONSTANT ) ; } finally { com.ibm.icu.util.TimeZone . setDefault ( def ) ; } }
public boolean performDexOpt ( java.lang.String packageName , boolean updateUsage ) { android.content.pm.PackageParser.Package p ; synchronized ( mPackages ) { p = mPackages . get ( packageName ) ; if ( p == null ) { return false ; } if ( updateUsage ) { p.mLastPackageUsageTimeInMills = java.lang.System . currentTimeMillis () ; } mPackageUsage . write ( false ) ; if ( ! ( p.mDexOptNeeded ) ) { return false ; } } synchronized ( mInstallLock ) { return ( performDexOptLI ( p , false , false , true ) ) == ( com.android.server.pm.PackageManagerService.DEX_OPT_PERFORMED ) ; } }
@ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = STRING_CONSTANT , method = STRING_CONSTANT , args = { android.view.KeyCharacterMap.KeyData . class } ) public void testGetKeyData () { android.view.KeyEvent keyEvent = new android.view.KeyEvent ( android.view.KeyEvent.ACTION_DOWN , android.view.KeyEvent.KEYCODE_Z ) ; android.view.KeyCharacterMap.KeyData keyData = new android.view.KeyCharacterMap.KeyData () ; assertTrue ( keyEvent . getKeyData ( keyData ) ) ; assertEquals ( CHAR_CONS , keyData.displayLabel ) ; assertEquals ( NUMBER_CONSTANT , keyData.number ) ; assertEquals ( CHAR_CONS , keyData.meta [ NUMBER_CONSTANT ] ) ; assertEquals ( CHAR_CONS , keyData.meta [ NUMBER_CONSTANT ] ) ; assertEquals ( NUMBER_CONSTANT , keyData.meta [ NUMBER_CONSTANT ] ) ; }
public int compare ( com.android.server.AlarmManagerService.Batch b1 , com.android.server.AlarmManagerService.Batch b2 ) { long when1 = b1.start ; long when2 = b2.start ; if ( when1 > when2 ) { return NUMBER_CONSTANT ; } if ( when1 < when2 ) { return - NUMBER_CONSTANT ; } return NUMBER_CONSTANT ; }
public void dispose () { if ( mDbg ) log ( ( STRING_CONSTANT + ( is3gpp ? STRING_CONSTANT : STRING_CONSTANT ) ) ) ; mPhone.mCM . unregisterForOffOrNotAvailable ( mHandler ) ; mPhone.mCM . unregisterForOn ( mHandler ) ; mCatService . dispose () ; mCdmaSSM . dispose ( mHandler ) ; mIccRecords . dispose () ; mIccFileHandler . dispose () ; }
private static void addModuleForAccessingCallDetails ( android.content.Context context , java.util.List < com.android.dialer.contactactions.ContactActionModule > modules , com.android.dialer.calllog.model.CoalescedRow row ) { boolean canReportInaccurateNumber = false ; boolean canSupportAssistedDialing = false ; modules . add ( new com.android.dialer.contactactions.IntentModule ( context , com.android.dialer.calldetails.CallDetailsActivity . newInstance ( context , row . coalescedIds () , com.android.dialer.calllog.ui.menu.Modules . createDialerContactFromRow ( row ) , canReportInaccurateNumber , canSupportAssistedDialing ) , R.string.call_details_menu_label , R.drawable.quantum_ic_info_outline_vd_theme_24 ) ) ; }
@ org.junit.Test public void calculateScore ( ) throws java.lang.Exception { for ( com.android.server.wifi.hotspot2.PasspointNetworkScoreTest.TestData data : com.android.server.wifi.hotspot2.PasspointNetworkScoreTest.TEST_DATA_LIST ) { com.android.server.wifi.ScanDetail scanDetail = com.android.server.wifi.hotspot2.PasspointNetworkScoreTest . generateScanDetail ( data.rssiLevel , data.internetAccess , data.networkType ) ; org.junit.Assert . assertEquals ( data.expectedScore , com.android.server.wifi.hotspot2.PasspointNetworkScore . calculateScore ( data.isHomeProvider , scanDetail , data.anqpElements , data.isActiveNetwork ) ) ; } }
public org.apache.harmony.security.fortress.Engine.SpiAndProvider getInstance ( java.lang.String algorithm , java.lang.Object param ) throws java.security.NoSuchAlgorithmException { if ( algorithm == null ) { throw new java.security.NoSuchAlgorithmException ( STRING_CONSTANT ) ; } java.util.ArrayList < java.security.Provider.Service > services = getServices ( algorithm ) ; if ( services == null ) { throw notFound ( this . serviceName , algorithm ) ; } return new org.apache.harmony.security.fortress.Engine.SpiAndProvider ( services . get ( NUMBER_CONSTANT ) . newInstance ( param ) , services . get ( NUMBER_CONSTANT ) . getProvider () ) ; }
@ java.lang.Override @ com.android.annotations.NonNull public java.util.List < com.android.builder.dependency.JarDependency > getLocalDependencies () { java.util.List < java.io.File > jars = getLocalJars () ; java.util.List < com.android.builder.dependency.JarDependency > localDependencies = com.google.common.collect.Lists . newArrayListWithCapacity ( jars . size () ) ; for ( java.io.File jar : jars ) { localDependencies . add ( new com.android.builder.dependency.JarDependency ( jar , true , true ) ) ; } return localDependencies ; }
public void test_socket_accept_Blocking_Bound ( ) throws java.io.IOException { serverChannel . configureBlocking ( true ) ; serverChannel . socket () . bind ( null ) ; serverChannel . close () ; try { serverChannel . socket () . accept () ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.channels.ClosedChannelException expected ) {} }
public static java.lang.String [] [] fixBootpathExt ( java.lang.String [] [] bootpath ) { for ( int i = NUMBER_CONSTANT ; i < ( bootpath.length ) ; i ++ ) { if ( ( ( bootpath [ i ] ) != null ) && ( ( bootpath [ i ] . length ) > NUMBER_CONSTANT ) ) { if ( bootpath [ i ] [ NUMBER_CONSTANT ] . endsWith ( SdkConstants.FN_FRAMEWORK_LIBRARY ) ) { bootpath [ i ] = null ; } } } return bootpath ; }
protected void handleWarningMessage ( short description ) throws java.io.IOException { switch ( description ) { case AlertDescription.no_certificate : { if ( ( org.bouncycastle.crypto.tls.TlsUtils . isSSL ( getContext () ) ) && ( ( certificateRequest ) != null ) ) { notifyClientCertificate ( Certificate.EMPTY_CHAIN ) ; } break; } default: { super . handleWarningMessage ( description ) ; break; } } }
public static java.lang.Package create ( com.android.sdklib.internal.repository.sources.SdkSource source , java.util.Properties props , java.lang.String vendor , java.lang.String path , int revision , java.lang.String license , java.lang.String description , java.lang.String descUrl , java.lang.String archiveOsPath ) { com.android.sdklib.internal.repository.packages.ExtraPackage ep = new com.android.sdklib.internal.repository.packages.ExtraPackage ( source , props , vendor , path , revision , license , description , descUrl , archiveOsPath ) ; return ep ; }
private void computeCatchList ( @ javax.annotation.Nonnull org.objectweb.asm.tree.LabelNode labelNode ) { for ( org.objectweb.asm.tree.TryCatchBlockNode tryCatchNode : currentMethod.tryCatchBlocks ) { java.lang.String id = getCatchId ( tryCatchNode.handler ) ; if ( ( tryCatchNode.start ) == labelNode ) { currentCatchList . add ( id ) ; } else if ( ( tryCatchNode.end ) == labelNode ) { currentCatchList . remove ( id ) ; } } }
synchronized void recordAttributeAction ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.Actions.ActionType actionType , @ com.android.annotations.Nullable com.android.manifmerger.AttributeOperationType attributeOperationType ) { com.android.manifmerger.XmlElement originElement = attribute . getOwnerElement () ; java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = new com.android.manifmerger.Actions.AttributeRecord ( actionType , new com.android.manifmerger.Actions.ActionLocation ( originElement . getDocument () . getSourceLocation () , attribute . getPosition () ) , attribute . getId () , null , attributeOperationType ) ; attributeRecords . add ( attributeRecord ) ; }
public boolean requestDrawGL ( android.view.HardwareCanvas canvas , android.view.ViewRootImpl viewRootImpl ) { if ( ( mDestroyRunnable.mNativeDrawGLFunctor ) == NUMBER_CONSTANT ) { throw new java.lang.RuntimeException ( STRING_CONSTANT ) ; } mDestroyRunnable.mViewRootImpl = viewRootImpl ; if ( canvas != null ) { int ret = canvas . callDrawGLFunction ( mDestroyRunnable.mNativeDrawGLFunctor ) ; if ( ret != ( android.view.DisplayList.STATUS_DONE ) ) { android.util.Log . e ( com.android.webview.chromium.DrawGLFunctor.TAG , ( STRING_CONSTANT + ret ) ) ; return false ; } } else { viewRootImpl . attachFunctor ( mDestroyRunnable.mNativeDrawGLFunctor ) ; } return true ; }
public void testStageInstallWithErrorCode_badTzLookupFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer . stageInstallWithErrorCode ( stagedDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , NUMBER_CONSTANT ) . setTzLookupXml ( STRING_CONSTANT ) . buildUnvalidated () ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_VALIDATION_ERROR , installer . stageInstallWithErrorCode ( incompleteDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro () ; }
@ javax.annotation.Nonnull protected java.lang.Iterable < org.jf.dexlib2.iface.ClassDef > getDirectInterfaces () { java.lang.Iterable < org.jf.dexlib2.iface.ClassDef > directInterfaces = com.google.common.collect.Iterables . filter ( getInterfaces () . values () , com.google.common.base.Predicates . notNull () ) ; if ( ! ( interfacesFullyResolved ) ) { throw new org.jf.dexlib2.analysis.UnresolvedClassException ( STRING_CONSTANT , getType () , getUnresolvedInterfaces () ) ; } return directInterfaces ; }
public static boolean runLintOnExport ( org.eclipse.swt.widgets.Shell shell , org.eclipse.core.resources.IProject project ) { if ( com.android.ide.eclipse.adt.internal.preferences.AdtPrefs . getPrefs () . isLintOnExport () ) { boolean fatal = com.android.ide.eclipse.adt.internal.lint.EclipseLintRunner . runLint ( java.util.Collections . singletonList ( project ) , null , null , true ) ; if ( fatal ) { org.eclipse.jface.dialogs.MessageDialog . openWarning ( shell , STRING_CONSTANT , ( STRING_CONSTANT + ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) ) ; return false ; } } return true ; }
public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { if ( ( expected == null ) && ( actual == null ) ) { return; } if ( ( expected != null ) && ( expected . equals ( actual ) ) ) { return; } junit.framework.Assert . fail ( message , ( ( ( STRING_CONSTANT + expected ) + STRING_CONSTANT ) + actual ) ) ; }
public WifiScanner.ScanData [] getScanResults ( boolean flush ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { android.net.wifi.WifiScanner [] sd = null ; if ( isHalStarted () ) { sd = com.android.server.wifi.WifiNative . getScanResultsNative ( com.android.server.wifi.WifiNative.sWlan0Index , flush ) ; } if ( sd != null ) { return sd ; } else { return new android.net.wifi.WifiScanner.ScanData [ NUMBER_CONSTANT ] ; } } }
@ java.lang.Override protected boolean start () { android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( BluetoothDevice.ACTION_ACL_DISCONNECTED ) ; filter . addAction ( Intent.ACTION_USER_UNLOCKED ) ; try { registerReceiver ( mPbapBroadcastReceiver , filter ) ; } catch ( java.lang.Exception e ) { android.util.Log . w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , STRING_CONSTANT , e ) ; } mPbapClientStateMachine = new com.android.bluetooth.pbapclient.PbapClientStateMachine ( this , this ) ; com.android.bluetooth.pbapclient.PbapClientService . setPbapClientService ( this ) ; mPbapClientStateMachine . start () ; return true ; }
@ java.lang.Override public boolean onKeyUp ( final int keyCode , final android.view.KeyEvent event ) { mFactory . startYourEngines ( false ) ; if ( checkNeedsPost () ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > () { @ java.lang.Override public java.lang.Boolean call () { return onKeyUp ( keyCode , event ) ; } } ) ; return ret ; } return mAwContents . onKeyUp ( keyCode , event ) ; }
public byte [] toDex ( java.io.Writer humanOut , boolean verbose ) throws java.io.IOException { boolean annotate = humanOut != null ; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0 ( annotate , verbose ) ; if ( annotate ) { result . writeAnnotationsTo ( humanOut ) ; } return result . getArray () ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { if ( mConnection . isBound () ) { getInstrumentation () . getContext () . unbindService ( mConnection ) ; } if ( ( ( mDevice . hasObject ( Constants.SIDE_PANEL ) ) || ( mDevice . hasObject ( Constants.MENU ) ) ) || ( mDevice . hasObject ( Constants.PROGRAM_GUIDE ) ) ) { mDevice . pressBack () ; } mDevice . pressBack () ; super . tearDown () ; }
private java.io.InputStream fetchXmlUrl ( java.lang.String urlString , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor , java.lang.Exception [] outException ) { try { java.io.InputStream xml = cache . openCachedUrl ( urlString , monitor ) ; if ( xml != null ) { xml . mark ( NUMBER_CONSTANT ) ; xml = new com.android.sdklib.io.NonClosingInputStream ( xml ) ; ( ( com.android.sdklib.io.NonClosingInputStream ) ( xml ) ) . setCloseBehavior ( CloseBehavior.RESET ) ; } return xml ; } catch ( java.lang.Exception e ) { if ( outException != null ) { outException [ NUMBER_CONSTANT ] = e ; } } return null ; }
private static int [] addToIntArray ( int [] destination , int offset , int value , int increments ) { int newlength = destination.length ; if ( ( offset + NUMBER_CONSTANT ) == newlength ) { newlength += increments ; int [] temp = new int [ newlength ] ; java.lang.System . arraycopy ( destination , NUMBER_CONSTANT , temp , NUMBER_CONSTANT , offset ) ; destination = temp ; } destination [ offset ] = value ; return destination ; }
@ java.lang.Override public final java.nio.ByteBuffer putInt ( int x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putInt ( ix ( nextPutIndex ( SizeOf.INT ) ) , x ) ; return this ; }
@ javax.annotation.Nonnull public javax.lang.model.element.TypeElement getTypeElement ( ) throws com.android.sched.build.SchedAnnotationProcessor.AbortException { assert ( com.android.sched.build.SchedAnnotationProcessor.Items.env ) != null ; if ( ( typeElement ) == null ) { typeElement = com.android.sched.build.SchedAnnotationProcessor.Items.env . getElementUtils () . getTypeElement ( com.android.sched.build.SchedAnnotationProcessor . getCanonicalName ( fqName ) ) ; if ( ( typeElement ) == null ) { assert ( com.android.sched.build.SchedAnnotationProcessor.Items.env ) != null ; com.android.sched.build.SchedAnnotationProcessor.Items.env . getMessager () . printMessage ( javax.tools.Diagnostic.Kind.ERROR , ( ( STRING_CONSTANT + ( fqName ) ) + STRING_CONSTANT ) ) ; throw new com.android.sched.build.SchedAnnotationProcessor.AbortException () ; } } return typeElement ; }
public static java.util.Locale getDefault ( java.util.Locale.Category category ) { switch ( category ) { case DISPLAY : if ( ( java.util.Locale.defaultDisplayLocale ) == null ) { java.util.Locale . initDefault ( category ) ; } return java.util.Locale.defaultDisplayLocale ; case FORMAT : if ( ( java.util.Locale.defaultFormatLocale ) == null ) { java.util.Locale . initDefault ( category ) ; } return java.util.Locale.defaultFormatLocale ; default: assert false : STRING_CONSTANT ; } return java.util.Locale . getDefault () ; }
com.android.server.wifi.WifiStateMachine mockWifiStateMachine () { com.android.server.wifi.WifiStateMachine stateMachine = mock ( com.android.server.wifi.WifiStateMachine . class ) ; when ( stateMachine . isLinkDebouncing () ) . thenReturn ( false ) ; when ( stateMachine . isConnected () ) . thenReturn ( false ) ; when ( stateMachine . isDisconnected () ) . thenReturn ( true ) ; when ( stateMachine . isSupplicantTransientState () ) . thenReturn ( false ) ; return stateMachine ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [] args ) { if ( supports ( klass ) ) { return new vogar.target.junit.JUnitTargetRunner ( monitor , skipPastReference , testEnvironment , timeoutSeconds , klass , qualification , args ) ; } else { return null ; } }
private long getSuggestedRetryDelay ( android.telephony.data.DataCallResponse response ) { if ( ( response . getSuggestedRetryTime () ) < NUMBER_CONSTANT ) { if ( com.android.internal.telephony.dataconnection.DataConnection.DBG ) log ( STRING_CONSTANT ) ; return com.android.internal.telephony.RetryManager.NO_SUGGESTED_RETRY_DELAY ; } else if ( ( response . getSuggestedRetryTime () ) == ( java.lang.Integer.MAX_VALUE ) ) { if ( com.android.internal.telephony.dataconnection.DataConnection.DBG ) log ( STRING_CONSTANT ) ; return com.android.internal.telephony.RetryManager.NO_RETRY ; } return ( ( long ) ( response . getSuggestedRetryTime () ) ) ; }
public void testContains ( ) throws java.lang.Exception { assertFalse ( mKeyStore . contains ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; assertTrue ( mKeyStore . password ( android.security.KeyStoreTest.TEST_PASSWD ) ) ; assertFalse ( mKeyStore . contains ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; assertTrue ( mKeyStore . put ( android.security.KeyStoreTest.TEST_KEYNAME , android.security.KeyStoreTest.TEST_KEYVALUE ) ) ; assertTrue ( mKeyStore . contains ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void test_ConstructorLjava_net_InetAddressIZ ( ) throws java.io.IOException { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ) { int serverPort = server . getLocalPort () ; try ( java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , serverPort , true ) ) { assertEquals ( STRING_CONSTANT , serverPort , client . getPort () ) ; } try ( java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , serverPort , false ) ) { assertEquals ( STRING_CONSTANT , serverPort , client . getPort () ) ; } } }
public void pulse ( int color , int onMS ) { synchronized ( this ) { if ( ( ( mColor ) == NUMBER_CONSTANT ) && ( ! ( mFlashing ) ) ) { setLightLocked ( color , com.android.server.LightsService.LIGHT_FLASH_HARDWARE , onMS , NUMBER_CONSTANT , com.android.server.LightsService.BRIGHTNESS_MODE_USER ) ; mColor = NUMBER_CONSTANT ; mH . sendMessageDelayed ( android.os.Message . obtain ( mH , NUMBER_CONSTANT , this ) , onMS ) ; } } }
public void nextBytes ( byte [] bytes ) { synchronized ( this ) { if ( ( drbg ) == null ) { drbg = drbgProvider . get ( entropySource ) ; } if ( ( drbg . generate ( bytes , null , predictionResistant ) ) < NUMBER_CONSTANT ) { drbg . reseed ( null ) ; drbg . generate ( bytes , null , predictionResistant ) ; } } }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testEndCallWithRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito . mock ( com.android.server.telecom.Call . class ) ; org.mockito.Mockito . when ( call . getState () ) . thenReturn ( CallState.RINGING ) ; org.mockito.Mockito . when ( mFakeCallsManager . getForegroundCall () ) . thenReturn ( call ) ; org.junit.Assert . assertTrue ( mTSIBinder . endCall ( null ) ) ; org.mockito.Mockito . verify ( call ) . reject ( false , null ) ; }
public static void initLogging ( android.content.Context context ) { android.telecom.Log . setTag ( com.android.server.telecom.LogUtils.TAG ) ; android.telecom.Log . setSessionContext ( context ) ; for ( android.telecom.Logging.EventManager.TimedEventPair p : com.android.server.telecom.LogUtils.Events.Timings.sTimedEvents ) { android.telecom.Log . addRequestResponsePair ( p ) ; } android.telecom.Log . registerEventListener ( com.android.server.telecom.LogUtils : : eventRecordAdded ) ; android.telecom.Log . registerSessionListener ( Analytics : : addSessionTiming ) ; }
public java.lang.String getFolderName ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType folder ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( folder . getName () ) ; for ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier qualifier : mQualifiers ) { if ( qualifier != null ) { java.lang.String segment = qualifier . getFolderSegment () ; if ( ( segment != null ) && ( ( segment . length () ) > NUMBER_CONSTANT ) ) { result . append ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.QUALIFIER_SEP ) ; result . append ( segment ) ; } } } return result . toString () ; }
@ org.junit.Test public void testInvalidICMPv6NDLength () { final java.lang.String packet = STRING_CONSTANT + ( ( ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; final java.lang.String expected = STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( expected , getSummary ( packet ) ) ; }
public static void testSendMessageUcs2WithLanguageUmts ( android.app.Activity activity , int serialNumber , int category ) { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_CB_RECEIVED_ACTION ) ; intent . putExtra ( STRING_CONSTANT , com.android.cellbroadcastreceiver.tests.SendTestMessages . createFromPdu ( activity , com.android.cellbroadcastreceiver.tests.SendTestMessages.gsmUcs2TestWithLanguageInBodyUmts , serialNumber , category ) ) ; activity . sendOrderedBroadcastAsUser ( intent , UserHandle.ALL , Manifest.permission.RECEIVE_SMS , AppOpsManager.OP_RECEIVE_SMS , null , null , Activity.RESULT_OK , null , null ) ; }
public void testGetErrorStreamOnUnsuccessfulRequest ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . setResponseCode ( NUMBER_CONSTANT ) . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , readAscii ( connection . getErrorStream () , java.lang.Integer.MAX_VALUE ) ) ; }
private static java.lang.String getDefaultSignatureAlgorithmForKeyType ( java.lang.String keyType ) { if ( STRING_CONSTANT . equalsIgnoreCase ( keyType ) ) { return STRING_CONSTANT ; } else if ( STRING_CONSTANT . equalsIgnoreCase ( keyType ) ) { return STRING_CONSTANT ; } else { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + keyType ) ) ; } }
public com.android.sdklib.internal.repository.SdkSource [] getAllSources () { synchronized ( mSources ) { int n = NUMBER_CONSTANT ; for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources . values () ) { n += list . size () ; } com.android.sdklib.internal.repository.SdkSource [] sources = new com.android.sdklib.internal.repository.SdkSource [ n ] ; int i = NUMBER_CONSTANT ; for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources . values () ) { for ( com.android.sdklib.internal.repository.SdkSource source : list ) { sources [ ( i ++ ) ] = source ; } } return sources ; } }
com.android.bluetooth.gatt.ContextMap < T > . App getById ( int id ) { synchronized ( mApps ) { java.util.Iterator < com.android.bluetooth.gatt.ContextMap < T > . App > i = mApps . iterator () ; while ( i . hasNext () ) { com.android.bluetooth.gatt.ContextMap < T > . App entry = i . next () ; if ( ( entry.id ) == id ) return entry ; } } android.util.Log . e ( com.android.bluetooth.gatt.ContextMap.TAG , ( STRING_CONSTANT + id ) ) ; return null ; }
public final void testCreateDup () { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ( ved ) ; com.android.ide.common.rendering.api.ViewInfo lvi = new com.android.ide.common.rendering.api.ViewInfo ( STRING_CONSTANT , uiv , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo . create ( lvi ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m . create ( cvi ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m . create ( cvi ) ; assertSame ( proxy2 , proxy1 ) ; }
private void getElementAttrRequestFromNative ( byte [] address , byte numAttr , int [] attrs ) { com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd () ; com.android.bluetooth.avrcp.AvrcpCmd.ElementAttrCmd elemAttr = avrcpCmdobj . new com.android.bluetooth.avrcp.ElementAttrCmd ( address , numAttr , attrs ) ; android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_ELEM_ATTRS ) ; msg.obj = elemAttr ; mHandler . sendMessage ( msg ) ; }
@ java.lang.Override public void addressRemoved ( android.net.LinkAddress address , java.lang.String iface , int flags , int scope ) { if ( mWifiStateMachine.mInterfaceName . equals ( iface ) ) { if ( android.net.wifi.WifiStateMachine.DBG ) { log ( ( ( ( ( ( ( ( STRING_CONSTANT + address ) + STRING_CONSTANT ) + iface ) + STRING_CONSTANT ) + flags ) + STRING_CONSTANT ) + scope ) ) ; } mWifiStateMachine . sendMessage ( android.net.wifi.WifiStateMachine.CMD_IP_ADDRESS_REMOVED , address ) ; } }
private synchronized void reduceWorkforce ( ) throws java.lang.InterruptedException { verbose ( ( STRING_CONSTANT + ( mWorkThreads . size () ) ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( mMWorkforceIncrement ) ; i ++ ) { _push ( new com.android.builder.tasks.WorkQueue.QueueTask < T > ( com.android.builder.tasks.WorkQueue.QueueTask.ActionType.Death , null ) ) ; } }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == NUMBER_CONSTANT ) ) { return - NUMBER_CONSTANT ; } if ( packet != null ) { packet . setReceivedLength ( byteCount ) ; packet . setPort ( srcAddress . getPort () ) ; if ( ! ( srcAddress . getAddress () . equals ( packet . getAddress () ) ) ) { packet . setAddress ( srcAddress . getAddress () ) ; } } return byteCount ; }
public void update () { log ( ( STRING_CONSTANT + ( mPhone . getSubId () ) ) ) ; log ( STRING_CONSTANT ) ; onUpdateIcc () ; mAutoAttachOnCreation . set ( false ) ; ( ( com.android.internal.telephony.GsmCdmaPhone ) ( mPhone ) ) . updateCurrentCarrierInProvider () ; }
public void computeUsages ( final java.util.List < com.intellij.psi.PsiElement > targets ) { final com.intellij.psi.PsiElement parent = myTarget . getParent () ; if ( ! ( parent instanceof com.jetbrains.python.codeInsight.highlighting.PyReturnStatement ) ) { return; } final com.jetbrains.python.codeInsight.highlighting.PyFunction function = com.intellij.psi.util.PsiTreeUtil . getParentOfType ( myTarget , com.jetbrains.python.codeInsight.highlighting.PyFunction . class ) ; if ( function == null ) { return; } highlightExitPoints ( ( ( com.jetbrains.python.codeInsight.highlighting.PyReturnStatement ) ( parent ) ) , function ) ; }
public java.io.InputStream openDirectUrl ( java.lang.String urlString , com.android.sdklib.internal.repository.ITaskMonitor monitor ) throws com.android.sdklib.internal.repository.UrlOpener.CanceledByUserException , java.io.IOException { if ( com.android.sdklib.internal.repository.DownloadCache.DEBUG ) { java.lang.System.out . println ( java.lang.String . format ( STRING_CONSTANT , urlString ) ) ; } com.android.util.Pair < java.io.InputStream , org.apache.http.HttpResponse > result = com.android.sdklib.internal.repository.UrlOpener . openUrl ( urlString , false , monitor , null ) ; return result . getFirst () ; }
public static < T , U > T [] copyOf ( U [] original , int newLength , java.lang.Class < ? extends T [] > newType ) { if ( newLength < NUMBER_CONSTANT ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer . toString ( newLength ) ) ; } return java.util.Arrays . copyOfRange ( original , NUMBER_CONSTANT , newLength , newType ) ; }
private java.lang.StringBuffer subformat ( double number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( currencySignCount ) == ( com.ibm.icu.text.DecimalFormat.CURRENCY_SIGN_COUNT_IN_PLURAL_FORMAT ) ) { return subformat ( currencyPluralInfo . select ( getFixedDecimal ( number ) ) , result , fieldPosition , isNegative , isInteger , parseAttr ) ; } else { return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; } }
public java.lang.String getMsisdnForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } return phone . getMsisdn () ; } else { loge ( ( STRING_CONSTANT + subId ) ) ; return null ; } }
@ java.lang.Override public final java.nio.ByteBuffer putChar ( char x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putChar ( ix ( nextPutIndex ( SizeOf.CHAR ) ) , x ) ; return this ; }
private static void assertPhoneAccountHandleEquals ( android.telecom.PhoneAccountHandle a , android.telecom.PhoneAccountHandle b ) { if ( a != b ) { org.junit.Assert . assertEquals ( a . getComponentName () . getPackageName () , b . getComponentName () . getPackageName () ) ; org.junit.Assert . assertEquals ( a . getComponentName () . getClassName () , b . getComponentName () . getClassName () ) ; org.junit.Assert . assertEquals ( a . getId () , b . getId () ) ; } }
@ java.lang.Override protected void cleanup () { if ( com.android.bluetooth.opp.BluetoothOppService.V ) { android.util.Log . v ( com.android.bluetooth.opp.BluetoothOppService.TAG , STRING_CONSTANT ) ; } stopListeners () ; if ( ( mBatchs ) != null ) { mBatchs . clear () ; } if ( ( mShares ) != null ) { mShares . clear () ; } if ( ( mHandler ) != null ) { mHandler . removeCallbacksAndMessages ( null ) ; } }
public void testAddAll4 () { java.util.concurrent.ArrayBlockingQueue q = new java.util.concurrent.ArrayBlockingQueue ( NUMBER_CONSTANT ) ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.IllegalStateException success ) {} }
public static java.util.Enumeration getNames () { java.util.Vector v = new java.util.Vector () ; org.bouncycastle.asn1.x9.ECNamedCurveTable . addEnumeration ( v , org.bouncycastle.asn1.x9.X962NamedCurves . getNames () ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable . addEnumeration ( v , org.bouncycastle.asn1.sec.SECNamedCurves . getNames () ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable . addEnumeration ( v , org.bouncycastle.asn1.nist.NISTNamedCurves . getNames () ) ; return v . elements () ; }
@ java.lang.Override public android.content.ClipDescription getPrimaryClipDescription ( java.lang.String callingPackage ) { synchronized ( this ) { if ( ! ( clipboardAccessAllowed ( AppOpsManager.OP_READ_CLIPBOARD , callingPackage , android.os.Binder . getCallingUid () ) ) ) { return null ; } com.android.server.clipboard.ClipboardService.PerUserClipboard clipboard = getClipboard () ; return ( clipboard.primaryClip ) != null ? clipboard.primaryClip . getDescription () : null ; } }
public static synchronized int getScannedChannelCount ( android.content.Context context ) { com.android.tv.common.SoftPreconditions . checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues . getInt ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_SCANNED_CHANNEL_COUNT ) ; } else { return com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . getInt ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_SCANNED_CHANNEL_COUNT , NUMBER_CONSTANT ) ; } }
@ java.lang.Override public int getCount () { com.google.common.collect.Count count = mapEntry . getValue () ; if ( ( count == null ) || ( ( count . get () ) == NUMBER_CONSTANT ) ) { com.google.common.collect.Count frequency = backingMap . get ( getElement () ) ; if ( frequency != null ) { return frequency . get () ; } } return count == null ? NUMBER_CONSTANT : count . get () ; }
public java.lang.String getNationalSignificantNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.lang.StringBuilder nationalNumber = new java.lang.StringBuilder () ; if ( ( number . isItalianLeadingZero () ) && ( ( number . getNumberOfLeadingZeros () ) > NUMBER_CONSTANT ) ) { char [] zeros = new char [ number . getNumberOfLeadingZeros () ] ; java.util.Arrays . fill ( zeros , CHAR_CONS ) ; nationalNumber . append ( new java.lang.String ( zeros ) ) ; } nationalNumber . append ( number . getNationalNumber () ) ; return nationalNumber . toString () ; }
@ java.lang.Override public java.util.List < com.android.vts.servlet.Page > getBreadcrumbLinks ( javax.servlet.http.HttpServletRequest request ) { java.util.List < com.android.vts.servlet.Page > links = new java.util.ArrayList <> () ; java.lang.String planName = request . getParameter ( STRING_CONSTANT ) ; links . add ( new com.android.vts.servlet.Page ( PageType.PLAN_RELEASE , planName , ( STRING_CONSTANT + planName ) ) ) ; java.lang.String time = request . getParameter ( STRING_CONSTANT ) ; links . add ( new com.android.vts.servlet.Page ( PageType.PLAN_RUN , ( ( ( STRING_CONSTANT + planName ) + STRING_CONSTANT ) + time ) ) ) ; return links ; }
@ android.test.suitebuilder.annotation.LargeTest @ org.junit.Test public void testSingleIncomingCallRemoteDisconnect ( ) throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( STRING_CONSTANT , mPhoneAccountA0 . getAccountHandle () , mConnectionServiceFixtureA ) ; org.mockito.Mockito . when ( mClockProxy . currentTimeMillis () ) . thenReturn ( com.android.server.telecom.tests.TEST_DISCONNECT_TIME ) ; org.mockito.Mockito . when ( mClockProxy . elapsedRealtime () ) . thenReturn ( com.android.server.telecom.tests.TEST_DISCONNECT_ELAPSED_TIME ) ; mConnectionServiceFixtureA . sendSetDisconnected ( ids.mConnectionId , DisconnectCause.LOCAL ) ; org.junit.Assert . assertEquals ( Call.STATE_DISCONNECTED , mInCallServiceFixtureX . getCall ( ids.mCallId ) . getState () ) ; org.junit.Assert . assertEquals ( Call.STATE_DISCONNECTED , mInCallServiceFixtureY . getCall ( ids.mCallId ) . getState () ) ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendTextWithOutDesAddr () { mCdmaSmsDispatcher . sendText ( null , STRING_CONSTANT , com.android.internal.telephony.cdma.TAG , null , null , null , null , false , ( - NUMBER_CONSTANT ) , false , ( - NUMBER_CONSTANT ) ) ; verify ( mSimulatedCommandsVerifier , times ( NUMBER_CONSTANT ) ) . sendImsGsmSms ( anyString () , anyString () , anyInt () , anyInt () , any ( android.os.Message . class ) ) ; }
@ android.support.test.filters.FlakyTest @ android.test.suitebuilder.annotation.LargeTest @ org.junit.Test public void testOutgoingCallSelectPhoneAccountNoVideo ( ) throws java.lang.Exception { startOutgoingPhoneCallPendingCreateConnection ( STRING_CONSTANT , null , mConnectionServiceFixtureA , java.lang.Process . myUserHandle () , VideoProfile.STATE_BIDIRECTIONAL ) ; android.telecom.com.android.server.telecom.Call call = mTelecomSystem . getCallsManager () . getCalls () . iterator () . next () ; assert call . isVideoCallingSupported () ; org.junit.Assert . assertEquals ( VideoProfile.STATE_BIDIRECTIONAL , call . getVideoState () ) ; call . setTargetPhoneAccount ( mPhoneAccountA2 . getAccountHandle () ) ; assert ! ( call . isVideoCallingSupported () ) ; org.junit.Assert . assertEquals ( VideoProfile.STATE_AUDIO_ONLY , call . getVideoState () ) ; }
private static java.io.File makeTemporaryFile ( byte [] content ) throws java.lang.Exception { java.io.File f = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; java.io.FileOutputStream fos = new java.io.FileOutputStream ( f ) ; fos . write ( content ) ; fos . close () ; return f ; }
void stopAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { if ( mAdapterService . isMultiAdvertisementSupported () ) { gattClientEnableAdvNative ( client.advertiserId , false , NUMBER_CONSTANT ) ; } else { gattAdvertiseNative ( false ) ; try { mService . onAdvertiseInstanceEnabled ( AdvertiseCallback.ADVERTISE_SUCCESS , client.advertiserId , false ) ; } catch ( android.os.RemoteException e ) { android.util.Log . d ( com.android.bluetooth.gatt.AdvertiseManager.TAG , STRING_CONSTANT , e ) ; } } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testProcessChldReleaseActiveHold ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall () ; com.android.server.telecom.Call heldCall = createHeldCall () ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_RELEASEACTIVE_ACCEPTHELD ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . disconnectCall ( org.mockito.Matchers . eq ( activeCall ) ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . unholdCall ( org.mockito.Matchers . eq ( heldCall ) ) ; org.junit.Assert . assertEquals ( didProcess , true ) ; }
public void onDataPathRequestNotification ( int pubSubId , byte [] mac , int ndpId ) { android.os.Message msg = mSm . obtainMessage ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_TYPE_NOTIFICATION ) ; msg.arg1 = com.android.server.wifi.aware.WifiAwareStateManager.NOTIFICATION_TYPE_ON_DATA_PATH_REQUEST ; msg.arg2 = pubSubId ; msg.obj = ndpId ; msg . getData () . putByteArray ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_BUNDLE_KEY_MAC_ADDRESS , mac ) ; mSm . sendMessage ( msg ) ; }
private void addListValue ( java.lang.reflect.Field field , java.lang.Object value , com.google.devtools.common.options.OptionPriority priority , java.lang.String source , java.lang.String implicitDependant , java.lang.String expandedFrom ) { com.google.devtools.common.options.OptionsParserImpl.ParsedOptionEntry entry = parsedValues . get ( field ) ; if ( entry == null ) { entry = new com.google.devtools.common.options.OptionsParserImpl.ParsedOptionEntry ( com.google.common.collect.ArrayListMultimap . create () , priority , source , implicitDependant , expandedFrom , true ) ; parsedValues . put ( field , entry ) ; maybeAddDeprecationWarning ( field ) ; } entry . addValue ( priority , value ) ; }
private void executeAndValidateConnectSequence ( final int newFrameworkNetworkId , final boolean haveExistingNetwork ) throws java.lang.Exception { setupMocksForConnectSequence ( haveExistingNetwork ) ; android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration () ; config.networkId = newFrameworkNetworkId ; assertTrue ( mDut . connectToNetwork ( config ) ) ; validateConnectSequence ( haveExistingNetwork , NUMBER_CONSTANT ) ; }
@ java.lang.Override public final java.nio.ShortBuffer asShortBuffer () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } int off = this . position () ; int lim = this . limit () ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : NUMBER_CONSTANT ; int size = rem > > NUMBER_CONSTANT ; return new java.nio.ByteBufferAsShortBuffer ( this , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , size , size , off , order () ) ; }
@ java.lang.Override public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [] states ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( STRING_CONSTANT + ( java.util.Arrays . toString ( states ) ) ) ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( NUMBER_CONSTANT ) ; } return service . getDevicesMatchingConnectionStates ( states ) ; }
@ java.lang.Override public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor . visit ( this ) ) { visitor . accept ( lhs ) ; for ( int i = NUMBER_CONSTANT ; i < ( rhs.length ) ; i ++ ) { visitor . accept ( rhs [ i ] ) ; } } visitor . endVisit ( this ) ; }
@ java.lang.Override public void onSizeChanged ( final int w , final int h , final int ow , final int oh ) { if ( checkNeedsPost () ) { mRunQueue . addTask ( new java.lang.Runnable () { @ java.lang.Override public void run () { onSizeChanged ( w , h , ow , oh ) ; } } ) ; return; } mAwContents . onSizeChanged ( w , h , ow , oh ) ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier () ; s . accept ( method ) ; }
public java.util.List < android.net.wifi.hotspot2.PasspointConfiguration > getProviderConfigs () { java.util.List < android.net.wifi.hotspot2.PasspointConfiguration > configs = new java.util.ArrayList <> () ; for ( java.util.Map.Entry < java.lang.String , com.android.server.wifi.hotspot2.PasspointProvider > entry : mProviders . entrySet () ) { configs . add ( entry . getValue () . getConfig () ) ; } return configs ; }
public boolean isConferenceHost () { if ( ( mConferenceHost ) == null ) { return false ; } android.telecom.Connection originalConnection = mConferenceHost . getOriginalConnection () ; return ( ( originalConnection != null ) && ( originalConnection . isMultiparty () ) ) && ( originalConnection . isConferenceHost () ) ; }
void load ( java.lang.String absolutePath , java.lang.ClassLoader loader ) { java.lang.System . logE ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; if ( absolutePath == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } java.lang.String error = doLoad ( absolutePath , loader ) ; if ( error != null ) { throw new java.lang.UnsatisfiedLinkError ( error ) ; } }
private boolean toProperty ( org.eclipse.wb.internal.core.model.property.Property property ) throws java.lang.Exception { if ( ( m_textControl ) == null ) { return false ; } java.lang.String text = m_textControl . getText () ; if ( ! ( m_currentText . equals ( text ) ) ) { m_ignoreFocusLost = true ; try { boolean success = setEditorText ( property , text ) ; if ( ! success ) { return false ; } } finally { m_ignoreFocusLost = false ; } m_currentText = text ; } return true ; }
@ org.junit.Test public void testHandleUserSwitchAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user2 = ( com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ) + NUMBER_CONSTANT ; when ( mUserManager . isUserUnlockingOrUnlocked ( user2 ) ) . thenReturn ( false ) ; mWifiConfigManager . handleUserSwitch ( user2 ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile . class ) ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . write ( anyBoolean () ) ; }
public boolean setNetworkExtra ( int netId , java.lang.String name , java.util.Map < java.lang.String , java.lang.String > values ) { java.lang.String encoded = com.android.server.wifi.WifiNative . createNetworkExtra ( values ) ; if ( encoded == null ) { return false ; } return setNetworkVariable ( netId , name , encoded ) ; }
private java.lang.String makeUriString () { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; if ( ( scheme ) != null ) { builder . append ( scheme ) . append ( CHAR_CONS ) ; } appendSspTo ( builder ) ; if ( ! ( fragment . isEmpty () ) ) { builder . append ( CHAR_CONS ) . append ( fragment . getEncoded () ) ; } return builder . toString () ; }
public synchronized void maybeInit () { if ( initialized ) { return; } if ( ( zipDir ) == null ) { initialized = true ; return; } try { urlHandler = new libcore.io.ClassPathURLStreamHandler ( path . getPath () ) ; } catch ( java.io.IOException ioe ) { java.lang.System . logE ( ( STRING_CONSTANT + ( path ) ) , ioe ) ; urlHandler = null ; } initialized = true ; }
public void testKernelDomain ( ) throws java.io.FileNotFoundException { java.lang.String domain = STRING_CONSTANT ; java.util.List < android.security.cts.SELinuxDomainTest.ProcessDetails > procs = android.security.cts.SELinuxDomainTest.ProcessDetails . getProcessMap () . get ( domain ) ; if ( procs != null ) { for ( android.security.cts.SELinuxDomainTest.ProcessDetails p : procs ) { assertTrue ( ( ( STRING_CONSTANT + p ) + STRING_CONSTANT ) , p . isKernel () ) ; } } }
@ android.support.annotation.CallSuper public void onVisible () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( ( ( getActivity () ) != null ) && ( ( getActivity () ) instanceof com.android.dialer.app.calllog.CallLogFragment.HostInterface ) ) { ( ( com.android.dialer.app.calllog.CallLogFragment.HostInterface ) ( getActivity () ) ) . enableFloatingButton ( ( ( ( mModalAlertManager ) == null ) || ( mModalAlertManager . isEmpty () ) ) ) ; } }
public static void addDebugBridgeChangeListener ( com.android.ddmlib.AndroidDebugBridge.IDebugBridgeChangeListener listener ) { synchronized ( com.android.ddmlib.AndroidDebugBridge.sLock ) { if ( ! ( com.android.ddmlib.AndroidDebugBridge.sBridgeListeners . contains ( listener ) ) ) { com.android.ddmlib.AndroidDebugBridge.sBridgeListeners . add ( listener ) ; if ( ( com.android.ddmlib.AndroidDebugBridge.sThis ) != null ) { try { listener . bridgeChanged ( com.android.ddmlib.AndroidDebugBridge.sThis ) ; } catch ( java.lang.Exception e ) { com.android.ddmlib.Log . e ( com.android.ddmlib.AndroidDebugBridge.DDMS , e ) ; } } } } }
public byte returnByte ( byte in ) { if ( limitExceeded () ) { throw new org.bouncycastle.crypto.MaxBytesExceededException ( STRING_CONSTANT ) ; } byte out = ( ( byte ) ( ( keyStream [ index ] ) ^ in ) ) ; index = ( ( index ) + NUMBER_CONSTANT ) & NUMBER_CONSTANT ; if ( ( index ) == NUMBER_CONSTANT ) { advanceCounter () ; generateKeyStream ( keyStream ) ; } return out ; }
public int changeEncryptionPassword ( int type , java.lang.String password ) { mContext . enforceCallingOrSelfPermission ( Manifest.permission.CRYPT_KEEPER , STRING_CONSTANT ) ; waitForReady () ; if ( com.android.server.MountService.DEBUG_EVENTS ) { android.util.Slog . i ( com.android.server.MountService.TAG , STRING_CONSTANT ) ; } try { com.android.server.NativeDaemonEvent event = mConnector . execute ( STRING_CONSTANT , STRING_CONSTANT , com.android.server.MountService.CRYPTO_TYPES [ type ] , new com.android.server.NativeDaemonConnector.SensitiveArg ( com.android.server.MountService . toHex ( password ) ) ) ; return java.lang.Integer . parseInt ( event . getMessage () ) ; } catch ( com.android.server.NativeDaemonConnectorException e ) { return e . getCode () ; } }
private static java.lang.ClassLoader createClassLoader ( java.util.List < java.nio.file.Path > bootclasspath , java.nio.file.Path inputJar , java.util.List < java.nio.file.Path > classpath , java.lang.ClassLoader parent ) throws java.io.IOException { classpath = com.google.common.collect.ImmutableList . < java.nio.file.Path > builder () . add ( inputJar ) . addAll ( classpath ) . build () ; if ( ! ( bootclasspath . isEmpty () ) ) { parent = com.google.devtools.build.android.desugar.HeaderClassLoader . fromClassPath ( bootclasspath , parent ) ; } return com.google.devtools.build.android.desugar.HeaderClassLoader . fromClassPath ( classpath , parent ) ; }
public void test_getParameterCount ( ) throws java.lang.Exception { java.lang.Class [] expectedParameters = new java.lang.Class [ NUMBER_CONSTANT ] ; java.lang.reflect.Constructor < > constructor = libcore.java.lang.reflect.ConstructorTest.ConstructorTestHelper . class . getConstructor ( expectedParameters ) ; assertEquals ( NUMBER_CONSTANT , constructor . getParameterCount () ) ; expectedParameters = new java.lang.Class [] { java.lang.Object . class } ; constructor = libcore.java.lang.reflect.ConstructorTest.ConstructorTestHelper . class . getConstructor ( expectedParameters ) ; int count = constructor . getParameterCount () ; assertEquals ( NUMBER_CONSTANT , count ) ; }
@ java.lang.Override public void onCreate ( android.database.sqlite.SQLiteDatabase db ) { if ( com.android.providers.telephony.TelephonyProvider.DBG ) com.android.providers.telephony.TelephonyProvider . log ( ( STRING_CONSTANT + db ) ) ; createSimInfoTable ( db ) ; createCarriersTable ( db , com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE ) ; initDatabase ( db ) ; if ( com.android.providers.telephony.TelephonyProvider.DBG ) com.android.providers.telephony.TelephonyProvider . log ( ( STRING_CONSTANT + db ) ) ; }
private static void preloadOpenGL () { java.lang.String driverPackageName = android.os.SystemProperties . get ( com.android.internal.os.ZygoteInit.PROPERTY_GFX_DRIVER ) ; if ( ( ! ( android.os.SystemProperties . getBoolean ( com.android.internal.os.ZygoteInit.PROPERTY_DISABLE_OPENGL_PRELOADING , false ) ) ) && ( ( driverPackageName == null ) || ( driverPackageName . isEmpty () ) ) ) { android.opengl.EGL14 . eglGetDisplay ( EGL14.EGL_DEFAULT_DISPLAY ) ; } }
public void registerListener ( android.hardware.cts.helpers.TestSensorEventListener listener ) { if ( ( mTestSensorEventListener ) != null ) { android.util.Log . w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , STRING_CONSTANT ) ; return; } mTestSensorEventListener = ( listener != null ) ? listener : new android.hardware.cts.helpers.TestSensorEventListener () ; mTestSensorEventListener . setSensorInfo ( mSensor , mRateUs , mMaxBatchReportLatencyUs ) ; java.lang.String message = android.hardware.cts.helpers.SensorCtsHelper . formatAssertionMessage ( mSensor , STRING_CONSTANT , mRateUs , mMaxBatchReportLatencyUs ) ; boolean result = mSensorManager . registerListener ( mTestSensorEventListener , mSensor , mRateUs , mMaxBatchReportLatencyUs ) ; junit.framework.Assert . assertTrue ( message , result ) ; }
@ java.lang.Override public void endVisit ( org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding targetType = ( ( org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding ) ( x.qualification.resolvedType ) ) ; push ( makeThisReference ( info , targetType , true , scope , x ) ) ; } catch ( com.android.jack.ir.ast.JTypeLookupException e ) { throw translateException ( x , e ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public void test_unwrap_ByteBuffer$ByteBuffer_01 ( ) throws java.lang.Exception { prepareEngines () ; doHandshake () ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; try { clientEngine.engine . unwrap ( bbs , new java.nio.ByteBuffer [] { bbd } ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.net.ssl.SSLException expected ) {} }
@ org.junit.Test public void test002f ( ) throws java.lang.Exception { java.io.File jackOutput ; jackOutput = runTest002 ( true , STRING_CONSTANT ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( jackOutput ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH , STRING_CONSTANT ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH , STRING_CONSTANT ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH , STRING_CONSTANT ) ; }
public void testAddAll3 () { jsr166.AbstractQueueTest.Succeed q = new jsr166.AbstractQueueTest.Succeed () ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( ( SIZE ) - NUMBER_CONSTANT ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics . endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : mWifiDiagnostics . reportConnectionEvent ( ( - NUMBER_CONSTANT ) , WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; break; case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break; default: mWifiDiagnostics . reportConnectionEvent ( ( - NUMBER_CONSTANT ) , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } }
private void setNetworkRestriction () { mRestrictedNetworkOverride = false ; boolean noRestrictedRequests = true ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts . keySet () ) { noRestrictedRequests &= apnContext . hasNoRestrictedRequests ( true ) ; } if ( noRestrictedRequests ) { return; } if ( ! ( mApnSetting . isMetered ( mPhone . getContext () , mPhone . getSubId () , mPhone . getServiceState () . getDataRoaming () ) ) ) { return; } mRestrictedNetworkOverride = ! ( mDct . isDataEnabled () ) ; }
@ android.widget.RemotableViewMethod public void setError ( java.lang.CharSequence error ) { if ( error == null ) { setError ( null , null ) ; } else { android.graphics.drawable.Drawable dr = getContext () . getDrawable ( com.android.internal.R.drawable.indicator_input_error ) ; dr . setBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT , dr . getIntrinsicWidth () , dr . getIntrinsicHeight () ) ; setError ( error , dr ) ; } }
@ org.jetbrains.annotations.NotNull private static java.lang.String joinWithCommaAndCapitalize ( java.lang.String reformatNotification , java.lang.String rearrangeNotification ) { java.lang.String firstNotificationLine = ( reformatNotification != null ) ? reformatNotification : rearrangeNotification ; if ( ( reformatNotification != null ) && ( rearrangeNotification != null ) ) { firstNotificationLine += STRING_CONSTANT + rearrangeNotification ; } firstNotificationLine = com.intellij.openapi.util.text.StringUtil . capitalize ( firstNotificationLine ) ; return firstNotificationLine ; }
@ org.chromium.base.annotations.SuppressFBWarnings ( value = STRING_CONSTANT ) public static void initCommandLine ( android.content.Context context , java.lang.String fileName ) { if ( ! ( org.chromium.base.CommandLine . isInitialized () ) ) { java.io.File commandLineFile = org.chromium.base.CommandLineInitUtil . getAlternativeCommandLinePath ( context , fileName ) ; if ( commandLineFile == null ) { commandLineFile = new java.io.File ( org.chromium.base.CommandLineInitUtil.COMMAND_LINE_FILE_PATH , fileName ) ; } org.chromium.base.CommandLine . initFromFile ( commandLineFile . getPath () ) ; } }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testRegistrationConfigPermutationEqual () { android.telephony.ims.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder () . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_MMTEL ) . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_RCS ) . build () ; android.telephony.ims.stub.ImsFeatureConfiguration testConfig2 = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder () . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_RCS ) . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_MMTEL ) . build () ; junit.framework.Assert . assertEquals ( testConfig , testConfig2 ) ; }
public static org.conscrypt.OpenSSLECGroupContext getCurveByName ( java.lang.String curveName ) { if ( STRING_CONSTANT . equals ( curveName ) ) { curveName = STRING_CONSTANT ; } else if ( STRING_CONSTANT . equals ( curveName ) ) { curveName = STRING_CONSTANT ; } final long ctx = org.conscrypt.NativeCrypto . EC_GROUP_new_by_curve_name ( curveName ) ; if ( ctx == NUMBER_CONSTANT ) { return null ; } org.conscrypt.NativeRef.EC_GROUP groupRef = new org.conscrypt.NativeRef.EC_GROUP ( ctx ) ; return new org.conscrypt.OpenSSLECGroupContext ( groupRef ) ; }
@ android.test.suitebuilder.annotation.LargeTest @ org.junit.Test public void testPullExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mCapabilities = android.telecom.Connection.CAPABILITY_CAN_PULL_CALL ; mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( STRING_CONSTANT , mPhoneAccountA0 . getAccountHandle () , mConnectionServiceFixtureA ) ; org.junit.Assert . assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX . getCall ( ids.mCallId ) . getState () ) ; mInCallServiceFixtureX.mInCallAdapter . pullExternalCall ( ids.mCallId ) ; org.mockito.Mockito . verify ( mConnectionServiceFixtureA . getTestDouble () , org.mockito.Mockito . timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . pullExternalCall ( org.mockito.Matchers . eq ( ids.mConnectionId ) , org.mockito.Matchers . any () ) ; }
@ org.junit.Test public void testParseICMPv6DADProbe () { final java.lang.String packet = STRING_CONSTANT + ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; final java.lang.String expected = STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( expected , getSummary ( packet ) ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws java.lang.Exception { java.lang.String hash = com.android.build.gradle.tasks.PreDex . getFileHash ( fileToProcess ) ; synchronized ( hashs ) { if ( hashs . contains ( hash ) ) { return null ; } hashs . add ( hash ) ; } java.io.File preDexedFile = com.android.build.gradle.tasks.PreDex . getDexFileName ( outFolder , fileToProcess ) ; if ( multiDexEnabled ) { preDexedFile . mkdirs () ; } builder . preDexLibrary ( fileToProcess , preDexedFile , multiDexEnabled , options , mOutputHandler ) ; return null ; }
@ java.lang.Override public boolean hasClipboardText ( java.lang.String callingPackage ) { synchronized ( this ) { if ( ! ( clipboardAccessAllowed ( AppOpsManager.OP_READ_CLIPBOARD , callingPackage , android.os.Binder . getCallingUid () ) ) ) { return false ; } com.android.server.clipboard.ClipboardService.PerUserClipboard clipboard = getClipboard () ; if ( ( clipboard.primaryClip ) != null ) { java.lang.CharSequence text = clipboard.primaryClip . getItemAt ( NUMBER_CONSTANT ) . getText () ; return ( text != null ) && ( ( text . length () ) > NUMBER_CONSTANT ) ; } return false ; } }
@ org.junit.Test public void testGetCoreInterfaceRewritingTarget_staticInterfaceMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , java.lang.Thread . currentThread () . getContextClassLoader () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . getCoreInterfaceRewritingTarget ( Opcodes.INVOKESTATIC , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , true ) ) . isEqualTo ( java.util.Comparator . class ) ; }
public static org.jetbrains.plugins.javaFX.fxml.PsiMethod findPropertySetter ( java.lang.String attributeName , org.jetbrains.plugins.javaFX.fxml.PsiClass classWithStaticProperty ) { final java.lang.String setterName = org.jetbrains.plugins.javaFX.fxml.PropertyUtil . suggestSetterName ( com.intellij.openapi.util.text.StringUtil . getShortName ( attributeName ) ) ; final org.jetbrains.plugins.javaFX.fxml.PsiMethod [] setters = classWithStaticProperty . findMethodsByName ( setterName , true ) ; if ( ( setters.length ) >= NUMBER_CONSTANT ) { return setters [ NUMBER_CONSTANT ] ; } return null ; }
private com.android.ide.common.resources.platform.AttrsXmlParser getParser ( com.android.ide.common.resources.ResourceFile file ) { if ( ( mParserCache ) == null ) { mParserCache = new java.util.HashMap < com.android.ide.common.resources.ResourceFile , com.android.ide.common.resources.platform.AttrsXmlParser > () ; } com.android.ide.common.resources.platform.AttrsXmlParser parser = mParserCache . get ( file ) ; if ( parser == null ) { parser = new com.android.ide.common.resources.platform.AttrsXmlParser ( file . getFile () . getOsLocation () , com.android.ide.eclipse.adt.AdtPlugin . getDefault () , NUMBER_CONSTANT ) ; parser . preload () ; mParserCache . put ( file , parser ) ; } return parser ; }
private static java.io.File [] splitLibraryPath ( java.lang.String path ) { java.util.ArrayList < java.io.File > result = dalvik.system.DexPathList . splitPaths ( path , java.lang.System . getProperty ( STRING_CONSTANT ) , true ) ; return result . toArray ( new java.io.File [ result . size () ] ) ; }
@ java.lang.Override public boolean isApplicable ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) throws com.android.jack.lookup.JMethodLookupException { if ( ( call . getReceiverType () . isSameType ( javaLangClass ) ) && ( call . getMethodId () . equals ( forNameMethodId ) ) ) { assert call . getType () . isSameType ( javaLangClass ) ; return true ; } return false ; }
public com.android.jack.dx.dex.file.ProtoIdItem intern ( com.android.jack.dx.rop.type.Prototype prototype ) { assert prototype != null ; throwIfPrepared () ; com.android.jack.dx.dex.file.ProtoIdItem result = protoIds . get ( prototype ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.ProtoIdItem ( prototype ) ; protoIds . put ( prototype , result ) ; } return result ; }
private void responseLceData ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.LceDataInfo lceInfo ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { java.util.ArrayList < java.lang.Integer > ret = com.android.internal.telephony.RIL . convertHalLceData ( lceInfo , mRil ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
public com.android.server.wifi.SoftApManager makeSoftApManager ( com.android.server.wifi.WifiNative wifiNative , android.os.INetworkManagementService nmService , android.net.ConnectivityManager cm , java.lang.String countryCode , java.util.ArrayList < java.lang.Integer > allowed2GChannels , com.android.server.wifi.SoftApManager.Listener listener , android.net.wifi.IApInterface apInterface ) { return new com.android.server.wifi.SoftApManager ( mWifiServiceHandlerThread . getLooper () , wifiNative , countryCode , allowed2GChannels , listener , apInterface , nmService ) ; }
public void setZoneStrings ( java.lang.String [] [] zoneStrings ) { if ( zoneStrings == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } for ( java.lang.String [] row : zoneStrings ) { if ( ( row.length ) < NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( ( ( java.util.Arrays . toString ( row ) ) + STRING_CONSTANT ) ) ; } } this . zoneStrings = java.text.DateFormatSymbols . clone2dStringArray ( zoneStrings ) ; }
@ java.lang.Override protected boolean start () { android.util.Log . e ( com.android.bluetooth.mapclient.MapClientService.TAG , STRING_CONSTANT ) ; com.android.bluetooth.mapclient.MapClientService . setService ( this ) ; if ( ( mMnsServer ) == null ) { mMnsServer = com.android.bluetooth.mapclient.MapUtils . newMnsServiceInstance ( this ) ; } mAdapter = android.bluetooth.BluetoothAdapter . getDefaultAdapter () ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( BluetoothDevice.ACTION_SDP_RECORD ) ; filter . addAction ( BluetoothDevice.ACTION_ACL_DISCONNECTED ) ; registerReceiver ( mMapReceiver , filter ) ; removeUncleanAccounts () ; return true ; }
private boolean readNotifyBufferMessage () { try { org.chromium.mojo.system.ResultAnd < org.chromium.mojo.system.MessagePipeHandle.ReadMessageResult > readMessageResult = mReadHandle . readMessage ( org.chromium.mojo.bindings.ExecutorFactory.NOTIFY_BUFFER , NUMBER_CONSTANT , MessagePipeHandle.ReadFlags.NONE ) ; if ( ( readMessageResult . getMojoResult () ) == ( org.chromium.mojo.system.MojoResult.OK ) ) { return true ; } } catch ( org.chromium.mojo.system.MojoException e ) {} return false ; }
private static void filterReturnValueChecks ( java.lang.invoke.MethodType targetType , java.lang.invoke.MethodType filterType ) throws java.lang.RuntimeException { java.lang.Class < > rtype = targetType . returnType () ; int filterValues = filterType . parameterCount () ; if ( filterValues == NUMBER_CONSTANT ? rtype != ( void . class ) : ( rtype != ( filterType . parameterType ( NUMBER_CONSTANT ) ) ) || ( filterValues != NUMBER_CONSTANT ) ) throw java.lang.invoke.MethodHandleStatics . newIllegalArgumentException ( STRING_CONSTANT , targetType , filterType ) ; }
private static com.android.ahat.heapdump.Value getDumpedValue ( java.lang.String name , com.android.ahat.heapdump.AhatClassObj main ) { com.android.ahat.heapdump.AhatInstance stuff = null ; for ( com.android.ahat.heapdump.FieldValue field : main . getStaticFieldValues () ) { if ( STRING_CONSTANT . equals ( field.name ) ) { stuff = field.value . asAhatInstance () ; } } return stuff . getField ( name ) ; }
@ java.lang.Override public void visitFieldInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { if ( ( ( ( interfaceFieldToAccessInCompanionMethodToTriggerInterfaceClinit ) == null ) && ( opcode == ( org.objectweb.asm.Opcodes.PUTSTATIC ) ) ) && ( owner . equals ( internalName ) ) ) { interfaceFieldToAccessInCompanionMethodToTriggerInterfaceClinit = com.google.devtools.build.android.desugar.FieldInfo . create ( owner , name , desc ) ; } super . visitFieldInsn ( opcode , owner , name , desc ) ; }
public static android.support.v8.renderscript.ScriptIntrinsic3DLUT create ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element e ) { int id = rs . nScriptIntrinsicCreate ( NUMBER_CONSTANT , e . getID ( rs ) ) ; if ( ! ( e . isCompatible ( android.support.v8.renderscript.Element . U8_4 ( rs ) ) ) ) { throw new android.support.v8.renderscript.RSIllegalArgumentException ( STRING_CONSTANT ) ; } return new android.support.v8.renderscript.ScriptIntrinsic3DLUT ( id , rs , e ) ; }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_math_conformance s = new com.android.rs.test.ScriptC_math_conformance ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . invoke_math_conformance_test () ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; passTest () ; }
public void setThreadUpdateEnabled ( boolean enabled ) { mThreadUpdateEnabled = enabled ; if ( ! enabled ) { mClientData . clearThreads () ; } try { com.android.ddmlib.HandleThread . sendTHEN ( this , enabled ) ; } catch ( java.io.IOException ioe ) { ioe . printStackTrace () ; } update ( com.android.ddmlib.Client.CHANGE_THREAD_MODE ) ; }
@ java.lang.Override @ com.android.annotations.NonNull public com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( getPosition ( node , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) ) ) ) ; if ( pos != null ) { return com.android.tools.lint.detector.api.Location . create ( context.file , pos , ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( pos . getEnd () ) ) ) ; } return com.android.tools.lint.detector.api.Location . create ( context.file ) ; }
static void goDump ( android.os.IBinder binder , java.io.FileDescriptor out , java.lang.String [] args , long timeout ) throws android.os.RemoteException , java.io.IOException { if ( binder instanceof android.os.Binder ) { try { binder . dump ( out , args ) ; } catch ( android.os.RemoteException e ) {} return; } try ( com.android.internal.os.TransferPipe tp = new com.android.internal.os.TransferPipe () ) { binder . dumpAsync ( tp . getWriteFd () . getFileDescriptor () , args ) ; tp . go ( out , timeout ) ; } }
private boolean isBrowseSupported ( java.lang.String packageName ) { synchronized ( mBrowsePlayerInfoList ) { for ( com.android.bluetooth.avrcp.BrowsePlayerInfo info : mBrowsePlayerInfoList ) { if ( info.packageName . equals ( packageName ) ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) ) ; return true ; } } } if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) ) ; return false ; }
public void testPrimaryOtherPackageWriteAccess ( ) throws java.lang.Exception { final java.io.File ourCache = getContext () . getExternalCacheDir () ; final java.io.File otherCache = new java.io.File ( ourCache . getAbsolutePath () . replace ( getContext () . getPackageName () , com.android.cts.externalstorageapp.CommonExternalStorageTest.PACKAGE_NONE ) ) ; com.android.cts.externalstorageapp.CommonExternalStorageTest . deleteContents ( otherCache ) ; assertTrue ( otherCache . mkdirs () ) ; com.android.cts.externalstorageapp.CommonExternalStorageTest . assertDirReadWriteAccess ( otherCache ) ; }
@ java.lang.Override public boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + type ) + STRING_CONSTANT ) + id ) ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return false ; } return service . replyReport ( device , type , id , data ) ; }
public final void release ( ) throws android.os.RemoteException { synchronized ( this ) { if ( isReferenced () ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( ( mResourceId ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { return; } releaseResources () ; if ( ( mBinder ) != null ) { mBinder . unlinkToDeath ( this , NUMBER_CONSTANT ) ; } mBinder = null ; mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID ; } }
@ java.lang.Override public void onDestroy () { super . onDestroy () ; com.android.internal.telephony.cat.CatLog . d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( ( STRING_CONSTANT + ( mIsResponseSent ) ) + STRING_CONSTANT ) + ( mSlotId ) ) + STRING_CONSTANT ) ) ; if ( ( appService ) == null ) { return; } if ( ( ! ( mIsResponseSent ) ) && ( ! ( appService . isInputPending ( mSlotId ) ) ) ) { com.android.internal.telephony.cat.CatLog . d ( com.android.stk.StkInputActivity.LOG_TAG , STRING_CONSTANT ) ; sendResponse ( StkAppService.RES_ID_END_SESSION ) ; } cancelTimeOut () ; }
private int newBranchOffset ( int newInstructionOffset , int oldBranchOffset ) { if ( ( newInstructionOffset < NUMBER_CONSTANT ) || ( newInstructionOffset > ( codeLength ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_CONSTANT + newInstructionOffset ) + STRING_CONSTANT ) + ( codeLength ) ) + STRING_CONSTANT ) ) ; } int oldInstructionOffset = oldInstructionOffsets [ newInstructionOffset ] ; return ( newInstructionOffset ( ( oldInstructionOffset + oldBranchOffset ) ) ) - newInstructionOffset ; }
@ android.annotation.RequiresPermission ( value = Manifest.permission.BLUETOOTH ) public android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord ( java.util.UUID uuid ) throws java.io.IOException { if ( ! ( isBluetoothEnabled () ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; throw new java.io.IOException () ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - NUMBER_CONSTANT ) , true , true , this , ( - NUMBER_CONSTANT ) , new android.os.ParcelUuid ( uuid ) ) ; }
public static void run ( ) throws java.lang.Exception { art.Test913 . doTest () ; final java.util.concurrent.CountDownLatch cdl1 = new java.util.concurrent.CountDownLatch ( NUMBER_CONSTANT ) ; java.lang.Thread t = new java.lang.Thread () { @ java.lang.Override public void run () { try { art.Test913 . runFollowReferences () ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } cdl1 . countDown () ; } } ; t . start () ; cdl1 . await () ; }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests . assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
@ java.lang.Override protected com.android.ide.common.res2.ResourceFile createFileAndItems ( java.io.File sourceFolder , java.io.File file , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { com.android.ide.common.res2.ResourceSet.FolderData folderData = com.android.ide.common.res2.ResourceSet . getFolderData ( file . getParentFile () ) ; if ( folderData == null ) { return null ; } return com.android.ide.common.res2.ResourceSet . createResourceFile ( file , folderData , logger ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putInt ( int i , int x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putInt ( ix ( checkIndex ( i , SizeOf.INT ) ) , x ) ; return this ; }
public void testParse_testFailed () { java.lang.StringBuilder output = buildCommonResult () ; addStackTrace ( output ) ; addFailureCode ( output ) ; mMockListener . testRunStarted ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.RUN_NAME , NUMBER_CONSTANT ) ; mMockListener . testStarted ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.TEST_ID ) ; mMockListener . testFailed ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.TEST_ID , com.android.ddmlib.testrunner.InstrumentationResultParserTest.STACK_TRACE ) ; mMockListener . testEnded ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.TEST_ID , java.util.Collections.EMPTY_MAP ) ; mMockListener . testRunEnded ( NUMBER_CONSTANT , java.util.Collections.EMPTY_MAP ) ; injectAndVerifyTestString ( output . toString () ) ; }
private boolean nonSyncContentEquals ( java.lang.AbstractStringBuilder sb ) { char [] v2 = sb . getValue () ; int n = length () ; if ( n != ( sb . length () ) ) { return false ; } for ( int i = NUMBER_CONSTANT ; i < n ; i ++ ) { if ( ( charAt ( i ) ) != ( v2 [ i ] ) ) { return false ; } } return true ; }
@ javax.annotation.Nonnull public static com.android.jack.Version getVersion () { if ( ( com.android.jack.Jack.version ) == null ) { java.io.InputStream is = com.android.jack.Jack . class . getClassLoader () . getResourceAsStream ( com.android.jack.Jack.PROPERTIES_FILE ) ; if ( is != null ) { com.android.jack.Jack.version = new com.android.jack.Version ( is ) ; } else { com.android.jack.Jack.logger . log ( java.util.logging.Level.SEVERE , ( STRING_CONSTANT + ( com.android.jack.Jack.PROPERTIES_FILE ) ) ) ; throw new java.lang.AssertionError () ; } } assert ( com.android.jack.Jack.version ) != null ; return com.android.jack.Jack.version ; }
@ java.lang.Override public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( ( ( document ) != null ) && ( mDriver . isSuppressed ( this , issue , document ) ) ) { return; } super . report ( issue , location , message , data ) ; }
public void test_ConstructorLjava_lang_StringI ( ) throws java.io.IOException { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () ) ) { assertEquals ( STRING_CONSTANT , server . getLocalPort () , client . getPort () ) ; } java.net.ServerSocket ss = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket s = new java.net.Socket ( STRING_CONSTANT , ss . getLocalPort () ) ; ss . close () ; s . close () ; }
public void copySelectionToClipboard ( org.eclipse.swt.dnd.Clipboard clipboard ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for ( com.android.ddmuilib.logcat.LogCatMessage m : getSelectedLogCatMessages () ) { sb . append ( m . toString () ) ; sb . append ( CHAR_CONS ) ; } if ( ( sb . length () ) > NUMBER_CONSTANT ) { clipboard . setContents ( new java.lang.Object [] { sb . toString () } , new org.eclipse.swt.dnd.Transfer [] { org.eclipse.swt.dnd.TextTransfer . getInstance () } ) ; } }
private com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [] findViewLayoutAttributes ( java.lang.String viewFqcn , java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor > knownViews ) { for ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor viewDesc : knownViews ) { if ( viewFqcn . equals ( viewDesc . getFullClassName () ) ) { return viewDesc . getLayoutAttributes () ; } } return null ; }
private void removeInvalidServices ( java.util.Map < java.security.Provider.ServiceKey , java.security.Provider.Service > map ) { for ( java.util.Iterator < java.util.Map.Entry < java.security.Provider.ServiceKey , java.security.Provider.Service > > t = map . entrySet () . iterator () ; t . hasNext () ; ) { java.security.Provider.Service s = t . next () . getValue () ; if ( ( s . isValid () ) == false ) { t . remove () ; } } }
@ java.lang.Override public android.webkit.WebViewProvider createWebView ( android.webkit.WebView webView , android.webkit.WebView.PrivateAccess privateAccess ) { com.android.webview.chromium.WebViewChromium wvc = new com.android.webview.chromium.WebViewChromium ( this , webView , privateAccess ) ; synchronized ( mLock ) { if ( ( mWebViewsToStart ) != null ) { mWebViewsToStart . add ( new java.lang.ref.WeakReference < com.android.webview.chromium.WebViewChromium > ( wvc ) ) ; } } return wvc ; }
public static org.bouncycastle.crypto.params.ECPublicKeyParameters deserializeECPublicKey ( short [] ecPointFormats , org.bouncycastle.crypto.params.ECDomainParameters curve_params , byte [] encoding ) throws java.io.IOException { try { org.bouncycastle.math.ec.ECPoint Y = org.bouncycastle.crypto.tls.TlsECCUtils . deserializeECPoint ( ecPointFormats , curve_params . getCurve () , encoding ) ; return new org.bouncycastle.crypto.params.ECPublicKeyParameters ( Y , curve_params ) ; } catch ( java.lang.RuntimeException e ) { throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.illegal_parameter , e ) ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { if ( ( Build.VERSION.SDK_INT ) > NUMBER_CONSTANT ) { android.support.test.espresso.base.InputManagerEventInjectionStrategy strat = new android.support.test.espresso.base.InputManagerEventInjectionStrategy () ; strat . initialize () ; injector = new android.support.test.espresso.base.EventInjector ( strat ) ; } else { android.support.test.espresso.base.WindowManagerEventInjectionStrategy strat = new android.support.test.espresso.base.WindowManagerEventInjectionStrategy () ; strat . initialize () ; injector = new android.support.test.espresso.base.EventInjector ( strat ) ; } }
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.phone.CallFeaturesSetting.EVENT_CLIR_EXECUTED : handleSetCLIRMessage () ; break; case com.android.phone.CallFeaturesSetting.EVENT_CW_EXECUTED : handleSetCWMessage () ; break; case com.android.phone.CallFeaturesSetting.EVENT_CF_EXECUTED : handleSetCFMessage ( msg.arg1 , ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break; case com.android.phone.CallFeaturesSetting.EVENT_VOICEMAIL_CHANGED : handleSetVMMessage ( ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break; default: } }
public int getProfileConnectionState ( com.android.settingslib.bluetooth.LocalBluetoothProfile profile ) { if ( ( mProfileConnectionState . get ( profile ) ) == null ) { int state = profile . getConnectionStatus ( mDevice ) ; mProfileConnectionState . put ( profile , state ) ; } return mProfileConnectionState . get ( profile ) ; }
private boolean needsCoverage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) { if ( declaredType . isExternal () ) { return false ; } if ( declaredType instanceof com.android.jack.ir.ast.JDefinedInterface ) { return false ; } java.lang.String typeName = com.android.jack.coverage.CodeCoverageSelector.formatter . getName ( declaredType ) ; return filter . matches ( typeName ) ; }
public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration ( ) throws com.android.ims.ImsException { if ( ( ( mUt ) != null ) && ( mUt . isBinderAlive () ) ) { return mUt ; } checkAndThrowExceptionIfServiceUnavailable () ; try { com.android.ims.internal.IImsUt iUt = mImsServiceProxy . getUtInterface () ; if ( iUt == null ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , ImsReasonInfo.CODE_UT_NOT_SUPPORTED ) ; } mUt = new com.android.ims.ImsUt ( iUt ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mUt ; }
private static void assertNotificationType ( int expected , java.lang.String actualTag ) { org.junit.Assert . assertEquals ( ( ( STRING_CONSTANT + actualTag ) + STRING_CONSTANT ) , java.lang.Integer . toString ( expected ) , actualTag . substring ( ( ( actualTag . lastIndexOf ( CHAR_CONS ) ) + NUMBER_CONSTANT ) ) ) ; }
private static void addZipEntry ( java.util.zip.ZipOutputStream zipOutputStream , java.lang.String name , byte [] content ) throws java.io.IOException { java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry ( name ) ; zipOutputStream . putNextEntry ( zipEntry ) ; if ( ! ( zipEntry . isDirectory () ) ) { zipOutputStream . write ( content ) ; } }
private android.net.ConnectivityManager.NetworkCallback getCallback ( android.net.NetworkRequest req , java.lang.String name ) { final android.net.ConnectivityManager.NetworkCallback callback ; synchronized ( android.net.ConnectivityManager.sCallbacks ) { callback = android.net.ConnectivityManager.sCallbacks . get ( req ) ; } if ( callback == null ) { android.util.Log . w ( android.net.ConnectivityManager.CallbackHandler.TAG , ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) ) ; } return callback ; }
@ java.lang.Override public void onFrameAvailable ( android.graphics.SurfaceTexture surface ) { if ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.DBG ) { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , ( STRING_CONSTANT + surface ) ) ; } android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlCompositor.GlWindow w = mTopWindow ; if ( w != null ) { w . markTextureUpdated () ; requestUpdate ( w ) ; } else { android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; } }
public java.util.List < java.lang.String > getMatchingImsis ( com.android.server.wifi.IMSIParameter mccMnc ) { if ( mccMnc == null ) { return null ; } java.util.List < java.lang.String > imsis = new java.util.ArrayList <> () ; for ( int subId : mSubscriptionManager . getActiveSubscriptionIdList () ) { java.lang.String imsi = mTelephonyManager . getSubscriberId ( subId ) ; if ( ( imsi != null ) && ( mccMnc . matches ( imsi ) ) ) { imsis . add ( imsi ) ; } } return imsis . isEmpty () ? null : imsis ; }
private void processConnectionEvent ( int state , android.bluetooth.BluetoothDevice device ) { switch ( state ) { case HeadsetClientHalConstants.CONNECTION_STATE_DISCONNECTED : if ( mCurrentDevice . equals ( device ) ) { processAudioEvent ( HeadsetClientHalConstants.AUDIO_STATE_DISCONNECTED , device ) ; transitionTo ( mDisconnected ) ; } else { android.util.Log . e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( STRING_CONSTANT + device ) ) ; } break; default: android.util.Log . e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + state ) ) ; break; } }
public void testInstall_SkipLocalArchive ( ) throws java.lang.Exception { com.android.sdklib.internal.repository.MockEmptyPackage p = new com.android.sdklib.internal.repository.MockEmptyPackage ( STRING_CONSTANT ) ; com.android.sdklib.internal.repository.ArchiveReplacement ar = new com.android.sdklib.internal.repository.ArchiveReplacement ( p . getArchives () [ NUMBER_CONSTANT ] , null ) ; assertFalse ( mArchInst . install ( ar , mSdkRoot , false , mSdkMan , null , mMon ) ) ; assertTrue ( ( ( mMon . getCapturedLog () . indexOf ( STRING_CONSTANT ) ) != ( - NUMBER_CONSTANT ) ) ) ; }
public void run () { pleaseCancel . countDown () ; try { delay ( jsr166.LONG_DELAY_MS ) ; threadShouldThrow () ; } catch ( java.lang.InterruptedException success ) {} catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; } throw new java.lang.RuntimeException () ; }
@ java.lang.Override public void run ( com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig . get ( com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY ) ; try { writingTool . merge ( type ) ; } catch ( com.android.jack.backend.dex.DexWritingException e ) { com.android.jack.Jack . getSession () . getReporter () . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } }
private com.android.builder.core.VariantConfiguration getVariantWithManifestPackage ( final java.lang.String packageName ) { com.android.builder.core.VariantConfiguration variant = new com.android.builder.core.VariantConfiguration ( mDefaultConfig , new com.android.builder.core.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.core.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT , null ) { @ java.lang.Override public java.lang.String getPackageFromManifest () { return packageName ; } } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.core.MockSourceProvider ( STRING_CONSTANT ) , STRING_CONSTANT ) ; return variant ; }
static android.support.v8.renderscript.Element createUser ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element.DataType dt ) { android.support.v8.renderscript.Element.DataKind dk = android.support.v8.renderscript.Element.DataKind.USER ; boolean norm = false ; int vecSize = NUMBER_CONSTANT ; int id = rs . nElementCreate ( dt.mID , dk.mID , norm , vecSize ) ; return new android.support.v8.renderscript.Element ( id , rs , dt , dk , norm , vecSize ) ; }
private static int getNotificationDefaultFlags ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle handle ) { if ( handle == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; handle = com.android.dialer.app.calllog.VisualVoicemailNotifier . getFallbackAccount ( context ) ; if ( handle == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; return android.app.Notification.DEFAULT_ALL ; } } if ( context . getSystemService ( android.telephony.TelephonyManager . class ) . isVoicemailVibrationEnabled ( handle ) ) { return android.app.Notification.DEFAULT_VIBRATE ; } return NUMBER_CONSTANT ; }
private static boolean overridesIsValidFragment ( com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass ) { java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedMethod > resolvedMethods = resolvedClass . getMethods ( com.android.tools.lint.checks.PreferenceActivityDetector.IS_VALID_FRAGMENT , false ) ; for ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod resolvedMethod : resolvedMethods ) { if ( ( ( resolvedMethod . getArgumentCount () ) == NUMBER_CONSTANT ) && ( resolvedMethod . getArgumentType ( NUMBER_CONSTANT ) . getName () . equals ( com.android.tools.lint.client.api.JavaParser.TYPE_STRING ) ) ) { return true ; } } return false ; }
@ com.android.annotations.NonNull public java.util.Map < java.lang.String , java.lang.String > getInstrumentationRunnerArguments () { com.android.builder.core.VariantConfiguration config = this ; if ( mType . isForTesting () ) { config = getTestedConfig () ; com.google.common.base.Preconditions . checkState ( ( config != null ) ) ; } return config.mMergedFlavor . getTestInstrumentationRunnerArguments () ; }
public void testAddSuppressedWithSuppressionDisabled () { java.lang.Throwable throwable = new libcore.java.lang.ThrowableTest.SuppressionsThrowable ( STRING_CONSTANT , null , false , true ) ; assertSuppressed ( throwable ) ; throwable . addSuppressed ( new java.lang.Throwable () ) ; assertSuppressed ( throwable ) ; throwable . addSuppressed ( new java.lang.Throwable () ) ; assertSuppressed ( throwable ) ; }
@ java.lang.Override public java.text.AttributedCharacterIterator formatToCharacterIterator ( java.lang.Object obj ) { if ( ! ( obj instanceof java.lang.Number ) ) { throw new java.lang.IllegalArgumentException () ; } java.lang.Number number = ( ( java.lang.Number ) ( obj ) ) ; android.icu.text.CompactDecimalFormat.Amount amount = toAmount ( number . doubleValue () , null , null ) ; return super . formatToCharacterIterator ( amount . getQty () , amount . getUnit () ) ; }
@ java.lang.Override public void onAppStatusChanged ( android.bluetooth.BluetoothDevice pluggedDevice , boolean registered ) { com.googlecode.android_scripting.Log . d ( ( ( ( STRING_CONSTANT + pluggedDevice ) + STRING_CONSTANT ) + registered ) ) ; android.os.Bundle result = new android.os.Bundle () ; result . putBoolean ( STRING_CONSTANT , registered ) ; mEventFacade . postEvent ( STRING_CONSTANT , result ) ; }
void showInvisibleViews ( boolean show ) { if ( ( mShowInvisible ) == show ) { return; } mShowInvisible = show ; if ( show && ( ! ( mViewHierarchy . hasInvisibleParents () ) ) ) { return; } else if ( ( ! show ) && ( ! ( mViewHierarchy . hasExplodedParents () ) ) ) { return; } mLayoutEditor . recomputeLayout () ; }
private void addImportedResource ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVFile file , @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session , @ javax.annotation.Nonnull java.lang.String currentPath ) throws com.android.jack.resource.ResourceImportConflictException { com.android.sched.vfs.VPath path = new com.android.sched.vfs.VPath ( currentPath , com.android.jack.backend.jayce.JayceFileImporter.VPATH_SEPARATOR ) ; com.android.jack.ir.ast.Resource newResource = new com.android.jack.ir.ast.Resource ( path , file ) ; for ( com.android.jack.ir.ast.Resource existingResource : session . getResources () ) { if ( existingResource . getPath () . equals ( path ) ) { throw new com.android.jack.resource.ResourceImportConflictException ( existingResource , newResource . getLocation () ) ; } } session . addResource ( newResource ) ; }
public boolean hasNextBigInteger ( int radix ) { java.util.regex.Pattern integerPattern = getIntegerPattern ( radix ) ; boolean isBigIntegerValue = false ; if ( hasNext ( integerPattern ) ) { java.lang.String intString = matcher . group () ; intString = removeLocaleInfo ( intString , int . class ) ; try { cachedNextValue = new java.math.BigInteger ( intString , radix ) ; isBigIntegerValue = true ; } catch ( java.lang.NumberFormatException e ) { matchSuccessful = false ; } } return isBigIntegerValue ; }
java.util.logging.Logger demandLogger ( java.lang.String name , java.lang.String resourceBundleName , java.lang.Class < > caller ) { java.util.logging.Logger result = getLogger ( name ) ; if ( result == null ) { java.util.logging.Logger newLogger = new java.util.logging.Logger ( name , resourceBundleName , caller , this , false ) ; do { if ( addLogger ( newLogger ) ) { return newLogger ; } result = getLogger ( name ) ; } while ( result == null ) ; } return result ; }
@ javax.annotation.Nonnull private com.android.jack.dx.rop.annotation.AnnotationsList readAnnotationSetRefList ( @ javax.annotation.Nonnull com.android.jack.dx.io.DexBuffer dex , @ javax.annotation.Nonnegative int annotationSetRefListOffset ) { com.android.jack.dx.io.DexBuffer.Section annotationSetRefListIn = dex . open ( annotationSetRefListOffset ) ; int parameterCount = annotationSetRefListIn . readInt () ; com.android.jack.dx.rop.annotation.AnnotationsList parameterAnnotationList = new com.android.jack.dx.rop.annotation.AnnotationsList ( parameterCount ) ; for ( int paramIdx = NUMBER_CONSTANT ; paramIdx < parameterCount ; paramIdx ++ ) { com.android.jack.dx.rop.annotation.Annotations annotations = readAnnotationSet ( dex , annotationSetRefListIn . readInt () ) ; annotations . setImmutable () ; parameterAnnotationList . set ( paramIdx , annotations ) ; } return parameterAnnotationList ; }
private void delay ( long duration ) { if ( duration > NUMBER_CONSTANT ) { long bedtime = duration + ( android.os.SystemClock . uptimeMillis () ) ; do { try { this . wait ( duration ) ; } catch ( java.lang.InterruptedException e ) {} if ( mDone ) { break; } duration = bedtime - ( android.os.SystemClock . uptimeMillis () ) ; } while ( duration > NUMBER_CONSTANT ) ; } }
public static void permuteArguments_boxingCallee ( boolean a , java.lang.Integer b ) { if ( a && ( ( b . intValue () ) == NUMBER_CONSTANT ) ) { return; } java.lang.System.out . println ( ( ( ( STRING_CONSTANT + a ) + STRING_CONSTANT ) + b ) ) ; }
public void testStageInstallWithErrorCode_withBadlyFormedDistroVersion ( ) throws java.lang.Exception { com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( NUMBER_CONSTANT , NUMBER_CONSTANT , libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; byte [] invalidFormatVersionBytes = validDistroVersion . toBytes () ; invalidFormatVersionBytes [ NUMBER_CONSTANT ] = CHAR_CONS ; com.android.timezone.distro.TimeZoneDistro distro = createTimeZoneDistroWithVersionBytes ( invalidFormatVersionBytes ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer . stageInstallWithErrorCode ( distro ) ) ; assertNoDistroOperationStaged () ; assertNoInstalledDistro () ; }
private android.graphics.drawable.Drawable getConnectionIcon () { android.telecom.StatusHints statusHints = mPrimary . getTelecommCall () . getDetails () . getStatusHints () ; if ( ( statusHints != null ) && ( ( statusHints . getIconResId () ) != NUMBER_CONSTANT ) ) { android.graphics.drawable.Drawable icon = statusHints . getIcon ( mContext ) ; if ( icon != null ) { return icon ; } } return null ; }
public static com.android.manifmerger.XmlNode.NodeName fromXmlName ( java.lang.String name ) { return name . contains ( STRING_CONSTANT ) ? new com.android.manifmerger.XmlNode.NamespaceAwareName ( com.android.SdkConstants.ANDROID_URI , name . substring ( NUMBER_CONSTANT , name . indexOf ( CHAR_CONS ) ) , name . substring ( ( ( name . indexOf ( CHAR_CONS ) ) + NUMBER_CONSTANT ) ) ) : new com.android.manifmerger.XmlNode.Name ( name ) ; }
void removeEQ ( java.lang.Object o ) { final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock . lock () ; try { java.lang.Object [] array = queue ; for ( int i = NUMBER_CONSTANT , n = size ; i < n ; i ++ ) { if ( o == ( array [ i ] ) ) { removeAt ( i ) ; break; } } } finally { lock . unlock () ; } }
public int receive ( byte [] buf , int off , int len , int waitMillis ) throws java.io.IOException { try { return recordLayer . receive ( buf , off , len , waitMillis ) ; } catch ( org.bouncycastle.crypto.tls.TlsFatalAlert fatalAlert ) { recordLayer . fail ( fatalAlert . getAlertDescription () ) ; throw fatalAlert ; } catch ( java.io.IOException e ) { recordLayer . fail ( AlertDescription.internal_error ) ; throw e ; } catch ( java.lang.RuntimeException e ) { recordLayer . fail ( AlertDescription.internal_error ) ; throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.internal_error , e ) ; } }
public int getAndroidCarrierIdForSubscription () { try { com.android.internal.telephony.ITelephony service = getITelephony () ; if ( service != null ) { return service . getSubscriptionCarrierId ( getSubId () ) ; } } catch ( android.os.RemoteException ex ) { ex . rethrowAsRuntimeException () ; } return android.telephony.TelephonyManager.UNKNOWN_CARRIER_ID ; }
private void writeSuppressInfo ( ) throws java.io.IOException { mWriter . write ( STRING_CONSTANT ) ; mWriter . write ( STRING_CONSTANT ) ; mWriter . write ( STRING_CONSTANT ) ; mWriter . write ( STRING_CONSTANT ) ; mWriter . write ( STRING_CONSTANT ) ; appendEscapedText ( com.android.tools.lint.Main . getSuppressHelp () ) ; mWriter . write ( CHAR_CONS ) ; }
private java.lang.StringBuffer subformat ( int number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( currencySignCount ) == ( com.ibm.icu.text.DecimalFormat.CURRENCY_SIGN_COUNT_IN_PLURAL_FORMAT ) ) { return subformat ( currencyPluralInfo . select ( getFixedDecimal ( number ) ) , result , fieldPosition , isNegative , isInteger , parseAttr ) ; } else { return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; } }
@ java.lang.Override public void checkCall ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodInsnNode call ) { java.lang.String owner = call.owner ; if ( ( owner . equals ( STRING_CONSTANT ) ) && ( ( context . getProject () . getMinSdk () ) >= NUMBER_CONSTANT ) ) { java.lang.String message = java.lang.String . format ( ( STRING_CONSTANT + STRING_CONSTANT ) , call.name ) ; context . report ( com.android.tools.lint.checks.MathDetector.ISSUE , method , call , context . getLocation ( call ) , message , null ) ; } }
public void test_UTF_16BE ( ) throws java.lang.Exception { java.nio.charset.Charset cs = java.nio.charset.Charset . forName ( STRING_CONSTANT ) ; assertEncodes ( cs , STRING_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDecodes ( cs , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDecodes ( cs , STRING_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testWatchdogDoesNotFailForObjectsThatAreNearTheDeadline ( ) throws java.lang.Exception { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch ( NUMBER_CONSTANT ) ; createSlowFinalizer ( NUMBER_CONSTANT , latch ) ; createSlowFinalizer ( NUMBER_CONSTANT , latch ) ; createSlowFinalizer ( NUMBER_CONSTANT , latch ) ; libcore.java.lang.ref.FinalizationTester . induceFinalization () ; latch . await () ; }
@ java.lang.Override public int getDiscoverableTimeout () { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return NUMBER_CONSTANT ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return NUMBER_CONSTANT ; } return service . getDiscoverableTimeout () ; }
@ java.lang.Override public boolean visitComment ( lombok.ast.Comment node ) { java.lang.String contents = node . astContent () ; com.android.tools.lint.checks.CommentDetector . checkComment ( mContext , node , contents , node . getPosition () . getStart () , NUMBER_CONSTANT , contents . length () ) ; return super . visitComment ( node ) ; }
@ java.lang.Override public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( method . isNative () ) || ( method . isAbstract () ) ) { return; } com.android.jack.ir.ast.JSession session = com.android.jack.Jack . getSession () ; com.android.jack.statistics.BlockCountMarker bcm = session . getMarker ( com.android.jack.statistics.BlockCountMarker . class ) ; if ( bcm == null ) { bcm = new com.android.jack.statistics.BlockCountMarker () ; session . addMarker ( bcm ) ; } com.android.jack.statistics.BlockStatistics.BlockStatisticsVisitor statistics = new com.android.jack.statistics.BlockStatistics.BlockStatisticsVisitor ( bcm ) ; statistics . accept ( method ) ; }
@ javax.annotation.Nonnull public java.io.InputStream getInputStream () { if ( ( in ) != null ) { return new com.android.sched.util.stream.UncloseableInputStream ( in ) ; } else { clearRemover () ; try { return new java.io.FileInputStream ( file ) ; } catch ( java.io.FileNotFoundException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } } }
@ java.lang.Override public java.io.IOException call ( ) throws java.lang.Exception { try { if ( ! serverClientMode ) { server . setSoTimeout ( ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) ; } server . setUseClientMode ( serverClientMode ) ; server . startHandshake () ; return null ; } catch ( javax.net.ssl.SSLHandshakeException e ) { return e ; } catch ( java.net.SocketTimeoutException e ) { return e ; } }
private static java.util.List < java.lang.String > getStringList ( java.lang.StringBuilder stringAccumulator ) { java.util.List < java.lang.String > filteredStrings = new java.util.ArrayList < java.lang.String > () ; for ( java.lang.String s : com.android.sdklib.devices.DeviceParser.DeviceHandler.sSpaceSplitter . split ( stringAccumulator ) ) { if ( ( s != null ) && ( ! ( s . isEmpty () ) ) ) { filteredStrings . add ( s . trim () ) ; } } return filteredStrings ; }
private void check ( java.lang.String [] [] tests , java.util.Set < java.lang.String > keys , android.icu.impl.ValidIdentifiers.Datasubtype . . . datasubtypes ) { int count = NUMBER_CONSTANT ; android.icu.impl.locale.LocaleValidityChecker localeValidityChecker = new android.icu.impl.locale.LocaleValidityChecker ( datasubtypes ) ; for ( java.lang.String [] test : tests ) { check ( ( ++ count ) , localeValidityChecker , test [ NUMBER_CONSTANT ] , test [ NUMBER_CONSTANT ] , keys ) ; } }
synchronized void recordImplicitRejection ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement implicitAttributeOwner ) { java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = new com.android.manifmerger.Actions.AttributeRecord ( Actions.ActionType.REJECTED , new com.android.manifmerger.Actions.ActionLocation ( implicitAttributeOwner . getDocument () . getSourceLocation () , implicitAttributeOwner . getPosition () ) , attribute . getId () , null , AttributeOperationType.REPLACE ) ; attributeRecords . add ( attributeRecord ) ; }
public void testSendMessageUCS2 ( ) throws java.lang.Exception { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_CB_RECEIVED_ACTION ) ; byte [] pdu = encodeCellBroadcast ( NUMBER_CONSTANT , NUMBER_CONSTANT , com.android.cellbroadcastreceiver.DialogSmsDisplayTests.DCS_16BIT_UCS2 , STRING_CONSTANT ) ; intent . putExtra ( STRING_CONSTANT , createFromPdu ( pdu ) ) ; mContext . sendOrderedBroadcast ( intent , STRING_CONSTANT ) ; }
android.view.animation.Animation loadAnimation ( int userId , android.view.WindowManager.LayoutParams lp , int animAttr ) { int anim = NUMBER_CONSTANT ; android.content.Context context = mContext ; if ( animAttr >= NUMBER_CONSTANT ) { com.android.server.AttributeCache.Entry ent = getCachedAnimations ( userId , lp ) ; if ( ent != null ) { context = ent.context ; anim = ent.array . getResourceId ( animAttr , NUMBER_CONSTANT ) ; } } if ( anim != NUMBER_CONSTANT ) { return android.view.animation.AnimationUtils . loadAnimation ( context , anim ) ; } return null ; }
@ java.lang.Override public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.DBG ) { android.util.Log . d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , ( STRING_CONSTANT + intent ) ) ; } if ( ( intent != null ) && ( intent . getBooleanExtra ( HeadsetClientService.HFP_CLIENT_STOP_TAG , false ) ) ) { stopSelf () ; return NUMBER_CONSTANT ; } else { android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED ) ; filter . addAction ( BluetoothHeadsetClient.ACTION_CALL_CHANGED ) ; registerReceiver ( mBroadcastReceiver , filter ) ; return START_STICKY ; } }
@ java.lang.Override public void writeToParcel ( android.os.Parcel dest , int flags ) { dest . writeInt ( mMasInstanceId ) ; dest . writeInt ( mL2capPsm ) ; dest . writeInt ( mRfcommChannelNumber ) ; dest . writeInt ( mProfileVersion ) ; dest . writeInt ( mSupportedFeatures ) ; dest . writeInt ( mSupportedMessageTypes ) ; dest . writeString ( mServiceName ) ; }
private void removeMulticasterLocked ( int i , int uid ) { com.android.server.WifiService.Multicaster removed = mMulticasters . remove ( i ) ; if ( removed != null ) { removed . unlinkDeathRecipient () ; } if ( ( mMulticasters . size () ) == NUMBER_CONSTANT ) { mWifiStateMachine . startFilteringMulticastV4Packets () ; } final long ident = android.os.Binder . clearCallingIdentity () ; try { mBatteryStats . noteWifiMulticastDisabled ( uid ) ; } catch ( android.os.RemoteException e ) {} finally { android.os.Binder . restoreCallingIdentity ( ident ) ; } }
public static void main ( java.lang.String [] args ) { junit.textui.TestRunner tr = new junit.textui.TestRunner () ; junit.framework.TestResult result = tr . doRun ( com.android.monkeyrunner.AllTests . suite ( com.android.monkeyrunner.JythonUtilsTest . class , com.android.monkeyrunner.MonkeyRunnerOptionsTest . class ) ) ; if ( result . wasSuccessful () ) { java.lang.System . exit ( NUMBER_CONSTANT ) ; } else { java.lang.System . exit ( NUMBER_CONSTANT ) ; } }
private void writeCodes ( com.android.jack.dx.util.AnnotatedOutput out ) { com.android.jack.dx.dex.code.DalvInsnList insns = code . getInsns () ; try { insns . writeTo ( out ) ; } catch ( java.lang.RuntimeException ex ) { throw com.android.jack.dx.util.ExceptionWithContext . withContext ( ex , ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( ref . toHuman () ) ) ) ; } }
@ java.lang.Override protected int compareTo0 ( com.android.jack.dx.rop.cst.Constant other ) { int cmp = super . compareTo0 ( other ) ; if ( cmp != NUMBER_CONSTANT ) { return cmp ; } com.android.jack.dx.rop.cst.CstFieldRef otherField = ( ( com.android.jack.dx.rop.cst.CstFieldRef ) ( other ) ) ; return type . compareTo ( otherField.type ) ; }
@ com.android.annotations.Nullable @ java.lang.Override protected org.w3c.dom.Node createItemNode ( @ com.android.annotations.NonNull org.w3c.dom.Document document , @ com.android.annotations.NonNull com.android.builder.internal.compiler.DexKey itemKey , @ com.android.annotations.NonNull com.android.builder.internal.compiler.BaseItem item ) throws java.io.IOException { org.w3c.dom.Node itemNode = super . createItemNode ( document , itemKey , item ) ; if ( itemNode != null ) { org.w3c.dom.Attr attr = document . createAttribute ( com.android.builder.internal.compiler.PreDexCache.ATTR_JUMBO_MODE ) ; attr . setValue ( java.lang.Boolean . toString ( itemKey . isJumboMode () ) ) ; itemNode . getAttributes () . setNamedItem ( attr ) ; } return itemNode ; }
public static void pullFromHost ( java.io.File src , java.io.File dest ) { try { com.android.tradefed.util.FileUtil . recursiveCopy ( src , dest ) ; com.android.tradefed.util.FileUtil . recursiveDelete ( src ) ; } catch ( java.io.IOException e ) { com.android.tradefed.log.LogUtil.CLog . e ( STRING_CONSTANT ) ; com.android.tradefed.log.LogUtil.CLog . e ( e ) ; } }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testGetUserSelectedOutgoingPhoneAccount ( ) throws android.os.RemoteException { org.mockito.Mockito . when ( mFakePhoneAccountRegistrar . getUserSelectedOutgoingPhoneAccount ( org.mockito.Matchers . any ( android.os.UserHandle . class ) ) ) . thenReturn ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ; org.mockito.Mockito . when ( mFakePhoneAccountRegistrar . getPhoneAccountUnchecked ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ) . thenReturn ( makeMultiUserPhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) . build () ) ; android.telecom.PhoneAccountHandle returnedHandle = mTSIBinder . getUserSelectedOutgoingPhoneAccount () ; org.junit.Assert . assertEquals ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 , returnedHandle ) ; }
public void testStartLocalOnlyHotspotSuccess () { if ( ! ( mWifiManager . isPortableHotspotSupported () ) ) { return; } boolean wifiEnabled = mWifiManager . isWifiEnabled () ; android.net.wifi.cts.WifiManagerTest.TestLocalOnlyHotspotCallback callback = startLocalOnlyHotspot () ; assertFalse ( mWifiManager . isWifiEnabled () ) ; stopLocalOnlyHotspot ( callback , wifiEnabled ) ; assertEquals ( wifiEnabled , mWifiManager . isWifiEnabled () ) ; }
private java.lang.String getRawMinSdkVersion () { com.google.common.base.Optional < com.android.manifmerger.XmlElement > usesSdk = getByTypeAndKey ( ManifestModel.NodeTypes.USES_SDK , null ) ; if ( usesSdk . isPresent () ) { com.google.common.base.Optional < com.android.manifmerger.XmlAttribute > minSdkVersion = usesSdk . get () . getAttribute ( com.android.manifmerger.XmlNode . fromXmlName ( STRING_CONSTANT ) ) ; if ( minSdkVersion . isPresent () ) { return minSdkVersion . get () . getValue () ; } } return com.android.manifmerger.XmlDocument.DEFAULT_SDK_VERSION ; }
private void updatePreferences () { if ( ( mPinDialog ) != null ) { mPinDialog . setEnabled ( ( ( mPhone ) != null ) ) ; } if ( ( mPinToggle ) != null ) { mPinToggle . setEnabled ( ( ( mPhone ) != null ) ) ; if ( ( mPhone ) != null ) { mPinToggle . setChecked ( mPhone . getIccCard () . getIccLockEnabled () ) ; } } }
public long createAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote () ) ) return - NUMBER_CONSTANT ; try { return mInstalld . createAppData ( uuid , packageName , userId , flags , appId , seInfo , targetSdkVersion ) ; } catch ( java.lang.Exception e ) { throw com.android.server.pm.Installer.InstallerException . from ( e ) ; } }
public void addSignalCallback ( com.android.systemui.statusbar.policy.SignalCallback cb ) { cb . setSubs ( mCurrentSubscriptions ) ; cb . setIsAirplaneMode ( new com.android.systemui.statusbar.policy.IconState ( mAirplaneMode , TelephonyIcons.FLIGHT_MODE_ICON , R.string.accessibility_airplane_mode , mContext ) ) ; cb . setNoSims ( mHasNoSims ) ; mWifiSignalController . notifyListeners ( cb ) ; mEthernetSignalController . notifyListeners ( cb ) ; for ( com.android.systemui.statusbar.policy.MobileSignalController mobileSignalController : mMobileSignalControllers . values () ) { mobileSignalController . notifyListeners ( cb ) ; } mCallbackHandler . setListening ( cb , true ) ; }
@ java.lang.Override public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSynchronizedBlock jSyncBock ) { assert ( lockClass ) != null ; if ( ! ( jSyncBock . getLockExpr () . getType () . isSameType ( lockClass ) ) ) { return; } tr . append ( new com.android.jack.transformations.request.PrependStatement ( jSyncBock . getSynchronizedBlock () , makeRequestCall ( jSyncBock . getSourceInfo () ) ) ) ; com.android.jack.ir.ast.JTryStatement tryStmt = makeTryStatement ( jSyncBock . getSourceInfo () , jSyncBock ) ; tr . append ( new com.android.jack.transformations.request.Replace ( jSyncBock , tryStmt ) ) ; }
void resize ( int newCapacity ) { java.util.HashMap.HashMapEntry [] oldTable = table ; int oldCapacity = oldTable.length ; if ( oldCapacity == ( java.util.HashMap.MAXIMUM_CAPACITY ) ) { threshold = java.lang.Integer.MAX_VALUE ; return; } java.util.HashMap.HashMapEntry [] newTable = new java.util.HashMap.HashMapEntry [ newCapacity ] ; transfer ( newTable ) ; table = newTable ; threshold = ( ( int ) ( java.lang.Math . min ( ( newCapacity * ( loadFactor ) ) , ( ( java.util.HashMap.MAXIMUM_CAPACITY ) + NUMBER_CONSTANT ) ) ) ) ; }
public static void run ( ) throws java.lang.Exception { java.lang.Thread t = new java.lang.Thread ( STRING_CONSTANT ) { @ java.lang.Override public void run () { try { art.Test924 . doTest () ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } } ; t . start () ; t . join () ; }
private void extractSharpImage ( java.lang.String name ) { android.graphics.Bitmap mBitmap = android.graphics.Bitmap . createBitmap ( buffers.inputImage . getWidth () , buffers.inputImage . getHeight () , Bitmap.Config.ARGB_8888 ) ; android.renderscript.Allocation mAllocation = android.renderscript.Allocation . createFromBitmap ( renderScript , mBitmap ) ; scriptC . forEach_PackSharpImage ( mAllocation ) ; mAllocation . copyTo ( mBitmap ) ; mAllocation . destroy () ; android.renderscript.cts.refocus.MediaStoreSaver . savePNG ( mBitmap , STRING_CONSTANT , name , renderScript . getApplicationContext () ) ; mAllocation . destroy () ; }
public int getBit ( int i ) { if ( i < NUMBER_CONSTANT ) { throw new java.lang.RuntimeException () ; } if ( i > ( ( len ) - NUMBER_CONSTANT ) ) { return NUMBER_CONSTANT ; } return ( ( value [ ( i > > > NUMBER_CONSTANT ) ] ) & ( org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial.bitMask [ ( i & NUMBER_CONSTANT ) ] ) ) != NUMBER_CONSTANT ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
@ java.lang.Override public void onDestroy () { super . onDestroy () ; stopAdvertise () ; if ( ( mGattServer ) == null ) { return; } if ( ( mDevice ) != null ) mGattServer . cancelConnection ( mDevice ) ; mGattServer . close () ; }
@ org.junit.BeforeClass public static void setup ( ) throws java.lang.Exception { com.android.jack.toolchain.ToolchainTest.CORE_SOURCELIST = com.android.jack.TestTools . getTargetLibSourcelist ( STRING_CONSTANT ) ; com.android.jack.toolchain.ToolchainTest.BOUNCY_SOURCELIST = com.android.jack.TestTools . getTargetLibSourcelist ( STRING_CONSTANT ) ; com.android.jack.toolchain.ToolchainTest.JUNIT_SOURCELIST = com.android.jack.TestTools . getHostLibSourcelist ( STRING_CONSTANT ) ; com.android.jack.toolchain.ToolchainTest.corePath = com.android.jack.test.toolchain.AbstractTestTools . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain . class ) ; toolchain . setSourceLevel ( SourceLevel.JAVA_7 ) ; toolchain . srcToLib ( com.android.jack.toolchain.ToolchainTest.corePath , true , com.android.jack.toolchain.ToolchainTest.CORE_SOURCELIST ) ; }
@ java.lang.Override public boolean processMessage ( android.os.Message message ) { logStateAndMessage ( message , this ) ; switch ( message.what ) { case com.android.server.wifi.WifiStateMachine.CMD_DISABLE_P2P_RSP : transitionTo ( mTransitionToState ) ; break; case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT : case com.android.server.wifi.WifiStateMachine.CMD_START_SUPPLICANT : case com.android.server.wifi.WifiStateMachine.CMD_STOP_SUPPLICANT : case com.android.server.wifi.WifiStateMachine.CMD_START_AP : case com.android.server.wifi.WifiStateMachine.CMD_STOP_AP : case com.android.server.wifi.WifiStateMachine.CMD_SET_OPERATIONAL_MODE : case com.android.server.wifi.WifiStateMachine.CMD_START_SCAN : case com.android.server.wifi.WifiStateMachine.CMD_DISCONNECT : case com.android.server.wifi.WifiStateMachine.CMD_REASSOCIATE : case com.android.server.wifi.WifiStateMachine.CMD_RECONNECT : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break; default: return NOT_HANDLED ; } return HANDLED ; }
private void removePackageFromBrowseList ( java.lang.String packageName ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . d ( com.android.bluetooth.avrcp.Avrcp.TAG , ( STRING_CONSTANT + packageName ) ) ; synchronized ( mBrowsePlayerInfoList ) { int browseInfoID = getBrowseId ( packageName ) ; if ( browseInfoID != ( - NUMBER_CONSTANT ) ) { mBrowsePlayerInfoList . remove ( browseInfoID ) ; } } }
public void test_lockJJZ_Long_MAX_VALUE ( ) throws java.lang.Exception { final long POSITION = NUMBER_CONSTANT ; final long SIZE = java.lang.Long.MAX_VALUE ; fileLock = readOnlyFileChannel . lock ( POSITION , SIZE , true ) ; assertTrue ( fileLock . isValid () ) ; assertTrue ( fileLock . isShared () ) ; assertEquals ( POSITION , fileLock . position () ) ; assertEquals ( SIZE , fileLock . size () ) ; assertSame ( readOnlyFileChannel , fileLock . channel () ) ; }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testLogPhoneAccountId () { org.mockito.Mockito . when ( mMockPhoneAccountRegistrar . getPhoneAccountUnchecked ( org.mockito.Matchers . any ( android.telecom.PhoneAccountHandle . class ) ) ) . thenReturn ( makeFakePhoneAccount ( mDefaultAccountHandle , com.android.server.telecom.tests.CallLogManagerTest.CURRENT_USER_ID ) ) ; com.android.server.telecom.Call fakeCall = makeFakeCall ( DisconnectCause.OTHER , false , true , NUMBER_CONSTANT , NUMBER_CONSTANT , com.android.server.telecom.tests.CallLogManagerTest.TEL_PHONEHANDLE , mDefaultAccountHandle , com.android.server.telecom.tests.CallLogManagerTest.NO_VIDEO_STATE , com.android.server.telecom.tests.CallLogManagerTest.POST_DIAL_STRING , com.android.server.telecom.tests.CallLogManagerTest.VIA_NUMBER_STRING , android.os.UserHandle . of ( com.android.server.telecom.tests.CallLogManagerTest.CURRENT_USER_ID ) ) ; mCallLogManager . onCallStateChanged ( fakeCall , CallState.ACTIVE , CallState.DISCONNECTED ) ; android.content.ContentValues insertedValues = verifyInsertionWithCapture ( com.android.server.telecom.tests.CallLogManagerTest.CURRENT_USER_ID ) ; org.junit.Assert . assertEquals ( insertedValues . getAsString ( CallLog.Calls.PHONE_ACCOUNT_ID ) , com.android.server.telecom.tests.CallLogManagerTest.TEST_PHONE_ACCOUNT_ID ) ; }
private void handleStartAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { com.android.bluetooth.Utils . enforceAdminPermission ( mService ) ; int advertiserId = client.advertiserId ; if ( mAdvertiseClients . contains ( client ) ) { postCallback ( advertiserId , AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED ) ; return; } mAdvertiseNative . startAdverising ( client ) ; mAdvertiseClients . add ( client ) ; }
public void testMultiFilterWithNoMatch () { java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getOutput ( NUMBER_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getOutput ( NUMBER_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getOutput ( NUMBER_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertNull ( result ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; java.lang.String tmp = java.lang.System . getProperty ( STRING_CONSTANT ) ; cacheDir = new java.io.File ( tmp , ( STRING_CONSTANT + ( java.util.UUID . randomUUID () ) ) ) ; cacheDir . mkdirs () ; android.cts.util.FileUtils . setPermissions ( cacheDir . getPath () , NUMBER_CONSTANT ) ; }
public org.bouncycastle.math.ec.SimpleBigDecimal adjustScale ( int newScale ) { if ( newScale < NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } if ( newScale == ( scale ) ) { return this ; } return new org.bouncycastle.math.ec.SimpleBigDecimal ( bigInt . shiftLeft ( ( newScale - ( scale ) ) ) , newScale ) ; }
private static com.android.internal.telephony.NitzData createValidNitzDataForTime ( android.icu.util.TimeZone timeZone , long timeMillis , boolean includeEmulatorTimeZone ) { int [] offsets = new int [ NUMBER_CONSTANT ] ; timeZone . getOffset ( timeMillis , false , offsets ) ; int zoneOffsetMillis = offsets [ NUMBER_CONSTANT ] ; int dstOffsetMillis = offsets [ NUMBER_CONSTANT ] ; java.util.TimeZone emulatorTimeZone = null ; if ( includeEmulatorTimeZone ) { emulatorTimeZone = java.util.TimeZone . getTimeZone ( timeZone . getID () ) ; } return com.android.internal.telephony.NitzData . createForTests ( zoneOffsetMillis , dstOffsetMillis , timeMillis , emulatorTimeZone ) ; }
@ org.junit.runners.Parameterized.Parameters ( name = STRING_CONSTANT ) public static java.lang.Iterable < java.lang.Object [] > data ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.util.List < java.lang.Object [] > params = new java.util.ArrayList <> () ; com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser () ; java.util.List < com.android.graphics.benchmark.ApkInfo > apks = parser . parse ( new java.io.File ( com.android.graphics.benchmark.ApkInfo.APK_LIST_LOCATION ) ) ; for ( com.android.graphics.benchmark.ApkInfo apk : apks ) { params . add ( new java.lang.Object [] { apk . getName () , apk } ) ; } return params ; }
@ java.lang.Override public boolean isIdleForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return false ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return ( phone . getState () ) == ( PhoneConstants.State.IDLE ) ; } else { return false ; } }
private java.util.List < com.intellij.execution.impl.BeforeRunTask > getTemplateBeforeRunTasks ( @ org.jetbrains.annotations.NotNull com.intellij.execution.impl.RunConfiguration settings ) { final com.intellij.execution.impl.RunnerAndConfigurationSettings template = getConfigurationTemplate ( settings . getFactory () ) ; final java.util.List < com.intellij.execution.impl.BeforeRunTask > templateTasks = myConfigurationToBeforeTasksMap . get ( template . getConfiguration () ) ; return templateTasks == null ? getHardcodedBeforeRunTasks ( settings ) : com.intellij.execution.impl.RunManagerImpl . getCopies ( templateTasks ) ; }
private static void assertNonDaylightOffset ( int expectedOffsetSeconds , long epochSeconds , java.util.TimeZone tz ) { assertEquals ( expectedOffsetSeconds , ( ( tz . getOffset ( ( epochSeconds * NUMBER_CONSTANT ) ) ) / NUMBER_CONSTANT ) ) ; assertFalse ( tz . inDaylightTime ( new java.util.Date ( ( epochSeconds * NUMBER_CONSTANT ) ) ) ) ; }
@ javax.annotation.Nonnull private static java.lang.AssertionError createError ( @ javax.annotation.Nonnull java.lang.Object checked , @ javax.annotation.Nonnull java.lang.reflect.Field f ) { java.lang.String message = ( ( ( ( STRING_CONSTANT + ( checked . toString () ) ) + STRING_CONSTANT ) + ( checked . getClass () . getName () ) ) + STRING_CONSTANT ) + ( f . getName () ) ; return new java.lang.AssertionError ( message ) ; }
@ org.junit.Test public void installAppAndLaunch ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework . getInstrumentation () ; com.android.devtools.systemimage.uitest.utils.AppLauncher . launch ( instrumentation , STRING_CONSTANT ) ; assertTrue ( testFramework . getDevice () . findObject ( new android.support.test.uiautomator.UiSelector () . resourceId ( Res.APP_IMAGE_VIEW_ID ) ) . exists () ) ; }
public static com.android.server.WindowManagerService main ( android.content.Context context , com.android.server.PowerManagerService pm , boolean haveInputMethods ) { com.android.server.WindowManagerService.WMThread thr = new com.android.server.WindowManagerService.WMThread ( context , pm , haveInputMethods ) ; thr . start () ; synchronized ( thr ) { while ( ( thr.mService ) == null ) { try { thr . wait () ; } catch ( java.lang.InterruptedException e ) {} } return thr.mService ; } }
public boolean addLogger ( java.util.logging.Logger logger ) { final java.lang.String name = logger . getName () ; if ( name == null ) { throw new java.lang.NullPointerException () ; } drainLoggerRefQueueBounded () ; java.util.logging.LogManager.LoggerContext cx = getUserContext () ; if ( cx . addLocalLogger ( logger , this ) ) { loadLoggerHandlers ( logger , name , ( name + STRING_CONSTANT ) ) ; return true ; } else { return false ; } }
private static void removeUser ( java.util.prefs.Preferences prefs , java.lang.String user ) { java.lang.String allUsersString = prefs . get ( com.google.gct.login.GoogleLoginPrefs.USERS , STRING_CONSTANT ) ; java.util.List < java.lang.String > allUsers = new java.util.ArrayList < java.lang.String > () ; for ( java.lang.String scope : allUsersString . split ( com.google.gct.login.GoogleLoginPrefs.DELIMITER ) ) { allUsers . add ( scope ) ; } allUsers . remove ( user ) ; com.google.common.base.Joiner joiner = com.google.common.base.Joiner . on ( com.google.gct.login.GoogleLoginPrefs.DELIMITER ) ; prefs . put ( com.google.gct.login.GoogleLoginPrefs.USERS , joiner . join ( allUsers ) ) ; }
private void setUsbTethering ( boolean enabled ) { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; mUsbTether . setChecked ( false ) ; if ( ( cm . setUsbTethering ( enabled ) ) != ( android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ) { mUsbTether . setSummary ( R.string.usb_tethering_errored_subtext ) ; return; } mUsbTether . setSummary ( STRING_CONSTANT ) ; }
@ java.lang.Override public void onEvent ( android.media.MediaDrm md , byte [] sessionId , int event , int extra , byte [] data ) { synchronized ( mLock ) { android.util.Log . d ( android.media.cts.MediaDrmMockTest.TAG , STRING_CONSTANT ) ; assertTrue ( ( md == ( mMediaDrm ) ) ) ; assertTrue ( ( event == NUMBER_CONSTANT ) ) ; assertTrue ( ( sessionId == null ) ) ; assertTrue ( ( data == null ) ) ; mGotEvent = true ; mLock . notify () ; } }
private void helpDestroy () { boolean shouldDestroy = false ; synchronized ( this ) { if ( ! ( mDestroyed ) ) { shouldDestroy = true ; mDestroyed = true ; } } if ( shouldDestroy ) { java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock rlock = mRS.mRWLock . readLock () ; rlock . lock () ; if ( ( mRS . isAlive () ) && ( ( mID ) != NUMBER_CONSTANT ) ) { mRS . nObjDestroy ( mID ) ; } rlock . unlock () ; mRS = null ; mID = NUMBER_CONSTANT ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public < T > T [] toArray ( T [] a ) { final int size = this . size ; if ( ( a.length ) < size ) return ( ( T [] ) ( java.util.Arrays . copyOf ( queue , size , a . getClass () ) ) ) ; java.lang.System . arraycopy ( queue , NUMBER_CONSTANT , a , NUMBER_CONSTANT , size ) ; if ( ( a.length ) > size ) a [ size ] = null ; return a ; }
public boolean setBluetoothEnabled ( boolean enabled ) { boolean success = ( enabled ) ? mAdapter . enable () : mAdapter . disable () ; if ( success ) { setBluetoothStateInt ( ( enabled ? android.bluetooth.BluetoothAdapter.STATE_TURNING_ON : android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF ) ) ; } else { if ( Utils.V ) { android.util.Log . v ( com.android.settingslib.bluetooth.LocalBluetoothAdapter.TAG , ( ( STRING_CONSTANT + STRING_CONSTANT ) + enabled ) ) ; } syncBluetoothState () ; } return success ; }
public void registerContentObservers ( android.content.Context appContext ) { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( com.android.dialer.configprovider.ConfigProviderBindings . get ( appContext ) . getBoolean ( STRING_CONSTANT , false ) ) { for ( com.android.dialer.calllog.datasources.CallLogDataSource dataSource : dataSources . getDataSourcesIncludingSystemCallLog () ) { dataSource . registerContentObservers ( appContext ) ; } } else { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; } }
private static java.util.Collection < java.lang.String > getAndroidViewClassNames ( org.eclipse.core.resources.IProject project ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () ; com.android.sdklib.IAndroidTarget target = currentSdk . getTarget ( project ) ; if ( target != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData = currentSdk . getTargetData ( target ) ; if ( targetData != null ) { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors layoutDescriptors = targetData . getLayoutDescriptors () ; return layoutDescriptors . getAllViewClassNames () ; } } return java.util.Collections . emptyList () ; }
private void putAllImpl ( java.util.Map < ? extends K , ? extends V > map ) { for ( java.util.Map.Entry < ? extends K , ? extends V > entry : map . entrySet () ) { putImpl ( entry . getKey () , entry . getValue () ) ; } }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_bug_char s = new com.android.rs.test.ScriptC_bug_char ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; initializeValues ( s ) ; s . invoke_bug_char_test () ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; }
void onAdvertiserStarted ( int status , int advertiserId ) throws android.os.RemoteException { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( STRING_CONSTANT + advertiserId ) + STRING_CONSTANT ) + status ) ) ; com.android.bluetooth.gatt.AdvertiserMap.App app = mAdvertiserMap . getById ( advertiserId ) ; if ( app != null ) { if ( status == NUMBER_CONSTANT ) { app.callback . onMultiAdvertiseCallback ( AdvertiseCallback.ADVERTISE_SUCCESS , true , null ) ; } else { app.callback . onMultiAdvertiseCallback ( AdvertiseCallback.ADVERTISE_FAILED_INTERNAL_ERROR , true , null ) ; } } }
public boolean put ( java.lang.String key , byte [] value , int uid ) { try { return ( mBinder . insert ( key , value , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
public static void closeDrawer ( int drawerLayoutId , int gravity ) { if ( android.support.test.espresso.contrib.DrawerActions . checkDrawer ( drawerLayoutId , android.support.test.espresso.contrib.DrawerMatchers . isClosed ( gravity ) ) ) { return; } android.support.test.espresso.Espresso . onView ( android.support.test.espresso.matcher.ViewMatchers . withId ( drawerLayoutId ) ) . perform ( android.support.test.espresso.contrib.DrawerActions . registerListener () ) . perform ( android.support.test.espresso.contrib.DrawerActions . actionCloseDrawer ( gravity ) ) . perform ( android.support.test.espresso.contrib.DrawerActions . unregisterListener () ) ; }
@ java.lang.Override public void run ( org.eclipse.jface.action.IAction action ) { java.util.List < org.eclipse.core.resources.IProject > projects = com.android.ide.eclipse.adt.internal.lint.RunLintAction . getProjects ( mSelection , true ) ; if ( ! ( projects . isEmpty () ) ) { com.android.ide.eclipse.adt.internal.lint.EclipseLintRunner . startLint ( projects , null , null , false , true ) ; } }
public void recomputeComponents () { float width = mWidth ; width -= NUMBER_CONSTANT * ( com.cooliris.app.App.PIXEL_DENSITY ) ; synchronized ( mComponents ) { int numComponents = mComponents . size () ; for ( int i = NUMBER_CONSTANT ; i < numComponents ; i ++ ) { com.cooliris.media.PathBarLayer.Component component = mComponents . get ( i ) ; if ( component != null ) { width -= ( component . getIconWidth () ) + ( NUMBER_CONSTANT * ( com.cooliris.app.App.PIXEL_DENSITY ) ) ; component . computeLabel ( width ) ; } } } }
private void reloadLogBuffer () { mTable . removeAll () ; synchronized ( mLogBuffer ) { mLogBuffer . clear () ; mDeletedLogCount = NUMBER_CONSTANT ; } if ( ( ( mReceiver ) == null ) || ( ( mReceiver . getMessages () ) == null ) ) { return; } java.util.List < com.android.ddmuilib.logcat.LogCatMessage > addedMessages = mReceiver . getMessages () . getAllMessages () ; java.util.List < com.android.ddmuilib.logcat.LogCatMessage > deletedMessages = java.util.Collections . emptyList () ; bufferChanged ( addedMessages , deletedMessages ) ; }
public void sortEnumFields () { if ( ! ( areFieldsSorted ) ) { java.util.Collections . sort ( enumFields , new java.util.Comparator < com.android.jack.ir.ast.JEnumField > () { @ java.lang.Override public int compare ( com.android.jack.ir.ast.JEnumField field1 , com.android.jack.ir.ast.JEnumField field2 ) { return field1 . getName () . compareTo ( field2 . getName () ) ; } } ) ; areFieldsSorted = true ; } }
public void testTimedPoll0 ( ) throws java.lang.InterruptedException { java.util.concurrent.DelayQueue q = populatedQueue ( jsr166.SIZE ) ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) { assertEquals ( new jsr166.DelayQueueTest.PDelay ( i ) , q . poll ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ; } assertNull ( q . poll ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ; }
public void testWeakCompareAndSet () { java.util.concurrent.atomic.AtomicReference ai = new java.util.concurrent.atomic.AtomicReference ( one ) ; do {} while ( ! ( ai . weakCompareAndSet ( one , two ) ) ) ; do {} while ( ! ( ai . weakCompareAndSet ( two , m4 ) ) ) ; assertSame ( m4 , ai . get () ) ; do {} while ( ! ( ai . weakCompareAndSet ( m4 , seven ) ) ) ; assertSame ( seven , ai . get () ) ; }
@ java.lang.Override public java.lang.String getVisualVoicemailPackageName ( java.lang.String callingPackage , int subId ) { mAppOps . checkPackage ( android.os.Binder . getCallingUid () , callingPackage ) ; if ( ! ( canReadPhoneState ( callingPackage , STRING_CONSTANT ) ) ) { return null ; } return com.android.phone.vvm.RemoteVvmTaskManager . getRemotePackage ( mPhone . getContext () , subId ) . getPackageName () ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.ir.ast.JArrayLiteral exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( sourceInfo ) != null ; java.util.List < com.android.jack.ir.ast.JLiteral > jValues = new java.util.ArrayList < com.android.jack.ir.ast.JLiteral > ( values . size () ) ; for ( com.android.jack.jayce.v0002.nodes.NLiteral value : values ) { jValues . add ( value . exportAsJast ( exportSession ) ) ; } com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo . exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JArrayLiteral jArrayLiteral = new com.android.jack.ir.ast.JArrayLiteral ( jSourceInfo , jValues ) ; return jArrayLiteral ; }
@ java.lang.Override public void onItemClick ( android.widget.AdapterView < > parent , android.view.View view , int position , long id ) { if ( com.android.bluetooth.opp.BluetoothOppTransferHistory.V ) { android.util.Log . v ( com.android.bluetooth.opp.BluetoothOppTransferHistory.TAG , ( STRING_CONSTANT + ( mContextMenu ) ) ) ; } if ( ! ( mContextMenu ) ) { mTransferCursor . moveToPosition ( position ) ; openCompleteTransfer () ; updateNotificationWhenBtDisabled () ; } mContextMenu = false ; }
@ java.lang.Override public void onConfigurationChanged ( final android.content.res.Configuration newConfig ) { if ( checkNeedsPost () ) { mRunQueue . addTask ( new java.lang.Runnable () { @ java.lang.Override public void run () { onConfigurationChanged ( newConfig ) ; } } ) ; return; } mAwContents . onConfigurationChanged ( newConfig ) ; }
public static java.nio.MemoryBlock allocate ( int byteCount ) { dalvik.system.VMRuntime runtime = dalvik.system.VMRuntime . getRuntime () ; byte [] array = ( ( byte [] ) ( runtime . newNonMovableArray ( byte . class , byteCount ) ) ) ; long address = runtime . addressOf ( array ) ; return new java.nio.MemoryBlock.NonMovableHeapBlock ( array , address , byteCount ) ; }
void unhold () { if ( ( mState ) == ( CallState.ON_HOLD ) ) { if ( ( mConnectionService ) != null ) { mConnectionService . unhold ( this ) ; } else { android.telecom.Log . e ( this , new java.lang.NullPointerException () , STRING_CONSTANT , getId () ) ; } android.telecom.Log . addEvent ( this , LogUtils.Events.REQUEST_UNHOLD ) ; } }
@ java.lang.Override public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.map.BluetoothMapService service = getService () ; if ( service == null ) { return false ; } service . disconnect ( device ) ; return true ; }
@ java.lang.Override public boolean visit ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration , org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope scope ) { org.eclipse.jdt.internal.compiler.ast.Annotation [] annotations = typeDeclaration.annotations ; if ( hasRelevantAnnotations ( annotations ) ) { org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding binding = typeDeclaration.binding ; if ( binding == null ) { return true ; } java.lang.String fqn = new java.lang.String ( typeDeclaration.binding . readableName () ) ; com.android.build.gradle.tasks.annotations.Extractor.Item item = com.android.build.gradle.tasks.annotations.Extractor.ClassItem . create ( fqn ) ; addItem ( fqn , item ) ; addAnnotations ( annotations , item ) ; } return true ; }
@ javax.annotation.CheckForNull private com.android.jack.ir.ast.JMethodId getPhantomMethod ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > argsType , @ javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind ) { synchronized ( phantomMethods ) { for ( com.android.jack.ir.ast.JMethodId id : phantomMethods ) { if ( id . equals ( name , argsType , kind ) ) { return id ; } } } return null ; }
public void test_SSL_CTX_new ( ) throws java.lang.Exception { int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_new () ; assertTrue ( ( c != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; int c2 = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_new () ; assertTrue ( ( c != c2 ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_free ( c ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_free ( c2 ) ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { if ( ( videoView ) != null ) { getHelper () . cleanUpView ( videoView ) ; } if ( ( videoViewFactory ) != null ) { videoViewFactory . release () ; } super . tearDown () ; }
public java.lang.String getSymbol ( java.util.Locale locale ) { if ( ( locale . getCountry () . length () ) == NUMBER_CONSTANT ) { return currencyCode ; } libcore.icu.LocaleData localeData = libcore.icu.LocaleData . get ( locale ) ; if ( localeData.internationalCurrencySymbol . equals ( currencyCode ) ) { return localeData.currencySymbol ; } java.lang.String symbol = libcore.icu.ICU . getCurrencySymbol ( locale , currencyCode ) ; return symbol != null ? symbol : currencyCode ; }
@ java.lang.Override void handleReturnCode () { targetArgs . doPostInstall ( mRet , uid ) ; int currentStatus = android.content.pm.PackageManager.MOVE_FAILED_INTERNAL_ERROR ; if ( ( mRet ) == ( android.content.pm.PackageManager.INSTALL_SUCCEEDED ) ) { currentStatus = android.content.pm.PackageManager.MOVE_SUCCEEDED ; } else if ( ( mRet ) == ( android.content.pm.PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE ) ) { currentStatus = android.content.pm.PackageManager.MOVE_FAILED_INSUFFICIENT_STORAGE ; } processPendingMove ( this , currentStatus ) ; }
public void test_getLocalPort ( ) throws java.io.IOException { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () ) ) { assertNotSame ( STRING_CONSTANT , NUMBER_CONSTANT , client . getLocalPort () ) ; } }
private void decodeVideo ( android.media.cts.VideoFormat videoFormat , android.media.cts.VideoViewFactory videoViewFactory ) { this . player = new android.media.cts.SimplePlayer ( getHelper () . getContext () ) ; final android.media.cts.SimplePlayer.PlayerResult playerResult = player . decodeVideoFrames ( videoViewFactory . getSurface () , videoFormat , NUMBER_CONSTANT ) ; junit.framework.TestCase . assertTrue ( playerResult . getFailureMessage () , playerResult . isSuccess () ) ; }
@ android.annotation.SystemApi public java.util.List < android.telephony.NetworkRegistrationState > getNetworkRegistrationStates ( int transportType ) { java.util.List < android.telephony.NetworkRegistrationState > list = new java.util.ArrayList <> () ; synchronized ( mNetworkRegistrationStates ) { for ( android.telephony.NetworkRegistrationState networkRegistrationState : mNetworkRegistrationStates ) { if ( ( networkRegistrationState . getTransportType () ) == transportType ) { list . add ( networkRegistrationState ) ; } } } return list ; }
public void visitConstantInstruction ( proguard.optimize.info.Clazz clazz , proguard.optimize.info.Method method , proguard.classfile.attribute.CodeAttribute codeAttribute , int offset , proguard.optimize.info.ConstantInstruction constantInstruction ) { switch ( constantInstruction.opcode ) { case InstructionConstants.OP_GETSTATIC : case InstructionConstants.OP_PUTSTATIC : case InstructionConstants.OP_GETFIELD : case InstructionConstants.OP_PUTFIELD : case InstructionConstants.OP_INVOKEVIRTUAL : case InstructionConstants.OP_INVOKESPECIAL : case InstructionConstants.OP_INVOKESTATIC : case InstructionConstants.OP_INVOKEINTERFACE : case InstructionConstants.OP_INVOKEDYNAMIC : case InstructionConstants.OP_NEW : case InstructionConstants.OP_ANEWARRAY : case InstructionConstants.OP_CHECKCAST : case InstructionConstants.OP_INSTANCEOF : case InstructionConstants.OP_MULTIANEWARRAY : mayThrowExceptions = true ; } }
public android.content.ComponentName getActivityClassForToken ( android.os.IBinder token ) { synchronized ( this ) { int index = indexOfTokenLocked ( token ) ; if ( index >= NUMBER_CONSTANT ) { com.android.server.am.HistoryRecord r = ( ( com.android.server.am.HistoryRecord ) ( mHistory . get ( index ) ) ) ; return r.intent . getComponent () ; } return null ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public < T extends com.android.sched.marker.Marker > T addMarker ( @ javax.annotation.Nonnull T marker ) { assert isValidMarker ( marker ) : ( ( ( STRING_CONSTANT + ( com.android.sched.item.Items . getName ( marker . getClass () ) ) ) + STRING_CONSTANT ) + ( this . getClass () . getName () ) ) + STRING_CONSTANT ; ensureMap () ; assert ( markers ) != null ; return ( ( T ) ( markers . put ( marker . getClass () , marker ) ) ) ; }
synchronized android.telecom.Connection onCreateIncomingConnection ( android.bluetooth.BluetoothHeadsetClientCall call ) { com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection = mConnections . get ( call . getUUID () ) ; if ( connection != null ) { connection . onAdded () ; return connection ; } else { android.util.Log . e ( mTAG , ( ( STRING_CONSTANT + call ) + STRING_CONSTANT ) ) ; return null ; } }
public java.lang.String toShortDisplayString () { if ( isDefault () ) { return STRING_CONSTANT ; } java.lang.StringBuilder result = new java.lang.StringBuilder ( NUMBER_CONSTANT ) ; int index = NUMBER_CONSTANT ; while ( index < ( com.android.ide.common.resources.configuration.FolderConfiguration.INDEX_COUNT ) ) { com.android.ide.common.resources.configuration.ResourceQualifier qualifier = mQualifiers [ ( index ++ ) ] ; if ( qualifier != null ) { if ( ( result . length () ) > NUMBER_CONSTANT ) { result . append ( CHAR_CONS ) ; } result . append ( qualifier . getShortDisplayValue () ) ; } } return result . toString () ; }
public static synchronized void setScanDone ( android.content.Context context ) { if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { com.android.tv.tuner.TunerPreferences . setPreference ( context , com.android.tv.tuner.TunerPreferences.PREFS_KEY_SCAN_DONE , true ) ; } else { com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . edit () . putBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_SCAN_DONE , true ) . apply () ; } }
@ java.lang.Override public void sendDtmf ( char c ) { if ( ! ( android.telephony.PhoneNumberUtils . is12Key ( c ) ) ) { loge ( ( ( STRING_CONSTANT + c ) + STRING_CONSTANT ) ) ; } else { if ( ( mCT . getState () ) == ( PhoneConstants.State.OFFHOOK ) ) { mCT . sendDtmf ( c , null ) ; } } }
public int removeAllRights () { int result = android.drm.DrmManagerClient.ERROR_UNKNOWN ; if ( null != ( mEventHandler ) ) { android.os.Message msg = mEventHandler . obtainMessage ( android.drm.DrmManagerClient.ACTION_REMOVE_ALL_RIGHTS ) ; result = ( mEventHandler . sendMessage ( msg ) ) ? android.drm.DrmManagerClient.ERROR_NONE : result ; } return result ; }
public synchronized boolean setCountryCode ( java.lang.String countryCode ) { if ( DBG ) android.util.Log . d ( com.android.server.wifi.WifiCountryCode.TAG , ( STRING_CONSTANT + countryCode ) ) ; if ( android.text.TextUtils . isEmpty ( countryCode ) ) { if ( DBG ) android.util.Log . d ( com.android.server.wifi.WifiCountryCode.TAG , STRING_CONSTANT ) ; return false ; } mTelephonyCountryCode = countryCode . toUpperCase () ; if ( mReady ) { updateCountryCode () ; } return true ; }
public void setStackTrace ( java.lang.StackTraceElement [] trace ) { if ( ( stackTrace ) == null ) { return; } java.lang.StackTraceElement [] newTrace = trace . clone () ; for ( int i = NUMBER_CONSTANT ; i < ( newTrace.length ) ; i ++ ) { if ( ( newTrace [ i ] ) == null ) { throw new java.lang.NullPointerException ( ( ( STRING_CONSTANT + i ) + STRING_CONSTANT ) ) ; } } stackTrace = newTrace ; }
private void verifyNoNetwork () { assertNull ( mCm . getActiveNetworkInfo () ) ; assertNull ( mCm . getActiveNetwork () ) ; assertNull ( mCm . getActiveNetworkForUid ( java.lang.Process . myUid () ) ) ; assertEquals ( NUMBER_CONSTANT , mCm . getAllNetworks () . length ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testVoicemailCall () { java.lang.String voicemailNumber = STRING_CONSTANT ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL , android.net.Uri . parse ( voicemailNumber ) ) ; intent . putExtra ( TelecomManager.EXTRA_START_CALL_WITH_SPEAKERPHONE , true ) ; int result = processIntent ( intent , true ) ; org.junit.Assert . assertEquals ( DisconnectCause.NOT_DISCONNECTED , result ) ; org.mockito.Mockito . verify ( mCallsManager ) . placeOutgoingCall ( org.mockito.Matchers . eq ( mCall ) , org.mockito.Matchers . eq ( android.net.Uri . parse ( voicemailNumber ) ) , org.mockito.ArgumentMatchers . nullable ( android.telecom.GatewayInfo . class ) , org.mockito.Matchers . eq ( true ) , org.mockito.Matchers . eq ( VideoProfile.STATE_AUDIO_ONLY ) ) ; }
private void doSuccessfulSwPnoScanTest ( boolean isConnectedPno ) { com.android.server.wifi.WifiNative.PnoEventHandler pnoEventHandler = mock ( WifiNative.PnoEventHandler . class ) ; com.android.server.wifi.WifiNative.PnoSettings pnoSettings = createDummyPnoSettings ( isConnectedPno ) ; com.android.server.wifi.WifiNative.ScanEventHandler scanEventHandler = mock ( WifiNative.ScanEventHandler . class ) ; com.android.server.wifi.WifiNative.ScanSettings scanSettings = createDummyScanSettings () ; com.android.server.wifi.ScanResults scanResults = createDummyScanResults ( false ) ; org.mockito.InOrder order = inOrder ( scanEventHandler , mWifiNative ) ; startSuccessfulPnoScan ( scanSettings , pnoSettings , scanEventHandler , pnoEventHandler ) ; expectSuccessfulSwPnoScan ( order , scanEventHandler , scanResults ) ; verifyNoMoreInteractions ( pnoEventHandler ) ; }
private static com.android.vts.entity.ProfilingPointRunEntity createProfilingReport ( java.lang.String [] labels , long [] values , com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode regressionMode ) { java.util.List < java.lang.String > labelList = java.util.Arrays . asList ( labels ) ; java.util.List < java.lang.Long > valueList = new java.util.ArrayList <> () ; for ( long value : values ) { valueList . add ( value ) ; } return new com.android.vts.entity.ProfilingPointRunEntity ( com.google.appengine.api.datastore.KeyFactory . createKey ( TestEntity.KIND , STRING_CONSTANT ) , STRING_CONSTANT , NUMBER_CONSTANT , regressionMode . getNumber () , labelList , valueList , STRING_CONSTANT , STRING_CONSTANT , null ) ; }
@ java.lang.Override protected boolean validatePage () { boolean ok = true ; int selectionIndex = mTypeCombo . getSelectionIndex () ; java.lang.String type = ( selectionIndex != ( - NUMBER_CONSTANT ) ) ? mClassNames . get ( selectionIndex ) : null ; if ( type == null ) { setErrorMessage ( STRING_CONSTANT ) ; ok = false ; } else { setErrorMessage ( null ) ; } com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeViewRefactoring refactoring = ( ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeViewRefactoring ) ( getRefactoring () ) ) ; refactoring . setType ( type ) ; setPageComplete ( ok ) ; return ok ; }
public void test_read$BII3 ( ) throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources . createTempFolder () ; tests.support.resource.Support_Resources . copyFile ( resources , null , STRING_CONSTANT ) ; java.io.FileInputStream fis = new java.io.FileInputStream ( new java.io.File ( resources , STRING_CONSTANT ) ) ; try ( java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( fis ) ) { try { iis . read () ; fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException ee ) {} } }
public static void assertDefaultCipherSuites ( java.lang.String [] cipherSuites ) { libcore.java.security.StandardNames . assertValidCipherSuites ( cipherSuites ) ; org.junit.Assert . assertEquals ( libcore.java.security.StandardNames.CIPHER_SUITES_DEFAULT , java.util.Arrays . asList ( cipherSuites ) ) ; if ( ! ( libcore.java.security.StandardNames.IS_RI ) ) { java.util.List < java.lang.String > disallowedDefaultCipherSuites = new java.util.ArrayList < java.lang.String > () ; for ( java.lang.String cipherSuite : cipherSuites ) { if ( ! ( libcore.java.security.StandardNames . isPermittedDefaultCipherSuite ( cipherSuite ) ) ) { disallowedDefaultCipherSuites . add ( cipherSuite ) ; } } org.junit.Assert . assertEquals ( java.util.Collections.EMPTY_LIST , disallowedDefaultCipherSuites ) ; } }
public android.net.NetworkScorerAppManager.NetworkScorerAppData getScorer ( java.lang.String packageName ) { if ( android.text.TextUtils . isEmpty ( packageName ) ) { return null ; } java.util.Collection < android.net.NetworkScorerAppManager.NetworkScorerAppData > applications = getAllValidScorers () ; for ( android.net.NetworkScorerAppManager.NetworkScorerAppData app : applications ) { if ( packageName . equals ( app.mPackageName ) ) { return app ; } } return null ; }
@ org.junit.Test public void getProperty_badResponse ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock . createMock ( com.android.ddmlib.IDevice . class ) ; injectShellResponse ( mockDevice , STRING_CONSTANT ) ; org.easymock.EasyMock . replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; org.junit.Assert . assertNull ( fetcher . getProperty ( STRING_CONSTANT ) . get () ) ; }
private boolean sendCommand ( java.lang.String command ) { boolean result = false ; try { byte [] bCommand ; try { bCommand = command . getBytes ( com.android.ddmlib.EmulatorConsole.DEFAULT_ENCODING ) ; } catch ( java.io.UnsupportedEncodingException e ) { return result ; } com.android.ddmlib.AdbHelper . write ( mSocketChannel , bCommand , bCommand.length , com.android.ddmlib.DdmPreferences . getTimeOut () ) ; result = true ; } catch ( java.lang.Exception e ) { return false ; } finally { if ( ! result ) { com.android.ddmlib.EmulatorConsole . RemoveConsole ( mPort ) ; } } return result ; }
@ java.lang.Override public int [] blend ( int [] src , int [] dst , int [] result ) { for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { result [ i ] = java.lang.Math . max ( src [ i ] , dst [ i ] ) ; } result [ NUMBER_CONSTANT ] = java.lang.Math . min ( NUMBER_CONSTANT , ( ( src [ NUMBER_CONSTANT ] ) + ( dst [ NUMBER_CONSTANT ] ) ) ) ; return result ; }
@ java.lang.Override public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc , final boolean itf ) { cp . newMethod ( owner , name , desc , itf ) ; mv . visitMethodInsn ( opcode , owner , name , desc , itf ) ; }
private void processRegisterNotification ( int eventId , int param ) { switch ( eventId ) { case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_STATUS_CHANGED : mPlayStatusChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM ; registerNotificationRspPlayStatusNative ( mPlayStatusChangedNT , convertPlayStateToPlayStatus ( mCurrentPlayState ) ) ; break; case com.android.bluetooth.avrcp.Avrcp.EVT_TRACK_CHANGED : android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , STRING_CONSTANT ) ; mTrackChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM ; sendTrackChangedRsp () ; break; case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_POS_CHANGED : mPlayPosChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM ; mPlaybackIntervalMs = ( ( long ) ( param ) ) * NUMBER_CONSTANT ; sendPlayPosNotificationRsp ( true ) ; break; } }
public void test_getContentLength ( ) throws java.lang.Exception { assertEquals ( org.apache.harmony.luni.tests.java.net.URLConnectionTest.testString . getBytes () . length , fileURLCon . getContentLength () ) ; assertEquals ( Support_TestWebData.test1.length , uc . getContentLength () ) ; assertEquals ( Support_TestWebData.test2.length , uc2 . getContentLength () ) ; assertTrue ( ( ( jarURLCon . getContentLength () ) > NUMBER_CONSTANT ) ) ; assertTrue ( ( ( gifURLCon . getContentLength () ) > NUMBER_CONSTANT ) ) ; fileURLCon . getInputStream () . close () ; }
@ java.lang.Override public final java.nio.ByteBuffer putFloat ( float x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putFloat ( ix ( nextPutIndex ( SizeOf.FLOAT ) ) , x ) ; return this ; }
public static void atraceDumpAndSendInBackground ( final android.content.Context context , final java.lang.String tags ) { new android.os.AsyncTask < java.lang.Void , java.lang.Void , java.lang.Void > () { @ java.lang.Override protected java.lang.Void doInBackground ( java.lang.Void . . . params ) { com.android.traceur.AtraceUtils . atraceDumpAndSend ( context , tags , Receiver.BUFFER_SIZE_KB ) ; return null ; } } . execute () ; }
@ java.lang.Override public org.eclipse.ltk.core.refactoring.RefactoringStatus checkFinalConditions ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException , org.eclipse.core.runtime.OperationCanceledException { org.eclipse.ltk.core.refactoring.RefactoringStatus status = new org.eclipse.ltk.core.refactoring.RefactoringStatus () ; mChanges = new java.util.ArrayList < org.eclipse.ltk.core.refactoring.Change > () ; try { monitor . beginTask ( STRING_CONSTANT , NUMBER_CONSTANT ) ; mGeneratedIdMap . clear () ; mGeneratedIds . clear () ; java.util.List < org.eclipse.ltk.core.refactoring.Change > changes = computeChanges ( monitor ) ; mChanges . addAll ( changes ) ; monitor . worked ( NUMBER_CONSTANT ) ; } finally { monitor . done () ; } return status ; }
private synchronized boolean terminateScoUsingVirtualVoiceCall () { log ( STRING_CONSTANT ) ; if ( ! ( isVirtualCallInProgress () ) ) { android.util.Log . w ( com.android.bluetooth.hfp.HeadsetStateMachine.TAG , STRING_CONSTANT ) ; return false ; } processCallState ( new com.android.bluetooth.hfp.HeadsetCallState ( NUMBER_CONSTANT , NUMBER_CONSTANT , HeadsetHalConstants.CALL_STATE_IDLE , STRING_CONSTANT , NUMBER_CONSTANT ) , true ) ; setVirtualCallInProgress ( false ) ; log ( STRING_CONSTANT ) ; return true ; }
@ java.lang.Override public UResource.TableSink getOrCreateTableSink ( android.icu.impl.UResource.Key key ) { if ( key . contentEquals ( STRING_CONSTANT ) ) {} else if ( key . contentEquals ( STRING_CONSTANT ) ) { if ( ! ( cacheData . hasPerFormatter ( width ) ) ) { return compoundSink ; } } else { type = key . toString () ; return subtypeSink ; } return null ; }
public java.util.List < android.content.PeriodicSync > getPeriodicSyncs ( android.accounts.Account account , int userId , java.lang.String providerName ) { java.util.ArrayList < android.content.PeriodicSync > syncs = new java.util.ArrayList < android.content.PeriodicSync > () ; synchronized ( mAuthorities ) { android.content.SyncStorageEngine.AuthorityInfo authority = getAuthorityLocked ( account , userId , providerName , STRING_CONSTANT ) ; if ( authority != null ) { for ( android.util.Pair < android.os.Bundle , java.lang.Long > item : authority.periodicSyncs ) { syncs . add ( new android.content.PeriodicSync ( account , providerName , item.first , item.second ) ) ; } } } return syncs ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT , returns = STRING_CONSTANT ) public java.lang.Boolean bluetoothToggleState ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcOptional java.lang.Boolean enabled , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = STRING_CONSTANT ) java.lang.Boolean prompt ) { mService . registerReceiver ( mStateReceiver , new android.content.IntentFilter ( android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED ) ) ; if ( enabled == null ) { enabled = ! ( bluetoothCheckState () ) ; } if ( enabled ) { return mBluetoothAdapter . enable () ; } else { shutdown () ; return mBluetoothAdapter . disable () ; } }
private long pickBestMatchBasedOnData ( android.database.sqlite.SQLiteDatabase db , long rawContactId , com.android.providers.contacts.ContactAggregator.MatchCandidateList candidates , com.android.providers.contacts.ContactMatcher matcher ) { long bestMatch = updateMatchScoresBasedOnDataMatches ( db , rawContactId , matcher ) ; if ( bestMatch == ( ContactMatcher.MULTIPLE_MATCHES ) ) { return - NUMBER_CONSTANT ; } else if ( bestMatch == ( - NUMBER_CONSTANT ) ) { bestMatch = pickBestMatchBasedOnSecondaryData ( db , rawContactId , candidates , matcher ) ; if ( bestMatch == ( ContactMatcher.MULTIPLE_MATCHES ) ) { return - NUMBER_CONSTANT ; } } return bestMatch ; }
public android.content.Intent intentForPosition ( int position ) { com.android.internal.app.ResolverActivity.DisplayResolveInfo dri = mList . get ( position ) ; android.content.Intent intent = new android.content.Intent ( ( ( dri.origIntent ) != null ? dri.origIntent : mIntent ) ) ; intent . addFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT ) | ( android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP ) ) ) ; android.content.pm.ActivityInfo ai = dri.ri.activityInfo ; intent . setComponent ( new android.content.ComponentName ( ai.applicationInfo.packageName , ai.name ) ) ; return intent ; }
static void division ( java.math.BigInt dividend , java.math.BigInt divisor , java.math.BigInt quotient , java.math.BigInt remainder ) { long quot ; long rem ; if ( quotient != null ) { quotient . makeValid () ; quot = quotient.bignum ; } else { quot = NUMBER_CONSTANT ; } if ( remainder != null ) { remainder . makeValid () ; rem = remainder.bignum ; } else { rem = NUMBER_CONSTANT ; } java.math.NativeBN . BN_div ( quot , rem , dividend.bignum , divisor.bignum ) ; }
public void run () { com.android.rs.test_compat.RenderScript pRS = com.android.rs.test_compat.RenderScript . create ( mCtx ) ; com.android.rs.test_compat.ScriptC_single_source_ref_count s = new com.android.rs.test_compat.ScriptC_single_source_ref_count ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . invoke_entrypoint () ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; }
private static void checkInputFile ( java.io.File file ) throws com.android.sdklib.build.ApkCreationException , java.io.FileNotFoundException { if ( file . isDirectory () ) { throw new com.android.sdklib.build.ApkCreationException ( STRING_CONSTANT , file ) ; } if ( file . exists () ) { if ( ( file . canRead () ) == false ) { throw new com.android.sdklib.build.ApkCreationException ( STRING_CONSTANT , file ) ; } } else { throw new java.io.FileNotFoundException ( java.lang.String . format ( STRING_CONSTANT , file ) ) ; } }
android.content.Context getContext () { android.content.Context context = mock ( android.content.Context . class ) ; android.content.res.Resources resource = mock ( android.content.res.Resources . class ) ; when ( context . getResources () ) . thenReturn ( mResource ) ; when ( context . getSystemService ( Context.NETWORK_SCORE_SERVICE ) ) . thenReturn ( mScoreManager ) ; return context ; }
@ java.lang.Deprecated public static com.ibm.icu.text.DateIntervalInfo.PatternInfo genPatternInfo ( java.lang.String intervalPattern , boolean laterDateFirst ) { int splitPoint = com.ibm.icu.text.DateIntervalInfo . splitPatternInto2Part ( intervalPattern ) ; java.lang.String firstPart = intervalPattern . substring ( NUMBER_CONSTANT , splitPoint ) ; java.lang.String secondPart = null ; if ( splitPoint < ( intervalPattern . length () ) ) { secondPart = intervalPattern . substring ( splitPoint , intervalPattern . length () ) ; } return new com.ibm.icu.text.DateIntervalInfo.PatternInfo ( firstPart , secondPart , laterDateFirst ) ; }
public void testConfigurationUpdatesWhenResizedFromFullscreen ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests . assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putChar ( char x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putChar ( ix ( nextPutIndex ( SizeOf.CHAR ) ) , x ) ; return this ; }
public boolean isMatchFor ( com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig ) { if ( referenceConfig == null ) { return false ; } for ( int i = NUMBER_CONSTANT ; i < ( com.android.ide.common.resources.configuration.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { com.android.ide.common.resources.configuration.ResourceQualifier testQualifier = mQualifiers [ i ] ; com.android.ide.common.resources.configuration.ResourceQualifier referenceQualifier = referenceConfig.mQualifiers [ i ] ; if ( ( ( testQualifier != null ) && ( referenceQualifier != null ) ) && ( ! ( testQualifier . isMatchFor ( referenceQualifier ) ) ) ) { return false ; } } return true ; }
private java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > createWpaSupplicantLoadData ( java.util.List < android.net.wifi.WifiConfiguration > configurations ) { java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configurationMap = new java.util.HashMap <> () ; for ( android.net.wifi.WifiConfiguration config : configurations ) { configurationMap . put ( config . configKey ( true ) , config ) ; } return configurationMap ; }
@ java.lang.Override public void handleMethod ( com.android.traceview.MethodData method ) { java.lang.String methodName = method . getMethodName () ; java.lang.String className = method . getClassName () . replaceAll ( STRING_CONSTANT , STRING_CONSTANT ) ; java.lang.String fqmn = ( className + STRING_CONSTANT ) + methodName ; com.android.ide.eclipse.ddms.JavaSourceRevealer . revealMethod ( fqmn , null , ( - NUMBER_CONSTANT ) , null ) ; }
@ android.test.suitebuilder.annotation.MediumTest public void testIdletimerDirectoryExistsAndSane ( ) throws java.lang.Exception { java.io.File dir = new java.io.File ( STRING_CONSTANT ) ; assertTrue ( dir . isDirectory () ) ; assertFalse ( dir . canWrite () ) ; assertTrue ( dir . canExecute () ) ; android.permission.cts.FileSystemPermissionTest . assertFileOwnedBy ( dir , STRING_CONSTANT ) ; android.permission.cts.FileSystemPermissionTest . assertFileOwnedByGroup ( dir , STRING_CONSTANT ) ; }
private void onDeviceRemoved ( java.lang.String deviceObjectPath ) { java.lang.String address = mBluetoothService . getAddressFromObjectPath ( deviceObjectPath ) ; if ( address != null ) { mBluetoothService . setBondState ( address . toUpperCase () , BluetoothDevice.BOND_NONE , BluetoothDevice.UNBOND_REASON_REMOVED ) ; mBluetoothService . setRemoteDeviceProperty ( address , STRING_CONSTANT , null ) ; } }
@ javax.annotation.Nonnull private static com.android.sched.util.file.Directory createTempDir ( @ javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks ) { try { java.io.File tmp = com.android.sched.util.file.Files . createTempDir () ; com.android.sched.util.file.Directory dir = new com.android.sched.util.file.Directory ( tmp . getPath () , hooks , com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST , com.android.sched.util.file.FileOrDirectory.Permission.WRITE , com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE ) ; hooks . addHook ( new com.android.jack.Options.TempDirDeleter ( dir ) ) ; return dir ; } catch ( java.io.IOException e ) { throw new com.android.jack.JackUserException ( e ) ; } }
@ com.android.annotations.NonNull @ java.lang.Override public java.lang.Iterable < com.android.tools.lint.ResolvedAnnotation > getAnnotations () { org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding [] annotations = mBinding . getAnnotations () ; int count = annotations.length ; if ( count > NUMBER_CONSTANT ) { java.util.List < com.android.tools.lint.ResolvedAnnotation > result = com.google.common.collect.Lists . newArrayListWithExpectedSize ( count ) ; for ( org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding annotation : annotations ) { if ( annotation != null ) { result . add ( new com.android.tools.lint.EcjParser.EcjResolvedAnnotation ( annotation ) ) ; } } return result ; } return java.util.Collections . emptyList () ; }
public static org.bouncycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid ( java.lang.String name ) { org.bouncycastle.asn1.ASN1ObjectIdentifier oid = org.bouncycastle.asn1.x9.X962NamedCurves . getOID ( name ) ; if ( oid == null ) { oid = org.bouncycastle.asn1.sec.SECNamedCurves . getOID ( name ) ; if ( oid == null ) { oid = org.bouncycastle.asn1.nist.NISTNamedCurves . getOID ( name ) ; } } return oid ; }
private void testTrace ( java.lang.String traceName , java.lang.String threadName , java.lang.String expectedCallSequence ) throws java.io.IOException { com.android.tools.perflib.vmtrace.VmTraceData traceData = getVmTraceData ( traceName ) ; int threadId = findThreadIdFromName ( threadName , traceData . getThreads () ) ; assertTrue ( java.lang.String . format ( STRING_CONSTANT , threadName ) , ( threadId > NUMBER_CONSTANT ) ) ; com.android.tools.perflib.vmtrace.Call call = traceData . getTopLevelCall ( threadId ) ; assertNotNull ( call ) ; java.lang.String actual = call . format ( new com.android.tools.perflib.vmtrace.VmTraceParserTest.CallFormatter ( traceData . getMethods () ) ) ; assertEquals ( expectedCallSequence , actual ) ; }
public static void addLocalFile ( org.eclipse.core.resources.IProject project , java.io.File source , java.lang.String destName , org.eclipse.core.runtime.IProgressMonitor monitor ) throws java.io.FileNotFoundException , org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IFile dest = project . getFile ( destName ) ; if ( ( dest . exists () ) == false ) { java.io.FileInputStream stream = new java.io.FileInputStream ( source ) ; dest . create ( stream , false , new org.eclipse.core.runtime.SubProgressMonitor ( monitor , NUMBER_CONSTANT ) ) ; } }
public int createOppOpsRecord ( java.lang.String serviceName , int rfcommChannel , int l2capPsm , int version , byte [] formatsList ) { if ( ! ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + STRING_CONSTANT ) ) ; } return sdpCreateOppOpsRecordNative ( serviceName , rfcommChannel , l2capPsm , version , formatsList ) ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { java.net.ResponseCache . setDefault ( null ) ; java.net.Authenticator . setDefault ( null ) ; java.lang.System . clearProperty ( STRING_CONSTANT ) ; java.lang.System . clearProperty ( STRING_CONSTANT ) ; java.lang.System . clearProperty ( STRING_CONSTANT ) ; java.lang.System . clearProperty ( STRING_CONSTANT ) ; java.lang.System . clearProperty ( STRING_CONSTANT ) ; java.lang.System . clearProperty ( STRING_CONSTANT ) ; server . shutdown () ; if ( ( cache ) != null ) { cache . delete () ; } super . tearDown () ; }
private com.android.jack.Options createCommonOptionsForMultiDex ( @ javax.annotation.Nonnull java.io.File configFile ) { com.android.jack.Options app1Options = new com.android.jack.Options () ; app1Options . addProperty ( MultiDexLegacy.MULTIDEX_LEGACY . getName () , STRING_CONSTANT ) ; app1Options . addProperty ( PreProcessor.ENABLE . getName () , STRING_CONSTANT ) ; app1Options . addProperty ( PreProcessor.FILE . getName () , configFile . getAbsolutePath () ) ; return app1Options ; }
public void installDrmEngine ( java.lang.String engineFilePath ) { if ( ( null == engineFilePath ) || ( engineFilePath . equals ( STRING_CONSTANT ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_CONSTANT + engineFilePath ) + STRING_CONSTANT ) ) ; } _installDrmEngine ( mUniqueId , engineFilePath ) ; }
private java.lang.Class < > loadClassFromJar ( java.lang.String name ) { if ( ( mJarClassLoader ) == null ) { java.net.URL [] jars = getExternalJars () ; mJarClassLoader = new java.net.URLClassLoader ( jars , this ) ; } try { mInsideJarClassLoader = true ; return mJarClassLoader . loadClass ( name ) ; } catch ( java.lang.ClassNotFoundException e ) { return null ; } finally { mInsideJarClassLoader = false ; } }
public static void setTimestamp ( int id , long value ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . incModCount ( id ) ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getRecords () . putLong ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getOffset ( id , com.intellij.openapi.vfs.newvfs.persistent.FSRecords.TIMESTAMP_OFFSET ) , value ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
public void dragSetData ( org.eclipse.swt.dnd.DragSourceEvent e ) { if ( org.eclipse.swt.dnd.TextTransfer . getInstance () . isSupportedType ( e.dataType ) ) { e.data = getSelectionAsText () ; return; } if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleXmlTransfer . getInstance () . isSupportedType ( e.dataType ) ) { e.data = mDragElements ; return; } e.detail = org.eclipse.swt.dnd.DND.DROP_NONE ; e.doit = false ; }
@ java.lang.Override protected void bind ( java.net.InetAddress address , int port ) throws java.io.IOException { libcore.io.IoBridge . bind ( fd , address , port ) ; if ( port != NUMBER_CONSTANT ) { this . localport = port ; } else { this . localport = libcore.io.IoBridge . getSocketLocalPort ( fd ) ; } }
public static org.eclipse.swt.graphics.Image getScaledImage ( org.eclipse.swt.widgets.Display display , com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage glMsg , int width , int height ) { if ( ! ( glMsg . hasFb () ) ) { return null ; } org.eclipse.swt.graphics.ImageData imageData = com.android.ide.eclipse.gltrace.ProtoBufUtils . getImageData ( glMsg ) ; if ( imageData == null ) { return null ; } return new org.eclipse.swt.graphics.Image ( display , imageData . scaledTo ( width , height ) ) ; }
public void updateCallTime () { final com.android.incallui.CallCardPresenter.CallCardUi ui = getUi () ; if ( ui == null ) { mCallTimer . cancel () ; } else if ( ! ( isPrimaryCallActive () ) ) { ui . setPrimaryCallElapsedTime ( false , NUMBER_CONSTANT ) ; mCallTimer . cancel () ; } else { final long callStart = mPrimary . getConnectTimeMillis () ; if ( callStart > NUMBER_CONSTANT ) { final long duration = ( java.lang.System . currentTimeMillis () ) - callStart ; ui . setPrimaryCallElapsedTime ( true , duration ) ; } } }
public android.bluetooth.BluetoothSocket createScoSocket ( ) throws java.io.IOException { if ( ! ( isBluetoothEnabled () ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; throw new java.io.IOException () ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_SCO , ( - NUMBER_CONSTANT ) , true , true , this , ( - NUMBER_CONSTANT ) , null ) ; }
public void testCasts ( ) throws java.lang.Exception { checkExpression ( NUMBER_CONSTANT , STRING_CONSTANT ) ; checkExpression ( NUMBER_CONSTANT , STRING_CONSTANT ) ; checkExpression ( NUMBER_CONSTANT , STRING_CONSTANT ) ; checkExpression ( ( ( short ) ( NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ; checkExpression ( ( ( byte ) ( NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ; checkExpression ( NUMBER_CONSTANT , STRING_CONSTANT ) ; checkExpression ( ( - NUMBER_CONSTANT ) , STRING_CONSTANT ) ; }
void addEntry ( int hash , K key , V value , int bucketIndex ) { super . addEntry ( hash , key , value , bucketIndex ) ; java.util.LinkedHashMap.LinkedHashMapEntry < K , V > eldest = header.after ; if ( removeEldestEntry ( eldest ) ) { removeEntryForKey ( eldest.key ) ; } }
private static char maybeStripMarkers ( java.lang.String symbol , char fallback ) { final int length = symbol . length () ; if ( length == NUMBER_CONSTANT ) { return symbol . charAt ( NUMBER_CONSTANT ) ; } if ( length > NUMBER_CONSTANT ) { char first = symbol . charAt ( NUMBER_CONSTANT ) ; if ( ( ( first == CHAR_CONS ) || ( first == CHAR_CONS ) ) || ( first == CHAR_CONS ) ) { return symbol . charAt ( NUMBER_CONSTANT ) ; } } return fallback ; }
static com.android.cts.verifier.TestListAdapter.TestListItem createInteractiveTestItem ( android.app.Activity activity , java.lang.String id , int titleRes , int infoRes , com.android.cts.verifier.IntentDrivenTestActivity.ButtonInfo [] buttonInfos ) { return com.android.cts.verifier.TestListAdapter.TestListItem . newTest ( activity , titleRes , id , new android.content.Intent ( activity , com.android.cts.verifier.IntentDrivenTestActivity . class ) . putExtra ( IntentDrivenTestActivity.EXTRA_ID , id ) . putExtra ( IntentDrivenTestActivity.EXTRA_TITLE , titleRes ) . putExtra ( IntentDrivenTestActivity.EXTRA_INFO , infoRes ) . putExtra ( IntentDrivenTestActivity.EXTRA_BUTTONS , buttonInfos ) ) ; }
@ java.lang.Override public void testSaveProperties () { java.util.Properties expected = createExpectedProps () ; com.android.sdklib.internal.repository.packages.MockExtraPackage p = new com.android.sdklib.internal.repository.packages.MockExtraPackage ( null , expected , STRING_CONSTANT , STRING_CONSTANT , ( - NUMBER_CONSTANT ) , null , null , null , LOCAL_ARCHIVE_PATH ) ; java.util.Properties actual = new java.util.Properties () ; p . saveProperties ( actual ) ; assertEquals ( expected , actual ) ; }
private java.lang.String localeIdName ( java.lang.String localeId ) { if ( ( nameLength ) == ( android.icu.text.DisplayContext.LENGTH_SHORT ) ) { java.lang.String locIdName = langData . get ( STRING_CONSTANT , localeId ) ; if ( ( locIdName != null ) && ( ! ( locIdName . equals ( localeId ) ) ) ) { return locIdName ; } } return langData . get ( STRING_CONSTANT , localeId ) ; }
protected boolean notifySignalStrength () { boolean notified = false ; if ( ! ( mSignalStrength . equals ( mLastSignalStrength ) ) ) { try { mPhone . notifySignalStrength () ; notified = true ; mLastSignalStrength = mSignalStrength ; } catch ( java.lang.NullPointerException ex ) { loge ( ( ( STRING_CONSTANT + ex ) + STRING_CONSTANT ) ) ; } } return notified ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile ) { if ( supports ( klass ) ) { return new vogar.target.junit.JUnitRunner ( monitor , qualification , klass , skipPastReference , testEnvironment , timeoutSeconds ) ; } else { return null ; } }
@ java.lang.Override public final java.nio.ByteBuffer putInt ( int x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putInt ( ix ( nextPutIndex ( SizeOf.INT ) ) , x ) ; return this ; }
@ java.lang.Override protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { final java.security.spec.AlgorithmParameterSpec spec ; if ( params != null ) { try { spec = params . getParameterSpec ( javax.crypto.spec.IvParameterSpec . class ) ; } catch ( java.security.spec.InvalidParameterSpecException e ) { throw new java.security.InvalidAlgorithmParameterException ( e ) ; } } else { spec = null ; } engineInit ( opmode , key , spec , random ) ; }
public void run () { final org.eclipse.swt.graphics.Image image = loadCapture ( viewNode ) ; if ( image != null ) { org.eclipse.swt.widgets.Display . getDefault () . asyncExec ( new java.lang.Runnable () { public void run () { com.android.hierarchyviewerlib.ui.CaptureDisplay . show ( shell , viewNode , image ) ; } } ) ; } }
public void testConstructor5 () { try { java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( ( SIZE ) - NUMBER_CONSTANT ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; new java.util.concurrent.ConcurrentLinkedQueue ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
@ java.lang.Override public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { if ( visitor . visitEnter ( this ) ) { if ( ( mType ) == ( Type.OBJECT ) ) { for ( java.lang.Object value : getValues () ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . accept ( visitor ) ; } } } visitor . visitLeave ( this ) ; } }
public boolean startStreaming ( android.telephony.MbmsStreamingManager streamingManager ) { try { mStreamingService = streamingManager . startStreaming ( mStreamingServiceInfo , new com.android.phone.testapps.embmsfrontend.StreamingServiceTracker.Callback () ) ; return true ; } catch ( android.telephony.mbms.MbmsException e ) { android.widget.Toast . makeText ( mActivity , ( STRING_CONSTANT + ( e . getErrorCode () ) ) , Toast.LENGTH_SHORT ) . show () ; } return false ; }
public static java.lang.Package create ( com.android.sdklib.internal.repository.sources.SdkSource source , java.util.Properties props , int apiLevel , java.lang.String codename , int revision , java.lang.String license , java.lang.String description , java.lang.String descUrl , java.lang.String archiveOsPath ) { return new com.android.sdklib.internal.repository.packages.DocPackage ( source , props , apiLevel , codename , revision , license , description , descUrl , archiveOsPath ) ; }
@ org.junit.Test public void resetCountryCodeWhenSIMCardRemoved ( ) throws java.lang.Exception { mWifiCountryCode . setCountryCode ( mTelephonyCountryCode ) ; mWifiCountryCode . setReadyForChange ( true ) ; mWifiCountryCode . setReadyForChange ( false ) ; org.junit.Assert . assertEquals ( mTelephonyCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; mWifiCountryCode . simCardRemoved () ; org.junit.Assert . assertEquals ( mTelephonyCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; mWifiCountryCode . setReadyForChange ( true ) ; org.mockito.Mockito . verify ( mWifiNative , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . setCountryCode ( org.mockito.Mockito . anyString () ) ; org.junit.Assert . assertEquals ( mDefaultCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; }
public static void main ( java.lang.String [] args ) throws java.lang.Exception { java.lang.Class < > c = java.lang.Class . forName ( STRING_CONSTANT ) ; java.lang.reflect.Method m = c . getMethod ( STRING_CONSTANT ) ; java.lang.Integer result = ( ( java.lang.Integer ) ( m . invoke ( null ) ) ) ; if ( result != NUMBER_CONSTANT ) { throw new java.lang.Error ( ( STRING_CONSTANT + result ) ) ; } }
@ java.lang.Override public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.map.BluetoothMapService service = getService () ; if ( service == null ) { return false ; } return ( ( service . getState () ) == ( android.bluetooth.BluetoothMap.STATE_CONNECTED ) ) && ( service . getRemoteDevice () . equals ( device ) ) ; }
public static android.renderscript.AllocationAdapter create2D ( android.renderscript.RenderScript rs , android.renderscript.Allocation a ) { rs . validate () ; android.renderscript.AllocationAdapter aa = new android.renderscript.AllocationAdapter ( NUMBER_CONSTANT , rs , a ) ; aa.mConstrainedLOD = true ; aa.mConstrainedFace = true ; aa.mConstrainedY = false ; aa.mConstrainedZ = true ; aa . initLOD ( NUMBER_CONSTANT ) ; return aa ; }
@ javax.annotation.Nonnull protected < DST extends com.android.sched.item.Component > java.util.Iterator < DST > adaptWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.AdapterSchedulable < T , DST > adapter , @ javax.annotation.Nonnull T data ) throws com.android.sched.scheduler.AdapterProcessException { try ( com.android.sched.util.log.Event event = logAndTrace ( adapter , data ) ) { return adapter . adapt ( data ) ; } catch ( java.lang.Throwable e ) { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = scheduler . getSchedulableManager () . getManagedSchedulable ( adapter . getClass () ) ; throw new com.android.sched.scheduler.AdapterProcessException ( adapter , managedSchedulable , data , e ) ; } }
@ javax.annotation.Nonnull @ java.lang.Override java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file , boolean append ) throws com.android.sched.util.file.WrongPermissionException { assert ! ( isClosed () ) ; assert capabilities . contains ( Capabilities.WRITE ) ; java.io.File path = getNativeFile ( file . getPath () ) ; try { return new java.io.FileOutputStream ( path , append ) ; } catch ( java.io.FileNotFoundException e ) { com.android.sched.util.file.FileOrDirectory . checkPermissions ( path , file . getLocation () , Permission.WRITE ) ; throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public static byte [] convert ( java.lang.String bpf ) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator ( NUMBER_CONSTANT ) ; for ( java.lang.String line : bpf . split ( STRING_CONSTANT ) ) android.net.apf.Bpf2Apf . convertLine ( line , gen ) ; return gen . generate () ; }
private void onGetImageSuccess ( java.lang.String cacheKey , android.graphics.Bitmap response ) { mCache . putBitmap ( cacheKey , response ) ; com.android.volley.toolbox.ImageLoader.BatchedImageRequest request = mInFlightRequests . remove ( cacheKey ) ; if ( request != null ) { request.mResponseBitmap = response ; batchResponse ( cacheKey , request ) ; } }
@ java.lang.Override public void onDestroy () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( ( mAdapter ) != null ) { mAdapter . changeCursor ( null ) ; } getActivity () . getContentResolver () . unregisterContentObserver ( mCallLogObserver ) ; getActivity () . getContentResolver () . unregisterContentObserver ( mContactsObserver ) ; super . onDestroy () ; }
@ java.lang.Override public java.lang.String getRemoteAlias ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return null ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return null ; } return service . getRemoteAlias ( device ) ; }
public void testCropColor ( ) throws java.lang.Exception { java.awt.image.BufferedImage image = new java.awt.image.BufferedImage ( NUMBER_CONSTANT , NUMBER_CONSTANT , java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE ) ; java.awt.Graphics g = image . getGraphics () ; g . setColor ( new java.awt.Color ( - NUMBER_CONSTANT , true ) ) ; g . fillRect ( NUMBER_CONSTANT , NUMBER_CONSTANT , image . getWidth () , image . getHeight () ) ; g . dispose () ; java.awt.image.BufferedImage crop = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils . cropColor ( image , - NUMBER_CONSTANT , null ) ; assertNull ( crop ) ; }
public java.lang.Object clone () { try { java.util.ArrayList < > v = ( ( java.util.ArrayList < > ) ( super . clone () ) ) ; v.elementData = java.util.Arrays . copyOf ( elementData , size ) ; v.modCount = NUMBER_CONSTANT ; return v ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } }
public com.android.tools.r8.utils.AndroidApp.Builder addProgramDirectory ( java.nio.file.Path directory ) throws java.io.IOException { java.io.File [] resources = directory . toFile () . listFiles ( ( file ) - > com.android.tools.r8.utils.FileUtils . isDexFile ( file . toPath () ) ) ; for ( java.io.File source : resources ) { addFile ( source . toPath () , ClassKind.PROGRAM , false ) ; } java.io.File mapFile = new java.io.File ( directory . toFile () , com.android.tools.r8.utils.AndroidApp.DEFAULT_PROGUARD_MAP_FILE ) ; if ( mapFile . exists () ) { setProguardMapFile ( mapFile . toPath () ) ; } return this ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [] bootclasspath , @ javax.annotation.CheckForNull java.io.File [] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , boolean compareInstructionNumber , float instructionNumberTolerance , @ javax.annotation.CheckForNull com.android.jack.JarJarRules jarjarRules , @ javax.annotation.CheckForNull com.android.jack.ProguardFlags [] proguardFlagFiles ) throws java.lang.Exception { com.android.jack.TestTools . checkStructure ( new com.android.jack.Options () , bootclasspath , classpath , null , null , fileOrSourceList , withDebugInfo , compareInstructionNumber , instructionNumberTolerance , jarjarRules , proguardFlagFiles ) ; }
public void test_EVP_CipherInit_ex_Success ( ) throws java.lang.Exception { final int ctx = org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_CIPHER_CTX_new () ; try { final int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_cipherbyname ( STRING_CONSTANT ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_CipherInit_ex ( ctx , evpCipher , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.AES_128_KEY , null , true ) ; } finally { org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_CIPHER_CTX_cleanup ( ctx ) ; } }
private java.io.File createFileFromStr ( java.lang.String configStr , java.lang.String module ) throws java.io.IOException { java.io.File file = java.io.File . createTempFile ( module , STRING_CONSTANT ) ; java.io.FileOutputStream stream = null ; try { stream = new java.io.FileOutputStream ( file ) ; stream . write ( configStr . getBytes () ) ; stream . flush () ; } finally { if ( stream != null ) { stream . close () ; } } return file ; }
@ java.lang.Override public final java.nio.ByteBuffer put ( int i , byte x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } put ( ix ( checkIndex ( i ) ) , x ) ; return this ; }
public void onSdkLoaded () { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () ; if ( ( currentSdk != null ) && ( ( mEditedFile ) != null ) ) { com.android.sdklib.IAndroidTarget target = currentSdk . getTarget ( mEditedFile . getProject () ) ; if ( target != null ) { mConfigComposite . onSdkLoaded ( target ) ; mConfigListener . onConfigurationChange () ; } } }
private static void createVoicemailChannelForAccount ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull android.telecom.PhoneAccountHandle handle ) { android.telecom.PhoneAccount phoneAccount = context . getSystemService ( android.telecom.TelecomManager . class ) . getPhoneAccount ( handle ) ; if ( phoneAccount == null ) { return; } android.app.NotificationChannel channel = com.android.dialer.notification.VoicemailChannelUtils . newChannel ( context , com.android.dialer.notification.VoicemailChannelUtils . getChannelIdForAccount ( handle ) , phoneAccount . getLabel () ) ; com.android.dialer.notification.VoicemailChannelUtils . migrateVoicemailSoundSettings ( context , channel , handle ) ; context . getSystemService ( android.app.NotificationManager . class ) . createNotificationChannel ( channel ) ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile ) { for ( vogar.target.RunnerFactory runnerFactory : runnerFactories ) { vogar.target.Runner runner = runnerFactory . newRunner ( monitor , qualification , klass , skipPastReference , testEnvironment , timeoutSeconds , profile ) ; if ( runner != null ) { return runner ; } } return null ; }
private void updateNodeProxies ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi ) { if ( vi == null ) { return; } com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode key = vi . getUiViewNode () ; if ( key != null ) { mCanvas . getNodeFactory () . create ( vi ) ; } for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child : vi . getChildren () ) { updateNodeProxies ( child ) ; } }
protected void fillFiles ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVDir vDir , @ javax.annotation.Nonnull java.util.List < com.android.sched.vfs.InputVFile > files ) { for ( com.android.sched.vfs.InputVElement subFile : vDir . list () ) { if ( subFile . isVDir () ) { fillFiles ( ( ( com.android.sched.vfs.InputVDir ) ( subFile ) ) , files ) ; } else { files . add ( ( ( com.android.sched.vfs.InputVFile ) ( subFile ) ) ) ; } } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest ( ) throws java.lang.Exception { switchImsSmsFormat ( PhoneConstants.PHONE_TYPE_CDMA ) ; mImsSmsDispatcher . sendText ( STRING_CONSTANT , STRING_CONSTANT , com.android.internal.telephony.TAG , null , null , null , null , false ) ; org.mockito.Mockito . verify ( mSimulatedCommandsVerifier ) . sendImsCdmaSms ( ( ( byte [] ) ( org.mockito.Matchers . any () ) ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Matchers . any ( android.os.Message . class ) ) ; }
public void showInputMethodPickerFromClient ( com.android.internal.view.IInputMethodClient client ) { synchronized ( mMethodMap ) { if ( ( ( ( mCurClient ) == null ) || ( client == null ) ) || ( ( mCurClient.client . asBinder () ) != ( client . asBinder () ) ) ) { android.util.Slog . w ( com.android.server.InputMethodManagerService.TAG , ( STRING_CONSTANT + client ) ) ; } mHandler . sendEmptyMessage ( com.android.server.InputMethodManagerService.MSG_SHOW_IM_PICKER ) ; } }
@ java.lang.Override @ javax.annotation.Nonnull void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( isClosed () ) ; assert capabilities . contains ( Capabilities.WRITE ) ; java.io.File path = getNativeFile ( file . getPath () ) ; if ( ( ! ( path . delete () ) ) || ( path . exists () ) ) { throw new com.android.sched.util.file.CannotDeleteFileException ( file ) ; } }
private static boolean rangeIsValid ( com.android.jack.dx.rop.code.BasicBlock start , com.android.jack.dx.rop.code.BasicBlock end , com.android.jack.dx.dex.code.BlockAddresses addresses ) { assert start != null ; assert end != null ; int startAddress = addresses . getLast ( start ) . getAddress () ; int endAddress = addresses . getEnd ( end ) . getAddress () ; return ( endAddress - startAddress ) <= ( com.android.jack.dx.dex.code.StdCatchBuilder.MAX_CATCH_RANGE ) ; }
@ javax.annotation.Nonnull private com.android.jill.frontend.java.Variable getTempVarFromTopOfStackMinus1 ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame ) { com.android.jill.frontend.java.Variable topOfStackBeforeInst = getStackVariable ( frame , ( ( com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) - NUMBER_CONSTANT ) ) ; java.lang.String tmpVarId = STRING_CONSTANT + ( typeToUntypedDesc ( topOfStackBeforeInst . getType () ) ) ; com.android.jill.frontend.java.Variable tmpVariable = getVariable ( tmpVarId , tmpVarId , topOfStackBeforeInst . getType () ) ; return tmpVariable ; }
@ com.android.internal.annotations.VisibleForTesting protected boolean inSystemImage ( int callerUid ) { java.lang.String [] packages = mContext . getPackageManager () . getPackagesForUid ( callerUid ) ; if ( packages != null ) { for ( java.lang.String name : packages ) { try { android.content.pm.PackageInfo packageInfo = mContext . getPackageManager () . getPackageInfo ( name , NUMBER_CONSTANT ) ; if ( ( ( packageInfo.applicationInfo.flags ) & ( ApplicationInfo.FLAG_SYSTEM ) ) != NUMBER_CONSTANT ) { return true ; } } catch ( android.content.pm.PackageManager e ) { return false ; } } } return false ; }
private void validateSdk ( com.android.ide.eclipse.adt.internal.sdk.Sdk sdk ) { assertTrue ( STRING_CONSTANT , ( ( sdk . getTargets () . length ) > NUMBER_CONSTANT ) ) ; for ( com.android.sdklib.IAndroidTarget target : sdk . getTargets () ) { if ( ! ( validateSdk ( target ) ) ) { continue; } if ( false ) { org.eclipse.core.runtime.IStatus status = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetParser ( target ) . run ( new org.eclipse.core.runtime.NullProgressMonitor () ) ; if ( ( status . getCode () ) != ( org.eclipse.core.runtime.IStatus.OK ) ) { fail ( STRING_CONSTANT ) ; } } } }
public boolean isSameUpdatePackageAs ( java.lang.Package pkg ) { if ( ( ( mUpdatePkg ) != null ) && ( ( mUpdatePkg . canBeUpdatedBy ( pkg ) ) == ( com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE ) ) ) { return mUpdatePkg . getRevision () . equals ( pkg . getRevision () ) ; } return false ; }
@ java.lang.Override public void crunchPng ( java.io.File from , java.io.File to ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String [] command = new java.lang.String [] { mAaptLocation , STRING_CONSTANT , STRING_CONSTANT , from . getAbsolutePath () , STRING_CONSTANT , to . getAbsolutePath () } ; mCommandLineRunner . runCmdLine ( command , null ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public java.lang.Object [] toArray () { java.lang.Object [] a = c . toArray () ; for ( int i = NUMBER_CONSTANT ; i < ( a.length ) ; i ++ ) a [ i ] = new java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry <> ( ( ( java.util.Map.Entry < ? extends K , ? extends V > ) ( a [ i ] ) ) ) ; return a ; }
public android.bluetooth.BluetoothSocket createInsecureRfcommSocket ( int port ) throws java.io.IOException { if ( ! ( isBluetoothEnabled () ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; throw new java.io.IOException () ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - NUMBER_CONSTANT ) , false , false , this , port , null ) ; }
@ java.lang.Override public void log ( java.lang.Throwable exception , java.lang.String format , java.lang.Object . . . args ) { if ( exception != null ) { exception . printStackTrace () ; } java.lang.StringBuilder sb = new java.lang.StringBuilder () ; if ( format != null ) { sb . append ( java.lang.String . format ( format , args ) ) ; } if ( exception != null ) { sb . append ( exception . toString () ) ; } java.lang.System.err . println ( sb ) ; if ( exception != null ) { throw new java.lang.RuntimeException ( exception ) ; } }
android.bluetooth.BluetoothDevice [] getBondedDevices () { android.bluetooth.BluetoothDevice [] bondedDeviceList = new android.bluetooth.BluetoothDevice [ NUMBER_CONSTANT ] ; try { bondedDeviceList = mBondedDevices . toArray ( bondedDeviceList ) ; } catch ( java.lang.ArrayStoreException ee ) { errorLog ( STRING_CONSTANT ) ; } infoLog ( ( STRING_CONSTANT + ( bondedDeviceList.length ) ) ) ; return bondedDeviceList ; }
public void continueOperation ( android.content.Intent resolutionIntent , android.os.Bundle resolutionExtras ) { if ( ! ( isEnabled () ) ) { android.app.PendingIntent callbackIntent = resolutionIntent . getParcelableExtra ( android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT ) ; if ( callbackIntent != null ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; } return; } try { getIEuiccController () . continueOperation ( resolutionIntent , resolutionExtras ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public java.lang.CharSequence getAndroidCarrierNameForSubscription () { try { com.android.internal.telephony.ITelephony service = getITelephony () ; if ( service != null ) { return service . getSubscriptionCarrierName ( getSubId () ) ; } } catch ( android.os.RemoteException ex ) { ex . rethrowAsRuntimeException () ; } return null ; }
@ java.lang.Override public boolean onStopJob ( android.app.job.JobParameters params ) { if ( com.android.server.pm.PackageManagerService.DEBUG_DEXOPT ) { android.util.Log . i ( com.android.server.pm.BackgroundDexOptService.TAG , STRING_CONSTANT ) ; } if ( ( params . getJobId () ) == ( com.android.server.pm.BackgroundDexOptService.JOB_POST_BOOT_UPDATE ) ) { mAbortPostBootUpdate . set ( true ) ; return false ; } else { mAbortIdleOptimization . set ( true ) ; return true ; } }
public int indexOf ( com.android.jack.dx.rop.type.Type type ) { assert type != null ; throwIfNotPrepared () ; com.android.jack.dx.dex.file.TypeIdItem item = typeIds . get ( type ) ; if ( item == null ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + type ) ) ; } return item . getIndex () ; }
@ org.junit.BeforeClass public static void setUpClass ( ) throws java.lang.Exception { com.android.jack.Options fiboArgs = com.android.jack.TestTools . buildCommandLineArgs ( com.android.jack.TestTools . getJackTestFromBinaryName ( STRING_CONSTANT ) ) ; fiboArgs . addProperty ( Options.METHOD_FILTER . getName () , STRING_CONSTANT ) ; com.android.jack.gwt.BinaryLookup.hooks = new com.android.sched.util.RunnableHooks () ; com.android.jack.gwt.BinaryLookup.session = com.android.jack.TestTools . buildSession ( fiboArgs , com.android.jack.gwt.BinaryLookup.hooks ) ; com.android.jack.gwt.BinaryLookup.lookup = com.android.jack.gwt.BinaryLookup.session . getLookup () ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , int [] data ) { mRS . validate () ; validate2DRange ( xoff , yoff , w , h ) ; mRS . nAllocationData2D ( getIDSafe () , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * NUMBER_CONSTANT ) ) ; }
public void push ( final long value ) { if ( ( value == NUMBER_CONSTANT ) || ( value == NUMBER_CONSTANT ) ) { mv . visitInsn ( ( ( org.objectweb.asm.Opcodes.LCONST_0 ) + ( ( int ) ( value ) ) ) ) ; } else { mv . visitLdcInsn ( value ) ; } }
synchronized boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + type ) + STRING_CONSTANT ) + id ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return replyReportNative ( type , id , data ) ; }
public boolean hasNextShort ( int radix ) { java.util.regex.Pattern integerPattern = getIntegerPattern ( radix ) ; boolean isShortValue = false ; if ( hasNext ( integerPattern ) ) { java.lang.String intString = matcher . group () ; intString = removeLocaleInfo ( intString , int . class ) ; try { cachedNextValue = java.lang.Short . valueOf ( intString , radix ) ; isShortValue = true ; } catch ( java.lang.NumberFormatException e ) { matchSuccessful = false ; } } return isShortValue ; }
@ java.lang.Override @ javax.annotation.Nonnull public java.util.Iterator < com.android.jack.ir.ast.JMethodBodyCfg > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) { java.util.ArrayList < com.android.jack.ir.ast.JMethodBodyCfg > cfgList = new java.util.ArrayList <> () ; for ( com.android.jack.ir.ast.JMethod method : declaredType . getMethods () ) { com.android.jack.ir.ast.JAbstractMethodBody body = method . getBody () ; if ( body instanceof com.android.jack.ir.ast.JMethodBodyCfg ) { cfgList . add ( ( ( com.android.jack.ir.ast.JMethodBodyCfg ) ( body ) ) ) ; } } return cfgList . iterator () ; }
@ java.lang.Override public void setComponentEnabledSetting ( android.content.ComponentName componentName , int newState , int flags , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager . exists ( userId ) ) ) return; setEnabledSetting ( componentName . getPackageName () , componentName . getClassName () , newState , flags , userId , null ) ; }
public void processParameterAnnotations ( org.jf.dexlib.MethodIdItem method , org.jf.dexlib.AnnotationSetRefList parameterAnnotations ) { int cptParam = NUMBER_CONSTANT ; for ( org.jf.dexlib.AnnotationSetItem asi : parameterAnnotations . getAnnotationSets () ) { try { processGeneric ( ( ( ( STRING_CONSTANT + ( cptParam ++ ) ) + STRING_CONSTANT ) + ( method . getMethodString () ) ) , asi ) ; } catch ( com.android.jack.DifferenceFoundException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
private void terminateCall () { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log . d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , STRING_CONSTANT ) ; } int action = HeadsetClientHalConstants.CALL_ACTION_CHUP ; android.bluetooth.BluetoothHeadsetClientCall c = getCall ( BluetoothHeadsetClientCall.CALL_STATE_DIALING , BluetoothHeadsetClientCall.CALL_STATE_ALERTING , BluetoothHeadsetClientCall.CALL_STATE_ACTIVE ) ; if ( c != null ) { if ( com.android.bluetooth.hfpclient.NativeInterface . handleCallActionNative ( getByteAddress ( mCurrentDevice ) , action , NUMBER_CONSTANT ) ) { addQueuedAction ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TERMINATE_CALL , action ) ; } else { android.util.Log . e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , STRING_CONSTANT ) ; } } }
@ org.junit.Test public void testPublishConfigBuilderDefaults () { android.net.wifi.aware.PublishConfig publishConfig = new android.net.wifi.aware.PublishConfig.Builder () . build () ; collector . checkThat ( STRING_CONSTANT , publishConfig.mServiceName , org.hamcrest.core.IsEqual . equalTo ( null ) ) ; collector . checkThat ( STRING_CONSTANT , publishConfig.mPublishType , org.hamcrest.core.IsEqual . equalTo ( PublishConfig.PUBLISH_TYPE_UNSOLICITED ) ) ; collector . checkThat ( STRING_CONSTANT , publishConfig.mTtlSec , org.hamcrest.core.IsEqual . equalTo ( NUMBER_CONSTANT ) ) ; collector . checkThat ( STRING_CONSTANT , publishConfig.mEnableTerminateNotification , org.hamcrest.core.IsEqual . equalTo ( true ) ) ; }
public void test_tryLockJJZ_Shared ( ) throws java.lang.Exception { final long POSITION = NUMBER_CONSTANT ; final long SIZE = NUMBER_CONSTANT ; fileLock = readOnlyFileChannel . tryLock ( POSITION , SIZE , true ) ; assertTrue ( fileLock . isValid () ) ; assertTrue ( fileLock . isShared () ) ; assertSame ( readOnlyFileChannel , fileLock . channel () ) ; assertEquals ( POSITION , fileLock . position () ) ; assertEquals ( SIZE , fileLock . size () ) ; }
public static synchronized int getCacheVersion () { if ( org.apache.harmony.security.fortress.Services.needRefresh ) { ( org.apache.harmony.security.fortress.Services.cacheVersion ) ++ ; synchronized ( org.apache.harmony.security.fortress.Services.services ) { org.apache.harmony.security.fortress.Services.services . clear () ; } org.apache.harmony.security.fortress.Services.cachedSecureRandomService = null ; for ( java.security.Provider p : org.apache.harmony.security.fortress.Services.providers ) { org.apache.harmony.security.fortress.Services . initServiceInfo ( p ) ; } org.apache.harmony.security.fortress.Services.needRefresh = false ; } return org.apache.harmony.security.fortress.Services.cacheVersion ; }
private void updateDeviceNumberRow () { if ( ( deviceNumberTextView ) == null ) { return; } if ( ( isInMultiWindowMode ) || ( android.text.TextUtils . isEmpty ( primaryCallState.callbackNumber ) ) ) { deviceNumberTextView . setVisibility ( View.GONE ) ; deviceNumberDivider . setVisibility ( View.GONE ) ; return; } deviceNumberTextView . setText ( context . getString ( R.string.contact_grid_callback_number , primaryCallState.callbackNumber ) ) ; deviceNumberTextView . setVisibility ( View.VISIBLE ) ; if ( primaryInfo.shouldShowLocation ) { deviceNumberDivider . setVisibility ( View.VISIBLE ) ; } }
private void showCurrentSlide () { mPresenter . setLocation ( mPosition ) ; mPresenter . present ( null ) ; updateTitle () ; if ( mSlideshowModel . get ( mPosition ) . hasImage () ) { setReplaceButtonText ( R.string.replace_image ) ; } else { setReplaceButtonText ( R.string.add_picture ) ; } }
@ java.lang.Override public android.os.ParcelFileDescriptor createSocketChannel ( int type , java.lang.String serviceName , android.os.ParcelUuid uuid , int port , int flag ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return null ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return null ; } return service . createSocketChannel ( type , serviceName , uuid , port , flag ) ; }
@ java.lang.Override public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { org.eclipse.swt.widgets.TreeItem item = ( ( org.eclipse.swt.widgets.TreeItem ) ( e.item ) ) ; if ( item == null ) return; java.lang.Object selection = item . getData () ; if ( selection instanceof com.android.hierarchyviewerlib.device.IHvDevice ) { mModel . setSelection ( ( ( com.android.hierarchyviewerlib.device.IHvDevice ) ( selection ) ) , null ) ; } else if ( selection instanceof com.android.hierarchyviewerlib.models.Window ) { mModel . setSelection ( ( ( com.android.hierarchyviewerlib.models.Window ) ( selection ) ) . getHvDevice () , ( ( com.android.hierarchyviewerlib.models.Window ) ( selection ) ) ) ; } }
@ java.lang.Override public synchronized void testRunEnded ( long elapsedTime , java.util.Map < java.lang.String , java.lang.String > runMetrics ) { ( mRunCount ) -- ; if ( ( mRunCount ) > NUMBER_CONSTANT ) { return; } notifyTestRunEnded ( elapsedTime ) ; com.android.ide.eclipse.adt.AdtPlugin . printToConsole ( mLaunchInfo . getProject () , LaunchMessages.RemoteAdtTestRunner_RunCompleteMsg ) ; }
public void testReplacedFile ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > mergedMap = merger . getDataMap () ; java.util.List < com.android.ide.common.res2.ResourceItem > values = mergedMap . get ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , values . size () ) ; com.android.ide.common.res2.ResourceItem layout = values . get ( NUMBER_CONSTANT ) ; assertNotNull ( layout . getValue () ) ; }
public boolean resetPnoList () { android.util.Log . e ( com.android.server.wifi.WifiNative.TAG , ( STRING_CONSTANT + ( com.android.server.wifi.WifiNative.sPnoCmdId ) ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { com.android.server.wifi.WifiNative.sPnoCmdId = com.android.server.wifi.WifiNative . getNewCmdIdLocked () ; com.android.server.wifi.WifiNative.sPnoEventHandler = null ; if ( com.android.server.wifi.WifiNative . resetPnoListNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sPnoCmdId ) ) { return true ; } } return false ; } }
@ java.lang.Override public com.android.dialer.voicemail.listui.NewVoicemailViewHolder onCreateViewHolder ( android.view.ViewGroup viewGroup , int viewType ) { android.view.LayoutInflater inflater = android.view.LayoutInflater . from ( viewGroup . getContext () ) ; android.view.View view = inflater . inflate ( R.layout.new_voicemail_entry , viewGroup , false ) ; com.android.dialer.voicemail.listui.NewVoicemailViewHolder newVoicemailViewHolder = new com.android.dialer.voicemail.listui.NewVoicemailViewHolder ( view , clock , this ) ; newVoicemailViewHolderSet . add ( newVoicemailViewHolder ) ; return newVoicemailViewHolder ; }
private boolean isLauncherIcon ( java.lang.String name ) { assert ( name . indexOf ( CHAR_CONS ) ) == ( - NUMBER_CONSTANT ) : name ; if ( name . startsWith ( STRING_CONSTANT ) ) { return true ; } return ( ( mLauncherIcons ) != null ) && ( mLauncherIcons . contains ( name ) ) ; }
public void testNotMergedAttr ( ) throws java.lang.Exception { com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger () ; java.io.File folder = getWrittenResources () ; com.android.ide.common.res2.ResourceSet writtenSet = new com.android.ide.common.res2.ResourceSet ( STRING_CONSTANT ) ; writtenSet . addSource ( folder ) ; writtenSet . loadFromFiles ( logger ) ; java.util.List < com.android.ide.common.res2.ResourceItem > items = writtenSet . getDataMap () . get ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , items . size () ) ; assertTrue ( items . get ( NUMBER_CONSTANT ) . getIgnoredFromDiskMerge () ) ; checkLogger ( logger ) ; }
@ java.lang.Override protected com.android.internal.telephony.SmsTracker getNewSubmitPduTracker ( java.lang.String destinationAddress , java.lang.String scAddress , java.lang.String message , com.android.internal.telephony.SmsHeader smsHeader , int format , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , boolean lastPart , java.util.concurrent.atomic.AtomicInteger unsentPartCount , java.util.concurrent.atomic.AtomicBoolean anyPartFailed , android.net.Uri messageUri , java.lang.String fullMessageText ) { android.telephony.Rlog . e ( com.android.internal.telephony.ImsSMSDispatcher.TAG , STRING_CONSTANT ) ; return null ; }
public boolean performDexOpt ( java.lang.String packageName ) { com.android.server.pm.PackageManagerService . enforceSystemOrRoot ( STRING_CONSTANT ) ; if ( ! ( mNoDexOpt ) ) { return false ; } android.content.pm.PackageParser.Package p ; synchronized ( mPackages ) { p = mPackages . get ( packageName ) ; if ( ( p == null ) || ( p.mDidDexOpt ) ) { return false ; } } synchronized ( mInstallLock ) { return ( performDexOptLI ( p , false , false , true ) ) == ( com.android.server.pm.PackageManagerService.DEX_OPT_PERFORMED ) ; } }
private void setPosition ( java.nio.ByteBuffer out ) { if ( out . hasArray () ) { out . position ( ( ( data [ java.nio.charset.CharsetEncoderICU.OUTPUT_OFFSET ] ) - ( out . arrayOffset () ) ) ) ; } else { out . put ( output , NUMBER_CONSTANT , data [ java.nio.charset.CharsetEncoderICU.OUTPUT_OFFSET ] ) ; } output = null ; }
private static android.net.wifi.WifiScanner.ScanData createScanData ( int [] freqs , int bucketsScanned ) { android.net.wifi.ScanResult [] results = new android.net.wifi.ScanResult [ freqs.length ] ; for ( int i = NUMBER_CONSTANT ; i < ( freqs.length ) ; ++ i ) { results [ i ] = com.android.server.wifi.ScanTestUtil . createScanResult ( freqs [ i ] ) ; } return new android.net.wifi.WifiScanner.ScanData ( NUMBER_CONSTANT , NUMBER_CONSTANT , bucketsScanned , false , results ) ; }
@ android.annotation.SystemApi public void continueOperation ( android.content.Intent resolutionIntent , android.os.Bundle resolutionExtras ) { if ( ! ( isEnabled () ) ) { android.app.PendingIntent callbackIntent = resolutionIntent . getParcelableExtra ( android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT ) ; if ( callbackIntent != null ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; } return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . continueOperation ( resolutionIntent , resolutionExtras ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public void testAbiOnlyWithUniversalMatch () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput ( NUMBER_CONSTANT ) ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
private void assertNetworkStats ( java.lang.String iface , com.android.server.connectivity.tethering.OffloadHardwareInterface.ForwardedStats stats , android.net.NetworkStats.Entry entry ) { org.junit.Assert . assertEquals ( iface , entry.iface ) ; org.junit.Assert . assertEquals ( stats.rxBytes , entry.rxBytes ) ; org.junit.Assert . assertEquals ( stats.txBytes , entry.txBytes ) ; org.junit.Assert . assertEquals ( android.net.NetworkStats.SET_DEFAULT , entry.set ) ; org.junit.Assert . assertEquals ( android.net.NetworkStats.TAG_NONE , entry.tag ) ; }
@ javax.annotation.Nonnull private com.android.jill.frontend.java.Variable getTempVarFromTopOfStackMinus1 ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame ) { com.android.jill.frontend.java.Variable topOfStackBeforeInst = getStackVariable ( frame , ( ( com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) - NUMBER_CONSTANT ) ) ; java.lang.String tmpVarId = STRING_CONSTANT + ( typeToUntypedDesc ( topOfStackBeforeInst . getType () ) ) ; com.android.jill.frontend.java.Variable tmpVariable = getVariable ( tmpVarId , tmpVarId , topOfStackBeforeInst . getType () , null ) ; return tmpVariable ; }
@ com.android.annotations.NonNull static com.android.build.gradle.internal.model.SourceProviderImpl cloneProvider ( com.android.builder.model.SourceProvider sourceProvider ) { com.android.build.gradle.internal.model.SourceProviderImpl sourceProviderClone = new com.android.build.gradle.internal.model.SourceProviderImpl () ; sourceProviderClone.manifestFile = sourceProvider . getManifestFile () ; sourceProviderClone.javaDirs = sourceProvider . getJavaDirectories () ; sourceProviderClone.resourcesDirs = sourceProvider . getResourcesDirectories () ; sourceProviderClone.aidlDirs = sourceProvider . getAidlDirectories () ; sourceProviderClone.rsDirs = sourceProvider . getRenderscriptDirectories () ; sourceProviderClone.jniDirs = sourceProvider . getJniDirectories () ; sourceProviderClone.resDirs = sourceProvider . getResDirectories () ; sourceProviderClone.assetsDirs = sourceProvider . getAssetsDirectories () ; return sourceProviderClone ; }
private boolean isExpectingError ( java.lang.String expectedOutput ) throws java.io.IOException { java.io.StringReader stringReader = new java.io.StringReader ( expectedOutput ) ; java.io.BufferedReader reader = new java.io.BufferedReader ( stringReader ) ; java.lang.String line ; while ( ( line = reader . readLine () ) != null ) { if ( line . startsWith ( STRING_CONSTANT ) ) return true ; } return false ; }
@ java.lang.Override protected boolean dependsOnLibrary ( @ com.android.annotations.NonNull java.lang.String pkg ) { if ( ! ( isAndroidProject () ) ) { return false ; } if ( pkg . equals ( mProject . getPackage () ) ) { return true ; } for ( com.android.tools.gradle.eclipse.EclipseProject project : mProject . getAllLibraries () ) { if ( ( project . isAndroidProject () ) && ( pkg . equals ( project . getPackage () ) ) ) { return true ; } } return false ; }
public void testCanEncodeCharSequence () { assertTrue ( encoder . canEncode ( STRING_CONSTANT ) ) ; assertTrue ( encoder . canEncode ( STRING_CONSTANT ) ) ; assertTrue ( encoder . canEncode ( STRING_CONSTANT ) ) ; assertTrue ( encoder . canEncode ( STRING_CONSTANT ) ) ; assertFalse ( encoder . canEncode ( STRING_CONSTANT ) ) ; }
public void test_isClosed ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket () ; assertFalse ( theSocket . isClosed () ) ; theSocket . close () ; assertTrue ( theSocket . isClosed () ) ; java.net.InetSocketAddress theAddress = new java.net.InetSocketAddress ( java.net.InetAddress . getLocalHost () , NUMBER_CONSTANT ) ; theSocket = new java.net.DatagramSocket ( theAddress ) ; assertFalse ( theSocket . isClosed () ) ; theSocket . close () ; assertTrue ( theSocket . isClosed () ) ; }
@ java.lang.Override public android.os.IBinder onBind ( android.content.Intent intent ) { if ( com.android.bluetooth.btservice.ProfileService.DBG ) { android.util.Log . d ( mName , STRING_CONSTANT ) ; } if ( ( ( mAdapter ) != null ) && ( ( mBinder ) == null ) ) { throw new java.lang.UnsupportedOperationException ( ( STRING_CONSTANT + ( mName ) ) ) ; } return mBinder ; }
public void outjars ( java.util.Map filterArgs , java.lang.Object outJarFiles ) throws proguard.gradle.ParseException { this . outJarFiles . add ( outJarFiles ) ; this . outJarFilters . add ( filterArgs ) ; this . inJarCounts . add ( java.lang.Integer . valueOf ( inJarFiles . size () ) ) ; }
public static java.lang.Object getDeserilizedObject ( java.lang.Object inputObject ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream () ; java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream ( bos ) ; oos . writeObject ( inputObject ) ; oos . close () ; java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream ( bos . toByteArray () ) ; java.io.ObjectInputStream ois = new java.io.ObjectInputStream ( bis ) ; java.lang.Object outputObject = ois . readObject () ; ois . close () ; return outputObject ; }
public void testGetSupportedClientKeyTypes ( ) throws java.lang.Exception { byte [] allClientCertificateTypes = new byte [ NUMBER_CONSTANT ] ; for ( int i = NUMBER_CONSTANT ; i < ( allClientCertificateTypes.length ) ; i ++ ) { allClientCertificateTypes [ i ] = ( ( byte ) ( i ) ) ; } assertEquals ( new java.util.HashSet < java.lang.String > ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) , org.conscrypt.SSLParametersImpl . getSupportedClientKeyTypes ( allClientCertificateTypes ) ) ; }
public void testInterrupted ( ) throws java.io.IOException { java.nio.channels.Selector selector = java.nio.channels.Selector . open () ; java.lang.Thread . currentThread () . interrupt () ; try { int count = selector . select () ; assertEquals ( NUMBER_CONSTANT , count ) ; assertTrue ( java.lang.Thread . currentThread () . isInterrupted () ) ; } finally { java.lang.Thread . interrupted () ; selector . close () ; } }
@ android.test.suitebuilder.annotation.SmallTest public void testDeviceAddressFilter () { if ( ( mFilterBuilder ) == null ) return; android.bluetooth.le.ScanFilter filter = mFilterBuilder . setDeviceAddress ( android.bluetooth.cts.ScanFilterTest.DEVICE_MAC ) . build () ; assertEquals ( android.bluetooth.cts.ScanFilterTest.DEVICE_MAC , filter . getDeviceAddress () ) ; assertTrue ( STRING_CONSTANT , filter . matches ( mScanResult ) ) ; filter = mFilterBuilder . setDeviceAddress ( STRING_CONSTANT ) . build () ; assertFalse ( STRING_CONSTANT , filter . matches ( mScanResult ) ) ; }
private void computeDetectors ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project ) { mCurrentFolderType = null ; mCurrentVisitor = null ; com.android.tools.lint.client.api.Configuration configuration = project . getConfiguration ( this ) ; mScopeDetectors = new java.util.EnumMap < com.android.tools.lint.detector.api.Scope , java.util.List < com.android.tools.lint.detector.api.Detector > > ( com.android.tools.lint.detector.api.Scope . class ) ; mApplicableDetectors = mRegistry . createDetectors ( mClient , configuration , mScope , mScopeDetectors ) ; validateScopeList () ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , java.lang.String [] args ) { if ( supports ( klass ) ) { return new vogar.target.junit.JUnitTargetRunner ( monitor , skipPastReference , testEnvironment , timeoutSeconds , klass , qualification , args ) ; } else { return null ; } }
@ java.lang.Override public int getProfileConnectionState ( int profile ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } return service . getProfileConnectionState ( profile ) ; }
public void getDownloadableSubscriptionMetadata ( android.telephony.euicc.DownloadableSubscription subscription , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { getIEuiccController () . getDownloadableSubscriptionMetadata ( subscription , mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
@ org.junit.Test public void testSetCurrentNetworkBssid ( ) throws java.lang.Exception { java.lang.String bssidStr = STRING_CONSTANT ; org.mockito.Mockito . when ( mSupplicantStaNetworkMock . setBssid ( org.mockito.Matchers . eq ( bssidStr ) ) ) . thenReturn ( true ) ; executeAndValidateInitializationSequence () ; assertFalse ( mDut . setCurrentNetworkBssid ( bssidStr ) ) ; org.mockito.Mockito . verify ( mSupplicantStaNetworkMock , org.mockito.Mockito . never () ) . setBssid ( org.mockito.Matchers . eq ( bssidStr ) ) ; executeAndValidateConnectSequence ( NUMBER_CONSTANT , false ) ; assertTrue ( mDut . setCurrentNetworkBssid ( bssidStr ) ) ; org.mockito.Mockito . verify ( mSupplicantStaNetworkMock ) . setBssid ( org.mockito.Matchers . eq ( bssidStr ) ) ; }
public static com.android.manifmerger.XmlDocument load ( com.android.manifmerger.KeyResolver < java.lang.String > selectors , com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver < com.android.manifmerger.ManifestMerger2.SystemProperty > systemPropertyResolver , com.android.ide.common.blame.SourceFile sourceFile , java.lang.String xml , com.android.manifmerger.XmlDocument.Type type , com.google.common.base.Optional < java.lang.String > mainManifestPackageName ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { org.w3c.dom.Document domDocument = com.android.utils.PositionXmlParser . parse ( xml ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( sourceFile , selectors , systemPropertyResolver , domDocument . getDocumentElement () , type , mainManifestPackageName ) : null ; }
public static boolean contains ( java.lang.String dirPath , java.lang.String filePath ) { if ( dirPath . equals ( filePath ) ) { return true ; } if ( ! ( dirPath . endsWith ( STRING_CONSTANT ) ) ) { dirPath += STRING_CONSTANT ; } return filePath . startsWith ( dirPath ) ; }
public void test_isJavaIdentifierStartC () { assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaIdentifierStart ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaIdentifierStart ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaIdentifierStart ( CHAR_CONS ) ) ; assertFalse ( STRING_CONSTANT , java.lang.Character . isJavaIdentifierStart ( CHAR_CONS ) ) ; assertFalse ( STRING_CONSTANT , java.lang.Character . isJavaIdentifierStart ( CHAR_CONS ) ) ; assertFalse ( STRING_CONSTANT , java.lang.Character . isJavaIdentifierStart ( CHAR_CONS ) ) ; }
@ org.junit.Test public void useTelephonyCountryCode ( ) throws java.lang.Exception { mWifiCountryCode . setCountryCode ( mTelephonyCountryCode ) ; org.junit.Assert . assertEquals ( null , mWifiCountryCode . getCountryCodeSentToDriver () ) ; mWifiCountryCode . setReadyForChange ( true ) ; mWifiCountryCode . setReadyForChange ( false ) ; org.mockito.Mockito . verify ( mWifiNative ) . setCountryCode ( org.mockito.Mockito . anyString () ) ; org.junit.Assert . assertEquals ( mTelephonyCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { super . setUp () ; testFile = java.io.File . createTempFile ( STRING_CONSTANT , null ) ; testDir = new java.io.File ( ( ( java.lang.System . getProperty ( STRING_CONSTANT ) ) + STRING_CONSTANT ) ) ; if ( ! ( testDir . exists () ) ) { testDir . mkdir () ; } root = false ; }
@ java.lang.Override public void onDraw ( final android.graphics.Canvas canvas ) { mFactory . startYourEngines ( true ) ; if ( checkNeedsPost () ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable () { @ java.lang.Override public void run () { onDraw ( canvas ) ; } } ) ; return; } mAwContents . onDraw ( canvas ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public void bluetoothSocketConnBeginAcceptThreadPsm ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = STRING_CONSTANT ) java.lang.Integer timeout , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = STRING_CONSTANT ) java.lang.Boolean isBle , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = STRING_CONSTANT ) java.lang.Boolean securedConn , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM ) java.lang.Integer psmValue ) throws java.io.IOException { com.googlecode.android_scripting.Log . d ( ( STRING_CONSTANT + psmValue ) ) ; com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread ( psmValue . intValue () , timeout . intValue () , isBle , securedConn ) ; acceptThread . start () ; mAcceptThread = acceptThread ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { if ( ( mUiRootNode ) != null ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode node = ( ( mUiRootNode . getUiParent () ) != null ) ? mUiRootNode . getUiParent () : mUiRootNode ; if ( node != null ) { node . removeUpdateListener ( mUiRefreshListener ) ; } mUiRootNode . removeUpdateListener ( mUiEnableListener ) ; } com.android.ide.eclipse.adt.AdtPlugin . getDefault () . removeTargetListener ( targetListener ) ; if ( ( mClipboard ) != null ) { mClipboard . dispose () ; mClipboard = null ; } }
private static java.lang.String generateModuleResultSignature ( com.android.compatibility.common.util.IModuleResult module , java.lang.String buildFingerprint ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; sb . append ( buildFingerprint ) . append ( com.android.compatibility.common.util.ChecksumReporter.SEPARATOR ) . append ( module . getId () ) . append ( com.android.compatibility.common.util.ChecksumReporter.SEPARATOR ) . append ( module . isDone () ) . append ( com.android.compatibility.common.util.ChecksumReporter.SEPARATOR ) . append ( module . countResults ( TestStatus.FAIL ) ) ; return sb . toString () ; }
public static java.lang.String format ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { java.lang.String formatted = STRING_CONSTANT ; if ( ( message != null ) && ( ( message . length () ) > NUMBER_CONSTANT ) ) formatted = message + STRING_CONSTANT ; return ( ( ( ( formatted + STRING_CONSTANT ) + expected ) + STRING_CONSTANT ) + actual ) + STRING_CONSTANT ; }
private void testOutputPKCS1Padding ( byte expectedBlockType , java.security.Key encryptKey , java.security.Key decryptKey ) throws java.lang.Exception { javax.crypto.Cipher encryptCipher = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; encryptCipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , encryptKey ) ; byte [] cipherText = encryptCipher . doFinal ( libcore.javax.crypto.CipherTest.ORIGINAL_PLAIN_TEXT ) ; javax.crypto.Cipher decryptCipher = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; decryptCipher . init ( javax.crypto.Cipher.DECRYPT_MODE , decryptKey ) ; byte [] plainText = decryptCipher . doFinal ( cipherText ) ; assertPadding ( encryptKey , expectedBlockType , libcore.javax.crypto.CipherTest.ORIGINAL_PLAIN_TEXT , plainText ) ; }
public void run () { com.android.rs.test_v14.RenderScript pRS = com.android.rs.test_v14.RenderScript . create ( mCtx ) ; com.android.rs.test_v14.ScriptC_vector s = new com.android.rs.test_v14.ScriptC_vector ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; if ( ! ( initializeGlobals ( s ) ) ) { result = - NUMBER_CONSTANT ; } else { s . invoke_vector_test () ; pRS . finish () ; waitForMessage () ; } pRS . destroy () ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public void bluetoothSocketConnBeginAcceptThreadUuid ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_UUID ) java.lang.String uuid , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcDefault ( value = STRING_CONSTANT ) java.lang.Integer timeout ) throws java.io.IOException { com.googlecode.android_scripting.Log . d ( ( STRING_CONSTANT + uuid ) ) ; com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread ( uuid , timeout . intValue () ) ; acceptThread . start () ; mAcceptThread = acceptThread ; }
public void run () { com.android.rs.test_v11.RenderScript pRS = com.android.rs.test_v11.RenderScript . create ( mCtx ) ; com.android.rs.test_v11.ScriptC_rstypes s = new com.android.rs.test_v11.ScriptC_rstypes ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . invoke_test_rstypes ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; pRS . finish () ; waitForMessage () ; pRS . destroy () ; }
@ java.lang.Override void test () { java.lang.String listeners = android.provider.Settings.Secure . getString ( getContentResolver () , com.android.cts.verifier.notifications.ENABLED_NOTIFICATION_LISTENERS ) ; if ( ( listeners == null ) || ( ! ( listeners . contains ( com.android.cts.verifier.notifications.LISTENER_PATH ) ) ) ) { status = PASS ; } else { status = WAIT_FOR_USER ; } }
private void printCharacterData ( org.w3c.dom.Node node ) { java.lang.String nodeValue = node . getNodeValue () ; boolean separateLine = ( nodeValue . indexOf ( CHAR_CONS ) ) != ( - NUMBER_CONSTANT ) ; if ( separateLine && ( ! ( endsWithLineSeparator () ) ) ) { mOut . append ( mLineSeparator ) ; } mOut . append ( STRING_CONSTANT ) ; mOut . append ( nodeValue ) ; mOut . append ( STRING_CONSTANT ) ; if ( separateLine ) { mOut . append ( mLineSeparator ) ; } }
public void sayHi ( java.lang.Runnable r , java.util.function.Consumer < java.lang.String > reporter ) { reporter . accept ( STRING_CONSTANT ) ; Start ( reporter ) ; reporter . accept ( STRING_CONSTANT ) ; r . run () ; reporter . accept ( STRING_CONSTANT ) ; Finish ( reporter ) ; reporter . accept ( STRING_CONSTANT ) ; }
private static void generateTestManifest ( @ com.android.annotations.NonNull java.lang.String testPackageName , @ com.android.annotations.Nullable java.lang.String minSdkVersion , @ com.android.annotations.Nullable java.lang.String targetSdkVersion , @ com.android.annotations.NonNull java.lang.String testedPackageName , @ com.android.annotations.NonNull java.lang.String instrumentationRunner , @ com.android.annotations.NonNull java.lang.Boolean handleProfiling , @ com.android.annotations.NonNull java.lang.Boolean functionalTest , @ com.android.annotations.NonNull java.io.File outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator . generate () ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
@ android.test.suitebuilder.annotation.SmallTest public void testConstructorWithTwoDigitMnc () { final java.lang.String mncWithTwoDigit = STRING_CONSTANT ; android.telephony.CellIdentityGsm ci = new android.telephony.CellIdentityGsm ( com.android.internal.telephony.CellIdentityGsmTest.LAC , com.android.internal.telephony.CellIdentityGsmTest.CID , com.android.internal.telephony.CellIdentityGsmTest.ARFCN , com.android.internal.telephony.CellIdentityGsmTest.BSIC , com.android.internal.telephony.CellIdentityGsmTest.MCC_STR , mncWithTwoDigit , com.android.internal.telephony.CellIdentityGsmTest.ALPHA_LONG , com.android.internal.telephony.CellIdentityGsmTest.ALPHA_SHORT ) ; assertEquals ( com.android.internal.telephony.CellIdentityGsmTest.MCC , ci . getMcc () ) ; assertEquals ( NUMBER_CONSTANT , ci . getMnc () ) ; assertEquals ( com.android.internal.telephony.CellIdentityGsmTest.MCC_STR , ci . getMccStr () ) ; assertEquals ( mncWithTwoDigit , ci . getMncStr () ) ; assertEquals ( ( ( com.android.internal.telephony.CellIdentityGsmTest.MCC_STR ) + mncWithTwoDigit ) , ci . getMobileNetworkOperator () ) ; }
@ java.lang.Override public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { if ( element . hasAttributeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_TITLE ) ) { return; } if ( ( context . getMainProject () . getTargetSdk () ) < NUMBER_CONSTANT ) { return; } if ( com.android.SdkConstants.VALUE_FALSE . equals ( element . getAttributeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_VISIBLE ) ) ) { return; } java.lang.String message = STRING_CONSTANT ; context . report ( com.android.tools.lint.checks.TitleDetector.ISSUE , element , context . getLocation ( element ) , message ) ; }
boolean startVoiceRecognition ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , STRING_CONSTANT ) ; int connectionState = mStateMachine . getConnectionState ( device ) ; if ( ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) && ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTING ) ) ) { return false ; } mStateMachine . sendMessage ( HeadsetStateMachine.VOICE_RECOGNITION_START , device ) ; return true ; }
@ java.lang.Override public void run () { java.io.InputStreamReader is = new java.io.InputStreamReader ( process . getInputStream () ) ; java.io.BufferedReader outReader = new java.io.BufferedReader ( is ) ; try { while ( true ) { java.lang.String line = outReader . readLine () ; if ( line != null ) { com.android.ide.eclipse.adt.AdtPlugin . printBuildToConsole ( BuildVerbosity.VERBOSE , project , line ) ; } else { break; } } } catch ( java.io.IOException e ) {} }
private void writeReturn ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , int stackIdx ) throws java.io.IOException { writeDebugBegin ( currentClass , currentLine ) ; writer . writeCatchBlockIds ( currentCatchList ) ; writer . writeKeyword ( Token.RETURN_STATEMENT ) ; writer . writeOpen () ; if ( stackIdx == NUMBER_CONSTANT ) { writer . writeNull () ; } else { writeStackAccess ( frame , stackIdx ) ; } writeDebugEnd ( currentClass , currentLine ) ; writer . writeClose () ; }
public boolean startLoggingRingBuffer ( int verboseLevel , int flags , int maxInterval , int minDataSize , java.lang.String ringName ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { return com.android.server.wifi.WifiNative . startLoggingRingBufferNative ( com.android.server.wifi.WifiNative.sWlan0Index , verboseLevel , flags , maxInterval , minDataSize , ringName ) ; } else { return false ; } } }
final void chompNewline ( ) throws java.io.IOException { if ( ( ( ( pos ) != ( end ) ) || ( ( fillBuf () ) != ( - NUMBER_CONSTANT ) ) ) && ( ( buf [ pos ] ) == CHAR_CONS ) ) { ++ ( pos ) ; } }
public void stopScan () { com.android.internal.telephony.ITelephony telephony = getITelephony () ; if ( telephony == null ) { android.telephony.Rlog . e ( android.telephony.NetworkScan.TAG , STRING_CONSTANT ) ; } try { telephony . stopNetworkScan ( mSubId , mScanId ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog . e ( android.telephony.NetworkScan.TAG , STRING_CONSTANT , ex ) ; } }
@ java.lang.Override public void rootsChanged ( com.intellij.openapi.roots.ModuleRootEvent event ) { java.util.Map < com.intellij.openapi.fileEditor.impl.VirtualFile , com.intellij.openapi.fileEditor.impl.NonProjectFileWritingAccessProvider.AccessStatus > files = com.intellij.openapi.fileEditor.impl.NonProjectFileWritingAccessProvider . getRegisteredFiles ( project ) ; for ( com.intellij.openapi.fileEditor.impl.VirtualFile each : new java.util.ArrayList < com.intellij.openapi.fileEditor.impl.VirtualFile > ( files . keySet () ) ) { if ( isProjectFile ( each ) ) { files . remove ( each ) ; } } }
private void cancelUserTimeoutAlarm () { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; android.content.Intent timeoutIntent = new android.content.Intent ( com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION ) ; android.app.PendingIntent pIntent = android.app.PendingIntent . getBroadcast ( this , NUMBER_CONSTANT , timeoutIntent , NUMBER_CONSTANT ) ; pIntent . cancel () ; android.app.AlarmManager alarmManager = ( ( android.app.AlarmManager ) ( this . getSystemService ( Context.ALARM_SERVICE ) ) ) ; alarmManager . cancel ( pIntent ) ; mRemoveTimeoutMsg = false ; }
@ java.lang.Override public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.ble_server_start ) ; setPassFailButtonClickListeners () ; getPassButton () . setEnabled ( false ) ; mTestAdapter = new com.android.cts.verifier.bluetooth.TestAdapter ( this , setupTestList () ) ; android.widget.ListView listView = ( ( android.widget.ListView ) ( findViewById ( R.id.ble_server_tests ) ) ) ; listView . setAdapter ( mTestAdapter ) ; mPassed = NUMBER_CONSTANT ; mHandler = new android.os.Handler () ; }
@ java.lang.Override public void run () { try { com.intellij.openapi.externalSystem.util.ExternalSystemUtil . refreshProject ( project , myExternalSystemId , externalProjectPath , callback , false , true ) ; } catch ( java.lang.IllegalArgumentException e ) { exRef . set ( new com.intellij.openapi.options.ConfigurationException ( e . getMessage () , com.intellij.openapi.externalSystem.util.ExternalSystemBundle . message ( STRING_CONSTANT , externalSystemName ) ) ) ; } }
public void testVrHighPerformanceVP9 ( ) throws java.lang.Exception { if ( ! ( supportsVrHighPerformance () ) ) { android.cts.util.MediaUtils . skipTest ( android.media.cts.DecoderTest.TAG , STRING_CONSTANT ) ; return; } assertTrue ( android.media.cts.DecoderTest . doesMimeTypeHaveMinimumSpecVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_VP9 ) ) ; boolean vp9IsReady = android.media.cts.DecoderTest . doesMimeTypeHaveVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_VP9 ) ; if ( ! vp9IsReady ) { android.cts.util.MediaUtils . skipTest ( android.media.cts.DecoderTest.TAG , STRING_CONSTANT ) ; return; } decodeInParallel ( R.raw.bbb_s2_1920x1080_webm_vp9_0p41_10mbps_60fps_vorbis_6ch_384kbps_22050hz , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( method ) ; com.android.jack.transformations.ast.IncDecRemover.IncDecRemoverVisitor rca = new com.android.jack.transformations.ast.IncDecRemover.IncDecRemoverVisitor ( tr ) ; rca . accept ( method ) ; tr . commit () ; }
private boolean isPublicNullaryConstructor ( com.intellij.psi.PsiMethod method ) { if ( ( method . getParameterList () . getParametersCount () ) > NUMBER_CONSTANT ) { return false ; } com.intellij.psi.PsiModifierList modifierList = method . getModifierList () ; if ( modifierList . hasModifierProperty ( PsiModifier.PUBLIC ) ) { return true ; } return false ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { mTestProc = new java.io.File ( android.support.test.InstrumentationRegistry . getContext () . getFilesDir () , STRING_CONSTANT ) ; if ( mTestProc . exists () ) { libcore.io.IoUtils . deleteContents ( mTestProc ) ; } mFactory = new com.android.internal.net.NetworkStatsFactory ( mTestProc , false ) ; }
public void testException () { logWriter . println ( STRING_CONSTANT ) ; synchronizer . receiveMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; java.lang.String exceptionClassSignature = STRING_CONSTANT ; org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createExceptionEventBuilder ( exceptionClassSignature , true , false ) ; testEventWithInstanceOnlyModifier ( builder ) ; logWriter . println ( STRING_CONSTANT ) ; }
@ java.lang.Override public boolean isDiscovering () { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . isDiscovering () ; }
public void testRemove () { java.util.concurrent.DelayQueue q = populatedQueue ( jsr166.SIZE ) ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) { assertEquals ( new jsr166.DelayQueueTest.PDelay ( i ) , q . remove () ) ; } try { q . remove () ; shouldThrow () ; } catch ( java.util.NoSuchElementException success ) {} }
private boolean overridesIsValidFragment ( com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass ) { java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedMethod > resolvedMethods = resolvedClass . getMethods ( com.android.tools.lint.checks.PreferenceActivityDetector.IS_VALID_FRAGMENT , false ) ; for ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod resolvedMethod : resolvedMethods ) { if ( ( ( resolvedMethod . getArgumentCount () ) == NUMBER_CONSTANT ) && ( resolvedMethod . getArgumentType ( NUMBER_CONSTANT ) . getName () . equals ( com.android.tools.lint.client.api.JavaParser.TYPE_STRING ) ) ) { return true ; } } return false ; }
public void initialize ( int strength , java.security.SecureRandom random ) { this . strength = strength ; if ( random != null ) { this . random = random ; } java.security.spec.ECGenParameterSpec ecParams = ( ( java.security.spec.ECGenParameterSpec ) ( org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi.EC.ecParameters . get ( org.bouncycastle.util.Integers . valueOf ( strength ) ) ) ) ; if ( ecParams == null ) { throw new java.security.InvalidParameterException ( STRING_CONSTANT ) ; } try { initialize ( ecParams , random ) ; } catch ( java.security.InvalidAlgorithmParameterException e ) { throw new java.security.InvalidParameterException ( STRING_CONSTANT ) ; } }
private com.android.builder.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest () { return versionName ; } } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , STRING_CONSTANT ) ; return variant ; }
private void callStatusCallback ( android.bluetooth.BluetoothHealthAppConfiguration config , int status ) { if ( com.android.bluetooth.hdp.HealthService.VDBG ) { android.util.Log . d ( com.android.bluetooth.hdp.HealthService.TAG , ( ( ( STRING_CONSTANT + config ) + STRING_CONSTANT ) + status ) ) ; } android.bluetooth.IBluetoothHealthCallback callback = mApps . get ( config ) . mCallback ; if ( callback == null ) { android.util.Log . e ( com.android.bluetooth.hdp.HealthService.TAG , STRING_CONSTANT ) ; } try { callback . onHealthAppConfigurationStatusChange ( config , status ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( com.android.bluetooth.hdp.HealthService.TAG , ( STRING_CONSTANT + e ) ) ; } }
public static int insertProviderAt ( java.security.Provider provider , int position ) { synchronized ( org.apache.harmony.security.fortress.Services.providers ) { int size = org.apache.harmony.security.fortress.Services.providers . size () ; if ( ( position < NUMBER_CONSTANT ) || ( position > size ) ) { position = size + NUMBER_CONSTANT ; } org.apache.harmony.security.fortress.Services.providers . add ( ( position - NUMBER_CONSTANT ) , provider ) ; org.apache.harmony.security.fortress.Services.providersNames . put ( provider . getName () , provider ) ; org.apache.harmony.security.fortress.Services . setNeedRefresh () ; return position ; } }
@ java.lang.Override public void enter () { if ( ! ( configureIfaceIp ( true ) ) ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR ; return; } try { mNMService . tetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { android.util.Log . e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( STRING_CONSTANT + ( e . toString () ) ) ) ; mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR ; return; } if ( ! ( mIPv6TetherSvc . start () ) ) { android.util.Log . e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , STRING_CONSTANT ) ; return; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ javax.annotation.Nonnull public < T extends com.android.jack.ir.ast.JNode > T getParent ( @ javax.annotation.Nonnull java.lang.Class < T > classToSearch ) { com.android.jack.ir.ast.JNode result = getParent () ; while ( ( result != null ) && ( ! ( classToSearch . isAssignableFrom ( result . getClass () ) ) ) ) { result = result . getParent () ; } if ( result == null ) { throw new java.util.NoSuchElementException () ; } return ( ( T ) ( result ) ) ; }
public void test_group ( ) throws java.lang.Throwable { java.nio.channels.spi.AsynchronousChannelProvider provider = java.nio.channels.spi.AsynchronousChannelProvider . provider () ; java.nio.channels.AsynchronousChannelGroup group = provider . openAsynchronousChannelGroup ( NUMBER_CONSTANT , java.util.concurrent.Executors . defaultThreadFactory () ) ; java.nio.channels.AsynchronousServerSocketChannel assc = java.nio.channels.AsynchronousServerSocketChannel . open ( group ) ; assertNull ( assc . getLocalAddress () ) ; assc . bind ( new java.net.InetSocketAddress ( NUMBER_CONSTANT ) ) ; assertNotNull ( assc . getLocalAddress () ) ; assertEquals ( provider , assc . provider () ) ; assc . close () ; }
private void syncVPState ( int [] vpArray ) { android.util.Log . d ( com.android.phone.CallFeaturesSetting.LOG_TAG , ( STRING_CONSTANT + ( ( vpArray [ NUMBER_CONSTANT ] ) != NUMBER_CONSTANT ? STRING_CONSTANT : STRING_CONSTANT ) ) ) ; mButtonVoicePrivacy . setChecked ( ( ( vpArray [ NUMBER_CONSTANT ] ) != NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public boolean onHoverEvent ( final android.view.MotionEvent event ) { mFactory . startYourEngines ( false ) ; if ( checkNeedsPost () ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > () { @ java.lang.Override public java.lang.Boolean call () { return onHoverEvent ( event ) ; } } ) ; return ret ; } return mAwContents . onHoverEvent ( event ) ; }
public void testRendering800x480Locally ( ) throws java.lang.Throwable { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution () ; if ( maxRes == null ) return; if ( ( ( maxRes.first ) >= NUMBER_CONSTANT ) && ( ( maxRes.second ) >= NUMBER_CONSTANT ) ) { runTestRenderingInSeparateThread ( NUMBER_CONSTANT , NUMBER_CONSTANT , false , false ) ; } else { android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; } }
private static long getMillisOf ( java.util.Calendar calendar ) { if ( calendar.isTimeSet ) { return calendar.time ; } java.util.Calendar cal = ( ( java.util.Calendar ) ( calendar . clone () ) ) ; cal . setLenient ( true ) ; return cal . getTimeInMillis () ; }
@ java.lang.Override protected void checkReportedError ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( issue == ( com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ) { assertNotNull ( message , com.android.tools.lint.checks.MissingClassDetector . getOldValue ( issue , message , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertNotNull ( message , com.android.tools.lint.checks.MissingClassDetector . getNewValue ( issue , message , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; } }
@ java.lang.Override public int getCountLocked ( int which ) { int val ; if ( which == ( STATS_LAST ) ) { val = mLastCount ; } else { val = mCount . get () ; if ( which == ( STATS_UNPLUGGED ) ) { val -= mUnpluggedCount ; } else if ( which != ( STATS_TOTAL ) ) { val -= mLoadedCount ; } } return val ; }
private com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleElement [] getSelectionAsElements ( java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection > mDragSelection ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleElement > elements = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleElement > () ; for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection cs : mDragSelection ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi = cs . getViewInfo () ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleElement e = transformToSimpleElement ( vi ) ; elements . add ( e ) ; } return elements . toArray ( new com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleElement [ elements . size () ] ) ; }
public void setAudioState ( android.telecom.CallAudioState audioState ) { com.android.incallui.speakerbuttonlogic.SpeakerButtonInfo info = new com.android.incallui.speakerbuttonlogic.SpeakerButtonInfo ( audioState ) ; checkable = info.checkable ; isChecked = info.isChecked ; label = info.label ; icon = info.icon ; @ android.support.annotation.StringRes int contentDescriptionResId = info.contentDescription ; contentDescription = delegate . getContext () . getText ( contentDescriptionResId ) ; checkedContentDescription = android.text.TextUtils . concat ( contentDescription , delegate . getContext () . getText ( R.string.incall_talkback_speaker_on ) ) ; uncheckedContentDescription = android.text.TextUtils . concat ( contentDescription , delegate . getContext () . getText ( R.string.incall_talkback_speaker_off ) ) ; setButton ( button ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private < T extends org.eclipse.jdt.core.dom.ASTNode > T findParentClass ( org.eclipse.jdt.core.dom.ASTNode node , java.lang.Class < T > clazz ) { if ( node != null ) { for ( node = node . getParent () ; node != null ; node = node . getParent () ) { if ( node . getClass () . equals ( clazz ) ) { return ( ( T ) ( node ) ) ; } } } return null ; }
public void test_SSLEngine_clientAuthWantedNoClientCert ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext clientAuthContext = libcore.javax.net.ssl.TestSSLContext . create ( libcore.java.security.TestKeyStore . getClient () , libcore.java.security.TestKeyStore . getServer () ) ; libcore.javax.net.ssl.TestSSLEnginePair p = libcore.javax.net.ssl.TestSSLEnginePair . create ( clientAuthContext , new libcore.javax.net.ssl.TestSSLEnginePair.Hooks () { @ java.lang.Override void beforeBeginHandshake ( javax.net.ssl.SSLEngine client , javax.net.ssl.SSLEngine server ) { server . setWantClientAuth ( true ) ; } } ) ; assertConnected ( p ) ; clientAuthContext . close () ; p . close () ; }
@ java.lang.Override protected void test () { java.util.List < java.lang.String > result = new java.util.ArrayList ( com.android.cts.verifier.notifications.MockListener.MockListener . getInstance () . mPosted ) ; if ( ( ( result . size () ) > NUMBER_CONSTANT ) && ( result . contains ( mTag1 ) ) ) { status = PASS ; } else { logFail () ; status = FAIL ; } }
private void evaluateBinding ( java.lang.String carrierPackageName , boolean forceUnbind ) { for ( com.android.internal.telephony.CarrierServiceBindHelper.AppBinding appBinding : mBindings ) { java.lang.String appBindingPackage = appBinding . getPackage () ; boolean isBindingForPackage = carrierPackageName . equals ( appBindingPackage ) ; if ( isBindingForPackage ) { com.android.internal.telephony.CarrierServiceBindHelper . log ( ( carrierPackageName + STRING_CONSTANT ) ) ; } if ( ( appBindingPackage == null ) || isBindingForPackage ) { if ( forceUnbind ) { appBinding . unbind ( true ) ; } appBinding . rebind () ; } } }
private void validateWrongPassword ( java.lang.String password , java.lang.String errorMessage ) throws java.lang.Exception { android.support.test.uiautomator.UiObject passwordField = device . findObject ( new android.support.test.uiautomator.UiSelector () . className ( STRING_CONSTANT ) ) ; passwordField . setText ( password ) ; android.support.test.uiautomator.UiObject passwordError = device . findObject ( new android.support.test.uiautomator.UiSelector () . textContains ( errorMessage ) ) ; passwordError . waitForExists ( NUMBER_CONSTANT ) ; junit.framework.Assert . assertTrue ( passwordError . exists () ) ; pressDeleteKey ( password . length () ) ; }
private void setNetworkRestriction () { mRestrictedNetworkOverride = false ; boolean noRestrictedRequests = true ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts . keySet () ) { noRestrictedRequests &= apnContext . hasNoRestrictedRequests ( true ) ; } if ( noRestrictedRequests ) { return; } if ( ! ( mApnSetting . isMetered ( mPhone ) ) ) { return; } mRestrictedNetworkOverride = ! ( mDct . isDataEnabled () ) ; }
@ org.junit.Test public void testConnectWithConfig () { android.net.wifi.nan.ConfigRequest configRequest = new android.net.wifi.nan.ConfigRequest.Builder () . setMasterPreference ( NUMBER_CONSTANT ) . build () ; java.lang.String callingPackage = STRING_CONSTANT ; mDut . connect ( mBinderMock , callingPackage , mCallbackMock , configRequest , false ) ; org.mockito.Mockito . verify ( mNanStateManagerMock ) . connect ( org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyInt () , org.mockito.Matchers . eq ( callingPackage ) , org.mockito.Matchers . eq ( mCallbackMock ) , org.mockito.Matchers . eq ( configRequest ) , org.mockito.Matchers . eq ( false ) ) ; }
public final void testCreateDup () { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ( ved ) ; com.android.ide.common.rendering.api.ViewInfo lvi = new com.android.ide.common.rendering.api.ViewInfo ( STRING_CONSTANT , uiv , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo . create ( lvi , true ) . getFirst () ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m . create ( cvi ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m . create ( cvi ) ; assertSame ( proxy2 , proxy1 ) ; }
@ com.android.annotations.NonNull protected java.io.File makeSystemImageFolder ( @ com.android.annotations.NonNull java.lang.String targetDir , @ com.android.annotations.Nullable java.lang.String tagId , @ com.android.annotations.NonNull java.lang.String abiType ) throws java.io.IOException { java.io.File sysImgDir = new java.io.File ( mFakeSdk , com.android.SdkConstants.FD_SYSTEM_IMAGES ) ; sysImgDir = new java.io.File ( sysImgDir , targetDir ) ; if ( tagId != null ) { sysImgDir = new java.io.File ( sysImgDir , tagId ) ; } sysImgDir = new java.io.File ( sysImgDir , abiType ) ; makeFakeSysImgInternal ( sysImgDir , tagId , abiType ) ; return sysImgDir ; }
public void xorBit ( int i ) throws java.lang.RuntimeException { if ( ( i < NUMBER_CONSTANT ) || ( i > ( ( len ) - NUMBER_CONSTANT ) ) ) { throw new java.lang.RuntimeException () ; } value [ ( i > > > NUMBER_CONSTANT ) ] ^= org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial.bitMask [ ( i & NUMBER_CONSTANT ) ] ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , float [] data ) { mRS . validate () ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS . nAllocationData3D ( getIDSafe () , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * NUMBER_CONSTANT ) ) ; }
public java.lang.Object clone () { if ( ! ( sizeIsSticky ) ) trimToSize () ; try { java.util.BitSet result = ( ( java.util.BitSet ) ( super . clone () ) ) ; result.words = words . clone () ; result . checkInvariants () ; return result ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } }
@ java.lang.Override public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { if ( context . getDriver () . isSuppressed ( context , com.android.tools.lint.checks.AlwaysShowActionDetector.ISSUE , attribute ) ) { mIgnoreFile = true ; return; } if ( ( mFileAttributes ) == null ) { mFileAttributes = new java.util.ArrayList < org.w3c.dom.Attr > () ; } mFileAttributes . add ( attribute ) ; }
public java.lang.String read () { try { int numRead = mReceiveStream . read ( mReadBuffer , NUMBER_CONSTANT , android.telecom.Call.RttCall.READ_BUFFER_SIZE ) ; if ( numRead < NUMBER_CONSTANT ) { return null ; } return new java.lang.String ( mReadBuffer , NUMBER_CONSTANT , numRead ) ; } catch ( java.io.IOException e ) { android.telecom.Log . w ( this , STRING_CONSTANT , e ) ; return null ; } }
@ java.lang.Override public void enter () { super . enter () ; mWasOnSpeaker = true ; setSpeakerphoneOn ( true ) ; setBluetoothOff () ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_SPEAKER , mAvailableRoutes , null , mBluetoothRouteManager . getConnectedDevices () ) ; setSystemAudioState ( newState , true ) ; updateInternalCallAudioState () ; }
@ javax.annotation.Nonnull private void run ( @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.io.File [] dexFiles ) throws java.lang.Exception { java.util.List < com.android.jack.test.runner.RuntimeRunner > runnerList = com.android.jack.test.toolchain.AbstractTestTools . listRuntimeTestRunners () ; for ( com.android.jack.test.runner.RuntimeRunner runner : runnerList ) { org.junit.Assert . assertEquals ( NUMBER_CONSTANT , runner . runJUnit ( new java.lang.String [ NUMBER_CONSTANT ] , AbstractTestTools.JUNIT_RUNNER_NAME , new java.lang.String [] { mainClass } , dexFiles ) ) ; } }
@ android.support.annotation.Nullable @ android.support.annotation.RequiresPermission ( value = android.Manifest.permission.READ_PHONE_STATE ) @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public static android.telecom.PhoneAccountHandle getOtherAccount ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle currentAccount ) { if ( currentAccount == null ) { return null ; } android.telecom.TelecomManager telecomManager = context . getSystemService ( android.telecom.TelecomManager . class ) ; for ( android.telecom.PhoneAccountHandle phoneAccountHandle : telecomManager . getCallCapablePhoneAccounts () ) { android.telecom.PhoneAccount phoneAccount = telecomManager . getPhoneAccount ( phoneAccountHandle ) ; if ( phoneAccount == null ) { continue; } if ( ( phoneAccount . hasCapabilities ( PhoneAccount.CAPABILITY_SIM_SUBSCRIPTION ) ) && ( ! ( phoneAccountHandle . equals ( currentAccount ) ) ) ) { return phoneAccountHandle ; } } return null ; }
public void testEmptyStringException () { try { new java.text.RuleBasedCollator ( STRING_CONSTANT ) ; fail () ; } catch ( java.text.ParseException e ) { assertEquals ( STRING_CONSTANT , e . getClass () . getName () ) ; assertEquals ( NUMBER_CONSTANT , e . getErrorOffset () ) ; } }
public void testGetExampleNumber () { assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.DE_NUMBER , phoneUtil . getExampleNumber ( RegionCode.DE ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.DE_NUMBER , phoneUtil . getExampleNumberForType ( RegionCode.DE , PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) ; assertEquals ( null , phoneUtil . getExampleNumberForType ( RegionCode.DE , PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ; assertNotNull ( phoneUtil . getExampleNumberForType ( RegionCode.US , PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) ; assertNotNull ( phoneUtil . getExampleNumberForType ( RegionCode.US , PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ; assertNull ( phoneUtil . getExampleNumberForType ( RegionCode.CS , PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ; assertNull ( phoneUtil . getExampleNumber ( RegionCode.UN001 ) ) ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , byte [] data ) { mRS . validate () ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS . nAllocationData3D ( getIDSafe () , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , data.length ) ; }
@ java.lang.Override public boolean terminateCall ( android.bluetooth.BluetoothDevice device , android.bluetooth.BluetoothHeadsetClientCall call ) { com.android.bluetooth.hfpclient.HeadsetClientService service = getService () ; if ( service == null ) { android.util.Log . w ( com.android.bluetooth.hfpclient.HeadsetClientService.TAG , STRING_CONSTANT ) ; return false ; } return service . terminateCall ( device , ( call != null ? call . getUUID () : null ) ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.Nullable org.objectweb.asm.tree.AbstractInsnNode instruction , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( ( method != null ) && ( mDriver . isSuppressed ( issue , mClassNode , method , instruction ) ) ) { return; } report ( issue , location , message ) ; }
public void add ( com.android.jack.dx.dex.file.ClassDefItem clazz ) { assert clazz != null ; com.android.jack.dx.rop.type.Type type = clazz . getThisClass () ; throwIfPrepared () ; if ( ( classDefs . get ( type ) ) != null ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + type ) ) ; } classDefs . put ( type , clazz ) ; }
public void stop () { java.lang.Thread threadToStop ; synchronized ( this ) { threadToStop = thread ; thread = null ; } if ( threadToStop == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } interrupt ( threadToStop ) ; while ( true ) { try { threadToStop . join () ; return; } catch ( java.lang.InterruptedException ignored ) {} } }
public static < E > com.google.common.collect.ImmutableList < E > copyOf ( java.lang.Iterable < ? extends E > elements ) { com.google.common.base.Preconditions . checkNotNull ( elements ) ; return elements instanceof java.util.Collection ? com.google.common.collect.ImmutableList . copyOf ( ( ( java.util.Collection < ? extends E > ) ( elements ) ) ) : com.google.common.collect.ImmutableList . copyOf ( elements . iterator () ) ; }
@ javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall ) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper . getCstType ( methodCall . getReceiverType () ) ; java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper . getMethodSignatureWithoutName ( methodCall ) ; com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef ( definingClass , new com.android.jack.dx.rop.cst.CstString ( methodCall . getMethodName () ) , new com.android.jack.dx.rop.cst.CstString ( signatureWithoutName ) ) ; return methodRef ; }
private boolean parseDependencyFileFor ( org.eclipse.core.resources.IFile sourceFile ) { org.eclipse.core.resources.IFile depFile = getDependencyFileFor ( sourceFile ) ; java.io.File f = depFile . getLocation () . toFile () ; if ( f . exists () ) { com.android.ide.eclipse.adt.internal.build.NonJavaFileBundle bundle = getBundle ( sourceFile ) ; if ( bundle == null ) { bundle = new com.android.ide.eclipse.adt.internal.build.NonJavaFileBundle ( sourceFile ) ; addBundle ( bundle ) ; } parseDependencyFile ( bundle , f ) ; return true ; } return false ; }
public static com.google.api.services.storage.model.Bucket createBucket ( java.lang.String projectId , java.lang.String bucketName ) { try { com.google.api.services.storage.model.Bucket bucket = new com.google.api.services.storage.model.Bucket () . setName ( bucketName ) . setLocation ( STRING_CONSTANT ) ; com.google.api.services.storage.Storage.Buckets.Insert insertBucket = getStorage () . buckets () . insert ( projectId , bucket ) ; return insertBucket . execute () ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
@ java.lang.Override public boolean createBond ( android.bluetooth.BluetoothDevice device , int transport ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . createBond ( device , transport , null ) ; }
public void sendSetDisconnected ( java.lang.String id , int disconnectCause ) throws java.lang.Exception { mConnectionById . get ( id ) . state = android.telecom.Connection.STATE_DISCONNECTED ; mConnectionById . get ( id ) . disconnectCause = new android.telecom.DisconnectCause ( disconnectCause ) ; for ( com.android.internal.telecom.IConnectionServiceAdapter a : mConnectionServiceAdapters ) { a . setDisconnected ( id , mConnectionById . get ( id ) . disconnectCause , null ) ; } }
@ java.lang.Override protected void computeFields () { java.util.TimeZone timeZone = getTimeZone () ; int dstOffset = ( timeZone . inDaylightTime ( new java.util.Date ( time ) ) ) ? timeZone . getDSTSavings () : NUMBER_CONSTANT ; int zoneOffset = timeZone . getRawOffset () ; fields [ java.util.Calendar.DST_OFFSET ] = dstOffset ; fields [ java.util.Calendar.ZONE_OFFSET ] = zoneOffset ; fullFieldsCalc () ; for ( int i = NUMBER_CONSTANT ; i < ( java.util.Calendar.FIELD_COUNT ) ; i ++ ) { isSet [ i ] = true ; } }
@ android.test.suitebuilder.annotation.LargeTest @ org.junit.Test public void testPullNonPullableExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( STRING_CONSTANT , mPhoneAccountA0 . getAccountHandle () , mConnectionServiceFixtureA ) ; org.junit.Assert . assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX . getCall ( ids.mCallId ) . getState () ) ; mInCallServiceFixtureX.mInCallAdapter . pullExternalCall ( ids.mCallId ) ; java.lang.Thread . sleep ( com.android.server.telecom.tests.TEST_TIMEOUT ) ; org.mockito.Mockito . verify ( mConnectionServiceFixtureA . getTestDouble () , org.mockito.Mockito . never () ) . pullExternalCall ( org.mockito.Matchers . eq ( ids.mConnectionId ) , org.mockito.Matchers . any () ) ; }
public void test_wrap_ByteBuffer_ByteBuffer_04 ( ) throws java.lang.Exception { java.lang.String host = STRING_CONSTANT ; int port = NUMBER_CONSTANT ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; javax.net.ssl.SSLEngine sse = getEngine ( host , port ) ; try { javax.net.ssl.SSLEngineResult result = sse . wrap ( bbs , bbd ) ; fail () ; } catch ( java.lang.IllegalStateException expected ) {} }
@ java.lang.Override public boolean setRemoteAlias ( android.bluetooth.BluetoothDevice device , java.lang.String name ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . setRemoteAlias ( device , name ) ; }
private void computeCatchList ( @ javax.annotation.Nonnull org.objectweb.asm.tree.LabelNode labelNode ) { for ( org.objectweb.asm.tree.TryCatchBlockNode tryCatchNode : currentMethod.tryCatchBlocks ) { java.lang.String id = getCatchId ( tryCatchNode.handler ) ; if ( ( tryCatchNode.start ) == labelNode ) { currentCatchList . add ( id ) ; } else if ( ( tryCatchNode.end ) == labelNode ) { currentCatchList . remove ( id ) ; } } }
@ java.lang.Override protected void computeResult () { java.lang.Object [] elements = getSelectedElements () ; if ( ( ( elements.length ) == NUMBER_CONSTANT ) && ( ( elements [ NUMBER_CONSTANT ] ) instanceof com.android.ide.eclipse.adt.internal.resources.ResourceItem ) ) { com.android.ide.eclipse.adt.internal.resources.ResourceItem item = ( ( com.android.ide.eclipse.adt.internal.resources.ResourceItem ) ( elements [ NUMBER_CONSTANT ] ) ) ; mCurrentResource = com.android.ide.eclipse.adt.internal.resources.ResourceHelper . getXmlString ( mResourceType , item , mSystemButton . getSelection () ) ; } }
@ java.lang.Override public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { return service . getConnectionState ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return STATE_DISCONNECTED ; }
private static boolean showOutgoingVideo ( android.content.Context context , int videoState , int sessionModificationState ) { if ( ! ( com.android.incallui.videotech.utils.VideoUtils . hasCameraPermissionAndShownPrivacyToast ( context ) ) ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; return false ; } return ( android.telecom.VideoProfile . isTransmissionEnabled ( videoState ) ) || ( com.android.incallui.VideoCallPresenter . isVideoUpgrade ( sessionModificationState ) ) ; }
public void setCarrierInfoForImsiEncryption ( int subId , java.lang.String callingPackage , android.telephony.ImsiEncryptionInfo imsiEncryptionInfo ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , STRING_CONSTANT ) ) ) { return; } phone . setCarrierInfoForImsiEncryption ( imsiEncryptionInfo ) ; } else { loge ( ( STRING_CONSTANT + subId ) ) ; return; } }
static java.math.BigInteger generateK ( java.math.BigInteger n , java.security.SecureRandom random ) { int nBitLength = n . bitLength () ; java.math.BigInteger k ; do { k = new java.math.BigInteger ( nBitLength , random ) ; } while ( ( k . equals ( ECConstants.ZERO ) ) || ( ( k . compareTo ( n ) ) >= NUMBER_CONSTANT ) ) ; return k ; }
private void testChargingConstraintFails_notCharging () { mTestEnvironment . setUp () ; mTestEnvironment . setExpectedExecutions ( NUMBER_CONSTANT ) ; android.app.job.JobInfo runOnCharge = new android.app.job.JobInfo.Builder ( com.android.cts.verifier.jobscheduler.ChargingConstraintTestActivity.OFF_CHARGING_JOB_ID , mMockComponent ) . setRequiresCharging ( true ) . build () ; mJobScheduler . schedule ( runOnCharge ) ; boolean testPassed ; try { testPassed = mTestEnvironment . awaitTimeout () ; } catch ( java.lang.InterruptedException e ) { testPassed = false ; } runOnUiThread ( new com.android.cts.verifier.jobscheduler.ChargingConstraintTestActivity.ChargingConstraintTestResultRunner ( com.android.cts.verifier.jobscheduler.ChargingConstraintTestActivity.OFF_CHARGING_JOB_ID , testPassed ) ) ; }
@ java.lang.Override public android.content.ClipData getPrimaryClip ( java.lang.String pkg ) { synchronized ( this ) { if ( ! ( clipboardAccessAllowed ( AppOpsManager.OP_READ_CLIPBOARD , pkg , android.os.Binder . getCallingUid () ) ) ) { return null ; } addActiveOwnerLocked ( android.os.Binder . getCallingUid () , pkg ) ; return getClipboard () . primaryClip ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private static void checkOnTouchListener ( com.android.tools.lint.detector.api.ClassContext context , org.objectweb.asm.tree.ClassNode classNode ) { org.objectweb.asm.tree.MethodNode onTouchNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector . findMethod ( classNode.methods , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH_SIG ) ; if ( onTouchNode != null ) { org.objectweb.asm.tree.AbstractInsnNode performClickInsnNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector . findMethodCallInstruction ( onTouchNode.instructions , com.android.SdkConstants.ANDROID_VIEW_VIEW , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK_SIG ) ; if ( performClickInsnNode == null ) { java.lang.String message = java.lang.String . format ( STRING_CONSTANT , classNode.name ) ; context . report ( com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ISSUE , onTouchNode , null , context . getLocation ( onTouchNode , classNode ) , message ) ; } } }
public void testClientConfiguredCustomContentEncoding ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( STRING_CONSTANT ) . addHeader ( STRING_CONSTANT ) ) ; server . play () ; java.net.URLConnection connection = server . getUrl ( STRING_CONSTANT ) . openConnection () ; connection . addRequestProperty ( STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , readAscii ( connection . getInputStream () , java.lang.Integer.MAX_VALUE ) ) ; com.google.mockwebserver.RecordedRequest request = server . takeRequest () ; assertContains ( request . getHeaders () , STRING_CONSTANT ) ; }
@ java.lang.Override public boolean onUnhandledKeyEvent ( android.view.KeyEvent event ) { if ( ! ( isActivityPaused () ) ) { if ( ( event . getAction () ) == ( android.view.KeyEvent.ACTION_DOWN ) ) { return mActivity . onKeyDown ( event . getKeyCode () , event ) ; } else { return mActivity . onKeyUp ( event . getKeyCode () , event ) ; } } return false ; }
private int getOutputSize ( int inputLen ) { if ( ( modeBlockSize ) == NUMBER_CONSTANT ) { return inputLen ; } else { final int buffered = org.conscrypt.NativeCrypto . get_EVP_CIPHER_CTX_buf_len ( cipherCtx ) ; if ( ( padding ) == ( org.conscrypt.OpenSSLCipher.Padding.NOPADDING ) ) { return buffered + inputLen ; } else { final int totalLen = ( inputLen + buffered ) + ( modeBlockSize ) ; return totalLen - ( totalLen % ( modeBlockSize ) ) ; } } }
private void createServerSession ( javax.obex.ObexTransport transport ) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession ( this , transport , this ) ; mServerSession . preStart () ; if ( com.android.bluetooth.opp.BluetoothOppService.D ) { android.util.Log . d ( com.android.bluetooth.opp.BluetoothOppService.TAG , ( ( ( STRING_CONSTANT + ( mServerSession . toString () ) ) + STRING_CONSTANT ) + ( transport . toString () ) ) ) ; } }
@ java.lang.Override public boolean fetchRemoteUuids ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . fetchRemoteUuids ( device ) ; }
public void test_verifySignedCertificateTimestamps_withOCSPResponse ( ) throws java.lang.Exception { org.conscrypt.OpenSSLX509Certificate [] chain = new org.conscrypt.OpenSSLX509Certificate [] { cert , ca } ; byte [] ocspResponse = org.conscrypt.TestUtils . readTestFile ( STRING_CONSTANT ) ; org.conscrypt.ct.CTVerificationResult result = ctVerifier . verifySignedCertificateTimestamps ( chain , null , ocspResponse ) ; assertEquals ( NUMBER_CONSTANT , result . getValidSCTs () . size () ) ; assertEquals ( NUMBER_CONSTANT , result . getInvalidSCTs () . size () ) ; }
public void radioStateChanged ( int indicationType , int radioState ) { mRil . processIndication ( indicationType ) ; com.android.internal.telephony.CommandsInterface.RadioState newState = getRadioStateFromInt ( radioState ) ; if ( RIL.RILJ_LOGD ) { mRil . unsljLogMore ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED , ( STRING_CONSTANT + newState ) ) ; } mRil . setRadioState ( newState ) ; }
private android.telephony.SubscriptionInfo addSignalController ( int id , int simSlotIndex ) { android.telephony.SubscriptionInfo info = new android.telephony.SubscriptionInfo ( id , STRING_CONSTANT , simSlotIndex , STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ; mMobileSignalControllers . put ( id , new com.android.systemui.statusbar.policy.MobileSignalController ( mContext , mConfig , mHasMobileDataFeature , mPhone , mCallbackHandler , this , info , mSubDefaults , mReceiverHandler . getLooper () ) ) ; return info ; }
public void test_UTF_16LE ( ) throws java.lang.Exception { java.nio.charset.Charset cs = java.nio.charset.Charset . forName ( STRING_CONSTANT ) ; assertEncodes ( cs , STRING_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDecodes ( cs , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDecodes ( cs , STRING_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
@ java.lang.Override public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { java.lang.String protectionLevel = attribute . getValue () ; if ( ( protectionLevel != null ) && ( protectionLevel . equals ( com.android.tools.lint.checks.SignatureOrSystemDetector.SIGNATURE_OR_SYSTEM ) ) ) { java.lang.String message = STRING_CONSTANT ; context . report ( com.android.tools.lint.checks.SignatureOrSystemDetector.ISSUE , attribute , context . getLocation ( attribute ) , message ) ; } }
@ java.lang.Override public void paint ( com.intellij.openapi.editor.Editor editor , java.awt.Graphics g , java.awt.Rectangle r ) { if ( ! ( myCondition . get () ) ) return; int y = r.y ; int lineHeight = myEditor . getLineHeight () ; com.intellij.diff.util.DiffLineSeparatorRenderer . draw ( g , NUMBER_CONSTANT , y , lineHeight ) ; }
private void validateInstall () { com.android.ide.eclipse.monitor.SdkToolsLocator locator = new com.android.ide.eclipse.monitor.SdkToolsLocator ( new java.io.File ( mTextBox . getText () ) ) ; com.android.ide.eclipse.monitor.SdkToolsLocator.SdkInstallStatus status = locator . isValidInstallation () ; if ( status . isValid () ) { mStatusLabel . setText ( STRING_CONSTANT ) ; getButton ( IDialogConstants.OK_ID ) . setEnabled ( true ) ; } else { mStatusLabel . setText ( status . getErrorMessage () ) ; mStatusLabel . pack () ; getButton ( IDialogConstants.OK_ID ) . setEnabled ( false ) ; } }
public void test_getTcpNoDelay ( ) throws java.lang.Exception { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () ) ) { boolean bool = ! ( client . getTcpNoDelay () ) ; client . setTcpNoDelay ( bool ) ; assertTrue ( ( STRING_CONSTANT + ( client . getTcpNoDelay () ) ) , ( ( client . getTcpNoDelay () ) == bool ) ) ; } }
public com.google.gct.testing.GoogleCloudTestingConfiguration copy ( java.lang.String prefix ) { com.google.gct.testing.GoogleCloudTestingConfiguration newConfiguration = ( prefix == null ) ? new com.google.gct.testing.GoogleCloudTestingConfiguration ( id , name , icon , facet ) : new com.google.gct.testing.GoogleCloudTestingConfiguration ( ( prefix + ( name ) ) , icon , facet ) ; newConfiguration.deviceDimension . enableAll ( deviceDimension . getEnabledTypes () ) ; newConfiguration.apiDimension . enableAll ( apiDimension . getEnabledTypes () ) ; newConfiguration.languageDimension . enableAll ( languageDimension . getEnabledTypes () ) ; newConfiguration.orientationDimension . enableAll ( orientationDimension . getEnabledTypes () ) ; return newConfiguration ; }
public void testConfigurationUpdatesWhenResizedFromFullscreen ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests . assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
@ org.junit.Test @ org.junit.Ignore ( value = STRING_CONSTANT ) public void watchdogBitePnoGoodIncrementsMetrics () { when ( mWifiNS . selectNetwork ( anyObject () , anyObject () , anyObject () , anyBoolean () , anyBoolean () , anyBoolean () ) ) . thenReturn ( null ) ; mWifiConnectivityManager . handleScreenStateChanged ( false ) ; mWifiConnectivityManager . handleConnectionStateChanged ( WifiConnectivityManager.WIFI_STATE_DISCONNECTED ) ; mAlarmManager . dispatch ( WifiConnectivityManager.WATCHDOG_TIMER_TAG ) ; mLooper . dispatchAll () ; verify ( mWifiMetrics ) . incrementNumConnectivityWatchdogPnoGood () ; verify ( mWifiMetrics , never () ) . incrementNumConnectivityWatchdogPnoBad () ; }
public void fillSelectionAndBorder ( java.awt.Graphics2D g , com.intellij.ui.tabs.impl.JBTabsImpl.ShapeInfo selectedShape , java.awt.Color tabColor , int x , int y , int height ) { g . setColor ( ( tabColor != null ? tabColor : getDefaultTabColor () ) ) ; g . fill ( selectedShape.fillPath . getShape () ) ; }
@ java.lang.Override public org.jetbrains.plugins.gradle.model.data.WebResource fun ( org.jetbrains.plugins.gradle.model.web.WebConfiguration.WebResource resource ) { if ( resource == null ) return null ; final org.jetbrains.plugins.gradle.model.data.WarDirectory warDirectory = org.jetbrains.plugins.gradle.model.data.WarDirectory . fromPath ( resource . getWarDirectory () ) ; return new org.jetbrains.plugins.gradle.model.data.WebResource ( warDirectory , resource . getRelativePath () , resource . getFile () ) ; }
@ java.lang.Override public void onIncomingCallRejected ( com.android.server.telecom.Call call , boolean rejectWithMessage , java.lang.String textMessage ) { if ( ( rejectWithMessage && ( ( call . getHandle () ) != null ) ) && ( ! ( call . can ( Connection.CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION ) ) ) ) { int subId = mCallsManager . getPhoneAccountRegistrar () . getSubscriptionIdForPhoneAccount ( call . getTargetPhoneAccount () ) ; rejectCallWithMessage ( call . getContext () , call . getHandle () . getSchemeSpecificPart () , textMessage , subId , call . getName () ) ; } }
public static void set ( java.lang.String key , java.lang.String val ) { if ( ( val != null ) && ( ( val . length () ) > ( android.os.SystemProperties.PROP_VALUE_MAX ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + ( android.os.SystemProperties.PROP_VALUE_MAX ) ) ) ; } if ( android.os.SystemProperties.TRACK_KEY_ACCESS ) android.os.SystemProperties . onKeyAccess ( key ) ; android.os.SystemProperties . native_set ( key , val ) ; }
@ java.lang.Override public void dump ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [] args ) { super . dump ( fd , pw , args ) ; pw . println ( ( STRING_CONSTANT + ( mPhone ) ) ) ; synchronized ( mDcListAll ) { pw . println ( ( STRING_CONSTANT + ( mDcListAll ) ) ) ; pw . println ( ( STRING_CONSTANT + ( mDcListActiveByCid ) ) ) ; } }
public void testAddAll2 () { java.util.concurrent.ConcurrentSkipListSet q = new java.util.concurrent.ConcurrentSkipListSet () ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public void resetSimNetworks () { if ( mVerboseLoggingEnabled ) localLog ( STRING_CONSTANT ) ; for ( android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks () ) { if ( com.android.server.wifi.util.TelephonyUtil . isSimConfig ( config ) ) { java.lang.String currentIdentity = com.android.server.wifi.util.TelephonyUtil . getSimIdentity ( mTelephonyManager , config ) ; config.enterpriseConfig . setIdentity ( currentIdentity ) ; config.enterpriseConfig . setAnonymousIdentity ( STRING_CONSTANT ) ; } } }
@ java.lang.Override public void merge ( @ javax.annotation.Nonnull com.android.sched.util.log.stats.Statistic statistic ) { com.android.sched.util.log.stats.ValueImpl value = ( ( com.android.sched.util.log.stats.ValueImpl ) ( statistic ) ) ; if ( ( value.value ) != null ) { assert ( this . value ) == null : STRING_CONSTANT + ( this . value ) ; this . value = value.value ; } }
@ java.lang.Override public void run () { while ( ( ( mCurrentDevice ) != null ) && ( ! ( mCurrentDevice . isOnline () ) ) ) { try { java.lang.Thread . sleep ( com.android.ddmuilib.logcat.LogCatReceiver.DEVICE_POLL_INTERVAL_MSEC ) ; } catch ( java.lang.InterruptedException e ) { return; } } try { if ( ( mCurrentDevice ) != null ) { mCurrentDevice . executeShellCommand ( com.android.ddmuilib.logcat.LogCatReceiver.LOGCAT_COMMAND , mCurrentLogCatOutputReceiver , NUMBER_CONSTANT ) ; } } catch ( java.lang.Exception e ) { com.android.ddmlib.Log . e ( STRING_CONSTANT , e ) ; } }
public void testLaunchToSide ( ) throws java.lang.Exception { if ( ! ( supportsMultiWindowMode () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; mAmWmState . computeState ( mDevice , new java.lang.String [] { LAUNCHING_ACTIVITY } ) ; launchActivityToSide () ; mAmWmState . computeState ( mDevice , new java.lang.String [] { LAUNCHING_ACTIVITY , android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME } ) ; mAmWmState . assertContainsStack ( STRING_CONSTANT , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState . assertContainsStack ( STRING_CONSTANT , android.server.cts.DOCKED_STACK_ID ) ; }
public void test_forEach_CME_onLastElement ( ) throws java.lang.Exception { java.util.ArrayList < java.lang.Integer > list = new java.util.ArrayList <> () ; list . add ( NUMBER_CONSTANT ) ; list . add ( NUMBER_CONSTANT ) ; list . add ( NUMBER_CONSTANT ) ; try { list . forEach ( ( t ) - > { if ( t == NUMBER_CONSTANT ) list . add ( t ) ; } ) ; fail () ; } catch ( java.util.ConcurrentModificationException expected ) {} }
public void test_flush ( ) throws java.lang.Exception { char [] buf = new char [ NUMBER_CONSTANT ] ; STRING_CONSTANT . getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT , buf , NUMBER_CONSTANT ) ; pw = new java.io.PipedWriter () ; rdrThread = new java.lang.Thread ( ( reader = new org.apache.harmony.tests.java.io.PipedWriterTest.PReader ( pw ) ) , STRING_CONSTANT ) ; rdrThread . start () ; pw . write ( buf ) ; pw . flush () ; rdrThread . join () ; assertEquals ( STRING_CONSTANT , STRING_CONSTANT , new java.lang.String ( reader.buf ) ) ; }
public java.lang.String createNetworkSpecifierOpen ( @ android.net.wifi.aware.WifiAwareManager.DataPathRole int role , @ android.annotation.Nullable byte [] peer ) { android.net.wifi.aware.WifiAwareManager mgr = mMgr . get () ; if ( mgr == null ) { android.util.Log . e ( android.net.wifi.aware.WifiAwareSession.TAG , STRING_CONSTANT ) ; return STRING_CONSTANT ; } if ( mTerminated ) { android.util.Log . e ( android.net.wifi.aware.WifiAwareSession.TAG , STRING_CONSTANT ) ; return STRING_CONSTANT ; } return mgr . createNetworkSpecifier ( mClientId , role , peer , null , null ) ; }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testProcessChldTypeReleaseHeldRinging ( ) throws java.lang.Exception { com.android.server.telecom.Call ringingCall = createRingingCall () ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_RELEASEHELD ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . rejectCall ( org.mockito.Matchers . eq ( ringingCall ) , org.mockito.Matchers . eq ( false ) , org.mockito.ArgumentMatchers . nullable ( java.lang.String . class ) ) ; org.junit.Assert . assertEquals ( didProcess , true ) ; }
public void test_lockJJZ_NotShared ( ) throws java.lang.Exception { final long POSITION = NUMBER_CONSTANT ; final long SIZE = NUMBER_CONSTANT ; fileLock = writeOnlyFileChannel . lock ( POSITION , SIZE , false ) ; assertTrue ( fileLock . isValid () ) ; assertFalse ( fileLock . isShared () ) ; assertSame ( writeOnlyFileChannel , fileLock . channel () ) ; assertEquals ( POSITION , fileLock . position () ) ; assertEquals ( SIZE , fileLock . size () ) ; }
private final int indexOfTokenLocked ( android.os.IBinder token ) { int count = mHistory . size () ; int index = - NUMBER_CONSTANT ; for ( int i = count - NUMBER_CONSTANT ; i >= NUMBER_CONSTANT ; i -- ) { java.lang.Object o = mHistory . get ( i ) ; if ( o == token ) { index = i ; break; } } return index ; }
public void test_socket_accept_Nonblocking_Bound ( ) throws java.io.IOException { serverChannel . configureBlocking ( false ) ; serverChannel . socket () . bind ( null ) ; java.net.ServerSocket gotSocket = serverChannel . socket () ; try { gotSocket . accept () ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) {} serverChannel . close () ; try { gotSocket . accept () ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.channels.ClosedChannelException expected ) {} }
@ java.lang.Override public int getNetworkTypeForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone . getServiceState () . getDataNetworkType () ; } else { return android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN ; } }
@ java.lang.Override public java.util.List < T > get ( int index ) { com.google.common.base.Preconditions . checkElementIndex ( index , size () ) ; int start = index * ( size ) ; int end = java.lang.Math . min ( ( start + ( size ) ) , list . size () ) ; return list . subList ( start , end ) ; }
private void assertTrusted ( java.security.cert.X509Certificate x , java.lang.String alias ) { assertEquals ( x , store . getCertificate ( alias ) ) ; assertEquals ( file ( alias ) . lastModified () , store . getCreationDate ( alias ) . getTime () ) ; assertTrue ( store . containsAlias ( alias ) ) ; assertEquals ( x , store . getTrustAnchor ( x ) ) ; }
private void updateUser () { int userId = android.app.ActivityManager . getCurrentUser () ; synchronized ( mLock ) { if ( ( mCurrentUserId ) != userId ) { final int oldUserId = mCurrentUserId ; mCurrentUserId = userId ; com.android.server.media.MediaSessionService.UserRecord oldUser = mUserRecords . get ( oldUserId ) ; if ( oldUser != null ) { oldUser . stopLocked () ; } com.android.server.media.MediaSessionService.UserRecord newUser = getOrCreateUser ( userId ) ; newUser . startLocked () ; } } }
@ com.android.annotations.NonNull public < K , V > java.util.Map < K , V > getAllModels ( @ com.android.annotations.NonNull org.gradle.tooling.BuildAction < java.util.Map < K , V > > action , boolean emulateStudio_1_0 ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection () ; try { return buildModel ( connection , action , emulateStudio_1_0 ) ; } finally { connection . close () ; } }
public static com.android.internal.telephony.cdma.SmsMessage.SubmitPdu getSubmitPdu ( java.lang.String scAddr , java.lang.String destAddr , java.lang.String message , boolean statusReportRequested , com.android.internal.telephony.SmsHeader smsHeader ) { if ( ( message == null ) || ( destAddr == null ) ) { return null ; } com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData () ; uData.payloadStr = message ; uData.userDataHeader = smsHeader ; return com.android.internal.telephony.cdma.SmsMessage . privateGetSubmitPdu ( destAddr , statusReportRequested , uData ) ; }
public void test_getLimits () { double [] orgLimits = ( ( double [] ) ( limits . clone () ) ) ; double [] l = f1 . getLimits () ; assertTrue ( STRING_CONSTANT , ( l == ( limits ) ) ) ; l [ NUMBER_CONSTANT ] = NUMBER_CONSTANT ; assertTrue ( STRING_CONSTANT , ( l != orgLimits ) ) ; }
static int builderDeadLoop () { java.lang.StringBuilder b = new java.lang.StringBuilder () ; java.lang.String x = STRING_CONSTANT ; for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { int d = b . toString () . indexOf ( x , NUMBER_CONSTANT ) ; } return b . length () ; }
@ java.lang.Override public boolean onPrepareOptionsMenu ( com.android.internal.telephony.cat.Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; boolean mainVisible = false ; if ( ( ( mState ) == ( com.android.stk.StkMenuActivity.STATE_SECONDARY ) ) && ( mAcceptUsersInput ) ) { mainVisible = true ; } menu . findItem ( StkApp.MENU_ID_END_SESSION ) . setVisible ( mainVisible ) ; return mainVisible ; }
@ java.lang.Override public void crunchPng ( int key , @ com.android.annotations.NonNull java.io.File from , @ com.android.annotations.NonNull java.io.File to ) throws com.android.ide.common.internal.PngException { try { com.android.ide.common.process.ProcessInfo processInfo = new com.android.ide.common.process.ProcessInfoBuilder () . setExecutable ( mAaptLocation ) . addArgs ( STRING_CONSTANT , STRING_CONSTANT , from . getAbsolutePath () , STRING_CONSTANT , to . getAbsolutePath () ) . createProcess () ; com.android.ide.common.process.ProcessResult result = mProcessExecutor . execute ( processInfo , mProcessOutputHandler ) ; result . rethrowFailure () . assertNormalExitValue () ; } catch ( com.android.ide.common.process.ProcessException e ) { throw new com.android.ide.common.internal.PngException ( e ) ; } }
@ java.lang.Override public boolean requestFocus ( final int direction , final android.graphics.Rect previouslyFocusedRect ) { mFactory . startYourEngines ( false ) ; if ( checkNeedsPost () ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > () { @ java.lang.Override public java.lang.Boolean call () { return requestFocus ( direction , previouslyFocusedRect ) ; } } ) ; return ret ; } mAwContents . requestFocus () ; return mWebViewPrivate . super_requestFocus ( direction , previouslyFocusedRect ) ; }
public void testUnocclude ( ) throws java.lang.Exception { if ( ! ( isHandheld () ) ) { return; } gotoKeyguard () ; launchActivity ( STRING_CONSTANT ) ; launchActivity ( STRING_CONSTANT ) ; mAmWmState . waitForKeyguardShowingAndNotOccluded ( mDevice ) ; mAmWmState . computeState ( mDevice , null ) ; assertEquals ( STRING_CONSTANT , android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_UNOCCLUDE , mAmWmState . getWmState () . getLastTransition () ) ; }
@ org.junit.Test @ com.android.devtools.systemimage.uitest.annotations.TestInfo ( id = STRING_CONSTANT ) public void activateDeactivatePolicy ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework . getInstrumentation () ; if ( checkStatusOfPolicy ( instrumentation , STRING_CONSTANT ) ) { com.android.devtools.systemimage.uitest.utils.SettingsUtil . deactivate ( instrumentation , STRING_CONSTANT ) ; } assertFalse ( checkStatusOfPolicy ( instrumentation , STRING_CONSTANT ) ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil . activate ( instrumentation , STRING_CONSTANT ) ; assertTrue ( checkStatusOfPolicy ( instrumentation , STRING_CONSTANT ) ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil . deactivate ( instrumentation , STRING_CONSTANT ) ; assertFalse ( checkStatusOfPolicy ( instrumentation , STRING_CONSTANT ) ) ; }
protected void close ( ) throws java.io.IOException { synchronized ( fdLock ) { if ( ( ( fd ) != null ) && ( fd . valid () ) ) { if ( ! ( stream ) ) { sun.net.ResourceManager . afterUdpClose () ; } if ( closePending ) { return; } closePending = true ; socketClose () ; return; } } }
public java.util.ArrayList < android.telephony.SmsMessage > getAllMessagesFromIcc () { java.util.List < com.android.internal.telephony.SmsRawData > records = null ; try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager . getISmsService () ; if ( iccISms != null ) { records = iccISms . getAllMessagesFromIccEfForSubscriber ( getSubscriptionId () , android.app.ActivityThread . currentPackageName () ) ; } } catch ( android.os.RemoteException ex ) {} return android.telephony.SmsManager . createMessageListFromRawRecords ( records ) ; }
@ org.junit.Test public void test002 ( ) throws java.lang.Exception { com.android.jack.java8.lambda.test034.jack.Tests.Condition < java.lang.String > c = java.lang.String : : isEmpty ; java.lang.reflect.Method m = c . getClass () . getMethod ( STRING_CONSTANT , java.lang.Object . class ) ; org.junit.Assert . assertEquals ( boolean . class , m . getReturnType () ) ; org.junit.Assert . assertFalse ( m . isSynthetic () ) ; org.junit.Assert . assertFalse ( m . isBridge () ) ; }
@ org.junit.Test public void testCompile021 ( ) throws java.lang.Exception { java.lang.String packageName = STRING_CONSTANT ; java.lang.String classPrefix = ( packageName . replace ( CHAR_CONS , CHAR_CONS ) ) + STRING_CONSTANT ; java.util.Map < java.lang.String , com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo > input = com.google.common.collect.Maps . newHashMap () ; input . put ( STRING_CONSTANT , new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo ( true ) . specifyInfo ( STRING_CONSTANT , true ) ) ; checkCompiledCode ( packageName , input ) ; }
public static PhotoInfo.Builder toPhotoInfoBuilder ( com.android.dialer.NumberAttributes numberAttributes ) { return com.android.dialer.glidephotomanager.PhotoInfo . newBuilder () . setName ( numberAttributes . getName () ) . setPhotoUri ( numberAttributes . getPhotoUri () ) . setPhotoId ( numberAttributes . getPhotoId () ) . setLookupUri ( numberAttributes . getLookupUri () ) . setIsBusiness ( numberAttributes . getIsBusiness () ) . setIsSpam ( numberAttributes . getIsSpam () ) . setIsBlocked ( numberAttributes . getIsBlocked () ) ; }
public void test_SSLEngine_beginHandshake_noClientCertificate ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext . create () ; javax.net.ssl.SSLEngine [] engines = libcore.javax.net.ssl.TestSSLEnginePair . connect ( c , null ) ; assertConnected ( engines [ NUMBER_CONSTANT ] , engines [ NUMBER_CONSTANT ] ) ; c . close () ; libcore.javax.net.ssl.TestSSLEnginePair . close ( engines ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ( obj == null ) || ( ! ( obj instanceof com.ibm.icu.text.LocaleDisplayNames.UiListItem ) ) ) { return false ; } com.ibm.icu.text.LocaleDisplayNames.UiListItem other = ( ( com.ibm.icu.text.LocaleDisplayNames.UiListItem ) ( obj ) ) ; return ( ( ( nameInDisplayLocale . equals ( other.nameInDisplayLocale ) ) && ( nameInSelf . equals ( other.nameInSelf ) ) ) && ( minimized . equals ( other.minimized ) ) ) && ( modified . equals ( other.modified ) ) ; }
public void testAssistantStackLaunchNewTaskWithDockedStack ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow () ) ) return; launchActivity ( android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY ) ; launchActivityInDockStack ( android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY ) ; mAmWmState . assertContainsStack ( STRING_CONSTANT , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState . assertContainsStack ( STRING_CONSTANT , android.server.cts.DOCKED_STACK_ID ) ; enableAssistant () ; assertAssistantStackCanLaunchAndReturnFromNewTask () ; disableAssistant () ; }
@ java.lang.Override public void onDestroyActionMode ( android.view.ActionMode mode ) { if ( ( activity ) != null ) { announceforAccessibility ( activity . getCurrentFocus () , activity . getString ( R.string.description_leaving_bulk_action_mode ) ) ; } selectedItems . clear () ; actionMode = null ; selectAllMode = false ; deselectAllMode = false ; multiSelectRemoveView . showMultiSelectRemoveView ( false ) ; actionModeStateChangedListener . onActionModeStateChanged ( null , false ) ; notifyDataSetChanged () ; }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules () { java.util.List < com.google.currysrc.api.process.Rule > rules = com.google.common.collect.Lists . newArrayList ( Icu4jTransform.Icu4jRules . getRepackagingRules () ) ; rules . add ( com.android.icu4j.srcgen.Icu4jTransformRules . createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( Icu4jTransform.ORIGINAL_ICU_PACKAGE , Icu4jTransform.ANDROID_ICU_PACKAGE ) ) ) ; rules . add ( com.android.icu4j.srcgen.Icu4jTransformRules . createOptionalRule ( new com.android.icu4j.srcgen.TranslateJcite.BeginEndTagsHandler () ) ) ; return rules ; }
public static synchronized com.android.builder.sdk.SdkLoader getLoader ( @ com.android.annotations.NonNull java.io.File sdkLocation ) { if ( ( com.android.builder.sdk.DefaultSdkLoader.sLoader ) == null ) { com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader ( sdkLocation ) ; } else if ( ! ( sdkLocation . equals ( com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation ) ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return com.android.builder.sdk.DefaultSdkLoader.sLoader ; }
@ java.lang.Deprecated protected static com.ibm.icu.util.UResourceBundle addToCache ( java.lang.String fullName , com.ibm.icu.util.ULocale defaultLocale , com.ibm.icu.util.UResourceBundle b ) { synchronized ( com.ibm.icu.util.UResourceBundle.cacheKey ) { com.ibm.icu.util.UResourceBundle.cacheKey . setKeyValues ( fullName , defaultLocale ) ; com.ibm.icu.util.UResourceBundle cachedBundle = com.ibm.icu.util.UResourceBundle.BUNDLE_CACHE . get ( com.ibm.icu.util.UResourceBundle.cacheKey ) ; if ( cachedBundle != null ) { return cachedBundle ; } com.ibm.icu.util.UResourceBundle.BUNDLE_CACHE . put ( ( ( com.ibm.icu.util.UResourceBundle.ResourceCacheKey ) ( com.ibm.icu.util.UResourceBundle.cacheKey . clone () ) ) , b ) ; return b ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.analysis.DefinitionMarkerAdder.Visitor visitor = new com.android.jack.analysis.DefinitionMarkerAdder.Visitor () ; visitor . accept ( method ) ; }
public static boolean checkFolderForPackaging ( java.lang.String folderName ) { return ( ( ( ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) && ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) ) && ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) ) && ( ! ( folderName . equalsIgnoreCase ( STRING_CONSTANT ) ) ) ) && ( ! ( folderName . startsWith ( STRING_CONSTANT ) ) ) ; }
public int codePointBefore ( int index ) { int i = index - NUMBER_CONSTANT ; if ( ( i < NUMBER_CONSTANT ) || ( i >= ( length () ) ) ) { throw new java.lang.StringIndexOutOfBoundsException ( index ) ; } return java.lang.Character . codePointBefore ( this , index ) ; }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JExpressionStatement makeRequestCall ( com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( ( lockClass ) != null ) && ( ( requestClass ) != null ) ) && ( ( requestMethodId ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , requestClass , requestMethodId , JPrimitiveTypeEnum.VOID . getType () , false ) ) ; }
@ java.lang.Override public synchronized void testFailed ( com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status , com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { java.lang.String statusString ; if ( status == ( TestFailure.ERROR ) ) { statusString = org.eclipse.jdt.internal.junit.runner.MessageIds.TEST_ERROR ; } else { statusString = org.eclipse.jdt.internal.junit.runner.MessageIds.TEST_FAILED ; } org.eclipse.jdt.internal.junit.runner.TestReferenceFailure failure = new org.eclipse.jdt.internal.junit.runner.TestReferenceFailure ( new com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestCaseReference ( test ) , statusString , trace , null ) ; mExecution . getListener () . notifyTestFailed ( failure ) ; }
@ java.lang.Override public void addLayoutActions ( java.util.List < com.android.ide.common.api.MenuAction > actions , final com.android.ide.common.api.INode parentNode , final java.util.List < ? extends com.android.ide.common.api.INode > children ) { super . addLayoutActions ( actions , parentNode , children ) ; actions . add ( com.android.ide.common.api.MenuAction . createSeparator ( NUMBER_CONSTANT ) ) ; actions . add ( createMarginAction ( parentNode , children ) ) ; if ( ( children != null ) && ( ( children . size () ) > NUMBER_CONSTANT ) ) { actions . add ( createGravityAction ( children , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_GRAVITY ) ) ; } }
public com.ibm.icu.util.ByteArrayWrapper ensureCapacity ( int capacity ) { if ( ( ( bytes ) == null ) || ( ( bytes.length ) < capacity ) ) { byte [] newbytes = new byte [ capacity ] ; if ( ( bytes ) != null ) { com.ibm.icu.util.ByteArrayWrapper . copyBytes ( bytes , NUMBER_CONSTANT , newbytes , NUMBER_CONSTANT , size ) ; } bytes = newbytes ; } return this ; }
@ org.junit.Test public void testConnectFailureDueToNetworkAddFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito . doAnswer ( new android.app.test.MockAnswerUtil.AnswerWithArguments () { public void answer ( ISupplicantStaIface.addNetworkCallback cb ) throws android.os.RemoteException { cb . onValues ( mStatusFailure , org.mockito.Mockito . mock ( android.hardware.wifi.supplicant.V1_0.ISupplicantStaNetwork . class ) ) ; return; } } ) . when ( mISupplicantStaIfaceMock ) . addNetwork ( org.mockito.Matchers . any ( ISupplicantStaIface.addNetworkCallback . class ) ) ; assertFalse ( mDut . connectToNetwork ( new android.net.wifi.WifiConfiguration () , false ) ) ; }
private void add ( com.android.sdklib.BuildToolInfo.PathId id , java.io.File path ) { java.lang.String str = path . getAbsolutePath () ; if ( ( path . isDirectory () ) && ( ( str . charAt ( ( ( str . length () ) - NUMBER_CONSTANT ) ) ) != ( java.io.File.separatorChar ) ) ) { str += java.io.File.separatorChar ; } mPaths . put ( id , str ) ; }
public void setWallpaperPosition ( android.os.IBinder window , float x , float y , float xStep , float yStep ) { synchronized ( mWindowMap ) { long ident = android.os.Binder . clearCallingIdentity () ; try { setWindowWallpaperPositionLocked ( windowForClientLocked ( this , window , true ) , x , y , xStep , yStep ) ; } finally { android.os.Binder . restoreCallingIdentity ( ident ) ; } } }
public static void init ( android.content.Context context ) { if ( com.android.mms.util.RateController.LOCAL_LOGV ) { android.util.Log . v ( com.android.mms.util.RateController.TAG , STRING_CONSTANT ) ; } if ( ( com.android.mms.util.RateController.sInstance ) != null ) { android.util.Log . w ( com.android.mms.util.RateController.TAG , STRING_CONSTANT ) ; return; } com.android.mms.util.RateController.sInstance = new com.android.mms.util.RateController ( context ) ; }
synchronized void nAllocationElementRead ( long id , int xoff , int yoff , int zoff , int mip , int compIdx , byte [] d , int sizeBytes ) { validate () ; rsnAllocationElementRead ( mContext , id , xoff , yoff , zoff , mip , compIdx , d , sizeBytes ) ; }
private android.graphics.Rect getVisibleBounds ( android.view.accessibility.AccessibilityNodeInfo node ) { if ( ! ( visible ) ) { return new android.graphics.Rect () ; } android.graphics.Rect visibleBounds = getBounds () ; io.appium.droiddriver.uiautomation.UiAutomationElement parent = getParent () ; android.graphics.Rect parentBounds ; while ( parent != null ) { parentBounds = parent . getBounds () ; visibleBounds . intersect ( parentBounds ) ; parent = parent . getParent () ; } return visibleBounds ; }
public boolean isSubViewOf ( @ com.android.annotations.NonNull java.lang.String parentViewFqcn , @ com.android.annotations.NonNull java.lang.String childViewFqcn ) { while ( ! ( childViewFqcn . equals ( STRING_CONSTANT ) ) ) { if ( parentViewFqcn . equals ( childViewFqcn ) ) { return true ; } java.lang.String parent = getParentViewClass ( childViewFqcn ) ; if ( parent == null ) { return true ; } childViewFqcn = parent ; } return false ; }
@ org.junit.Test public void testConnectFailureDueToNetworkSaveFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito . when ( mSupplicantStaNetworkMock . saveWifiConfiguration ( org.mockito.Matchers . any ( android.net.wifi.WifiConfiguration . class ) ) ) . thenReturn ( false ) ; assertFalse ( mDut . connectToNetwork ( new android.net.wifi.WifiConfiguration () , false ) ) ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( method ) ; com.android.jack.transformations.ast.MultiDimensionNewArrayRemover.Visitor visitor = new com.android.jack.transformations.ast.MultiDimensionNewArrayRemover.Visitor ( tr ) ; visitor . accept ( method ) ; tr . commit () ; }
public static void setLength ( int id , long len ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . incModCount ( id ) ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getRecords () . putLong ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getOffset ( id , com.intellij.openapi.vfs.newvfs.persistent.FSRecords.LENGTH_OFFSET ) , len ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
public final void onSmsReceived ( int token , java.lang.String format , byte [] pdu ) throws java.lang.IllegalStateException { synchronized ( mLock ) { if ( ( mListener ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } try { mListener . onSmsReceived ( token , format , pdu ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.telephony.ims.internal.SmsImplBase.LOG_TAG , ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; acknowledgeSms ( token , NUMBER_CONSTANT , android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_ERROR ) ; } } }
public java.lang.String getName ( android.bluetooth.BluetoothDevice device ) { com.android.settingslib.bluetooth.CachedBluetoothDevice cachedDevice = findDevice ( device ) ; if ( ( cachedDevice != null ) && ( ( cachedDevice . getName () ) != null ) ) { return cachedDevice . getName () ; } java.lang.String name = device . getAliasName () ; if ( name != null ) { return name ; } return device . getAddress () ; }
@ javax.annotation.Nonnull public static java.util.Collection < com.android.jack.ir.ast.JFieldId > collectAllFieldIdsInHierarchy ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface referenceType , @ javax.annotation.Nonnull java.util.Collection < com.android.jack.ir.ast.JDefinedClassOrInterface > allTypes ) { java.util.List < com.android.jack.ir.ast.JFieldId > collectedFields = new java.util.ArrayList < com.android.jack.ir.ast.JFieldId > () ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : allTypes ) { if ( ( referenceType . canBeSafelyUpcast ( type ) ) || ( type . canBeSafelyUpcast ( referenceType ) ) ) { for ( com.android.jack.ir.ast.JField field : type . getFields () ) { collectedFields . add ( field . getId () ) ; } } } return collectedFields ; }
@ org.junit.Test public void getProperty_unknown ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock . createMock ( com.android.ddmlib.IDevice . class ) ; injectShellResponse ( mockDevice , com.android.ddmlib.PropertyFetcherTest.GETPROP_RESPONSE ) ; org.easymock.EasyMock . replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; org.junit.Assert . assertNull ( fetcher . getProperty ( STRING_CONSTANT ) . get () ) ; }
public static < E extends java.lang.Enum < E > > java.util.EnumSet < E > newEnumSet ( java.lang.Iterable < E > iterable , java.lang.Class < E > elementType ) { java.util.EnumSet < E > set = java.util.EnumSet . noneOf ( elementType ) ; com.google.common.collect.Iterables . addAll ( set , iterable ) ; return set ; }
@ java.lang.Override public void onReceivedTouchIconUrl ( android.webkit.WebView view , java.lang.String url , boolean precomposed ) { final android.content.ContentResolver cr = mActivity . getContentResolver () ; if ( precomposed && ( ( mTouchIconLoader ) != null ) ) { mTouchIconLoader . cancel ( false ) ; mTouchIconLoader = null ; } if ( ( mTouchIconLoader ) == null ) { mTouchIconLoader = new com.android.browser.DownloadTouchIcon ( this , mActivity , cr , view ) ; mTouchIconLoader . execute ( url ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.chromium.base.annotations.CalledByNative private static java.lang.String getDownloadsDirectory () { android.os.StrictMode.ThreadPolicy oldPolicy = android.os.StrictMode . allowThreadDiskReads () ; java.lang.String downloadsPath ; try { long time = android.os.SystemClock . elapsedRealtime () ; downloadsPath = android.os.Environment . getExternalStoragePublicDirectory ( Environment.DIRECTORY_DOWNLOADS ) . getPath () ; org.chromium.base.metrics.RecordHistogram . recordTimesHistogram ( STRING_CONSTANT , ( ( android.os.SystemClock . elapsedRealtime () ) - time ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; } finally { android.os.StrictMode . setThreadPolicy ( oldPolicy ) ; } return downloadsPath ; }
private void responseCellInfoList ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.util.ArrayList < com.android.internal.telephony.V1_0.CellInfo > cellInfo ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { java.util.ArrayList < android.telephony.CellInfo > ret = com.android.internal.telephony.RIL . convertHalCellInfoList ( cellInfo ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
@ org.junit.BeforeClass public static void setUpClass () { com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.CLASSPATH = new java.io.File [] { com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) } ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.SOURCELIST = com.android.jack.TestTools . getTargetLibSourcelist ( STRING_CONSTANT ) ; }
@ java.lang.Override protected void runTestImpl ( final com.android.cts.Test test ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException { try { if ( ! ( mTestStop ) ) { mCurrentTestSuite = test . getTestSuite () ; mCurrentTestSuite . run ( mDevice , test ) ; } } catch ( com.android.cts.DeviceDisconnectedException e ) { cleanUp () ; throw e ; } }
private void assertEqualRoutes ( java.util.Collection < android.net.RouteInfo > expected , java.util.Collection < android.net.RouteInfo > actual ) { java.util.Set < android.net.RouteInfo > expectedSet = new android.util.ArraySet ( expected ) ; java.util.Set < android.net.RouteInfo > actualSet = new android.util.ArraySet ( actual ) ; org.junit.Assert . assertEquals ( actual . size () , actualSet . size () ) ; org.junit.Assert . assertEquals ( expectedSet , actualSet ) ; }
public void test_enumerationLjava_util_Collection () { java.util.TreeSet ts = new java.util.TreeSet () ; ts . addAll ( s ) ; java.util.Enumeration e = java.util.Collections . enumeration ( ts ) ; int count = NUMBER_CONSTANT ; while ( e . hasMoreElements () ) { assertEquals ( STRING_CONSTANT , e . nextElement () , objArray [ ( count ++ ) ] ) ; } assertEquals ( ( STRING_CONSTANT + count ) , objArray.length , count ) ; }
public void testAnonymousClassModifiers () { int modifiers = libcore.java.lang.reflect.ReflectionTest.staticAnonymous . getClass () . getModifiers () ; assertFalse ( java.lang.reflect.Modifier . isPublic ( modifiers ) ) ; assertFalse ( java.lang.reflect.Modifier . isProtected ( modifiers ) ) ; assertFalse ( java.lang.reflect.Modifier . isPrivate ( modifiers ) ) ; assertFalse ( java.lang.reflect.Modifier . isAbstract ( modifiers ) ) ; java.lang.reflect.Modifier . isStatic ( modifiers ) ; assertFalse ( java.lang.reflect.Modifier . isFinal ( modifiers ) ) ; assertFalse ( java.lang.reflect.Modifier . isStrict ( modifiers ) ) ; }
private void onConnectionStateChanged ( android.bluetooth.BluetoothDevice device , int prevState , int state ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED ) ; intent . putExtra ( BluetoothProfile.EXTRA_PREVIOUS_STATE , prevState ) ; intent . putExtra ( BluetoothProfile.EXTRA_STATE , state ) ; intent . putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; mContext . sendBroadcast ( intent , ProfileService.BLUETOOTH_PERM ) ; log ( ( ( ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + prevState ) + STRING_CONSTANT ) + state ) ) ; }
@ java.lang.Override public void exit () { mIPv6TetherSvc . stop () ; try { mNMService . untetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception ee ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR ; android.util.Log . e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( STRING_CONSTANT + ( ee . toString () ) ) ) ; } configureIfaceIp ( false ) ; }
public android.util.Pair < java.lang.Long , java.lang.Long > getBackoff ( android.accounts.Account account , int userId , java.lang.String providerName ) { synchronized ( mAuthorities ) { android.content.SyncStorageEngine.AuthorityInfo authority = getAuthorityLocked ( account , userId , providerName , STRING_CONSTANT ) ; if ( ( authority == null ) || ( ( authority.backoffTime ) < NUMBER_CONSTANT ) ) { return null ; } return android.util.Pair . create ( authority.backoffTime , authority.backoffDelay ) ; } }
public final V get ( K key ) { if ( key == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } V result ; synchronized ( this ) { result = map . get ( key ) ; if ( result != null ) { return result ; } } result = create ( key ) ; synchronized ( this ) { if ( result != null ) { map . put ( key , result ) ; trimToSize ( maxSize ) ; } } return result ; }
@ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( com.android.dialer.app.calllog.CallLogFragment.KEY_FILTER_TYPE , mCallTypeFilter ) ; outState . putInt ( com.android.dialer.app.calllog.CallLogFragment.KEY_LOG_LIMIT , mLogLimit ) ; outState . putLong ( com.android.dialer.app.calllog.CallLogFragment.KEY_DATE_LIMIT , mDateLimit ) ; outState . putBoolean ( com.android.dialer.app.calllog.CallLogFragment.KEY_IS_CALL_LOG_ACTIVITY , mIsCallLogActivity ) ; outState . putBoolean ( com.android.dialer.app.calllog.CallLogFragment.KEY_HAS_READ_CALL_LOG_PERMISSION , mHasReadCallLogPermission ) ; outState . putBoolean ( com.android.dialer.app.calllog.CallLogFragment.KEY_REFRESH_DATA_REQUIRED , mRefreshDataRequired ) ; outState . putBoolean ( com.android.dialer.app.calllog.CallLogFragment.KEY_SELECT_ALL_MODE , selectAllMode ) ; if ( ( mAdapter ) != null ) { mAdapter . onSaveInstanceState ( outState ) ; } }
public static int forkSystemServer ( int uid , int gid , int [] gids , int runtimeFlags , int [] [] rlimits , long permittedCapabilities , long effectiveCapabilities ) { com.android.internal.os.Zygote.VM_HOOKS . preFork () ; com.android.internal.os.Zygote . resetNicePriority () ; int pid = com.android.internal.os.Zygote . nativeForkSystemServer ( uid , gid , gids , runtimeFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == NUMBER_CONSTANT ) { android.os.Trace . setTracingEnabled ( true , runtimeFlags ) ; } com.android.internal.os.Zygote.VM_HOOKS . postForkCommon () ; return pid ; }
public void testProgramsGenresEncode () { if ( ! ( android.media.tv.cts.Utils . hasTvInputFramework ( getContext () ) ) ) { return; } assertEquals ( android.media.tv.cts.TvContractTest.ENCODED_GENRE_STRING , android.media.tv.TvContract.Programs.Genres . encode ( Genres.ANIMAL_WILDLIFE , Genres.COMEDY , Genres.DRAMA , Genres.EDUCATION , Genres.FAMILY_KIDS , Genres.GAMING , Genres.MOVIES , Genres.NEWS , Genres.SHOPPING , Genres.SPORTS , Genres.TRAVEL ) ) ; }
public void fconst ( final float cst ) { int bits = java.lang.Float . floatToIntBits ( cst ) ; if ( ( ( bits == NUMBER_CONSTANT ) || ( bits == NUMBER_CONSTANT ) ) || ( bits == NUMBER_CONSTANT ) ) { mv . visitInsn ( ( ( org.objectweb.asm.Opcodes.FCONST_0 ) + ( ( int ) ( cst ) ) ) ) ; } else { mv . visitLdcInsn ( cst ) ; } }
private void assertContent ( java.lang.String expected , java.net.URLConnection connection , int limit ) throws java.io.IOException { connection . connect () ; org.junit.Assert . assertEquals ( expected , readAscii ( connection . getInputStream () , limit ) ) ; ( ( java.net.HttpURLConnection ) ( connection ) ) . disconnect () ; }
public void testOneSystemOneDeleted ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; store . deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertEmpty () ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; }
public static com.android.dx.rop.annotation.Annotations getAnnotations ( com.android.dx.cf.iface.AttributeList attribs ) { com.android.dx.rop.annotation.Annotations result = com.android.dx.dex.cf.AttributeTranslator . getAnnotations0 ( attribs ) ; com.android.dx.rop.annotation.Annotation signature = com.android.dx.dex.cf.AttributeTranslator . getSignature ( attribs ) ; if ( signature != null ) { result = com.android.dx.rop.annotation.Annotations . combine ( result , signature ) ; } return result ; }
@ com.android.annotations.NonNull public java.util.List < java.io.File > getRenderscriptImports () { java.util.List < java.io.File > list = com.google.common.collect.Lists . newArrayList () ; for ( com.android.builder.dependency.AndroidDependency lib : mFlatLibraries ) { java.io.File rsLib = lib . getRenderscriptFolder () ; if ( rsLib . isDirectory () ) { list . add ( rsLib ) ; } } return list ; }
private void closeKeyChainConnections () { synchronized ( mKeyChainConnectionByProfileId ) { final int n = mKeyChainConnectionByProfileId . size () ; for ( int i = NUMBER_CONSTANT ; i < n ; ++ i ) { mKeyChainConnectionByProfileId . valueAt ( i ) . close () ; } mKeyChainConnectionByProfileId . clear () ; } }
@ java.lang.Override public boolean isApplicable ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) throws com.android.jack.lookup.JMethodLookupException { if ( ( call . getReceiverType () . isSameType ( javaLangClass ) ) && ( call . getMethodId () . equals ( getFieldMethodId ) ) ) { assert formatter . getName ( call . getType () ) . equals ( com.android.jack.transformations.ast.string.parameterrefiners.FIELD_CLASS_SIGNATURE ) ; return true ; } return false ; }
@ org.junit.Test public void testAsyncChannelHalfConnected () { com.android.server.wifi.WifiServiceImplTest.WifiAsyncChannelTester channelTester = new com.android.server.wifi.WifiServiceImplTest.WifiAsyncChannelTester ( mWifiInjector ) ; android.os.Handler handler = mock ( android.os.Handler . class ) ; android.os.test.TestLooper looper = new android.os.test.TestLooper () ; channelTester . connect ( looper . getLooper () , mWifiServiceImpl . getWifiServiceMessenger () , handler ) ; mLooper . dispatchAll () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.android.server.wifi.WifiServiceImplTest.WifiAsyncChannelTester.CHANNEL_STATE_HALF_CONNECTED , channelTester . getChannelState () ) ; }
public void test_write_I ( ) throws java.io.IOException { int length = compressToBytes ( testString ) ; try ( java.util.zip.InflaterOutputStream ios = new java.util.zip.InflaterOutputStream ( os ) ) { for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { ios . write ( compressedBytes [ i ] ) ; } java.lang.String result = new java.lang.String ( os . toByteArray () ) ; assertEquals ( testString , result ) ; } }
@ java.lang.Override protected void readSourceFolder ( java.io.File sourceFolder , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { java.io.File [] folders = sourceFolder . listFiles () ; if ( folders != null ) { for ( java.io.File folder : folders ) { if ( ( folder . isDirectory () ) && ( com.android.ide.common.packaging.PackagingUtils . checkFolderForPackaging ( folder . getName () ) ) ) { com.android.ide.common.res2.ResourceSet.FolderData folderData = com.android.ide.common.res2.ResourceSet . getFolderData ( folder ) ; if ( folderData != null ) { parseFolder ( sourceFolder , folder , folderData , logger ) ; } } } } }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.util.file.InputStreamFile checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { super . checkString ( context , string ) ; if ( string . equals ( com.android.sched.util.codec.STANDARD_IO_NAME ) ) { return new com.android.sched.util.file.InputStreamFile () ; } else { try { return new com.android.sched.util.file.InputStreamFile ( string ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e . getMessage () , e ) ; } } }
@ java.lang.Override public java.lang.Throwable [] getSuppressed ( java.lang.Throwable receiver ) { java.util.List < java.lang.Throwable > list = map . get ( receiver , false ) ; if ( ( list == null ) || ( list . isEmpty () ) ) { return com.google.devtools.build.android.desugar.runtime.ThrowableExtension.AbstractDesugaringStrategy.EMPTY_THROWABLE_ARRAY ; } return list . toArray ( com.google.devtools.build.android.desugar.runtime.ThrowableExtension.AbstractDesugaringStrategy.EMPTY_THROWABLE_ARRAY ) ; }
@ java.lang.Override public java.util.Collection < com.android.build.gradle.managed.SigningConfig > getSigningConfigs () { return com.google.common.collect.ImmutableList . copyOf ( com.google.common.collect.Iterables . transform ( model . getSigningConfigs () . values () , new com.google.common.base.Function < com.android.build.gradle.managed.SigningConfig , com.android.build.gradle.managed.SigningConfig > () { @ java.lang.Override public com.android.build.gradle.managed.SigningConfig apply ( com.android.build.gradle.managed.SigningConfig signingConfig ) { return new com.android.build.gradle.managed.adaptor.SigningConfigAdaptor ( signingConfig ) ; } } ) ) ; }
public java.util.List < com.android.internal.telephony.SmsRawData > getAllMessagesFromIccEf () { if ( com.android.internal.telephony.gsm.SimSmsInterfaceManager.DBG ) log ( STRING_CONSTANT ) ; android.content.Context context = mPhone . getContext () ; context . enforceCallingPermission ( STRING_CONSTANT , STRING_CONSTANT ) ; synchronized ( mLock ) { android.os.Message response = mHandler . obtainMessage ( com.android.internal.telephony.gsm.SimSmsInterfaceManager.EVENT_LOAD_DONE ) ; mPhone . getIccFileHandler () . loadEFLinearFixedAll ( IccConstants.EF_SMS , response ) ; try { mLock . wait () ; } catch ( java.lang.InterruptedException e ) { log ( STRING_CONSTANT ) ; } } return mSms ; }
@ org.junit.Test public void testBasics ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( CHECKSUMS.README_TXT , com.intellij.updater.Digester . digestRegularFile ( new java.io.File ( getDataDir () , STRING_CONSTANT ) , false ) ) ; org.junit.Assert . assertEquals ( CHECKSUMS.FOCUSKILLER_DLL , com.intellij.updater.Digester . digestRegularFile ( new java.io.File ( getDataDir () , STRING_CONSTANT ) , false ) ) ; org.junit.Assert . assertEquals ( CHECKSUMS.BOOTSTRAP_JAR , com.intellij.updater.Digester . digestZipFile ( new java.io.File ( getDataDir () , STRING_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( CHECKSUMS.BOOTSTRAP_JAR_BINARY , com.intellij.updater.Digester . digestRegularFile ( new java.io.File ( getDataDir () , STRING_CONSTANT ) , false ) ) ; }
protected java.lang.Class < > loadClass ( java.lang.String name , boolean resolve ) throws java.lang.ClassNotFoundException { if ( ( name . equals ( STRING_CONSTANT ) ) || ( name . equals ( STRING_CONSTANT ) ) ) { return super . loadClass ( name , resolve ) ; } else if ( name . equals ( STRING_CONSTANT ) ) { return defining_loader . loadClass ( STRING_CONSTANT , resolve ) ; } return super . loadClass ( name , resolve ) ; }
public void push ( final double value ) { long bits = java.lang.Double . doubleToLongBits ( value ) ; if ( ( bits == NUMBER_CONSTANT ) || ( bits == NUMBER_CONSTANT ) ) { mv . visitInsn ( ( ( org.objectweb.asm.Opcodes.DCONST_0 ) + ( ( int ) ( value ) ) ) ) ; } else { mv . visitLdcInsn ( value ) ; } }
public static < T extends com.google.protobuf.nano.MessageNano > java.lang.String print ( T message ) { if ( message == null ) { return STRING_CONSTANT ; } java.lang.StringBuffer buf = new java.lang.StringBuffer () ; try { com.google.protobuf.nano.MessageNanoPrinter . print ( null , message , new java.lang.StringBuffer () , buf ) ; } catch ( java.lang.IllegalAccessException e ) { return STRING_CONSTANT + ( e . getMessage () ) ; } return buf . toString () ; }
private static boolean isManifestName ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.XmlContext context ) { org.w3c.dom.Attr attribute = context . getAttribute () ; if ( ( ( attribute != null ) && ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_NAME . equals ( attribute . getLocalName () ) ) ) && ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI . equals ( attribute . getNamespaceURI () ) ) ) { if ( ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks . getEditor () ) instanceof com.android.ide.eclipse.adt.internal.editors.manifest.ManifestEditor ) { return true ; } } return false ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest ( ) throws java.lang.Exception { switchImsSmsFormat ( PhoneConstants.PHONE_TYPE_CDMA ) ; mImsSmsDispatcher . sendText ( STRING_CONSTANT , STRING_CONSTANT , com.android.internal.telephony.TAG , null , null , null , null , false , ( - NUMBER_CONSTANT ) , false , ( - NUMBER_CONSTANT ) ) ; org.mockito.Mockito . verify ( mSimulatedCommandsVerifier ) . sendImsCdmaSms ( ( ( byte [] ) ( org.mockito.Matchers . any () ) ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Matchers . any ( android.os.Message . class ) ) ; }
private void connectOtherProfile ( android.bluetooth.BluetoothDevice device ) { if ( ( ! ( mHandler . hasMessages ( com.android.bluetooth.btservice.PhonePolicy.MESSAGE_CONNECT_OTHER_PROFILES ) ) ) && ( ! ( mAdapterService . isQuietModeEnabled () ) ) ) { android.os.Message m = mHandler . obtainMessage ( com.android.bluetooth.btservice.PhonePolicy.MESSAGE_CONNECT_OTHER_PROFILES ) ; m.obj = device ; mHandler . sendMessageDelayed ( m , com.android.bluetooth.btservice.PhonePolicy.CONNECT_OTHER_PROFILES_TIMEOUT ) ; } }
public com.android.jack.dx.dex.file.StringIdItem intern ( com.android.jack.dx.rop.cst.CstString string ) { assert string != null ; throwIfPrepared () ; com.android.jack.dx.dex.file.StringIdItem already = strings . get ( string ) ; if ( already != null ) { return already ; } com.android.jack.dx.dex.file.StringIdItem result = new com.android.jack.dx.dex.file.StringIdItem ( string ) ; strings . put ( string , result ) ; return result ; }
private void loadFromWpaSupplicant ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configurationMap , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { if ( ! ( mWifiNative . migrateNetworksFromSupplicant ( configurationMap , networkExtras ) ) ) { android.util.Log . wtf ( com.android.server.wifi.WifiConfigStoreLegacy.TAG , STRING_CONSTANT ) ; return; } if ( configurationMap . isEmpty () ) { android.util.Log . w ( com.android.server.wifi.WifiConfigStoreLegacy.TAG , STRING_CONSTANT ) ; return; } }
@ org.junit.Test public void startHwDisconnectedPnoScan () { createScannerWithHwPnoScanSupport () ; com.android.server.wifi.WifiNative.PnoEventHandler pnoEventHandler = mock ( WifiNative.PnoEventHandler . class ) ; com.android.server.wifi.WifiNative.PnoSettings pnoSettings = createDummyPnoSettings ( false ) ; com.android.server.wifi.ScanResults scanResults = createDummyScanResults ( false ) ; org.mockito.InOrder order = inOrder ( pnoEventHandler , mWifiNative ) ; startSuccessfulPnoScan ( null , pnoSettings , null , pnoEventHandler ) ; expectSuccessfulHwDisconnectedPnoScan ( order , pnoSettings , pnoEventHandler , scanResults ) ; verifyNoMoreInteractions ( pnoEventHandler ) ; }
private void setWeekCountData ( java.util.Locale desiredLocale ) { int [] data = java.util.Calendar.cachedLocaleData . get ( desiredLocale ) ; if ( data == null ) { data = new int [ NUMBER_CONSTANT ] ; libcore.icu.LocaleData localeData = libcore.icu.LocaleData . get ( desiredLocale ) ; data [ NUMBER_CONSTANT ] = localeData.firstDayOfWeek . intValue () ; data [ NUMBER_CONSTANT ] = localeData.minimalDaysInFirstWeek . intValue () ; java.util.Calendar.cachedLocaleData . putIfAbsent ( desiredLocale , data ) ; } firstDayOfWeek = data [ NUMBER_CONSTANT ] ; minimalDaysInFirstWeek = data [ NUMBER_CONSTANT ] ; }
@ java.lang.Override public boolean isTrue ( ) throws java.lang.Exception { java.lang.String result = device . executeShellCommand ( ( STRING_CONSTANT + BUG_REPORT_DIR ) ) ; android.util.Log . d ( TAG , ( STRING_CONSTANT + result ) ) ; boolean success = ( result . matches ( STRING_CONSTANT ) ) && ( result . matches ( STRING_CONSTANT ) ) ; return success ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public void wifiNanSendMessage ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT + STRING_CONSTANT ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT + STRING_CONSTANT ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT + STRING_CONSTANT ) java.lang.Integer messageId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.String message , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT + STRING_CONSTANT ) java.lang.Integer retryCount ) throws android.os.RemoteException { android.net.wifi.nan.WifiNanDiscoveryBaseSession session ; synchronized ( mLock ) { session = mDiscoverySessions . get ( sessionId ) ; } if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( STRING_CONSTANT + sessionId ) + STRING_CONSTANT ) ) ; } byte [] bytes = message . getBytes () ; session . sendMessage ( peerId , messageId , bytes , retryCount ) ; }
com.android.bluetooth.gatt.ContextMap < T > . App getByUuid ( java.util.UUID uuid ) { synchronized ( mApps ) { java.util.Iterator < com.android.bluetooth.gatt.ContextMap < T > . App > i = mApps . iterator () ; while ( i . hasNext () ) { com.android.bluetooth.gatt.ContextMap < T > . App entry = i . next () ; if ( entry.uuid . equals ( uuid ) ) return entry ; } } android.util.Log . e ( com.android.bluetooth.gatt.ContextMap.TAG , ( STRING_CONSTANT + uuid ) ) ; return null ; }
@ com.android.annotations.Nullable private java.awt.image.BufferedImage getImage ( @ com.android.annotations.Nullable java.io.File file ) throws java.io.IOException { if ( file == null ) { return null ; } if ( ( mImageCache ) == null ) { mImageCache = com.google.common.collect.Maps . newHashMap () ; } else { java.awt.image.BufferedImage image = mImageCache . get ( file ) ; if ( image != null ) { return image ; } } java.awt.image.BufferedImage image = javax.imageio.ImageIO . read ( file ) ; mImageCache . put ( file , image ) ; return image ; }
public static synchronized boolean getStoreTsStream ( android.content.Context context ) { com.android.tv.common.SoftPreconditions . checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_STORE_TS_STREAM , false ) ; } else { return com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_STORE_TS_STREAM , false ) ; } }
@ com.android.sched.util.findbugs.SuppressFBWarnings ( value = STRING_CONSTANT ) private void freeLoadedPrograms () { java.util.Collection < com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > > programs = getInstalledJacks () ; for ( com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > program : programs ) { synchronized ( program ) { program . setLoadedProgram ( null ) ; } } java.lang.System . gc () ; }
private void enqueueConnectRetry ( int msg ) { final boolean isLongDelay = ( mBindRetryCount ) > ( com.android.phone.CallHandlerServiceProxy.MAX_SHORT_DELAY_RETRY_COUNT ) ; final int delay = ( isLongDelay ) ? com.android.phone.CallHandlerServiceProxy.RETRY_DELAY_LONG_MILLIS : com.android.phone.CallHandlerServiceProxy.RETRY_DELAY_MILLIS ; android.util.Log . w ( com.android.phone.CallHandlerServiceProxy.TAG , ( ( ( ( ( STRING_CONSTANT + delay ) + STRING_CONSTANT ) + STRING_CONSTANT ) + ( mBindRetryCount ) ) + STRING_CONSTANT ) ) ; sendEmptyMessageDelayed ( msg , delay ) ; }
private android.app.Dialog getSimRemainingAttemptsDialog ( int remaining ) { java.lang.String msg = getPinPasswordErrorMessage ( remaining , false ) ; if ( ( mRemainingAttemptsDialog ) == null ) { android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder ( mContext ) ; builder . setMessage ( msg ) ; builder . setCancelable ( false ) ; builder . setNeutralButton ( R.string.ok , null ) ; mRemainingAttemptsDialog = builder . create () ; mRemainingAttemptsDialog . getWindow () . setType ( WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG ) ; } else { mRemainingAttemptsDialog . setMessage ( msg ) ; } return mRemainingAttemptsDialog ; }
@ java.lang.Override public void onStart () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; super . onStart () ; com.android.dialer.oem.CequintCallerIdManager cequintCallerIdManager = null ; if ( com.android.dialer.oem.CequintCallerIdManager . isCequintCallerIdEnabled ( getContext () ) ) { cequintCallerIdManager = new com.android.dialer.oem.CequintCallerIdManager () ; } contactInfoCache . setCequintCallerIdManager ( cequintCallerIdManager ) ; }
public boolean equals ( java.lang.Object other ) { if ( ( this ) == other ) return true ; if ( ! ( other instanceof sun.security.x509.Extension ) ) return false ; sun.security.x509.Extension otherExt = ( ( sun.security.x509.Extension ) ( other ) ) ; if ( ( critical ) != ( otherExt.critical ) ) return false ; if ( ! ( extensionId . equals ( ( ( java.lang.Object ) ( otherExt.extensionId ) ) ) ) ) return false ; return java.util.Arrays . equals ( extensionValue , otherExt.extensionValue ) ; }
public static void main ( java.lang.String [] args ) throws java.lang.Throwable { Main . testfindSpecial_invokeSuperBehaviour () ; Main . testfindSpecial_invokeDirectBehaviour () ; Main . testExceptionDetailMessages () ; Main . testfindVirtual () ; Main . testfindStatic () ; Main . testUnreflects () ; Main . testAsType () ; Main . testConstructors () ; Main . testStringConstructors () ; Main . testReturnValueConversions () ; }
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.stk.StkMenuActivity.MSG_ID_TIMEOUT : com.android.internal.telephony.cat.CatLog . d ( com.android.stk.StkMenuActivity.LOG_TAG , ( STRING_CONSTANT + ( mState ) ) ) ; if ( ( mState ) == ( com.android.stk.StkMenuActivity.STATE_SECONDARY ) ) { appService . getStkContext ( mSlotId ) . setPendingActivityInstance ( mInstance ) ; } sendResponse ( StkAppService.RES_ID_TIMEOUT ) ; break; } }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; if ( ! ( initializeGlobals ( s ) ) ) { failTest () ; } else { s . invoke_primitives_test ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; pRS . finish () ; waitForMessage () ; } s . destroy () ; pRS . destroy () ; }
public void paintFeedback ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GCWrapper gCWrapper ) { if ( ( ( ( mTargetNode ) != null ) && ( ( mFeedback ) != null ) ) && ( mFeedback.requestPaint ) ) { mCanvas . getRulesEngine () . callDropFeedbackPaint ( gCWrapper , mTargetNode , mFeedback ) ; mFeedback.requestPaint = false ; } }
public static com.android.util.Pair < org.eclipse.core.resources.IFile , org.eclipse.jface.text.IRegion > createXmlFile ( org.eclipse.core.resources.IProject project , org.eclipse.core.resources.IFile file , com.android.resources.ResourceFolderType folderType ) { com.android.ide.eclipse.adt.internal.wizards.newxmlfile.NewXmlFileCreationPage.TypeInfo type = com.android.ide.eclipse.adt.internal.wizards.newxmlfile.NewXmlFileCreationPage . getTypeInfo ( folderType ) ; java.lang.String xmlns = type . getXmlns () ; java.lang.String root = type . getDefaultRoot () ; if ( root == null ) { root = type . getRootSeed () . toString () ; } java.lang.String attrs = type . getDefaultAttrs ( project ) ; return com.android.ide.eclipse.adt.internal.wizards.newxmlfile.NewXmlFileWizard . createXmlFile ( file , xmlns , root , attrs , null ) ; }
@ org.junit.Test public void test_getHostNameCaches ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress . getByAddress ( libcore.java.net.InetAddressTest.LOOPBACK6_BYTES ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , libcore.java.net.InetAddressTest . getHostStringWithoutReverseDns ( inetAddress ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , inetAddress . getHostName () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , libcore.java.net.InetAddressTest . getHostStringWithoutReverseDns ( inetAddress ) ) ; }
public static java.lang.String [] getDefaultCipherSuites () { return new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , org.conscrypt.NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV } ; }
@ java.lang.Override public void cleanup () { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) { android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } if ( ! ( isMapStarted () ) ) { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) { android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } return; } else { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } setState ( BluetoothMap.STATE_DISCONNECTED , BluetoothMap.RESULT_CANCELED ) ; if ( ( mSessionStatusHandler ) != null ) { sendShutdownMessage () ; } mServiceStarted = false ; }
public void testChangedIgnoredFile ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceSet res = com.android.ide.common.res2.ResourceSetTest . getBaseResourceSet ( false ) ; com.android.ide.common.res2.ResourceMerger resourceMerger = new com.android.ide.common.res2.ResourceMerger () ; resourceMerger . addDataSet ( res ) ; java.io.File root = com.android.testutils.TestUtils . getRoot ( STRING_CONSTANT , STRING_CONSTANT ) ; java.io.File changedCVSFoo = new java.io.File ( root , STRING_CONSTANT ) ; com.android.ide.common.res2.FileValidity < com.android.ide.common.res2.ResourceSet > fileValidity = resourceMerger . findDataSetContaining ( changedCVSFoo ) ; assertEquals ( FileValidity.FileStatus.IGNORED_FILE , fileValidity.status ) ; }
@ org.junit.Test public void testGetCoreInterfaceRewritingTarget_staticInterfaceMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , java.lang.Thread . currentThread () . getContextClassLoader () , null , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . getCoreInterfaceRewritingTarget ( Opcodes.INVOKESTATIC , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , true ) ) . isEqualTo ( java.util.Comparator . class ) ; }
void stopComposition () { try { if ( ( mLooper ) != null ) { mLooper . quit () ; mCompositionThread . join () ; } } catch ( java.lang.InterruptedException e ) {} mCompositionThread = null ; mSurface = null ; mStartCompletionSemaphore = null ; }
public void run () { com.android.rs.test_v16.RenderScript pRS = com.android.rs.test_v16.RenderScript . create ( mCtx ) ; com.android.rs.test_v16.ScriptC_primitives s = new com.android.rs.test_v16.ScriptC_primitives ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; if ( ! ( initializeGlobals ( s ) ) ) { result = - NUMBER_CONSTANT ; } else { s . invoke_primitives_test ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; pRS . finish () ; waitForMessage () ; } pRS . destroy () ; }
public void deletePlaylist ( java.lang.String playlistname ) throws java.lang.Exception { android.app.Instrumentation inst = getInstrumentation () ; inst . sendStringSync ( playlistname ) ; java.lang.Thread . sleep ( MusicPlayerNames.WAIT_SHORT_TIME ) ; inst . sendKeyDownUpSync ( KeyEvent.KEYCODE_DPAD_DOWN ) ; inst . invokeContextMenuAction ( getActivity () , ( NUMBER_CONSTANT + NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; java.lang.Thread . sleep ( MusicPlayerNames.WAIT_SHORT_TIME ) ; clearSearchString ( playlistname . length () ) ; }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { final java.lang.String action = intent . getAction () ; if ( Intent.ACTION_BOOT_COMPLETED . equals ( action ) ) { final android.content.Intent usbState = context . registerReceiver ( null , new android.content.IntentFilter ( android.hardware.usb.UsbManager.ACTION_USB_STATE ) ) ; if ( usbState != null ) { handleUsbState ( context , usbState ) ; } } else if ( UsbManager.ACTION_USB_STATE . equals ( action ) ) { handleUsbState ( context , intent ) ; } }
public static final int getRepeatedFieldArrayLength ( final com.google.protobuf.nano.CodedInputByteBufferNano input , final int tag ) throws java.io.IOException { int arrayLength = NUMBER_CONSTANT ; int startPos = input . getPosition () ; input . skipField ( tag ) ; while ( ( input . readTag () ) == tag ) { input . skipField ( tag ) ; arrayLength ++ ; } input . rewindToPosition ( startPos ) ; return arrayLength ; }
public static void main ( java.lang.String [] args ) throws java.lang.Exception { java.io.BufferedReader in = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.lang.System.in ) ) ; java.lang.String line = null ; java.lang.StringBuilder responseData = new java.lang.StringBuilder () ; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator ( NUMBER_CONSTANT ) ; while ( ( line = in . readLine () ) != null ) android.net.apf.Bpf2Apf . convertLine ( line , gen ) ; java.lang.System.out . write ( gen . generate () ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testHeadsetSendDTMF ( ) throws java.lang.Exception { com.android.server.telecom.Call mockCall = createForegroundCall () ; boolean sentDtmf = mBluetoothPhoneService.mBinder . sendDtmf ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_DTMF_TONE ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . playDtmfTone ( org.mockito.Matchers . eq ( mockCall ) , org.mockito.Matchers . eq ( ( ( char ) ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_DTMF_TONE ) ) ) ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . stopDtmfTone ( org.mockito.Matchers . eq ( mockCall ) ) ; org.junit.Assert . assertEquals ( sentDtmf , true ) ; }
public synchronized void add ( long time , int type , float . . . values ) { assert ( values.length ) == ( myStreams ) ; float total = NUMBER_CONSTANT ; for ( float value : values ) { total += value ; } mMaxTotal = java.lang.Math . max ( mMaxTotal , total ) ; mSamples . add ( new com.android.tools.chartlib.TimelineData.Sample ( ( ( time - ( mStart ) ) / NUMBER_CONSTANT ) , type , values ) ) ; }
public synchronized void start () { if ( ( ( threadStatus ) != NUMBER_CONSTANT ) || ( started ) ) throw new java.lang.IllegalThreadStateException () ; group . add ( this ) ; started = false ; try { java.lang.Thread . nativeCreate ( this , stackSize , daemon ) ; started = true ; } finally { try { if ( ! ( started ) ) { group . threadStartFailed ( this ) ; } } catch ( java.lang.Throwable ignore ) {} } }
public static void main ( java.lang.String [] args ) throws java.io.IOException { vogar.Vogar vogar = new vogar.Vogar () ; if ( ! ( vogar . parseArgs ( args ) ) ) { vogar . printUsage () ; java.lang.System . exit ( NUMBER_CONSTANT ) ; } boolean allSuccess = vogar . run () ; java.lang.System . exit ( ( allSuccess ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public final void activityResumed ( android.os.IBinder token ) { final long origId = android.os.Binder . clearCallingIdentity () ; synchronized ( this ) { com.android.server.am.ActivityStack stack = com.android.server.am.ActivityRecord . getStackLocked ( token ) ; if ( stack != null ) { stack . activityResumedLocked ( token ) ; } } android.os.Binder . restoreCallingIdentity ( origId ) ; }
@ java.lang.Override public void enter () { android.os.Message currentMessage = getCurrentMessage () ; android.util.Log . i ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , ( ( ( STRING_CONSTANT + ( mDevice ) ) + STRING_CONSTANT ) + ( currentMessage == null ? STRING_CONSTANT : com.android.bluetooth.a2dp.A2dpStateMachine . messageWhatToString ( currentMessage.what ) ) ) ) ; mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; removeDeferredMessages ( com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT ) ; broadcastConnectionState ( mConnectionState , mLastConnectionState ) ; broadcastAudioState ( BluetoothA2dp.STATE_NOT_PLAYING , BluetoothA2dp.STATE_PLAYING ) ; }
@ java.lang.Override public java.util.Map < R , java.util.Map < C , V2 > > rowMap () { com.google.common.base.Function < java.util.Map < C , V1 > , java.util.Map < C , V2 > > rowFunction = new com.google.common.base.Function < java.util.Map < C , V1 > , java.util.Map < C , V2 > > () { @ java.lang.Override public java.util.Map < C , V2 > apply ( java.util.Map < C , V1 > row ) { return com.google.common.collect.Maps . transformValues ( row , function ) ; } } ; return com.google.common.collect.Maps . transformValues ( fromTable . rowMap () , rowFunction ) ; }
public boolean generate ( java.lang.String key , int uid , int flags ) { try { return ( mBinder . generate ( key , uid , flags ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
private void setupGraphicsSupport ( android.app.LoadedApk info , java.io.File cacheDir ) { if ( java.lang.Process . isIsolated () ) { return; } try { int uid = java.lang.Process . myUid () ; java.lang.String [] packages = android.app.ActivityThread . getPackageManager () . getPackagesForUid ( uid ) ; if ( packages != null ) { android.view.HardwareRenderer . setupDiskCache ( cacheDir ) ; android.renderscript.RenderScriptCacheDir . setupDiskCache ( cacheDir ) ; } } catch ( android.os.RemoteException e ) {} }
public void testGet () { java.util.concurrent.ConcurrentHashMap map = jsr166.ConcurrentHashMapTest . map5 () ; assertEquals ( STRING_CONSTANT , ( ( java.lang.String ) ( map . get ( one ) ) ) ) ; java.util.concurrent.ConcurrentHashMap empty = new java.util.concurrent.ConcurrentHashMap () ; assertNull ( map . get ( STRING_CONSTANT ) ) ; assertNull ( empty . get ( STRING_CONSTANT ) ) ; }
@ java.lang.Override protected void cleanup () { if ( com.android.bluetooth.hid.HidHostService.DBG ) android.util.Log . d ( com.android.bluetooth.hid.HidHostService.TAG , STRING_CONSTANT ) ; if ( mNativeAvailable ) { cleanupNative () ; mNativeAvailable = false ; } if ( ( mInputDevices ) != null ) { for ( android.bluetooth.BluetoothDevice device : mInputDevices . keySet () ) { int inputDeviceState = getConnectionState ( device ) ; if ( inputDeviceState != ( android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ) ) { broadcastConnectionState ( device , BluetoothProfile.STATE_DISCONNECTED ) ; } } mInputDevices . clear () ; } com.android.bluetooth.hid.HidHostService . clearHidHostService () ; }
public void string ( @ org.jetbrains.annotations.Nullable java.lang.String v ) throws java.io.IOException { try { if ( v == null ) { int32 ( NUMBER_CONSTANT ) ; return; } byte [] bytes = v . getBytes ( STRING_CONSTANT ) ; int32 ( ( ( short ) ( bytes.length ) ) ) ; for ( byte b : bytes ) { int8 ( b ) ; } } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.RuntimeException ( e ) ; } }
private void getEncoded ( java.security.cert.CertificateFactory f ) throws java.lang.Exception { java.security.cert.X509CRL crlRsa = getCRL ( f , libcore.java.security.cert.X509CRLTest.CRL_RSA ) ; byte [] crlRsaBytes = getResourceAsBytes ( libcore.java.security.cert.X509CRLTest.CRL_RSA ) ; assertEquals ( java.util.Arrays . toString ( crlRsaBytes ) , java.util.Arrays . toString ( crlRsa . getEncoded () ) ) ; }
@ javax.annotation.Nonnull public static java.io.File createTempDir ( ) throws java.io.IOException { try { final java.io.File tmpDir = com.android.sched.util.file.Files . createTempDir () ; java.lang.Runtime . getRuntime () . addShutdownHook ( new java.lang.Thread () { @ java.lang.Override public void run () { try { com.android.jack.test.toolchain.AbstractTestTools . deleteTempDir ( tmpDir ) ; } catch ( java.io.IOException e ) { java.lang.System.err . println ( e . getMessage () ) ; } } } ) ; return tmpDir ; } catch ( java.lang.IllegalStateException e ) { throw new java.io.IOException ( e ) ; } }
private static void onSuccess ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.voicemail.impl.OmtpVvmCarrierConfigHelper config ) { config . handleEvent ( com.android.voicemail.impl.VoicemailStatus . edit ( context , phoneAccountHandle ) , OmtpEvents.CONFIG_REQUEST_STATUS_SUCCESS ) ; com.android.voicemail.impl.ActivationTask . clearLegacyVoicemailNotification ( context , phoneAccountHandle ) ; com.android.voicemail.impl.sync.SyncTask . start ( context , phoneAccountHandle ) ; }
public static void main ( java.lang.String [] args ) throws java.io.IOException { util.build.BuildDalvikSuite cat = new util.build.BuildDalvikSuite () ; if ( ! ( cat . parseArgs ( args ) ) ) { util.build.BuildDalvikSuite . printUsage () ; java.lang.System . exit ( ( - NUMBER_CONSTANT ) ) ; } long start = java.lang.System . currentTimeMillis () ; cat . run ( null ) ; long end = java.lang.System . currentTimeMillis () ; java.lang.System.out . println ( ( STRING_CONSTANT + ( ( end - start ) / NUMBER_CONSTANT ) ) ) ; }
private void replaceUninitializedTypeInStack ( com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType oldType , com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType newType ) { com.google.common.base.Preconditions . checkArgument ( oldType . isUninitialized () , STRING_CONSTANT , oldType ) ; for ( int i = NUMBER_CONSTANT , size = operandStack . size () ; i < size ; ++ i ) { com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType type = operandStack . get ( i ) ; if ( type == oldType ) { operandStack . set ( i , newType ) ; } } }
public void unregisterListener ( android.os.storage.IMountServiceListener listener ) { synchronized ( mListeners ) { for ( com.android.server.MountService.MountServiceBinderListener bl : mListeners ) { if ( ( bl.mListener . asBinder () ) == ( listener . asBinder () ) ) { mListeners . remove ( mListeners . indexOf ( bl ) ) ; listener . asBinder () . unlinkToDeath ( bl , NUMBER_CONSTANT ) ; return; } } } }
boolean checkAppSwitchAllowedLocked ( int callingPid , int callingUid , java.lang.String name ) { if ( ( mAppSwitchesAllowedTime ) < ( android.os.SystemClock . uptimeMillis () ) ) { return true ; } final int perm = checkComponentPermission ( android.Manifest.permission.STOP_APP_SWITCHES , callingPid , callingUid , ( - NUMBER_CONSTANT ) , true ) ; if ( perm == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return true ; } android.util.Slog . w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_CONSTANT ) + callingUid ) + STRING_CONSTANT ) ) ; return false ; }
private void writeObject ( java.io.ObjectOutputStream stream ) throws java.io.IOException { stream . defaultWriteObject () ; stream . writeInt ( mappingsCount ) ; for ( java.util.Map.Entry < K , V > entry : entrySet () ) { stream . writeObject ( entry . getKey () ) ; stream . writeObject ( entry . getValue () ) ; } }
@ javax.annotation.Nonnull public com.android.sched.scheduler.ComponentFilterSet getFilters ( @ javax.annotation.Nonnull com.android.sched.scheduler.FeatureSet features ) { if ( ( features . containsAll ( filtersIfAll ) ) && ( features . containsNone ( filtersUnlessOne ) ) ) { return neededFilters . clone () ; } else { com.android.sched.scheduler.ComponentFilterSet set = scheduler . createComponentFilterSet () ; set . add ( com.android.sched.filter.NoFilter . class ) ; return set ; } }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID uuid ) { android.bluetooth.BluetoothGattService service = getService () ; if ( service == null ) return null ; android.bluetooth.BluetoothGattCharacteristic characteristic = service . getCharacteristic ( uuid ) ; if ( characteristic == null ) { showMessage ( STRING_CONSTANT ) ; return null ; } return characteristic ; }
public static void testSendEtwsMessageCancel ( android.app.Activity activity , int serialNumber ) { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION ) ; intent . putExtra ( STRING_CONSTANT , com.android.cellbroadcastreceiver.tests.SendTestMessages . createFromPdu ( activity , com.android.cellbroadcastreceiver.tests.SendTestMessages.etwsMessageCancel , serialNumber , NUMBER_CONSTANT ) ) ; activity . sendOrderedBroadcastAsUser ( intent , UserHandle.ALL , Manifest.permission.RECEIVE_EMERGENCY_BROADCAST , AppOpsManager.OP_RECEIVE_EMERGECY_SMS , null , null , Activity.RESULT_OK , null , null ) ; }
@ org.junit.Test public void testNotifyResponsePublishCancel ( ) throws org.json.JSONException { final short transactionId = NUMBER_CONSTANT ; android.os.Bundle args = new android.os.Bundle () ; args . putInt ( STRING_CONSTANT , WifiAwareNative.AWARE_STATUS_SUCCESS ) ; args . putInt ( STRING_CONSTANT , WifiAwareNative.AWARE_RESPONSE_PUBLISH_CANCEL ) ; com.android.server.wifi.aware.WifiAwareHalMock . callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils . convertBundleToJson ( args ) . toString () ) ; org.mockito.Mockito . verifyNoMoreInteractions ( mAwareStateManager ) ; }
@ java.lang.Override protected final void finalize ( ) throws java.lang.Throwable { try { if ( ( guard ) != null ) { org.conscrypt.Platform . closeGuardWarnIfOpen ( guard ) ; } if ( ( ssl ) != null ) { synchronized ( ssl ) { transitionTo ( EngineStates.STATE_CLOSED ) ; } } } finally { super . finalize () ; } }
public byte [] inflate ( byte [] bytes ) throws java.io.IOException { try ( java.io.InputStream in = new java.util.zip.InflaterInputStream ( new java.io.ByteArrayInputStream ( bytes ) ) ) { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream () ; byte [] buffer = new byte [ NUMBER_CONSTANT ] ; int count ; while ( ( count = in . read ( buffer ) ) != ( - NUMBER_CONSTANT ) ) { out . write ( buffer , NUMBER_CONSTANT , count ) ; } return out . toByteArray () ; } }
@ java.lang.Override public boolean clearScores () { if ( ( isCallerActiveScorer ( getCallingUid () ) ) || ( isCallerSystemUid () ) ) { final long token = android.os.Binder . clearCallingIdentity () ; try { clearInternal () ; return true ; } finally { android.os.Binder . restoreCallingIdentity ( token ) ; } } else { throw new java.lang.SecurityException ( STRING_CONSTANT ) ; } }
public void test_run_for_SimpleTest_should_perform_test () { java.lang.Class < > target = vogar.target.junit3.SimpleTest . class ; java.util.List < vogar.target.junit.VogarTest > tests = vogar.target.junit.JUnitRunnerFactory . createVogarTests ( target , null , vogar.target.JUnitRunnerTest.EMPTY_ARGS ) ; vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , skipPastReference , testEnvironment , NUMBER_CONSTANT , tests ) ; runner . run ( null ) ; org.mockito.Mockito . verify ( monitor ) . outcomeStarted ( ( ( target . getName () ) + STRING_CONSTANT ) ) ; org.mockito.Mockito . verify ( monitor ) . outcomeFinished ( Result.SUCCESS ) ; }
public static java.util.List < org.eclipse.core.resources.IProject > getReferencedProjects ( org.eclipse.core.resources.IProject project ) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IProject [] projects = project . getReferencedProjects () ; java.util.ArrayList < org.eclipse.core.resources.IProject > list = new java.util.ArrayList < org.eclipse.core.resources.IProject > () ; for ( org.eclipse.core.resources.IProject p : projects ) { if ( ( p . isOpen () ) && ( p . hasNature ( org.eclipse.jdt.core.JavaCore.NATURE_ID ) ) ) { list . add ( p ) ; } } return list ; }
private byte [] stringToByte ( java.lang.String mediaId ) { if ( ! ( mHmap . containsValue ( mediaId ) ) ) { int uid = ( mHmap . size () ) + NUMBER_CONSTANT ; mHmap . put ( uid , mediaId ) ; return intToByteArray ( uid ) ; } else { for ( int uid : mHmap . keySet () ) { if ( mHmap . get ( uid ) . equals ( mediaId ) ) { return intToByteArray ( uid ) ; } } } return null ; }
public void testCropBlank ( ) throws java.lang.Exception { java.awt.image.BufferedImage image = new java.awt.image.BufferedImage ( NUMBER_CONSTANT , NUMBER_CONSTANT , java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE ) ; java.awt.Graphics g = image . getGraphics () ; g . setColor ( new java.awt.Color ( NUMBER_CONSTANT , true ) ) ; g . fillRect ( NUMBER_CONSTANT , NUMBER_CONSTANT , image . getWidth () , image . getHeight () ) ; g . dispose () ; java.awt.image.BufferedImage crop = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils . cropBlank ( image , null ) ; assertNull ( crop ) ; }
@ javax.annotation.Nonnull private java.util.List < com.android.jack.analysis.DefinitionMarker > getDefinitions ( @ javax.annotation.Nonnull java.util.List < com.android.jack.analysis.DefinitionMarker > definitions , @ javax.annotation.Nonnull java.util.BitSet in ) { java.util.List < com.android.jack.analysis.DefinitionMarker > reachingDefs = new java.util.ArrayList < com.android.jack.analysis.DefinitionMarker > () ; for ( int i = in . nextSetBit ( NUMBER_CONSTANT ) ; i >= NUMBER_CONSTANT ; i = in . nextSetBit ( ( i + NUMBER_CONSTANT ) ) ) { reachingDefs . add ( definitions . get ( i ) ) ; } return reachingDefs ; }
public void testMergedAttr ( ) throws java.lang.Exception { com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger () ; java.io.File folder = getWrittenResources () ; com.android.ide.common.res2.ResourceSet writtenSet = new com.android.ide.common.res2.ResourceSet ( STRING_CONSTANT ) ; writtenSet . addSource ( folder ) ; writtenSet . loadFromFiles ( logger ) ; java.util.List < com.android.ide.common.res2.ResourceItem > items = writtenSet . getDataMap () . get ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , items . size () ) ; assertFalse ( items . get ( NUMBER_CONSTANT ) . getIgnoredFromDiskMerge () ) ; checkLogger ( logger ) ; }
@ org.junit.Test @ com.android.jack.test.junit.KnownIssue ( candidate = com.android.jack.test.toolchain.IncrementalToolchain . class ) public void testJackArchiveToDexDir ( ) throws java.lang.Exception { java.io.File jackAr = createJackArchiveWithResources () ; java.io.File dexDir = com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain . class ) ; toolchain . libToExe ( jackAr , dexDir , false ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH , STRING_CONSTANT ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH , STRING_CONSTANT ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE3_SHORTPATH , STRING_CONSTANT ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE4_SHORTPATH , STRING_CONSTANT ) ; }
@ java.lang.Override public com.android.ide.common.rendering.api.StyleResourceValue getTheme ( java.lang.String name , boolean frameworkTheme ) { com.android.ide.common.rendering.api.ResourceValue theme ; if ( frameworkTheme ) { java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > frameworkStyleMap = mFrameworkResources . get ( ResourceType.STYLE ) ; theme = frameworkStyleMap . get ( name ) ; } else { java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > projectStyleMap = mProjectResources . get ( ResourceType.STYLE ) ; theme = projectStyleMap . get ( name ) ; } if ( theme instanceof com.android.ide.common.rendering.api.StyleResourceValue ) { return ( ( com.android.ide.common.rendering.api.StyleResourceValue ) ( theme ) ) ; } return null ; }
@ android.support.annotation.MainThread public static void loadPreferences ( android.content.Context context ) { if ( ( ( com.android.tv.tuner.TunerPreferences.sLoadPreferencesTask ) != null ) && ( ( com.android.tv.tuner.TunerPreferences.sLoadPreferencesTask . getStatus () ) != ( AsyncTask.Status.FINISHED ) ) ) { com.android.tv.tuner.TunerPreferences.sLoadPreferencesTask . cancel ( true ) ; } com.android.tv.tuner.TunerPreferences.sLoadPreferencesTask = new com.android.tv.tuner.TunerPreferences.LoadPreferencesTask ( context ) ; com.android.tv.tuner.TunerPreferences.sLoadPreferencesTask . execute () ; }
@ com.google.common.annotations.GwtIncompatible ( value = STRING_CONSTANT ) @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream . defaultReadObject () ; factory = ( ( com.google.common.base.Supplier < ? extends java.util.Collection < V > > ) ( stream . readObject () ) ) ; java.util.Map < K , java.util.Collection < V > > map = ( ( java.util.Map < K , java.util.Collection < V > > ) ( stream . readObject () ) ) ; setMap ( map ) ; }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testSendConnectionEventNull ( ) throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( STRING_CONSTANT , mPhoneAccountA0 . getAccountHandle () , mConnectionServiceFixtureA ) ; org.junit.Assert . assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX . getCall ( ids.mCallId ) . getState () ) ; mConnectionServiceFixtureA . sendConnectionEvent ( ids.mConnectionId , com.android.server.telecom.tests.BasicCallTests.TEST_EVENT , null ) ; org.mockito.Mockito . verify ( mInCallServiceFixtureX . getTestDouble () , org.mockito.Mockito . timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . onConnectionEvent ( ids.mCallId , com.android.server.telecom.tests.BasicCallTests.TEST_EVENT , null ) ; }
@ java.lang.Override public java.lang.String getLine1AlphaTagForDisplay ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } java.lang.String iccId = getIccId ( subId ) ; if ( iccId != null ) { java.lang.String alphaTagPrefKey = ( com.android.phone.PhoneInterfaceManager.PREF_CARRIERS_ALPHATAG_PREFIX ) + iccId ; return mTelephonySharedPreferences . getString ( alphaTagPrefKey , null ) ; } return null ; }
@ java.lang.Override @ com.android.annotations.NonNull public com.android.tools.lint.detector.api.Location resolve () { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( getPosition ( mNode ) ) ) ; if ( pos != null ) { return com.android.tools.lint.detector.api.Location . create ( mFile , pos , ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( pos . getEnd () ) ) ) ; } return com.android.tools.lint.detector.api.Location . create ( mFile ) ; }
@ java.lang.Override public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { org.w3c.dom.Element element = attribute . getOwnerElement () ; if ( element . hasAttributeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_HINT ) ) { context . report ( com.android.tools.lint.checks.AccessibilityDetector.ISSUE , element , context . getLocation ( attribute ) , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } }
@ java.lang.Override public boolean startInstrumentation ( android.content.ComponentName className , java.lang.String profileFile , android.os.Bundle arguments ) { try { if ( arguments != null ) { arguments . setAllowFds ( false ) ; } return android.app.ActivityManagerNative . getDefault () . startInstrumentation ( className , profileFile , NUMBER_CONSTANT , arguments , null , null , getUserId () , null ) ; } catch ( android.os.RemoteException e ) {} return false ; }
private void responseSms ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SendSmsResult sms ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.SmsResponse ret = new com.android.internal.telephony.SmsResponse ( sms.messageRef , sms.ackPDU , sms.errorCode ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
private com.android.builder.VariantConfiguration getVariant () { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override protected void validate () {} } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) ) ; return variant ; }
public int getVersionCode () { int versionCode = ( ( mMergedFlavor . getVersionCode () ) != null ) ? mMergedFlavor . getVersionCode () : - NUMBER_CONSTANT ; if ( ( versionCode == ( - NUMBER_CONSTANT ) ) && ( ( mType ) != ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) ) { versionCode = getVersionCodeFromManifest () ; } return versionCode ; }
public void test_unwrap_ByteBuffer_ByteBuffer_02 ( ) throws java.lang.Exception { java.lang.String host = STRING_CONSTANT ; int port = NUMBER_CONSTANT ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) . asReadOnlyBuffer () ; javax.net.ssl.SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( true ) ; try { sse . unwrap ( bbs , bbd ) ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.ReadOnlyBufferException iobe ) {} catch ( java.lang.Exception e ) { fail ( ( e + STRING_CONSTANT ) ) ; } }
public int drainTo ( java.util.Collection < ? super E > c , int maxElements ) { if ( c == null ) throw new java.lang.NullPointerException () ; if ( c == ( this ) ) throw new java.lang.IllegalArgumentException () ; int n = NUMBER_CONSTANT ; for ( E e ; ( n < maxElements ) && ( ( e = poll () ) != null ) ; ) { c . add ( e ) ; ++ n ; } return n ; }
private void verifyFormatTimezone ( java.lang.String timeZoneId , java.lang.String expected1 , java.lang.String expected2 , java.util.Date date ) { format . setTimeZone ( java.util.SimpleTimeZone . getTimeZone ( timeZoneId ) ) ; format . applyPattern ( STRING_CONSTANT ) ; assertEquals ( ( STRING_CONSTANT + timeZoneId ) , expected1 , format . format ( date ) ) ; format . applyPattern ( STRING_CONSTANT ) ; assertEquals ( ( STRING_CONSTANT + timeZoneId ) , expected2 , format . format ( date ) ) ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [] args ) { for ( vogar.target.RunnerFactory runnerFactory : runnerFactories ) { vogar.target.Runner runner = runnerFactory . newRunner ( monitor , qualification , klass , skipPastReference , testEnvironment , timeoutSeconds , profile , args ) ; if ( runner != null ) { return runner ; } } return null ; }
public boolean addTestCase ( java.lang.String name , int result ) { if ( isFull () ) return false ; this . testCases . add ( new com.android.vts.entity.TestCaseRunEntity.TestCase ( this . id , this . testCases . size () , name , result ) ) ; return true ; }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent . getAction () ; if ( action . equals ( Intent.ACTION_SCREEN_ON ) ) { sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_SCREEN_STATE_CHANGED , NUMBER_CONSTANT ) ; } else if ( action . equals ( Intent.ACTION_SCREEN_OFF ) ) { sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_SCREEN_STATE_CHANGED , NUMBER_CONSTANT ) ; } }
public void testAssistantStackFinishToPreviousApp ( ) throws java.lang.Exception { launchActivity ( android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY ) ; enableAssistant () ; launchActivity ( android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK , android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF , STRING_CONSTANT ) ; disableAssistant () ; mAmWmState . waitForValidState ( mDevice , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState . waitForActivityState ( mDevice , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.ActivityManagerState.STATE_RESUMED ) ; mAmWmState . assertFocusedActivity ( STRING_CONSTANT , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY ) ; mAmWmState . assertFrontStack ( STRING_CONSTANT , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState . assertFocusedStack ( STRING_CONSTANT , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; }
private java.security.cert.TrustAnchor findTrustAnchorBySubjectAndPublicKey ( java.security.cert.X509Certificate cert ) { java.security.cert.TrustAnchor trustAnchor = trustedCertificateIndex . findBySubjectAndPublicKey ( cert ) ; if ( trustAnchor != null ) { return trustAnchor ; } if ( ( trustedCertificateStore ) == null ) { return null ; } java.security.cert.X509Certificate systemCert = trustedCertificateStore . getTrustAnchor ( cert ) ; if ( systemCert != null ) { return new java.security.cert.TrustAnchor ( systemCert , null ) ; } return null ; }
private libcore.tzdata.update2.tools.TzDataBundleBuilder createValidTzDataBundleBuilder ( java.lang.String tzDataVersion ) throws java.io.IOException { java.io.File bionicTzData = new java.io.File ( tempDir , STRING_CONSTANT ) ; libcore.tzdata.update2.TzDataBundleInstallerTest . createFile ( bionicTzData ) ; java.io.File icuData = new java.io.File ( tempDir , STRING_CONSTANT ) ; libcore.tzdata.update2.TzDataBundleInstallerTest . createFile ( icuData ) ; return new libcore.tzdata.update2.tools.TzDataBundleBuilder () . setTzDataVersion ( tzDataVersion ) . addBionicTzData ( bionicTzData ) . addIcuTzData ( icuData ) ; }
public void run () { mHandler . removeCallbacks ( this ) ; final int returnCode = deletePackageX ( packageName , userId , flags ) ; if ( observer != null ) { try { observer . packageDeleted ( packageName , returnCode ) ; } catch ( android.os.RemoteException e ) { android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_CONSTANT ) ; } } }
private static java.security.cert.X509Certificate [] createCertChain ( byte [] [] certificatesBytes ) throws java.io.IOException { if ( certificatesBytes == null ) { return null ; } java.security.cert.X509Certificate [] certificates = new java.security.cert.X509Certificate [ certificatesBytes.length ] ; for ( int i = NUMBER_CONSTANT ; i < ( certificatesBytes.length ) ; i ++ ) { certificates [ i ] = new org.apache.harmony.security.provider.cert.X509CertImpl ( certificatesBytes [ i ] ) ; } return certificates ; }
@ org.junit.Test public void canBeTethered ( ) throws java.lang.Exception { initStateMachine ( android.net.ConnectivityManager.TETHERING_BLUETOOTH ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito . inOrder ( mTetherHelper , mNMService ) ; inOrder . verify ( mNMService ) . tetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder . verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito . verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
@ java.lang.Override @ org.jetbrains.annotations.NotNull public java.util.List < com.intellij.execution.impl.BeforeRunTask > getBeforeRunTasks ( final com.intellij.execution.impl.RunConfiguration settings ) { if ( settings instanceof com.intellij.execution.impl.WrappingRunConfiguration ) { return getBeforeRunTasks ( ( ( com.intellij.execution.impl.WrappingRunConfiguration ) ( settings ) ) . getPeer () ) ; } java.util.List < com.intellij.execution.impl.BeforeRunTask > tasks = myConfigurationToBeforeTasksMap . get ( settings ) ; return tasks == null ? getTemplateBeforeRunTasks ( settings ) : com.intellij.execution.impl.RunManagerImpl . getCopies ( tasks ) ; }
public static void setName ( int id , java.lang.String name ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . incModCount ( id ) ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . putRecordInt ( id , com.intellij.openapi.vfs.newvfs.persistent.FSRecords.NAME_OFFSET , com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getNames () . enumerate ( name ) ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
public static < T > T [] copyOf ( T [] original , int newLength ) { if ( original == null ) { throw new java.lang.NullPointerException () ; } if ( newLength < NUMBER_CONSTANT ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer . toString ( newLength ) ) ; } return java.util.Arrays . copyOfRange ( original , NUMBER_CONSTANT , newLength ) ; }
public void run () { com.android.rs.test_v14.RenderScript pRS = com.android.rs.test_v14.RenderScript . create ( mCtx ) ; com.android.rs.test_v14.ScriptC_rstime s = new com.android.rs.test_v14.ScriptC_rstime ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . setTimeZone ( STRING_CONSTANT ) ; s . invoke_test_rstime ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; pRS . finish () ; waitForMessage () ; pRS . destroy () ; }
public void copy1DRangeFromUnchecked ( int off , int count , float [] d ) { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; int dataSize = ( mType.mElement . getBytesSize () ) * count ; data1DChecks ( off , count , ( ( d.length ) * NUMBER_CONSTANT ) , dataSize ) ; mRS . nAllocationData1D ( getIDSafe () , off , mSelectedLOD , count , d , dataSize , Element.DataType.FLOAT_32 ) ; android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; }
public java.lang.Object clone () { try { java.security.cert.X509CRLSelector copy = ( ( java.security.cert.X509CRLSelector ) ( super . clone () ) ) ; if ( ( issuerNames ) != null ) { copy.issuerNames = new java.util.HashSet < java.lang.Object > ( issuerNames ) ; copy.issuerX500Principals = new java.util.HashSet < javax.security.auth.x500.X500Principal > ( issuerX500Principals ) ; } return copy ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e . toString () , e ) ; } }
@ org.junit.Test public void testEqualsDuplicated ( ) throws java.lang.Exception { android.net.LinkProperties source = new android.net.LinkProperties () ; source . addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; source . addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; source . addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; android.net.LinkProperties target = new android.net.LinkProperties () ; target . addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; target . addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; target . addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; assertLinkPropertiesEqual ( source , target ) ; }
public void test_getReceiveBufferSize ( ) throws java.lang.Exception { try ( java.net.ServerSocket theSocket = new java.net.ServerSocket () ) { assertFalse ( STRING_CONSTANT , ( NUMBER_CONSTANT == ( theSocket . getReceiveBufferSize () ) ) ) ; assertFalse ( STRING_CONSTANT , ( NUMBER_CONSTANT > ( theSocket . getReceiveBufferSize () ) ) ) ; } }
private void setConvoRead ( com.android.bluetooth.map.BluetoothMapConvoListingElement e , android.database.Cursor c , com.android.bluetooth.map.BluetoothMapContent.FilterInfo fi , com.android.bluetooth.map.BluetoothMapAppParams ap ) { java.lang.String setread = null ; int read = NUMBER_CONSTANT ; read = c . getInt ( fi.mConvoColRead ) ; if ( com.android.bluetooth.map.BluetoothMapContent.V ) { android.util.Log . d ( com.android.bluetooth.map.BluetoothMapContent.TAG , ( STRING_CONSTANT + setread ) ) ; } e . setRead ( ( read == NUMBER_CONSTANT ) , ( ( ( ap . getParameterMask () ) & ( com.android.bluetooth.map.BluetoothMapContent.MASK_READ ) ) != NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public boolean onTouchEvent ( final android.view.MotionEvent ev ) { mFactory . startYourEngines ( false ) ; if ( checkNeedsPost () ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > () { @ java.lang.Override public java.lang.Boolean call () { return onTouchEvent ( ev ) ; } } ) ; return ret ; } return mAwContents . onTouchEvent ( ev ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public static java.util.List < java.lang.String > getTestCaseNames ( junit.framework.Test test , boolean flatten ) { java.util.List < junit.framework.Test > tests = ( ( java.util.List < junit.framework.Test > ) ( android.test.TestCaseUtil . getTests ( test , flatten ) ) ) ; java.util.List < java.lang.String > testCaseNames = new java.util.ArrayList <> () ; for ( junit.framework.Test aTest : tests ) { testCaseNames . add ( android.test.TestCaseUtil . getTestName ( aTest ) ) ; } return testCaseNames ; }
private static void testClassType ( java.lang.Class < > c ) throws java.lang.Exception { boolean isInterface = Main . isInterface ( c ) ; boolean isArray = Main . isArrayClass ( c ) ; java.lang.System.out . println ( ( ( ( ( ( c . getName () ) + STRING_CONSTANT ) + isInterface ) + STRING_CONSTANT ) + isArray ) ) ; }
void releaseFD () { synchronized ( fdLock ) { ( fdUseCount ) -- ; if ( ( fdUseCount ) == ( - NUMBER_CONSTANT ) ) { if ( ( fd ) != null ) { try { socketClose () ; } catch ( java.io.IOException e ) {} } } } }
@ java.lang.Override public long getDiscoveryEndMillis () { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return - NUMBER_CONSTANT ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return - NUMBER_CONSTANT ; } return service . getDiscoveryEndMillis () ; }
public void addObj ( android.support.v8.renderscript.BaseObj obj ) { if ( android.support.v8.renderscript.RenderScript . shouldThunk () ) { mN . addObj ( obj ) ; return; } if ( obj != null ) { addI32 ( obj . getID ( null ) ) ; } else { addI32 ( NUMBER_CONSTANT ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer put ( byte x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } put ( ix ( nextPutIndex () ) , x ) ; return this ; }
@ org.junit.Test public void testStateChangeToAssociatedCallback ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; int frameworkNetworkId = NUMBER_CONSTANT ; executeAndValidateConnectSequence ( frameworkNetworkId , false ) ; assertNotNull ( mISupplicantStaIfaceCallback ) ; mISupplicantStaIfaceCallback . onStateChanged ( ISupplicantStaIfaceCallback.State.ASSOCIATED , com.android.server.wifi.util.NativeUtil . macAddressToByteArray ( com.android.server.wifi.SupplicantStaIfaceHalTest.BSSID ) , com.android.server.wifi.SupplicantStaIfaceHalTest.SUPPLICANT_NETWORK_ID , com.android.server.wifi.util.NativeUtil . decodeSsid ( com.android.server.wifi.SupplicantStaIfaceHalTest.SUPPLICANT_SSID ) ) ; org.mockito.Mockito . verify ( mWifiMonitor ) . broadcastSupplicantStateChangeEvent ( org.mockito.Matchers . eq ( com.android.server.wifi.SupplicantStaIfaceHalTest.WLAN_IFACE_NAME ) , org.mockito.Matchers . eq ( frameworkNetworkId ) , org.mockito.Matchers . any ( android.net.wifi.WifiSsid . class ) , org.mockito.Matchers . eq ( com.android.server.wifi.SupplicantStaIfaceHalTest.BSSID ) , org.mockito.Matchers . eq ( SupplicantState.ASSOCIATED ) ) ; }
public void test_isLetterOrDigitC () { assertTrue ( STRING_CONSTANT , java.lang.Character . isLetterOrDigit ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isLetterOrDigit ( CHAR_CONS ) ) ; assertFalse ( STRING_CONSTANT , java.lang.Character . isLetterOrDigit ( CHAR_CONS ) ) ; assertFalse ( STRING_CONSTANT , java.lang.Character . isLetterOrDigit ( CHAR_CONS ) ) ; }
public static void main ( java.lang.String [] args ) throws java.lang.Exception { final java.lang.Thread [] threads = new java.lang.Thread [ Main.numberOfThreads ] ; for ( int t = NUMBER_CONSTANT ; t < ( threads.length ) ; t ++ ) { threads [ t ] = new java.lang.Thread ( new Main () ) ; threads [ t ] . start () ; } for ( java.lang.Thread t : threads ) { t . join () ; } Main . test_getStackTraces () ; java.lang.System.out . println ( STRING_CONSTANT ) ; }
@ java.lang.Override public void warning ( java.lang.String tag , java.lang.String message , java.lang.Object data ) { java.lang.String description = describe ( message ) ; boolean log = true ; if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.TAG_RESOURCES_FORMAT . equals ( tag ) ) { if ( ( description . equals ( STRING_CONSTANT ) ) || ( description . equals ( STRING_CONSTANT ) ) ) { tag = com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderLogger.TAG_MISSING_DIMENSION ; log = false ; } } if ( log ) { com.android.ide.eclipse.adt.AdtPlugin . log ( IStatus.WARNING , STRING_CONSTANT , mName , description ) ; } addWarning ( tag , description ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof com.android.ide.common.blame.SourceFile ) ) { return false ; } com.android.ide.common.blame.SourceFile other = ( ( com.android.ide.common.blame.SourceFile ) ( obj ) ) ; return ( com.google.common.base.Objects . equal ( mDescription , other.mDescription ) ) && ( com.google.common.base.Objects . equal ( mSourceFile , other.mSourceFile ) ) ; }
@ android.annotation.SystemApi public android.telephony.NetworkRegistrationState getNetworkRegistrationStates ( int transportType , int domain ) { synchronized ( mNetworkRegistrationStates ) { for ( android.telephony.NetworkRegistrationState networkRegistrationState : mNetworkRegistrationStates ) { if ( ( ( networkRegistrationState . getTransportType () ) == transportType ) && ( ( networkRegistrationState . getDomain () ) == domain ) ) { return networkRegistrationState ; } } } return null ; }
public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mMultiEndpoint ) == null ) || ( ! ( mImsServiceProxy . isBinderAlive () ) ) ) { checkAndThrowExceptionIfServiceUnavailable () ; try { com.android.ims.internal.IImsMultiEndpoint iImsMultiEndpoint = mImsServiceProxy . getMultiEndpointInterface () ; if ( iImsMultiEndpoint == null ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED ) ; } mMultiEndpoint = new com.android.ims.ImsMultiEndpoint ( iImsMultiEndpoint ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mMultiEndpoint ; }
public java.util.ArrayList < android.telephony.SmsMessage > getAllMessagesFromIcc () { java.util.List < com.android.internal.telephony.SmsRawData > records = null ; try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager . getISmsService () ; if ( iccISms != null ) { records = iccISms . getAllMessagesFromIccEfForSubscriber ( getSubscriptionId () , android.app.ActivityThread . currentPackageName () ) ; } } catch ( android.os.RemoteException ex ) {} return createMessageListFromRawRecords ( records ) ; }
public static void saveFile ( java.lang.String filename , byte [] data ) { try { java.io.FileOutputStream fos = new java.io.FileOutputStream ( filename ) ; fos . write ( data ) ; fos . close () ; } catch ( java.io.IOException e ) { android.util.Log . e ( com.android.cts.verifier.audioquality.Utils.TAG , ( STRING_CONSTANT + filename ) , e ) ; } }
private int pointToPosition ( int x , int y ) { android.text.Layout layout = getLayout () ; if ( layout == null ) { return - NUMBER_CONSTANT ; } x -= getCompoundPaddingLeft () ; y -= getExtendedPaddingTop () ; x += getScrollX () ; y += getScrollY () ; int line = layout . getLineForVertical ( y ) ; int off = layout . getOffsetForHorizontal ( line , x ) ; return off ; }
public void test_constructor$String () { java.nio.file.LinkPermission linkPermission = new java.nio.file.LinkPermission ( STRING_CONSTANT ) ; linkPermission . getName () ; linkPermission = new java.nio.file.LinkPermission ( STRING_CONSTANT ) ; linkPermission . getName () ; try { new java.nio.file.LinkPermission ( STRING_CONSTANT ) ; fail () ; } catch ( java.lang.IllegalArgumentException expected ) {} }
public boolean addLogger ( java.util.logging.Logger logger ) { final java.lang.String name = logger . getName () ; if ( name == null ) { throw new java.lang.NullPointerException () ; } drainLoggerRefQueueBounded () ; java.util.logging.LogManager.LoggerContext cx = getUserContext () ; if ( cx . addLocalLogger ( logger ) ) { loadLoggerHandlers ( logger , name , ( name + STRING_CONSTANT ) ) ; return true ; } else { return false ; } }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jill.api.v01.Cli01TranslationTask getTask ( @ javax.annotation.Nonnull java.lang.String [] args ) throws com.android.jill.api.v01.ConfigurationException { try { com.android.jill.Options options = com.android.jill.Main . getOptions ( args ) ; options . setStandardError ( standardError ) ; options . setWorkingDirectory ( workingDirectory ) ; return new com.android.jill.api.v01.impl.Cli01ConfigImpl.Cli01TranslationTaskImpl ( options ) ; } catch ( org.kohsuke.args4j.CmdLineException e ) { throw new com.android.jill.api.v01.ConfigurationException ( e . getMessage () , e ) ; } catch ( com.android.sched.util.file.SchedIOException e ) { throw new com.android.jill.api.v01.ConfigurationException ( e . getMessage () , e ) ; } }
@ java.lang.Override public boolean sdpSearch ( android.bluetooth.BluetoothDevice device , android.os.ParcelUuid uuid ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . sdpSearch ( device , uuid ) ; }
@ java.lang.Override public boolean registerApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config , android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp , android.bluetooth.BluetoothHidDeviceAppQosSettings inQos , android.bluetooth.BluetoothHidDeviceAppQosSettings outQos , android.bluetooth.IBluetoothHidDeviceCallback callback ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return false ; } return service . registerApp ( config , sdp , inQos , outQos , callback ) ; }
public void testDelete ( ) throws java.lang.Exception { assertFalse ( mKeyStore . delete ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; mKeyStore . password ( android.security.KeyStoreTest.TEST_PASSWD ) ; assertFalse ( mKeyStore . delete ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; assertTrue ( mKeyStore . put ( android.security.KeyStoreTest.TEST_KEYNAME , android.security.KeyStoreTest.TEST_KEYVALUE ) ) ; assertTrue ( java.util.Arrays . equals ( android.security.KeyStoreTest.TEST_KEYVALUE , mKeyStore . get ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ) ; assertTrue ( mKeyStore . delete ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; assertNull ( mKeyStore . get ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; }
private void responseSignalStrength ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , com.android.internal.telephony.V1_0.SignalStrength sigStrength ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { android.telephony.SignalStrength ret = com.android.internal.telephony.RIL . convertHalSignalStrength ( sigStrength ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.api.v01.Api01CompilationTask getTask ( ) throws com.android.jack.api.v01.ConfigurationException { com.android.sched.util.RunnableHooks configHooks = new com.android.sched.util.RunnableHooks () ; try { com.android.jack.Jack . check ( options , configHooks ) ; } catch ( com.android.jack.api.v01.impl.com.android.sched e ) { throw new com.android.jack.api.v01.ConfigurationException ( e . getMessage () , e ) ; } catch ( com.android.jack.IllegalOptionsException e ) { throw new com.android.jack.api.v01.ConfigurationException ( e . getMessage () , e ) ; } return new com.android.jack.api.v01.impl.Api01ConfigImpl.Api01CompilationTaskImpl ( options , configHooks ) ; }
@ java.lang.Override public void checkCall ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodInsnNode call ) { java.lang.String owner = call.owner ; if ( ( owner . equals ( STRING_CONSTANT ) ) && ( ( context . getProject () . getMinSdk () ) >= NUMBER_CONSTANT ) ) { java.lang.String message = java.lang.String . format ( ( STRING_CONSTANT + STRING_CONSTANT ) , call.name ) ; context . report ( com.android.tools.lint.checks.MathDetector.ISSUE , method , call , context . getLocation ( call ) , message ) ; } }
@ android.annotation.RequiresPermission ( value = Manifest.permission.BLUETOOTH ) public android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord ( java.util.UUID uuid ) throws java.io.IOException { if ( ! ( isBluetoothEnabled () ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; throw new java.io.IOException () ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - NUMBER_CONSTANT ) , false , false , this , ( - NUMBER_CONSTANT ) , new android.os.ParcelUuid ( uuid ) ) ; }
public void test_ConstructorI ( ) throws java.io.IOException { java.net.MulticastSocket orig = new java.net.MulticastSocket () ; int port = orig . getLocalPort () ; orig . close () ; java.net.MulticastSocket dup = new java.net.MulticastSocket ( port ) ; assertTrue ( dup . getReuseAddress () ) ; dup . close () ; }
@ java.lang.Override public void actionPerformed ( java.awt.event.ActionEvent e ) { java.util.List < com.android.preload.DumpData > data = dataTableModel . getData () ; if ( ( data . size () ) == NUMBER_CONSTANT ) { com.android.preload.Main . getUI () . showMessageDialog ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; return; } if ( ( data . size () ) == NUMBER_CONSTANT ) { com.android.preload.Main . getUI () . showMessageDialog ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; return; } super . actionPerformed ( e ) ; }
public void stopScan () { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { if ( ( com.android.server.wifi.WifiNative.sScanCmdId ) != NUMBER_CONSTANT ) { com.android.server.wifi.WifiNative . stopScanNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sScanCmdId ) ; } com.android.server.wifi.WifiNative.sScanSettings = null ; com.android.server.wifi.WifiNative.sScanEventHandler = null ; com.android.server.wifi.WifiNative.sScanCmdId = NUMBER_CONSTANT ; } } }
boolean start () { if ( ( ( mAdbOsLocation ) != null ) && ( ( ! ( mVersionCheck ) ) || ( ! ( startAdb () ) ) ) ) { return false ; } mStarted = true ; mDeviceMonitor = new com.android.ddmlib.DeviceMonitor ( this ) ; mDeviceMonitor . start () ; return true ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendText () { mCdmaSmsDispatcher . sendText ( STRING_CONSTANT , STRING_CONSTANT , com.android.internal.telephony.cdma.TAG , null , null , null , null , false ) ; verify ( mSimulatedCommandsVerifier ) . sendCdmaSms ( any ( byte [] . class ) , any ( android.os.Message . class ) ) ; }
@ org.junit.Test public void setTelephonyCountryCodeAfterL2Connected ( ) throws java.lang.Exception { mWifiCountryCode . setReadyForChange ( true ) ; mWifiCountryCode . setReadyForChange ( false ) ; mWifiCountryCode . setCountryCode ( mTelephonyCountryCode ) ; org.junit.Assert . assertEquals ( mDefaultCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; mWifiCountryCode . setReadyForChange ( true ) ; org.mockito.Mockito . verify ( mWifiNative , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . setCountryCode ( org.mockito.Mockito . anyString () ) ; org.junit.Assert . assertEquals ( mTelephonyCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; }
private void addRemoteSource ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newSource ( version , revision ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { mMediaRecorder . release () ; if ( ( ( mOutFile ) != null ) && ( mOutFile . exists () ) ) { mOutFile . delete () ; } if ( ( mCamera ) != null ) { mCamera . release () ; mCamera = null ; } super . tearDown () ; }
@ org.junit.Test public void setTelephonyCountryCodeAfterSupplicantStarts ( ) throws java.lang.Exception { mWifiCountryCode . setReadyForChange ( true ) ; org.junit.Assert . assertEquals ( mDefaultCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; mWifiCountryCode . setCountryCode ( mTelephonyCountryCode ) ; mWifiCountryCode . setReadyForChange ( false ) ; org.mockito.Mockito . verify ( mWifiNative , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . setCountryCode ( org.mockito.Mockito . anyString () ) ; org.junit.Assert . assertEquals ( mTelephonyCountryCode , mWifiCountryCode . getCountryCodeSentToDriver () ) ; }
@ java.lang.Override public int getDataActivationState ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return android.telephony.TelephonyManager.SIM_ACTIVATION_STATE_UNKNOWN ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone . getDataActivationState () ; } else { return android.telephony.TelephonyManager.SIM_ACTIVATION_STATE_UNKNOWN ; } }
public void testDescendingAddNonComparable () { java.util.NavigableSet q = jsr166.ConcurrentSkipListSubSetTest . dset0 () ; try { q . add ( new java.lang.Object () ) ; q . add ( new java.lang.Object () ) ; shouldThrow () ; } catch ( java.lang.ClassCastException success ) {} }
void found () { mLastSeenTime = java.lang.System . currentTimeMillis () ; mFound = true ; android.net.Uri printerUri = mDiscoveredPrinter . getUri () ; com.android.bips.jni.LocalPrinterCapabilities capabilities = mPrintService . getCapabilitiesCache () . get ( printerUri ) ; if ( com.android.bips.LocalPrinter.DEBUG ) android.util.Log . d ( com.android.bips.LocalPrinter.TAG , ( ( ( STRING_CONSTANT + ( mDiscoveredPrinter ) ) + STRING_CONSTANT ) + capabilities ) ) ; if ( capabilities != null ) { onCapabilities ( mDiscoveredPrinter , capabilities ) ; } else { mSession . handlePrinter ( this ) ; requestCapabilities () ; } }
@ java.lang.Override public void execute ( ) throws org.apache.tools.ant.BuildException { if ( ( mProjectPath ) == null ) { throw new org.apache.tools.ant.BuildException ( STRING_CONSTANT ) ; } com.android.sdklib.internal.project.ProjectProperties props = com.android.ant.TaskHelper . getProperties ( mProjectPath ) ; if ( ( mBinName ) != null ) { handleProp ( props , STRING_CONSTANT , mBinName ) ; } if ( ( mSrcName ) != null ) { handleProp ( props , STRING_CONSTANT , mSrcName ) ; } }
private java.util.Collection < com.intellij.openapi.util.Pair < org.jetbrains.jps.builders.java.dependencyView.MethodRepr , org.jetbrains.jps.builders.java.dependencyView.ClassRepr > > findAllMethodsBySpecificity ( final org.jetbrains.jps.builders.java.dependencyView.MethodRepr m , final org.jetbrains.jps.builders.java.dependencyView.ClassRepr c ) { final org.jetbrains.jps.builders.java.dependencyView.MethodRepr.Predicate predicate = lessSpecific ( m ) ; final java.util.Collection < com.intellij.openapi.util.Pair < org.jetbrains.jps.builders.java.dependencyView.MethodRepr , org.jetbrains.jps.builders.java.dependencyView.ClassRepr > > result = new java.util.HashSet < com.intellij.openapi.util.Pair < org.jetbrains.jps.builders.java.dependencyView.MethodRepr , org.jetbrains.jps.builders.java.dependencyView.ClassRepr > > () ; addOverridenMethods ( c , predicate , result , null ) ; addOverridingMethods ( m , c , predicate , result , null ) ; return result ; }
private void handleAssociatedBSSIDEvent ( java.lang.String eventStr ) { java.lang.String BSSID = null ; java.util.regex.Matcher match = com.android.server.wifi.WifiMonitor.mAssociatedPattern . matcher ( eventStr ) ; if ( match . find () ) { BSSID = match . group ( NUMBER_CONSTANT ) ; } mStateMachine . sendMessage ( WifiStateMachine.CMD_ASSOCIATED_BSSID , com.android.server.wifi.WifiMonitor.eventLogCounter , NUMBER_CONSTANT , BSSID ) ; }
private void writeStaticFieldRef ( @ javax.annotation.Nonnull org.objectweb.asm.tree.FieldInsnNode fldInsn ) throws java.io.IOException { writeDebugBegin ( currentClass , currentLine ) ; writer . writeKeyword ( Token.FIELD_REF ) ; writer . writeOpen () ; writer . writeId ( fldInsn.name ) ; writer . writeId ( fldInsn.desc ) ; writer . writeId ( org.objectweb.asm.Type . getObjectType ( fldInsn.owner ) . getDescriptor () ) ; writer . writeFieldRefKindEnum ( com.android.jill.frontend.java.MethodBodyWriter.FieldRefKind.STATIC ) ; writer . writeNull () ; writeDebugEnd ( currentClass , currentLine ) ; writer . writeClose () ; }
@ java.lang.Deprecated protected android.icu.util.UResourceBundle findTopLevel ( int index ) { for ( android.icu.util.UResourceBundle res = this ; res != null ; res = res . getParent () ) { android.icu.util.UResourceBundle obj = res . handleGet ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }
@ java.lang.Override public void onDeviceOpened ( android.media.midi.IMidiDeviceServer server , android.os.IBinder deviceToken ) { android.media.midi.MidiDevice device = null ; if ( server != null ) { try { android.media.midi.MidiDeviceInfo deviceInfo = server . getDeviceInfo () ; device = new android.media.midi.MidiDevice ( deviceInfo , server , mService , mToken , deviceToken ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.media.midi.MidiManager.TAG , STRING_CONSTANT ) ; } } sendOpenDeviceResponse ( device , listenerF , handlerF ) ; }
@ java.lang.Override public void onVisibilityChanged ( boolean visible ) { if ( com.android.systemui.ImageWallpaper.DEBUG ) { android.util.Log . d ( com.android.systemui.ImageWallpaper.TAG , ( ( ( STRING_CONSTANT + ( mVisible ) ) + STRING_CONSTANT ) + visible ) ) ; } if ( ( mVisible ) != visible ) { if ( com.android.systemui.ImageWallpaper.DEBUG ) { android.util.Log . d ( com.android.systemui.ImageWallpaper.TAG , ( STRING_CONSTANT + visible ) ) ; } mVisible = visible ; if ( visible ) { drawFrame () ; } } }
private void selectItemName ( java.lang.String itemName , com.android.ide.eclipse.adt.internal.resources.ResourceItem [] items ) { if ( ( itemName == null ) || ( items == null ) ) { return; } for ( com.android.ide.eclipse.adt.internal.resources.ResourceItem item : items ) { if ( itemName . equals ( item . getName () ) ) { setSelection ( new java.lang.Object [] { item } ) ; break; } } }
@ org.junit.After @ java.lang.Override public void tearDown ( ) throws java.lang.Exception { if ( ( videoView ) != null ) { getHelper () . cleanUpView ( videoView ) ; } if ( ( videoViewFactory ) != null ) { videoViewFactory . release () ; } super . tearDown () ; }
private final void shutdownIfNoPower () { if ( ( ( ( mBatteryLevel ) == NUMBER_CONSTANT ) && ( ! ( isPowered () ) ) ) && ( android.app.ActivityManagerNative . isSystemReady () ) ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_REQUEST_SHUTDOWN ) ; intent . putExtra ( Intent.EXTRA_KEY_CONFIRM , false ) ; intent . setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext . startActivity ( intent ) ; } }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.Boolean bluetoothHidDeviceReportError ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.String deviceID , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer error ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile ) == null ) { return false ; } android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade . getDevice ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . getConnectedDevices () , deviceID ) ; return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . reportError ( device , ( ( byte ) ( ( int ) ( error ) ) ) ) ; }
private void writeBufferedData ( ) throws java.io.IOException { stopBufferedWriteAlarm () ; long writeStartTime = mClock . getElapsedSinceBootMillis () ; mSharedStore . writeBufferedRawData () ; if ( ( mUserStore ) != null ) { mUserStore . writeBufferedRawData () ; } long writeTime = ( mClock . getElapsedSinceBootMillis () ) - writeStartTime ; android.util.Log . d ( com.android.server.wifi.WifiConfigStore.TAG , ( ( STRING_CONSTANT + writeTime ) + STRING_CONSTANT ) ) ; }
public void testConfigurationUpdatesWhenRotatingToSideFromDocked ( ) throws java.lang.Exception { if ( ! ( supportsScreenRotation () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } if ( ! ( supportsSplitScreenMultiWindow () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } setDeviceRotation ( NUMBER_CONSTANT ) ; launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; launchActivityToSide ( false , false , android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; final android.server.cts.ReportedSizes initialSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; rotateAndCheckSizes ( initialSizes ) ; }
private void applyBackgroundTint () { if ( ( ( mBackground ) != null ) && ( ( mBackgroundTint ) != null ) ) { final android.view.View.TintInfo tintInfo = mBackgroundTint ; if ( ( tintInfo.mHasTintList ) || ( tintInfo.mHasTintMode ) ) { mBackground = mBackground . mutate () ; if ( tintInfo.mHasTintList ) { mBackground . setTintList ( tintInfo.mTintList ) ; } if ( tintInfo.mHasTintMode ) { mBackground . setTintMode ( tintInfo.mTintMode ) ; } } } }
@ java.lang.Override public final java.nio.ByteBuffer putLong ( int i , long x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putLong ( ix ( checkIndex ( i , SizeOf.LONG ) ) , x ) ; return this ; }
@ java.lang.Override public boolean registerApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config , android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp , android.bluetooth.BluetoothHidDeviceAppQosSettings inQos , android.bluetooth.BluetoothHidDeviceAppQosSettings outQos , android.bluetooth.IBluetoothHidDeviceCallback callback ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDeviceService.BluetoothHidDeviceBinder.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.hid.HidDeviceService service = getService () ; if ( service == null ) { return false ; } return service . registerApp ( sdp , inQos , outQos , callback ) ; }
@ org.junit.Test public void testSetSelection () { mGridView = new android.widget.GridView ( mActivity ) ; mGridView . setSelection ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , mGridView . getSelectedItemPosition () ) ; mGridView . setSelection ( ( - NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( ( - NUMBER_CONSTANT ) , mGridView . getSelectedItemPosition () ) ; mGridView . setSelection ( mGridView . getCount () ) ; org.junit.Assert . assertEquals ( mGridView . getCount () , mGridView . getSelectedItemPosition () ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.w3c.dom.Node scope , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( ( scope != null ) && ( mDriver . isSuppressed ( this , issue , scope ) ) ) { return; } super . report ( issue , location , message , data ) ; }
public static long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.util.MutableLong inOffset , long byteCount ) throws android.system.ErrnoException { if ( inOffset == null ) { return Libcore.os . sendfile ( outFd , inFd , null , byteCount ) ; } else { android.util.MutableLong internalInOffset = new android.util.MutableLong ( inOffset.value ) ; try { return Libcore.os . sendfile ( outFd , inFd , internalInOffset , byteCount ) ; } finally { inOffset.value = internalInOffset.value ; } } }
public void keyPressed ( org.eclipse.swt.events.KeyEvent e ) { if ( ( e.keyCode ) == ( org.eclipse.swt.SWT.ESC ) ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint controlPoint = com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint . create ( mCanvas , mLastMouseX , mLastMouseY ) ; finishGesture ( controlPoint , true ) ; return; } if ( ( mCurrentGesture ) != null ) { mCurrentGesture . keyPressed ( e ) ; } }
public void testConstructor5 () { try { jsr166.DelayQueueTest.PDelay [] ints = new jsr166.DelayQueueTest.PDelay [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( ( SIZE ) - NUMBER_CONSTANT ) ; ++ i ) ints [ i ] = new jsr166.DelayQueueTest.PDelay ( i ) ; new java.util.concurrent.DelayQueue ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public void run () { synchronized ( this ) { ( wasRun ) ++ ; } if ( incrementCount ) { ( timerCounter ) ++ ; } if ( ( ( terminateCount ) == ( timerCounter ) ) && ( ( timer ) != null ) ) { timer . cancel () ; } if ( sleepInRun ) { try { java.lang.Thread . sleep ( NUMBER_CONSTANT ) ; } catch ( java.lang.InterruptedException e ) { throw new java.lang.RuntimeException ( e ) ; } } synchronized ( sync ) { sync . notify () ; } }
public void deleteSubscription ( int subscriptionId , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { getIEuiccController () . deleteSubscription ( subscriptionId , mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public byte [] iccExchangeSimIO ( int subId , int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony () ; if ( telephony != null ) return telephony . iccExchangeSimIO ( subId , fileID , command , p1 , p2 , p3 , filePath ) ; } catch ( android.os.RemoteException ex ) {} catch ( java.lang.NullPointerException ex ) {} return null ; }
public void dispose ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } try { mService . disposeStream ( mAppName , mSubscriptionId , mServiceInfo . getServiceId () ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.telephony.mbms.StreamingService.LOG_TAG , STRING_CONSTANT ) ; mService = null ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_SERVICE_LOST ) ; } }
public void testSupportsScreen () { com.android.sdklib.xml.ManifestData.SupportsScreens supportsScreens = mManifestTestApp . getSupportsScreens () ; assertNotNull ( supportsScreens ) ; assertEquals ( java.lang.Boolean.TRUE , supportsScreens . getAnyDensity () ) ; assertEquals ( java.lang.Boolean.TRUE , supportsScreens . getResizeable () ) ; assertEquals ( java.lang.Boolean.TRUE , supportsScreens . getSmallScreens () ) ; assertEquals ( java.lang.Boolean.TRUE , supportsScreens . getNormalScreens () ) ; assertEquals ( java.lang.Boolean.TRUE , supportsScreens . getLargeScreens () ) ; }
public final java.nio.charset.CoderResult flush ( java.nio.ByteBuffer out ) { if ( ( ( state ) != ( java.nio.charset.CharsetEncoder.FLUSHED ) ) && ( ( state ) != ( java.nio.charset.CharsetEncoder.END_OF_INPUT ) ) ) { throw illegalStateException () ; } if ( ( state ) == ( java.nio.charset.CharsetEncoder.FLUSHED ) ) { return java.nio.charset.CoderResult.UNDERFLOW ; } java.nio.charset.CoderResult result = implFlush ( out ) ; if ( result == ( java.nio.charset.CoderResult.UNDERFLOW ) ) { state = java.nio.charset.CharsetEncoder.FLUSHED ; } return result ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.objectweb.asm.tree.FieldNode field , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( ( field != null ) && ( mDriver . isSuppressed ( issue , field ) ) ) { return; } report ( issue , location , message ) ; }
private void writeLabelInsn ( @ javax.annotation.Nonnegative int insnIdx ) throws java.io.IOException { writeDebugBegin ( currentClass , currentLine ) ; writer . writeCatchBlockIds ( currentCatchList ) ; writer . writeKeyword ( Token.LABELED_STATEMENT ) ; writer . writeOpen () ; java.lang.String id = java.lang.Integer . toString ( insnIdx ) ; writer . writeString ( id ) ; writer . writeId ( id ) ; writeEmptyBlock () ; writeDebugEnd ( currentClass , currentLine ) ; writer . writeClose () ; }
private static void cleanUpDir ( java.io.File dir ) { if ( ! ( dir . isDirectory () ) ) { return; } java.io.File [] files = dir . listFiles () ; for ( java.io.File file : files ) { if ( file . isDirectory () ) { dalvik.system.DexClassLoaderTest . cleanUpDir ( file ) ; } else { assertTrue ( file . delete () ) ; } } assertTrue ( dir . delete () ) ; }
public void testTrustManagerAndTrustRootIndex_unusedForHttpConnection ( ) throws java.lang.Exception { com.android.okhttp.internal.Platform platform = com.android.okhttp.internal.Platform . getAndSetForTest ( new libcore.java.net.URLConnectionTest.PlatformWithoutTrustManager () ) ; try { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( STRING_CONSTANT ) . setResponseCode ( NUMBER_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection urlConnection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , urlConnection . getResponseCode () ) ; } finally { com.android.okhttp.internal.Platform . getAndSetForTest ( platform ) ; } }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.vfs.BaseVFile createVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotCreateFileException { com.android.sched.vfs.BaseVDir dir = this ; java.util.Iterator < java.lang.String > iter = path . split () . iterator () ; java.lang.String name ; while ( iter . hasNext () ) { name = iter . next () ; if ( iter . hasNext () ) { dir = dir . createVDir ( name ) ; } else { return dir . createVFile ( name ) ; } } throw new java.lang.AssertionError () ; }
@ java.lang.Override public final char getChar () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } int newPosition = ( position ) + ( libcore.io.SizeOf.CHAR ) ; if ( newPosition > ( limit () ) ) { throw new java.nio.BufferUnderflowException () ; } char x = ( ( char ) ( libcore.io.Memory . peekShort ( ix ( position ) , ( ! ( nativeByteOrder ) ) ) ) ) ; position = newPosition ; return x ; }
private void createCaughtVariables () { for ( org.objectweb.asm.tree.TryCatchBlockNode tryCatchNode : currentMethod.tryCatchBlocks ) { com.android.jill.frontend.java.Variable declaringCatchVariable = null ; org.objectweb.asm.Type caughtType ; if ( ( tryCatchNode.type ) == null ) { caughtType = org.objectweb.asm.Type . getType ( java.lang.Object . class ) ; } else { caughtType = org.objectweb.asm.Type . getType ( java.lang.Throwable . class ) ; } java.lang.String id = STRING_CONSTANT + ( ( unusedVarCount ) ++ ) ; declaringCatchVariable = new com.android.jill.frontend.java.Variable ( id , id , caughtType ) ; catchBlockToCatchedVariable . put ( tryCatchNode , declaringCatchVariable ) ; } }
@ java.lang.Override public javax.net.ssl.SSLSession getSession ( byte [] sessionId ) { if ( sessionId == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } sun.security.ssl.SSLSessionImpl sess = sessionCache . get ( new sun.security.ssl.SessionId ( sessionId ) ) ; if ( ! ( isTimedout ( sess ) ) ) { return sess ; } return null ; }
public void testNewConstructors_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr1 = new java.security.SecureRandom () ; assertNotNull ( sr1 . getProvider () ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr1 . getProvider () . getClass () . getName () ) ; test_SecureRandom ( sr1 ) ; java.security.SecureRandom sr2 = new java.security.SecureRandom ( libcore.java.security.SecureRandomTest.STATIC_SEED_BYTES ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr2 . getProvider () . getClass () . getName () ) ; test_SecureRandom ( sr2 ) ; }
public boolean put ( java.lang.String key , byte [] value ) { try { return ( mBinder . insert ( key , value , ( - NUMBER_CONSTANT ) ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
public void testChangedSynchronized () { java.lang.String [] args = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ; com.google.doclava.apicheck.ApiCheck apiCheck = new com.google.doclava.apicheck.ApiCheck () ; com.google.doclava.apicheck.ApiCheck.Report report = apiCheck . checkApi ( args ) ; assertEquals ( NUMBER_CONSTANT , report . errors () . size () ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putLong ( long x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putLong ( ix ( nextPutIndex ( SizeOf.LONG ) ) , x ) ; return this ; }
@ java.lang.Override protected void onPostExecute ( com.android.emailcommon.mail.MessagingException result ) { if ( isCancelled () ) return; if ( result == null ) { reportProgress ( com.android.email.activity.setup.AccountCheckSettingsFragment.STATE_CHECK_OK , null ) ; } else { int progressState = com.android.email.activity.setup.AccountCheckSettingsFragment.STATE_CHECK_ERROR ; int exceptionType = result . getExceptionType () ; switch ( exceptionType ) { case com.android.emailcommon.mail.MessagingException.AUTODISCOVER_AUTHENTICATION_FAILED : progressState = com.android.email.activity.setup.AccountCheckSettingsFragment.STATE_AUTODISCOVER_AUTH_DIALOG ; break; case com.android.emailcommon.mail.MessagingException.AUTODISCOVER_AUTHENTICATION_RESULT : progressState = com.android.email.activity.setup.AccountCheckSettingsFragment.STATE_AUTODISCOVER_RESULT ; break; case com.android.emailcommon.mail.MessagingException.SECURITY_POLICIES_REQUIRED : progressState = com.android.email.activity.setup.AccountCheckSettingsFragment.STATE_CHECK_SHOW_SECURITY ; break; } reportProgress ( progressState , result ) ; } }
private java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices () { java.util.List < android.bluetooth.BluetoothDevice > devices = new java.util.ArrayList <> () ; synchronized ( this ) { if ( ( ( mState ) == ( android.bluetooth.BluetoothMap.STATE_CONNECTED ) ) && ( ( com.android.bluetooth.map.BluetoothMapService.sRemoteDevice ) != null ) ) { devices . add ( com.android.bluetooth.map.BluetoothMapService.sRemoteDevice ) ; } } return devices ; }
private void rescale ( int direction ) { double s = mCanvasViewer . getCanvas () . getScale () ; if ( direction > NUMBER_CONSTANT ) { s = s * NUMBER_CONSTANT ; } else { s = s / NUMBER_CONSTANT ; } mCanvasViewer . getCanvas () . setScale ( s , true ) ; }
@ org.junit.Test public void testWrapperCleanup () { android.os.TestLooperManager looperManager = new android.os.TestLooperManager ( mThread . getLooper () ) ; com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper . wrap ( mMockController , mThread . getLooper () ) ; wrapper . registerCallback ( mTestCbs ) ; wrapper . cleanup () ; verify ( mMockController ) . unregisterCallback ( any () ) ; org.junit.Assert . assertNull ( wrapper . getTimeoutHandler () ) ; }
private void unregisterUiccCardEvents () { if ( ( mUiccCard ) != null ) mUiccCard . unregisterForCarrierPrivilegeRulesLoaded ( this ) ; if ( ( mUiccApplication ) != null ) { mUiccApplication . unregisterForReady ( this ) ; } if ( ( mIccRecords ) != null ) { mIccRecords . unregisterForImsiReady ( this ) ; mIccRecords . unregisterForRecordsLoaded ( this ) ; mIccRecords . unregisterForLockedRecordsLoaded ( this ) ; mIccRecords . unregisterForNetworkLockedRecordsLoaded ( this ) ; mIccRecords . unregisterForRecordsEvents ( this ) ; } }
static int getKeyTypeForAlgorithm ( java.lang.String keyType ) throws java.lang.IllegalArgumentException { if ( STRING_CONSTANT . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA ; } else if ( STRING_CONSTANT . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_EC ; } else { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + keyType ) ) ; } }
@ java.lang.Override public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ( mPendingFields ) != null ) { for ( java.util.List < com.android.utils.Pair < java.lang.String , com.android.tools.lint.detector.api.Location > > list : mPendingFields . values () ) { for ( com.android.utils.Pair < java.lang.String , com.android.tools.lint.detector.api.Location > pair : list ) { java.lang.String message = pair . getFirst () ; com.android.tools.lint.detector.api.Location location = pair . getSecond () ; context . report ( com.android.tools.lint.checks.ApiDetector.INLINED , location , message ) ; } } } super . afterCheckProject ( context ) ; }
@ org.junit.Test public void compareLibCoreStructure ( ) throws java.lang.Exception { com.android.jack.Options options = new com.android.jack.Options () ; options . addProperty ( Options.JAVA_SOURCE_VERSION . getName () , JavaVersion.JAVA_7 . toString () ) ; com.android.jack.TestTools . checkStructure ( options , null , null , com.android.jack.compile.androidtree.core.CoreCompilationTest.SOURCELIST , false , false , NUMBER_CONSTANT , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [] ) ( null ) ) ) ; }
private synchronized void onGetReport ( byte type , byte id , short bufferSize ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( ( ( STRING_CONSTANT + type ) + STRING_CONSTANT ) + id ) + STRING_CONSTANT ) + bufferSize ) ) ; } android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.hid.HidDevService.MESSAGE_GET_REPORT ) ; msg.obj = ( bufferSize > NUMBER_CONSTANT ) ? new java.lang.Integer ( bufferSize ) : null ; msg.arg1 = type ; msg.arg2 = id ; mHandler . sendMessage ( msg ) ; }
public int checkUriPermission ( android.net.Uri uri , int pid , int uid , int modeFlags ) { enforceNotIsolatedCaller ( STRING_CONSTANT ) ; com.android.server.am.ActivityManagerService.Identity tlsIdentity = com.android.server.am.ActivityManagerService.sCallerIdentity . get () ; if ( tlsIdentity != null ) { uid = tlsIdentity.uid ; pid = tlsIdentity.pid ; } if ( pid == ( com.android.server.am.ActivityManagerService.MY_PID ) ) { return android.content.pm.PackageManager.PERMISSION_GRANTED ; } synchronized ( this ) { return checkUriPermissionLocked ( uri , uid , modeFlags ) ? android.content.pm.PackageManager.PERMISSION_GRANTED : android.content.pm.PackageManager.PERMISSION_DENIED ; } }
private void setup () { loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.DIGEST_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.DIGESTS ) ; loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.SYMMETRIC_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.SYMMETRIC_GENERIC ) ; loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.SYMMETRIC_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.SYMMETRIC_MACS ) ; loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.SYMMETRIC_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.SYMMETRIC_CIPHERS ) ; loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.ASYMMETRIC_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.ASYMMETRIC_GENERIC ) ; loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.ASYMMETRIC_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.ASYMMETRIC_CIPHERS ) ; loadAlgorithms ( org.bouncycastle.jce.provider.BouncyCastleProvider.KEYSTORE_PACKAGE , org.bouncycastle.jce.provider.BouncyCastleProvider.KEYSTORES ) ; put ( STRING_CONSTANT , STRING_CONSTANT ) ; put ( STRING_CONSTANT , STRING_CONSTANT ) ; put ( STRING_CONSTANT , STRING_CONSTANT ) ; }
@ javax.annotation.Nonnull @ java.lang.Override public java.io.InputStream openRead ( ) throws com.android.sched.util.file.WrongPermissionException { try { return new com.android.sched.util.file.InputStreamFile ( file . getPath () ) . getInputStream () ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
protected void fillFileTypes () { for ( com.android.jack.library.FileType ft : com.android.jack.library.FileType . values () ) { try { java.lang.String propertyName = buildPropertyName ( ft , null ) ; if ( ( containsProperty ( propertyName ) ) && ( java.lang.Boolean . parseBoolean ( getProperty ( propertyName ) ) ) ) { fileTypes . add ( ft ) ; } } catch ( com.android.jack.library.LibraryFormatException e ) { throw new java.lang.AssertionError () ; } } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testGetByEnabledState ( ) throws java.lang.Exception { mComponentContextFixture . addConnectionService ( com.android.server.telecom.tests.PhoneAccountRegistrarTest . makeQuickConnectionServiceComponentName () , org.mockito.Mockito . mock ( com.android.internal.telecom.IConnectionService . class ) ) ; mRegistrar . registerPhoneAccount ( makeQuickAccountBuilder ( STRING_CONSTANT , NUMBER_CONSTANT ) . setCapabilities ( PhoneAccount.CAPABILITY_CALL_PROVIDER ) . build () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , mRegistrar . getCallCapablePhoneAccounts ( PhoneAccount.SCHEME_TEL , false , java.lang.Process . myUserHandle () ) . size () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , mRegistrar . getCallCapablePhoneAccounts ( PhoneAccount.SCHEME_TEL , true , java.lang.Process . myUserHandle () ) . size () ) ; }
public void testAddAll4 () { jsr166.AbstractQueueTest.Fail q = new jsr166.AbstractQueueTest.Fail () ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.IllegalStateException success ) {} }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , java.lang.Object array ) { try { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array . getLength ( array ) ) ; } finally { android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; } }
private static void assertImeiCheckDigit ( java.lang.String deviceId ) { int expectedCheckDigit = android.telephony.cts.TelephonyManagerTest . getLuhnCheckDigit ( deviceId . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; int actualCheckDigit = java.lang.Character . digit ( deviceId . charAt ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + deviceId ) , expectedCheckDigit , actualCheckDigit ) ; }
private static void waitToDie ( java.lang.Thread thread ) { assertFalse ( java.lang.Thread . currentThread () . isInterrupted () ) ; try { thread . join ( NUMBER_CONSTANT ) ; } catch ( java.lang.InterruptedException ignored ) {} if ( thread . isAlive () ) { fail ( ( ( STRING_CONSTANT + ( thread . getName () ) ) + STRING_CONSTANT ) ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , float [] data ) { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; mRS . validate () ; validate2DRange ( xoff , yoff , w , h ) ; mRS . nAllocationData2D ( getIDSafe () , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * NUMBER_CONSTANT ) , Element.DataType.FLOAT_32 ) ; android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; }
public int drainTo ( java.util.Collection < ? super E > c ) { if ( c == null ) throw new java.lang.NullPointerException () ; if ( c == ( this ) ) throw new java.lang.IllegalArgumentException () ; int n = NUMBER_CONSTANT ; for ( E e ; ( e = poll () ) != null ; ) { c . add ( e ) ; ++ n ; } return n ; }
private void onRadioButtonClicked ( android.widget.CompoundButton buttonView , boolean isChecked ) { if ( ( mPreventRadioButtonCallbacks ) || ( ( mSharedState . getCurrentChecked () ) == buttonView ) ) { return; } if ( isChecked ) { if ( ( mSharedState . getCurrentChecked () ) != null ) { mSharedState . getCurrentChecked () . setChecked ( false ) ; } mSharedState . setCurrentChecked ( buttonView ) ; mSharedState . setCurrentKey ( getKey () ) ; callChangeListener ( mSharedState . getCurrentKey () ) ; } mSettingsIcon . setEnabled ( isChecked ) ; }
public void run () { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder . setView ( view , viewSpacingLeft , viewSpacingTop , viewSpacingRight , viewSpacingBottom ) ; mDialog = mBuilder . show () ; mView = mDialog . getWindow () . findViewById ( NUMBER_CONSTANT ) ; }
@ java.lang.Override public void enter () { log ( ( ( ( STRING_CONSTANT + ( getCurrentMessage () . what ) ) + STRING_CONSTANT ) + ( mConnectedDevicesList . size () ) ) ) ; mPhonebook . resetAtState () ; mPhoneState . listenForPhoneState ( false ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; }
private static com.android.jack.ir.ast.JMethodIdWide getStaticMethodOrReportFailure ( com.android.jack.ir.ast.JClass cls , java.lang.String name , java.lang.String prop ) { try { return cls . getMethodIdWide ( name , java.util.Collections . < com.android.jack.ir.ast.JType > emptyList () , MethodKind.STATIC ) ; } catch ( java.lang.Throwable e ) { com.android.jack.Jack . getSession () . getReporter () . report ( Severity.FATAL , new com.android.jack.transformations.ast.BoostLockedRegionPriority.BadBoostLockedRegionPriorityConfigurationException ( prop , e ) ) ; com.android.jack.Jack . getSession () . abortEventually () ; return null ; } }
static void addTestToCategory ( java.util.Map < java.lang.String , java.util.List < com.android.cts.verifier.TestListAdapter.TestListItem > > testsByCategory , java.lang.String testCategory , com.android.cts.verifier.TestListAdapter.TestListItem item ) { java.util.List < com.android.cts.verifier.TestListAdapter.TestListItem > tests ; if ( testsByCategory . containsKey ( testCategory ) ) { tests = testsByCategory . get ( testCategory ) ; } else { tests = new java.util.ArrayList < com.android.cts.verifier.TestListAdapter.TestListItem > () ; } testsByCategory . put ( testCategory , tests ) ; tests . add ( item ) ; }
java.lang.Object newInstance ( ) throws java.lang.InstantiationException , java.lang.UnsupportedOperationException , java.lang.reflect.InvocationTargetException { if ( ( cons ) != null ) { try { return cons . newInstance () ; } catch ( java.lang.IllegalAccessException ex ) { throw new java.lang.InternalError ( ex ) ; } } else { throw new java.lang.UnsupportedOperationException () ; } }
public byte [] toDex ( java.io.Writer humanOut , boolean verbose ) throws java.io.IOException { boolean annotate = humanOut != null ; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0 ( annotate , verbose , null ) ; if ( annotate ) { result . writeAnnotationsTo ( humanOut ) ; } return result . getArray () ; }
public void setLineStyle ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.LineStyle style ) { int swtStyle = NUMBER_CONSTANT ; switch ( style ) { case LINE_SOLID : swtStyle = org.eclipse.swt.SWT.LINE_SOLID ; break; case LINE_DASH : swtStyle = org.eclipse.swt.SWT.LINE_DASH ; break; case LINE_DOT : swtStyle = org.eclipse.swt.SWT.LINE_DOT ; break; case LINE_DASHDOT : swtStyle = org.eclipse.swt.SWT.LINE_DASHDOT ; break; case LINE_DASHDOTDOT : swtStyle = org.eclipse.swt.SWT.LINE_DASHDOTDOT ; break; default: assert false : style ; break; } if ( swtStyle != NUMBER_CONSTANT ) { checkGC () ; getGc () . setLineStyle ( swtStyle ) ; } }
@ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , method = STRING_CONSTANT , args = { boolean . class } ) public void testReportFullscreenMode () { android.view.inputmethod.InputMethodManager imManager = ( ( android.view.inputmethod.InputMethodManager ) ( mInstrumentation . getTargetContext () . getSystemService ( Context.INPUT_METHOD_SERVICE ) ) ) ; mConnection . reportFullscreenMode ( false ) ; assertFalse ( imManager . isFullscreenMode () ) ; mConnection . reportFullscreenMode ( true ) ; assertTrue ( imManager . isFullscreenMode () ) ; }
private boolean waitForObject () { while ( true ) { java.lang.Object object = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject ; if ( object != null ) { return true ; } synchronized ( this ) { try { wait () ; } catch ( java.lang.InterruptedException e ) { return false ; } } } }
private void initif ( java.lang.String hostName , byte [] addr , java.net.NetworkInterface nif ) throws java.net.UnknownHostException { int family = - NUMBER_CONSTANT ; holder6 . init ( addr , nif ) ; if ( ( addr.length ) == ( java.net.Inet6Address.INADDRSZ ) ) { family = AF_INET6 ; } holder . init ( hostName , family ) ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { super . tearDown () ; if ( ! ( supportsDragAndDrop () ) ) { return; } mDevice . executeShellCommand ( ( ( android.wm.cts.CrossAppDragAndDropTests.AM_FORCE_STOP ) + ( mSourcePackageName ) ) ) ; mDevice . executeShellCommand ( ( ( android.wm.cts.CrossAppDragAndDropTests.AM_FORCE_STOP ) + ( mTargetPackageName ) ) ) ; }
public void testNonfullscreenAppOrientationRequests ( ) throws java.lang.Exception { java.lang.String logSeparator = clearLogcat () ; launchActivity ( android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME ) ; final android.server.cts.ReportedSizes initialReportedSizes = getLastReportedSizesForActivity ( android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME , logSeparator ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , initialReportedSizes.orientation ) ; logSeparator = clearLogcat () ; launchActivityInComponent ( android.server.cts.ActivityManagerAppConfigurationTests.TRANSLUCENT_SDK_26_PACKAGE , android.server.cts.ActivityManagerAppConfigurationTests.TRANSLUCENT_ACTIVITY ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , mAmWmState . getWmState () . getLastOrientation () ) ; }
public void setTrafficClass ( int tc ) throws java.net.SocketException { if ( ( tc < NUMBER_CONSTANT ) || ( tc > NUMBER_CONSTANT ) ) throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; if ( isClosed () ) throw new java.net.SocketException ( STRING_CONSTANT ) ; getImpl () . setOption ( java.net.SocketOptions.IP_TOS , new java.lang.Integer ( tc ) ) ; }
@ java.lang.Override public java.lang.Object [] toArray () { int length = c . size () ; java.lang.Object [] result = new java.lang.Object [ length ] ; java.util.Iterator < > it = iterator () ; for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { result [ i ] = it . next () ; } return result ; }
public static com.android.calculator2.BoundedRational pow ( com.android.calculator2.BoundedRational base , com.android.calculator2.BoundedRational exp ) { if ( exp == null ) { return null ; } if ( base == null ) { return null ; } exp = exp . reduce () . positiveDen () ; if ( ! ( exp.mDen . equals ( java.math.BigInteger.ONE ) ) ) { return null ; } return base . pow ( exp.mNum ) ; }
@ java.lang.Override public java.lang.Object clone ( ) throws java.lang.CloneNotSupportedException { if ( ( spiImpl ) instanceof java.lang.Cloneable ) { java.security.SignatureSpi spi = ( ( java.security.SignatureSpi ) ( spiImpl . clone () ) ) ; return new java.security.Signature.SignatureImpl ( getAlgorithm () , getProvider () , spiImpl ) ; } throw new java.lang.CloneNotSupportedException () ; }
private static java.util.List < com.android.ide.common.resources.configuration.Configurable > getConfigurable ( java.lang.String . . . configs ) { java.util.ArrayList < com.android.ide.common.resources.configuration.Configurable > list = new java.util.ArrayList < com.android.ide.common.resources.configuration.Configurable > () ; for ( java.lang.String config : configs ) { list . add ( new com.android.ide.common.resources.configuration.FolderConfigurationTest.MockConfigurable ( config ) ) ; } return list ; }
public void testGetSuperclass () { assertEquals ( java.lang.Object . class , dalvik.system.JniTest . envGetSuperclass ( java.lang.String . class ) ) ; assertEquals ( null , dalvik.system.JniTest . envGetSuperclass ( java.lang.Object . class ) ) ; assertEquals ( null , dalvik.system.JniTest . envGetSuperclass ( int . class ) ) ; assertEquals ( null , dalvik.system.JniTest . envGetSuperclass ( java.lang.Runnable . class ) ) ; }
static < K , V1 , V2 > com.google.common.collect.Maps.EntryTransformer < K , V1 , V2 > asEntryTransformer ( final com.google.common.base.Function < ? super V1 , V2 > function ) { com.google.common.base.Preconditions . checkNotNull ( function ) ; return new com.google.common.collect.Maps.EntryTransformer < K , V1 , V2 > () { @ java.lang.Override public V2 transformEntry ( K key , V1 value ) { return function . apply ( value ) ; } } ; }
@ org.junit.Test public void testIndividualNativeFields () { android.net.UidRange original = new android.net.UidRange ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; byte [] originalBytes = android.net.UidRangeTest . marshall ( original ) ; org.junit.Assert . assertEquals ( original.start , android.net.UidRangeTest . getStart ( originalBytes ) ) ; org.junit.Assert . assertEquals ( original.stop , android.net.UidRangeTest . getStop ( originalBytes ) ) ; }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession x ) { for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : x . getTypesToEmit () ) { if ( ! ( type . isExternal () ) ) { accept ( type ) ; newline () ; newline () ; } } return false ; }
public void testHandshake ( ) throws java.lang.Exception { prepareEngines () ; assertTrue ( STRING_CONSTANT , doHandshake () ) ; java.lang.System.out . println ( clientEngine.engine . getSession () . getCipherSuite () ) ; assertEquals ( STRING_CONSTANT , javax.net.ssl.SSLEngineResult.HandshakeStatus.FINISHED , clientEngine . getStatus () ) ; assertEquals ( STRING_CONSTANT , javax.net.ssl.SSLEngineResult.HandshakeStatus.FINISHED , serverEngine . getStatus () ) ; }
public boolean countryUsesUtc ( java.lang.String isoCountryCode , long whenMillis ) { if ( android.text.TextUtils . isEmpty ( isoCountryCode ) ) { return false ; } libcore.util.CountryTimeZones countryTimeZones = libcore.util.TimeZoneFinder . getInstance () . lookupCountryTimeZones ( isoCountryCode ) ; return ( countryTimeZones != null ) && ( countryTimeZones . hasUtcZone ( whenMillis ) ) ; }
public static void setAdb ( java.lang.String adb , boolean startAdb ) { if ( adb != null ) { if ( com.android.ide.eclipse.ddms.DdmsPlugin . setAdbLocation ( adb ) ) { if ( startAdb ) { new java.lang.Thread () { @ java.lang.Override public void run () { com.android.ddmlib.AndroidDebugBridge . createBridge ( com.android.ide.eclipse.ddms.DdmsPlugin.sAdbLocation , false ) ; } } . start () ; } } } }
private static void markAsDeleted ( final int id ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . markDirty () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . addToFreeRecordsList ( id ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
private java.util.List < com.android.bluetooth.avrcp.MediaController > getMediaControllers () { java.util.List < com.android.bluetooth.avrcp.MediaController > controllers = new java.util.ArrayList < com.android.bluetooth.avrcp.MediaController > () ; synchronized ( mMediaPlayerInfoList ) { for ( com.android.bluetooth.avrcp.MediaPlayerInfo info : mMediaPlayerInfoList . values () ) { if ( ( info . getMediaController () ) != null ) { controllers . add ( info . getMediaController () . getWrappedInstance () ) ; } } } return controllers ; }
public void add ( com.android.jack.dx.dex.file.OffsettedItem item ) { assert item != null ; throwIfPrepared () ; if ( ( item . getAlignment () ) > ( getAlignment () ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } items . add ( item ) ; }
private boolean isSniEnabledByDefault () { java.lang.String enableSNI = java.lang.System . getProperty ( STRING_CONSTANT , STRING_CONSTANT ) ; if ( STRING_CONSTANT . equalsIgnoreCase ( enableSNI ) ) { return true ; } else if ( STRING_CONSTANT . equalsIgnoreCase ( enableSNI ) ) { return false ; } else { throw new java.lang.RuntimeException ( STRING_CONSTANT ) ; } }
private android.net.Network connectKeepaliveNetwork ( android.net.LinkProperties lp ) { if ( ( mWiFiNetworkAgent ) != null ) { assertNull ( mCm . getNetworkCapabilities ( mWiFiNetworkAgent . getNetwork () ) ) ; } mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( TRANSPORT_WIFI ) ; android.os.ConditionVariable cv = waitForConnectivityBroadcasts ( NUMBER_CONSTANT ) ; mWiFiNetworkAgent . connect ( true ) ; com.android.server.ConnectivityServiceTest . waitFor ( cv ) ; verifyActiveNetwork ( com.android.server.TRANSPORT_WIFI ) ; mWiFiNetworkAgent . sendLinkProperties ( lp ) ; waitForIdle () ; return mWiFiNetworkAgent . getNetwork () ; }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClass createGroupClass ( @ javax.annotation.Nonnegative int id , @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session , @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pkg ) { com.android.jack.ir.ast.JDefinedClass groupClass = new com.android.jack.ir.ast.JDefinedClass ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , com.android.jack.util.NamingTools . getNonSourceConflictingName ( ( ( com.android.jack.transformations.lambda.LambdaCollection.LAMBDA_GROUP_CLASS_NAME_PREFIX ) + id ) ) , ( ( com.android.jack.ir.ast.JModifier.FINAL ) | ( com.android.jack.ir.ast.JModifier.SYNTHETIC ) ) , pkg , com.android.jack.load.NopClassOrInterfaceLoader.INSTANCE ) ; groupClass . setSuperClass ( javaLangObject ) ; session . addTypeToEmit ( groupClass ) ; tracer . getStatistic ( com.android.jack.transformations.lambda.LambdaCollection.LAMBDA_GROUP_CLASSES_CREATED ) . incValue () ; return groupClass ; }
private static final java.util.regex.Matcher getNextLineMatcher ( java.lang.String [] lines , int nextIndex , java.util.regex.Pattern pattern ) { if ( nextIndex == ( lines.length ) ) { return null ; } java.util.regex.Matcher m = pattern . matcher ( lines [ nextIndex ] ) ; if ( m . matches () ) { return m ; } return null ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testActionEmergencyWithNonEmergencyNumber () { android.net.Uri handle = android.net.Uri . parse ( STRING_CONSTANT ) ; org.mockito.Mockito . doReturn ( false ) . when ( mPhoneNumberUtilsAdapterSpy ) . isPotentialLocalEmergencyNumber ( org.mockito.Matchers . any ( android.content.Context . class ) , org.mockito.Matchers . eq ( handle . getSchemeSpecificPart () ) ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL_EMERGENCY , handle ) ; int result = processIntent ( intent , true ) ; org.junit.Assert . assertEquals ( DisconnectCause.OUTGOING_CANCELED , result ) ; verifyNoCallPlaced () ; verifyNoBroadcastSent () ; }
@ java.lang.Override public void run () { com.android.ide.common.api.InsertType insertType = com.android.ide.eclipse.adt.internal.editors.layout.gle2.MoveGesture . getInsertType ( event , mTargetNode ) ; mCanvas . getRulesEngine () . callOnDropped ( mTargetNode , elementsFinal , mFeedback , new com.android.ide.common.api.Point ( canvasPoint.x , canvasPoint.y ) , insertType ) ; mTargetNode . applyPendingChanges () ; if ( ( event.detail ) == ( org.eclipse.swt.dnd.DND.DROP_MOVE ) ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GlobalCanvasDragInfo . getInstance () . removeSource () ; } mTargetNode . applyPendingChanges () ; }
public void doImport ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws com.android.jack.backend.jayce.ImportConflictException , com.android.jack.ir.ast.JPackageLookupException , com.android.jack.ir.ast.JTypeLookupException { for ( com.android.jack.library.InputJackLibrary inputJackLibrary : inputJackLibraries ) { com.android.sched.vfs.InputRootVDir libraryVDir = inputJackLibrary . getInputVDir () ; com.android.jack.backend.jayce.JayceFileImporter.logger . log ( java.util.logging.Level.FINE , STRING_CONSTANT , libraryVDir . getLocation () . getDescription () ) ; for ( com.android.sched.vfs.InputVElement subFile : libraryVDir . list () ) { importJayceFile ( inputJackLibrary , subFile , session , STRING_CONSTANT ) ; } } }
@ java.lang.Override protected void fillRtTestInfos () { rtTestInfos . add ( CLAZZ ) ; rtTestInfos . add ( TEST001 ) ; rtTestInfos . add ( TEST002 ) ; rtTestInfos . add ( TEST003 ) ; rtTestInfos . add ( TEST004 ) ; rtTestInfos . add ( TEST006 ) ; rtTestInfos . add ( TEST007 ) ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser . getOptionsDataInternal ( optionsClass ) ; java.util.List < java.lang.reflect.Field > optionFields = new java.util.ArrayList ( data . getFieldsForClass ( optionsClass ) ) ; optionFields . sort ( com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage . getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , data ) ; } }
public void seek ( long pos ) throws java.io.IOException { if ( pos < NUMBER_CONSTANT ) { throw new java.io.IOException ( ( STRING_CONSTANT + pos ) ) ; } else { try { Libcore.os . lseek ( fd , pos , java.io.SEEK_SET ) ; ioTracker . reset () ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException . rethrowAsIOException () ; } } }
@ java.lang.Override public int getSimAccessPermission ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN ; } return service . getSimAccessPermission ( device ) ; }
@ android.test.suitebuilder.annotation.SmallTest public void testSmDigits ( ) throws java.lang.Exception { assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , com.android.internal.telephony.MccTable . smallestDigitsMccForMnc ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public int [] blend ( int [] src , int [] dst , int [] result ) { for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { result [ i ] = java.lang.Math . min ( src [ i ] , dst [ i ] ) ; } result [ NUMBER_CONSTANT ] = java.lang.Math . min ( NUMBER_CONSTANT , ( ( src [ NUMBER_CONSTANT ] ) + ( dst [ NUMBER_CONSTANT ] ) ) ) ; return result ; }
private static void applyInvokeWithSecurityPolicy ( com.android.internal.os.ZygoteConnection.Arguments args , android.net.Credentials peer ) throws com.android.internal.os.ZygoteSecurityException { int peerUid = peer . getUid () ; if ( ( ( args.invokeWith ) != null ) && ( peerUid != NUMBER_CONSTANT ) ) { throw new com.android.internal.os.ZygoteSecurityException ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } }
static int foo () { try { Main . assertIsManaged () ; Main . constantIndexing2 ( new int [ NUMBER_CONSTANT ] ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException e ) { Main . assertIsManaged () ; try { Main . constantIndexingForward6 ( new int [ NUMBER_CONSTANT ] ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException e2 ) { return NUMBER_CONSTANT ; } } return NUMBER_CONSTANT ; }
@ java.lang.Override public void testFailed ( com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { if ( ( mLogger ) != null ) { mLogger . warning ( java.lang.String . format ( STRING_CONSTANT , test . getClassName () , test . getTestName () , mDeviceName ) ) ; mLogger . warning ( getModifiedTrace ( trace ) ) ; } mFailedTests . add ( test ) ; super . testFailed ( test , trace ) ; }
public void retainSubscriptionsForFactoryReset ( android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . retainSubscriptionsForFactoryReset ( callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public void createUnitTestVariantTasks ( @ com.android.annotations.NonNull com.android.build.gradle.internal.TaskFactory tasks , @ com.android.annotations.NonNull com.android.build.gradle.internal.variant.TestVariantData variantData ) { variantData.assembleVariantTask . dependsOn ( createMockableJar . getName () ) ; com.android.build.gradle.internal.scope.VariantScope variantScope = variantData . getScope () ; createPreBuildTasks ( variantScope ) ; createProcessJavaResTasks ( tasks , variantScope ) ; createCompileAnchorTask ( tasks , variantScope ) ; com.android.build.gradle.internal.scope.AndroidTask < org.gradle.api.tasks.compile.JavaCompile > javacTask = createJavacTask ( tasks , variantScope ) ; com.android.build.gradle.internal.TaskManager . setJavaCompilerTask ( javacTask , tasks , variantScope ) ; createUnitTestTask ( tasks , variantScope ) ; variantData.assembleVariantTask . setGroup ( null ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testGetPhoneAccountsForPackage ( ) throws android.os.RemoteException { java.util.List < android.telecom.PhoneAccountHandle > phoneAccountHandleList = new java.util.ArrayList < android.telecom.PhoneAccountHandle > () { { add ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ; add ( com.android.server.telecom.tests.TelecomServiceImplTest.SIP_PA_HANDLE_17 ) ; } } ; org.mockito.Mockito . when ( mFakePhoneAccountRegistrar . getPhoneAccountsForPackage ( org.mockito.Matchers . anyString () , org.mockito.Matchers . any ( android.os.UserHandle . class ) ) ) . thenReturn ( phoneAccountHandleList ) ; makeAccountsVisibleToAllUsers ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 , com.android.server.telecom.tests.TelecomServiceImplTest.SIP_PA_HANDLE_17 ) ; org.junit.Assert . assertEquals ( phoneAccountHandleList , mTSIBinder . getPhoneAccountsForPackage ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 . getComponentName () . getPackageName () ) ) ; }
public static void force () { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { if ( ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myRecords ) != null ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . markClean () ; } if ( ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myNames ) != null ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myNames . force () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myAttributes . force () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myContents . force () ; if ( ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myContentHashesEnumerator ) != null ) com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myContentHashesEnumerator . force () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.myRecords . force () ; } } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
public void close ( ) throws java.io.IOException { guard . close () ; synchronized ( this ) { if ( ( ( channel ) != null ) && ( channel . isOpen () ) ) { channel . close () ; } libcore.io.IoBridge . closeAndSignalBlockedThreads ( fd ) ; } }
public void test_ConstructorLjava_lang_Readable () { s = new java.util.Scanner ( new java.io.StringReader ( STRING_CONSTANT ) ) ; assertNotNull ( s ) ; s . close () ; try { s = new java.util.Scanner ( ( ( java.lang.Readable ) ( null ) ) ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} }
@ org.junit.Test public void testRenameCoreLibrary_prefixedLoader ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , null , null , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( support . renameCoreLibrary ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , android.os.Handler handler , int timeoutMs ) { android.net.ConnectivityManager . checkTimeout ( timeoutMs ) ; int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler ( handler ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType , cbHandler ) ; }
public android.net.wifi.WifiWakeReasonAndCounts getWlanWakeReasonCount () { android.util.Log . d ( com.android.server.wifi.WifiNative.TAG , ( STRING_CONSTANT + ( com.android.server.wifi.WifiNative.sWlan0Index ) ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { return com.android.server.wifi.WifiNative . getWlanWakeReasonCountNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } }
private void assertParseFailure ( java.lang.String xml , org.xmlpull.v1.XmlPullParser parser ) throws java.lang.Exception { parser . setInput ( new java.io.StringReader ( xml ) ) ; try { while ( ( parser . next () ) != ( org.xmlpull.v1.XmlPullParser.END_DOCUMENT ) ) {} fail () ; } catch ( org.xmlpull.v1.XmlPullParserException expected ) {} }
@ org.junit.Test public void testGetCoreInterfaceRewritingTarget_staticInterfaceMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , java.lang.Thread . currentThread () . getContextClassLoader () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . getCoreInterfaceRewritingTarget ( Opcodes.INVOKESTATIC , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , true ) ) . isEqualTo ( java.util.Comparator . class ) ; }
public static org.conscrypt.OpenSSLX509CRL fromX509DerInputStream ( java.io.InputStream is ) throws org.conscrypt.OpenSSLX509CertificateFactory.ParsingException { final org.conscrypt.OpenSSLBIOInputStream bis = new org.conscrypt.OpenSSLBIOInputStream ( is , true ) ; try { final long crlCtx = org.conscrypt.NativeCrypto . d2i_X509_CRL_bio ( bis . getBioContext () ) ; if ( crlCtx == NUMBER_CONSTANT ) { return null ; } return new org.conscrypt.OpenSSLX509CRL ( crlCtx ) ; } catch ( java.lang.Exception e ) { throw new org.conscrypt.OpenSSLX509CertificateFactory.ParsingException ( e ) ; } finally { bis . release () ; } }
public boolean generate ( java.lang.String key , int uid ) { try { return ( mBinder . generate ( key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
protected void engineInitSign ( java.security.PrivateKey privateKey ) throws java.security.InvalidKeyException { org.bouncycastle.crypto.CipherParameters param = org.bouncycastle.jcajce.provider.asymmetric.dsa.DSAUtil . generatePrivateKeyParameter ( privateKey ) ; org.bouncycastle.crypto.params.DSAParameters dsaParam = ( ( org.bouncycastle.crypto.params.DSAKeyParameters ) ( param ) ) . getParameters () ; checkKey ( dsaParam ) ; if ( ( random ) != null ) { param = new org.bouncycastle.crypto.params.ParametersWithRandom ( param , random ) ; } digest . reset () ; signer . init ( true , param ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.Integer wifiAwareSubscribe ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer clientId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) org.json.JSONObject subscribeConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { android.net.wifi.aware.WifiAwareSession session = mSessions . get ( clientId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( STRING_CONSTANT + clientId ) + STRING_CONSTANT ) ) ; } int discoverySessionId = getNextDiscoverySessionId () ; session . subscribe ( com.googlecode.android_scripting.facade.wifi.WifiAwareManagerFacade . getSubscribeConfig ( subscribeConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiAwareManagerFacade.AwareDiscoverySessionCallbackPostsEvents ( discoverySessionId ) , null ) ; return discoverySessionId ; } }
public static java.lang.String [] getAvailableIDs ( int rawOffset ) { java.util.List < java.lang.String > matches = new java.util.ArrayList < java.lang.String > () ; for ( int i = NUMBER_CONSTANT , end = libcore.util.ZoneInfoDB.rawUtcOffsets.length ; i < end ; ++ i ) { if ( ( libcore.util.ZoneInfoDB.rawUtcOffsets [ i ] ) == rawOffset ) { matches . add ( libcore.util.ZoneInfoDB.ids [ i ] ) ; } } return matches . toArray ( new java.lang.String [ matches . size () ] ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putShort ( int i , short x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putShort ( ix ( checkIndex ( i , SizeOf.SHORT ) ) , x ) ; return this ; }
public boolean importKey ( java.lang.String keyName , byte [] key , int uid , int flags ) { try { return ( mBinder . import_key ( keyName , key , uid , flags ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
private void addListValue ( java.lang.reflect.Field field , java.lang.Object value , com.google.devtools.common.options.OptionPriority priority , java.lang.String source , java.lang.String implicitDependant , java.lang.String expandedFrom ) { com.google.devtools.common.options.OptionsParser.OptionValueDescription entry = parsedValues . get ( field ) ; if ( entry == null ) { entry = new com.google.devtools.common.options.OptionsParser.OptionValueDescription ( field . getName () , null , com.google.common.collect.ArrayListMultimap . create () , priority , source , implicitDependant , expandedFrom , true ) ; parsedValues . put ( field , entry ) ; maybeAddDeprecationWarning ( field ) ; } entry . addValue ( priority , value ) ; }
private void processStartPackageCommand ( com.android.cts.CommandParser cp ) { try { java.lang.String pathName = cp . getValue ( CTSCommand.OPTION_PACKAGE ) ; mHost . startZippedPackage ( pathName ) ; } catch ( com.android.cts.DeviceDisconnectedException e ) { com.android.cts.Log . e ( ( ( STRING_CONSTANT + ( e . getMessage () ) ) + STRING_CONSTANT ) , e ) ; } catch ( java.lang.Exception e ) { com.android.cts.Log . e ( STRING_CONSTANT , e ) ; } }
@ org.junit.Test @ org.junit.Ignore ( value = STRING_CONSTANT ) public void pnoRetryForLowRssiNetwork () { when ( mWifiNS . selectNetwork ( anyObject () , anyObject () , anyObject () , anyBoolean () , anyBoolean () , anyBoolean () ) ) . thenReturn ( null ) ; mWifiConnectivityManager . handleScreenStateChanged ( false ) ; int lowRssiNetworkRetryDelayStartValue = mWifiConnectivityManager . getLowRssiNetworkRetryDelay () ; mWifiConnectivityManager . handleConnectionStateChanged ( WifiConnectivityManager.WIFI_STATE_DISCONNECTED ) ; int lowRssiNetworkRetryDelayAfterPnoValue = mWifiConnectivityManager . getLowRssiNetworkRetryDelay () ; assertEquals ( ( lowRssiNetworkRetryDelayStartValue * NUMBER_CONSTANT ) , lowRssiNetworkRetryDelayAfterPnoValue ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testEndCallWithNoForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito . mock ( com.android.server.telecom.Call . class ) ; org.mockito.Mockito . when ( call . getState () ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito . when ( mFakeCallsManager . getFirstCallWithState ( org.mockito.Matchers . any () ) ) . thenReturn ( call ) ; org.junit.Assert . assertTrue ( mTSIBinder . endCall ( null ) ) ; org.mockito.Mockito . verify ( call ) . disconnect () ; }
@ org.junit.Test public void testSnkPlay () { streamHandler . handleMessage ( streamHandler . obtainMessage ( A2dpSinkStreamHandler.SNK_PLAY ) ) ; org.mockito.Mockito . verify ( mockAudioManager , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . requestAudioFocus ( org.mockito.Mockito . any () ) ; org.mockito.Mockito . verify ( mockA2dpSink , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . informAudioFocusStateNative ( NUMBER_CONSTANT ) ; org.mockito.Mockito . verify ( mockA2dpSink , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . informAudioTrackGainNative ( NUMBER_CONSTANT ) ; }
public void sendTextWithSelfPermissions ( java.lang.String callingPackage , java.lang.String destAddr , java.lang.String scAddr , java.lang.String text , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , boolean persistMessage ) { mPhone . getContext () . enforceCallingOrSelfPermission ( Manifest.permission.SEND_SMS , STRING_CONSTANT ) ; sendTextInternal ( callingPackage , destAddr , scAddr , text , sentIntent , deliveryIntent , persistMessage ) ; }
synchronized android.telecom.Connection onCreateUnknownConnection ( android.bluetooth.BluetoothHeadsetClientCall call ) { android.net.Uri number = android.net.Uri . fromParts ( PhoneAccount.SCHEME_TEL , call . getNumber () , null ) ; com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection = mConnections . get ( call . getUUID () ) ; if ( connection != null ) { connection . onAdded () ; return connection ; } else { android.util.Log . e ( mTAG , ( ( STRING_CONSTANT + call ) + STRING_CONSTANT ) ) ; return null ; } }
public java.lang.Object clone () { try { java.text.DigitList other = ( ( java.text.DigitList ) ( super . clone () ) ) ; char [] newDigits = new char [ digits.length ] ; java.lang.System . arraycopy ( digits , NUMBER_CONSTANT , newDigits , NUMBER_CONSTANT , digits.length ) ; other.digits = newDigits ; other.tempBuffer = null ; return other ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } }
public static boolean hasError ( @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration ) { return ( ( typeDeclaration . hasErrors () ) || ( ( ( typeDeclaration . getCompilationUnitDeclaration () ) != null ) && ( typeDeclaration . getCompilationUnitDeclaration () . hasErrors () ) ) ) || ( ( typeDeclaration.binding ) == null ) ; }
public static int acquireFileContent ( int fileId ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { int record = com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getContentRecordId ( fileId ) ; if ( record > NUMBER_CONSTANT ) com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getContentStorage () . acquireRecord ( record ) ; return record ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
@ org.junit.Test public void test_EVP_get_digestbyname ( ) throws java.lang.Exception { org.junit.Assert . assertTrue ( ( ( org.conscrypt.NativeCrypto . EVP_get_digestbyname ( STRING_CONSTANT ) ) != ( org.conscrypt.NativeCryptoTest.NULL ) ) ) ; try { org.conscrypt.NativeCrypto . EVP_get_digestbyname ( STRING_CONSTANT ) ; org.conscrypt.NativeCrypto . EVP_get_digestbyname ( STRING_CONSTANT ) ; org.junit.Assert . fail () ; } catch ( java.lang.RuntimeException expected ) {} }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClass initializeSyntheticClass ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage , @ javax.annotation.Nonnull java.lang.String syntheticClassShortName ) { com.android.jack.ir.ast.JDefinedClass syntheticSwitchmapClass = new com.android.jack.ir.ast.JDefinedClass ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , syntheticClassShortName , ( ( ( com.android.jack.ir.ast.JModifier.PUBLIC ) | ( com.android.jack.ir.ast.JModifier.FINAL ) ) | ( com.android.jack.ir.ast.JModifier.SYNTHETIC ) ) , enclosingPackage , com.android.jack.load.NopClassOrInterfaceLoader.INSTANCE ) ; syntheticSwitchmapClass . setSuperClass ( session . getLookup () . getClass ( CommonTypes.JAVA_LANG_OBJECT ) ) ; session . addTypeToEmit ( syntheticSwitchmapClass ) ; return syntheticSwitchmapClass ; }
@ java.lang.Override public boolean canThrow () { return ( ( ( ( ( getType () ) == ( JPrimitiveTypeEnum.BYTE . getType () ) ) || ( ( getType () ) == ( JPrimitiveTypeEnum.CHAR . getType () ) ) ) || ( ( getType () ) == ( JPrimitiveTypeEnum.SHORT . getType () ) ) ) || ( ( getType () ) == ( JPrimitiveTypeEnum.INT . getType () ) ) ) || ( ( getType () ) == ( JPrimitiveTypeEnum.LONG . getType () ) ) ; }
private static void startFifo () { com.android.jack.server.Server.logger . log ( java.util.logging.Level.FINE , STRING_CONSTANT ) ; try { assert ( com.android.jack.server.Server.fifo ) != null ; com.android.sched.util.file.FileOrDirectory . setPermissions ( com.android.jack.server.Server.fifo , new com.android.sched.util.location.FileLocation ( com.android.jack.server.Server.fifo ) , ( ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) | ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) , ChangePermission.OWNER ) ; } catch ( com.android.sched.util.file.CannotSetPermissionException e ) { com.android.jack.server.Server.logger . log ( java.util.logging.Level.SEVERE , e . getMessage () , e ) ; com.android.jack.server.Server . abort () ; } }
public void test_ConstructorS ( ) throws java.lang.Exception { java.util.Timer t = null ; try { t = new java.util.Timer ( STRING_CONSTANT ) ; tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask () ; t . schedule ( testTask , NUMBER_CONSTANT ) ; awaitRun ( testTask ) ; t . cancel () ; } finally { if ( t != null ) t . cancel () ; } try { new java.util.Timer ( null ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} }
protected proguard.optimize.evaluation.Value getFieldClassValue ( proguard.optimize.evaluation.Clazz clazz , proguard.classfile.constant.RefConstant refConstant , java.lang.String type ) { if ( loadFieldValues ) { proguard.optimize.evaluation.Member referencedMember = refConstant.referencedMember ; if ( referencedMember != null ) { proguard.optimize.evaluation.ReferenceValue value = proguard.optimize.evaluation.StoringInvocationUnit . getFieldClassValue ( ( ( proguard.optimize.evaluation.Field ) ( referencedMember ) ) ) ; if ( value != null ) { return value ; } } } return super . getFieldClassValue ( clazz , refConstant , type ) ; }
@ com.android.server.hdmi.HdmiAnnotations.ServiceThreadOnly private void disableArcIfExist () { assertRunOnServiceThread () ; android.hardware.hdmi.HdmiDeviceInfo avr = getAvrDeviceInfo () ; if ( avr == null ) { return; } removeAction ( com.android.server.hdmi.RequestArcInitiationAction . class ) ; if ( ( ! ( hasAction ( com.android.server.hdmi.RequestArcTerminationAction . class ) ) ) && ( isArcEstablished () ) ) { addAndStartAction ( new com.android.server.hdmi.RequestArcTerminationAction ( this , avr . getLogicalAddress () ) ) ; } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testSendCallEventNull ( ) throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( STRING_CONSTANT , mPhoneAccountA0 . getAccountHandle () , mConnectionServiceFixtureA ) ; org.junit.Assert . assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX . getCall ( ids.mCallId ) . getState () ) ; mInCallServiceFixtureX.mInCallAdapter . sendCallEvent ( ids.mCallId , com.android.server.telecom.tests.BasicCallTests.TEST_EVENT , null ) ; org.mockito.Mockito . verify ( mConnectionServiceFixtureA . getTestDouble () , org.mockito.Mockito . timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . sendCallEvent ( org.mockito.Matchers . eq ( ids.mConnectionId ) , org.mockito.Matchers . eq ( com.android.server.telecom.tests.BasicCallTests.TEST_EVENT ) , org.mockito.Matchers . isNull ( android.os.Bundle . class ) , org.mockito.Matchers . any () ) ; }
public void test_getHandshakeStatus ( ) throws java.lang.Exception { javax.net.ssl.SSLEngine sse = getEngine () ; assertEquals ( sse . getHandshakeStatus () . toString () , STRING_CONSTANT ) ; sse . setUseClientMode ( true ) ; sse . beginHandshake () ; assertEquals ( sse . getHandshakeStatus () . toString () , STRING_CONSTANT ) ; }
@ java.lang.Override protected void readResponse ( java.io.InputStream stream ) throws java.io.IOException { if ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.VDBG ) android.util.Log . v ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.TAG , STRING_CONSTANT ) ; mResponse = new com.android.bluetooth.pbapclient.BluetoothPbapVcardList ( mAccount , stream , mFormat ) ; if ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.VDBG ) { android.util.Log . d ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.TAG , ( ( STRING_CONSTANT + ( mResponse . getCount () ) ) + STRING_CONSTANT ) ) ; } }
private void pushInitializerMethodInfo ( org.eclipse.jdt.internal.compiler.ast.FieldDeclaration x , org.eclipse.jdt.internal.compiler.lookup.MethodScope scope ) { com.android.jack.ir.ast.JMethod initMeth ; if ( x . isStatic () ) { initMeth = curClass.type . getMethod ( NamingTools.STATIC_INIT_NAME , JPrimitiveTypeEnum.VOID . getType () ) ; } else { initMeth = curClass.type . getMethod ( com.android.jack.ir.impl.JackIrBuilder.INIT_METHOD_NAME , JPrimitiveTypeEnum.VOID . getType () ) ; } pushMethodInfo ( new com.android.jack.ir.impl.JackIrBuilder.MethodInfo ( this , initMeth , ( ( com.android.jack.ir.ast.JMethodBody ) ( initMeth . getBody () ) ) , scope ) ) ; }
boolean setNearbyPlacesCursor ( @ android.support.annotation.Nullable com.android.dialer.searchfragment.common.SearchCursor cursor ) { if ( cursor == ( nearbyPlacesCursor ) ) { return false ; } if ( ( ( nearbyPlacesCursor ) != null ) && ( ! ( nearbyPlacesCursor . isClosed () ) ) ) { nearbyPlacesCursor . close () ; } if ( cursor != null ) { nearbyPlacesCursor = cursor ; } else { nearbyPlacesCursor = null ; } return true ; }
public < T > T execute ( @ org.jetbrains.annotations.NotNull java.lang.String projectPath , @ org.jetbrains.annotations.Nullable org.jetbrains.plugins.gradle.settings.GradleExecutionSettings settings , @ org.jetbrains.annotations.NotNull com.intellij.util.Function < org.jetbrains.plugins.gradle.service.project.ProjectConnection , T > f ) { org.jetbrains.plugins.gradle.service.project.ProjectConnection connection = org.jetbrains.plugins.gradle.service.project.GradleExecutionHelper . getConnection ( projectPath , settings ) ; try { return f . fun ( connection ) ; } catch ( java.lang.Throwable e ) { throw new com.intellij.openapi.externalSystem.model.ExternalSystemException ( e ) ; } finally { try { connection . close () ; } catch ( java.lang.Throwable e ) {} } }
@ java.lang.Override public void handleWriteSpeedSlow ( ) throws java.io.IOException { if ( ( mBufferReason ) == ( com.android.tv.tuner.exoplayer.buffer.RecordingSampleBuffer.BUFFER_REASON_RECORDING ) ) { android.util.Log . w ( com.android.tv.tuner.exoplayer.buffer.RecordingSampleBuffer.TAG , ( ( STRING_CONSTANT + ( mBufferManager . getWriteBandwidth () ) ) + STRING_CONSTANT ) ) ; return; } android.util.Log . w ( com.android.tv.tuner.exoplayer.buffer.RecordingSampleBuffer.TAG , STRING_CONSTANT ) ; mBufferListener . onDiskTooSlow () ; }
public static int runTest ( int input ) throws java.lang.Exception { java.lang.Class < > c = java.lang.Class . forName ( STRING_CONSTANT ) ; java.lang.reflect.Method m = c . getMethod ( STRING_CONSTANT , int . class ) ; return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; }
@ java.lang.Override void handleReturnCode () { if ( ( mArgs ) != null ) { processPendingInstall ( mArgs , mRet ) ; if ( ( mTempPackage ) != null ) { if ( ! ( mTempPackage . delete () ) ) { android.util.Slog . w ( com.android.server.pm.PackageManagerService.TAG , ( STRING_CONSTANT + ( mTempPackage . getAbsolutePath () ) ) ) ; } } } }
public java.lang.Object clone () { try { java.util.ResourceBundle.CacheKey clone = ( ( java.util.ResourceBundle.CacheKey ) ( super . clone () ) ) ; if ( ( loaderRef ) != null ) { clone.loaderRef = new java.util.ResourceBundle.LoaderReference ( loaderRef . get () , java.util.ResourceBundle.referenceQueue , clone ) ; } clone.cause = null ; return clone ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } }
public void binderDied () { if ( com.android.server.am.ActivityManagerService.localLOGV ) android.util.Slog . v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_CONSTANT + ( this ) ) + STRING_CONSTANT ) + ( mAppThread . asBinder () ) ) ) ; synchronized ( this ) { appDiedLocked ( mApp , mPid , mAppThread ) ; } }
void expectAvailableCallbacks ( com.android.server.ConnectivityServiceTest.MockNetworkAgent agent , boolean expectSuspended , boolean expectValidated , int timeoutMs ) { expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE , agent , timeoutMs ) ; if ( expectSuspended ) { expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED , agent , timeoutMs ) ; } if ( expectValidated ) { expectCapabilitiesWith ( android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED , agent , timeoutMs ) ; } else { expectCapabilitiesWithout ( android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED , agent , timeoutMs ) ; } expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES , agent , timeoutMs ) ; }
public static java.io.InputStream newFileInputStream ( java.io.File file , boolean normalize ) throws java.io.IOException { if ( ( ! normalize ) || ( ! ( com.intellij.updater.Utils . isZipFile ( file . getName () ) ) ) ) { return new java.io.FileInputStream ( file ) ; } return new com.intellij.updater.Utils.NormalizedZipInputStream ( file ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array ) { try { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array . getLength ( array ) ) ; } finally { android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; } }
public com.android.jack.dx.dex.file.MethodIdItem intern ( com.android.jack.dx.rop.cst.CstBaseMethodRef method ) { assert method != null ; throwIfPrepared () ; com.android.jack.dx.dex.file.MethodIdItem result = methodIds . get ( method ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.MethodIdItem ( method ) ; methodIds . put ( method , result ) ; } return result ; }
private boolean endsWithOK ( int currentPosition ) { return ( ( ( ( mBuffer [ ( currentPosition - NUMBER_CONSTANT ) ] ) == CHAR_CONS ) && ( ( mBuffer [ ( currentPosition - NUMBER_CONSTANT ) ] ) == CHAR_CONS ) ) && ( ( mBuffer [ ( currentPosition - NUMBER_CONSTANT ) ] ) == CHAR_CONS ) ) && ( ( mBuffer [ ( currentPosition - NUMBER_CONSTANT ) ] ) == CHAR_CONS ) ; }
@ java.lang.Override protected void onDetachedFromWindow () { super . onDetachedFromWindow () ; if ( ( mItemAnimator ) != null ) { mItemAnimator . endAnimations () ; } stopScroll () ; mIsAttached = false ; if ( ( mLayout ) != null ) { mLayout . dispatchDetachedFromWindow ( this , mRecycler ) ; } mPendingAccessibilityImportanceChange . clear () ; removeCallbacks ( mItemAnimatorRunner ) ; mViewInfoStore . onDetach () ; if ( ( android.support.v7.widget.RecyclerView.ALLOW_THREAD_GAP_WORK ) && ( ( mGapWorker ) != null ) ) { mGapWorker . remove ( this ) ; mGapWorker = null ; } }
private com.android.ddmlib.testrunner.IRemoteAndroidTestRunner.TestSize getTestSize ( org.eclipse.debug.core.ILaunchConfiguration configuration ) { java.lang.String testSizeAnnotation = getStringLaunchAttribute ( com.android.ide.eclipse.adt.internal.launch.junit.AndroidJUnitLaunchConfigDelegate.ATTR_TEST_SIZE , configuration ) ; if ( AndroidJUnitLaunchConfigurationTab.SMALL_TEST_ANNOTATION . equals ( testSizeAnnotation ) ) { return com.android.ddmlib.testrunner.IRemoteAndroidTestRunner.TestSize.SMALL ; } else if ( AndroidJUnitLaunchConfigurationTab.MEDIUM_TEST_ANNOTATION . equals ( testSizeAnnotation ) ) { return com.android.ddmlib.testrunner.IRemoteAndroidTestRunner.TestSize.MEDIUM ; } else if ( AndroidJUnitLaunchConfigurationTab.LARGE_TEST_ANNOTATION . equals ( testSizeAnnotation ) ) { return com.android.ddmlib.testrunner.IRemoteAndroidTestRunner.TestSize.LARGE ; } else { return null ; } }
private static int clamp ( int n , int my , int child ) { if ( ( my >= child ) || ( n < NUMBER_CONSTANT ) ) { return NUMBER_CONSTANT ; } if ( ( my + n ) > child ) { return child - my ; } return n ; }
protected void socketSetOption ( int opt , java.lang.Object val ) throws java.net.SocketException { try { socketSetOption0 ( opt , val ) ; } catch ( java.net.SocketException se ) { if ( ( ( socket ) == null ) || ( ! ( socket . isConnected () ) ) ) throw se ; } }
@ java.lang.Override public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { if ( ( declaredType . getSourceInfo () ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return; } session . getFileDependencies () . addMappingBetweenJavaFileAndType ( declaredType . getSourceInfo () . getFileName () , declaredType ) ; }
public com.android.jack.dx.dex.file.FieldIdItem intern ( com.android.jack.dx.rop.cst.CstFieldRef field ) { assert field != null ; throwIfPrepared () ; com.android.jack.dx.dex.file.FieldIdItem result = fieldIds . get ( field ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.FieldIdItem ( field ) ; fieldIds . put ( field , result ) ; } return result ; }
@ org.junit.Test public void canForgetNetworkConfigInClientMode ( ) throws java.lang.Exception { when ( mWifiConfigManager . removeNetwork ( eq ( NUMBER_CONSTANT ) , anyInt () ) ) . thenReturn ( true ) ; addNetworkAndVerifySuccess () ; mWsm . sendMessage ( WifiManager.FORGET_NETWORK , NUMBER_CONSTANT , com.android.server.wifi.WifiStateMachineTest.MANAGED_PROFILE_UID ) ; mLooper . dispatchAll () ; verify ( mWifiConfigManager ) . removeNetwork ( anyInt () , anyInt () ) ; }
@ org.jetbrains.annotations.NotNull @ java.lang.Override public java.util.Collection < ? extends com.intellij.ide.util.treeView.AbstractTreeNode > getChildren () { com.intellij.ide.scratch.RootType rootType = getValue () ; com.intellij.psi.PsiDirectory directory = getDirectory () ; if ( directory == null ) return java.util.Collections . emptyList () ; return new com.intellij.ide.scratch.ScratchProjectViewPane.MyPsiNode ( directory . getProject () , rootType , directory ) . getChildren () ; }
private void doFollowReferencesTestImpl ( Main.A root , int stopAfter , int followSet , java.lang.Object asRoot , Main.Verifier v , java.lang.String additionalEnabled ) { java.lang.String [] lines = Main . followReferences ( heapFilter , klass , root , stopAfter , followSet , asRoot ) ; v . process ( lines , additionalEnabled , ( ( ( heapFilter ) != NUMBER_CONSTANT ) || ( ( klass ) != null ) ) ) ; }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_vector s = new com.android.rs.test.ScriptC_vector ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; if ( ! ( initializeGlobals ( s ) ) ) { failTest () ; } else { s . invoke_vector_test () ; pRS . finish () ; waitForMessage () ; } s . destroy () ; pRS . destroy () ; }
public static void runTest ( ) throws java.lang.Exception { Transform t = new Transform () ; java.lang.reflect.Method hi = Transform . class . getMethod ( STRING_CONSTANT ) ; java.lang.reflect.Method bye = Transform . class . getMethod ( STRING_CONSTANT ) ; hi . invoke ( t ) ; t . sayHi () ; bye . invoke ( t ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { switch ( which ) { case android.content.DialogInterface.BUTTON_POSITIVE : mOppManager . enableBluetooth () ; mOppManager.mSendingFlag = true ; android.widget.Toast . makeText ( this , getString ( R.string.enabling_progress_content ) , Toast.LENGTH_SHORT ) . show () ; android.content.Intent in = new android.content.Intent ( this , com.android.bluetooth.opp.BluetoothOppBtEnablingActivity . class ) ; in . setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; this . startActivity ( in ) ; finish () ; break; case android.content.DialogInterface.BUTTON_NEGATIVE : finish () ; break; } }
private void showPbapDialog ( int id ) { final com.android.internal.app.AlertController.AlertParams p = mAlertParams ; switch ( id ) { case com.android.bluetooth.pbap.BluetoothPbapActivity.DIALOG_YES_NO_AUTH : p.mTitle = getString ( R.string.pbap_session_key_dialog_header ) ; p.mView = createView ( com.android.bluetooth.pbap.BluetoothPbapActivity.DIALOG_YES_NO_AUTH ) ; p.mPositiveButtonText = getString ( android.R.string.ok ) ; p.mPositiveButtonListener = this ; p.mNegativeButtonText = getString ( android.R.string.cancel ) ; p.mNegativeButtonListener = this ; setupAlert () ; mOkButton = mAlert . getButton ( DialogInterface.BUTTON_POSITIVE ) ; mOkButton . setEnabled ( false ) ; break; default: break; } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest @ android.test.FlakyTest @ org.junit.Ignore public void testSendImsGmsTest ( ) throws java.lang.Exception { switchImsSmsFormat ( PhoneConstants.PHONE_TYPE_GSM ) ; mImsSmsDispatcher . sendText ( STRING_CONSTANT , STRING_CONSTANT , com.android.internal.telephony.TAG , null , null , null , null , false , ( - NUMBER_CONSTANT ) , false , ( - NUMBER_CONSTANT ) ) ; org.mockito.Mockito . verify ( mSimulatedCommandsVerifier ) . sendImsGsmSms ( org.mockito.Mockito . eq ( STRING_CONSTANT ) , org.mockito.Mockito . eq ( STRING_CONSTANT ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Mockito . eq ( NUMBER_CONSTANT ) , org.mockito.Matchers . any ( android.os.Message . class ) ) ; }
public void simRefresh ( int indicationType , android.hardware.radio.V1_0.SimRefreshResult refreshResult ) { mRil . processIndication ( indicationType ) ; com.android.internal.telephony.uicc.IccRefreshResponse response = new com.android.internal.telephony.uicc.IccRefreshResponse () ; response.refreshResult = refreshResult.type ; response.efId = refreshResult.efId ; response.aid = refreshResult.aid ; if ( RIL.RILJ_LOGD ) mRil . unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_SIM_REFRESH , response ) ; mRil.mIccRefreshRegistrants . notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
@ java.lang.Override protected void setUp () { mNm . setInterruptionFilter ( NotificationManager.INTERRUPTION_FILTER_PRIORITY ) ; android.app.NotificationManager.Policy policy = mNm . getNotificationPolicy () ; policy = new android.app.NotificationManager.Policy ( ( ( policy.priorityCategories ) | ( NotificationManager.Policy.PRIORITY_CATEGORY_MESSAGES ) ) , policy.priorityCallSenders , NotificationManager.Policy.PRIORITY_SENDERS_STARRED ) ; mNm . setNotificationPolicy ( policy ) ; createChannels () ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , false ) ; status = READY ; }
@ java.lang.Override public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( STRING_CONSTANT + device ) ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return android.bluetooth.BluetoothInputHost.STATE_DISCONNECTED ; } return service . getConnectionState ( device ) ; }
public void updateBounds ( final com.intellij.ui.BalloonImpl balloon ) { if ( ( ( balloon.myLayeredPane ) == null ) || ( ( balloon.myComp ) == null ) ) return; final java.awt.Rectangle bounds = getUpdatedBounds ( balloon.myLayeredPane . getSize () , balloon.myForcedBounds , balloon.myComp . getPreferredSize () , balloon.myShowPointer , balloon.myTargetPoint , balloon.myContainerInsets ) ; final java.awt.Point point = getShiftedPoint ( bounds . getLocation () , ( - ( balloon . getShadowBorderSize () ) ) ) ; bounds . setLocation ( point ) ; balloon.myComp . _setBounds ( bounds ) ; }
private synchronized void loadStrings ( java.lang.String tzCanonicalID ) { if ( ( tzCanonicalID == null ) || ( ( tzCanonicalID . length () ) == NUMBER_CONSTANT ) ) { return; } loadTimeZoneNames ( tzCanonicalID ) ; java.util.Set < java.lang.String > mzIDs = getAvailableMetaZoneIDs ( tzCanonicalID ) ; for ( java.lang.String mzID : mzIDs ) { loadMetaZoneNames ( mzID ) ; } }
private void assertSocketClosed ( java.io.FileDescriptor fd , java.lang.String host ) throws java.lang.Exception { try { assertTrue ( fd . valid () ) ; sendRequest ( fd , host ) ; fail ( STRING_CONSTANT ) ; } catch ( android.system.ErrnoException expected ) { assertEquals ( com.android.cts.net.hostside.ECONNABORTED , expected.errno ) ; assertTrue ( fd . valid () ) ; } finally { android.system.Os . close ( fd ) ; } }
@ java.lang.Override public boolean cancelDiscovery () { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . cancelDiscovery () ; }
private void markConnectionFailed ( android.bluetooth.BluetoothSocket s ) { if ( com.android.bluetooth.opp.BluetoothOppTransfer.V ) { android.util.Log . v ( com.android.bluetooth.opp.BluetoothOppTransfer.TAG , ( STRING_CONSTANT + s ) ) ; } try { if ( s != null ) { s . close () ; } } catch ( java.io.IOException e ) { if ( com.android.bluetooth.opp.BluetoothOppTransfer.V ) { android.util.Log . e ( com.android.bluetooth.opp.BluetoothOppTransfer.TAG , STRING_CONSTANT ) ; } } mSessionHandler . obtainMessage ( com.android.bluetooth.opp.BluetoothOppTransfer.TRANSPORT_ERROR ) . sendToTarget () ; return; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testGetNetworkOperator ( ) throws java.lang.Exception { com.android.server.telecom.Call mockCall = createForegroundCall () ; android.telecom.PhoneAccount fakePhoneAccount = makeQuickAccount ( STRING_CONSTANT , com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ; org.mockito.Mockito . when ( mMockPhoneAccountRegistrar . getPhoneAccountOfCurrentUser ( org.mockito.ArgumentMatchers . nullable ( android.telecom.PhoneAccountHandle . class ) ) ) . thenReturn ( fakePhoneAccount ) ; java.lang.String networkOperator = mBluetoothPhoneService.mBinder . getNetworkOperator () ; org.junit.Assert . assertEquals ( networkOperator , STRING_CONSTANT ) ; }
private void editMmsMessageItem ( com.android.mms.ui.MessageItem msgItem ) { com.android.mms.data.WorkingMessage newWorkingMessage = com.android.mms.data.WorkingMessage . load ( this , msgItem.mMessageUri ) ; if ( newWorkingMessage == null ) { return; } mWorkingMessage . discard () ; mWorkingMessage = newWorkingMessage ; mWorkingMessage . setConversation ( mConversation ) ; drawTopPanel ( false ) ; mWorkingMessage . setSubject ( msgItem.mSubject , false ) ; if ( mWorkingMessage . hasSubject () ) { showSubjectEditor ( true ) ; } }
public void setAbsoluteVolume ( int volume ) { if ( volume == ( mLocalVolume ) ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) { android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( STRING_CONSTANT + volume ) ) ; } return; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler ; if ( handler == null ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . d ( com.android.bluetooth.avrcp.Avrcp.TAG , STRING_CONSTANT ) ; return; } android.os.Message msg = handler . obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_SET_ABSOLUTE_VOLUME , volume , NUMBER_CONSTANT ) ; handler . sendMessage ( msg ) ; }
@ java.lang.Override public boolean matchesSafely ( java.util.Map < ? extends K , ? extends V > map ) { for ( java.util.Map.Entry < ? extends K , ? extends V > entry : map . entrySet () ) { if ( ( keyMatcher . matches ( entry . getKey () ) ) && ( valueMatcher . matches ( entry . getValue () ) ) ) { return true ; } } return false ; }
public void testRenderingMaxResolutionRemotely ( ) throws java.lang.Throwable { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution () ; if ( maxRes == null ) return; android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , ( ( ( STRING_CONSTANT + ( maxRes.first ) ) + STRING_CONSTANT ) + ( maxRes.second ) ) ) ; runTestRenderingInSeparateThread ( maxRes.first , maxRes.second , true , false ) ; }
private static void startTimer () { synchronized ( com.android.jack.server.Server.lockTimer ) { if ( ( com.android.jack.server.Server.timer ) != null ) { com.android.jack.server.Server . cancelTimer () ; } com.android.jack.server.Server.logger . log ( java.util.logging.Level.INFO , STRING_CONSTANT ) ; com.android.jack.server.Server.timer = new java.util.Timer ( STRING_CONSTANT ) ; assert ( com.android.jack.server.Server.timer ) != null ; com.android.jack.server.Server.timer . schedule ( new java.util.TimerTask () { @ java.lang.Override public void run () { com.android.jack.server.Server . shutdownFifo () ; com.android.jack.server.Server . cancelTimer () ; } } , com.android.jack.server.Server.timeout ) ; } }
private void createTypes ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage , @ javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap , @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration ) { if ( ( hasErrors ) || ( com.android.jack.ir.impl.JackIrBuilder . hasError ( typeDeclaration ) ) ) { hasErrors = true ; return; } com.android.jack.ir.impl.EcjSourceTypeLoader . createType ( refMap , enclosingPackage , typeDeclaration.binding , typeDeclaration , new com.android.sched.util.location.FileLocation ( new java.lang.String ( typeDeclaration.compilationResult.fileName ) ) ) ; if ( ( typeDeclaration.memberTypes ) != null ) { for ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes ) { createTypes ( enclosingPackage , refMap , memberType ) ; } } }
void registerClient ( java.util.UUID uuid , android.bluetooth.IBluetoothGattCallback callback ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , STRING_CONSTANT ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( STRING_CONSTANT + uuid ) ) ; mClientMap . add ( uuid , callback , this ) ; gattClientRegisterAppNative ( uuid . getLeastSignificantBits () , uuid . getMostSignificantBits () ) ; }
private void addRemoteExtra ( com.android.sdklib.repository.NoPreviewRevision revision , com.android.sdklib.repository.descriptors.IdDisplay vendor , java.lang.String path , java.lang.String name ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newExtra ( vendor , path , name , null , revision ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
private void checkSignalStrength ( java.lang.String [] parts ) { assertTrue ( ( ( parts.length ) >= NUMBER_CONSTANT ) ) ; android.dumpsys.cts.DumpsysHostTest . assertInteger ( parts [ NUMBER_CONSTANT ] ) ; android.dumpsys.cts.DumpsysHostTest . assertInteger ( parts [ NUMBER_CONSTANT ] ) ; android.dumpsys.cts.DumpsysHostTest . assertInteger ( parts [ NUMBER_CONSTANT ] ) ; android.dumpsys.cts.DumpsysHostTest . assertInteger ( parts [ NUMBER_CONSTANT ] ) ; android.dumpsys.cts.DumpsysHostTest . assertInteger ( parts [ NUMBER_CONSTANT ] ) ; }
public static org.conscrypt.OpenSSLECPointContext getInstance ( org.conscrypt.OpenSSLECGroupContext group , java.security.spec.ECPoint javaPoint ) { org.conscrypt.OpenSSLECPointContext point = new org.conscrypt.OpenSSLECPointContext ( group , new org.conscrypt.NativeRef.EC_POINT ( org.conscrypt.NativeCrypto . EC_POINT_new ( group . getNativeRef () ) ) ) ; org.conscrypt.NativeCrypto . EC_POINT_set_affine_coordinates ( group . getNativeRef () , point . getNativeRef () , javaPoint . getAffineX () . toByteArray () , javaPoint . getAffineY () . toByteArray () ) ; return point ; }
public void testRendering800x480RemotelyWith3Windows ( ) throws java.lang.Throwable { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution () ; if ( maxRes == null ) return; if ( ( ( maxRes.first ) >= NUMBER_CONSTANT ) && ( ( maxRes.second ) >= NUMBER_CONSTANT ) ) { runTestRenderingInSeparateThread ( NUMBER_CONSTANT , NUMBER_CONSTANT , true , true ) ; } else { android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; } }
private void loadPackages ( boolean useLocalCache , boolean overrideExisting ) { if ( ( mImpl.mSwtUpdaterData ) == null ) { return; } if ( mTreeColumnName . isDisposed () ) { return; } mTreeColumnName . setImage ( getImage ( PackagesPageIcons.ICON_SORT_BY_API ) ) ; mImpl . loadPackagesImpl ( useLocalCache , overrideExisting ) ; }
public void test_getChannel ( ) throws java.io.IOException { java.io.File tmpfile = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; tmpfile . deleteOnExit () ; try ( java.io.FileOutputStream fos = new java.io.FileOutputStream ( tmpfile ) ) { fos . write ( bytes ) ; fos . flush () ; } try ( java.io.FileOutputStream f = new java.io.FileOutputStream ( tmpfile , true ) ) { assertEquals ( NUMBER_CONSTANT , f . getChannel () . position () ) ; } }
public void add ( com.android.jack.dx.rop.annotation.NameValuePair pair ) { assert pair != null ; throwIfImmutable () ; com.android.jack.dx.rop.cst.CstString name = pair . getName () ; if ( ( elements . get ( name ) ) != null ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + name ) ) ; } elements . put ( name , pair ) ; }
@ java.lang.Override public void visitDocument ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Document document ) { org.w3c.dom.Element root = document . getDocumentElement () ; if ( ( root != null ) && ( root . getTagName () . equals ( com.android.tools.lint.detector.api.LintConstants.TAG_RESOURCES ) ) ) { context . report ( com.android.tools.lint.checks.WrongLocationDetector.ISSUE , root , context . getLocation ( root ) , STRING_CONSTANT , null ) ; } }
public com.google.gct.testing.GoogleCloudTestingPersistentConfiguration getPersistentConfiguration () { com.google.gct.testing.GoogleCloudTestingPersistentConfiguration persistentConfiguration = new com.google.gct.testing.GoogleCloudTestingPersistentConfiguration () ; persistentConfiguration.id = id ; persistentConfiguration.name = name ; persistentConfiguration.devices = getEnabledTypes ( deviceDimension ) ; persistentConfiguration.apiLevels = getEnabledTypes ( apiDimension ) ; persistentConfiguration.languages = getEnabledTypes ( languageDimension ) ; persistentConfiguration.orientations = getEnabledTypes ( orientationDimension ) ; return persistentConfiguration ; }
public void test_setTrafficClassI ( ) throws java.lang.Exception { int IPTOS_LOWCOST = NUMBER_CONSTANT ; int IPTOS_THROUGHPUT = NUMBER_CONSTANT ; try ( java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( NUMBER_CONSTANT ) ) { try { theSocket . setTrafficClass ( NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} try { theSocket . setTrafficClass ( ( - NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} theSocket . setTrafficClass ( IPTOS_LOWCOST ) ; theSocket . setTrafficClass ( IPTOS_THROUGHPUT ) ; } }
@ java.lang.Override public void onReceivedTouchIconUrl ( android.webkit.WebView view , java.lang.String url , boolean precomposed ) { final android.content.ContentResolver cr = mContext . getContentResolver () ; if ( precomposed && ( ( mTouchIconLoader ) != null ) ) { mTouchIconLoader . cancel ( false ) ; mTouchIconLoader = null ; } if ( ( mTouchIconLoader ) == null ) { mTouchIconLoader = new com.android.browser.DownloadTouchIcon ( this , cr , view ) ; mTouchIconLoader . execute ( url ) ; } }
private void addTestCase ( com.android.cts.verifier.ArrayTestListAdapter adapter , com.android.cts.verifier.p2p.testcase.TestCase testcase ) { android.content.Intent intent = new android.content.Intent ( this , getRequesterActivityClass () ) ; intent . putExtra ( TestCase.EXTRA_TEST_NAME , testcase . getTestId () ) ; adapter . add ( com.android.cts.verifier.TestListAdapter.TestListItem . newTest ( testcase . getTestName () , testcase . getTestId () , intent ) ) ; }
private com.googlecode.android_scripting.interpreter.InterpreterProcess removeProcess ( int port ) { com.googlecode.android_scripting.interpreter.InterpreterProcess process ; synchronized ( mProcessMap ) { process = mProcessMap . remove ( port ) ; if ( process == null ) { return null ; } ( mModCount ) ++ ; } if ( ! ( mHide ) ) { updateNotification ( ( ( process . getName () ) + STRING_CONSTANT ) ) ; } return process ; }
public void add ( java.net.URI uri , java.net.HttpCookie cookie ) { if ( cookie == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } lock . lock () ; try { addIndex ( uriIndex , getEffectiveURI ( uri ) , cookie ) ; } finally { lock . unlock () ; } }
public static com.android.incallui.incall.protocol.PrimaryInfo createEmptyPrimaryInfo () { return new com.android.incallui.incall.protocol.PrimaryInfo ( null , null , false , null , null , null , ContactPhotoType.DEFAULT_PLACEHOLDER , false , false , false , false , false , false , false , null , null , true , ( - NUMBER_CONSTANT ) ) ; }
public boolean enterIf ( com.google.common.util.concurrent.Monitor.Guard guard , long time , java.util.concurrent.TimeUnit unit ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException () ; } if ( ! ( enter ( time , unit ) ) ) { return false ; } boolean satisfied = false ; try { return satisfied = guard . isSatisfied () ; } finally { if ( ! satisfied ) { lock . unlock () ; } } }
boolean connectionDisconnected ( com.android.internal.telephony.gsm.GsmConnection conn ) { if ( ( mState ) != ( State.DISCONNECTED ) ) { boolean hasOnlyDisconnectedConnections = true ; for ( int i = NUMBER_CONSTANT , s = mConnections . size () ; i < s ; i ++ ) { if ( ( mConnections . get ( i ) . getState () ) != ( State.DISCONNECTED ) ) { hasOnlyDisconnectedConnections = false ; break; } } if ( hasOnlyDisconnectedConnections ) { mState = State.DISCONNECTED ; return true ; } } return false ; }
public void close () { if ( ! ( closed ) ) { closed = true ; ids = null ; byteOffsets = null ; rawUtcOffsetsCache = null ; cache . evictAll () ; if ( ( mappedFile ) != null ) { try { mappedFile . close () ; } catch ( android.system.ErrnoException ignored ) {} mappedFile = null ; } } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.statistics.BinaryOperationWithCst.visitor . accept ( method ) ; }
public void test_socket_accept_Nonblocking_Bound ( ) throws java.io.IOException { serverChannel . configureBlocking ( false ) ; serverChannel . bind ( null ) ; java.net.ServerSocket gotSocket = serverChannel . socket () ; try { gotSocket . accept () ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) {} serverChannel . close () ; try { gotSocket . accept () ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.channels.ClosedChannelException expected ) {} }
public void send ( byte [] buf , int off , int len ) throws java.io.IOException { try { recordLayer . send ( buf , off , len ) ; } catch ( org.bouncycastle.crypto.tls.TlsFatalAlert fatalAlert ) { recordLayer . fail ( fatalAlert . getAlertDescription () ) ; throw fatalAlert ; } catch ( java.io.IOException e ) { recordLayer . fail ( AlertDescription.internal_error ) ; throw e ; } catch ( java.lang.RuntimeException e ) { recordLayer . fail ( AlertDescription.internal_error ) ; throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.internal_error , e ) ; } }
private void deleteOldFilesFromJavaFiles ( @ javax.annotation.Nonnull java.lang.String javaFileName ) throws com.android.jack.incremental.IncrementalException { java.util.List < java.lang.String > deletedTypes = new java.util.ArrayList < java.lang.String > () ; for ( java.lang.String typeNameToRemove : fileDependencies . getTypeNames ( javaFileName ) ) { if ( ! ( deletedTypes . contains ( typeNameToRemove ) ) ) { deletedTypes . add ( typeNameToRemove ) ; com.android.sched.vfs.VPath vpath = new com.android.sched.vfs.VPath ( typeNameToRemove , CHAR_CONS ) ; deleteFile ( FileType.JAYCE , vpath ) ; deleteFile ( FileType.DEX , vpath ) ; } } }
public int hashCode () { if ( ( myhash ) == ( - NUMBER_CONSTANT ) ) { myhash = NUMBER_CONSTANT + ( ( party ) == null ? NUMBER_CONSTANT : party . hashCode () ) ; if ( ( assigner ) != null ) { myhash = ( NUMBER_CONSTANT * ( myhash ) ) + ( assigner . hashCode () ) ; } } return myhash ; }
public void deviceStatusChanged ( com.android.server.midi.MidiService.Device device , android.media.midi.MidiDeviceStatus status ) { if ( ! ( device . isUidAllowed ( mUid ) ) ) return; try { for ( android.media.midi.IMidiDeviceListener listener : mListeners . values () ) { listener . onDeviceStatusChanged ( status ) ; } } catch ( android.os.RemoteException e ) { android.util.Log . e ( com.android.server.midi.MidiService.TAG , STRING_CONSTANT , e ) ; } }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . invoke_fp_mad_test ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; }
private final synchronized void sendIntent ( boolean isUnplug ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_HEADSET_PLUG ) ; intent . addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY ) ; intent . putExtra ( STRING_CONSTANT , ( isUnplug ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ; intent . putExtra ( STRING_CONSTANT , mHeadsetName ) ; android.app.ActivityManagerNative . broadcastStickyIntent ( intent , null ) ; if ( isUnplug ) { intent = new android.content.Intent ( android.media.AudioManager.ACTION_AUDIO_BECOMING_NOISY ) ; mContext . sendBroadcast ( intent ) ; } }
public static void setExecutable ( java.io.File file , boolean executable ) throws java.io.IOException { if ( executable && ( ! ( file . setExecutable ( true , false ) ) ) ) { Runner.logger . error ( STRING_CONSTANT ) ; throw new java.io.IOException ( ( STRING_CONSTANT + file ) ) ; } }
@ org.junit.Test public void compareLibCoreStructure ( ) throws java.lang.Exception { com.android.jack.Options options = new com.android.jack.Options () ; options . addProperty ( Options.JAVA_SOURCE_VERSION . getName () , JavaVersion.JAVA_7 . toString () ) ; com.android.jack.TestTools . checkStructure ( options , null , null , null , null , com.android.jack.compile.androidtree.core.CoreCompilationTest.SOURCELIST , false , false , NUMBER_CONSTANT , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [] ) ( null ) ) ) ; }
private void displayPage ( int index ) { org.eclipse.swt.widgets.Composite page = mPages . get ( index ) ; if ( page != null ) { mStackLayout.topControl = page ; mPagesRootComposite . layout ( true ) ; if ( ( ! ( mInternalPageChange ) ) && ( ( mPageList ) != null ) ) { mInternalPageChange = true ; mPageList . setSelection ( index ) ; mInternalPageChange = false ; } if ( page instanceof com.android.sdkuilib.internal.repository.IPageListener ) { ( ( com.android.sdkuilib.internal.repository.IPageListener ) ( page ) ) . onPageSelected () ; } } }
@ java.lang.Override public boolean removeTask ( int taskId ) { synchronized ( this ) { enforceCallingPermission ( android.Manifest.permission.REMOVE_TASKS , STRING_CONSTANT ) ; long ident = android.os.Binder . clearCallingIdentity () ; try { return removeTaskByIdLocked ( taskId , true ) ; } finally { android.os.Binder . restoreCallingIdentity ( ident ) ; } } }
private void onSetInternalDataEnabled ( boolean enabled , android.os.Message onCompleteMsg ) { if ( com.android.internal.telephony.dataconnection.DcTracker.DBG ) log ( ( STRING_CONSTANT + enabled ) ) ; boolean sendOnComplete = true ; mDataEnabledSettings . setInternalDataEnabled ( enabled ) ; if ( enabled ) { log ( STRING_CONSTANT ) ; onTrySetupData ( Phone.REASON_DATA_ENABLED ) ; } else { sendOnComplete = false ; log ( STRING_CONSTANT ) ; cleanUpAllConnections ( Phone.REASON_DATA_DISABLED , onCompleteMsg ) ; } if ( sendOnComplete ) { if ( onCompleteMsg != null ) { onCompleteMsg . sendToTarget () ; } } }
private static boolean endsWith ( java.lang.String sentence , java.lang.String word , boolean allowPrefix , boolean allowSuffix ) { int index = com.android.tools.lint.checks.TextFieldDetector . indexOfWord ( sentence , word , allowPrefix , allowSuffix ) ; return ( index != ( - NUMBER_CONSTANT ) ) && ( index == ( ( sentence . length () ) - ( word . length () ) ) ) ; }
void setActiveDevice ( java.lang.String address ) { android.util.Log . i ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , ( STRING_CONSTANT + address ) ) ; android.bluetooth.BluetoothDevice d = android.bluetooth.BluetoothAdapter . getDefaultAdapter () . getRemoteDevice ( address ) ; if ( d == null ) { android.util.Log . wtfStack ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , ( STRING_CONSTANT + address ) ) ; } com.android.bluetooth.a2dp.A2dpService . getA2dpService () . setActiveDevice ( d ) ; }
public void systemReady () { try { int menuState = mWindowManager . getKeycodeState ( KeyEvent.KEYCODE_MENU ) ; android.util.Log . i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , ( STRING_CONSTANT + menuState ) ) ; if ( menuState > NUMBER_CONSTANT ) { android.app.ActivityManagerNative . getDefault () . enterSafeMode () ; } mKeyguardMediator . onSystemReady () ; android.os.SystemProperties . set ( STRING_CONSTANT , STRING_CONSTANT ) ; } catch ( android.os.RemoteException e ) {} }
@ org.junit.Test public void testCheckAccessLevel_isProfileOwner ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( true ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert . assertEquals ( NetworkStatsAccess.Level.USER , com.android.server.net.NetworkStatsAccess . checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull final com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed () ) ; putProperty ( fileType . buildPropertyName ( null ) , java.lang.String . valueOf ( true ) ) ; addFileType ( fileType ) ; return getSectionVFS ( fileType ) . getRootOutputVDir () . createOutputVFile ( buildFileVPath ( fileType , typePath ) ) ; }
public java.lang.String getPackageForToken ( android.os.IBinder token ) { synchronized ( this ) { int index = indexOfTokenLocked ( token ) ; if ( index >= NUMBER_CONSTANT ) { com.android.server.am.HistoryRecord r = ( ( com.android.server.am.HistoryRecord ) ( mHistory . get ( index ) ) ) ; return r.packageName ; } return null ; } }
@ java.lang.Override public java.nio.DoubleBuffer asDoubleBuffer () { int size = ( this . remaining () ) > > NUMBER_CONSTANT ; int off = position () ; return new java.nio.ByteBufferAsDoubleBuffer ( this , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , size , size , off , order () ) ; }
@ java.lang.Override public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [] negotiated = org.conscrypt.NativeCrypto . SSL_get0_alpn_selected ( ssl ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
public java.lang.String getDexCacheString ( com.android.dex.Dex dex , int dexStringIndex ) { java.lang.String s = dexCacheStrings [ dexStringIndex ] ; if ( s == null ) { s = dex . strings () . get ( dexStringIndex ) . intern () ; dexCacheStrings [ dexStringIndex ] = s ; } return s ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( getClass () ) != ( obj . getClass () ) ) { return false ; } com.android.ide.common.resources.configuration.ScreenHeightQualifier other = ( ( com.android.ide.common.resources.configuration.ScreenHeightQualifier ) ( obj ) ) ; if ( ( mValue ) != ( other.mValue ) ) { return false ; } return true ; }
static boolean phoneIsCdma () { boolean isCdma = false ; try { com.android.internal.telephony.ITelephony phone = ITelephony.Stub . asInterface ( android.os.ServiceManager . checkService ( STRING_CONSTANT ) ) ; if ( phone != null ) { isCdma = ( phone . getActivePhoneType () ) == ( android.telephony.TelephonyManager.PHONE_TYPE_CDMA ) ; } } catch ( android.os.RemoteException e ) { android.util.Log . w ( com.android.cellbroadcastreceiver.CellBroadcastReceiver.TAG , STRING_CONSTANT , e ) ; } return isCdma ; }
private android.bluetooth.BluetoothGattDescriptor getDescriptor () { android.bluetooth.BluetoothGattDescriptor descriptor = null ; android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) ; if ( characteristic != null ) { descriptor = characteristic . getDescriptor ( com.android.cts.verifier.bluetooth.BleServerService.DESCRIPTOR_UUID ) ; if ( descriptor == null ) { showMessage ( STRING_CONSTANT ) ; } } return descriptor ; }
public final void testGetDeviceStatus () { assertEquals ( DeviceStatus.EXISTS , dm . getDeviceStatus ( STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals ( DeviceStatus.EXISTS , dm . getDeviceStatus ( STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals ( DeviceStatus.MISSING , dm . getDeviceStatus ( STRING_CONSTANT , STRING_CONSTANT ) ) ; }
@ java.lang.Override public final int initialize ( int subscriptionId , final android.telephony.mbms.IMbmsDownloadManagerCallback callback ) throws android.os.RemoteException { return initialize ( subscriptionId , new android.telephony.mbms.MbmsDownloadManagerCallback () { @ java.lang.Override public void error ( int errorCode , java.lang.String message ) throws android.os.RemoteException { callback . error ( errorCode , message ) ; } @ java.lang.Override public void fileServicesUpdated ( java.util.List < android.telephony.mbms.FileServiceInfo > services ) throws android.os.RemoteException { callback . fileServicesUpdated ( services ) ; } @ java.lang.Override public void middlewareReady ( ) throws android.os.RemoteException { callback . middlewareReady () ; } } ) ; }
@ javax.annotation.Nonnull private com.android.jack.dx.rop.code.RegisterSpec getRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { com.android.jack.dx.rop.code.RegisterSpec regSpec ; if ( expr instanceof com.android.jack.ir.ast.JVariableRef ) { regSpec = ropReg . getRegisterSpec ( ( ( com.android.jack.ir.ast.JVariableRef ) ( expr ) ) ) ; } else { assert expr instanceof com.android.jack.ir.ast.JValueLiteral ; regSpec = ropReg . getOrCreateTmpRegister ( expr . getType () , false ) ; buildConstant ( regSpec , ( ( com.android.jack.ir.ast.JValueLiteral ) ( expr ) ) ) ; } return regSpec ; }
private void verifyRemovePasspointNetworkFromWifiConfigManager ( android.net.wifi.WifiConfiguration configuration ) throws java.lang.Exception { assertTrue ( mWifiConfigManager . removeNetwork ( configuration.networkId , com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID ) ) ; verify ( mWifiKeyStore , never () ) . removeKeys ( any ( android.net.wifi.WifiEnterpriseConfig . class ) ) ; verifyNetworkRemoveBroadcast ( configuration ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . write ( anyBoolean () ) ; }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_rstime s = new com.android.rs.test.ScriptC_rstime ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . setTimeZone ( STRING_CONSTANT ) ; s . invoke_test_rstime ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; }
@ java.lang.Override public void beforeCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { mApiDatabase = com.android.tools.lint.checks.ApiLookup . get ( context . getClient () ) ; if ( ( ( mApiDatabase ) == null ) && ( ! ( mWarnedMissingDb ) ) ) { mWarnedMissingDb = true ; context . report ( IssueRegistry.LINT_ERROR , com.android.tools.lint.detector.api.Location . create ( context.file ) , STRING_CONSTANT ) ; } }
@ java.lang.Override public void onSensorChanged ( android.hardware.SensorEvent event ) { clearText () ; float [] values = event.values ; logger . logMessage ( R.string.snsr_mag_measurement , values [ NUMBER_CONSTANT ] , values [ NUMBER_CONSTANT ] , values [ NUMBER_CONSTANT ] , android.hardware.cts.helpers.SensorCtsHelper . getMagnitude ( values ) ) ; }
@ java.lang.Override public java.net.Socket createSocket ( java.lang.String host , int port , java.net.InetAddress localHost , int localPort ) throws java.io.IOException , java.net.UnknownHostException { javax.net.ssl.SSLSocket socket = ( ( javax.net.ssl.SSLSocket ) ( mDelegate . createSocket ( host , port , localHost , localPort ) ) ) ; return configureSocket ( socket ) ; }
public void testBinarySearch_emptyCollection () { assertEquals ( ( - NUMBER_CONSTANT ) , java.util.Collections . binarySearch ( new java.util.ArrayList < java.lang.Integer > () , NUMBER_CONSTANT ) ) ; assertEquals ( ( - NUMBER_CONSTANT ) , java.util.Collections . binarySearch ( new java.util.ArrayList <> () , NUMBER_CONSTANT , java.lang.Integer : : compareTo ) ) ; }
private void addItem ( @ com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem item ) { synchronized ( com.android.ide.common.res2.AbstractResourceRepository.ITEM_MAP_LOCK ) { com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > map = getMap ( item . getType () ) ; if ( ! ( map . containsValue ( item ) ) ) { map . put ( item . getName () , item ) ; } } }
public boolean updateSourcePackages ( com.android.sdklib.internal.repository.SdkSource source , java.lang.Package [] newPackages ) { mVisitedSources . add ( source ) ; if ( source == null ) { return processLocals ( this , newPackages ) ; } else { return processSource ( this , source , newPackages ) ; } }
@ java.lang.Override protected void engineInit ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { final byte [] iv ; if ( params instanceof javax.crypto.spec.IvParameterSpec ) { javax.crypto.spec.IvParameterSpec ivParams = ( ( javax.crypto.spec.IvParameterSpec ) ( params ) ) ; iv = ivParams . getIV () ; } else { iv = null ; } engineInitInternal ( opmode , key , iv , random ) ; }
@ java.lang.Override public boolean canRunOn ( com.android.sdklib.IAndroidTarget target ) { if ( target == ( this ) ) { return true ; } if ( mLibraries . isEmpty () ) { return mBasePlatform . canRunOn ( target ) ; } else { if ( ( ! ( mVendor . equals ( target . getVendor () ) ) ) || ( ! ( mName . equals ( target . getName () ) ) ) ) { return false ; } return mBasePlatform . canRunOn ( target ) ; } }
public static boolean isVisualVoicemailEnabled ( android.telephony.TelephonyManager telephonyManager , android.telecom.PhoneAccountHandle handle ) { try { return ( ( boolean ) ( android.telephony.TelephonyManager . class . getMethod ( STRING_CONSTANT , android.telecom.PhoneAccountHandle . class ) . invoke ( telephonyManager , handle ) ) ) ; } catch ( java.lang.NoSuchMethodException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e ) { com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT , e ) ; } return false ; }
public com.android.ide.common.layoutlib.LayoutLibrary getLayoutLibrary () { com.android.sdklib.IAndroidTarget target = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () . getTarget ( mEditedFile . getProject () ) ; if ( target != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () . getTargetData ( target ) ; if ( data != null ) { return data . getLayoutLibrary () ; } } return null ; }
@ java.lang.Override public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation ( final int parameter , final java.lang.String desc , final boolean visible ) { org.objectweb.asm.AnnotationVisitor av ; av = mv . visitParameterAnnotation ( parameter , desc , visible ) ; if ( desc . equals ( STRING_CONSTANT ) ) { params . add ( parameter ) ; } return av ; }
private void handleRequestFocus ( com.android.server.telecom.ConnectionServiceFocusManager.FocusRequest focusRequest ) { if ( ( ( mCurrentFocus ) == null ) || ( mCurrentFocus . equals ( focusRequest.call . getConnectionServiceWrapper () ) ) ) { updateConnectionServiceFocus ( focusRequest.call . getConnectionServiceWrapper () ) ; updateCurrentFocusCall () ; onRequestFocusDone ( focusRequest ) ; } else { mCurrentFocus . connectionServiceFocusLost () ; mCurrentFocusRequest = focusRequest ; android.os.Message msg = mEventHandler . obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_RELEASE_FOCUS_TIMEOUT ) ; msg.obj = focusRequest ; mEventHandler . sendMessageDelayed ( msg , com.android.server.telecom.ConnectionServiceFocusManager.RELEASE_FOCUS_TIMEOUT_MS ) ; } }
public void test_write_$BII ( ) throws java.io.IOException { int length = compressToBytes ( testString ) ; try ( java.util.zip.InflaterOutputStream ios = new java.util.zip.InflaterOutputStream ( os ) ) { ios . write ( compressedBytes , NUMBER_CONSTANT , length ) ; java.lang.String result = new java.lang.String ( os . toByteArray () ) ; assertEquals ( testString , result ) ; } }
@ java.lang.Override public void onListenerConnected () { if ( com.android.systemui.statusbar.BaseStatusBar.DEBUG ) android.util.Log . d ( com.android.systemui.statusbar.BaseStatusBar.TAG , STRING_CONSTANT ) ; final android.service.notification.StatusBarNotification [] notifications = getActiveNotifications () ; final android.service.notification.NotificationListenerService.RankingMap currentRanking = getCurrentRanking () ; mHandler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { for ( android.service.notification.StatusBarNotification sbn : notifications ) { addNotification ( sbn , currentRanking , null ) ; } } } ) ; }
public void setSelected ( boolean selected ) { if ( ( ( ( mPrivateFlags ) & ( android.view.View.PFLAG_SELECTED ) ) != NUMBER_CONSTANT ) != selected ) { mPrivateFlags = ( ( mPrivateFlags ) & ( ~ ( android.view.View.PFLAG_SELECTED ) ) ) | ( selected ? android.view.View.PFLAG_SELECTED : NUMBER_CONSTANT ) ; if ( ! selected ) resetPressedState () ; invalidate ( true ) ; refreshDrawableState () ; dispatchSetSelected ( selected ) ; notifyViewAccessibilityStateChangedIfNeeded ( AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED ) ; } }
@ javax.annotation.Nonnull protected < DST extends com.android.sched.item.Component > java.util.Iterator < DST > adaptWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.AdapterSchedulable < T , DST > adapter , @ javax.annotation.Nonnull T data ) throws java.lang.Exception { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager . getManagedSchedulable ( adapter . getClass () ) ; com.android.sched.util.log.Event event = logAndTrace ( adapter , managedSchedulable , data ) ; try { return adapter . adapt ( data ) ; } finally { event . end () ; } }
public static java.util.Locale getLocale ( android.content.Context context ) { android.os.LocaleList localList = context . getResources () . getConfiguration () . getLocales () ; if ( ! ( localList . isEmpty () ) ) { return localList . get ( NUMBER_CONSTANT ) ; } return java.util.Locale . getDefault () ; }
@ org.jetbrains.annotations.Nullable protected final java.lang.Object getValue ( com.intellij.designer.model.Property property ) throws java.lang.Exception { int size = myContainers . size () ; if ( size == NUMBER_CONSTANT ) { return null ; } java.lang.Object value = property . getValue ( myContainers . get ( NUMBER_CONSTANT ) ) ; for ( int i = NUMBER_CONSTANT ; i < size ; i ++ ) { if ( ! ( com.intellij.openapi.util.Comparing . equal ( value , property . getValue ( myContainers . get ( i ) ) ) ) ) { return null ; } } return value ; }
public void export ( @ com.android.annotations.NonNull java.io.File output ) { if ( itemMap . isEmpty () ) { if ( output . exists () ) { output . delete () ; } } else if ( writeOutputFile ( output ) ) { writeStats () ; info ( ( STRING_CONSTANT + output ) ) ; } }
static java.nio.file.Path createAndRegisterLambdaDumpDirectory ( ) throws java.io.IOException { java.lang.String propertyValue = java.lang.System . getProperty ( com.google.devtools.build.android.desugar.LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY ) ; if ( propertyValue != null ) { java.nio.file.Path path = java.nio.file.Paths . get ( propertyValue ) ; com.google.common.base.Preconditions . checkState ( java.nio.file.Files . isDirectory ( path ) , STRING_CONSTANT , path ) ; return path ; } java.nio.file.Path dumpDirectory = java.nio.file.Files . createTempDirectory ( STRING_CONSTANT ) ; java.lang.System . setProperty ( com.google.devtools.build.android.desugar.LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory . toString () ) ; com.google.devtools.build.android.desugar.Desugar . deleteTreeOnExit ( dumpDirectory ) ; return dumpDirectory ; }
public void addRegistrationListener ( int serviceClass , com.android.ims.ImsConnectionStateListener listener ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable () ; if ( listener == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } try { com.android.ims.ImsManager.ImsRegistrationListenerProxy p = createRegistrationListenerProxy ( serviceClass , listener ) ; mRegistrationListeners . add ( p ) ; mImsServiceProxy . addRegistrationListener ( p ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
@ org.junit.Test public void testForceWrite ( ) throws java.lang.Exception { mWifiConfigStore . switchUserStoreAndRead ( mUserStore ) ; mWifiConfigStore . write ( true ) ; assertFalse ( mAlarmManager . isPending ( WifiConfigStore.BUFFERED_WRITE_ALARM_TAG ) ) ; assertTrue ( mSharedStore . isStoreWritten () ) ; assertTrue ( mUserStore . isStoreWritten () ) ; }
@ vogar.target.TestRunnerProperties ( testClass = vogar.target.junit4.SuiteTest . class ) @ org.junit.Test public void testRunner_SuiteTest ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule . createTestRunner () ; runner . run () ; expectedResults () . forTestClass ( vogar.target.junit4.SimpleTest3 . class ) . success ( STRING_CONSTANT ) . forTestClass ( vogar.target.junit4.SimpleTest2 . class ) . success ( STRING_CONSTANT ) . success ( STRING_CONSTANT ) . success ( STRING_CONSTANT ) . completedNormally () ; }
private static void reportRepeatedWord ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Node node , java.lang.String text , int lastWordBegin , int begin , int end ) { java.lang.String message = java.lang.String . format ( STRING_CONSTANT , text . substring ( begin , end ) ) ; com.android.tools.lint.detector.api.Location location = context . getLocation ( node , lastWordBegin , end ) ; context . report ( com.android.tools.lint.checks.TypoDetector.ISSUE , node , location , message ) ; }
@ org.junit.Test public void requestIconFile () { org.mockito.Mockito . when ( mWifiNative . requestIcon ( org.mockito.Matchers . eq ( com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID_STR ) , org.mockito.Matchers . eq ( com.android.server.wifi.hotspot2.PasspointEventHandlerTest.ICON_FILENAME ) ) ) . thenReturn ( true ) ; org.junit.Assert . assertTrue ( mHandler . requestIcon ( com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID , com.android.server.wifi.hotspot2.PasspointEventHandlerTest.ICON_FILENAME ) ) ; org.mockito.Mockito . when ( mWifiNative . requestIcon ( org.mockito.Matchers . eq ( com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID_STR ) , org.mockito.Matchers . eq ( com.android.server.wifi.hotspot2.PasspointEventHandlerTest.ICON_FILENAME ) ) ) . thenReturn ( false ) ; org.junit.Assert . assertFalse ( mHandler . requestIcon ( com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID , com.android.server.wifi.hotspot2.PasspointEventHandlerTest.ICON_FILENAME ) ) ; }
@ sun.reflect.CallerSensitive public static java.util.logging.Logger getAnonymousLogger ( java.lang.String resourceBundleName ) { java.util.logging.LogManager manager = java.util.logging.LogManager . getLogManager () ; manager . drainLoggerRefQueueBounded () ; java.util.logging.Logger result = new java.util.logging.Logger ( null , resourceBundleName , dalvik.system.VMStack . getStackClass1 () , manager , false ) ; result.anonymous = true ; java.util.logging.Logger root = manager . getLogger ( STRING_CONSTANT ) ; result . doSetParent ( root ) ; return result ; }
@ java.lang.Override public java.lang.String toString () { java.lang.String [] values = new java.lang.String [ getPlaceholderCount () ] ; for ( int i = NUMBER_CONSTANT ; i < ( values.length ) ; i ++ ) { values [ i ] = java.lang.String . format ( STRING_CONSTANT , i ) ; } return formatAndAppend ( new java.lang.StringBuilder () , null , values ) . toString () ; }
public void test_getFormats () { java.lang.String [] orgFormats = ( ( java.lang.String [] ) ( formats . clone () ) ) ; java.lang.String [] f = ( ( java.lang.String [] ) ( f1 . getFormats () ) ) ; assertTrue ( STRING_CONSTANT , ( f == ( formats ) ) ) ; f [ NUMBER_CONSTANT ] = STRING_CONSTANT ; assertTrue ( STRING_CONSTANT , ( f != orgFormats ) ) ; }
public void updateSubscriptionNickname ( int subscriptionId , java.lang.String nickname , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { getIEuiccController () . updateSubscriptionNickname ( subscriptionId , nickname , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
private java.lang.StringBuffer subformat ( java.lang.String pluralCount , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( style ) == ( NumberFormat.PLURALCURRENCYSTYLE ) ) { java.lang.String currencyPluralPattern = currencyPluralInfo . getCurrencyPluralPattern ( pluralCount ) ; if ( ( formatPattern . equals ( currencyPluralPattern ) ) == false ) { applyPatternWithoutExpandAffix ( currencyPluralPattern , false ) ; } } expandAffixAdjustWidth ( pluralCount ) ; return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; }
public void test_EVP_CIPHER_iv_length ( ) throws java.lang.Exception { int aes128ecb = org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_cipherbyname ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_CIPHER_iv_length ( aes128ecb ) ) ; int aes128cbc = org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_cipherbyname ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_CIPHER_iv_length ( aes128cbc ) ) ; }
public static android.support.v8.renderscript.ScriptIntrinsicColorMatrix create ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element e ) { if ( ! ( e . isCompatible ( android.support.v8.renderscript.Element . U8_4 ( rs ) ) ) ) { throw new android.support.v8.renderscript.RSIllegalArgumentException ( STRING_CONSTANT ) ; } int id = rs . nScriptIntrinsicCreate ( NUMBER_CONSTANT , e . getID ( rs ) ) ; return new android.support.v8.renderscript.ScriptIntrinsicColorMatrix ( id , rs ) ; }
void selectTheme ( java.lang.String theme ) { assert ( theme . startsWith ( com.android.ide.common.resources.ResourceResolver.PREFIX_STYLE ) ) || ( theme . startsWith ( com.android.ide.common.resources.ResourceResolver.PREFIX_ANDROID_STYLE ) ) : theme ; mThemeCombo . setData ( theme ) ; if ( theme != null ) { mThemeCombo . setText ( getThemeLabel ( theme , true ) ) ; } else { mThemeCombo . setText ( STRING_CONSTANT ) ; } resizeToolBar () ; }
protected void onScrollChanged ( int l , int t , int oldl , int oldt ) { if ( android.view.accessibility.AccessibilityManager . getInstance ( mContext ) . isEnabled () ) { postSendViewScrolledAccessibilityEventCallback () ; } mBackgroundSizeChanged = true ; final android.view.View.AttachInfo ai = mAttachInfo ; if ( ai != null ) { ai.mViewScrollChanged = true ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.uselessif.UselessIfChecker.UselessIfCheckerVisitor visitor = new com.android.jack.transformations.uselessif.UselessIfChecker.UselessIfCheckerVisitor () ; visitor . accept ( method ) ; }
private void showError ( final java.lang.String msg , final java.lang.Throwable t ) { mViewer . getShell () . getDisplay () . syncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { org.eclipse.core.runtime.Status s = new org.eclipse.core.runtime.Status ( org.eclipse.core.runtime.IStatus.ERROR , STRING_CONSTANT , msg , t ) ; org.eclipse.jface.dialogs.ErrorDialog . openError ( mViewer . getShell () , STRING_CONSTANT , STRING_CONSTANT , s ) ; } } ) ; }
@ java.lang.Override public void srcToExe ( @ javax.annotation.Nonnull java.io.File out , boolean zipFile , @ javax.annotation.Nonnull java.io.File . . . sources ) throws java.lang.Exception { try { srcToCommon ( sources ) ; if ( zipFile ) { jackOptions . setOutputZip ( out ) ; } else { jackOptions . setOutputDir ( out ) ; } java.lang.System . setOut ( outRedirectStream ) ; java.lang.System . setErr ( errRedirectStream ) ; com.android.jack.Jack . run ( jackOptions ) ; } finally { java.lang.System . setOut ( stdOut ) ; java.lang.System . setErr ( stdErr ) ; } }
public void sendMessage ( @ android.annotation.NonNull android.net.wifi.aware.PeerHandle peerHandle , int messageId , @ android.annotation.Nullable byte [] message , int retryCount ) { if ( mTerminated ) { android.util.Log . w ( android.net.wifi.aware.DiscoverySession.TAG , STRING_CONSTANT ) ; return; } android.net.wifi.aware.WifiAwareManager mgr = mMgr . get () ; if ( mgr == null ) { android.util.Log . w ( android.net.wifi.aware.DiscoverySession.TAG , STRING_CONSTANT ) ; return; } mgr . sendMessage ( mClientId , mSessionId , peerHandle , message , messageId , retryCount ) ; }
@ java.lang.Override public boolean addOrUpdatePasspointConfiguration ( android.net.wifi.hotspot2.PasspointConfiguration config ) { enforceChangePermission () ; mLog . trace ( STRING_CONSTANT ) . c ( android.os.Binder . getCallingUid () ) . flush () ; if ( ! ( mContext . getResources () . getBoolean ( com.android.internal.R.bool.config_wifi_hotspot2_enabled ) ) ) { throw new java.lang.UnsupportedOperationException ( STRING_CONSTANT ) ; } return mWifiStateMachine . syncAddOrUpdatePasspointConfig ( mWifiStateMachineChannel , config , android.os.Binder . getCallingUid () ) ; }
private void waitForObbActionCompletion ( final java.io.File file , final android.os.storage.cts.StorageManagerTest.ObbObserver observer , int expectedState ) { assertTrue ( STRING_CONSTANT , observer . waitForCompletion () ) ; assertTrue ( STRING_CONSTANT , mStorageManager . isObbMounted ( observer . getPath () ) ) ; assertEquals ( expectedState , observer . getState () ) ; }
private final void resetContext () { org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = new org.conscrypt.NativeRef.EVP_MD_CTX ( org.conscrypt.NativeCrypto . EVP_MD_CTX_create () ) ; if ( signing ) { enableDSASignatureNonceHardeningIfApplicable () ; org.conscrypt.NativeCrypto . EVP_SignInit ( ctxLocal , evpAlgorithm ) ; } else { org.conscrypt.NativeCrypto . EVP_VerifyInit ( ctxLocal , evpAlgorithm ) ; } this . ctx = ctxLocal ; }
public void test_missingRegisteredClass ( ) throws java.lang.Exception { try { java.util.ServiceLoader . load ( libcore.java.util.ServiceLoaderTestInterfaceMissingClass . class ) . iterator () . next () ; fail () ; } catch ( java.util.ServiceConfigurationError expected ) { assertTrue ( expected . toString () , ( ( expected . getCause () ) instanceof java.lang.ClassNotFoundException ) ) ; } }
public void testStageInstallWithErrorCode_missingTzDataFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer . stageInstallWithErrorCode ( stagedDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , NUMBER_CONSTANT ) . clearTzDataForTests () . buildUnvalidated () ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer . stageInstallWithErrorCode ( incompleteDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro () ; }
public void testPreloadDensity ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = getContext () . getResources () ; final int densityDpi = res . getConfiguration () . densityDpi ; try { testPreloadDensityInner ( res ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils . setResourcesDensity ( res , densityDpi ) ; } }
public void test_SSLSocketFactory_getSupportedCipherSuites () { javax.net.ssl.SSLSocketFactory sf = ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory . getDefault () ) ) ; java.lang.String [] cipherSuites = sf . getSupportedCipherSuites () ; libcore.java.security.StandardNames . assertValidCipherSuites ( cipherSuites ) ; assertNotSame ( cipherSuites , sf . getSupportedCipherSuites () ) ; }
@ java.lang.Override public void execute ( com.android.build.gradle.managed.SigningConfig signingConfig ) { try { signingConfig . setStoreFile ( com.android.ide.common.signing.KeystoreHelper . defaultDebugKeystoreLocation () ) ; signingConfig . setStorePassword ( DefaultSigningConfig.DEFAULT_PASSWORD ) ; signingConfig . setKeyAlias ( DefaultSigningConfig.DEFAULT_ALIAS ) ; signingConfig . setKeyPassword ( DefaultSigningConfig.DEFAULT_PASSWORD ) ; signingConfig . setStoreType ( java.security.KeyStore . getDefaultType () ) ; } catch ( com.android.prefs.AndroidLocation e ) { throw new java.lang.RuntimeException ( e ) ; } }
private static java.lang.Class getClassInstance ( java.lang.String cname ) throws java.lang.ClassNotFoundException { try { return java.lang.ClassLoader . getSystemClassLoader () . loadClass ( cname ) ; } catch ( java.lang.ClassNotFoundException ex ) { return java.lang.Thread . currentThread () . getContextClassLoader () . loadClass ( cname ) ; } }
public java.security.PublicKey getPublicKey ( ) throws java.security.NoSuchAlgorithmException { switch ( org.conscrypt.NativeCrypto . EVP_PKEY_type ( ctx ) ) { case NativeCrypto.EVP_PKEY_RSA : return new org.conscrypt.OpenSSLRSAPublicKey ( this ) ; case NativeCrypto.EVP_PKEY_DH : return new org.conscrypt.OpenSSLDHPublicKey ( this ) ; case NativeCrypto.EVP_PKEY_EC : return new org.conscrypt.OpenSSLECPublicKey ( this ) ; default: throw new java.security.NoSuchAlgorithmException ( STRING_CONSTANT ) ; } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testLogCallDirectionRejected () { org.mockito.Mockito . when ( mMockPhoneAccountRegistrar . getPhoneAccountUnchecked ( org.mockito.Matchers . any ( android.telecom.PhoneAccountHandle . class ) ) ) . thenReturn ( makeFakePhoneAccount ( mDefaultAccountHandle , com.android.server.telecom.tests.CallLogManagerTest.CURRENT_USER_ID ) ) ; com.android.server.telecom.Call fakeMissedCall = makeFakeCall ( DisconnectCause.REJECTED , false , true , NUMBER_CONSTANT , NUMBER_CONSTANT , com.android.server.telecom.tests.CallLogManagerTest.TEL_PHONEHANDLE , mDefaultAccountHandle , com.android.server.telecom.tests.CallLogManagerTest.NO_VIDEO_STATE , com.android.server.telecom.tests.CallLogManagerTest.POST_DIAL_STRING , com.android.server.telecom.tests.CallLogManagerTest.VIA_NUMBER_STRING , null ) ; mCallLogManager . onCallStateChanged ( fakeMissedCall , CallState.ACTIVE , CallState.DISCONNECTED ) ; android.content.ContentValues insertedValues = verifyInsertionWithCapture ( com.android.server.telecom.tests.CallLogManagerTest.CURRENT_USER_ID ) ; org.junit.Assert . assertEquals ( insertedValues . getAsInteger ( CallLog.Calls.TYPE ) , java.lang.Integer . valueOf ( Calls.REJECTED_TYPE ) ) ; }
public void test_useDelimiter_String () { s = new java.util.Scanner ( STRING_CONSTANT ) ; try { s . useDelimiter ( ( ( java.lang.String ) ( null ) ) ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} s = new java.util.Scanner ( STRING_CONSTANT ) ; s . useDelimiter ( STRING_CONSTANT ) ; assertEquals ( STRING_CONSTANT , s . delimiter () . toString () ) ; }
@ java.lang.Override protected boolean checkForClass ( @ com.android.annotations.NonNull java.lang.String expectedClassName ) throws com.android.ide.common.process.ProcessException , java.io.IOException { java.io.InputStream stream = getInputStream ( STRING_CONSTANT ) ; java.util.zip.ZipInputStream zis = new java.util.zip.ZipInputStream ( stream ) ; try { java.util.zip.ZipEntry zipEntry ; while ( ( zipEntry = zis . getNextEntry () ) != null ) { if ( expectedClassName . equals ( zipEntry . getName () ) ) { return true ; } } return false ; } finally { zis . close () ; } }
public void test_ConstructorLjava_net_InetAddressILjava_net_InetAddressI ( ) throws java.io.IOException { try ( java.net.ServerSocket server = new java.net.ServerSocket ( NUMBER_CONSTANT ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress . getLocalHost () , server . getLocalPort () , java.net.InetAddress . getLocalHost () , NUMBER_CONSTANT ) ) { assertNotSame ( STRING_CONSTANT , NUMBER_CONSTANT , client . getLocalPort () ) ; } }
public void test_EVP_SignInit ( ) throws java.lang.Exception { final int ctx = org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_SignInit ( STRING_CONSTANT ) ; assertTrue ( ( ctx != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_MD_CTX_destroy ( ctx ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_SignInit ( STRING_CONSTANT ) ; fail () ; } catch ( java.lang.RuntimeException expected ) {} }
public void notifySignalStrength () { if ( ( mSignalStrength ) == null ) { mSignalStrength = new android.telephony.SignalStrength ( NUMBER_CONSTANT , NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID ) ; } if ( ( mSignalStrengthRegistrant ) != null ) { mSignalStrengthRegistrant . notifyRegistrant ( new android.os.AsyncResult ( null , mSignalStrength , null ) ) ; } }
public void testNewInstanceString_CharArrayConstructor () { runTestNewInstanceString ( STRING_CONSTANT , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider () { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature () ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value charArrayValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; constructorArguments . add ( charArrayValue ) ; } } ) ; }
private static void initFormatStringsLocked () { android.content.res.Resources r = android.content.res.Resources . getSystem () ; android.content.res.Configuration cfg = r . getConfiguration () ; if ( ( ( android.text.format.DateUtils.sLastConfig ) == null ) || ( ! ( android.text.format.DateUtils.sLastConfig . equals ( cfg ) ) ) ) { android.text.format.DateUtils.sLastConfig = cfg ; android.text.format.DateUtils.sElapsedFormatMMSS = r . getString ( com.android.internal.R.string.elapsed_time_short_format_mm_ss ) ; android.text.format.DateUtils.sElapsedFormatHMMSS = r . getString ( com.android.internal.R.string.elapsed_time_short_format_h_mm_ss ) ; } }
@ java.lang.Override public android.net.wifi.nan.ConfigRequest createFromParcel ( android.os.Parcel in ) { boolean support5gBand = ( in . readInt () ) != NUMBER_CONSTANT ; int masterPreference = in . readInt () ; int clusterLow = in . readInt () ; int clusterHigh = in . readInt () ; return new android.net.wifi.nan.ConfigRequest ( support5gBand , masterPreference , clusterLow , clusterHigh ) ; }
@ javax.annotation.Nonnull public com.android.jack.dx.rop.code.Rop getCmpOperatorForFloatDouble ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBinaryOperator op , @ javax.annotation.Nonnull com.android.jack.dx.rop.type.Type type ) { assert ( type == ( com.android.jack.dx.rop.type.Type.FLOAT ) ) || ( type == ( com.android.jack.dx.rop.type.Type.DOUBLE ) ) ; switch ( op ) { case LTE : case LT : return com.android.jack.dx.rop.code.Rops . opCmpg ( type ) ; case GT : case GTE : case EQ : case NEQ : return com.android.jack.dx.rop.code.Rops . opCmpl ( type ) ; default: throw new java.lang.AssertionError ( ( ( STRING_CONSTANT + ( op . toString () ) ) + STRING_CONSTANT ) ) ; } }
private static byte [] readAsset ( android.content.Context context , java.lang.String filename ) { android.content.res.AssetManager assetManager = context . getAssets () ; java.io.InputStream ais ; try { ais = assetManager . open ( filename ) ; } catch ( java.io.IOException e ) { android.util.Log . e ( com.android.cts.verifier.audioquality.AudioAssets.TAG , ( STRING_CONSTANT + filename ) , e ) ; return null ; } byte [] buffer = com.android.cts.verifier.audioquality.Utils . readFile ( ais ) ; return buffer ; }
@ java.lang.Override public com.intellij.lang.annotation.Annotation createAnnotation ( @ org.jetbrains.annotations.NotNull com.intellij.lang.annotation.HighlightSeverity severity , @ org.jetbrains.annotations.NotNull com.intellij.openapi.util.TextRange range , @ org.jetbrains.annotations.Nullable java.lang.String message , @ org.jetbrains.annotations.Nullable java.lang.String tooltip ) { com.intellij.lang.annotation.Annotation annotation = new com.intellij.lang.annotation.Annotation ( range . getStartOffset () , range . getEndOffset () , severity , message , tooltip ) ; add ( annotation ) ; return annotation ; }
public static com.android.ide.common.resources.ResourceResolver create ( java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > projectResources , java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > frameworkResources , java.lang.String themeName , boolean isProjectTheme ) { com.android.ide.common.resources.ResourceResolver resolver = new com.android.ide.common.resources.ResourceResolver ( projectResources , frameworkResources , themeName , isProjectTheme ) ; resolver . computeStyleMaps () ; return resolver ; }
@ org.junit.BeforeClass public static void setUp ( ) throws java.lang.Exception { com.android.jack.Options options = new com.android.jack.Options () ; com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks () ; options . checkValidity ( hooks ) ; options . getConfigBuilder ( hooks ) . setDebug () ; com.android.sched.util.config.ThreadConfig . setConfig ( options . getConfig () ) ; }
public void setData ( com.android.hierarchyviewerlib.device.Window window , com.android.hierarchyviewerlib.device.ViewNode viewNode ) { synchronized ( this ) { if ( ( tree ) != null ) { tree.viewNode . dispose () ; } this . window = window ; if ( viewNode == null ) { tree = null ; } else { tree = new com.android.hierarchyviewerlib.ui.util.DrawableViewNode ( viewNode ) ; tree . setLeft () ; tree . placeRoot () ; } viewport = null ; zoom = NUMBER_CONSTANT ; selectedNode = null ; } notifyTreeChanged () ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp ( getClass () . getSimpleName () ) ; mCarrierServicesSmsFilterUT = new com.android.internal.telephony.CarrierServicesSmsFilter ( mContext , mPhone , new byte [] [] { com.android.internal.telephony.CarrierServicesSmsFilterTest.SMS_PDU } , NUMBER_CONSTANT , null , mFilterCallback , getClass () . getSimpleName () ) ; }
public void testRenderingMaxResolutionLocally ( ) throws java.lang.Throwable { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution () ; if ( maxRes == null ) return; android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , ( ( ( STRING_CONSTANT + ( maxRes.first ) ) + STRING_CONSTANT ) + ( maxRes.second ) ) ) ; runTestRenderingInSeparateThread ( maxRes.first , maxRes.second , false , false ) ; }
@ java.lang.Override public java.util.Collection < com.android.tools.idea.wizard.WizardPath > createWizardPaths ( @ org.jetbrains.annotations.NotNull com.android.tools.idea.wizard.NewModuleWizardState wizardState , @ org.jetbrains.annotations.NotNull com.android.tools.idea.wizard.TemplateWizardStep.UpdateListener updateListener , @ org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.Nullable javax.swing.Icon sidePanelIcon , @ org.jetbrains.annotations.NotNull com.intellij.openapi.Disposable disposable ) { if ( project == null ) { return java.util.Collections . emptyList () ; } return java.util.Collections . < com.android.tools.idea.wizard.WizardPath > singleton ( new com.google.gct.idea.appengine.wizard.BackendWizardPath ( project , wizardState , updateListener , sidePanelIcon ) ) ; }
@ java.lang.Override public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.AssertionTransformer.Visitor visitor = new com.android.jack.transformations.AssertionTransformer.Visitor ( method . getEnclosingType () ) ; visitor . accept ( method ) ; }
public void test_accept_SOTIMEOUT ( ) throws java.io.IOException { final int SO_TIMEOUT = NUMBER_CONSTANT ; java.nio.channels.ServerSocketChannel sc = java.nio.channels.ServerSocketChannel . open () ; try { sc . socket () . bind ( null ) ; sc . configureBlocking ( false ) ; java.net.ServerSocket ss = sc . socket () ; ss . setSoTimeout ( SO_TIMEOUT ) ; java.nio.channels.SocketChannel client = sc . accept () ; assertNull ( client ) ; int soTimeout = ss . getSoTimeout () ; assertEquals ( SO_TIMEOUT , soTimeout ) ; } finally { sc . close () ; } }
@ java.lang.Override public void onAvailable ( android.net.Network network ) { android.net.NetworkCapabilities networkCapabilities = mConnectivityManager . getNetworkCapabilities ( network ) ; if ( com.android.systemui.statusbar.policy.SecurityControllerImpl.DEBUG ) android.util.Log . d ( com.android.systemui.statusbar.policy.SecurityControllerImpl.TAG , ( ( ( STRING_CONSTANT + ( network.netId ) ) + STRING_CONSTANT ) + networkCapabilities ) ) ; if ( ( networkCapabilities != null ) && ( networkCapabilities . hasTransport ( NetworkCapabilities.TRANSPORT_VPN ) ) ) { setCurrentNetid ( network.netId ) ; } }
void getFolderItemsNowPlaying ( byte [] bdaddr , com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj , @ android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController ) { if ( mediaController == null ) { android.util.Log . e ( com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG , STRING_CONSTANT ) ; mMediaInterface . folderItemsRsp ( bdaddr , AvrcpConstants.RSP_NO_AVBL_PLAY , null ) ; return; } java.util.List < android.media.session.MediaSession.QueueItem > items = getNowPlayingList ( mediaController ) ; getFolderItemsFilterAttr ( bdaddr , reqObj , items , AvrcpConstants.BTRC_SCOPE_NOW_PLAYING , reqObj.mStartItem , reqObj.mEndItem , mediaController ) ; }
public void testLength ( ) throws java.io.IOException { mMemoryFile = new android.os.MemoryFile ( STRING_CONSTANT , NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , mMemoryFile . length () ) ; mMemoryFile = new android.os.MemoryFile ( STRING_CONSTANT , NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , mMemoryFile . length () ) ; mMemoryFile = new android.os.MemoryFile ( STRING_CONSTANT , NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , mMemoryFile . length () ) ; try { mMemoryFile = new android.os.MemoryFile ( STRING_CONSTANT , ( - NUMBER_CONSTANT ) ) ; fail () ; } catch ( java.io.IOException expected ) {} }
@ java.lang.Override public android.bluetooth.BluetoothDevice getClient () { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log . d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( STRING_CONSTANT + ( mService . getRemoteDevice () ) ) ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) { return null ; } return service . getRemoteDevice () ; }
public void run ( final com.android.cts.TestDevice device ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException { mTestStop = false ; java.util.Iterator < com.android.cts.Test > tests = getTests () . iterator () ; while ( ( tests . hasNext () ) && ( ! ( mTestStop ) ) ) { mCurrentTest = tests . next () ; if ( mCurrentTest . getResult () . isNotExecuted () ) { mCurrentTest . run ( device ) ; } } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testProcessChldReleaseActiveRinging ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall () ; com.android.server.telecom.Call ringingCall = createRingingCall () ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_RELEASEACTIVE_ACCEPTHELD ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . disconnectCall ( org.mockito.Matchers . eq ( activeCall ) ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . answerCall ( org.mockito.Matchers . eq ( ringingCall ) , org.mockito.Matchers . any ( int . class ) ) ; org.junit.Assert . assertEquals ( didProcess , true ) ; }
public boolean isAssistedDialed () { if ( ( getIntentExtras () ) != null ) { if ( ( ( getIntentExtras () . getBoolean ( TelephonyManagerCompat.USE_ASSISTED_DIALING , false ) ) && ( ( getAssistedDialingExtras () ) != null ) ) && ( ( android.os.Build.VERSION.SDK_INT ) <= ( com.android.dialer.assisteddialing.ConcreteCreator.BUILD_CODE_CEILING ) ) ) { return true ; } } return false ; }
private int [] coordArrayListToArray ( java.util.ArrayList < com.example.android.snake.SnakeView.Coordinate > cvec ) { int [] rawArray = new int [ ( cvec . size () ) * NUMBER_CONSTANT ] ; int i = NUMBER_CONSTANT ; for ( com.example.android.snake.SnakeView.Coordinate c : cvec ) { rawArray [ ( i ++ ) ] = c.x ; rawArray [ ( i ++ ) ] = c.y ; } return rawArray ; }
@ android.annotation.NonNull public java.lang.String [] getLockTaskPackages ( @ android.annotation.NonNull android.content.ComponentName admin ) { throwIfParentInstance ( STRING_CONSTANT ) ; if ( ( mService ) != null ) { try { return mService . getLockTaskPackages ( admin ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } } return new java.lang.String [ NUMBER_CONSTANT ] ; }
private java.lang.String loadText ( android.content.pm.PackageItemInfo pii , int res , java.lang.CharSequence nonLocalized ) { if ( nonLocalized != null ) { return nonLocalized . toString () ; } if ( res != NUMBER_CONSTANT ) { android.content.res.Resources r = getResources ( pii ) ; if ( r != null ) { try { return r . getString ( res ) ; } catch ( android.content.res.Resources e ) {} } } return null ; }
public void test_getOOBInline ( ) throws java.lang.Exception { try ( java.net.Socket theSocket = new java.net.Socket () ) { theSocket . setOOBInline ( true ) ; assertTrue ( STRING_CONSTANT , theSocket . getOOBInline () ) ; theSocket . setOOBInline ( false ) ; assertFalse ( STRING_CONSTANT , theSocket . getOOBInline () ) ; theSocket . setOOBInline ( false ) ; assertFalse ( STRING_CONSTANT , theSocket . getOOBInline () ) ; } }
public android.drm.DrmConvertedStatus convertData ( int convertId , byte [] inputData ) { if ( ( null == inputData ) || ( NUMBER_CONSTANT >= ( inputData.length ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return _convertData ( mUniqueId , convertId , inputData ) ; }
@ java.lang.Override protected void computeResult () { org.eclipse.jface.viewers.TreePath treeSelection = getSelection () ; if ( treeSelection != null ) { if ( ( treeSelection . getSegmentCount () ) == NUMBER_CONSTANT ) { com.android.resources.ResourceType resourceType = ( ( com.android.resources.ResourceType ) ( treeSelection . getFirstSegment () ) ) ; com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem resourceItem = ( ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem ) ( treeSelection . getLastSegment () ) ) ; mCurrentResource = resourceItem . getXmlString ( resourceType , false ) ; } } }
@ android.annotation.RequiresPermission ( value = Manifest.permission.BLUETOOTH ) public boolean fetchUuidsWithSdp () { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( ( service == null ) || ( ! ( isBluetoothEnabled () ) ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; return false ; } try { return service . fetchRemoteUuids ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT , e ) ; } return false ; }
@ java.lang.SuppressWarnings ( value = { STRING_CONSTANT , STRING_CONSTANT } ) public java.lang.Object getValue () { if ( allowMultiple ) { java.util.List result = new java.util.ArrayList <> () ; com.google.common.collect.ListMultimap realValue = ( ( com.google.common.collect.ListMultimap ) ( value ) ) ; for ( com.google.devtools.common.options.OptionPriority priority : com.google.devtools.common.options.OptionPriority . values () ) { if ( realValue . containsKey ( priority ) ) { result . addAll ( realValue . get ( priority ) ) ; } } return result ; } return value ; }
private java.lang.String doLoad ( java.lang.String name , java.lang.ClassLoader loader ) { java.lang.String ldLibraryPath = null ; java.lang.String dexPath = null ; if ( loader == null ) { ldLibraryPath = java.lang.System . getProperty ( STRING_CONSTANT ) ; } else if ( loader instanceof dalvik.system.BaseDexClassLoader ) { dalvik.system.BaseDexClassLoader dexClassLoader = ( ( dalvik.system.BaseDexClassLoader ) ( loader ) ) ; ldLibraryPath = dexClassLoader . getLdLibraryPath () ; } synchronized ( this ) { return java.lang.Runtime . nativeLoad ( name , loader , ldLibraryPath ) ; } }
public java.lang.Object get ( int index ) throws org.json.JSONException { try { java.lang.Object value = values . get ( index ) ; if ( value == null ) { throw new org.json.JSONException ( ( ( STRING_CONSTANT + index ) + STRING_CONSTANT ) ) ; } return value ; } catch ( java.lang.IndexOutOfBoundsException e ) { throw new org.json.JSONException ( ( ( ( ( STRING_CONSTANT + index ) + STRING_CONSTANT ) + ( values . size () ) ) + STRING_CONSTANT ) , e ) ; } }
@ java.lang.Override protected int getOutputSizeForFinal ( int inputLen ) { if ( ( modeBlockSize ) == NUMBER_CONSTANT ) { return inputLen ; } else { final int buffered = org.conscrypt.NativeCrypto . get_EVP_CIPHER_CTX_buf_len ( cipherCtx ) ; if ( ( getPadding () ) == ( org.conscrypt.OpenSSLCipher.Padding.NOPADDING ) ) { return buffered + inputLen ; } else { final int totalLen = ( inputLen + buffered ) + ( modeBlockSize ) ; return totalLen - ( totalLen % ( modeBlockSize ) ) ; } } }
private static javax.crypto.Cipher createAesCipher ( int opmode ) { try { final javax.crypto.Cipher c = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; c . init ( opmode , libcore.javax.crypto.CipherTest.AES_128_KEY ) ; return c ; } catch ( java.lang.Exception e ) { fail ( ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; return null ; } }
@ java.lang.Override public void visit ( java.util.Map < sun.security.ssl.SessionId , sun.security.ssl.SSLSessionImpl > map ) { ids = new java.util.Vector <> ( map . size () ) ; for ( sun.security.ssl.SessionId key : map . keySet () ) { sun.security.ssl.SSLSessionImpl value = map . get ( key ) ; if ( ! ( isTimedout ( value ) ) ) { ids . addElement ( key . getId () ) ; } } }
public void registerForRecordsLoaded ( android.os.Handler h , int what , java.lang.Object obj ) { if ( mDestroyed . get () ) { return; } android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; recordsLoadedRegistrants . add ( r ) ; if ( ( ( recordsToLoad ) == NUMBER_CONSTANT ) && ( ( recordsRequested ) == true ) ) { r . notifyRegistrant ( new android.os.AsyncResult ( null , null , null ) ) ; } }
@ org.junit.Test public void canBeTetheredAsUsb ( ) throws java.lang.Exception { initStateMachine ( android.net.ConnectivityManager.TETHERING_USB ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito . inOrder ( mTetherHelper , mNMService ) ; inOrder . verify ( mNMService ) . getInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder . verify ( mNMService ) . setInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mInterfaceConfiguration ) ; inOrder . verify ( mNMService ) . tetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder . verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito . verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
public static boolean isSyntheticCloseResourceMethod ( int access , java.lang.String name , java.lang.String desc ) { return ( ( com.google.devtools.build.android.desugar.BitFlags . isSet ( access , ( ( org.objectweb.asm.Opcodes.ACC_SYNTHETIC ) | ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) ) ) && ( com.google.devtools.build.android.desugar.TryWithResourcesRewriter.CLOSE_RESOURCE_METHOD_NAME . equals ( name ) ) ) && ( com.google.devtools.build.android.desugar.TryWithResourcesRewriter.CLOSE_RESOURCE_METHOD_DESC . equals ( desc ) ) ; }
public static void check ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.DirectoryLocation location ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { if ( ! ( file . exists () ) ) { throw new com.android.sched.util.file.NoSuchFileException ( location ) ; } if ( ! ( file . isDirectory () ) ) { throw new com.android.sched.util.file.NotDirectoryException ( location ) ; } }
private static boolean isShutdownRequest ( org.apache.http.HttpRequest request ) { org.apache.http.RequestLine requestLine = request . getRequestLine () ; java.lang.String uriString = requestLine . getUri () ; java.net.URI uri = java.net.URI . create ( uriString ) ; java.lang.String path = uri . getPath () ; return path . equals ( android.webkit.cts.CtsTestServer.SHUTDOWN_PREFIX ) ; }
public static void main ( java.lang.String [] args ) throws java.lang.Exception { try { java.lang.Class < > c = java.lang.Class . forName ( STRING_CONSTANT ) ; java.lang.reflect.Method m = c . getMethod ( STRING_CONSTANT ) ; m . invoke ( null ) ; } catch ( java.lang.VerifyError e ) { return; } throw new java.lang.Error ( STRING_CONSTANT ) ; }
public void testToXml3 ( ) throws java.lang.Exception { java.lang.String xml = STRING_CONSTANT + ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; org.w3c.dom.Document doc = com.android.utils.XmlUtilsTest . parse ( xml ) ; java.lang.String formatted = com.android.utils.XmlUtils . toXml ( doc ) ; assertEquals ( xml , formatted ) ; }
@ java.lang.Override public java.util.Collection < T > eval ( @ javax.annotation.Nonnull com.android.jack.preprocessor.Scope scope , @ javax.annotation.Nonnull com.android.jack.preprocessor.Context context ) { java.util.Collection < T > collection = on . eval ( scope , context ) ; if ( ! ( collection . isEmpty () ) ) { context . addAnnotate ( toAdd , collection ) ; } return collection ; }
@ java.lang.Override @ com.android.annotations.NonNull public com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( getPosition ( node , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ) ; if ( pos != null ) { return com.android.tools.lint.detector.api.Location . create ( context.file , pos , ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( pos . getEnd () ) ) ) ; } return com.android.tools.lint.detector.api.Location . create ( context.file ) ; }
@ java.lang.Override public java.lang.String getVisualVoicemailPackageName ( java.lang.String callingPackage , int subId ) { mAppOps . checkPackage ( android.os.Binder . getCallingUid () , callingPackage ) ; if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } return com.android.phone.vvm.RemoteVvmTaskManager . getRemotePackage ( mPhone . getContext () , subId ) . getPackageName () ; }
@ com.android.annotations.Nullable private java.lang.String getSelectedLayout () { com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionManager selectionManager = mCanvas . getSelectionManager () ; for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionItem item : selectionManager . getSelections () ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode node = item . getViewInfo () . getUiViewNode () ; if ( node != null ) { java.lang.String layout = com.android.ide.eclipse.adt.internal.editors.layout.gle2.FragmentMenu . getFragmentLayout ( node . getXmlNode () ) ; if ( layout != null ) { return layout ; } } } return null ; }
public boolean hasSourceUrl ( com.android.sdklib.internal.repository.SdkSource source ) { synchronized ( mSources ) { for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources . values () ) { for ( com.android.sdklib.internal.repository.SdkSource s : list ) { if ( s . equals ( source ) ) { return true ; } } } return false ; } }
public void testCountingProxy ( ) throws java.lang.Exception { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy . start () ; java.net.Socket socket = new java.net.Socket () ; try { try { java.net.Proxy proxy = countingProxy . asProxy () ; assertEquals ( java.net.Proxy.Type.HTTP , proxy . type () ) ; java.net.SocketAddress address = proxy . address () ; socket . connect ( address , NUMBER_CONSTANT ) ; } finally { int numConnections = countingProxy . shutdownAndGetConnectionCount () ; assertEquals ( NUMBER_CONSTANT , numConnections ) ; } } finally { socket . close () ; } }
public void testPreloadDensity ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = getContext () . getResources () ; final int densityDpi = res . getConfiguration () . densityDpi ; try { testPreloadDensityInner ( res , densityDpi ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils . setResourcesDensity ( res , densityDpi ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer putDouble ( double x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putDouble ( ix ( nextPutIndex ( SizeOf.DOUBLE ) ) , x ) ; return this ; }
@ org.junit.Test public void testGetCoreInterfaceRewritingTarget_staticInterfaceMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( STRING_CONSTANT ) , java.lang.Thread . currentThread () . getContextClassLoader () , null , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , com.google.common.collect.ImmutableList . of () ) ; com.google.common.truth.Truth . assertThat ( support . getCoreInterfaceRewritingTarget ( Opcodes.INVOKESTATIC , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , true ) ) . isEqualTo ( java.util.Comparator . class ) ; }
@ java.lang.Override public boolean setName ( java.lang.String name ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . setName ( name ) ; }
private static android.net.Uri getContactUri ( com.android.dialer.searchfragment.common.SearchCursor cursor ) { java.lang.String lookupKey = cursor . getString ( Projections.LOOKUP_KEY ) ; return android.net.Uri . withAppendedPath ( Contacts.CONTENT_LOOKUP_URI , lookupKey ) . buildUpon () . appendQueryParameter ( ContactsContract.DIRECTORY_PARAM_KEY , java.lang.String . valueOf ( cursor . getDirectoryId () ) ) . build () ; }
@ com.android.annotations.Nullable public static javax.xml.validation.Schema getSchema ( int version ) throws org.xml.sax.SAXException { java.io.InputStream xsdStream = com.android.dvlib.DeviceSchema . getXsdStream ( version ) ; if ( xsdStream == null ) { return null ; } javax.xml.validation.SchemaFactory factory = javax.xml.validation.SchemaFactory . newInstance ( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI ) ; javax.xml.validation.Schema schema = factory . newSchema ( new javax.xml.transform.stream.StreamSource ( xsdStream ) ) ; return schema ; }
public int checkRightsStatus ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) || ( ! ( DrmStore.Action . isValid ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _checkRightsStatus ( mUniqueId , path , action ) ; }
@ com.android.annotations.NonNull private com.android.builder.model.AndroidProject getSingleModel ( boolean emulateStudio_1_0 , boolean assertNoSyncIssues ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection () ; try { java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > modelMap = buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction () , emulateStudio_1_0 , null , null ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , modelMap . size () ) ; com.android.builder.model.AndroidProject androidProject = modelMap . get ( STRING_CONSTANT ) ; if ( assertNoSyncIssues ) { com.android.build.gradle.integration.common.fixture.GradleTestProject . assertNoSyncIssues ( androidProject ) ; } return androidProject ; } finally { connection . close () ; } }
public void lconst ( final long cst ) { if ( ( cst == NUMBER_CONSTANT ) || ( cst == NUMBER_CONSTANT ) ) { mv . visitInsn ( ( ( org.objectweb.asm.Opcodes.LCONST_0 ) + ( ( int ) ( cst ) ) ) ) ; } else { mv . visitLdcInsn ( cst ) ; } }
public void append ( @ javax.annotation.Nonnull com.android.sched.scheduler.ManagedRunnable runner ) { assert runner != null ; assert runner . getRunOn () . equals ( runOn ) : ( ( ( STRING_CONSTANT + ( runner . getRunOn () . toString () ) ) + STRING_CONSTANT ) + ( runOn . toString () ) ) + STRING_CONSTANT ; plan . appendStep ( new com.android.sched.scheduler.PlanStep ( runner ) ) ; }
public static void main ( java.lang.String [] args ) { UnresolvedClass c = new UnresolvedClass () ; Main . callInvokeUnresolvedStatic () ; Main . callInvokeUnresolvedVirtual ( c ) ; Main . callInvokeUnresolvedInterface ( c ) ; Main . callInvokeUnresolvedSuper ( new Main () ) ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { java.lang.String pkgForDebug = ( ( mContext ) != null ) ? mContext . getPackageName () : STRING_CONSTANT ; try { java.lang.Boolean notifyNow = true ; android.telephony.TelephonyManager.sRegistry . listen ( pkgForDebug , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) {} catch ( java.lang.NullPointerException ex ) {} }
@ java.lang.Override public boolean showContextMenuForChild ( android.view.View originalView ) { java.lang.Integer groupPosition = ( ( java.lang.Integer ) ( originalView . getTag ( R.id.group_position ) ) ) ; java.lang.Integer childPosition = ( ( java.lang.Integer ) ( originalView . getTag ( R.id.child_position ) ) ) ; if ( ( groupPosition == null ) || ( childPosition == null ) ) { return false ; } mContextMenuInfo = new com.android.browser.view.BookmarkExpandableView.BookmarkContextMenuInfo ( childPosition , groupPosition ) ; if ( ( getParent () ) != null ) { getParent () . showContextMenuForChild ( this ) ; } return true ; }
private boolean isIPv6ULA () { if ( ( address ) instanceof java.net.Inet6Address ) { byte [] bytes = address . getAddress () ; return ( ( bytes [ NUMBER_CONSTANT ] ) & ( ( byte ) ( NUMBER_CONSTANT ) ) ) == ( ( byte ) ( NUMBER_CONSTANT ) ) ; } return false ; }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , java.lang.String [] args ) { if ( ( ( benchmarkClassChecker ) != null ) && ( benchmarkClassChecker . isBenchmark ( klass ) ) ) { return new vogar.target.CaliperTargetRunner ( monitor , klass , args ) ; } else { return null ; } }
@ org.junit.Test public void testConcreteClassRedeclaresBridges ( ) throws java.lang.Exception { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( com.google.devtools.build.android.desugar.Java7CompatibilityTest.Impl . class . getName () ) ; com.google.devtools.build.android.desugar.Java7CompatibilityTest.ClassTester tester = new com.google.devtools.build.android.desugar.Java7CompatibilityTest.ClassTester () ; reader . accept ( new com.google.devtools.build.android.desugar.Java7Compatibility ( tester , null , null ) , NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( tester.version ) . isEqualTo ( Opcodes.V1_7 ) ; com.google.common.truth.Truth . assertThat ( tester.bridgeMethods ) . isEqualTo ( NUMBER_CONSTANT ) ; }
@ java.lang.Override public void onStarted ( android.preference.Preference preference , boolean reading ) { if ( DBG ) dumpState () ; android.util.Log . i ( com.android.phone.TimeConsumingPreferenceActivity.LOG_TAG , ( ( ( STRING_CONSTANT + ( preference . getKey () ) ) + STRING_CONSTANT ) + reading ) ) ; mBusyList . add ( preference . getKey () ) ; if ( mIsForeground ) { if ( reading ) { showDialog ( com.android.phone.TimeConsumingPreferenceActivity.BUSY_READING_DIALOG ) ; } else { showDialog ( com.android.phone.TimeConsumingPreferenceActivity.BUSY_SAVING_DIALOG ) ; } } }
@ java.lang.Override public android.bluetooth.BluetoothHeadsetClientCall createFromParcel ( android.os.Parcel in ) { return new android.bluetooth.BluetoothHeadsetClientCall ( ( ( android.bluetooth.BluetoothDevice ) ( in . readParcelable ( null ) ) ) , in . readInt () , java.util.UUID . fromString ( in . readString () ) , in . readInt () , in . readString () , ( ( in . readInt () ) == NUMBER_CONSTANT ) , ( ( in . readInt () ) == NUMBER_CONSTANT ) , ( ( in . readInt () ) == NUMBER_CONSTANT ) ) ; }
public static java.lang.Long getLong ( java.lang.String nm , java.lang.Long val ) { java.lang.String v = null ; try { v = java.lang.System . getProperty ( nm ) ; } catch ( java.lang.IllegalArgumentException | java.lang.NullPointerException e ) {} if ( v != null ) { try { return java.lang.Long . decode ( v ) ; } catch ( java.lang.NumberFormatException e ) {} } return val ; }
private void checkStatements ( java.lang.Object expected , java.lang.String statementsSource , final java.lang.String targetVariable ) { @ org.intellij.lang.annotations.Language ( value = STRING_CONSTANT ) java.lang.String source = ( ( ( ( ( ( ( STRING_CONSTANT + ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) + statementsSource ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ; check ( expected , source , targetVariable ) ; }
public synchronized void requestToSetMode ( com.android.cts.verifier.sensors.base.ISensorTestStateContainer stateContainer , boolean modeOn ) throws java.lang.InterruptedException { if ( ( ! ( isSettingAvailable () ) ) || ( ! ( isSettingUiAvailable ( stateContainer ) ) ) ) { return; } trySetMode ( stateContainer , modeOn ) ; if ( ( getCurrentSettingMode () ) != modeOn ) { java.lang.String message = stateContainer . getString ( R.string.snsr_setting_mode_not_set , getSettingName ( stateContainer ) , modeOn ) ; throw new java.lang.IllegalStateException ( message ) ; } }
@ java.lang.Override public boolean onCreateActionMode ( android.view.ActionMode mode , android.view.Menu menu ) { if ( ( activity ) != null ) { announceforAccessibility ( activity . getCurrentFocus () , activity . getString ( R.string.description_entering_bulk_action_mode ) ) ; } actionMode = mode ; android.view.MenuInflater inflater = mode . getMenuInflater () ; inflater . inflate ( R.menu.actionbar_delete , menu ) ; multiSelectRemoveView . showMultiSelectRemoveView ( true ) ; actionModeStateChangedListener . onActionModeStateChanged ( mode , true ) ; return true ; }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_copy_test s = new com.android.rs.test.ScriptC_copy_test ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; testFloat2 ( pRS , s ) ; testFloat3 ( pRS , s ) ; testFloat4 ( pRS , s ) ; s . invoke_sendResult ( true ) ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; }
public static void writeUint32 ( long i , byte [] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > > NUMBER_CONSTANT ) ) ; buf [ ( offset + NUMBER_CONSTANT ) ] = ( ( byte ) ( i > > > NUMBER_CONSTANT ) ) ; buf [ ( offset + NUMBER_CONSTANT ) ] = ( ( byte ) ( i > > > NUMBER_CONSTANT ) ) ; buf [ ( offset + NUMBER_CONSTANT ) ] = ( ( byte ) ( i ) ) ; }
@ java.lang.Override public android.os.ParcelUuid [] getUuids () { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return new android.os.ParcelUuid [ NUMBER_CONSTANT ] ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return new android.os.ParcelUuid [ NUMBER_CONSTANT ] ; } return service . getUuids () ; }
@ java.lang.Override public final java.nio.ByteBuffer putShort ( int i , short x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putShort ( ix ( checkIndex ( i , SizeOf.SHORT ) ) , x ) ; return this ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendText () { mCdmaSmsDispatcher . sendText ( STRING_CONSTANT , STRING_CONSTANT , com.android.internal.telephony.cdma.TAG , null , null , null , null , false , ( - NUMBER_CONSTANT ) , false , ( - NUMBER_CONSTANT ) ) ; verify ( mSimulatedCommandsVerifier ) . sendCdmaSms ( any ( byte [] . class ) , any ( android.os.Message . class ) ) ; }
public void registerContentObservers () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( com.android.dialer.configprovider.ConfigProviderBindings . get ( appContext ) . getBoolean ( STRING_CONSTANT , false ) ) { for ( com.android.dialer.calllog.datasources.CallLogDataSource dataSource : dataSources . getDataSourcesIncludingSystemCallLog () ) { dataSource . registerContentObservers ( appContext ) ; } } else { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; } }
private void switchUser ( int userId ) { if ( ( mCurrentUserId ) == userId ) { return; } mBlacklist . switchUser ( userId ) ; mLocationHandler . removeMessages ( com.android.server.LocationManagerService.MSG_LOCATION_CHANGED ) ; synchronized ( mLock ) { mLastLocation . clear () ; mLastLocationCoarseInterval . clear () ; for ( com.android.server.location.LocationProviderInterface p : mProviders ) { updateProviderListenersLocked ( p . getName () , false , mCurrentUserId ) ; } mCurrentUserId = userId ; updateProvidersLocked () ; } }
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { com.android.bluetooth.gatt.ScanClient client = ( ( com.android.bluetooth.gatt.ScanClient ) ( msg.obj ) ) ; switch ( msg.what ) { case com.android.bluetooth.gatt.ScanManager.MSG_START_BLE_SCAN : handleStartScan ( client ) ; break; case com.android.bluetooth.gatt.ScanManager.MSG_STOP_BLE_SCAN : handleStopScan ( client ) ; break; case com.android.bluetooth.gatt.ScanManager.MSG_FLUSH_BATCH_RESULTS : handleFlushBatchResults ( client ) ; break; case com.android.bluetooth.gatt.ScanManager.MSG_SCAN_TIMEOUT : mScanNative . regularScanTimeout ( client ) ; break; default: android.util.Log . e ( com.android.bluetooth.gatt.ScanManager.TAG , ( STRING_CONSTANT + ( msg.what ) ) ) ; } }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( android.bluetooth.BluetoothDevice device , com.android.bluetooth.a2dp.A2dpService a2dpService , com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface , android.os.Looper looper ) { android.util.Log . i ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , ( STRING_CONSTANT + device ) ) ; com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( device , a2dpService , a2dpNativeInterface , looper ) ; a2dpSm . start () ; return a2dpSm ; }
private android.view.animation.Animation loadAnimation ( int userId , java.lang.String packageName , int resId ) { int anim = NUMBER_CONSTANT ; android.content.Context context = mContext ; if ( resId >= NUMBER_CONSTANT ) { com.android.server.AttributeCache.Entry ent = getCachedAnimations ( userId , packageName , resId ) ; if ( ent != null ) { context = ent.context ; anim = resId ; } } if ( anim != NUMBER_CONSTANT ) { return android.view.animation.AnimationUtils . loadAnimation ( context , anim ) ; } return null ; }
@ java.lang.Override public void startDtmf ( char c ) { if ( ! ( ( android.telephony.PhoneNumberUtils . is12Key ( c ) ) || ( ( c >= CHAR_CONS ) && ( c <= CHAR_CONS ) ) ) ) { loge ( ( ( STRING_CONSTANT + c ) + STRING_CONSTANT ) ) ; } else { mCT . startDtmf ( c ) ; } }
private static void checkReceiver ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( ( com.android.tools.lint.checks.SecurityDetector . getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector . isUnprotectedByPermission ( element ) ) ) && ( ! ( com.android.tools.lint.checks.SecurityDetector . isStandardReceiver ( element ) ) ) ) { context . report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_RECEIVER , element , context . getLocation ( element ) , STRING_CONSTANT ) ; } }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.intellij.openapi.project.Project project = PlatformDataKeys.PROJECT . getData ( e . getDataContext () ) ; if ( project == null ) { project = com.intellij.openapi.project.ProjectManager . getInstance () . getDefaultProject () ; } com.intellij.openapi.options.ShowSettingsUtil . getInstance () . editConfigurable ( project , OptionsEditorDialog.DIMENSION_KEY , com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable . getInstance ( project ) ) ; }
private void addRemoteTool ( com.android.sdklib.repository.FullRevision revision , com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newTool ( revision , minPlatformToolsRev ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
@ java.lang.Override public int getRemoteClass ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return NUMBER_CONSTANT ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return NUMBER_CONSTANT ; } return service . getRemoteClass ( device ) ; }
private com.android.jack.ir.ast.JExpression generateGetClassFollowedByConstant ( com.android.jack.ir.ast.JExpression result , com.android.jack.ir.ast.JLiteral cst ) { assert result instanceof com.android.jack.ir.ast.JFieldRef ; com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = result . getSourceInfo () ; com.android.jack.ir.ast.JMethodCall getClassCall = com.android.jack.ir.impl.JackIrBuilder . makeMethodCall ( sourceInfo , ( ( com.android.jack.ir.ast.JFieldRef ) ( result ) ) . getInstance () , javaLangObject , getGetClassMethod () ) ; return new com.android.jack.ir.ast.JMultiExpression ( sourceInfo , getClassCall , cst ) ; }
private void declineIncomingCall () { com.android.incallui.call.CallList callList = com.android.incallui.InCallPresenter . getInstance () . getCallList () ; if ( callList == null ) { com.android.incallui.StatusBarNotifier . clearAllCallNotifications () ; com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT ) ; } else { com.android.incallui.call.DialerCall call = callList . getIncomingCall () ; if ( call != null ) { call . reject ( false , null ) ; } } }
public void interrupt () { java.lang.VMThread vmt = this . vmThread ; if ( vmt != null ) { vmt . interrupt () ; } synchronized ( interruptActions ) { for ( int i = ( interruptActions . size () ) - NUMBER_CONSTANT ; i >= NUMBER_CONSTANT ; i -- ) { interruptActions . get ( i ) . run () ; } } }
@ java.lang.Override public void run () { final V value ; try { value = com.google.common.util.concurrent.Uninterruptibles . getUninterruptibly ( future ) ; } catch ( java.util.concurrent.ExecutionException e ) { callback . onFailure ( e . getCause () ) ; return; } catch ( java.lang.RuntimeException e ) { callback . onFailure ( e ) ; return; } catch ( java.lang.Error e ) { callback . onFailure ( e ) ; return; } callback . onSuccess ( value ) ; }
private int getOutputSize ( int inputLen ) { if ( ( modeBlockSize ) == NUMBER_CONSTANT ) { return inputLen ; } else { final int buffered = org.apache.harmony.xnet.provider.jsse.NativeCrypto . get_EVP_CIPHER_CTX_buf_len ( cipherCtx . getContext () ) ; if ( ( padding ) == ( org.apache.harmony.xnet.provider.jsse.OpenSSLCipher.Padding.NOPADDING ) ) { return buffered + inputLen ; } else { final int totalLen = ( inputLen + buffered ) + ( modeBlockSize ) ; return totalLen - ( totalLen % ( modeBlockSize ) ) ; } } }
private boolean initPacketSocket () { try { mPacketSock = android.system.Os . socket ( android.net.dhcp.AF_PACKET , android.net.dhcp.SOCK_RAW , android.net.dhcp.ETH_P_IP ) ; android.system.PacketSocketAddress addr = new android.system.PacketSocketAddress ( ( ( short ) ( ETH_P_IP ) ) , mIface.index ) ; android.system.Os . bind ( mPacketSock , addr ) ; android.net.NetworkUtils . attachDhcpFilter ( mPacketSock ) ; } catch ( java.net.SocketException | android.system.ErrnoException e ) { android.util.Log . e ( android.net.dhcp.DhcpClient.TAG , STRING_CONSTANT , e ) ; return false ; } return true ; }
@ java.lang.Override public boolean [] getKeyUsage () { final boolean [] kusage = org.apache.harmony.xnet.provider.jsse.NativeCrypto . get_X509_ex_kusage ( mContext ) ; if ( kusage == null ) { return null ; } if ( ( kusage.length ) >= NUMBER_CONSTANT ) { return kusage ; } final boolean [] resized = new boolean [ NUMBER_CONSTANT ] ; java.lang.System . arraycopy ( kusage , NUMBER_CONSTANT , resized , NUMBER_CONSTANT , kusage.length ) ; return resized ; }
public void outcomeStarted ( java.lang.String outcomeName ) { com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject () ; jsonObject . addProperty ( STRING_CONSTANT , outcomeName ) ; writer . print ( ( ( ( marker ) + ( gson . toJson ( jsonObject ) ) ) + STRING_CONSTANT ) ) ; }
@ java.lang.Override public void onMeasure ( final int widthMeasureSpec , final int heightMeasureSpec ) { mFactory . startYourEngines ( false ) ; if ( checkNeedsPost () ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable () { @ java.lang.Override public void run () { onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; } } ) ; return; } mAwContents . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; }
public static final java.lang.String getDefaultType () { java.lang.String cpvtype = java.security.AccessController . doPrivileged ( new java.security.PrivilegedAction < java.lang.String > () { public java.lang.String run () { return java.security.Security . getProperty ( java.security.cert.CertPathValidator.CPV_TYPE ) ; } } ) ; return cpvtype == null ? STRING_CONSTANT : cpvtype ; }
private void compileWithProfilesAndCheckFilter ( java.util.Set < android.cts.compilation.AdbRootDependentCompilationTest.ProfileLocation > profileLocations ) throws java.lang.Exception { for ( android.cts.compilation.AdbRootDependentCompilationTest.ProfileLocation profileLocation : profileLocations ) { writeProfile ( profileLocation ) ; } executeCompile ( false , STRING_CONSTANT ) ; java.lang.String compilerFilter = getCompilerFilter ( odexFilePath ) ; assertEquals ( STRING_CONSTANT , STRING_CONSTANT , compilerFilter ) ; }
private static java.lang.String fromHex ( java.lang.String hexPassword ) throws java.lang.IllegalArgumentException { if ( hexPassword == null ) { return null ; } final byte [] bytes = libcore.util.HexEncoding . decode ( hexPassword . toCharArray () , false ) ; return new java.lang.String ( bytes , java.nio.charset.StandardCharsets.UTF_8 ) ; }
private void checkTimeZoneParsingErrorIndex ( java.text.SimpleDateFormat dateFormat ) { java.text.ParsePosition pos = new java.text.ParsePosition ( NUMBER_CONSTANT ) ; java.util.Date parsed ; parsed = dateFormat . parse ( STRING_CONSTANT , pos ) ; assertNull ( parsed ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , pos . getErrorIndex () ) ; }
private org.mockito.ArgumentCaptor < android.location.CountryListener > verifyCountryIso ( android.location.CountryDetector mockDetector , java.lang.String resultIso ) { org.mockito.ArgumentCaptor < android.location.CountryListener > captor = org.mockito.ArgumentCaptor . forClass ( android.location.CountryListener . class ) ; org.mockito.Mockito . verify ( mockDetector ) . addCountryListener ( captor . capture () , org.mockito.Matchers . any ( android.os.Looper . class ) ) ; org.junit.Assert . assertEquals ( com.android.server.telecom.tests.CallLogManagerTest.TEST_ISO , resultIso ) ; return captor ; }
@ java.lang.Override public void onStateChange ( boolean state ) { synchronized ( mLock ) { android.util.Log . i ( mTag , ( STRING_CONSTANT + state ) ) ; mIsConnected = state ; if ( ! state ) { if ( ( mAccessControlEnforcer ) != null ) { mAccessControlEnforcer . reset () ; } } else { try { initializeAccessControl () ; } catch ( java.lang.Exception e ) {} mDefaultApplicationSelectedOnBasicChannel = true ; } } }
@ java.lang.Override protected void cleanup () { if ( com.android.bluetooth.a2dp.A2dpService.DBG ) { android.util.Log . d ( com.android.bluetooth.a2dp.A2dpService.TAG , STRING_CONSTANT ) ; } if ( ( mConnectionStateChangedReceiver ) != null ) { unregisterReceiver ( mConnectionStateChangedReceiver ) ; mConnectionStateChangedReceiver = null ; } if ( ( mStateMachine ) != null ) { mStateMachine . cleanup () ; mStateMachine = null ; } if ( ( mAvrcp ) != null ) { mAvrcp . cleanup () ; mAvrcp = null ; } com.android.bluetooth.a2dp.A2dpService . clearA2dpService () ; }
@ org.junit.Test public void testNetworkStatsWithSet ( ) throws java.lang.Exception { final android.net.NetworkStats stats = parseDetailedStats ( R.raw.xt_qtaguid_typical ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , stats . size () ) ; com.android.internal.net.NetworkStatsFactoryTest . assertStatsEntry ( stats , STRING_CONSTANT , NUMBER_CONSTANT , android.net.NetworkStats.SET_DEFAULT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; com.android.internal.net.NetworkStatsFactoryTest . assertStatsEntry ( stats , STRING_CONSTANT , NUMBER_CONSTANT , android.net.NetworkStats.SET_FOREGROUND , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testReplacedLayout ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > mergedMap = merger . getDataMap () ; java.util.List < com.android.ide.common.res2.ResourceItem > values = mergedMap . get ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , values . size () ) ; com.android.ide.common.res2.ResourceItem mainLayout = values . get ( NUMBER_CONSTANT ) ; com.android.ide.common.res2.ResourceFile sourceFile = mainLayout . getSource () ; assertTrue ( sourceFile . getFile () . getAbsolutePath () . endsWith ( com.android.ide.common.res2.ResourceMergerTest . getPlatformPath ( STRING_CONSTANT ) ) ) ; }
private static android.app.PendingIntent newVoicemailIntent ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable com.android.dialer.app.calllog.CallLogNotificationsQueryHelper.NewCall voicemail ) { android.content.Intent intent = com.android.dialer.app.MainComponent . getShowVoicemailIntent ( context ) ; if ( voicemail != null ) { intent . setData ( voicemail.voicemailUri ) ; } intent . putExtra ( DialtactsActivity.EXTRA_CLEAR_NEW_VOICEMAILS , true ) ; return android.app.PendingIntent . getActivity ( context , NUMBER_CONSTANT , intent , PendingIntent.FLAG_UPDATE_CURRENT ) ; }
static java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > populatedSet ( int n ) { java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > a = new java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > () ; assertTrue ( a . isEmpty () ) ; for ( int i = NUMBER_CONSTANT ; i < n ; i ++ ) a . add ( i ) ; assertEquals ( ( n == NUMBER_CONSTANT ) , a . isEmpty () ) ; assertEquals ( n , a . size () ) ; return a ; }
@ com.android.annotations.NonNull @ java.lang.Deprecated public static com.android.tools.lint.detector.api.Issue create ( @ com.android.annotations.NonNull java.lang.String id , @ com.android.annotations.NonNull java.lang.String briefDescription , @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ com.android.annotations.NonNull java.lang.String description , @ com.android.annotations.NonNull java.lang.String explanation , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Category category , int priority , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Implementation implementation ) { return new com.android.tools.lint.detector.api.Issue ( id , briefDescription , explanation , category , priority , severity , implementation ) ; }
@ java.lang.Override @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void saveProperties ( @ com.android.annotations.NonNull java.io.File file , @ com.android.annotations.NonNull java.util.Properties props , @ com.android.annotations.NonNull java.lang.String comments ) throws java.io.IOException { java.io.OutputStream fos = null ; try { fos = newFileOutputStream ( file ) ; props . store ( fos , comments ) ; } finally { com.google.common.io.Closeables . closeQuietly ( fos ) ; } }
public void initialize () { mEnableNewManualSelectNetworkUI = getContext () . getResources () . getBoolean ( com.android.internal.R.bool.config_enableNewAutoSelectNetworkUI ) ; mAutoSelect = ( ( android.preference.TwoStatePreference ) ( findPreference ( com.android.phone.NetworkOperators.BUTTON_AUTO_SELECT_KEY ) ) ) ; mChooseNetwork = findPreference ( com.android.phone.NetworkOperators.BUTTON_CHOOSE_NETWORK_KEY ) ; mNetworkSelect = ( ( com.android.phone.NetworkSelectListPreference ) ( findPreference ( com.android.phone.NetworkOperators.BUTTON_NETWORK_SELECT_KEY ) ) ) ; if ( mEnableNewManualSelectNetworkUI ) { removePreference ( mNetworkSelect ) ; } else { removePreference ( mChooseNetwork ) ; } mProgressDialog = new android.app.ProgressDialog ( getContext () ) ; }
private java.lang.CharSequence getDialerTos () { if ( ! ( isVoicemailTranscriptionEnabled () ) ) { return STRING_CONSTANT ; } if ( isVvm3 () ) { return context . getString ( R.string.dialer_terms_and_conditions_for_verizon_1_0 ) ; } else { java.lang.String learnMoreText = context . getString ( R.string.dialer_terms_and_conditions_learn_more ) ; return context . getString ( R.string.dialer_terms_and_conditions_1_0 , learnMoreText ) ; } }
public void visitProgramMethod ( proguard.shrink.ProgramClass programClass , proguard.shrink.ProgramMethod programMethod ) { if ( ( usageMarker . isUsed ( programMethod ) ) ^ ( printUnusedItems ) ) { printClassNameHeader () ; ps . print ( STRING_CONSTANT ) ; programMethod . attributesAccept ( programClass , this ) ; ps . println ( proguard.shrink.ClassUtil . externalFullMethodDescription ( programClass . getName () , programMethod . getAccessFlags () , programMethod . getName ( programClass ) , programMethod . getDescriptor ( programClass ) ) ) ; } }
public com.android.ide.common.api.Margins getInsets ( java.lang.String fqcn ) { if ( com.android.ide.eclipse.adt.internal.editors.layout.gre.ViewMetadataRepository.INSETS_SUPPORTED ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationChooser configComposite = getGraphicalEditor () . getConfigurationChooser () ; java.lang.String theme = configComposite . getThemeName () ; com.android.resources.Density density = configComposite . getConfiguration () . getDensity () ; return com.android.ide.eclipse.adt.internal.editors.layout.gre.ViewMetadataRepository . getInsets ( fqcn , density , theme ) ; } else { return null ; } }
@ android.annotation.SystemApi public void getDownloadableSubscriptionMetadata ( android.telephony.euicc.DownloadableSubscription subscription , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . getDownloadableSubscriptionMetadata ( subscription , mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [] data ) { boolean result = false ; if ( ( mService ) != null ) { try { result = mService . sendReport ( device , id , data ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothInputHost.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothInputHost.TAG , STRING_CONSTANT ) ; } return result ; }
private void addFolder ( com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources resources , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config , com.android.ide.eclipse.mock.FileMock [] memberList ) throws java.lang.Exception { java.lang.String folderName = config . getFolderName ( ResourceFolderType.LAYOUT ) ; com.android.ide.eclipse.mock.FolderMock folder = new com.android.ide.eclipse.mock.FolderMock ( folderName , memberList ) ; com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder resFolder = _addProjectResourceFolder ( resources , config , folder ) ; for ( com.android.ide.eclipse.mock.FileMock file : memberList ) { resFolder . addFile ( new com.android.ide.eclipse.adt.internal.resources.manager.SingleResourceFile ( new com.android.ide.eclipse.adt.io.IFileWrapper ( file ) , resFolder ) ) ; } }
@ java.lang.Override public UResource.TableSink getOrCreateTableSink ( android.icu.impl.UResource.Key key ) { if ( key . contentEquals ( STRING_CONSTANT ) ) { pastFutureIndex = NUMBER_CONSTANT ; } else if ( key . contentEquals ( STRING_CONSTANT ) ) { pastFutureIndex = NUMBER_CONSTANT ; } else { return null ; } if ( ( unit.relUnit ) == null ) { return null ; } return relativeTimeDetailSink ; }
private void handleSupplicantConnectionLoss ( boolean killSupplicant ) { if ( killSupplicant ) { mWifiMonitor . stopAllMonitoring () ; if ( ! ( mWifiNative . disableSupplicant () ) ) { loge ( STRING_CONSTANT ) ; } } mWifiNative . closeSupplicantConnection () ; sendSupplicantConnectionChangedBroadcast ( false ) ; setWifiState ( android.net.wifi.WifiManager.WIFI_STATE_DISABLED ) ; }
public void testStageInstallWithErrorCode_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro distro1 = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer . stageInstallWithErrorCode ( distro1 ) ) ; assertInstallDistroStaged ( distro1 ) ; com.android.timezone.distro.TimeZoneDistro distro2 = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.OLDER_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer . stageInstallWithErrorCode ( distro2 ) ) ; assertInstallDistroStaged ( distro1 ) ; assertNoInstalledDistro () ; }
@ java.lang.Override public void run () { try { java.io.File output = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; output . deleteOnExit () ; outputFiles [ ii ] = output ; com.android.builder.internal.compiler.PreDexCache . getCache () . preDexLibrary ( input , output , false , dexOptions , mBuildToolInfo , false , clr ) ; } catch ( java.lang.Exception ignored ) {} }
@ java.lang.Override public void onResizeEnd ( @ com.android.annotations.Nullable com.android.ide.common.api.DropFeedback feedback , @ com.android.annotations.NonNull com.android.ide.common.api.INode child , @ com.android.annotations.NonNull com.android.ide.common.api.INode parent , @ com.android.annotations.NonNull final com.android.ide.common.api.Rect newBounds ) { if ( feedback == null ) { return; } final com.android.ide.common.layout.relative.ResizeHandler state = ( ( com.android.ide.common.layout.relative.ResizeHandler ) ( feedback.userData ) ) ; child . editXml ( STRING_CONSTANT , new com.android.ide.common.api.INodeHandler () { @ java.lang.Override public void handle ( @ com.android.annotations.NonNull com.android.ide.common.api.INode n ) { state . removeCycles () ; state . applyConstraints ( n ) ; } } ) ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic , java.lang.String pkgName , java.lang.String instructionSet , int dexoptNeeded , boolean vmSafeMode , boolean debuggable , @ android.annotation.Nullable java.lang.String outputPath ) { return dexopt ( apkPath , uid , isPublic , pkgName , instructionSet , dexoptNeeded , vmSafeMode , debuggable , outputPath , true ) ; }
public static void test_Float_floatToRawIntBits () { java.lang.Float . floatToRawIntBits ( ( - NUMBER_CONSTANT ) ) ; junit.framework.Assert . assertEquals ( java.lang.Float . floatToRawIntBits ( ( - NUMBER_CONSTANT ) ) , - NUMBER_CONSTANT ) ; junit.framework.Assert . assertEquals ( java.lang.Float . floatToRawIntBits ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; junit.framework.Assert . assertEquals ( java.lang.Float . floatToRawIntBits ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; junit.framework.Assert . assertEquals ( java.lang.Float . floatToRawIntBits ( java.lang.Float.NaN ) , NUMBER_CONSTANT ) ; junit.framework.Assert . assertEquals ( java.lang.Float . floatToRawIntBits ( java.lang.Float.POSITIVE_INFINITY ) , NUMBER_CONSTANT ) ; junit.framework.Assert . assertEquals ( java.lang.Float . floatToRawIntBits ( java.lang.Float.NEGATIVE_INFINITY ) , - NUMBER_CONSTANT ) ; }
public void add ( com.android.sdklib.internal.repository.SdkSourceCategory category , com.android.sdklib.internal.repository.SdkSource source ) { synchronized ( mSources ) { java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list = mSources . get ( category ) ; if ( list == null ) { list = new java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > () ; mSources . put ( category , list ) ; } list . add ( source ) ; } }
public void testKernelBasicTests () { if ( ! ( android.os.cts.OSFeatures . needsSeccompSupport () ) ) return; if ( isRunningUnderEmulatedAbi () ) { android.util.Log . d ( android.os.cts.SeccompTest.TAG , STRING_CONSTANT ) ; return; } final java.lang.String [] tests = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ; runKernelUnitTestSuite ( tests ) ; }
@ java.lang.Override public void onResume () { super . onResume () ; com.android.internal.telephony.cat.CatLog . d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( STRING_CONSTANT + ( mIsResponseSent ) ) + STRING_CONSTANT ) + ( mSlotId ) ) ) ; startTimeOut () ; if ( mIsResponseSent ) { cancelTimeOut () ; finish () ; } }
void downloadCallLog ( java.lang.String path , java.util.HashMap < java.lang.String , java.lang.Integer > callCounter ) { try { com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook request = new com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook ( path , mAccount , NUMBER_CONSTANT , com.android.bluetooth.pbapclient.PbapClientConnectionHandler.VCARD_TYPE_30 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; request . execute ( mObexSession ) ; com.android.bluetooth.pbapclient.CallLogPullRequest processor = new com.android.bluetooth.pbapclient.CallLogPullRequest ( mPbapClientStateMachine . getContext () , path , callCounter , mAccount ) ; processor . setResults ( request . getList () ) ; processor . onPullComplete () ; } catch ( java.io.IOException e ) { android.util.Log . w ( com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG , STRING_CONSTANT ) ; } }
private byte getBluetoothPlayState ( android.media.session.PlaybackState pbState ) { if ( pbState == null ) { android.util.Log . w ( com.android.bluetooth.avrcp.Avrcp.TAG , STRING_CONSTANT ) ; return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED ; } switch ( pbState . getState () ) { case android.media.session.PlaybackState.STATE_PLAYING : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_PLAYING ; case android.media.session.PlaybackState.STATE_BUFFERING : case android.media.session.PlaybackState.STATE_STOPPED : case android.media.session.PlaybackState.STATE_NONE : case android.media.session.PlaybackState.STATE_CONNECTING : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED ; case android.media.session.PlaybackState.STATE_PAUSED : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_PAUSED ; case android.media.session.PlaybackState.STATE_FAST_FORWARDING : case android.media.session.PlaybackState.STATE_SKIPPING_TO_NEXT : case android.media.session.PlaybackState.STATE_SKIPPING_TO_QUEUE_ITEM : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_FWD_SEEK ; case android.media.session.PlaybackState.STATE_REWINDING : case android.media.session.PlaybackState.STATE_SKIPPING_TO_PREVIOUS : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_REV_SEEK ; case android.media.session.PlaybackState.STATE_ERROR : default: return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_ERROR ; } }
@ org.junit.Test public void testJava7CompatibleInterface ( ) throws java.lang.Exception { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( com.google.devtools.build.android.desugar.Java7CompatibilityTest.ExtendsDefault . class . getName () ) ; com.google.devtools.build.android.desugar.Java7CompatibilityTest.ClassTester tester = new com.google.devtools.build.android.desugar.Java7CompatibilityTest.ClassTester () ; reader . accept ( new com.google.devtools.build.android.desugar.Java7Compatibility ( tester , null , null ) , NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( tester.version ) . isEqualTo ( Opcodes.V1_7 ) ; com.google.common.truth.Truth . assertThat ( tester.bridgeMethods ) . isEqualTo ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( tester.clinitMethods ) . isEqualTo ( NUMBER_CONSTANT ) ; }
public void testToXml3b ( ) throws java.lang.Exception { java.lang.String xml = STRING_CONSTANT + ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; org.w3c.dom.Document doc = com.android.utils.XmlUtilsTest . parse ( xml ) ; java.lang.String formatted = com.android.utils.XmlUtils . toXml ( doc ) ; assertEquals ( ( STRING_CONSTANT + ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) , formatted ) ; }
@ org.junit.Test public void testFocusGain () { testSnkPlay () ; streamHandler . handleMessage ( streamHandler . obtainMessage ( A2dpSinkStreamHandler.AUDIO_FOCUS_CHANGE , AudioManager.AUDIOFOCUS_GAIN ) ) ; org.mockito.Mockito . verify ( mockAudioManager , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . requestAudioFocus ( org.mockito.Mockito . any () ) ; org.mockito.Mockito . verify ( mockA2dpSink , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . informAudioFocusStateNative ( NUMBER_CONSTANT ) ; org.mockito.Mockito . verify ( mockA2dpSink , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . informAudioTrackGainNative ( NUMBER_CONSTANT ) ; }
@ java.lang.Override public boolean setHwPnoList ( com.android.server.wifi.WifiNative.PnoSettings settings , com.android.server.wifi.WifiNative.PnoEventHandler eventHandler ) { synchronized ( mSettingsLock ) { if ( ( mPnoSettings ) != null ) { android.util.Log . w ( com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG , STRING_CONSTANT ) ; return false ; } mPnoEventHandler = eventHandler ; mPnoSettings = settings ; processPendingScans () ; return true ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( com.android.jack.transformations.cast.UselessCastRemover . class , method ) ) ) ) { return; } com.android.jack.transformations.request.TransformationRequest request = new com.android.jack.transformations.request.TransformationRequest ( method ) ; com.android.jack.transformations.cast.UselessCastRemover.Visitor visitor = new com.android.jack.transformations.cast.UselessCastRemover.Visitor ( request ) ; visitor . accept ( method ) ; request . commit () ; }
@ java.lang.Override public javax.obex.PasswordAuthentication onAuthenticationChallenge ( final java.lang.String description , final boolean isUserIdRequired , final boolean isFullAccess ) { waitUserConfirmation () ; if ( ( mSessionKey . trim () . length () ) != NUMBER_CONSTANT ) { return new javax.obex.PasswordAuthentication ( null , mSessionKey . getBytes () ) ; } return null ; }
private synchronized boolean addMediaPlayerController ( com.android.bluetooth.avrcp.MediaController controller ) { java.lang.String packageName = controller . getPackageName () ; com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( com.android.bluetooth.avrcp.MediaController . wrap ( controller ) , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , getPlayStateBytes ( controller . getPlaybackState () ) , getFeatureBitMask ( packageName ) , controller . getPackageName () , getAppLabel ( packageName ) ) ; return addMediaPlayerInfo ( info ) ; }
@ java.lang.Override public boolean onPrepareOptionsMenu ( android.view.Menu menu ) { menu . clear () ; if ( ( ( ( mState ) == ( com.android.mms.ui.ManageSimMessages.SHOW_LIST ) ) && ( null != ( mCursor ) ) ) && ( ( mCursor . getCount () ) > NUMBER_CONSTANT ) ) { menu . add ( NUMBER_CONSTANT , com.android.mms.ui.ManageSimMessages.OPTION_MENU_DELETE_ALL , NUMBER_CONSTANT , R.string.menu_delete_messages ) . setIcon ( android.R.drawable.ic_menu_delete ) ; } return true ; }
@ java.lang.Override public void onVisible () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; super . onVisible () ; if ( ( ( getActivity () ) != null ) && ( ( preSyncVoicemailStatusCheckExecutor ) != null ) ) { preSyncVoicemailStatusCheckExecutor . executeParallel ( getActivity () ) ; com.android.dialer.logging.Logger . get ( getActivity () ) . logImpression ( DialerImpression.Type.VVM_TAB_VIEWED ) ; getActivity () . setVolumeControlStream ( VoicemailAudioManager.PLAYBACK_STREAM ) ; } }
public int createMapMnsRecord ( java.lang.String serviceName , int rfcommChannel , int l2capPsm , int version , int features ) { if ( ! ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + STRING_CONSTANT ) ) ; } return sdpCreateMapMnsRecordNative ( serviceName , rfcommChannel , l2capPsm , version , features ) ; }
@ java.lang.Override public boolean equals ( @ javax.annotation.Nullable java.lang.Object obj ) { if ( obj == ( this ) ) { return true ; } if ( obj instanceof com.google.common.base.Equivalence.Wrapper ) { com.google.common.base.Equivalence.Wrapper < > that = ( ( com.google.common.base.Equivalence.Wrapper < > ) ( obj ) ) ; if ( this . equivalence . equals ( that.equivalence ) ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.common.base.Equivalence < java.lang.Object > equivalence = ( ( com.google.common.base.Equivalence < java.lang.Object > ) ( this . equivalence ) ) ; return equivalence . equivalent ( this . reference , that.reference ) ; } } return false ; }
private static java.util.List < com.android.build.OutputFile > computeBestOutput ( @ com.android.annotations.NonNull java.util.List < ? extends com.android.build.VariantOutput > outputs , @ com.android.annotations.NonNull java.util.Set < java.lang.String > variantAbis , int density , @ com.android.annotations.NonNull java.lang.String . . . abis ) { return com.android.ide.common.build.SplitOutputMatcher . computeBestOutput ( outputs , variantAbis , density , null , null , java.util.Arrays . asList ( abis ) ) ; }
@ java.lang.Override public android.telephony.ServiceState getServiceStateForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone == null ) { return null ; } return phone . getServiceState () ; }
@ java.lang.Override public synchronized void onConnectEvent ( int netId , int error , int latencyMs , java.lang.String ipAddr , int port , int uid ) throws android.os.RemoteException { long timestamp = java.lang.System . currentTimeMillis () ; getMetricsForNetwork ( timestamp , netId ) . addConnectResult ( error , latencyMs , ipAddr ) ; if ( ( mNetdEventCallback ) != null ) { mNetdEventCallback . onConnectEvent ( ipAddr , port , timestamp , uid ) ; } }
private void setWfcRoamingSettingInternal ( boolean enabled ) { final int value = ( enabled ) ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF ; java.lang.Thread thread = new java.lang.Thread ( ( ) - > { try { getConfigInterface () . setProvisionedValue ( ImsConfig.ConfigConstants.VOICE_OVER_WIFI_ROAMING , value ) ; } catch ( com.android.ims.ImsException e ) {} } ) ; thread . start () ; }
public static void dispose () { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . force () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . closeFiles () ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.ourIsDisposed = true ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
protected org.bouncycastle.asn1.x9.X9ECParameters createParameters () { java.math.BigInteger n = new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) ; java.math.BigInteger h = new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) ; org.bouncycastle.math.ec.ECCurve curve = org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves . configureCurve ( new org.bouncycastle.math.ec.ECCurve.Fp ( new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) , new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) , new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) , n , h ) ) ; return new org.bouncycastle.asn1.x9.X9ECParameters ( curve , curve . decodePoint ( org.bouncycastle.util.encoders.Hex . decode ( STRING_CONSTANT ) ) , n , h ) ; }
@ java.lang.Override public boolean processMessage ( android.os.Message msg ) { if ( ( super . processMessage ( msg ) ) == ( HANDLED ) ) { return HANDLED ; } switch ( msg.what ) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage ( com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET ) ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage ( com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE , com.android.server.telecom.CallAudioRouteStateMachine.NO_INCLUDE_BLUETOOTH_IN_BASELINE ) ; mWasOnSpeaker = false ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED ; default: return NOT_HANDLED ; } }
public void testStageInstallWithErrorCode_withBadlyFormedRulesVersion ( ) throws java.lang.Exception { com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( NUMBER_CONSTANT , NUMBER_CONSTANT , libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; byte [] invalidRulesVersionBytes = validDistroVersion . toBytes () ; invalidRulesVersionBytes [ ( ( invalidRulesVersionBytes.length ) - NUMBER_CONSTANT ) ] = CHAR_CONS ; com.android.timezone.distro.TimeZoneDistro distro = createTimeZoneDistroWithVersionBytes ( invalidRulesVersionBytes ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer . stageInstallWithErrorCode ( distro ) ) ; assertNoDistroOperationStaged () ; assertNoInstalledDistro () ; }
@ java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { return new com.android.jack.dx.io.instructions.ThreeRegisterDecodedInstruction ( getFormat () , getOpcode () , newFirstIndex , getFirstIndexType () , getTarget () , getLiteral () , a , b , c , newSecondIndex , getSecondIndexType () ) ; }
public void stopAdvertisingSet ( android.bluetooth.le.AdvertisingSetCallback callback ) { if ( callback == null ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } android.bluetooth.le.IAdvertisingSetCallback wrapped = mCallbackWrappers . remove ( callback ) ; if ( wrapped == null ) { return; } android.bluetooth.IBluetoothGatt gatt ; try { gatt = mBluetoothManager . getBluetoothGatt () ; gatt . stopAdvertisingSet ( wrapped ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.le.BluetoothLeAdvertiser.TAG , STRING_CONSTANT , e ) ; } }
private int modifyRcFeatureFromBlacklist ( int feature , java.lang.String address ) { android.content.SharedPreferences pref = mContext . getSharedPreferences ( com.android.bluetooth.avrcp.Avrcp.ABSOLUTE_VOLUME_BLACKLIST , Context.MODE_PRIVATE ) ; if ( ! ( pref . contains ( address ) ) ) { return feature ; } return feature & ( ~ ( com.android.bluetooth.avrcp.Avrcp.BTRC_FEAT_ABSOLUTE_VOLUME ) ) ; }
public static com.android.dialer.app.calllog.PhoneCallDetailsViews createForTest ( android.content.Context context ) { return new com.android.dialer.app.calllog.PhoneCallDetailsViews ( new android.widget.TextView ( context ) , new android.view.View ( context ) , new com.android.dialer.calllogutils.CallTypeIconsView ( context ) , new android.widget.TextView ( context ) , new android.view.View ( context ) , new android.widget.TextView ( context ) , new android.widget.TextView ( context ) , new android.view.View ( context ) , new android.widget.TextView ( context ) ) ; }
private void loadViewServerInfoAndWindows ( final com.android.ddmlib.IDevice device ) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge . loadViewServerInfo ( device ) ; if ( viewServerInfo == null ) { return; } com.android.hierarchyviewerlib.device.Window [] windows = com.android.hierarchyviewerlib.device.DeviceBridge . loadWindows ( device ) ; com.android.hierarchyviewerlib.models.DeviceSelectionModel . getModel () . addDevice ( device , windows , viewServerInfo ) ; if ( ( viewServerInfo.protocolVersion ) >= NUMBER_CONSTANT ) { com.android.hierarchyviewerlib.device.WindowUpdater . startListenForWindowChanges ( this , device ) ; focusChanged ( device ) ; } }
@ java.lang.Override public android.database.Cursor query ( android.net.Uri uri , java.lang.String [] projection , java.lang.String selection , java.lang.String [] selectionArgs , java.lang.String sortOrder ) { if ( ( mSubscriptionArray . size () ) > NUMBER_CONSTANT ) { return convertFromContentToCursor ( mSubscriptionArray . get ( NUMBER_CONSTANT ) , projection ) ; } return null ; }
public void test_SSLSocket_getEnabledProtocols ( ) throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory . getDefault () ) ) ; javax.net.ssl.SSLSocket ssl = ( ( javax.net.ssl.SSLSocket ) ( sf . createSocket () ) ) ; java.lang.String [] protocols = ssl . getEnabledProtocols () ; libcore.java.security.StandardNames . assertValidProtocols ( protocols ) ; assertNotSame ( protocols , ssl . getEnabledProtocols () ) ; }
@ java.lang.Override public java.lang.String toString () { return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_CONSTANT + ( mNickname ) ) + STRING_CONSTANT ) + ( mServiceProviderName ) ) + STRING_CONSTANT ) + ( mProfileName ) ) + STRING_CONSTANT ) + ( mProfileClass ) ) + STRING_CONSTANT ) + ( mState ) ) + STRING_CONSTANT ) + ( mCarrierIdentifier ) ) + STRING_CONSTANT ) + ( mPolicyRules ) ) + STRING_CONSTANT ) + ( java.util.Arrays . toString ( mAccessRules ) ) ) + STRING_CONSTANT ; }
private void syncTTYState ( int [] ttyArray ) { if ( com.android.phone.CallFeaturesSetting.DBG ) com.android.phone.CallFeaturesSetting . log ( ( STRING_CONSTANT + ( ( ttyArray [ NUMBER_CONSTANT ] ) != NUMBER_CONSTANT ? STRING_CONSTANT : STRING_CONSTANT ) ) ) ; mButtonTTY . setChecked ( ( ( ttyArray [ NUMBER_CONSTANT ] ) != NUMBER_CONSTANT ) ) ; android.content.Context context = this ; if ( ( ttyArray [ NUMBER_CONSTANT ] ) == NUMBER_CONSTANT ) { com.android.phone.CallFeaturesSetting . setStatusBarIcon ( context , true ) ; } else { com.android.phone.CallFeaturesSetting . setStatusBarIcon ( context , false ) ; } }
public boolean setOperatorBrandOverride ( int subId , java.lang.String brand ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony () ; if ( telephony != null ) return telephony . setOperatorBrandOverride ( subId , brand ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog . e ( android.telephony.TelephonyManager.TAG , STRING_CONSTANT , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog . e ( android.telephony.TelephonyManager.TAG , STRING_CONSTANT , ex ) ; } return false ; }
synchronized boolean reportError ( android.bluetooth.BluetoothDevice device , byte error ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + error ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return reportErrorNative ( error ) ; }
@ java.lang.Override public java.awt.Rectangle layout ( javax.swing.JComponent c , java.awt.Rectangle bounds ) { if ( c instanceof com.intellij.execution.ui.layout.impl.Toolbar ) { bounds.height -= NUMBER_CONSTANT ; return super . layout ( c , bounds ) ; } if ( c instanceof com.intellij.execution.ui.layout.impl.GridImpl ) { if ( ! ( isHideTabs () ) ) { bounds.y -= NUMBER_CONSTANT ; bounds.height += NUMBER_CONSTANT ; } } return super . layout ( c , bounds ) ; }
@ java.lang.Override public com.android.ide.common.rendering.api.ResourceValue findItemInStyle ( com.android.ide.common.rendering.api.StyleResourceValue style , java.lang.String itemName , boolean isFrameworkAttr ) { com.android.ide.common.rendering.api.ResourceValue item = style . findValue ( itemName , isFrameworkAttr ) ; if ( item == null ) { com.android.ide.common.rendering.api.StyleResourceValue parentStyle = mStyleInheritanceMap . get ( style ) ; if ( parentStyle != null ) { return findItemInStyle ( parentStyle , itemName , isFrameworkAttr ) ; } } return item ; }
@ java.lang.Override public boolean onKeyDown ( int keyCode , android.view.KeyEvent event ) { if ( keyCode == ( android.view.KeyEvent.KEYCODE_BACK ) ) { if ( com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity.D ) android.util.Log . d ( com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity.TAG , STRING_CONSTANT ) ; mUpdateValues = new android.content.ContentValues () ; mUpdateValues . put ( BluetoothShare.VISIBILITY , BluetoothShare.VISIBILITY_HIDDEN ) ; this . getContentResolver () . update ( mUri , mUpdateValues , null , null ) ; android.widget.Toast . makeText ( this , getString ( R.string.bt_toast_2 ) , Toast.LENGTH_SHORT ) . show () ; finish () ; return true ; } return false ; }
@ java.lang.Override public void writeToParcel ( android.os.Parcel dest , int flags ) { dest . writeLong ( mNetworkCapabilities ) ; dest . writeLong ( mTransportTypes ) ; dest . writeInt ( mLinkUpBandwidthKbps ) ; dest . writeInt ( mLinkDownBandwidthKbps ) ; dest . writeParcelable ( ( ( android.os.Parcelable ) ( mNetworkSpecifier ) ) , flags ) ; dest . writeInt ( mSignalStrength ) ; dest . writeArraySet ( mUids ) ; }
public static synchronized void setShouldShowSetupActivity ( android.content.Context context , boolean need ) { if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { com.android.tv.tuner.TunerPreferences . setPreference ( context , com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , need ) ; } else { com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . edit () . putBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , need ) . apply () ; } }
@ org.junit.Test public void testAttachLayoutAnimationParameters () { android.widget.cts.GridViewTest.MockGridView mockGridView = new android.widget.cts.GridViewTest.MockGridView ( mActivity ) ; android.view.ViewGroup.LayoutParams p = new android.view.ViewGroup.LayoutParams ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; mockGridView . attachLayoutAnimationParameters ( null , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; android.view.animation.GridLayoutAnimationController.AnimationParameters animationParams = ( ( android.view.animation.GridLayoutAnimationController.AnimationParameters ) ( p.layoutAnimationParameters ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , animationParams.index ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , animationParams.count ) ; }
public static java.lang.String getShortID ( com.ibm.icu.util.TimeZone tz ) { java.lang.String canonicalID = null ; if ( tz instanceof com.ibm.icu.impl.OlsonTimeZone ) { canonicalID = ( ( com.ibm.icu.impl.OlsonTimeZone ) ( tz ) ) . getCanonicalID () ; } else { canonicalID = com.ibm.icu.impl.ZoneMeta . getCanonicalCLDRID ( tz . getID () ) ; } if ( canonicalID == null ) { return null ; } return com.ibm.icu.impl.ZoneMeta . getShortIDFromCanonical ( canonicalID ) ; }
private void updateIsVoiceMailNumber () { if ( ( ( getHandle () ) != null ) && ( PhoneAccount.SCHEME_VOICEMAIL . equals ( getHandle () . getScheme () ) ) ) { isVoicemailNumber = true ; return; } if ( ! ( com.android.dialer.util.PermissionsUtil . hasPermission ( context , permission.READ_PHONE_STATE ) ) ) { isVoicemailNumber = false ; return; } isVoicemailNumber = com.android.dialer.telecom.TelecomUtil . isVoicemailNumber ( context , getAccountHandle () , getNumber () ) ; }
@ com.android.annotations.NonNull public static java.io.File workspacePathToFile ( @ com.android.annotations.NonNull org.eclipse.core.runtime.IPath path ) { org.eclipse.core.resources.IWorkspaceRoot root = org.eclipse.core.resources.ResourcesPlugin . getWorkspace () . getRoot () ; org.eclipse.core.resources.IResource res = root . findMember ( path ) ; if ( res != null ) { org.eclipse.core.runtime.IPath location = res . getLocation () ; if ( location != null ) { return location . toFile () ; } return root . getLocation () . append ( path ) . toFile () ; } return path . toFile () ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( getClass () . equals ( obj . getClass () ) ) { return java.util.Arrays . equals ( mData , ( ( com.android.ide.eclipse.adt.internal.resources.manager.IntArrayWrapper ) ( obj ) ) . mData ) ; } return super . equals ( obj ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT , returns = STRING_CONSTANT ) public java.lang.Boolean wifiConnect ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) org.json.JSONObject config ) throws java.net.ConnectException , org.json.JSONException { android.net.wifi.WifiConfiguration wifiConfig = genWifiConfig ( config ) ; int nId = mWifi . addNetwork ( wifiConfig ) ; if ( nId < NUMBER_CONSTANT ) { com.googlecode.android_scripting.Log . e ( STRING_CONSTANT ) ; return false ; } mWifi . enableNetwork ( nId , true ) ; return mWifi . reconnect () ; }
public void runTest () { mConvolve . setInput ( mInPixelsAllocation ) ; if ( mUseNative ) { mOutPixelsAllocation = ( ( android.renderscript.Allocation ) ( mGroup . execute ( mInPixelsAllocation ) [ NUMBER_CONSTANT ] ) ) ; } else { mConvolve . forEach ( mScratchPixelsAllocation1 ) ; mMatrix . forEach ( mScratchPixelsAllocation1 , mOutPixelsAllocation ) ; } }
@ java.lang.Override public void onSpeakEasyCall () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; com.android.incallui.call.DialerCall incomingCall = com.android.incallui.call.CallList . getInstance () . getIncomingCall () ; if ( incomingCall == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; return; } incomingCall . setIsSpeakEasyCall ( true ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ javax.annotation.Nonnull public < T extends com.android.jack.ir.ast.JExpression > T cloneExpression ( @ javax.annotation.Nonnull T expr ) { expression = null ; this . accept ( expr ) ; if ( ( expression ) == null ) { throw new java.lang.AssertionError ( ( STRING_CONSTANT + ( expr . toString () ) ) ) ; } for ( com.android.sched.marker.Marker m : expr . getAllMarkers () ) { expression . addMarker ( m . cloneIfNeeded () ) ; } assert ( expression ) != null ; return ( ( T ) ( expression ) ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected ( ) throws android.os.RemoteException { com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo ( com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE , NUMBER_CONSTANT ) ; mRegistration . onDeregistered ( info ) ; mRegBinder . addRegistrationCallback ( mCallback2 ) ; org.mockito.Mockito . verify ( mCallback ) . onDeregistered ( org.mockito.ArgumentMatchers . eq ( info ) ) ; org.mockito.Mockito . verify ( mCallback2 ) . onDeregistered ( org.mockito.ArgumentMatchers . eq ( info ) ) ; }
@ java.lang.Override public boolean setDiscoverableTimeout ( int timeout ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . setDiscoverableTimeout ( timeout ) ; }
public static void computeAcosh ( android.renderscript.cts.TestAcosh.ArgumentsFloatFloat args ) { args.ulf = NUMBER_CONSTANT ; args.ulfRelaxed = NUMBER_CONSTANT ; double x = ( ( double ) ( args.in ) ) ; args.out = ( ( float ) ( java.lang.StrictMath . log ( ( x + ( java.lang.StrictMath . sqrt ( ( ( x * x ) - NUMBER_CONSTANT ) ) ) ) ) ) ) ; }
public void testGetSimCountryIso () { android.content.pm.PackageManager packageManager = getContext () . getPackageManager () ; java.lang.String countryCode = mTelephonyManager . getSimCountryIso () ; if ( packageManager . hasSystemFeature ( PackageManager.FEATURE_TELEPHONY ) ) { assertTrue ( ( ( ( STRING_CONSTANT + countryCode ) + STRING_CONSTANT ) + ( android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN ) ) , java.util.regex.Pattern . matches ( android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN , countryCode ) ) ; } else {} }
public void getDefaultDownloadableSubscriptionList ( android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { getIEuiccController () . getDefaultDownloadableSubscriptionList ( mContext . getOpPackageName () , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
@ java.lang.Override @ com.android.annotations.NonNull public java.lang.String getDescription () { java.lang.String prefix ; switch ( getType () ) { case ANDROID_TEST : prefix = STRING_CONSTANT ; break; case UNIT_TEST : prefix = STRING_CONSTANT ; break; default: throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( getVariantConfiguration () . hasFlavors () ) { return java.lang.String . format ( STRING_CONSTANT , prefix , getCapitalizedFlavorName () , getCapitalizedBuildTypeName () ) ; } else { return java.lang.String . format ( STRING_CONSTANT , prefix , getCapitalizedBuildTypeName () ) ; } }
private void performShowDialpadFragment ( @ android.support.annotation.NonNull android.support.v4.app.FragmentManager dialpadFragmentManager ) { android.support.v4.app.FragmentTransaction transaction = dialpadFragmentManager . beginTransaction () ; com.android.incallui.DialpadFragment dialpadFragment = inCallActivity . getDialpadFragment () ; if ( dialpadFragment == null ) { transaction . add ( inCallActivity . getDialpadContainerId () , new com.android.incallui.DialpadFragment () , com.android.incallui.InCallActivityCommon.TAG_DIALPAD_FRAGMENT ) ; } else { transaction . show ( dialpadFragment ) ; } transaction . commitAllowingStateLoss () ; dialpadFragmentManager . executePendingTransactions () ; com.android.dialer.logging.Logger . get ( inCallActivity ) . logScreenView ( ScreenEvent.Type.INCALL_DIALPAD , inCallActivity ) ; inCallActivity . updateNavigationBar ( true ) ; }
@ java.lang.Override public void run () { try { synchronized ( mCancelWaiter ) { mCancelWaiter . wait ( mTimeout ) ; if ( mCanceled ) { return; } } } catch ( java.lang.InterruptedException e ) { android.util.Log . w ( com.android.nfc.NfcService.TAG , STRING_CONSTANT ) ; interrupt () ; } android.util.Log . e ( com.android.nfc.NfcService.TAG , STRING_CONSTANT ) ; mDeviceHost . doAbort ( getName () ) ; }
private void loadFrom ( java.io.InputStream in ) throws java.io.IOException { java.io.ByteArrayOutputStream bytesOut = new java.io.ByteArrayOutputStream () ; byte [] buffer = new byte [ NUMBER_CONSTANT ] ; int count ; while ( ( count = in . read ( buffer ) ) != ( - NUMBER_CONSTANT ) ) { bytesOut . write ( buffer , NUMBER_CONSTANT , count ) ; } this . data = bytesOut . toByteArray () ; this . length = data.length ; this . tableOfContents . readFrom ( this ) ; }
public void run () { new org.apache.harmony.jpda.tests.jdwp.Events.CombinedEvents002Debuggee_TestedClass () ; logWriter . println ( STRING_CONSTANT ) ; logWriter . println ( STRING_CONSTANT ) ; synchronizer . sendMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; logWriter . println ( STRING_CONSTANT ) ; synchronizer . receiveMessage ( JPDADebuggeeSynchronizer.SGNL_CONTINUE ) ; logWriter . println ( STRING_CONSTANT ) ; logWriter . println ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; org.apache.harmony.jpda.tests.jdwp.Events.CombinedEvents002Debuggee_TestedClass . emptyTestedMethod () ; logWriter . println ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; logWriter . println ( STRING_CONSTANT ) ; }
@ java.lang.Override public org.conscrypt.OpenSSLSocketImpl createSocket ( javax.net.ssl.SSLSocketFactory factory , java.net.ServerSocket listener ) throws java.io.IOException { org.conscrypt.OpenSSLSocketImpl socket = super . createSocket ( factory , listener ) ; socket . setEnabledProtocols ( new java.lang.String [] { STRING_CONSTANT } ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , socket . getEnabledProtocols () . length ) ; return socket ; }
public void testConstructor ( ) throws java.lang.Exception { try { java.util.jar.StrictJarFile jarFile = new java.util.jar.StrictJarFile ( STRING_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) {} tests.support.resource.Support_Resources . copyFile ( resources , null , libcore.java.util.jar.StrictJarFileTest.JAR_1 ) ; java.lang.String fileName = new java.io.File ( resources , libcore.java.util.jar.StrictJarFileTest.JAR_1 ) . getCanonicalPath () ; java.util.jar.StrictJarFile jarFile = new java.util.jar.StrictJarFile ( fileName ) ; jarFile . close () ; }
public void testConfigurationUpdatesWhenRotatingToSideFromDocked ( ) throws java.lang.Exception { if ( ! ( supportsScreenRotation () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } if ( ! ( supportsSplitScreenMultiWindow () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } setDeviceRotation ( NUMBER_CONSTANT ) ; launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; launchActivityToSide ( false , false , android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; final android.server.cts.ReportedSizes initialSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; rotateAndCheckSizes ( initialSizes ) ; }
public static void initializeForTests ( com.android.builder.profile.ProcessRecorder.ExecutionRecordWriter recordWriter ) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE = new com.android.builder.profile.ProcessRecorderFactory () ; com.android.builder.profile.ProcessRecorder . resetForTests () ; com.android.builder.profile.ProcessRecorderFactory . setEnabled ( true ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . setRecordWriter ( recordWriter ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . get () ; com.android.builder.profile.ProcessRecorderFactory . publishInitialRecords ( com.google.common.collect.ImmutableList . < com.android.builder.profile.Recorder.Property > of () ) ; }
public void openFile ( org.eclipse.core.resources.IFile file ) { mEditedFile = file ; mConfigComposite . setFile ( mEditedFile ) ; if ( ( mReloadListener ) == null ) { mReloadListener = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart.ReloadListener () ; com.android.ide.eclipse.adt.internal.editors.layout.LayoutReloadMonitor . getMonitor () . addListener ( mEditedFile . getProject () , mReloadListener ) ; } if ( ( mRulesEngine ) == null ) { mRulesEngine = new com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine ( this , mEditedFile . getProject () ) ; if ( ( mCanvasViewer ) != null ) { mCanvasViewer . getCanvas () . setRulesEngine ( mRulesEngine ) ; } } }
private int getParameterSize ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { int paramSize = NUMBER_CONSTANT ; if ( ! ( method . isStatic () ) ) { paramSize += NUMBER_CONSTANT ; } for ( com.android.jack.ir.ast.JParameter param : method . getParams () ) { if ( ( ( param . getType () ) == ( JPrimitiveTypeEnum.LONG . getType () ) ) || ( ( param . getType () ) == ( JPrimitiveTypeEnum.DOUBLE . getType () ) ) ) { paramSize += NUMBER_CONSTANT ; } else { paramSize += NUMBER_CONSTANT ; } } return paramSize ; }
public static void setVisualVoicemailEnabled ( android.telephony.TelephonyManager telephonyManager , android.telecom.PhoneAccountHandle handle , boolean enabled ) { try { android.telephony.TelephonyManager . class . getMethod ( STRING_CONSTANT , android.telecom.PhoneAccountHandle . class , boolean . class ) . invoke ( telephonyManager , handle , enabled ) ; } catch ( java.lang.NoSuchMethodException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e ) { com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT , e ) ; } }
private void prepareTune ( com.android.tv.tuner.data.TunerChannel channel , java.lang.String recording ) { mChannelBlocked = false ; mUnblockedContentRating = null ; mRetryCount = NUMBER_CONSTANT ; mChannel = channel ; mRecordingId = recording ; mRecordingDuration = ( recording != null ) ? getDurationForRecording ( recording ) : null ; mProgram = null ; mPrograms = null ; if ( ( mRecordingId ) != null ) { mBufferStartTimeMs = mRecordStartTimeMs = NUMBER_CONSTANT ; } else { mBufferStartTimeMs = mRecordStartTimeMs = java.lang.System . currentTimeMillis () ; } mLastPositionMs = NUMBER_CONSTANT ; mCaptionTrack = null ; mHandler . sendEmptyMessage ( com.android.tv.tuner.tvinput.TunerSessionWorker.MSG_PARENTAL_CONTROLS ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.ir.ast.JLocalRef exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession ) { assert ( sourceInfo ) != null ; assert ( localId ) != null ; com.android.jack.ir.ast.JLocalRef jLocalRef = JLocalUnresolved.INSTANCE . makeRef ( sourceInfo ) ; exportSession . getVariableResolver () . addLink ( localId , new com.android.jack.jayce.linker.VariableRefLinker ( jLocalRef ) ) ; for ( com.android.jack.jayce.v0004.nodes.NMarker marker : markers ) { jLocalRef . addMarker ( marker . exportAsJast ( exportSession ) ) ; } return jLocalRef ; }
@ java.lang.Override @ javax.annotation.Nonnull java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file , boolean append ) throws com.android.sched.util.file.WrongPermissionException { assert capabilities . contains ( Capabilities.WRITE ) ; java.io.File path = getNativeFile ( file . getPath () ) ; try { return new java.io.FileOutputStream ( path , append ) ; } catch ( java.io.FileNotFoundException e ) { com.android.sched.util.file.FileOrDirectory . checkPermissions ( path , file . getLocation () , Permission.WRITE ) ; throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
private void sendUuidIntent ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.RemoteDevices.DeviceProperties prop = getDeviceProperties ( device ) ; android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_UUID ) ; intent . putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent . putExtra ( BluetoothDevice.EXTRA_UUID , ( prop == null ? null : prop.mUuids ) ) ; com.android.bluetooth.btservice.RemoteDevices.mAdapterService . sendBroadcast ( intent , AdapterService.BLUETOOTH_ADMIN_PERM ) ; com.android.bluetooth.btservice.RemoteDevices.mSdpTracker . remove ( device ) ; }
@ java.lang.Override public void dispose () { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel xml_model = getModelForRead () ; if ( xml_model != null ) { try { if ( ( mXmlModelStateListener ) != null ) { xml_model . removeModelStateListener ( mXmlModelStateListener ) ; } } finally { xml_model . releaseFromRead () ; } } if ( ( mTargetListener ) != null ) { com.android.ide.eclipse.adt.AdtPlugin . getDefault () . removeTargetListener ( mTargetListener ) ; mTargetListener = null ; } super . dispose () ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testHeadsetAnswerCallNull ( ) throws java.lang.Exception { org.mockito.Mockito . when ( mMockCallsManager . getRingingCall () ) . thenReturn ( null ) ; boolean callAnswered = mBluetoothPhoneService.mBinder . answerCall () ; org.mockito.Mockito . verify ( mMockCallsManager , org.mockito.Mockito . never () ) . answerCall ( org.mockito.Matchers . any ( com.android.server.telecom.Call . class ) , org.mockito.Matchers . any ( int . class ) ) ; org.junit.Assert . assertEquals ( callAnswered , false ) ; }
@ java.lang.Override public boolean handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.server.net.NetworkStatsService.MSG_PERFORM_POLL : { final int flags = msg.arg1 ; mService . performPoll ( flags ) ; return true ; } case com.android.server.net.NetworkStatsService.MSG_REGISTER_GLOBAL_ALERT : { mService . registerGlobalAlert () ; return true ; } default: { return false ; } } }
private void doBadSubscribeConfiguration ( java.lang.String serviceName , byte [] ssi , byte [] matchFilter ) throws java.lang.IllegalArgumentException { android.net.wifi.aware.SubscribeConfig subscribeConfig = new android.net.wifi.aware.SubscribeConfig ( serviceName . getBytes () , ssi , matchFilter , android.net.wifi.aware.SubscribeConfig.SUBSCRIBE_TYPE_PASSIVE , NUMBER_CONSTANT , android.net.wifi.aware.SubscribeConfig.MATCH_STYLE_ALL , true ) ; int clientId = doConnect () ; android.net.wifi.aware.IWifiAwareDiscoverySessionCallback mockCallback = org.mockito.Mockito . mock ( android.net.wifi.aware.IWifiAwareDiscoverySessionCallback . class ) ; mDut . subscribe ( clientId , subscribeConfig , mockCallback ) ; org.mockito.Mockito . verify ( mAwareStateManagerMock ) . subscribe ( clientId , subscribeConfig , mockCallback ) ; }
void close () { android.bluetooth.IBluetoothManager mgr = mAdapter . getBluetoothManager () ; if ( mgr != null ) { try { mgr . unregisterStateChangeCallback ( mBluetoothStateChangeCallback ) ; } catch ( android.os.RemoteException e ) { e . printStackTrace () ; } } synchronized ( mConnection ) { doUnbind () ; } mServiceListener = null ; }
public void sendMessage ( int peerId , int messageId , @ android.annotation.Nullable byte [] message , int retryCount ) { if ( mTerminated ) { android.util.Log . w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , STRING_CONSTANT ) ; return; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr . get () ; if ( mgr == null ) { android.util.Log . w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , STRING_CONSTANT ) ; return; } mgr . sendMessage ( mClientId , mSessionId , peerId , message , messageId , retryCount ) ; } }
private void addDependencies ( @ javax.annotation.Nonnull java.util.Set < java.lang.String > filesToRecompile , @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.util.Set < java.lang.String > > typeRecompileDependencies , @ javax.annotation.Nonnull java.util.Set < java.lang.String > fileNames ) { for ( java.lang.String fileName : fileNames ) { if ( filesToRecompile . add ( fileName ) ) { for ( java.lang.String dependencyFileName : getDependencyFileNamesToRecompile ( typeRecompileDependencies , fileName ) ) { filesToRecompile . add ( dependencyFileName ) ; } } } }
public void testElement () { java.util.concurrent.DelayQueue q = populatedQueue ( jsr166.SIZE ) ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) { assertEquals ( new jsr166.DelayQueueTest.PDelay ( i ) , q . element () ) ; q . poll () ; } try { q . element () ; shouldThrow () ; } catch ( java.util.NoSuchElementException success ) {} }
private void sendNanStateChangedBroadcast ( boolean enabled ) { if ( com.android.server.wifi.nan.WifiNanStateManager.VDBG ) { android.util.Log . v ( com.android.server.wifi.nan.WifiNanStateManager.TAG , ( STRING_CONSTANT + enabled ) ) ; } final android.content.Intent intent = new android.content.Intent ( android.net.wifi.nan.WifiNanManager.ACTION_WIFI_NAN_STATE_CHANGED ) ; intent . addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY ) ; mContext . sendBroadcastAsUser ( intent , UserHandle.ALL ) ; }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JFieldId getOrCreateAssertionstatusField ( @ javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest request ) { try { com.android.jack.ir.ast.JFieldId id = currentType . getFieldId ( com.android.jack.transformations.assertion.DynamicAssertionTransformer.ASSERTION_FIELD_NAME , JPrimitiveTypeEnum.BOOLEAN . getType () , FieldKind.STATIC ) ; com.android.jack.ir.ast.JField field = id . getField () ; if ( ( field != null ) && ( field . getEnclosingType () . isSameType ( currentType ) ) ) { return id ; } } catch ( com.android.jack.lookup.JLookupException e ) {} return addAssertionStatusToType ( currentType , request ) ; }
public void test_getIntegerInstance_ar ( ) throws java.lang.Exception { java.text.NumberFormat numberFormat = java.text.NumberFormat . getNumberInstance ( new java.util.Locale ( STRING_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , ( ( java.text.DecimalFormat ) ( numberFormat ) ) . toPattern () ) ; java.text.NumberFormat integerFormat = java.text.NumberFormat . getIntegerInstance ( new java.util.Locale ( STRING_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , ( ( java.text.DecimalFormat ) ( integerFormat ) ) . toPattern () ) ; }
private void updatePlayPause () { android.widget.ImageButton b = ( ( android.widget.ImageButton ) ( findViewById ( R.id.playpause ) ) ) ; if ( ( b != null ) && ( ( mPlayer ) != null ) ) { if ( mPlayer . isPlaying () ) { b . setImageResource ( R.drawable.btn_playback_ic_pause_small ) ; } else { b . setImageResource ( R.drawable.btn_playback_ic_play_small ) ; mProgressRefresher . removeCallbacksAndMessages ( null ) ; } } }
protected void mergeDex ( @ javax.annotation.Nonnull com.android.jack.tools.merger.JackMerger merger , com.android.sched.vfs.InputVFile inputDex ) throws com.android.jack.backend.dex.DexWritingException , com.android.jack.tools.merger.MergingOverflowException { try { merger . addDexFile ( new com.android.jack.dx.io.DexBuffer ( inputDex . openRead () ) ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.backend.dex.DexWritingException ( new com.android.sched.util.file.CannotReadException ( inputDex , e ) ) ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { if ( ( ! ( method . isAbstract () ) ) && ( ! ( method . isNative () ) ) ) { if ( com.android.jack.optimizations.common.OptimizerUtils . isConstructor ( method ) ) { new com.android.jack.optimizations.valuepropagation.field.FvpCollectFieldAssignments.ConstructorAnalyzer ( method ) . analyze () ; } else { analyzeRegularMethod ( method ) ; } } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void test_isJavaLetterOrDigitC () { assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaLetterOrDigit ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaLetterOrDigit ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaLetterOrDigit ( CHAR_CONS ) ) ; assertTrue ( STRING_CONSTANT , java.lang.Character . isJavaLetterOrDigit ( CHAR_CONS ) ) ; assertFalse ( STRING_CONSTANT , java.lang.Character . isJavaLetterOrDigit ( CHAR_CONS ) ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object other ) { if ( ( this ) == other ) { return true ; } if ( ! ( other instanceof com.android.dx.rop.code.RegisterSpec ) ) { if ( other instanceof com.android.dx.rop.code.RegisterSpec.ForComparison ) { com.android.dx.rop.code.RegisterSpec.ForComparison fc = ( ( com.android.dx.rop.code.RegisterSpec.ForComparison ) ( other ) ) ; return equals ( fc.reg , fc.type , fc.local ) ; } return false ; } com.android.dx.rop.code.RegisterSpec spec = ( ( com.android.dx.rop.code.RegisterSpec ) ( other ) ) ; return equals ( spec.reg , spec.type , spec.local ) ; }
private void handleNetworkConnectionFailure ( int netId , int disableReason ) { if ( com.android.server.wifi.SupplicantStateTracker.DBG ) { android.util.Log . d ( com.android.server.wifi.SupplicantStateTracker.TAG , ( ( ( ( ( STRING_CONSTANT + ( java.lang.Integer . toString ( netId ) ) ) + STRING_CONSTANT ) + ( java.lang.Integer . toString ( disableReason ) ) ) + STRING_CONSTANT ) + ( mNetworksDisabledDuringConnect ) ) ) ; } if ( mNetworksDisabledDuringConnect ) { mNetworksDisabledDuringConnect = false ; } mWifiConfigManager . updateNetworkSelectionStatus ( netId , disableReason ) ; }
public static final void toByteArray ( com.google.protobuf.nano.MessageNano msg , byte [] data , int offset , int length ) { try { final com.google.protobuf.nano.CodedOutputByteBufferNano output = com.google.protobuf.nano.CodedOutputByteBufferNano . newInstance ( data , offset , length ) ; msg . writeTo ( output ) ; output . checkNoSpaceLeft () ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( ( STRING_CONSTANT + STRING_CONSTANT ) , e ) ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } method . removeMarker ( com.android.jack.cfg.ControlFlowGraph . class ) ; com.android.jack.cfg.CfgMarkerRemover.Visitor v = new com.android.jack.cfg.CfgMarkerRemover.Visitor () ; v . accept ( method ) ; }
@ org.junit.Test public void testCheckAccessLevel_hasCarrierPrivileges ( ) throws java.lang.Exception { setHasCarrierPrivileges ( true ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert . assertEquals ( NetworkStatsAccess.Level.DEVICE , com.android.server.net.NetworkStatsAccess . checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public int getDrmObjectType ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) && ( ( null == mimeType ) || ( mimeType . equals ( STRING_CONSTANT ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return _getDrmObjectType ( mUniqueId , path , mimeType ) ; }
public void close () { synchronized ( this ) { if ( ! ( closing ) ) { closing = true ; try { textOut . close () ; out . close () ; } catch ( java.io.IOException x ) { trouble = true ; } textOut = null ; charOut = null ; out = null ; } } }
@ javax.annotation.Nonnull public static < T extends java.lang.Enum < T > > com.android.sched.util.config.id.EnumPropertyId < T > create ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.lang.String description , @ javax.annotation.Nonnull java.lang.Class < T > type , @ javax.annotation.Nonnull T [] values ) { return new com.android.sched.util.config.id.EnumPropertyId < T > ( name , description , new com.android.sched.util.codec.EnumCodec < T > ( type , values ) ) ; }
public static void printHelpProperties ( @ javax.annotation.Nonnull java.io.PrintStream printStream , @ javax.annotation.Nonnull com.android.jack.Options options ) throws java.io.IOException { com.android.sched.util.config.GatherConfigBuilder builder = options . getDefaultConfigBuilder () ; com.android.jack.CommandLine . printProperties ( printStream , builder , com.android.jack.config.id.Brest . class ) ; printStream . println () ; printStream . println ( STRING_CONSTANT ) ; printStream . println () ; com.android.jack.CommandLine . printProperties ( printStream , builder , null ) ; }
final void handleActivityConfigurationChanged ( android.os.IBinder token ) { android.app.ActivityThread.ActivityClientRecord r = mActivities . get ( token ) ; if ( ( r == null ) || ( ( r.activity ) == null ) ) { return; } if ( android.app.ActivityThread.DEBUG_CONFIGURATION ) android.util.Slog . v ( android.app.ActivityThread.TAG , ( STRING_CONSTANT + ( r.activityInfo.name ) ) ) ; android.app.ActivityThread . performConfigurationChanged ( r.activity , mCompatConfiguration ) ; android.app.ActivityThread . freeTextLayoutCachesIfNeeded ( r.activity.mCurrentConfig . diff ( mCompatConfiguration ) ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public void bleSetScanFilterManufacturerData ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.Integer manufacturerDataId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) byte [] manufacturerData , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcOptional byte [] manufacturerDataMask ) { if ( manufacturerDataMask != null ) { mScanFilterBuilder . setManufacturerData ( manufacturerDataId , manufacturerData , manufacturerDataMask ) ; } else { mScanFilterBuilder . setManufacturerData ( manufacturerDataId , manufacturerData ) ; } }
public E next () { if ( ( cursor ) == ( fence ) ) throw new java.util.NoSuchElementException () ; cursor = ( ( cursor ) - NUMBER_CONSTANT ) & ( ( elements.length ) - NUMBER_CONSTANT ) ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) E result = ( ( E ) ( elements [ cursor ] ) ) ; if ( ( ( head ) != ( fence ) ) || ( result == null ) ) throw new java.util.ConcurrentModificationException () ; lastRet = cursor ; return result ; }
private synchronized void disconnectAll () { for ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection : mConnections . values () ) { connection . onHfpDisconnected () ; } mConnections . clear () ; if ( ( mConference ) != null ) { mConference . destroy () ; mConference = null ; } }
@ java.lang.Override protected void runImpl ( final java.lang.String javaPkgName ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , java.io.IOException { try { if ( ! ( mTestStop ) ) { com.android.cts.Log . d ( STRING_CONSTANT ) ; runInIndividualMode ( javaPkgName ) ; } } catch ( com.android.cts.DeviceDisconnectedException e ) { cleanUp () ; throw e ; } }
public void copyFrom ( android.renderscript.Allocation a ) { try { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; mRS . validate () ; if ( ! ( mType . equals ( a . getType () ) ) ) { throw new android.renderscript.RSIllegalArgumentException ( STRING_CONSTANT ) ; } copy2DRangeFrom ( NUMBER_CONSTANT , NUMBER_CONSTANT , mCurrentDimX , mCurrentDimY , a , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } finally { android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; } }
public void setInternationalCurrencySymbol ( java.lang.String currencyCode ) { intlCurrencySymbol = currencyCode ; currency = null ; if ( currencyCode != null ) { try { currency = java.util.Currency . getInstance ( currencyCode ) ; currencySymbol = currency . getSymbol ( locale ) ; } catch ( java.lang.IllegalArgumentException e ) {} } cachedIcuDFS = null ; }
public void createTest ( com.android.rs.image2.Resources res ) { if ( approx ) { if ( relaxed ) mScript_approx_relaxed = new com.android.rs.image2.ScriptC_vignette_approx_relaxed ( mRS ) ; else mScript_approx_full = new com.android.rs.image2.ScriptC_vignette_approx_full ( mRS ) ; } else if ( relaxed ) mScript_relaxed = new com.android.rs.image2.ScriptC_vignette_relaxed ( mRS ) ; else mScript_full = new com.android.rs.image2.ScriptC_vignette_full ( mRS ) ; do_init () ; }
@ java.lang.Override public void close ( java.io.FileDescriptor fd ) throws android.system.ErrnoException { try { if ( fd . isSocket$ () ) { if ( libcore.io.BlockGuardOs . isLingerSocket ( fd ) ) { dalvik.system.BlockGuard . getThreadPolicy () . onNetwork () ; } } } catch ( android.system.ErrnoException ignored ) {} os . close ( fd ) ; }
private void registerForSimRecordEvents () { com.android.internal.telephony.uicc.IccRecords r = mIccRecords . get () ; if ( r == null ) { return; } r . registerForNetworkSelectionModeAutomatic ( this , com.android.internal.telephony.gsm.EVENT_SET_NETWORK_AUTOMATIC , null ) ; r . registerForRecordsEvents ( this , com.android.internal.telephony.gsm.EVENT_ICC_RECORD_EVENTS , null ) ; r . registerForRecordsLoaded ( this , com.android.internal.telephony.gsm.EVENT_SIM_RECORDS_LOADED , null ) ; }
public static boolean isEqual ( byte [] digesta , byte [] digestb ) { if ( ( digesta.length ) != ( digestb.length ) ) { return false ; } int v = NUMBER_CONSTANT ; for ( int i = NUMBER_CONSTANT ; i < ( digesta.length ) ; i ++ ) { v |= ( digesta [ i ] ) ^ ( digestb [ i ] ) ; } return v == NUMBER_CONSTANT ; }
public void testWriteAndReadBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; java.io.File folder = com.google.common.io.Files . createTempDir () ; merger . writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files . createTempDir () , mPngCruncher , false , false ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger () ; assertTrue ( loadedMerger . loadFromBlob ( folder , true ) ) ; }
public java.lang.String getPackageForIntentSender ( android.content.IIntentSender pendingResult ) { if ( ! ( pendingResult instanceof com.android.server.am.PendingIntentRecord ) ) { return null ; } try { com.android.server.am.PendingIntentRecord res = ( ( com.android.server.am.PendingIntentRecord ) ( pendingResult ) ) ; return res.key.packageName ; } catch ( java.lang.ClassCastException e ) {} return null ; }
public void assign ( java.net.HttpCookie cookie , java.lang.String attrName , java.lang.String attrValue ) { if ( ( cookie . getMaxAge () ) == ( java.net.HttpCookie.MAX_AGE_UNSPECIFIED ) ) { java.util.Date date = libcore.net.http.HttpDate . parse ( attrValue ) ; long maxAgeInSeconds = NUMBER_CONSTANT ; if ( date != null ) { maxAgeInSeconds = ( ( date . getTime () ) - ( cookie.whenCreated ) ) / NUMBER_CONSTANT ; if ( maxAgeInSeconds == ( java.net.HttpCookie.MAX_AGE_UNSPECIFIED ) ) { maxAgeInSeconds = NUMBER_CONSTANT ; } } cookie . setMaxAge ( maxAgeInSeconds ) ; } }
public static java.lang.String toString ( java.lang.String [] [] M ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; builder . append ( STRING_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; i < ( M.length ) ; ++ i ) { if ( i > NUMBER_CONSTANT ) { builder . append ( STRING_CONSTANT ) ; } builder . append ( com.android.commands.hidl_test_java.HidlTestJava . toString ( M [ i ] ) ) ; } builder . append ( STRING_CONSTANT ) ; return builder . toString () ; }
protected org.bouncycastle.asn1.x9.X9ECParameters createParameters () { java.math.BigInteger n = new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) ; java.math.BigInteger h = java.math.BigInteger . valueOf ( NUMBER_CONSTANT ) ; org.bouncycastle.math.ec.ECCurve cFp239v2 = new org.bouncycastle.math.ec.ECCurve.Fp ( new java.math.BigInteger ( STRING_CONSTANT ) , new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) , new java.math.BigInteger ( STRING_CONSTANT , NUMBER_CONSTANT ) , n , h ) ; return new org.bouncycastle.asn1.x9.X9ECParameters ( cFp239v2 , cFp239v2 . decodePoint ( org.bouncycastle.util.encoders.Hex . decode ( STRING_CONSTANT ) ) , n , h , org.bouncycastle.util.encoders.Hex . decode ( STRING_CONSTANT ) ) ; }
public void ioSend () { try { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; if ( ( ( mUsage ) & ( android.renderscript.Allocation.USAGE_IO_OUTPUT ) ) == NUMBER_CONSTANT ) { throw new android.renderscript.RSIllegalArgumentException ( STRING_CONSTANT ) ; } mRS . validate () ; mRS . nAllocationIoSend ( getID ( mRS ) ) ; } finally { android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; } }
@ org.junit.Test public void publicMethods ( ) throws java.lang.Exception { assertNotNull ( com.android.volley.toolbox.ImageRequest . class . getConstructor ( java.lang.String . class , Response.Listener . class , int . class , int . class , android.graphics.Bitmap.Config . class , Response.ErrorListener . class ) ) ; assertNotNull ( com.android.volley.toolbox.ImageRequest . class . getConstructor ( java.lang.String . class , Response.Listener . class , int . class , int . class , android.widget.ImageView.ScaleType . class , android.graphics.Bitmap.Config . class , Response.ErrorListener . class ) ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS , NUMBER_CONSTANT ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_MAX_RETRIES , NUMBER_CONSTANT ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
@ java.lang.Override public final java.nio.ByteBuffer duplicate () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return new java.nio.DirectByteBuffer ( memoryRef , this . markValue () , this . position () , this . limit () , this . capacity () , offset , isReadOnly ) ; }
private boolean denyIfQueueLimitReached ( com.android.internal.telephony.SMSDispatcher.SmsTracker tracker ) { if ( ( mPendingTrackerCount ) >= ( com.android.internal.telephony.SMSDispatcher.MO_MSG_QUEUE_LIMIT ) ) { try { if ( ( tracker.mSentIntent ) != null ) { tracker.mSentIntent . send ( android.telephony.SmsManager.RESULT_ERROR_LIMIT_EXCEEDED ) ; } } catch ( android.app.PendingIntent.CanceledException ex ) { android.util.Log . e ( com.android.internal.telephony.SMSDispatcher.TAG , STRING_CONSTANT ) ; } return true ; } ( mPendingTrackerCount ) ++ ; return false ; }
public void close ( ) throws java.io.IOException { if ( closed ) { return; } closed = true ; try { obuffer = cipher . doFinal () ; } catch ( javax.crypto.IllegalBlockSizeException | javax.crypto.BadPaddingException e ) { obuffer = null ; throw new java.io.IOException ( e ) ; } try { flush () ; } catch ( java.io.IOException ignored ) {} out . close () ; }
public void test_getSoTimeout ( ) throws java.lang.Exception { try ( java.net.DatagramSocket ds = new java.net.DatagramSocket () ) { final int timeoutSet = NUMBER_CONSTANT ; ds . setSoTimeout ( timeoutSet ) ; int actualTimeout = ds . getSoTimeout () ; assertTrue ( STRING_CONSTANT , ( ( java.lang.Math . abs ( ( actualTimeout - timeoutSet ) ) ) <= NUMBER_CONSTANT ) ) ; } }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo ) throws java.lang.Exception { com.android.jack.TestTools . checkStructure ( classpath , fileOrSourceList , withDebugInfo , false , NUMBER_CONSTANT , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [] ) ( null ) ) ) ; }
public static synchronized void setChannelDataVersion ( android.content.Context context , int version ) { if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { com.android.tv.tuner.TunerPreferences . setPreference ( context , com.android.tv.tuner.TunerPreferences.PREFS_KEY_CHANNEL_DATA_VERSION , version ) ; } else { com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . edit () . putInt ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_CHANNEL_DATA_VERSION , version ) . apply () ; } }
static com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute parseString ( java.lang.String value ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute.REGEXP . matcher ( value ) ; if ( m . matches () ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute ( m . group ( NUMBER_CONSTANT ) , m . group ( NUMBER_CONSTANT ) , m . group ( NUMBER_CONSTANT ) ) ; } return null ; }
private static com.android.jack.dx.rop.code.RopMethod optimizeMinimizeRegisters ( com.android.jack.dx.rop.code.RopMethod rmeth , int paramWidth , boolean isStatic , java.util.EnumSet < com.android.jack.dx.ssa.Optimizer.OptionalStep > steps ) { com.android.jack.dx.ssa.SsaMethod ssaMeth ; com.android.jack.dx.rop.code.RopMethod resultMeth ; ssaMeth = com.android.jack.dx.ssa.SsaConverter . convertToSsaMethod ( rmeth , paramWidth , isStatic ) ; java.util.EnumSet < com.android.jack.dx.ssa.Optimizer.OptionalStep > newSteps = steps . clone () ; newSteps . remove ( com.android.jack.dx.ssa.Optimizer.OptionalStep.CONST_COLLECTOR ) ; com.android.jack.dx.ssa.Optimizer . runSsaFormSteps ( ssaMeth , newSteps ) ; resultMeth = com.android.jack.dx.ssa.back.SsaToRop . convertToRopMethod ( ssaMeth ) ; return resultMeth ; }
@ java.lang.Override public void onPageFinished ( android.webkit.WebView view , java.lang.String url ) { if ( ! ( isPrivateBrowsingEnabled () ) ) { com.android.browser.LogTag . logPageFinishedLoading ( url , ( ( android.os.SystemClock . uptimeMillis () ) - ( mLoadStartTime ) ) ) ; } syncCurrentState ( view , url ) ; mWebViewController . onPageFinished ( this ) ; }
public boolean find ( int start ) { if ( ( start < NUMBER_CONSTANT ) || ( start > ( input . length () ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( STRING_CONSTANT + start ) + STRING_CONSTANT ) + ( input . length () ) ) ) ; } synchronized ( this ) { matchFound = java.util.regex.Matcher . findImpl ( address , input , start , matchOffsets ) ; } return matchFound ; }
public void run () { com.android.rs.test_v16.RenderScript pRS = com.android.rs.test_v16.RenderScript . create ( mCtx ) ; pRS . setMessageHandler ( mRsMessage ) ; com.android.rs.test_v16.ScriptC_refcount s = new com.android.rs.test_v16.ScriptC_refcount ( pRS ) ; initializeGlobals ( pRS , s ) ; s . invoke_refcount_test () ; pRS . finish () ; waitForMessage () ; pRS . destroy () ; }
private static void assertValues ( android.net.NetworkStatsHistory stats , long start , long end , long rxBytes , long rxPackets , long txBytes , long txPackets , int operations ) { final android.net.NetworkStatsHistory.Entry entry = stats . getValues ( start , end , null ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , rxBytes , entry.rxBytes ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , rxPackets , entry.rxPackets ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , txBytes , entry.txBytes ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , txPackets , entry.txPackets ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , operations , entry.operations ) ; }
static int amToHfVol ( int amVol ) { int amRange = ( ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMaxAmVcVol ) > ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMinAmVcVol ) ) ? ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMaxAmVcVol ) - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMinAmVcVol ) : NUMBER_CONSTANT ; int hfRange = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MAX_HFP_SCO_VOICE_CALL_VOLUME ) - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MIN_HFP_SCO_VOICE_CALL_VOLUME ) ; int hfOffset = ( hfRange * ( amVol - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMinAmVcVol ) ) ) / amRange ; int hfVol = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MIN_HFP_SCO_VOICE_CALL_VOLUME ) + hfOffset ; android.util.Log . d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( STRING_CONSTANT + amVol ) + STRING_CONSTANT ) + hfVol ) ) ; return hfVol ; }
public void configure ( org.bouncycastle.jcajce.provider.config.ConfigurableProvider provider ) { provider . addAlgorithm ( STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.symmetric.Blowfish.Mappings.PREFIX ) + STRING_CONSTANT ) ) ; provider . addAlgorithm ( STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.symmetric.Blowfish.Mappings.PREFIX ) + STRING_CONSTANT ) ) ; provider . addAlgorithm ( STRING_CONSTANT , STRING_CONSTANT ) ; provider . addAlgorithm ( STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.symmetric.Blowfish.Mappings.PREFIX ) + STRING_CONSTANT ) ) ; provider . addAlgorithm ( STRING_CONSTANT , STRING_CONSTANT ) ; }
public boolean isEmpty () { int n = names.length ; for ( int i = NUMBER_CONSTANT ; i < n ; i ++ ) { if ( ( names [ i ] . assertion . length ) != NUMBER_CONSTANT ) { return false ; } } return true ; }
private void dispatchChange ( boolean selfChange , android.net.Uri uri , int userId ) { if ( ( mHandler ) == null ) { onChange ( selfChange , uri , userId ) ; } else { mHandler . post ( new android.database.ContentObserver.NotificationRunnable ( selfChange , uri , userId ) ) ; } }
public boolean unregisterApp () { boolean result = false ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { result = service . unregisterApp () ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return result ; }
@ java.lang.Override public void run () { while ( true ) { java.lang.Runnable r = null ; synchronized ( mThingsToLoad ) { if ( ( mThingsToLoad . size () ) == NUMBER_CONSTANT ) { try { mThingsToLoad . wait () ; } catch ( java.lang.InterruptedException ex ) { break; } } if ( ( mThingsToLoad . size () ) > NUMBER_CONSTANT ) { r = mThingsToLoad . remove ( NUMBER_CONSTANT ) ; } } if ( r != null ) { r . run () ; } } }
@ com.android.annotations.Nullable public java.util.Properties getProjectProperties ( ) throws java.io.IOException { if ( ( mProjectProperties ) == null ) { assert isAndroidProject () ; java.io.File file = getProjectPropertiesFile () ; if ( file . exists () ) { mProjectProperties = com.android.tools.gradle.eclipse.GradleImport . getProperties ( file ) ; } else { mProjectProperties = new java.util.Properties () ; } } return mProjectProperties ; }
@ com.android.annotations.NonNull @ java.lang.Override public java.util.Set < java.lang.String > getApplicableFilters () { java.util.LinkedHashSet < java.lang.String > filters = new java.util.LinkedHashSet < java.lang.String > () ; if ( isEnable () ) { filters . add ( com.android.build.OutputFile.NO_FILTER ) ; } filters . addAll ( super . getApplicableFilters () ) ; return filters ; }
public void test_close ( ) throws java.lang.Exception { zos = new java.util.zip.ZipOutputStream ( bos ) ; zos . putNextEntry ( new java.util.zip.ZipEntry ( STRING_CONSTANT ) ) ; zos . closeEntry () ; zos . close () ; java.util.zip.ZipOutputStream zos = new java.util.zip.ZipOutputStream ( new java.io.ByteArrayOutputStream () ) ; zos . putNextEntry ( new java.util.zip.ZipEntry ( STRING_CONSTANT ) ) ; zos . close () ; zos . close () ; }
void disconnectMap ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) { android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } if ( ( ( com.android.bluetooth.map.BluetoothMapService . getRemoteDevice () ) != null ) && ( com.android.bluetooth.map.BluetoothMapService . getRemoteDevice () . equals ( device ) ) ) { switch ( mState ) { case android.bluetooth.BluetoothMap.STATE_CONNECTED : stopObexServerSessions ( ( - NUMBER_CONSTANT ) ) ; break; default: break; } } }
private static org.bouncycastle.math.ec.ECFieldElement trace ( org.bouncycastle.math.ec.ECFieldElement fe ) { org.bouncycastle.math.ec.ECFieldElement t = fe ; for ( int i = NUMBER_CONSTANT ; i < ( fe . getFieldSize () ) ; ++ i ) { t = t . square () . add ( fe ) ; } return t ; }
public void test_getLocalAddress ( ) throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress . getLocalHost () ; try ( java.net.DatagramSocket ds = new java.net.DatagramSocket ( NUMBER_CONSTANT , local ) ) { assertEquals ( java.net.InetAddress . getByName ( java.net.InetAddress . getLocalHost () . getHostName () ) , ds . getLocalAddress () ) ; } try ( java.net.DatagramSocket s = new java.net.DatagramSocket ( NUMBER_CONSTANT ) ) { assertTrue ( ( STRING_CONSTANT + ( s . getLocalSocketAddress () ) ) , ( ( s . getLocalAddress () ) instanceof java.net.Inet6Address ) ) ; } }
private void loadClass ( ) throws java.io.IOException { java.io.DataInputStream in = mInput ; in . readInt () ; long id = readId () ; in . readInt () ; java.lang.String name = mStrings . get ( readId () ) ; mClassNames . put ( id , name ) ; }
@ java.lang.Override public boolean disconnect () { boolean result = false ; com.android.nfc.dhimpl.NativeNfcTag.PresenceCheckWatchdog watchdog ; synchronized ( this ) { mIsPresent = false ; watchdog = mWatchdog ; } if ( watchdog != null ) { watchdog . end ( false ) ; try { watchdog . join () ; } catch ( java.lang.InterruptedException e ) {} synchronized ( this ) { mWatchdog = null ; } result = true ; } else { result = doDisconnect () ; } mConnectedTechIndex = - NUMBER_CONSTANT ; mConnectedHandle = - NUMBER_CONSTANT ; return result ; }
@ java.lang.Override public final java.nio.ByteBuffer putDouble ( int i , double x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putDouble ( ix ( checkIndex ( i , SizeOf.DOUBLE ) ) , x ) ; return this ; }
public void run () { com.android.rs.test_compat.RenderScript pRS = com.android.rs.test_compat.RenderScript . create ( mCtx ) ; com.android.rs.test_compat.ScriptC_int4 s = new com.android.rs.test_compat.ScriptC_int4 ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; s . invoke_int4_test () ; pRS . finish () ; waitForMessage () ; pRS . destroy () ; }
@ java.lang.Override public void createControl ( org.eclipse.swt.widgets.Composite parent ) { assert parent != null ; mPropertyTable = new org.eclipse.wb.internal.core.model.property.table.PropertyTable ( parent , org.eclipse.swt.SWT.NONE ) ; mPropertyTable . setExceptionHandler ( new org.eclipse.wb.internal.core.model.property.table.IPropertyExceptionHandler () { @ java.lang.Override public void handle ( java.lang.Throwable e ) { com.android.ide.eclipse.adt.AdtPlugin . log ( e , null ) ; } } ) ; mPropertyTable . setDefaultCollapsedNames ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT ) ) ; createActions () ; setPropertyTableContextMenu () ; }
public static void create ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) throws com.android.sched.util.file.CannotCreateFileException , com.android.sched.util.file.FileAlreadyExistsException { if ( file . mkdir () ) { com.android.sched.util.file.Directory.logger . log ( java.util.logging.Level.FINE , STRING_CONSTANT , new java.lang.Object [] { location . getDescription () , file . getAbsoluteFile () } ) ; } else { if ( ! ( file . exists () ) ) { throw new com.android.sched.util.file.CannotCreateFileException ( location ) ; } else { throw new com.android.sched.util.file.FileAlreadyExistsException ( location ) ; } } }
@ java.lang.Override public void testSaveProperties () { java.util.Properties expected = createExpectedProps () ; com.android.sdklib.internal.repository.packages.MinToolsPackageTest.MockMinToolsPackage p = new com.android.sdklib.internal.repository.packages.MinToolsPackageTest.MockMinToolsPackage ( null , expected , ( - NUMBER_CONSTANT ) , null , null , null , LOCAL_ARCHIVE_PATH ) ; java.util.Properties actual = new java.util.Properties () ; p . saveProperties ( actual ) ; assertEquals ( expected , actual ) ; }
public static int exec ( com.android.jack.ir.ast.JExpression expression ) { com.android.jack.ir.impl.JavaPrecedenceVisitor visitor = new com.android.jack.ir.impl.JavaPrecedenceVisitor () ; visitor . accept ( expression ) ; assert ( visitor.answer ) >= NUMBER_CONSTANT : ( ( STRING_CONSTANT + ( expression . toString () ) ) + STRING_CONSTANT ) + ( expression . getClass () . toString () ) ; return visitor.answer ; }
public void testWifiFeature ( ) throws java.lang.Exception { if ( ! ( mPackageManager . hasSystemFeature ( PackageManager.FEATURE_WIFI ) ) ) { return; } boolean enabled = mWifiManager . isWifiEnabled () ; try { assertTrue ( mWifiManager . setWifiEnabled ( ( ! enabled ) ) ) ; } finally { mWifiManager . setWifiEnabled ( enabled ) ; } }
static com.android.ide.common.res2.ResourceMerger.MergedResourceItem getMergedResourceItem ( @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.NonNull java.lang.String qualifiers ) { com.android.resources.ResourceType type = com.android.ide.common.res2.ValueResourceParser2 . getType ( node , null ) ; java.lang.String name = com.android.ide.common.res2.ValueResourceParser2 . getName ( node ) ; if ( ( name != null ) && ( type != null ) ) { return new com.android.ide.common.res2.ResourceMerger.MergedResourceItem ( name , type , qualifiers , node ) ; } return null ; }
public static libcore.javax.net.ssl.TestSSLContext create ( libcore.java.security.TestKeyStore client , libcore.java.security.TestKeyStore server ) { java.lang.String protocol = STRING_CONSTANT ; javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext . createSSLContext ( protocol , client.keyManagers , client.trustManagers ) ; javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext . createSSLContext ( protocol , server.keyManagers , server.trustManagers ) ; return libcore.javax.net.ssl.TestSSLContext . create ( client.keyStore , client.storePassword , server.keyStore , server.storePassword , client.keyManagers [ NUMBER_CONSTANT ] , server.keyManagers [ NUMBER_CONSTANT ] , client.trustManagers [ NUMBER_CONSTANT ] , server.trustManagers [ NUMBER_CONSTANT ] , clientContext , serverContext ) ; }
private void updateNewIds ( int addrId , int browseId ) { mCurrAddrPlayerID = addrId ; mCurrBrowsePlayerID = browseId ; if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( ( ( ( ( ( STRING_CONSTANT + ( mCurrAddrPlayerID ) ) + STRING_CONSTANT ) + addrId ) + STRING_CONSTANT ) + ( mCurrBrowsePlayerID ) ) + STRING_CONSTANT ) + browseId ) ) ; }
public void test_markI ( ) throws java.io.IOException { java.io.InputStream is = new java.io.ByteArrayInputStream ( new byte [ NUMBER_CONSTANT ] ) ; try ( java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( is ) ) { iis . mark ( NUMBER_CONSTANT ) ; iis . mark ( ( - NUMBER_CONSTANT ) ) ; iis . mark ( NUMBER_CONSTANT ) ; } }
public void test_SSL_get_mode ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_get_mode ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_new () ; int s = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_new ( c ) ; assertTrue ( ( ( org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_get_mode ( s ) ) != NUMBER_CONSTANT ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_free ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_free ( c ) ; }
@ org.junit.Test public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable () { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder () . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build () ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback () ; final int timeoutMs = NUMBER_CONSTANT ; mCm . requestNetwork ( nr , networkCallback , timeoutMs ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; mWiFiNetworkAgent . connect ( false ) ; networkCallback . expectAvailableCallbacks ( mWiFiNetworkAgent , false , false , timeoutMs ) ; networkCallback . assertNoCallback () ; }
boolean setBounds ( android.graphics.Rect bounds ) { boolean oldFullscreen = mFullscreen ; if ( ( mDisplayContent ) != null ) { mDisplayContent . getLogicalDisplayRect ( mTmpRect ) ; mFullscreen = mTmpRect . equals ( bounds ) ; } if ( ( mBounds . equals ( bounds ) ) && ( oldFullscreen == ( mFullscreen ) ) ) { return false ; } mDimLayer . setBounds ( bounds , false ) ; mAnimationBackgroundSurface . setBounds ( bounds , false ) ; mBounds . set ( bounds ) ; return true ; }
public static android.telecom.DisconnectCause toTelecomDisconnectCause ( int telephonyDisconnectCause , java.lang.String reason ) { android.content.Context context = com.android.phone.PhoneGlobals . getInstance () ; return new android.telecom.DisconnectCause ( com.android.services.telephony.DisconnectCauseUtil . toTelecomDisconnectCauseCode ( telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil . toTelecomDisconnectCauseLabel ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil . toTelecomDisconnectCauseDescription ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil . toTelecomDisconnectReason ( context , telephonyDisconnectCause , reason ) , com.android.services.telephony.DisconnectCauseUtil . toTelecomDisconnectCauseTone ( telephonyDisconnectCause ) ) ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { if ( mHasFeature ) { if ( mRemoveOwnerInTearDown ) { assertTrue ( STRING_CONSTANT , removeAdmin ( ( ( ( com.android.cts.devicepolicy.UserRestrictionsTest.DEVICE_ADMIN_PKG ) + STRING_CONSTANT ) + ( com.android.cts.devicepolicy.UserRestrictionsTest.ADMIN_RECEIVER_TEST_CLASS ) ) , mDeviceOwnerUserId ) ) ; assertTrue ( STRING_CONSTANT , runTests ( STRING_CONSTANT , mDeviceOwnerUserId ) ) ; } removeTestUsers () ; } super . tearDown () ; }
void internalDelete ( @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotDeleteFileException { ensureFullyLoaded () ; synchronized ( wrappedDirs ) { for ( com.android.sched.vfs.BaseVDir wrappedDir : wrappedDirs ) { try { com.android.sched.vfs.BaseVFile vFile = wrappedDir . getVFile ( name ) ; wrappedDir . delete ( vFile ) ; } catch ( com.android.sched.util.file.NotFileException e ) {} catch ( com.android.sched.util.file.NoSuchFileException e ) {} } } }
@ org.junit.Test public void test_EVP_CIPHER_iv_length ( ) throws java.lang.Exception { long aes128ecb = org.conscrypt.NativeCrypto . EVP_get_cipherbyname ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , org.conscrypt.NativeCrypto . EVP_CIPHER_iv_length ( aes128ecb ) ) ; long aes128cbc = org.conscrypt.NativeCrypto . EVP_get_cipherbyname ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , org.conscrypt.NativeCrypto . EVP_CIPHER_iv_length ( aes128cbc ) ) ; }
@ android.test.suitebuilder.annotation.LargeTest @ org.junit.Test public void testOutgoingCallSelectPhoneAccountVideo ( ) throws java.lang.Exception { startOutgoingPhoneCallPendingCreateConnection ( STRING_CONSTANT , null , mConnectionServiceFixtureA , java.lang.Process . myUserHandle () , VideoProfile.STATE_BIDIRECTIONAL ) ; android.telecom.com.android.server.telecom.Call call = mTelecomSystem . getCallsManager () . getCalls () . iterator () . next () ; assert call . isVideoCallingSupported () ; org.junit.Assert . assertEquals ( VideoProfile.STATE_BIDIRECTIONAL , call . getVideoState () ) ; call . setTargetPhoneAccount ( mPhoneAccountA1 . getAccountHandle () ) ; assert call . isVideoCallingSupported () ; org.junit.Assert . assertEquals ( VideoProfile.STATE_BIDIRECTIONAL , call . getVideoState () ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public java.util.Collection < com.android.sched.marker.Marker > getAllMarkers () { synchronized ( lock ) { if ( ( markers ) == null ) { return com.android.sched.marker.LocalMarkerManager.EMPTY_MARKER ; } for ( com.android.sched.marker.Marker marker : markers . values () ) { assert checkGetAccess ( marker . getClass () ) ; } assert ( markers ) != null ; return markers . values () ; } }
static void decode ( byte [] input , char [] expectedOutput ) throws java.nio.charset.CharacterCodingException { java.nio.ByteBuffer inputBB = java.nio.ByteBuffer . wrap ( input ) ; libcore.java.nio.charset.OldCharset_AbstractTest.decoder . onMalformedInput ( java.nio.charset.CodingErrorAction.REPORT ) ; java.nio.CharBuffer outputCB = libcore.java.nio.charset.OldCharset_AbstractTest.decoder . decode ( inputBB ) ; outputCB . rewind () ; libcore.java.nio.charset.OldCharset_AbstractTest . assertEqualChars ( expectedOutput , outputCB ) ; }
static java.net.InetAddress disallowDeprecatedFormats ( java.lang.String address , java.net.InetAddress inetAddress ) { if ( ( ! ( inetAddress instanceof java.net.Inet4Address ) ) || ( ( address . indexOf ( CHAR_CONS ) ) != ( - NUMBER_CONSTANT ) ) ) { return inetAddress ; } return Libcore.os . inet_pton ( java.net.AF_INET , address ) ; }
synchronized void dropClient ( com.android.ddmlib.Client client , boolean notify ) { if ( ( com.android.ddmlib.MonitorThread.sInstance ) == null ) { return; } synchronized ( mClientList ) { if ( ! ( mClientList . remove ( client ) ) ) { return; } } client . close ( notify ) ; broadcast ( com.android.ddmlib.MonitorThread.CLIENT_DISCONNECTED , client ) ; wakeup () ; }
@ java.lang.Override protected int buildConnectionCapabilities () { int capabilities = super . buildConnectionCapabilities () ; capabilities |= CAPABILITY_MUTE ; if ( ! ( shouldTreatAsEmergencyCall () ) ) { capabilities |= CAPABILITY_SUPPORT_HOLD ; if ( ( ( getState () ) == ( STATE_ACTIVE ) ) || ( ( getState () ) == ( STATE_HOLDING ) ) ) { capabilities |= CAPABILITY_HOLD ; } } return capabilities ; }
public java.lang.Boolean run () { java.lang.Class < > clazz = impl . getClass () ; while ( true ) { try { clazz . getDeclaredMethod ( STRING_CONSTANT , java.net.SocketAddress . class , int . class ) ; return java.lang.Boolean.FALSE ; } catch ( java.lang.NoSuchMethodException e ) { clazz = clazz . getSuperclass () ; if ( clazz . equals ( java.net.SocketImpl . class ) ) { return java.lang.Boolean.TRUE ; } } } }
public static void create ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) throws com.android.sched.util.file.CannotCreateFileException , com.android.sched.util.file.FileAlreadyExistsException { try { if ( file . createNewFile () ) { com.android.sched.util.file.AbstractStreamFile.logger . log ( java.util.logging.Level.FINE , STRING_CONSTANT , new java.lang.Object [] { location . getDescription () , file . getAbsoluteFile () } ) ; return; } } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( location , e ) ; } throw new com.android.sched.util.file.FileAlreadyExistsException ( location ) ; }
public static org.eclipse.swt.graphics.Image getImage ( java.lang.String path ) { org.eclipse.swt.graphics.Image image = org.eclipse.wb.internal.core.DesignerPlugin.sImageCache . get ( path ) ; if ( image == null ) { org.eclipse.jface.resource.ImageDescriptor descriptor = org.eclipse.wb.internal.core.DesignerPlugin . getImageDescriptor ( path ) ; if ( descriptor != null ) { image = descriptor . createImage () ; } org.eclipse.wb.internal.core.DesignerPlugin.sImageCache . put ( path , image ) ; } return image ; }
@ java.lang.Override public final java.nio.ByteBuffer putFloat ( int i , float x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putFloat ( ix ( checkIndex ( i , SizeOf.FLOAT ) ) , x ) ; return this ; }
public void test_wrap_ByteBuffer$ByteBuffer_01 ( ) throws java.lang.Exception { prepareEngines () ; doHandshake () ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; clientEngine.engine . wrap ( new java.nio.ByteBuffer [] { bbs } , bbd ) ; serverEngine.engine . wrap ( new java.nio.ByteBuffer [] { bbs } , bbd ) ; }
@ java.lang.Override public java.io.File call ( ) throws java.lang.Exception { final com.android.builder.sdk.TargetInfo info = androidBuilder . getTargetInfo () ; if ( info != null ) { java.lang.String path = info . getBuildTools () . getPath ( com.android.sdklib.BuildToolInfo.PathId.ZIP_ALIGN ) ; if ( path != null ) { return new java.io.File ( path ) ; } } return null ; }
void onTargetPackageAdded ( @ android.annotation.NonNull final java.lang.String packageName , final int userId ) { if ( com.android.server.om.OverlayManagerService.DEBUG ) { android.util.Slog . d ( com.android.server.om.OverlayManagerService.TAG , ( ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) + userId ) ) ; } final android.content.pm.PackageInfo targetPackage = mPackageManager . getPackageInfo ( packageName , userId ) ; updateAllOverlaysForTarget ( packageName , userId , targetPackage ) ; mListener . onOverlaysChanged ( packageName , userId ) ; }
private static void waitForIdleHandler ( android.os.HandlerThread handlerThread , int timeoutMs ) { final android.os.ConditionVariable cv = new android.os.ConditionVariable () ; final android.os.Handler handler = new android.os.Handler ( handlerThread . getLooper () ) ; handler . post ( ( ) - > cv . open () ) ; if ( ! ( cv . block ( timeoutMs ) ) ) { fail ( ( ( ( ( STRING_CONSTANT + ( handlerThread . getName () ) ) + STRING_CONSTANT ) + timeoutMs ) + STRING_CONSTANT ) ) ; } }
protected < U extends com.android.sched.item.Component > void runWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.RunnableSchedulable < U > runner , @ javax.annotation.Nonnull U data ) throws java.lang.Exception { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager . getManagedSchedulable ( runner . getClass () ) ; java.util.Stack < com.android.sched.scheduler.ScheduleInstance.ElementStack > visitStack = com.android.sched.scheduler.ScheduleInstance.tlsVisitStack . get () ; visitStack . push ( new com.android.sched.scheduler.ScheduleInstance.ElementStack ( features , managedSchedulable ) ) ; com.android.sched.util.log.Event event = logAndTrace ( runner , managedSchedulable , data ) ; try { runner . run ( data ) ; } finally { event . end () ; } visitStack . pop () ; }
public void testInstallEmptySystemExists ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; store . installCertificate ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; }
private static java.awt.image.BufferedImage convertTo9Patch ( java.awt.image.BufferedImage image ) { java.awt.image.BufferedImage buffer = com.android.draw9patch.graphics.GraphicsUtilities . createTranslucentCompatibleImage ( ( ( image . getWidth () ) + NUMBER_CONSTANT ) , ( ( image . getHeight () ) + NUMBER_CONSTANT ) ) ; java.awt.Graphics2D g2 = buffer . createGraphics () ; g2 . drawImage ( image , NUMBER_CONSTANT , NUMBER_CONSTANT , null ) ; g2 . dispose () ; return buffer ; }
public void testStageInstallWithErrorCode_missingTzLookupFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer . stageInstallWithErrorCode ( stagedDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , NUMBER_CONSTANT ) . setTzLookupXml ( null ) . buildUnvalidated () ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer . stageInstallWithErrorCode ( incompleteDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro () ; }
public void testZipFileLargerThan2GiB ( ) throws java.io.IOException { if ( false ) { java.io.File f = libcore.java.util.zip.ZipFileTest . createZipFile ( NUMBER_CONSTANT , ( ( NUMBER_CONSTANT * NUMBER_CONSTANT ) * NUMBER_CONSTANT ) ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( f ) ; int entryCount = NUMBER_CONSTANT ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > e = zipFile . entries () ; e . hasMoreElements () ; ) { e . nextElement () ; ++ entryCount ; } assertEquals ( NUMBER_CONSTANT , entryCount ) ; zipFile . close () ; } }
public void testDensityOnlyWithCustomDeviceDensity () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput ( NUMBER_CONSTANT ) ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getDensityOutput ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putChar ( int i , char x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putChar ( ix ( checkIndex ( i , SizeOf.CHAR ) ) , x ) ; return this ; }
public int stopSendingOffloadedPacket ( int slot ) { android.util.Log . d ( com.android.server.wifi.WifiNative.TAG , ( STRING_CONSTANT + slot ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { return com.android.server.wifi.WifiNative . stopSendingOffloadedPacketNative ( com.android.server.wifi.WifiNative.sWlan0Index , slot ) ; } else { return - NUMBER_CONSTANT ; } } }
private void updateLocalMediaPath ( java.io.File mediaFolder ) throws com.android.tradefed.targetprep.TargetSetupError { java.lang.String [] subDirs = mediaFolder . list () ; if ( ( subDirs.length ) != NUMBER_CONSTANT ) { throw new com.android.tradefed.targetprep.TargetSetupError ( java.lang.String . format ( STRING_CONSTANT , mediaFolder . getAbsolutePath () ) ) ; } mLocalMediaPath = new java.io.File ( mediaFolder , subDirs [ NUMBER_CONSTANT ] ) . getAbsolutePath () ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.AssetMerger merger = com.android.ide.common.res2.AssetMergerTest . getAssetMerger () ; java.io.File folder = com.google.common.io.Files . createTempDir () ; merger . writeBlobTo ( folder ) ; com.android.ide.common.res2.AssetMerger loadedMerger = new com.android.ide.common.res2.AssetMerger () ; loadedMerger . loadFromBlob ( folder , true ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public void propertyChange ( org.eclipse.core.runtime.Preferences.PropertyChangeEvent event ) { com.android.ide.eclipse.adt.internal.preferences.AdtPrefs . getPrefs () . loadValues ( event ) ; if ( AdtPrefs.PREFS_SDK_DIR . equals ( event . getProperty () ) ) { com.android.ide.eclipse.ddms.DdmsPlugin . setAdb ( com.android.ide.eclipse.adt.AdtPlugin . getOsAbsoluteAdb () , true ) ; if ( checkSdkLocationAndId () ) { reparseSdk () ; } } }
private static void assertSupportedCipherSuites ( java.util.Set < java.lang.String > expected , java.lang.String [] cipherSuites ) { java.util.Set < java.lang.String > remainingCipherSuites = libcore.java.security.StandardNames . assertValidCipherSuites ( expected , cipherSuites ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , java.util.Collections.EMPTY_SET , remainingCipherSuites ) ; org.junit.Assert . assertEquals ( expected . size () , cipherSuites.length ) ; }
@ java.lang.Override public void startScan ( int scannerId , android.bluetooth.le.ScanSettings settings , java.util.List < android.bluetooth.le.ScanFilter > filters , java.util.List storages , java.lang.String callingPackage ) { com.android.bluetooth.gatt.GattService service = getService () ; if ( service == null ) return; service . startScan ( scannerId , settings , filters , storages , callingPackage ) ; }
private void addScriptChars ( com.ibm.icu.util.ULocale locale , com.ibm.icu.text.UnicodeSet allowedChars ) { int [] scripts = com.ibm.icu.lang.UScript . getCode ( locale ) ; if ( scripts != null ) { com.ibm.icu.text.UnicodeSet tmpSet = new com.ibm.icu.text.UnicodeSet () ; for ( int i = NUMBER_CONSTANT ; i < ( scripts.length ) ; i ++ ) { tmpSet . applyIntPropertyValue ( UProperty.SCRIPT , scripts [ i ] ) ; allowedChars . addAll ( tmpSet ) ; } } }
public static android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( android.content.Context context , int subId ) { android.content.ComponentName componentName = com.android.phone.vvm.RemoteVvmTaskManager . getRemotePackage ( context , subId ) ; java.lang.String packageName ; if ( componentName == null ) { packageName = com.android.phone.VisualVoicemailSmsFilterConfig.DEFAULT_PACKAGE ; } else { packageName = componentName . getPackageName () ; } return com.android.phone.VisualVoicemailSmsFilterConfig . getVisualVoicemailSmsFilterSettings ( context , packageName , subId ) ; }
static short FindLMBCSLocale ( java.lang.String LocaleID ) { int index = NUMBER_CONSTANT ; if ( LocaleID == null ) { return NUMBER_CONSTANT ; } while ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID ) != null ) { if ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID . equals ( LocaleID ) ) { return com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . OptGroup ; } else if ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID . compareTo ( LocaleID ) ) > NUMBER_CONSTANT ) { break; } index ++ ; } return com.ibm.icu.charset.CharsetLMBCS.ULMBCS_GRP_L1 ; }
private boolean cleanUp ( java.lang.ref.Reference < > reference ) { java.lang.reflect.Method finalizeReferentMethod = getFinalizeReferentMethod () ; if ( finalizeReferentMethod == null ) { return false ; } do { reference . clear () ; if ( reference == ( frqReference ) ) { return false ; } try { finalizeReferentMethod . invoke ( reference ) ; } catch ( java.lang.Throwable t ) { com.google.common.base.internal.Finalizer.logger . log ( java.util.logging.Level.SEVERE , STRING_CONSTANT , t ) ; } } while ( ( reference = queue . poll () ) != null ) ; return true ; }
@ org.junit.Test public void scanWithHiddenNetwork ( ) throws java.lang.Exception { addNetworkAndVerifySuccess ( true ) ; mWsm . setOperationalMode ( WifiStateMachine.CONNECT_MODE ) ; mWsm . startScan ( ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , null , null ) ; mLooper . dispatchAll () ; verifyScan ( WifiScanner.WIFI_BAND_BOTH_WITH_DFS , ( ( android.net.wifi.WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) | ( android.net.wifi.WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT ) ) , null ) ; }
public void testLastModified ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . addHeader ( STRING_CONSTANT , STRING_CONSTANT ) . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; connection . connect () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , connection . getLastModified () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , connection . getHeaderFieldDate ( STRING_CONSTANT , ( - NUMBER_CONSTANT ) ) ) ; }
public void writeTo ( java.io.OutputStream out , java.io.Writer humanOut , boolean verbose ) throws java.io.IOException { boolean annotate = humanOut != null ; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0 ( annotate , verbose ) ; if ( out != null ) { out . write ( result . getArray () ) ; } if ( annotate ) { result . writeAnnotationsTo ( humanOut ) ; } }
@ com.android.annotations.NonNull public static com.android.builder.model.ApiVersion create ( @ com.android.annotations.NonNull java.lang.Object value ) { if ( value instanceof java.lang.Integer ) { return new com.android.builder.core.DefaultApiVersion ( ( ( java.lang.Integer ) ( value ) ) , null ) ; } else if ( value instanceof java.lang.String ) { return new com.android.builder.core.DefaultApiVersion ( NUMBER_CONSTANT , ( ( java.lang.String ) ( value ) ) ) ; } return new com.android.builder.core.DefaultApiVersion ( NUMBER_CONSTANT , null ) ; }
@ com.android.internal.annotations.VisibleForTesting public static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { int tdscdmaRscp_1_2 = NUMBER_CONSTANT ; if ( ( ( signalStrength.tdScdma.rscp ) >= NUMBER_CONSTANT ) && ( ( signalStrength.tdScdma.rscp ) <= NUMBER_CONSTANT ) ) { int rscpDbm = - ( signalStrength.tdScdma.rscp ) ; tdscdmaRscp_1_2 = rscpDbm + NUMBER_CONSTANT ; } return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , tdscdmaRscp_1_2 ) ; }
public static org.bouncycastle.crypto.Digest createHash ( short hashAlgorithm ) { switch ( hashAlgorithm ) { case HashAlgorithm.md5 : return new org.bouncycastle.crypto.digests.MD5Digest () ; case HashAlgorithm.sha1 : return new org.bouncycastle.crypto.digests.SHA1Digest () ; case HashAlgorithm.sha224 : return new org.bouncycastle.crypto.digests.SHA224Digest () ; case HashAlgorithm.sha256 : return new org.bouncycastle.crypto.digests.SHA256Digest () ; case HashAlgorithm.sha384 : return new org.bouncycastle.crypto.digests.SHA384Digest () ; case HashAlgorithm.sha512 : return new org.bouncycastle.crypto.digests.SHA512Digest () ; default: throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } }
@ org.junit.After public void tearDown ( ) throws java.lang.Exception { setMobileDataAlwaysOn ( false ) ; if ( ( mCellNetworkAgent ) != null ) { mCellNetworkAgent . disconnect () ; mCellNetworkAgent = null ; } if ( ( mWiFiNetworkAgent ) != null ) { mWiFiNetworkAgent . disconnect () ; mWiFiNetworkAgent = null ; } if ( ( mEthernetNetworkAgent ) != null ) { mEthernetNetworkAgent . disconnect () ; mEthernetNetworkAgent = null ; } }
@ java.lang.Override public void enter () { super . enter () ; setSpeakerphoneOn ( false ) ; setBluetoothOn ( false ) ; if ( ( mAudioFocusType ) == ( com.android.server.telecom.CallAudioRouteStateMachine.ACTIVE_FOCUS ) ) { setNotificationsSuppressed ( true ) ; } android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_EARPIECE , mAvailableRoutes ) ; setSystemAudioState ( newState , true ) ; updateInternalCallAudioState () ; }
private void processConnectionEvent ( int state , android.bluetooth.BluetoothDevice device ) { switch ( state ) { case HeadsetClientHalConstants.CONNECTION_STATE_DISCONNECTED : if ( mCurrentDevice . equals ( device ) ) { processAudioEvent ( HeadsetClientHalConstants.AUDIO_STATE_DISCONNECTED , device ) ; broadcastConnectionState ( mCurrentDevice , BluetoothProfile.STATE_DISCONNECTED , BluetoothProfile.STATE_CONNECTED ) ; transitionTo ( mDisconnected ) ; } else { android.util.Log . e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( STRING_CONSTANT + device ) ) ; } break; default: android.util.Log . e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + state ) ) ; break; } }
@ com.android.annotations.NonNull public com.android.utils.Pair < java.io.InputStream , org.apache.http.HttpResponse > openDirectUrl ( @ com.android.annotations.NonNull java.lang.String urlString , @ com.android.annotations.Nullable org.apache.http.Header [] headers , @ com.android.annotations.NonNull com.android.sdklib.internal.repository.ITaskMonitor monitor ) throws com.android.sdklib.internal.repository.CanceledByUserException , java.io.IOException { if ( com.android.sdklib.internal.repository.DownloadCache.DEBUG ) { java.lang.System.out . println ( java.lang.String . format ( STRING_CONSTANT , urlString ) ) ; } return openUrl ( urlString , false , monitor , headers ) ; }
@ java.lang.Override public int compare ( java.lang.Class < > o1 , java.lang.Class < > o2 ) { if ( o1 == o2 ) { return NUMBER_CONSTANT ; } if ( o1 . isAssignableFrom ( o2 ) ) { return NUMBER_CONSTANT ; } if ( o2 . isAssignableFrom ( o1 ) ) { return - NUMBER_CONSTANT ; } return o1 . getName () . compareTo ( o2 . getName () ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testEndCallWithNonRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito . mock ( com.android.server.telecom.Call . class ) ; org.mockito.Mockito . when ( call . getState () ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito . when ( mFakeCallsManager . getForegroundCall () ) . thenReturn ( call ) ; org.junit.Assert . assertTrue ( mTSIBinder . endCall ( null ) ) ; org.mockito.Mockito . verify ( call ) . disconnect () ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ! ( o instanceof android.net.wifi.nan.ConfigRequest ) ) { return false ; } android.net.wifi.nan.ConfigRequest lhs = ( ( android.net.wifi.nan.ConfigRequest ) ( o ) ) ; return ( ( ( ( mSupport5gBand ) == ( lhs.mSupport5gBand ) ) && ( ( mMasterPreference ) == ( lhs.mMasterPreference ) ) ) && ( ( mClusterLow ) == ( lhs.mClusterLow ) ) ) && ( ( mClusterHigh ) == ( lhs.mClusterHigh ) ) ; }
public void testGetRequestPropertyReturnsLastValue ( ) throws java.lang.Exception { server . play () ; java.net.HttpURLConnection urlConnection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; urlConnection . addRequestProperty ( STRING_CONSTANT , STRING_CONSTANT ) ; urlConnection . addRequestProperty ( STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , urlConnection . getRequestProperty ( STRING_CONSTANT ) ) ; }
public void testNewConstructors_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr1 = new java.security.SecureRandom () ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr1 . getProvider () . getClass () . getName () ) ; test_SecureRandom ( sr1 ) ; java.security.SecureRandom sr2 = new java.security.SecureRandom ( libcore.java.security.SecureRandomTest.STATIC_SEED_BYTES ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr2 . getProvider () . getClass () . getName () ) ; test_SecureRandom ( sr2 ) ; }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr ( ) throws java.lang.Exception { switchImsSmsFormat ( PhoneConstants.PHONE_TYPE_GSM ) ; mImsSmsDispatcher . sendText ( null , STRING_CONSTANT , com.android.internal.telephony.TAG , null , null , null , null , false , ( - NUMBER_CONSTANT ) , false , ( - NUMBER_CONSTANT ) ) ; org.mockito.Mockito . verify ( mSimulatedCommandsVerifier , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . sendImsGsmSms ( org.mockito.Matchers . anyString () , org.mockito.Matchers . anyString () , org.mockito.Mockito . anyInt () , org.mockito.Mockito . anyInt () , org.mockito.Matchers . any ( android.os.Message . class ) ) ; }
void launchDemo ( int id ) { int [] testList = new int [ NUMBER_CONSTANT ] ; testList [ NUMBER_CONSTANT ] = id ; android.content.Intent intent = makeBasicLaunchIntent () ; intent . putExtra ( STRING_CONSTANT , testList ) ; intent . putExtra ( STRING_CONSTANT , true ) ; startActivityForResult ( intent , NUMBER_CONSTANT ) ; }
public void testSetWifiEnabledByAppDoesNotStopHotspot () { if ( ! ( mWifiManager . isPortableHotspotSupported () ) ) { return; } boolean wifiEnabled = mWifiManager . isWifiEnabled () ; android.net.wifi.cts.WifiManagerTest.TestLocalOnlyHotspotCallback callback = startLocalOnlyHotspot () ; assertFalse ( mWifiManager . isWifiEnabled () ) ; assertFalse ( mWifiManager . setWifiEnabled ( true ) ) ; stopLocalOnlyHotspot ( callback , wifiEnabled ) ; assertEquals ( wifiEnabled , mWifiManager . isWifiEnabled () ) ; }
public com.android.sched.vfs.VPath prependPath ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { if ( ! ( this . equals ( com.android.sched.vfs.VPath.ROOT ) ) ) { pathFragments . add ( NUMBER_CONSTANT , new com.android.sched.vfs.VPath.VPathFragment ( java.lang.String . valueOf ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) , com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) ) ; } pathFragments . addAll ( NUMBER_CONSTANT , path . getPathFragments () ) ; return this ; }
private void setSourceType ( com.android.ide.eclipse.adt.internal.assetstudio.CreateAssetSetWizardState.SourceType sourceType ) { if ( sourceType == ( com.android.ide.eclipse.adt.internal.assetstudio.CreateAssetSetWizardState.SourceType.IMAGE ) ) { chooseForegroundTab ( mImageRadio , mImageForm ) ; } else if ( sourceType == ( com.android.ide.eclipse.adt.internal.assetstudio.CreateAssetSetWizardState.SourceType.CLIPART ) ) { chooseForegroundTab ( mClipartRadio , mClipartForm ) ; mChooseClipart . setFocus () ; } else if ( sourceType == ( com.android.ide.eclipse.adt.internal.assetstudio.CreateAssetSetWizardState.SourceType.TEXT ) ) { updateFontLabel () ; chooseForegroundTab ( mTextRadio , mTextForm ) ; mText . setFocus () ; } }
@ java.lang.Deprecated public static int waitpid ( int pid , android.util.MutableInt status , int options ) throws android.system.ErrnoException { if ( status == null ) { return Libcore.os . waitpid ( pid , null , options ) ; } else { android.util.MutableInt internalStatus = new android.util.MutableInt ( status.value ) ; try { return Libcore.os . waitpid ( pid , internalStatus , options ) ; } finally { status.value = internalStatus.value ; } } }
private synchronized void markIfNecessary ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node , @ javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier ) { com.android.jack.shrob.seed.SeedMarker marker = node . getMarker ( com.android.jack.shrob.seed.SeedMarker . class ) ; if ( marker == null ) { node . addMarker ( new com.android.jack.shrob.seed.SeedMarker ( modifier ) ) ; } else { com.android.jack.shrob.spec.KeepModifier previousModifier = marker . getModifier () ; if ( previousModifier != modifier ) { marker . setModifier ( new com.android.jack.shrob.spec.KeepModifier () ) ; } } }
public void test_removeHandshakeCompletedListener ( ) throws java.io.IOException { javax.net.ssl.SSLSocket ssl = getSSLSocket () ; javax.net.ssl.HandshakeCompletedListener ls = new org.apache.harmony.tests.javax.net.ssl.SSLSocketTest.HandshakeCL () ; try { ssl . removeHandshakeCompletedListener ( null ) ; fail () ; } catch ( java.lang.IllegalArgumentException expected ) {} try { ssl . removeHandshakeCompletedListener ( ls ) ; fail () ; } catch ( java.lang.IllegalArgumentException expected ) {} ssl . addHandshakeCompletedListener ( ls ) ; ssl . removeHandshakeCompletedListener ( ls ) ; ssl . close () ; }
public static void assertDefaultCipherSuites ( java.lang.String [] cipherSuites ) { libcore.java.security.StandardNames . assertValidCipherSuites ( cipherSuites ) ; assertEquals ( libcore.java.security.StandardNames.CIPHER_SUITES_DEFAULT , java.util.Arrays . asList ( cipherSuites ) ) ; if ( ! ( libcore.java.security.StandardNames.IS_RI ) ) { java.util.List < java.lang.String > disallowedDefaultCipherSuites = new java.util.ArrayList < java.lang.String > () ; for ( java.lang.String cipherSuite : cipherSuites ) { if ( ! ( libcore.java.security.StandardNames . isPermittedDefaultCipherSuite ( cipherSuite ) ) ) { disallowedDefaultCipherSuites . add ( cipherSuite ) ; } } assertEquals ( java.util.Collections.EMPTY_LIST , disallowedDefaultCipherSuites ) ; } }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testNonFocusConnectionServiceReleased () { requestFocus ( mActiveCall , null ) ; com.android.server.telecom.tests.ConnectionServiceFocusListener connSvrFocusListener = com.android.server.telecom.tests.ConnectionServiceFocusManagerTest . getConnectionServiceFocusListener ( mActiveConnectionService ) ; connSvrFocusListener . onConnectionServiceReleased ( mNewConnectionService ) ; org.junit.Assert . assertEquals ( mActiveCall , mFocusManagerUT . getCurrentFocusCall () ) ; org.junit.Assert . assertEquals ( mActiveConnectionService , mFocusManagerUT . getCurrentFocusConnectionService () ) ; }
@ java.lang.Override public com.google.common.collect.ImmutableMap < K , V > getAllPresent ( java.lang.Iterable < > keys ) { java.util.Map < K , V > result = com.google.common.collect.Maps . newLinkedHashMap () ; for ( java.lang.Object key : keys ) { if ( ! ( result . containsKey ( key ) ) ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) K castKey = ( ( K ) ( key ) ) ; V value = getIfPresent ( key ) ; if ( value != null ) { result . put ( castKey , value ) ; } } } return com.google.common.collect.ImmutableMap . copyOf ( result ) ; }
public void test_handshakeWithSCTFromTLSExtension ( ) throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection ( new java.security.cert.X509Certificate [] { cert , ca } , certKey ) ; connection.clientHooks.ctVerifier = ctVerifier ; connection.clientHooks.ctVerificationEnabled = true ; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils . readTestFile ( STRING_CONSTANT ) ; connection . doHandshake () ; assertTrue ( connection.clientHooks.isHandshakeCompleted ) ; assertTrue ( connection.serverHooks.isHandshakeCompleted ) ; }
public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { boolean result = false ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { result = service . disconnect ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return result ; }
@ java.lang.Override public void getSignalStrength ( android.os.Message result ) { if ( ( mSignalStrength ) == null ) { mSignalStrength = new android.telephony.SignalStrength ( NUMBER_CONSTANT , NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID ) ; } resultSuccess ( result , mSignalStrength ) ; }
@ org.junit.Test public void testConnectFailureDueToNetworkSaveException ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; setupMocksForConnectSequence ( true ) ; org.mockito.Mockito . doThrow ( new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ) . when ( mSupplicantStaNetworkMock ) . saveWifiConfiguration ( org.mockito.Matchers . any ( android.net.wifi.WifiConfiguration . class ) ) ; assertFalse ( mDut . connectToNetwork ( new android.net.wifi.WifiConfiguration () ) ) ; org.mockito.Mockito . verify ( mISupplicantStaIfaceMock , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . removeNetwork ( org.mockito.Matchers . anyInt () ) ; }
@ java.lang.Override public boolean isBetterMatchThan ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier compareTo , com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier reference ) { if ( compareTo == null ) { return true ; } com.android.ide.eclipse.adt.internal.resources.configurations.PixelDensityQualifier compareQ = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.PixelDensityQualifier ) ( compareTo ) ) ; com.android.ide.eclipse.adt.internal.resources.configurations.PixelDensityQualifier referenceQ = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.PixelDensityQualifier ) ( reference ) ) ; if ( ( compareQ.mValue ) == ( referenceQ.mValue ) ) { return false ; } else if ( ( mValue ) == ( referenceQ.mValue ) ) { return true ; } else { return ( mValue . getDpiValue () ) > ( compareQ.mValue . getDpiValue () ) ; } }
private PackageParser.Package findSharedNonSystemLibrary ( java.lang.String libName ) { synchronized ( mPackages ) { com.android.server.pm.PackageManagerService.SharedLibraryEntry lib = mSharedLibraries . get ( libName ) ; if ( ( lib != null ) && ( ( lib.apk ) != null ) ) { return mPackages . get ( lib.apk ) ; } } return null ; }
public void testConcurrentServerSocketCloseReliablyThrows () { int numIterations = NUMBER_CONSTANT ; for ( int i = NUMBER_CONSTANT ; i < numIterations ; i ++ ) { checkConnectIterationAndCloseSocket ( ( ( ( STRING_CONSTANT + ( i + NUMBER_CONSTANT ) ) + STRING_CONSTANT ) + numIterations ) , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
@ org.junit.Test public void testCheckAccessLevel_deniedAppOpsBit ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_ERRORED , true ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert . assertEquals ( NetworkStatsAccess.Level.DEFAULT , com.android.server.net.NetworkStatsAccess . checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public void testOfferNonComparable () { java.util.concurrent.PriorityBlockingQueue q = new java.util.concurrent.PriorityBlockingQueue ( NUMBER_CONSTANT ) ; try { q . offer ( new java.lang.Object () ) ; q . offer ( new java.lang.Object () ) ; shouldThrow () ; } catch ( java.lang.ClassCastException success ) {} }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [] args ) { if ( com.google.caliper.SimpleBenchmark . class . isAssignableFrom ( klass ) ) { return new vogar.target.CaliperRunner ( monitor , profile , klass , args ) ; } else { return null ; } }
@ java.lang.Override public void enter () { android.util.Log . i ( com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG , ( ( ( STRING_CONSTANT + ( mDevice ) ) + STRING_CONSTANT ) + ( com.android.bluetooth.hearingaid.HearingAidStateMachine . messageWhatToString ( getCurrentMessage () . what ) ) ) ) ; mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; removeDeferredMessages ( com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT ) ; broadcastConnectionState ( mConnectionState , mLastConnectionState ) ; }
public boolean disconnectMap ( android.bluetooth.BluetoothDevice device ) { boolean result = false ; if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log . d ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; if ( ( ( getRemoteDevice () ) != null ) && ( getRemoteDevice () . equals ( device ) ) ) { switch ( mState ) { case android.bluetooth.BluetoothMap.STATE_CONNECTED : stopObexServerSessions ( ( - NUMBER_CONSTANT ) ) ; result = true ; break; default: break; } } return result ; }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JUnlock unlockStmt ) { com.android.jack.dx.rop.code.RegisterSpec unlockReg = getRegisterSpec ( unlockStmt . getLockExpr () ) ; com.android.jack.dx.rop.code.Insn unlockInsn = new com.android.jack.dx.rop.code.ThrowingInsn ( com.android.jack.dx.rop.code.Rops.MONITOR_EXIT , com.android.jack.backend.dex.rop.RopHelper . getSourcePosition ( unlockStmt ) , com.android.jack.dx.rop.code.RegisterSpecList . make ( unlockReg ) , getCatchTypes () ) ; addInstruction ( unlockInsn ) ; return false ; }
public void testSetLength64 ( ) throws java.lang.Exception { try ( java.io.RandomAccessFile raf = new java.io.RandomAccessFile ( file , STRING_CONSTANT ) ) { raf . setLength ( NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , file . length () ) ; long moreThanFourGig = ( ( long ) ( java.lang.Integer.MAX_VALUE ) ) + NUMBER_CONSTANT ; raf . setLength ( moreThanFourGig ) ; assertEquals ( moreThanFourGig , file . length () ) ; } }
private void startAccept () { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log . d ( TAG , STRING_CONSTANT ) ; prepareForNewConnect () ; mRfcommThread = new com.android.bluetooth.ObexServerSockets.SocketAcceptThread ( mRfcommSocket ) ; mRfcommThread . start () ; mL2capThread = new com.android.bluetooth.ObexServerSockets.SocketAcceptThread ( mL2capSocket ) ; mL2capThread . start () ; }
public void testAdd () { java.util.concurrent.ArrayBlockingQueue q = new java.util.concurrent.ArrayBlockingQueue ( SIZE ) ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) { assertTrue ( q . add ( new java.lang.Integer ( i ) ) ) ; } assertEquals ( NUMBER_CONSTANT , q . remainingCapacity () ) ; try { q . add ( new java.lang.Integer ( SIZE ) ) ; shouldThrow () ; } catch ( java.lang.IllegalStateException success ) {} }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testRegistrationConfigParcel () { android.telephony.ims.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder () . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_MMTEL ) . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_RCS ) . build () ; android.os.Parcel p = android.os.Parcel . obtain () ; testConfig . writeToParcel ( p , NUMBER_CONSTANT ) ; p . setDataPosition ( NUMBER_CONSTANT ) ; android.telephony.ims.stub.ImsFeatureConfiguration result = ImsFeatureConfiguration.CREATOR . createFromParcel ( p ) ; p . recycle () ; junit.framework.Assert . assertEquals ( testConfig , result ) ; }
public void testKernelDomain ( ) throws com.android.tradefed.device.DeviceNotAvailableException { java.lang.String domain = STRING_CONSTANT ; java.util.List < android.cts.security.SELinuxHostTest.ProcessDetails > procs = android.cts.security.SELinuxHostTest.ProcessDetails . getProcMap ( mDevice ) . get ( domain ) ; for ( android.cts.security.SELinuxHostTest.ProcessDetails p : procs ) { assertTrue ( ( ( STRING_CONSTANT + p ) + STRING_CONSTANT ) , p . isKernel () ) ; } }
@ java.lang.Override public java.util.Collection < com.android.tools.idea.wizard.WizardPath > createWizardPaths ( @ org.jetbrains.annotations.NotNull com.android.tools.idea.wizard.NewModuleWizardState wizardState , @ org.jetbrains.annotations.NotNull com.android.tools.idea.wizard.TemplateWizardStep.UpdateListener updateListener , @ org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.Nullable javax.swing.Icon sidePanelIcon , @ org.jetbrains.annotations.NotNull com.intellij.openapi.Disposable disposable ) { if ( ( project == null ) || ( ! ( com.intellij.openapi.application.ApplicationManager . getApplication () . isInternal () ) ) ) { return java.util.Collections . emptyList () ; } return java.util.Collections . < com.android.tools.idea.wizard.WizardPath > singleton ( new com.google.gct.idea.appengine.wizard.BackendWizardPath ( project , wizardState , updateListener , sidePanelIcon ) ) ; }
public void stopHal () { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { com.android.server.wifi.WifiNative . stopHalNative () ; try { com.android.server.wifi.WifiNative.sThread . join ( com.android.server.wifi.WifiNative.STOP_HAL_TIMEOUT_MS ) ; android.util.Log . d ( com.android.server.wifi.WifiNative.TAG , STRING_CONSTANT ) ; } catch ( java.lang.InterruptedException e ) { android.util.Log . e ( com.android.server.wifi.WifiNative.TAG , STRING_CONSTANT ) ; } com.android.server.wifi.WifiNative.sThread = null ; com.android.server.wifi.WifiNative.sWifiHalHandle = NUMBER_CONSTANT ; com.android.server.wifi.WifiNative.sWifiIfaceHandles = null ; com.android.server.wifi.WifiNative.sWlan0Index = - NUMBER_CONSTANT ; } } }
public java.net.SocketAddress listen ( java.net.SocketAddress address , javax.net.ssl.SSLContext context ) throws java.io.IOException { org.simpleframework.transport.connect.SocketListener listener = new org.simpleframework.transport.connect.SocketListener ( address , processor , analyzer , context ) ; if ( ( processor ) != null ) { listeners . add ( listener ) ; listener . process () ; } return listener . getAddress () ; }
@ java.lang.Override public android.app.IActivityContainer createStackOnDisplay ( int displayId ) throws android.os.RemoteException { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , STRING_CONSTANT ) ; synchronized ( this ) { final int stackId = mStackSupervisor . getNextStackId () ; final com.android.server.am.ActivityStack stack = mStackSupervisor . createStackOnDisplay ( stackId , displayId , true ) ; if ( stack == null ) { return null ; } return stack.mActivityContainer ; } }
private void stopRtt ( java.lang.String callId ) { android.telecom.Log . d ( this , STRING_CONSTANT , callId ) ; if ( mConnectionById . containsKey ( callId ) ) { findConnectionForAction ( callId , STRING_CONSTANT ) . onStopRtt () ; } else if ( mConferenceById . containsKey ( callId ) ) { android.telecom.Log . w ( this , STRING_CONSTANT ) ; } }
public static void permuteArguments_boxingCallee ( boolean a , java.lang.Integer b ) { if ( a && ( ( b . intValue () ) == NUMBER_CONSTANT ) ) { return; } Main . fail ( ( ( ( STRING_CONSTANT + a ) + STRING_CONSTANT ) + b ) ) ; }
public synchronized boolean enable ( boolean quietMode ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , STRING_CONSTANT ) ; if ( mUserManager . hasUserRestriction ( UserManager.DISALLOW_BLUETOOTH , UserHandle.SYSTEM ) ) { debugLog ( STRING_CONSTANT ) ; return false ; } debugLog ( ( STRING_CONSTANT + quietMode ) ) ; mQuietmode = quietMode ; android.os.Message m = mAdapterStateMachine . obtainMessage ( AdapterState.BLE_TURN_ON ) ; mAdapterStateMachine . sendMessage ( m ) ; mBluetoothStartTime = java.lang.System . currentTimeMillis () ; return true ; }
@ java.lang.Override public boolean setPairingConfirmation ( android.bluetooth.BluetoothDevice device , boolean accept ) { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return false ; } return service . setPairingConfirmation ( device , accept ) ; }
public boolean remove ( java.lang.Object o ) { final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock . lock () ; try { int i = indexOf ( o ) ; if ( i == ( - NUMBER_CONSTANT ) ) return false ; removeAt ( i ) ; return true ; } finally { lock . unlock () ; } }
public void createTest ( com.android.rs.imagejb.Resources res ) { if ( approx ) { if ( relaxed ) mScript_approx_relaxed = new com.android.rs.imagejb.ScriptC_vignette_approx_relaxed ( mRS , res , R.raw.vignette_approx_relaxed ) ; else mScript_approx_full = new com.android.rs.imagejb.ScriptC_vignette_approx_full ( mRS , res , R.raw.vignette_approx_full ) ; } else if ( relaxed ) mScript_relaxed = new com.android.rs.imagejb.ScriptC_vignette_relaxed ( mRS ) ; else mScript_full = new com.android.rs.imagejb.ScriptC_vignette_full ( mRS ) ; do_init () ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.ast.ConcatRemover.Visitor visitor = new com.android.jack.transformations.ast.ConcatRemover.Visitor ( method ) ; visitor . accept ( method ) ; }
@ android.test.suitebuilder.annotation.LargeTest @ org.junit.Test public void testDisconnectSelfManaged ( ) throws java.lang.Exception { android.telecom.PhoneAccountHandle phoneAccountHandle = mPhoneAccountSelfManaged . getAccountHandle () ; startAndMakeActiveIncomingCall ( STRING_CONSTANT , phoneAccountHandle , mConnectionServiceFixtureA ) ; android.telecom.Connection connection = mConnectionServiceFixtureA.mLatestConnection ; connection . setAudioRoute ( CallAudioState.ROUTE_SPEAKER ) ; waitForHandlerAction ( new android.os.Handler ( android.os.Looper . getMainLooper () ) , com.android.server.telecom.tests.TEST_TIMEOUT ) ; startAndMakeDialingEmergencyCall ( STRING_CONSTANT , mPhoneAccountE0 . getAccountHandle () , mConnectionServiceFixtureA ) ; org.junit.Assert . assertEquals ( CallAudioState.ROUTE_EARPIECE , mInCallServiceFixtureX.mCallAudioState . getRoute () ) ; }
@ java.lang.Override public void setAppCallback ( android.nfc.IAppCallback callback ) { com.android.nfc.NfcPermissions . enforceUserPermissions ( mContext ) ; android.content.pm.UserInfo userInfo = mUserManager . getUserInfo ( android.os.UserHandle . getCallingUserId () ) ; if ( ! ( mUserManager . hasUserRestriction ( UserManager.DISALLOW_OUTGOING_BEAM , userInfo . getUserHandle () ) ) ) { mP2pLinkManager . setNdefCallback ( callback , android.os.Binder . getCallingUid () ) ; } else if ( com.android.nfc.NfcService.DBG ) { android.util.Log . d ( com.android.nfc.NfcService.TAG , STRING_CONSTANT ) ; } }
public void testMergedResourcesByName ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceRepository repo = getResourceRepository () ; verifyResourceExists ( repo , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
protected boolean getCompressionYTilde () { org.bouncycastle.math.ec.ECFieldElement X = this . getRawXCoord () ; if ( X . isZero () ) { return false ; } org.bouncycastle.math.ec.ECFieldElement Y = this . getRawYCoord () ; switch ( this . getCurveCoordinateSystem () ) { case ECCurve.COORD_LAMBDA_AFFINE : case ECCurve.COORD_LAMBDA_PROJECTIVE : { return ( Y . testBitZero () ) != ( X . testBitZero () ) ; } default: { return Y . divide ( X ) . testBitZero () ; } } }
static com.android.dialer.calldetails.CallDetailsEntries toCallDetailsEntries ( android.database.Cursor cursor ) { com.android.dialer.common.Assert . isNotNull ( cursor ) ; com.android.dialer.common.Assert . checkArgument ( cursor . moveToFirst () ) ; com.android.dialer.calldetails.CallDetailsEntries.Builder entries = com.android.dialer.calldetails.CallDetailsEntries . newBuilder () ; do { entries . addEntries ( com.android.dialer.calldetails.CallDetailsCursorLoader . toCallDetailsEntry ( cursor ) ) ; } while ( cursor . moveToNext () ) ; return entries . build () ; }
public java.lang.String iccTransmitApduBasicChannel ( int subId , int cla , int instruction , int p1 , int p2 , int p3 , java.lang.String data ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony () ; if ( telephony != null ) return telephony . iccTransmitApduBasicChannel ( subId , cla , instruction , p1 , p2 , p3 , data ) ; } catch ( android.os.RemoteException ex ) {} catch ( java.lang.NullPointerException ex ) {} return STRING_CONSTANT ; }
public void log ( java.lang.String tag ) { final java.util.Map < java.lang.String , java.lang.Object > flattened = flatten () ; for ( java.lang.String key : android.hardware.cts.helpers.SensorStats . getSortedKeys ( flattened ) ) { java.lang.Object value = flattened . get ( key ) ; android.util.Log . v ( tag , java.lang.String . format ( STRING_CONSTANT , key , android.hardware.cts.helpers.SensorStats . getValueString ( value ) ) ) ; } }
private final java.security.cert.X509Certificate getCertificate ( java.security.cert.CertificateFactory f , java.lang.String name ) throws java.lang.Exception { final java.io.InputStream is = tests.support.resource.Support_Resources . getStream ( name ) ; assertNotNull ( ( STRING_CONSTANT + name ) , is ) ; try { java.security.cert.X509Certificate c = ( ( java.security.cert.X509Certificate ) ( f . generateCertificate ( is ) ) ) ; assertNotNull ( c ) ; return c ; } finally { try { is . close () ; } catch ( java.io.IOException ignored ) {} } }
public void testDeserializeWasEnum ( ) throws java.lang.Exception { final java.lang.String s = STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ; assertFalse ( libcore.java.io.SerializationTest.wasEnumInitializedFlag ) ; try { libcore.util.SerializationTester . deserializeHex ( s ) ; fail () ; } catch ( java.io.InvalidClassException expected ) {} assertFalse ( libcore.java.io.SerializationTest.wasEnumInitializedFlag ) ; }
private void writeMethods ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn ) throws java.io.IOException { writer . writeOpenNodeList () ; for ( org.objectweb.asm.tree.MethodNode mn : cn.methods ) { new com.android.jill.frontend.java.MethodBodyWriter ( writer , annotWriter , cn , mn , sourceInfoWriter , options ) . write () ; } writer . writeCloseNodeList () ; }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JIfStatement ifStmt ) { com.android.jack.ir.ast.JStatement thenStmt = ifStmt . getThenStmt () ; if ( ! ( thenStmt instanceof com.android.jack.ir.ast.JBlock ) ) { moveIntoBLock ( thenStmt ) ; } com.android.jack.ir.ast.JStatement elseStmt = ifStmt . getElseStmt () ; if ( ( elseStmt != null ) && ( ! ( elseStmt instanceof com.android.jack.ir.ast.JBlock ) ) ) { moveIntoBLock ( elseStmt ) ; } return super . visit ( ifStmt ) ; }
private void start () { android.os.HandlerThread thread = new android.os.HandlerThread ( STRING_CONSTANT ) ; thread . start () ; android.os.Looper looper = thread . getLooper () ; mHandler = new com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler ( looper ) ; mSessionChangeListener = new com.android.bluetooth.avrcp.Avrcp.MediaSessionChangeListener () ; mMediaControllerCb = new com.android.bluetooth.avrcp.Avrcp.MediaControllerListener () ; mMediaSessionManager . addOnActiveSessionsChangedListener ( mSessionChangeListener , null , mHandler ) ; updateCurrentMediaControllers ( mMediaSessionManager . getActiveSessions ( null ) ) ; }
@ org.jetbrains.annotations.Nullable protected java.util.List < java.lang.Throwable > doSave ( @ org.jetbrains.annotations.Nullable java.util.List < com.intellij.openapi.components.StateStorage.SaveSession > saveSessions , @ org.jetbrains.annotations.NotNull java.util.List < com.intellij.openapi.components.impl.stores.Pair < com.intellij.openapi.components.StateStorage.SaveSession , com.intellij.openapi.vfs.VirtualFile > > readonlyFiles , @ org.jetbrains.annotations.Nullable java.util.List < java.lang.Throwable > errors ) { if ( saveSessions != null ) { for ( com.intellij.openapi.components.StateStorage.SaveSession session : saveSessions ) { errors = com.intellij.openapi.components.impl.stores.ComponentStoreImpl . executeSave ( session , readonlyFiles , errors ) ; } } return errors ; }
@ java.lang.Override public final java.nio.ByteBuffer putFloat ( int i , float x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putFloat ( ix ( checkIndex ( i , SizeOf.FLOAT ) ) , x ) ; return this ; }
@ android.annotation.RequiresPermission ( value = Manifest.permission.BLUETOOTH ) public android.os.ParcelUuid [] getUuids () { if ( ( ( android.bluetooth.BluetoothDevice.sService ) == null ) || ( ! ( isBluetoothEnabled () ) ) ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT ) ; return null ; } try { return android.bluetooth.BluetoothDevice.sService . getRemoteUuids ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothDevice.TAG , STRING_CONSTANT , e ) ; } return null ; }
@ java.lang.Override protected void transform ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode existingNode , @ javax.annotation.CheckForNull com.android.jack.ir.ast.JNode newNode , @ javax.annotation.Nonnull com.android.jack.ir.ast.Transformation transformation ) throws java.lang.UnsupportedOperationException { if ( existingNode instanceof com.android.jack.ir.ast.JMethod ) { if ( transform ( methods , existingNode , ( ( com.android.jack.ir.ast.JMethod ) ( newNode ) ) , transformation ) ) { return; } } else if ( existingNode instanceof com.android.jack.ir.ast.JField ) { if ( transform ( fields , existingNode , ( ( com.android.jack.ir.ast.JField ) ( newNode ) ) , transformation ) ) { return; } } super . transform ( existingNode , newNode , transformation ) ; }
@ java.lang.Override public boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + id ) ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return false ; } return service . sendReport ( device , id , data ) ; }
public void testSingleByteReadIsSigned ( ) throws java.io.IOException { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( new byte [] { - NUMBER_CONSTANT , - NUMBER_CONSTANT } ) ) ; server . play () ; java.net.URLConnection connection = server . getUrl ( STRING_CONSTANT ) . openConnection () ; java.io.InputStream in = connection . getInputStream () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , in . read () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , in . read () ) ; org.junit.Assert . assertEquals ( ( - NUMBER_CONSTANT ) , in . read () ) ; }
@ javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec getRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariableRef varRef ) { if ( varRef instanceof com.android.jack.ir.ast.JThisRef ) { assert ( thisReg ) != null : STRING_CONSTANT ; return thisReg ; } com.android.jack.ir.ast.JVariable var = varRef . getTarget () ; assert variableToRegister . containsKey ( var ) ; com.android.jack.dx.rop.code.RegisterSpec register = variableToRegister . get ( var ) ; assert com.android.jack.backend.dex.rop.RopHelper . areTypeCompatible ( com.android.jack.backend.dex.rop.RopHelper . convertTypeToDx ( varRef . getType () ) , register . getType () ) ; return register ; }
public void test_setIZ () { eightbs . set ( NUMBER_CONSTANT , false ) ; assertFalse ( STRING_CONSTANT , eightbs . get ( NUMBER_CONSTANT ) ) ; eightbs . set ( NUMBER_CONSTANT , true ) ; assertTrue ( STRING_CONSTANT , eightbs . get ( NUMBER_CONSTANT ) ) ; try { eightbs . set ( ( - NUMBER_CONSTANT ) , false ) ; fail () ; } catch ( java.lang.IndexOutOfBoundsException expected ) {} }
public void testBreakpoint () { logWriter . println ( STRING_CONSTANT ) ; synchronizer . receiveMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; byte typeTag = JDWPConstants.TypeTag.CLASS ; org.apache.harmony.jpda.tests.framework.Breakpoint breakpoint = new org.apache.harmony.jpda.tests.framework.Breakpoint ( org.apache.harmony.jpda.tests.jdwp.EventModifiers.InstanceOnlyModifierTest.TEST_CLASS_SIGNATURE , org.apache.harmony.jpda.tests.jdwp.EventModifiers.InstanceOnlyModifierTest.METHOD_NAME , NUMBER_CONSTANT ) ; org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createBreakpointEventBuilder ( typeTag , breakpoint ) ; testEventWithInstanceOnlyModifier ( builder ) ; logWriter . println ( STRING_CONSTANT ) ; }
public com.android.ide.common.resources.configuration.ResourceQualifier getInvalidQualifier () { for ( int i = NUMBER_CONSTANT ; i < ( com.android.ide.common.resources.configuration.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { if ( ( ( mQualifiers [ i ] ) != null ) && ( ! ( mQualifiers [ i ] . isValid () ) ) ) { return mQualifiers [ i ] ; } } return null ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.String wifiAwareCreateNetworkSpecifier ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.String token ) { android.net.wifi.aware.WifiAwareDiscoveryBaseSession session ; synchronized ( mLock ) { session = mDiscoverySessions . get ( sessionId ) ; } if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( STRING_CONSTANT + sessionId ) + STRING_CONSTANT ) ) ; } byte [] bytes = token . getBytes () ; return session . createNetworkSpecifier ( new android.net.wifi.aware.WifiAwareManager.PeerHandle ( peerId ) , bytes ) ; }
public void testConstructor5 () { java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( ( SIZE ) - NUMBER_CONSTANT ) ; ++ i ) ints [ i ] = i ; java.util.Collection < java.lang.Integer > elements = java.util.Arrays . asList ( ints ) ; try { new java.util.concurrent.ArrayBlockingQueue ( SIZE , false , elements ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public void testAppIdleNetworkAccess_whenCharging ( ) throws java.lang.Exception { if ( ! ( isSupported () ) ) return; setAppIdle ( true ) ; assertBackgroundNetworkAccess ( false ) ; turnBatteryOn () ; assertBackgroundNetworkAccess ( true ) ; turnBatteryOff () ; assertBackgroundNetworkAccess ( false ) ; setAppIdle ( false ) ; assertBackgroundNetworkAccess ( true ) ; setBatterySaverMode ( true ) ; assertBackgroundNetworkAccess ( false ) ; setBatterySaverMode ( false ) ; turnBatteryOn () ; assertBackgroundNetworkAccess ( true ) ; turnBatteryOff () ; assertBackgroundNetworkAccess ( true ) ; }
synchronized boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) + id ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return sendReportNative ( id , data ) ; }
private void performHideDialpadFragment () { android.support.v4.app.FragmentManager fragmentManager = inCallActivity . getDialpadFragmentManager () ; if ( fragmentManager == null ) { com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT ) ; return; } android.support.v4.app.Fragment fragment = fragmentManager . findFragmentByTag ( com.android.incallui.InCallActivityCommon.TAG_DIALPAD_FRAGMENT ) ; if ( fragment != null ) { android.support.v4.app.FragmentTransaction transaction = fragmentManager . beginTransaction () ; transaction . hide ( fragment ) ; transaction . commitAllowingStateLoss () ; fragmentManager . executePendingTransactions () ; } inCallActivity . updateNavigationBar ( false ) ; }
public static java.lang.String getProfileName ( android.content.Context context ) { android.database.Cursor c = context . getContentResolver () . query ( Profile.CONTENT_URI , new java.lang.String [] { android.provider.ContactsContract.Profile.DISPLAY_NAME } , null , null , null ) ; java.lang.String ownerName = null ; if ( ( c != null ) && ( c . moveToFirst () ) ) { ownerName = c . getString ( NUMBER_CONSTANT ) ; } if ( c != null ) { c . close () ; } return ownerName ; }
private void declineUpgradeRequest () { com.android.incallui.call.CallList callList = com.android.incallui.InCallPresenter . getInstance () . getCallList () ; if ( callList == null ) { com.android.incallui.StatusBarNotifier . clearAllCallNotifications () ; com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT ) ; } else { com.android.incallui.call.DialerCall call = callList . getVideoUpgradeRequestCall () ; if ( call != null ) { call . getVideoTech () . declineVideoRequest () ; } } }
@ java.lang.Override public void addListener ( java.lang.String className ) { if ( ! ( _enabled ) ) throw new java.lang.UnsupportedOperationException () ; try { @ java.lang.SuppressWarnings ( value = { STRING_CONSTANT , STRING_CONSTANT } ) java.lang.Class < ? extends java.util.EventListener > clazz = ( ( _classLoader ) == null ) ? org.eclipse.jetty.util.Loader . loadClass ( org.eclipse.jetty.server.handler.ContextHandler . class , className ) : ( ( java.lang.Class ) ( _classLoader . loadClass ( className ) ) ) ; addListener ( clazz ) ; } catch ( java.lang.ClassNotFoundException e ) { throw new java.lang.IllegalArgumentException ( e ) ; } }
@ org.junit.Test public void testGroupedByIfaceEmpty ( ) throws java.lang.Exception { final android.net.NetworkStats uidStats = new android.net.NetworkStats ( android.net.NetworkStatsTest.TEST_START , NUMBER_CONSTANT ) ; final android.net.NetworkStats grouped = uidStats . groupedByIface () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , uidStats . size () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , grouped . size () ) ; }
@ java.lang.Override public boolean onPreferenceChange ( android.preference.Preference preference , java.lang.Object newValue ) { if ( preference == ( mAutoSelect ) ) { boolean autoSelect = ( ( java.lang.Boolean ) ( newValue ) ) ; selectNetworkAutomatic ( autoSelect ) ; com.android.internal.logging.MetricsLogger . action ( getContext () , MetricsEvent.ACTION_MOBILE_NETWORK_AUTO_SELECT_NETWORK_TOGGLE , autoSelect ) ; return true ; } return false ; }
public static com.android.jack.dx.rop.code.Rop opPutStatic ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type . getBasicType () ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_BOOLEAN ; case com.android.jack.dx.rop.type.Type.BT_BYTE : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_BYTE ; case com.android.jack.dx.rop.type.Type.BT_CHAR : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_CHAR ; case com.android.jack.dx.rop.type.Type.BT_SHORT : return com.android.jack.dx.rop.code.Rops.PUT_STATIC_SHORT ; } return com.android.jack.dx.rop.code.Rops . throwBadType ( type ) ; }
private void showXml ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi ) { if ( vi . isRoot () ) { return; } org.w3c.dom.Node xmlNode = vi . getXmlNode () ; if ( xmlNode != null ) { boolean found = mLayoutEditor . show ( xmlNode ) ; if ( ! found ) { getDisplay () . beep () ; } } }
public void testAbiOnlyWithMatch () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput ( NUMBER_CONSTANT ) ) ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
private void stopSelfIfIdle ( int startId ) { synchronized ( mProcessing ) { if ( ( mProcessing . isEmpty () ) && ( mPending . isEmpty () ) ) { if ( android.util.Log . isLoggable ( LogTag.TRANSACTION , Log.VERBOSE ) ) { android.util.Log . v ( com.android.mms.transaction.TransactionService.TAG , STRING_CONSTANT ) ; } stopSelf ( startId ) ; } } }
@ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature () ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; constructorArguments . add ( byteArrayValue ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; }
@ com.android.annotations.NonNull public char [] asCharArray ( int offset , int length ) { assert ( mType ) == ( Type.CHAR ) ; java.nio.CharBuffer charBuffer = java.nio.ByteBuffer . wrap ( asRawByteArray ( offset , length ) ) . order ( HprofBuffer.HPROF_BYTE_ORDER ) . asCharBuffer () ; char [] result = new char [ length ] ; charBuffer . get ( result ) ; return result ; }
private static PhotoInfo.Builder fromNumberAttributes ( com.android.dialer.NumberAttributes numberAttributes ) { return com.android.dialer.glidephotomanager.PhotoInfo . newBuilder () . setName ( numberAttributes . getName () ) . setPhotoUri ( numberAttributes . getPhotoUri () ) . setPhotoId ( numberAttributes . getPhotoId () ) . setLookupUri ( numberAttributes . getLookupUri () ) . setIsBusiness ( numberAttributes . getIsBusiness () ) . setIsBlocked ( numberAttributes . getIsBlocked () ) ; }
public static void onBatteryChargingChanged ( android.content.Intent intent ) { if ( ( org.chromium.base.PowerMonitor.sInstance ) == null ) { return; } int chargePlug = intent . getIntExtra ( BatteryManager.EXTRA_PLUGGED , ( - NUMBER_CONSTANT ) ) ; org.chromium.base.PowerMonitor.sInstance.mIsBatteryPower = ( chargePlug != ( android.os.BatteryManager.BATTERY_PLUGGED_USB ) ) && ( chargePlug != ( android.os.BatteryManager.BATTERY_PLUGGED_AC ) ) ; org.chromium.base.PowerMonitor . nativeOnBatteryChargingChanged () ; }
void scanNextPath () { if ( ( mNextPath ) >= ( mPaths.length ) ) { mConnection . disconnect () ; mConnection = null ; return; } java.lang.String mimeType = ( ( mMimeTypes ) != null ) ? mMimeTypes [ mNextPath ] : null ; mConnection . scanFile ( mPaths [ mNextPath ] , mimeType ) ; ( mNextPath ) ++ ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { if ( type instanceof com.android.jack.ir.ast.JDefinedInterface ) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( type ) ; com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker marker = type . getMarker ( com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker . class ) ; if ( marker != null ) { for ( com.android.jack.ir.ast.JField f : marker . getAllFields () ) { tr . append ( new com.android.jack.transformations.request.RemoveModifiers ( f , com.android.jack.ir.ast.JModifier.PRIVATE ) ) ; } type . removeMarker ( com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker . class ) ; } tr . commit () ; }
private static org.apache.http.HttpResponse createResponse ( int status ) { org.apache.http.HttpResponse response = new org.apache.http.message.BasicHttpResponse ( org.apache.http.HttpVersion.HTTP_1_0 , status , null ) ; java.lang.String reason = android.webkit.cts.CtsTestServer . getReasonString ( status ) ; if ( reason != null ) { java.lang.StringBuffer buf = new java.lang.StringBuffer ( STRING_CONSTANT ) ; buf . append ( reason ) ; buf . append ( STRING_CONSTANT ) ; buf . append ( reason ) ; buf . append ( STRING_CONSTANT ) ; response . setEntity ( android.webkit.cts.CtsTestServer . createEntity ( buf . toString () ) ) ; } return response ; }
private static java.nio.charset.Charset lookup ( java.lang.String charsetName ) { if ( charsetName == null ) throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; java.lang.Object [] a ; if ( ( ( a = java.nio.charset.Charset.cache1 ) != null ) && ( charsetName . equals ( a [ NUMBER_CONSTANT ] ) ) ) return ( ( java.nio.charset.Charset ) ( a [ NUMBER_CONSTANT ] ) ) ; return java.nio.charset.Charset . lookup2 ( charsetName ) ; }
@ java.lang.Override public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor . visitClassInstance ( this ) ; for ( java.lang.Object value : getValues () . values () ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( this ) ; } visitor . visitLater ( this , ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; }
@ sun.reflect.CallerSensitive public static java.util.logging.Logger getLogger ( java.lang.String name , java.lang.String resourceBundleName ) { java.lang.Class < > callerClass = dalvik.system.VMStack . getStackClass1 () ; java.util.logging.Logger result = java.util.logging.Logger . demandLogger ( name , resourceBundleName , callerClass ) ; result . setupResourceInfo ( resourceBundleName , callerClass ) ; return result ; }
@ java.lang.Override public void run () { try { java.io.File output = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; output . deleteOnExit () ; outputFiles [ ii ] = output ; com.android.builder.internal.compiler.PreDexCache . getCache () . preDexLibrary ( input , output , false , dexOptions , mBuildToolInfo , false , ( ii == NUMBER_CONSTANT ? clrWithError : clr ) ) ; } catch ( java.lang.Exception ignored ) {} threadDoneCount . incrementAndGet () ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws com.android.jack.JackAbortException { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig . get ( DexFileWriter.DEX_WRITING_POLICY ) ; try { writingTool . finishMerge ( outputVDir ) ; } catch ( com.android.jack.backend.dex.DexWritingException e ) { session . getReporter () . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } }
@ java.lang.Override public void dispose () { super . dispose () ; if ( ( image ) != null ) { image . dispose () ; } crosshairColor . dispose () ; transform . dispose () ; if ( ( grid ) != null ) { grid . dispose () ; } }
private void uninstall ( @ com.android.annotations.NonNull java.io.File apk , @ com.android.annotations.NonNull java.lang.String packageName , @ com.android.annotations.NonNull java.lang.String deviceName ) throws com.android.builder.testing.api.DeviceException { if ( packageName != null ) { logger . info ( STRING_CONSTANT , deviceName , packageName ) ; device . uninstallPackage ( packageName , timeout , logger ) ; } else { logger . info ( STRING_CONSTANT , deviceName , apk ) ; } }
private boolean sample ( long timeStamp ) { if ( timeStamp == ( java.lang.Long.MAX_VALUE ) ) { return true ; } else if ( timeStamp < ( mLatestSeen ) ) { return false ; } else if ( timeStamp == ( mLatestSeen ) ) { return true ; } else { if ( ( mLatestSeen ) != NUMBER_CONSTANT ) { mElapsedTimes . add ( ( timeStamp - ( mLatestSeen ) ) ) ; } mLatestSeen = timeStamp ; return false ; } }
public void testDescendingAddAll3 () { java.util.NavigableSet q = jsr166.TreeSubSetTest . dset0 () ; java.lang.Integer [] ints = new java.lang.Integer [ SIZE ] ; for ( int i = NUMBER_CONSTANT ; i < ( ( SIZE ) - NUMBER_CONSTANT ) ; ++ i ) ints [ i ] = new java.lang.Integer ( ( i + ( SIZE ) ) ) ; try { q . addAll ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
@ android.support.annotation.MainThread static < OutputT > com.android.dialer.common.concurrent.UiListener < OutputT > create ( android.app.FragmentManager fragmentManager , java.lang.String taskId ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.android.dialer.common.concurrent.UiListener < OutputT > uiListener = ( ( com.android.dialer.common.concurrent.UiListener < OutputT > ) ( fragmentManager . findFragmentByTag ( taskId ) ) ) ; if ( uiListener == null ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , ( STRING_CONSTANT + taskId ) ) ; uiListener = new com.android.dialer.common.concurrent.UiListener <> () ; fragmentManager . beginTransaction () . add ( uiListener , taskId ) . commit () ; } return uiListener ; }
@ java.lang.Override public java.lang.String getExemplarLocationName ( java.lang.String tzID ) { if ( ( tzID == null ) || ( ( tzID . length () ) == NUMBER_CONSTANT ) ) { return null ; } java.lang.String locName = loadTimeZoneNames ( null , tzID ) . getName ( NameType.EXEMPLAR_LOCATION ) ; return locName ; }
@ java.lang.Override public int [] blend ( int [] src , int [] dst , int [] result ) { for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { result [ i ] = ( ( src [ i ] ) + ( dst [ i ] ) ) > > NUMBER_CONSTANT ; } result [ NUMBER_CONSTANT ] = java.lang.Math . min ( NUMBER_CONSTANT , ( ( src [ NUMBER_CONSTANT ] ) + ( dst [ NUMBER_CONSTANT ] ) ) ) ; return result ; }
@ java.lang.Override public android.os.ParcelFileDescriptor connectSocket ( android.bluetooth.BluetoothDevice device , int type , android.os.ParcelUuid uuid , int port , int flag ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return null ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return null ; } return service . connectSocket ( device , type , uuid , port , flag ) ; }
public void finishDrawingWindow ( com.android.server.WindowManagerService.Session session , android.view.IWindow client ) { final long origId = android.os.Binder . clearCallingIdentity () ; synchronized ( mWindowMap ) { com.android.server.WindowManagerService.WindowState win = windowForClientLocked ( session , client , false ) ; if ( ( win != null ) && ( win . finishDrawingLocked () ) ) { if ( ( ( win.mAttrs.flags ) & ( android.view.WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER ) ) != NUMBER_CONSTANT ) { adjustWallpaperWindowsLocked () ; } mLayoutNeeded = true ; performLayoutAndPlaceSurfacesLocked () ; } } android.os.Binder . restoreCallingIdentity ( origId ) ; }
private V putImpl ( K key , V value ) { if ( key == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } keyType . cast ( key ) ; int keyOrdinal = key . ordinal () ; if ( ! ( hasMapping [ keyOrdinal ] ) ) { hasMapping [ keyOrdinal ] = true ; ( mappingsCount ) ++ ; } V oldValue = values [ keyOrdinal ] ; values [ keyOrdinal ] = value ; return oldValue ; }
public void testStageInstallWithErrorCode_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer . getWorkingDir () ; assertTrue ( workingDir . mkdir () ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest . createFile ( new java.io.File ( workingDir , STRING_CONSTANT ) , new byte [] { CHAR_CONS } ) ; com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer . stageInstallWithErrorCode ( distro ) ) ; assertInstallDistroStaged ( distro ) ; assertNoInstalledDistro () ; }
private void testConnectivityConstraintFailsImpl ( int requiredNetworkType , int jobId ) { android.app.job.JobInfo testJob = new android.app.job.JobInfo.Builder ( jobId , mMockComponent ) . setRequiredNetworkType ( requiredNetworkType ) . build () ; mTestEnvironment . setUp () ; mTestEnvironment . setExpectedExecutions ( NUMBER_CONSTANT ) ; mJobScheduler . schedule ( testJob ) ; boolean testPassed ; try { testPassed = mTestEnvironment . awaitTimeout () ; } catch ( java.lang.InterruptedException e ) { testPassed = false ; } runOnUiThread ( new com.android.cts.verifier.jobscheduler.ConnectivityConstraintTestActivity.ConnectivityConstraintTestResultRunner ( jobId , testPassed ) ) ; }
@ java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get ( com.android.jack.dx.rop.cst.Constant cst ) { if ( cst == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } throwIfNotPrepared () ; com.android.jack.dx.dex.file.IndexedItem result = classDefs . get ( cst ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return result ; }
void onTargetPackageRemoved ( @ android.annotation.NonNull final java.lang.String packageName , final int userId ) { if ( com.android.server.om.OverlayManagerService.DEBUG ) { android.util.Slog . d ( com.android.server.om.OverlayManagerService.TAG , ( ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) + userId ) ) ; } updateAllOverlaysForTarget ( packageName , userId , null ) ; }
@ java.lang.Override public void onSimStateChanged ( int subId , int slotId , com.android.internal.telephony.IccCardConstants.State simState ) { if ( com.android.keyguard.KeyguardSimPinView.DEBUG ) android.util.Log . v ( com.android.keyguard.KeyguardSimPinView.TAG , ( ( ( ( STRING_CONSTANT + subId ) + STRING_CONSTANT ) + simState ) + STRING_CONSTANT ) ) ; switch ( simState ) { case ABSENT : { com.android.keyguard.KeyguardUpdateMonitor . getInstance ( getContext () ) . reportSimUnlocked ( mSubId ) ; if ( ( mCallback ) != null ) { mCallback . dismiss ( true , com.android.keyguard.KeyguardUpdateMonitor . getCurrentUser () ) ; } break; } default: resetState () ; } }
final boolean isPowered ( int plugTypeSet ) { if ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_UNKNOWN ) ) { return true ; } if ( plugTypeSet == NUMBER_CONSTANT ) { return false ; } int plugTypeBit = NUMBER_CONSTANT ; if ( mAcOnline ) { plugTypeBit |= android.os.BatteryManager.BATTERY_PLUGGED_AC ; } if ( mUsbOnline ) { plugTypeBit |= android.os.BatteryManager.BATTERY_PLUGGED_USB ; } return ( plugTypeSet & plugTypeBit ) != NUMBER_CONSTANT ; }
private com.android.bluetooth.pbap.BluetoothPbapService getService () { if ( ! ( com.android.bluetooth.Utils . checkCaller () ) ) { android.util.Log . w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , STRING_CONSTANT ) ; return null ; } if ( ( ( mService ) != null ) && ( mService . isAvailable () ) ) { return mService ; } return null ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.intellij.openapi.project.Project project = PlatformDataKeys.PROJECT . getData ( e . getDataContext () ) ; if ( project == null ) { project = com.intellij.openapi.project.ProjectManager . getInstance () . getDefaultProject () ; } if ( com.intellij.ide.actions.ShowStructureSettingsAction . isGradleProject ( project ) ) { com.intellij.ide.actions.ShowStructureSettingsAction . showDisabledProjectStructureDialogMessage () ; } com.intellij.openapi.options.ShowSettingsUtil . getInstance () . editConfigurable ( project , OptionsEditorDialog.DIMENSION_KEY , com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable . getInstance ( project ) ) ; }
@ java.lang.Override public boolean onKeyPreIme ( int keyCode , android.view.KeyEvent event ) { if ( ( event . getKeyCode () ) == ( android.view.KeyEvent.KEYCODE_BACK ) ) { if ( android.support.v17.leanback.widget.SearchEditText.DEBUG ) android.util.Log . v ( android.support.v17.leanback.widget.SearchEditText.TAG , STRING_CONSTANT ) ; if ( ( mKeyboardDismissListener ) != null ) { mKeyboardDismissListener . onKeyboardDismiss () ; } return false ; } return super . onKeyPreIme ( keyCode , event ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putShort ( short x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putShort ( ix ( nextPutIndex ( SizeOf.SHORT ) ) , x ) ; return this ; }
private static synchronized void setAdapterService ( com.android.bluetooth.btservice.AdapterService instance ) { if ( ( instance != null ) && ( ! ( instance.mCleaningUp ) ) ) { if ( com.android.bluetooth.btservice.AdapterService.DBG ) { android.util.Log . d ( com.android.bluetooth.btservice.AdapterService.TAG , ( STRING_CONSTANT + instance ) ) ; } com.android.bluetooth.btservice.AdapterService.sAdapterService = instance ; } else { if ( com.android.bluetooth.btservice.AdapterService.DBG ) { if ( instance == null ) { android.util.Log . d ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; } else if ( instance.mCleaningUp ) { android.util.Log . d ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; } } } }
public void test_getProvider ( ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < ( keyfactAlgs.length ) ; i ++ ) { java.security.KeyFactory fact = java.security.KeyFactory . getInstance ( keyfactAlgs [ i ] ) ; java.security.Provider p = fact . getProvider () ; assertNotNull ( ( STRING_CONSTANT + ( keyfactAlgs [ i ] ) ) , p ) ; } }
public void test_isReachable_neverThrows ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress . getByName ( STRING_CONSTANT ) ; final java.net.NetworkInterface netIf = java.net.NetworkInterface . getByName ( STRING_CONSTANT ) ; if ( netIf == null ) { java.lang.System . logI ( STRING_CONSTANT ) ; return; } assertFalse ( inetAddress . isReachable ( netIf , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; }
private void initLayoutParameters ( android.content.res.Configuration configuration ) { mLayoutParams = getLayoutParameters ( ( ( configuration.orientation ) == ( android.content.res.Configuration.ORIENTATION_PORTRAIT ) ? LayoutParameters.HVGA_PORTRAIT : LayoutParameters.HVGA_LANDSCAPE ) ) ; if ( com.android.mms.layout.LayoutManager.LOCAL_LOGV ) { android.util.Log . v ( com.android.mms.layout.LayoutManager.TAG , ( ( ( ( ( STRING_CONSTANT + ( mLayoutParams . getTypeDescription () ) ) + STRING_CONSTANT ) + ( mLayoutParams . getWidth () ) ) + STRING_CONSTANT ) + ( mLayoutParams . getHeight () ) ) ) ; } }
private static void runConfigMatchTest ( java.lang.String refConfig , int resultIndex , java.lang.String . . . configs ) { com.android.ide.common.resources.configuration.FolderConfiguration reference = com.android.ide.common.resources.configuration.FolderConfiguration . getConfig ( com.android.ide.common.resources.configuration.FolderConfigurationTest . getFolderSegments ( refConfig ) ) ; assertNotNull ( reference ) ; java.util.List < ? extends com.android.ide.common.resources.configuration.Configurable > list = com.android.ide.common.resources.configuration.FolderConfigurationTest . getConfigurable ( configs ) ; com.android.ide.common.resources.configuration.Configurable match = reference . findMatchingConfigurable ( list ) ; assertEquals ( resultIndex , list . indexOf ( match ) ) ; }
private void fillUi () { if ( ( ( com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () ) != null ) && ( mProject . isOpen () ) ) { com.android.ide.eclipse.adt.internal.project.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk . getProjectState ( mProject ) ; com.android.sdklib.IAndroidTarget target = state . getTarget () ; if ( target != null ) { mSelector . setSelection ( target ) ; } mIsLibrary . setSelection ( state . isLibrary () ) ; mLibraryDependencies . setContent ( state ) ; } }
private boolean enforceChecksumValidity () { byte [] storedDigest = new byte [ com.android.server.PersistentDataBlockService.DIGEST_SIZE_BYTES ] ; synchronized ( mLock ) { byte [] digest = computeDigestLocked ( storedDigest ) ; if ( ( digest == null ) || ( ! ( java.util.Arrays . equals ( storedDigest , digest ) ) ) ) { android.util.Slog . i ( com.android.server.PersistentDataBlockService.TAG , STRING_CONSTANT ) ; formatPartitionLocked ( false ) ; return false ; } } return true ; }
public void test_toString ( ) throws java.lang.Exception { java.security.cert.CertificateFactory certFact = java.security.cert.CertificateFactory . getInstance ( STRING_CONSTANT ) ; java.security.cert.X509Certificate pemCert = ( ( java.security.cert.X509Certificate ) ( certFact . generateCertificate ( new java.io.ByteArrayInputStream ( org.apache.harmony.security.tests.support.cert.TestUtils . getX509Certificate_v3 () ) ) ) ) ; byte [] extnValue = pemCert . getExtensionValue ( STRING_CONSTANT ) ; assertEquals ( java.util.Arrays . toString ( new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ) , java.util.Arrays . toString ( extnValue ) ) ; assertNotNull ( pemCert . toString () ) ; }
public void runTest ( final com.android.cts.TestDevice device , final com.android.cts.Test test ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , com.android.cts.InvalidApkPathException , com.android.cts.InvalidNameSpaceException { if ( test == null ) { return; } mTestStop = false ; mIsInBatchMode = false ; println ( com.android.cts.TestPackage.PKG_LOG_SEPARATOR ) ; println ( ( STRING_CONSTANT + ( getAppPackageName () ) ) ) ; setTestDevice ( device ) ; runTestImpl ( test ) ; }
protected void readManifest ( java.io.File manifest ) { if ( manifest . exists () ) { try { java.lang.String xml = com.google.common.io.Files . toString ( manifest , com.google.common.base.Charsets.UTF_8 ) ; org.w3c.dom.Document document = com.android.utils.XmlUtils . parseDocumentSilently ( xml , true ) ; if ( document != null ) { readManifest ( document ) ; } } catch ( java.io.IOException e ) { mClient . log ( e , STRING_CONSTANT , manifest ) ; } } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ com.google.common.annotations.VisibleForTesting static com.google.common.collect.ImmutableList < com.google.devtools.build.android.desugar.InputFileProvider > toRegisteredInputFileProvider ( com.google.common.io.Closer closer , java.util.List < java.nio.file.Path > paths ) throws java.io.IOException { com.google.common.collect.ImmutableList.Builder < com.google.devtools.build.android.desugar.InputFileProvider > builder = new com.google.common.collect.ImmutableList.Builder <> () ; for ( java.nio.file.Path path : paths ) { builder . add ( closer . register ( com.google.devtools.build.android.desugar.Desugar . toInputFileProvider ( path ) ) ) ; } return builder . build () ; }
@ java.lang.Override public boolean handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.server.net.NetworkStatsService.MSG_PERFORM_POLL : { final int flags = msg.arg1 ; mService . performPoll ( flags ) ; return true ; } case com.android.server.net.NetworkStatsService.MSG_UPDATE_IFACES : { mService . updateIfaces ( null ) ; return true ; } case com.android.server.net.NetworkStatsService.MSG_REGISTER_GLOBAL_ALERT : { mService . registerGlobalAlert () ; return true ; } default: { return false ; } } }
private android.text.Layout makeLayout ( java.lang.CharSequence text ) { final java.lang.CharSequence transformed = ( ( mSwitchTransformationMethod ) != null ) ? mSwitchTransformationMethod . getTransformation ( text , this ) : text ; return new android.text.StaticLayout ( transformed , mTextPaint , ( transformed != null ? ( ( int ) ( java.lang.Math . ceil ( android.text.Layout . getDesiredWidth ( transformed , mTextPaint ) ) ) ) : NUMBER_CONSTANT ) , Layout.Alignment.ALIGN_NORMAL , NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; }
protected void runInIndividualMode ( final java.lang.String javaPkgName ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , java.io.IOException { java.util.Iterator < com.android.cts.TestSuite > suites = getTestSuites () . iterator () ; while ( ( suites . hasNext () ) && ( ! ( mTestStop ) ) ) { mCurrentTestSuite = suites . next () ; mCurrentTestSuite . run ( mDevice , javaPkgName ) ; } }
boolean onDisconnect ( int cause ) { boolean changed = false ; mCause = cause ; if ( ! ( mDisconnected ) ) { doDisconnect () ; if ( com.android.internal.telephony.cdma.CdmaConnection.VDBG ) android.telephony.Rlog . d ( com.android.internal.telephony.cdma.CdmaConnection.LOG_TAG , ( STRING_CONSTANT + cause ) ) ; mOwner.mPhone . notifyDisconnect ( this ) ; if ( ( mParent ) != null ) { changed = mParent . connectionDisconnected ( this ) ; } } releaseWakeLock () ; return changed ; }
public static void setVoicemailDonationEnabled ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccount , boolean isEnabled ) { com.android.dialer.common.Assert . checkArgument ( com.android.voicemail.VoicemailComponent . get ( context ) . getVoicemailClient () . isVoicemailTranscriptionAvailable ( context , phoneAccount ) ) ; new com.android.voicemail.impl.VisualVoicemailPreferences ( context , phoneAccount ) . edit () . putBoolean ( com.android.voicemail.impl.settings.VisualVoicemailSettingsUtil.DONATE_VOICEMAILS_KEY , isEnabled ) . apply () ; }
public static org.bouncycastle.asn1.x9.X9ECParameters getNamedCurveByName ( java.lang.String curveName ) { org.bouncycastle.asn1.x9.X9ECParameters params = org.bouncycastle.crypto.ec.CustomNamedCurves . getByName ( curveName ) ; if ( params == null ) { params = org.bouncycastle.asn1.x9.X962NamedCurves . getByName ( curveName ) ; if ( params == null ) { params = org.bouncycastle.asn1.sec.SECNamedCurves . getByName ( curveName ) ; } if ( params == null ) { params = org.bouncycastle.asn1.nist.NISTNamedCurves . getByName ( curveName ) ; } } return params ; }
private void initPrefs ( android.content.Context context ) { final android.content.ContentResolver contentResolver = context . getContentResolver () ; mResolver = new java.lang.ref.WeakReference < android.content.ContentResolver > ( contentResolver ) ; if ( ( mObserver ) == null ) { mObserver = new android.text.method.TextKeyListener.SettingsObserver () ; contentResolver . registerContentObserver ( Settings.System.CONTENT_URI , true , mObserver ) ; } updatePrefs ( contentResolver ) ; mPrefsInited = true ; }
@ java.lang.Override protected void tearDown ( ) throws java.lang.Exception { if ( ( ! ( android.net.wifi.cts.WifiFeature . isWifiSupported ( getContext () ) ) ) && ( ! ( android.net.wifi.cts.WifiFeature . isP2pSupported ( getContext () ) ) ) ) { super . tearDown () ; return; } mContext . unregisterReceiver ( mReceiver ) ; if ( ! ( mWifiManager . isWifiEnabled () ) ) { assertTrue ( mWifiManager . setWifiEnabled ( true ) ) ; java.lang.Thread . sleep ( android.net.wifi.cts.ConcurrencyTest.DURATION ) ; } super . tearDown () ; }
@ android.support.test.filters.FlakyTest @ org.junit.Test public void testNvResetConfig ( ) throws java.lang.Exception { int resetType = NUMBER_CONSTANT ; mRILUnderTest . nvResetConfig ( resetType , obtainMessage () ) ; org.mockito.Mockito . verify ( mRadioProxy ) . nvResetConfig ( mSerialNumberCaptor . capture () , org.mockito.Matchers . eq ( ( ( java.lang.Integer ) ( invokeMethod ( mRILInstance , STRING_CONSTANT , new java.lang.Class < > [] { java.lang.Integer.TYPE } , new java.lang.Object [] { resetType } ) ) ) ) ) ; com.android.internal.telephony.RILTest . verifyRILResponse ( mRILUnderTest , mSerialNumberCaptor . getValue () , com.android.internal.telephony.RILConstants.RIL_REQUEST_NV_RESET_CONFIG ) ; }
private void verifyRemoveConnectionExtras () { mOnExtrasChangedCounter . waitForCount ( NUMBER_CONSTANT , android.telecom.cts.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS ) ; android.os.Bundle extras = mCall . getDetails () . getExtras () ; assertFalse ( extras . containsKey ( android.telecom.cts.CallDetailsTest.TEST_EXTRA_KEY ) ) ; assertTrue ( extras . containsKey ( android.telecom.cts.CallDetailsTest.TEST_EXTRA_KEY2 ) ) ; assertEquals ( android.telecom.cts.CallDetailsTest.TEST_EXTRA_VALUE , extras . getInt ( android.telecom.cts.CallDetailsTest.TEST_EXTRA_KEY2 ) ) ; }
public static synchronized void setScannedChannelCount ( android.content.Context context , int channelCount ) { if ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) { com.android.tv.tuner.TunerPreferences . setPreference ( context , com.android.tv.tuner.TunerPreferences.PREFS_KEY_SCANNED_CHANNEL_COUNT , channelCount ) ; } else { com.android.tv.tuner.TunerPreferences . getSharedPreferences ( context ) . edit () . putInt ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_SCANNED_CHANNEL_COUNT , channelCount ) . apply () ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public java.lang.Object clone () { java.util.TreeSet < E > clone ; try { clone = ( ( java.util.TreeSet < E > ) ( super . clone () ) ) ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError ( e ) ; } clone.m = new java.util.TreeMap <> ( m ) ; return clone ; }
private void transformAnnotationDirectories ( com.android.dx.io.DexBuffer in , com.android.dx.merge.IndexMap indexMap ) { com.android.dx.dex.TableOfContents.Section section = in . getTableOfContents () . annotationsDirectories ; if ( section . exists () ) { com.android.dx.io.DexBuffer.Section directoryIn = in . open ( section.off ) ; for ( int i = NUMBER_CONSTANT ; i < ( section.size ) ; i ++ ) { transformAnnotationDirectory ( directoryIn , indexMap ) ; } } }
public static boolean storeUnknownField ( final java.util.List < com.google.protobuf.nano.UnknownFieldData > data , final com.google.protobuf.nano.CodedInputByteBufferNano input , final int tag ) throws java.io.IOException { int startPos = input . getPosition () ; if ( ! ( input . skipField ( tag ) ) ) { return false ; } int endPos = input . getPosition () ; byte [] bytes = input . getData ( startPos , ( endPos - startPos ) ) ; data . add ( new com.google.protobuf.nano.UnknownFieldData ( tag , bytes ) ) ; return true ; }
public static libcore.javax.net.ssl.TestSSLContext create ( libcore.java.security.TestKeyStore client , libcore.java.security.TestKeyStore server ) { java.lang.String protocol = STRING_CONSTANT ; javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext . createSSLContext ( protocol , client.keyManagers , client.trustManagers ) ; javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext . createSSLContext ( protocol , server.keyManagers , server.trustManagers ) ; return libcore.javax.net.ssl.TestSSLContext . create ( client.keyStore , client.storePassword , server.keyStore , server.storePassword , client.keyManagers , server.keyManagers , client.trustManagers [ NUMBER_CONSTANT ] , server.trustManagers [ NUMBER_CONSTANT ] , clientContext , serverContext ) ; }
private static void printInContent ( com.intellij.execution.ui.RunContentDescriptor descriptor , java.lang.Object o , com.intellij.execution.ui.ConsoleViewContentType contentType ) { com.intellij.execution.console.RunIdeConsoleAction . selectContent ( descriptor ) ; com.intellij.execution.impl.ConsoleViewImpl consoleView = ( ( com.intellij.execution.impl.ConsoleViewImpl ) ( descriptor . getExecutionConsole () ) ) ; consoleView . print ( ( o + STRING_CONSTANT ) , contentType ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public java.lang.String toString () { return ( ( ( STRING_CONSTANT + ( com.android.sched.item.Items . getName ( instances.steps [ ( ( next ) - NUMBER_CONSTANT ) ] . getInstance () . getClass () ) ) ) + STRING_CONSTANT ) + ( data . toString () ) ) + STRING_CONSTANT ; }
public boolean answer ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configs , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { for ( java.util.Map.Entry < java.lang.String , android.net.wifi.WifiConfiguration > entry : createWpaSupplicantLoadData ( networks ) . entrySet () ) { configs . put ( entry . getKey () , entry . getValue () ) ; } return true ; }
public void test_setDefaultLjava_util_TimeZone () { java.util.TimeZone . setDefault ( null ) ; java.util.TimeZone oldDefault = java.util.TimeZone . getDefault () ; java.util.TimeZone zone = new java.util.SimpleTimeZone ( NUMBER_CONSTANT , STRING_CONSTANT ) ; java.util.TimeZone . setDefault ( zone ) ; assertEquals ( STRING_CONSTANT , zone , java.util.TimeZone . getDefault () ) ; java.util.TimeZone . setDefault ( null ) ; assertEquals ( STRING_CONSTANT , oldDefault , java.util.TimeZone . getDefault () ) ; }
private java.lang.String scriptDisplayNameInContext ( java.lang.String script , boolean skipAdjust ) { if ( ( nameLength ) == ( android.icu.text.DisplayContext.LENGTH_SHORT ) ) { java.lang.String scriptName = langData . get ( STRING_CONSTANT , script ) ; if ( ( scriptName != null ) && ( ! ( scriptName . equals ( script ) ) ) ) { return skipAdjust ? scriptName : adjustForUsageAndContext ( android.icu.impl.LocaleDisplayNamesImpl.CapitalizationContextUsage.SCRIPT , scriptName ) ; } } java.lang.String scriptName = langData . get ( STRING_CONSTANT , script ) ; return skipAdjust ? scriptName : adjustForUsageAndContext ( android.icu.impl.LocaleDisplayNamesImpl.CapitalizationContextUsage.SCRIPT , scriptName ) ; }
@ java.lang.Override protected boolean engineVerify ( byte [] sigBytes ) throws java.security.SignatureException { if ( ( key ) == null ) { throw new java.security.SignatureException ( STRING_CONSTANT ) ; } try { int result = org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_VerifyFinal ( ctx , sigBytes , NUMBER_CONSTANT , sigBytes.length , key . getPkeyContext () ) ; return result == NUMBER_CONSTANT ; } catch ( java.lang.Exception ex ) { return false ; } finally { destroyContextIfExists () ; } }
static com.android.bluetooth.hfp.HeadsetStateMachine make ( android.bluetooth.BluetoothDevice device , android.os.Looper looper , com.android.bluetooth.hfp.HeadsetService service , com.android.bluetooth.hfp.HeadsetNativeInterface nativeInterface , com.android.bluetooth.hfp.HeadsetSystemInterface systemInterface ) { android.util.Log . i ( com.android.bluetooth.hfp.HeadsetStateMachine.TAG , STRING_CONSTANT ) ; com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = new com.android.bluetooth.hfp.HeadsetStateMachine ( device , looper , service , nativeInterface , systemInterface ) ; stateMachine . start () ; return stateMachine ; }
public void testDisconnectBeforeConnect ( ) throws java.io.IOException { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; connection . disconnect () ; assertContent ( STRING_CONSTANT , connection ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , connection . getResponseCode () ) ; }
private void onThemeChange () { saveState () ; int themeIndex = mThemeCombo . getSelectionIndex () ; if ( themeIndex != ( - NUMBER_CONSTANT ) ) { java.lang.String theme = mThemeCombo . getItem ( themeIndex ) ; if ( theme . equals ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.THEME_SEPARATOR ) ) { mThemeCombo . select ( NUMBER_CONSTANT ) ; } if ( ( mListener ) != null ) { mListener . onThemeChange () ; } } }
@ android.support.annotation.VisibleForTesting public boolean canConnectToDevice ( android.bluetooth.BluetoothDevice device ) { int connected = NUMBER_CONSTANT ; synchronized ( mStateMachines ) { for ( com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachines . values () ) { switch ( sm . getConnectionState () ) { case android.bluetooth.BluetoothProfile.STATE_CONNECTING : case android.bluetooth.BluetoothProfile.STATE_CONNECTED : if ( java.util.Objects . equals ( device , sm . getDevice () ) ) { return true ; } connected ++ ; break; default: break; } } } return connected < ( mMaxConnectedAudioDevices ) ; }
@ org.junit.Test public void testCopyAndClear () { android.net.StaticIpConfiguration empty = new android.net.StaticIpConfiguration ( ( ( android.net.StaticIpConfiguration ) ( null ) ) ) ; checkEmpty ( empty ) ; android.net.StaticIpConfiguration s1 = makeTestObject () ; android.net.StaticIpConfiguration s2 = new android.net.StaticIpConfiguration ( s1 ) ; org.junit.Assert . assertEquals ( s1 , s2 ) ; s2 . clear () ; org.junit.Assert . assertEquals ( empty , s2 ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testGetLine1Number ( ) throws java.lang.Exception { int subId = NUMBER_CONSTANT ; java.lang.String line1Number = STRING_CONSTANT ; makeAccountsVisibleToAllUsers ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT ) ; org.mockito.Mockito . when ( mFakePhoneAccountRegistrar . getSubscriptionIdForPhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT ) ) . thenReturn ( subId ) ; android.telephony.TelephonyManager mockTelephonyManager = ( ( android.telephony.TelephonyManager ) ( mContext . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; org.mockito.Mockito . when ( mockTelephonyManager . getLine1Number ( subId ) ) . thenReturn ( line1Number ) ; org.junit.Assert . assertEquals ( line1Number , mTSIBinder . getLine1Number ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT , com.android.server.telecom.tests.TelecomServiceImplTest.DEFAULT_DIALER_PACKAGE ) ) ; }
public void test_getInstanceLjava_util_Locale () { try { java.text.DecimalFormatSymbols . getInstance ( null ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} assertEquals ( new java.text.DecimalFormatSymbols ( java.util.Locale.GERMANY ) , java.text.DecimalFormatSymbols . getInstance ( java.util.Locale.GERMANY ) ) ; java.util.Locale locale = new java.util.Locale ( STRING_CONSTANT , STRING_CONSTANT ) ; java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols . getInstance ( locale ) ; assertNotNull ( symbols ) ; }
public void test_ConstructorILjava_net_InetAddress ( ) throws java.io.IOException { try ( java.net.DatagramSocket ds = new java.net.DatagramSocket ( NUMBER_CONSTANT , java.net.InetAddress . getLocalHost () ) ) { assertTrue ( STRING_CONSTANT , ( ( ds . getLocalPort () ) != NUMBER_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , java.net.InetAddress . getLocalHost () , ds . getLocalAddress () ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer put ( int i , byte x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } put ( ix ( checkIndex ( i ) ) , x ) ; return this ; }
public static com.android.manifmerger.XmlDocument load ( java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser () ; org.w3c.dom.Document domDocument = positionXmlParser . parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( null , xmlFile ) , domDocument . getDocumentElement () ) : null ; }
private static int getAlignment ( java.util.List < ? extends com.android.jack.dx.dex.file.OffsettedItem > items ) { assert items != null ; try { return java.lang.Math . max ( com.android.jack.dx.dex.file.UniformListItem.HEADER_SIZE , items . get ( NUMBER_CONSTANT ) . getAlignment () ) ; } catch ( java.lang.IndexOutOfBoundsException ex ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } }
public void test_setTrafficClass ( ) throws java.lang.Exception { try ( java.net.DatagramSocket s = new java.net.DatagramSocket () ) { for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; ++ i ) { s . setTrafficClass ( i ) ; assertEquals ( i , s . getTrafficClass () ) ; } } }
public static int MultiplePhis () { int x = NUMBER_CONSTANT ; int y = NUMBER_CONSTANT ; while ( ( y ++ ) < NUMBER_CONSTANT ) { if ( y > NUMBER_CONSTANT ) { x = NUMBER_CONSTANT ; } else { x = NUMBER_CONSTANT ; } } return x ; }
com.google.devtools.common.options.OptionsParser.OptionValueDescription clearValue ( java.lang.String optionName ) throws com.google.devtools.common.options.OptionsParsingException { java.lang.reflect.Field field = optionsData . getFieldFromName ( optionName ) ; if ( field == null ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_CONSTANT + optionName ) + STRING_CONSTANT ) ) ; } canonicalizeValues . removeAll ( field ) ; return parsedValues . remove ( field ) ; }
public void resetBit ( int i ) throws java.lang.RuntimeException { if ( i < NUMBER_CONSTANT ) { throw new java.lang.RuntimeException () ; } if ( i > ( ( len ) - NUMBER_CONSTANT ) ) { return; } value [ ( i > > > NUMBER_CONSTANT ) ] &= ~ ( org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial.bitMask [ ( i & NUMBER_CONSTANT ) ] ) ; }
private boolean scanFile ( int arrayPos ) { com.android.bluetooth.opp.BluetoothOppShareInfo info = mShares . get ( arrayPos ) ; synchronized ( this ) { if ( com.android.bluetooth.opp.BluetoothOppService.D ) { android.util.Log . d ( com.android.bluetooth.opp.BluetoothOppService.TAG , ( STRING_CONSTANT + ( info.mFilename ) ) ) ; } if ( ! ( mMediaScanInProgress ) ) { mMediaScanInProgress = true ; new com.android.bluetooth.opp.BluetoothOppService.MediaScannerNotifier ( this , info , mHandler ) ; return true ; } else { return false ; } } }
public void testNonBlockingRecv ( ) throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel . open () ; try { dc . configureBlocking ( false ) ; dc . bind ( null ) ; assertNull ( dc . receive ( java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ) ) ; } finally { dc . close () ; } }
public void test_socket_accept_Blocking_Bound ( ) throws java.io.IOException { serverChannel . configureBlocking ( true ) ; serverChannel . bind ( null ) ; serverChannel . close () ; try { serverChannel . socket () . accept () ; fail ( STRING_CONSTANT ) ; } catch ( java.nio.channels.ClosedChannelException expected ) {} }
public void test_getX ( ) throws java.lang.Exception { java.security.KeyPairGenerator keyGen = java.security.KeyPairGenerator . getInstance ( STRING_CONSTANT ) ; keyGen . initialize ( new java.security.spec.DSAParameterSpec ( Util.P , Util.Q , Util.G ) , new java.security.SecureRandom () ) ; java.security.KeyPair keyPair = keyGen . generateKeyPair () ; java.security.interfaces.DSAPrivateKey key = ( ( java.security.interfaces.DSAPrivateKey ) ( keyPair . getPrivate () ) ) ; assertNotNull ( STRING_CONSTANT , key . getX () ) ; }
@ java.lang.Override public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ( ( mUsesRtlAttributes ) && ( ( mEnabledRtlSupport ) == null ) ) && ( rtlApplies ( context ) ) ) { java.util.List < java.io.File > manifestFile = context . getMainProject () . getManifestFiles () ; if ( ! ( manifestFile . isEmpty () ) ) { com.android.tools.lint.detector.api.Location location = com.android.tools.lint.detector.api.Location . create ( manifestFile . get ( NUMBER_CONSTANT ) ) ; context . report ( com.android.tools.lint.checks.RtlDetector.ENABLED , location , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } } }
public java.lang.String getIanaVersion () { try ( java.io.Reader reader = xmlSource . get () ) { org.xmlpull.v1.XmlPullParserFactory xmlPullParserFactory = org.xmlpull.v1.XmlPullParserFactory . newInstance () ; xmlPullParserFactory . setNamespaceAware ( false ) ; org.xmlpull.v1.XmlPullParser parser = xmlPullParserFactory . newPullParser () ; parser . setInput ( reader ) ; libcore.util.TimeZoneFinder . findRequiredStartTag ( parser , libcore.util.TimeZoneFinder.TIMEZONES_ELEMENT ) ; return parser . getAttributeValue ( null , libcore.util.TimeZoneFinder.IANA_VERSION_ATTRIBUTE ) ; } catch ( org.xmlpull.v1.XmlPullParserException | java.io.IOException e ) { return null ; } }
@ java.lang.Override public boolean processMessage ( android.os.Message message ) { logStateAndMessage ( message , this ) ; switch ( message.what ) { case com.android.server.wifi.WifiStateMachine.CMD_DISABLE_P2P_RSP : transitionTo ( mTransitionToState ) ; break; case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT : case com.android.server.wifi.WifiStateMachine.CMD_START_SUPPLICANT : case com.android.server.wifi.WifiStateMachine.CMD_STOP_SUPPLICANT : case com.android.server.wifi.WifiStateMachine.CMD_START_AP : case com.android.server.wifi.WifiStateMachine.CMD_STOP_AP : case com.android.server.wifi.WifiStateMachine.CMD_SET_OPERATIONAL_MODE : case com.android.server.wifi.WifiStateMachine.CMD_SET_FREQUENCY_BAND : case com.android.server.wifi.WifiStateMachine.CMD_START_SCAN : case com.android.server.wifi.WifiStateMachine.CMD_DISCONNECT : case com.android.server.wifi.WifiStateMachine.CMD_REASSOCIATE : case com.android.server.wifi.WifiStateMachine.CMD_RECONNECT : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break; default: return NOT_HANDLED ; } return HANDLED ; }
public void testNewInstanceString_ByteArrayStringConstructor () { runTestNewInstanceString ( STRING_CONSTANT , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider () { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature () ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value stringCharsetValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; constructorArguments . add ( byteArrayValue ) ; constructorArguments . add ( stringCharsetValue ) ; } } ) ; }
public java.lang.String toString () { int mod = getModifiers () ; return ( ( ( ( ( mod == NUMBER_CONSTANT ? STRING_CONSTANT : ( java.lang.reflect.Modifier . toString ( mod ) ) + STRING_CONSTANT ) + ( getType () . getTypeName () ) ) + STRING_CONSTANT ) + ( getDeclaringClass () . getTypeName () ) ) + STRING_CONSTANT ) + ( getName () ) ; }
public boolean reportError ( android.bluetooth.BluetoothDevice device , byte error ) { boolean result = false ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { result = service . reportError ( device , error ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return result ; }
public android.graphics.Bitmap createNotificationBadgeBitmap ( @ android.support.annotation.NonNull android.net.wifi.WifiConfiguration config , @ android.support.annotation.NonNull java.util.List < android.net.wifi.ScanResult > scanResults ) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult ( scanResults , config ) ; if ( matchingScanResult == null ) { return null ; } int rssi = matchingScanResult.level ; android.net.WifiKey wifiKey = new android.net.WifiKey ( config.SSID , config.BSSID ) ; android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider . getCachedScoredNetwork ( new android.net.NetworkKey ( wifiKey ) ) ; if ( scoredNetwork != null ) { return getBadgedWifiBitmap ( scoredNetwork . calculateBadge ( rssi ) , rssi ) ; } return null ; }
private static void onTransmitFollowupEvent ( short transactionId , int reason ) { if ( com.android.server.wifi.nan.WifiNanNative.VDBG ) { android.util.Log . v ( com.android.server.wifi.nan.WifiNanNative.TAG , ( ( ( STRING_CONSTANT + transactionId ) + STRING_CONSTANT ) + reason ) ) ; } if ( reason == ( com.android.server.wifi.nan.WifiNanNative.NAN_STATUS_SUCCESS ) ) { com.android.server.wifi.nan.WifiNanStateManager . getInstance () . onMessageSendSuccessNotification ( transactionId ) ; } else { com.android.server.wifi.nan.WifiNanStateManager . getInstance () . onMessageSendFailNotification ( transactionId , reason ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer putChar ( int i , char x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putChar ( ix ( checkIndex ( i , SizeOf.CHAR ) ) , x ) ; return this ; }
public void test_SSL_free ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_free ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_new () ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_free ( org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_new ( c ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_free ( c ) ; }
private void changePathRequestFromNative ( byte [] address , byte direction , byte [] folderUid ) { android.os.Bundle data = new android.os.Bundle () ; android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_CHANGE_PATH ) ; data . putByteArray ( STRING_CONSTANT , address ) ; data . putByteArray ( STRING_CONSTANT , folderUid ) ; data . putByte ( STRING_CONSTANT , direction ) ; msg . setData ( data ) ; mHandler . sendMessage ( msg ) ; }
private com.android.sdkuilib.internal.repository.core.PkgCategory findCategoryForItem ( com.android.sdklib.internal.repository.updater.PkgItem item ) { java.util.List < com.android.sdkuilib.internal.repository.core.PkgCategory > cats = mDiffLogic . getCategories () ; for ( com.android.sdkuilib.internal.repository.core.PkgCategory cat : cats ) { for ( com.android.sdklib.internal.repository.updater.PkgItem i : cat . getItems () ) { if ( i == item ) { return cat ; } } } return null ; }
private boolean isDayFirst () { libcore.icu.LocaleData d = libcore.icu.LocaleData . get ( mContext . getResources () . getConfiguration () . locale ) ; java.lang.String value = d.shortDateFormat4 ; return ( value . indexOf ( CHAR_CONS ) ) > ( value . indexOf ( CHAR_CONS ) ) ; }
private java.lang.String getBrowseServiceName ( java.lang.String packageName ) { java.lang.String browseServiceName = STRING_CONSTANT ; synchronized ( mBrowsePlayerInfoList ) { int browseInfoID = getBrowseId ( packageName ) ; if ( browseInfoID != ( - NUMBER_CONSTANT ) ) { browseServiceName = mBrowsePlayerInfoList . get ( browseInfoID ) . serviceClass ; } } if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . d ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) + browseServiceName ) ) ; return browseServiceName ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser . getOptionsDataInternal ( optionsClass ) ; java.util.List < java.lang.reflect.Field > optionFields = new java.util.ArrayList ( data . getFieldsForClass ( optionsClass ) ) ; optionFields . sort ( com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage . getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , null ) ; } }
private boolean haveArtifact ( java.lang.String groupId ) { for ( com.android.tools.gradle.eclipse.ImportModule module : mRootModules ) { for ( com.android.ide.common.repository.GradleCoordinate dependency : module . getDependencies () ) { if ( groupId . equals ( dependency . getGroupId () ) ) { return true ; } } } return false ; }
@ javax.annotation.Nonnull public static < T extends java.lang.Enum < T > > com.android.sched.util.config.id.EnumPropertyId < T > create ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.lang.String description , @ javax.annotation.Nonnull java.lang.Class < T > type ) { return new com.android.sched.util.config.id.EnumPropertyId < T > ( name , description , new com.android.sched.util.codec.EnumCodec < T > ( type ) ) ; }
public void testConditionals ( ) throws java.lang.Exception { checkStatements ( ( - NUMBER_CONSTANT ) , ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) , STRING_CONSTANT ) ; checkStatements ( ( - NUMBER_CONSTANT ) , ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , STRING_CONSTANT ) ; }
public E pollLast () { int t = ( ( tail ) - NUMBER_CONSTANT ) & ( ( elements.length ) - NUMBER_CONSTANT ) ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) E result = ( ( E ) ( elements [ t ] ) ) ; if ( result == null ) return null ; elements [ t ] = null ; tail = t ; return result ; }
@ java.lang.Override public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { java.lang.String description = describe ( message ) ; com.android.ide.eclipse.adt.AdtPlugin . log ( throwable , STRING_CONSTANT , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addError ( tag , description ) ; }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == NUMBER_CONSTANT ) ) { return - NUMBER_CONSTANT ; } if ( packet != null ) { packet . setReceivedLength ( byteCount ) ; packet . setAddress ( srcAddress . getAddress () ) ; packet . setPort ( srcAddress . getPort () ) ; } return byteCount ; }
private static com.android.ide.common.blame.SourceFragmentPositionRange parseLineNumber ( java.lang.String lineNumberAsText ) throws com.android.ide.common.blame.parser.ParsingFailedException { int lineNumber = - NUMBER_CONSTANT ; if ( lineNumberAsText != null ) { try { lineNumber = java.lang.Integer . parseInt ( lineNumberAsText ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.android.ide.common.blame.parser.ParsingFailedException () ; } } return new com.android.ide.common.blame.SourceFragmentPositionRange ( lineNumber , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected void update ( com.android.ide.common.resources.ScanningContext context ) { java.util.Set < java.lang.String > oldIdNames = new java.util.HashSet < java.lang.String > ( mIdResources . keySet () ) ; mIdResources . clear () ; if ( ! ( parseFileForIds ( context ) ) ) { context . requestFullAapt () ; } java.util.Set < java.lang.String > keySet = mIdResources . keySet () ; assert keySet != oldIdNames ; if ( ( oldIdNames . equals ( keySet ) ) == false ) { updateResourceItems ( context ) ; } }
@ javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall ) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper . getCstType ( methodCall . getReceiverType () ) ; java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper . getMethodSignatureWithoutName ( methodCall ) ; com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat ( new com.android.jack.dx.rop.cst.CstString ( signatureWithoutName ) ) ; com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef ( definingClass , new com.android.jack.dx.rop.cst.CstString ( methodCall . getMethodName () ) , nat ) ; return methodRef ; }
@ javax.annotation.Nonnegative private int getParameterWordCount ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { int wordCount = ( method . isStatic () ) ? NUMBER_CONSTANT : Type.OBJECT . getWordCount () ; for ( com.android.jack.ir.ast.JParameter param : method . getParams () ) { wordCount += com.android.jack.backend.dex.rop.RopHelper . convertTypeToDx ( param . getType () ) . getWordCount () ; } return wordCount ; }
@ java.lang.Override public boolean visit ( org.eclipse.jdt.core.dom.ImportDeclaration id ) { org.eclipse.jdt.core.dom.Name import_name = id . getName () ; if ( import_name . isQualifiedName () ) { org.eclipse.jdt.core.dom.QualifiedName qualified_import_name = ( ( org.eclipse.jdt.core.dom.QualifiedName ) ( import_name ) ) ; if ( qualified_import_name . getName () . getIdentifier () . equals ( AndroidConstants.FN_RESOURCE_BASE ) ) { mRewriter . replace ( qualified_import_name . getQualifier () , mNewPackageName , null ) ; } } return true ; }
@ java.lang.Override public java.util.List < com.android.vts.servlet.Page > getBreadcrumbLinks ( javax.servlet.http.HttpServletRequest request ) { java.util.List < com.android.vts.servlet.Page > links = new java.util.ArrayList <> () ; java.lang.String planName = request . getParameter ( STRING_CONSTANT ) ; links . add ( new com.android.vts.servlet.Page ( PageType.PLAN_RELEASE , planName , ( STRING_CONSTANT + planName ) ) ) ; return links ; }
@ java.lang.Override public final boolean equals ( java.lang.Object other ) { if ( ( other == null ) || ( ( getClass () ) != ( other . getClass () ) ) ) { return false ; } com.android.jack.dx.rop.cst.CstMemberRef otherRef = ( ( com.android.jack.dx.rop.cst.CstMemberRef ) ( other ) ) ; return ( ( definingClass . equals ( otherRef.definingClass ) ) && ( name . equals ( otherRef.name ) ) ) && ( nat . equals ( otherRef.nat ) ) ; }
public boolean find ( int start ) { if ( ( start < NUMBER_CONSTANT ) || ( start > ( input . length () ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( STRING_CONSTANT + start ) + STRING_CONSTANT ) + ( input . length () ) ) ) ; } synchronized ( this ) { matchFound = java.util.regex.Matcher . findImpl ( address , start , matchOffsets ) ; } return matchFound ; }
public boolean isPossibleShortNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number . getCountryCode () ) ; java.lang.String shortNumber = com.google.i18n.phonenumbers.ShortNumberInfo . getNationalSignificantNumber ( number ) ; for ( java.lang.String region : regionCodes ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager . getShortNumberMetadataForRegion ( region ) ; if ( phoneMetadata == null ) { continue; } if ( matcherApi . matchesPossibleNumber ( shortNumber , phoneMetadata . getGeneralDesc () ) ) { return true ; } } return false ; }
public int read ( ) throws java.io.IOException { while ( ( in ) != null ) { int c = in . read () ; if ( c != ( - NUMBER_CONSTANT ) ) { return c ; } nextStream () ; } return - NUMBER_CONSTANT ; }
public void test_binarySearchLjava_util_ListLjava_lang_Object () { final int llSize = ll . size () ; try { java.util.Collections . binarySearch ( null , new java.lang.Object () ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.NullPointerException e ) {} for ( int counter = NUMBER_CONSTANT ; counter < llSize ; counter ++ ) { assertEquals ( STRING_CONSTANT , ll . get ( counter ) , ll . get ( java.util.Collections . binarySearch ( ll , ll . get ( counter ) ) ) ) ; } }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBinaryOperation binOp ) { if ( binOp instanceof com.android.jack.ir.ast.JShiftOperation ) { computeStat ( binOp , tracer . getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.SHIFT_WITH_LIT8 ) , java.lang.Byte.MIN_VALUE , java.lang.Byte.MAX_VALUE ) ; } if ( binOp instanceof com.android.jack.ir.ast.JLogicalAndBitwiseOperation ) { computeStat ( binOp , tracer . getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.LOGICAL_WITH_LIT16 ) , java.lang.Short.MIN_VALUE , java.lang.Short.MAX_VALUE ) ; } if ( binOp instanceof com.android.jack.ir.ast.JArithmeticBinaryOperation ) { computeStat ( binOp , tracer . getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.ARITHMETIC_WITH_LIT16 ) , java.lang.Short.MIN_VALUE , java.lang.Short.MAX_VALUE ) ; } return super . visit ( binOp ) ; }
@ org.junit.Test public void testConnectFailureDueToNetworkSaveFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence () ; setupMocksForConnectSequence ( true ) ; org.mockito.Mockito . when ( mSupplicantStaNetworkMock . saveWifiConfiguration ( org.mockito.Matchers . any ( android.net.wifi.WifiConfiguration . class ) ) ) . thenReturn ( false ) ; assertFalse ( mDut . connectToNetwork ( new android.net.wifi.WifiConfiguration () ) ) ; org.mockito.Mockito . verify ( mISupplicantStaIfaceMock , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . removeNetwork ( org.mockito.Matchers . anyInt () ) ; }
public boolean accept ( java.io.File pathname ) { if ( com.android.cts.verifier.os.FileUtils . getFileStatus ( pathname . getPath () , status , true ) ) { return ( ( ! ( status . isDirectory () ) ) && ( ! ( status . isSymbolicLink () ) ) ) && ( status . isSetUid () ) ; } else { android.util.Log . w ( com.android.cts.verifier.suid.SuidFilesActivity.TAG , ( STRING_CONSTANT + pathname ) ) ; return false ; } }
public void shutdown () { if ( ! ( mStopped ) ) { mStopped = true ; try { mServerSocket . close () ; } catch ( java.io.IOException e ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log . d ( TAG , STRING_CONSTANT , e ) ; } } if ( ! ( java.lang.Thread . currentThread () . equals ( this ) ) ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log . d ( TAG , STRING_CONSTANT ) ; interrupt () ; } }
private void notifyNoData ( com.android.internal.telephony.dataconnection.DcFailCause lastFailCauseCode , com.android.internal.telephony.dataconnection.ApnContext apnContext ) { if ( DBG ) log ( ( STRING_CONSTANT + ( apnContext . getApnType () ) ) ) ; if ( ( isPermanentFail ( lastFailCauseCode ) ) && ( ! ( apnContext . getApnType () . equals ( PhoneConstants.APN_TYPE_DEFAULT ) ) ) ) { mPhone . notifyDataConnectionFailed ( apnContext . getReason () , apnContext . getApnType () ) ; } }
private static java.lang.String secureHash ( byte [] input ) { if ( ( android.telecom.Log.sMessageDigest ) != null ) { android.telecom.Log.sMessageDigest . reset () ; android.telecom.Log.sMessageDigest . update ( input ) ; byte [] result = android.telecom.Log.sMessageDigest . digest () ; return android.telecom.Log . encodeHex ( result ) ; } else { return STRING_CONSTANT ; } }
private int parseFormatByte ( byte [] atrBytes , int index ) { if ( index >= ( atrBytes.length ) ) { com.android.internal.telephony.uicc.AnswerToReset . loge ( STRING_CONSTANT ) ; return - NUMBER_CONSTANT ; } mFormatByte = atrBytes [ index ] ; if ( com.android.internal.telephony.uicc.AnswerToReset.VDBG ) com.android.internal.telephony.uicc.AnswerToReset . log ( ( STRING_CONSTANT + ( ( mFormatByte ) & ( com.android.internal.telephony.uicc.AnswerToReset.T_MASK ) ) ) ) ; return index + NUMBER_CONSTANT ; }
@ com.android.internal.annotations.VisibleForTesting public void unhold () { if ( ( mState ) == ( CallState.ON_HOLD ) ) { if ( ( mConnectionService ) != null ) { mConnectionService . unhold ( this ) ; } else { android.telecom.Log . e ( this , new java.lang.NullPointerException () , STRING_CONSTANT , getId () ) ; } android.telecom.Log . addEvent ( this , LogUtils.Events.REQUEST_UNHOLD ) ; } }
public void testAttachLayoutAnimationParameters () { android.widget.cts.GridViewTest.MockGridView mockGridView = new android.widget.cts.GridViewTest.MockGridView ( mActivity ) ; android.view.ViewGroup.LayoutParams p = new android.view.ViewGroup.LayoutParams ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; mockGridView . attachLayoutAnimationParameters ( null , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; android.view.animation.GridLayoutAnimationController.AnimationParameters animationParams = ( ( android.view.animation.GridLayoutAnimationController.AnimationParameters ) ( p.layoutAnimationParameters ) ) ; assertEquals ( NUMBER_CONSTANT , animationParams.index ) ; assertEquals ( NUMBER_CONSTANT , animationParams.count ) ; }
public boolean unlock ( int userId , java.lang.String password ) { try { mError = mBinder . unlock ( userId , password ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
private static com.android.jack.dx.rop.cst.CstArray makeCstArray ( com.android.jack.dx.rop.type.TypeList types ) { int size = types . size () ; com.android.jack.dx.rop.cst.CstArray.List list = new com.android.jack.dx.rop.cst.CstArray.List ( size ) ; for ( int i = NUMBER_CONSTANT ; i < size ; i ++ ) { list . set ( i , types . getType ( i ) ) ; } list . setImmutable () ; return new com.android.jack.dx.rop.cst.CstArray ( list ) ; }
@ javax.annotation.Nonnull public final com.android.jack.dx.rop.type.Prototype getPrototype ( boolean isStatic ) { if ( isStatic ) { return prototype ; } else { if ( ( instancePrototype ) == null ) { com.android.jack.dx.rop.type.Type thisType = getDefiningClass () ; instancePrototype = prototype . withFirstParameter ( thisType ) ; } return instancePrototype ; } }
@ javax.annotation.Nonnull private com.android.jack.dx.rop.annotation.Annotations readAnnotationSet ( @ javax.annotation.Nonnull com.android.jack.dx.io.DexBuffer dex , @ javax.annotation.Nonnegative int annotationSetOffset ) { com.android.jack.dx.io.DexBuffer.Section annotationSetIn = dex . open ( annotationSetOffset ) ; int size = annotationSetIn . readInt () ; com.android.jack.dx.rop.annotation.Annotations annotations = new com.android.jack.dx.rop.annotation.Annotations () ; for ( int j = NUMBER_CONSTANT ; j < size ; j ++ ) { annotations . add ( readAnnotationItem ( dex , annotationSetIn . readInt () ) ) ; } return annotations ; }
public void timeReadNetworkStatsDetailNative ( int reps ) { for ( int i = NUMBER_CONSTANT ; i < reps ; i ++ ) { final android.net.NetworkStats stats = new android.net.NetworkStats ( android.os.SystemClock . elapsedRealtime () , NUMBER_CONSTANT ) ; com.android.internal.net.NetworkStatsFactory . nativeReadNetworkStatsDetail ( stats , mStats . getAbsolutePath () , NetworkStats.UID_ALL , new java.lang.String [ NUMBER_CONSTANT ] , NUMBER_CONSTANT , false ) ; } }
@ java.lang.Override public void afterHandshake ( long session , long ssl , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [] negotiated = org.conscrypt.NativeCrypto . SSL_get0_alpn_selected ( ssl ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , c , sock , fd , callback ) ; }
@ java.lang.Override public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ( ( mLocation ) != null ) && ( ! ( mIgnore ) ) ) { java.lang.String message = ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( com.android.tools.lint.checks.SecureRandomGeneratorDetector.BLOG_URL ) ) + STRING_CONSTANT ; context . report ( com.android.tools.lint.checks.SecureRandomGeneratorDetector.ISSUE , mLocation , message ) ; } }
public synchronized void close () { synchronized ( mLock ) { if ( isBasicChannel () ) { android.util.Log . i ( mTag , STRING_CONSTANT ) ; mTerminal . selectDefaultApplication () ; } mTerminal . closeChannel ( this ) ; mIsClosed = true ; if ( ( mBinder ) != null ) { mBinder . unlinkToDeath ( this , NUMBER_CONSTANT ) ; } if ( ( mSession ) != null ) { mSession . removeChannel ( this ) ; } } }
public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [] states ) { int clientState ; android.bluetooth.BluetoothDevice currentDevice ; synchronized ( mLock ) { clientState = getConnectionState () ; currentDevice = getDevice () ; } java.util.List < android.bluetooth.BluetoothDevice > deviceList = new java.util.ArrayList < android.bluetooth.BluetoothDevice > () ; for ( int state : states ) { if ( clientState == state ) { if ( currentDevice != null ) { deviceList . add ( currentDevice ) ; } } } return deviceList ; }
@ java.lang.Override public boolean isValid () { ensureConstraintsAtIndex ( NUMBER_CONSTANT ) ; return ( ( request . getInitialTags () . containsAll ( plan . get ( NUMBER_CONSTANT ) . getNeedToAdd () ) ) && ( request . getInitialTags () . containsNone ( plan . get ( NUMBER_CONSTANT ) . getNeedToRemove () ) ) ) && ( missingProductions . isEmpty () ) ; }
private com.android.jack.ir.JNodeInternalError translateException ( org.eclipse.jdt.internal.compiler.ast.ASTNode node , java.lang.Exception e ) { com.android.jack.ir.JNodeInternalError ice = translateException ( e ) ; if ( node != null ) { ice . addNode ( node . getClass () . getName () , node . toString () , makeSourceInfo ( node ) ) ; } return ice ; }
public void test_currencyFromLocale () { java.text.NumberFormat nf = java.text.NumberFormat . getCurrencyInstance ( java.util.Locale.FRANCE ) ; assertEquals ( STRING_CONSTANT , nf . format ( NUMBER_CONSTANT ) ) ; nf = java.text.NumberFormat . getCurrencyInstance ( java.util.Locale.UK ) ; assertEquals ( STRING_CONSTANT , nf . format ( NUMBER_CONSTANT ) ) ; }
private static void checkInputFile ( java.io.File file ) throws com.android.builder.packaging.PackagerException , java.io.FileNotFoundException { if ( file . isDirectory () ) { throw new com.android.builder.packaging.PackagerException ( STRING_CONSTANT , file ) ; } if ( file . exists () ) { if ( ! ( file . canRead () ) ) { throw new com.android.builder.packaging.PackagerException ( STRING_CONSTANT , file ) ; } } else { throw new java.io.FileNotFoundException ( java.lang.String . format ( STRING_CONSTANT , file ) ) ; } }
public static void main ( java.lang.String [] args ) { boolean success = false ; try { new com.android.commands.sm.Sm () . run ( args ) ; success = true ; } catch ( java.lang.Exception e ) { if ( e instanceof java.lang.IllegalArgumentException ) { com.android.commands.sm.Sm . showUsage () ; java.lang.System . exit ( NUMBER_CONSTANT ) ; } android.util.Log . e ( com.android.commands.sm.Sm.TAG , STRING_CONSTANT , e ) ; java.lang.System.err . println ( ( STRING_CONSTANT + e ) ) ; } java.lang.System . exit ( ( success ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ; }
static void initMd5Sum () { new android.os.AsyncTask < java.lang.Void , java.lang.Void , java.lang.Void > () { @ java.lang.Override public java.lang.Void doInBackground ( java.lang.Void . . . args ) { java.security.MessageDigest md ; try { md = java.security.MessageDigest . getInstance ( STRING_CONSTANT ) ; } catch ( java.security.NoSuchAlgorithmException e ) { md = null ; } android.telecom.Log.sMessageDigest = md ; return null ; } } . execute () ; }
public void testNewConstructors_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr1 = new java.security.SecureRandom () ; assertNotNull ( sr1 ) ; assertNotNull ( sr1 . getProvider () ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr1 . getProvider () . getClass () . getName () ) ; test_SecureRandom ( sr1 ) ; java.security.SecureRandom sr2 = new java.security.SecureRandom ( libcore.java.security.SecureRandomTest.STATIC_SEED_BYTES ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr2 . getProvider () . getClass () . getName () ) ; test_SecureRandom ( sr2 ) ; }
@ java.lang.Override public void nodeDeleted ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode parent , com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode child , int previousIndex ) { if ( parent == ( mTargetNode . getNode () ) ) { for ( int i = NUMBER_CONSTANT , n = indices . size () ; i < n ; i ++ ) { int idx = indices . get ( i ) ; if ( idx >= previousIndex ) { indices . set ( i , ( idx - NUMBER_CONSTANT ) ) ; } } } }
@ java.lang.Override public int getRemoteType ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return android.bluetooth.BluetoothDevice.DEVICE_TYPE_UNKNOWN ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return android.bluetooth.BluetoothDevice.DEVICE_TYPE_UNKNOWN ; } return service . getRemoteType ( device ) ; }
public static void setParent ( int id , int parent ) { if ( id == parent ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.LOG . error ( STRING_CONSTANT ) ; return; } com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . incModCount ( id ) ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . putRecordInt ( id , com.intellij.openapi.vfs.newvfs.persistent.FSRecords.PARENT_OFFSET , parent ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
@ java.lang.Override public void connect ( ) throws java.io.IOException { java.io.File f = new java.io.File ( filename ) ; if ( f . isDirectory () ) { isDir = true ; is = getDirectoryListing ( f ) ; } else { is = new java.io.BufferedInputStream ( new java.io.FileInputStream ( f ) ) ; length = f . length () ; } connected = true ; }
@ android.support.annotation.WorkerThread public static void markSingleNewVoicemailAsRead ( @ android.support.annotation.NonNull final android.content.Context context , final android.net.Uri voicemailUri ) { if ( voicemailUri == null ) { com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT ) ; return; } com.android.dialer.common.concurrent.ThreadUtil . postOnUiThread ( ( ) - > { new com.android.dialer.app.calllog.VoicemailQueryHandler ( context . getContentResolver () ) . markNewVoicemailsAsOld ( context , voicemailUri ) ; } ) ; }
private void createScript () { mRS = android.renderscript.RenderScript . create ( this ) ; mInAllocation = android.renderscript.Allocation . createFromBitmap ( mRS , mBitmapIn , Allocation.MipmapControl.MIPMAP_NONE , Allocation.USAGE_SCRIPT ) ; mOutAllocation = android.renderscript.Allocation . createFromBitmap ( mRS , mBitmapOut , Allocation.MipmapControl.MIPMAP_NONE , Allocation.USAGE_SCRIPT ) ; mScript = new com.example.android.rs.hellocompute.ScriptC_mono ( mRS ) ; mScript . forEach_root ( mInAllocation , mOutAllocation ) ; mOutAllocation . copyTo ( mBitmapOut ) ; }
double getScore ( android.icu.util.ULocale dMax , java.lang.String desiredRaw , java.lang.String desiredMax , android.icu.util.ULocale sMax , java.lang.String supportedRaw , java.lang.String supportedMax ) { double distance = NUMBER_CONSTANT ; if ( ! ( desiredMax . equals ( supportedMax ) ) ) { distance = getRawScore ( dMax , sMax ) ; } else if ( ! ( desiredRaw . equals ( supportedRaw ) ) ) { distance += NUMBER_CONSTANT ; } return distance ; }
private void updateProjectionMap ( android.database.sqlite.SQLiteDatabase db , java.lang.String tableName , java.util.Map < java.lang.String , java.lang.String > projectionMap ) { try ( android.database.Cursor cursor = db . rawQuery ( ( ( STRING_CONSTANT + tableName ) + STRING_CONSTANT ) , null ) ) { for ( java.lang.String columnName : cursor . getColumnNames () ) { if ( ! ( projectionMap . containsKey ( columnName ) ) ) { projectionMap . put ( columnName , ( ( tableName + CHAR_CONS ) + columnName ) ) ; } } } }
@ java.lang.Override public boolean isSupported ( java.time.temporal.TemporalField field ) { if ( ( ( ( field == ( java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH ) ) || ( field == ( java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR ) ) ) || ( field == ( java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH ) ) ) || ( field == ( java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR ) ) ) { return false ; } return super . isSupported ( field ) ; }
@ java.lang.Override public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader ) { if ( ! ( annotations . isEmpty () ) ) { com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession ( loader . getSession () , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation . exportAsJast ( exportSession ) ; loading . addAnnotation ( annotationLiteral ) ; annotationLiteral . updateParents ( loading ) ; } } }
@ java.lang.Override public void engineSetKeyEntry ( java.lang.String alias , java.security.Key key , char [] password , java.security.cert.Certificate [] chain ) throws java.security.KeyStoreException { if ( ( password != null ) && ( ( password.length ) > NUMBER_CONSTANT ) ) { throw new java.security.KeyStoreException ( STRING_CONSTANT ) ; } if ( key instanceof java.security.PrivateKey ) { setPrivateKeyEntry ( alias , ( ( java.security.PrivateKey ) ( key ) ) , chain , null ) ; } else { throw new java.security.KeyStoreException ( STRING_CONSTANT ) ; } }
private void updateCapabilities ( com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData ) { if ( targetData != null ) { com.android.ide.common.rendering.LayoutLibrary layoutLib = targetData . getLayoutLibrary () ; if ( ( ( mIncludedWithin ) != null ) && ( ! ( layoutLib . supports ( Capability.EMBEDDED_LAYOUT ) ) ) ) { showIn ( null ) ; } } }
@ com.android.annotations.Nullable @ java.lang.Override public java.lang.Package getPackage () { java.lang.Package pkg = super . getPackage () ; if ( pkg == null ) { try { pkg = com.android.sdklib.internal.repository.packages.DocPackage . create ( null , getSourceProperties () , NUMBER_CONSTANT , null , NUMBER_CONSTANT , null , null , null , getLocalDir () . getPath () ) ; setPackage ( pkg ) ; } catch ( java.lang.Exception e ) { appendLoadError ( STRING_CONSTANT , e . toString () ) ; } } return pkg ; }
@ java.lang.Override public void ensureAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter loaded ) { synchronized ( this ) { if ( isAnnotationsLoaded ) { return; } com.android.jack.jayce.ParameterNode node ; try { node = getNNode () ; node . loadAnnotations ( loaded , this ) ; } catch ( com.android.jack.LibraryException e ) { throw new com.android.jack.load.JackLoadingException ( getLocation ( loaded ) , e ) ; } isAnnotationsLoaded = true ; } loaded . removeLoader () ; }
public void testPass2 () { addTestMetric ( STRING_CONSTANT , STRING_CONSTANT ) ; if ( ( testOption ) != null ) { addTestMetric ( STRING_CONSTANT , testOption ) ; } if ( ! ( listOption . isEmpty () ) ) { addTestMetric ( STRING_CONSTANT , listOption . toString () ) ; } if ( ! ( mapOption . isEmpty () ) ) { addTestMetric ( STRING_CONSTANT , mapOption . toString () ) ; } }
private com.android.ddmlib.IDevice getDevice ( java.lang.String deviceName ) { com.android.ddmlib.IDevice [] devices = com.android.ddmlib.AndroidDebugBridge . getBridge () . getDevices () ; for ( com.android.ddmlib.IDevice device : devices ) { if ( device . getName () . equals ( deviceName ) ) { return device ; } } return null ; }
private void ensureTagsAtIndex ( @ javax.annotation.Nonnegative int atIdx ) { assert atIdx >= NUMBER_CONSTANT ; assert atIdx < ( plan . size () ) ; if ( atIdx > ( currentTagValidityIdx ) ) { for ( int idx = ( currentTagValidityIdx ) + NUMBER_CONSTANT ; idx <= atIdx ; idx ++ ) { ( ( com.android.sched.scheduler.PlanConstructor < > . DecoratedRunner ) ( plan . get ( idx ) ) ) . updateBeforeTags ( plan . get ( ( idx - NUMBER_CONSTANT ) ) . getAfterTags () ) ; } currentTagValidityIdx = atIdx ; } }
public static void main ( java.lang.String [] args ) { java.lang.System.out . println ( STRING_CONSTANT ) ; if ( Main . checkLivePhase () ) { java.lang.System.out . println ( STRING_CONSTANT ) ; } Main . set ( NUMBER_CONSTANT ) ; Main . set ( NUMBER_CONSTANT ) ; Main . set ( NUMBER_CONSTANT ) ; Main . set ( NUMBER_CONSTANT ) ; Main . set ( NUMBER_CONSTANT ) ; }
private void resetPlayback () { long timestamp ; long oldTimestamp ; timestamp = android.os.SystemClock . elapsedRealtime () ; stopPlayback ( false ) ; stopCaptionTrack () ; if ( com.android.tv.tuner.tvinput.TunerSessionWorker.ENABLE_PROFILER ) { oldTimestamp = timestamp ; timestamp = android.os.SystemClock . elapsedRealtime () ; android.util.Log . i ( com.android.tv.tuner.tvinput.TunerSessionWorker.TAG , ( ( STRING_CONSTANT + ( timestamp - oldTimestamp ) ) + STRING_CONSTANT ) ) ; } if ( ( mChannelBlocked ) || ( ( mSurface ) == null ) ) { return; } preparePlayback () ; }
public void testFloat16Add () { script . set_gInput ( mInput ) ; script . forEach_add ( mF16Matrix ) ; script . forEach_bitcast ( mF16Matrix , mU16Matrix ) ; mU16Matrix . copyTo ( output ) ; for ( int x = NUMBER_CONSTANT ; x < ( numInputs ) ; x ++ ) { for ( int y = NUMBER_CONSTANT ; y < ( numInputs ) ; y ++ ) { checkFloat16Add ( x , y ) ; } } }
@ java.lang.Override public java.util.Collection < com.android.build.gradle.internal.dsl.CoreProductFlavor > getProductFlavors () { return com.google.common.collect.ImmutableList . copyOf ( com.google.common.collect.Iterables . transform ( model . getProductFlavors () . values () , new com.google.common.base.Function < com.android.build.gradle.managed.ProductFlavor , com.android.build.gradle.internal.dsl.CoreProductFlavor > () { @ java.lang.Override public com.android.build.gradle.internal.dsl.CoreProductFlavor apply ( com.android.build.gradle.managed.ProductFlavor flavor ) { return new com.android.build.gradle.managed.adaptor.ProductFlavorAdaptor ( flavor ) ; } } ) ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object thatObject ) { if ( thatObject == ( this ) ) { return true ; } if ( ! ( thatObject instanceof com.android.server.wifi.hotspot2.anqp.eap.EAPMethod ) ) { return false ; } com.android.server.wifi.hotspot2.anqp.eap.EAPMethod that = ( ( com.android.server.wifi.hotspot2.anqp.eap.EAPMethod ) ( thatObject ) ) ; return ( ( mEAPMethodID ) == ( that.mEAPMethodID ) ) && ( mAuthParams . equals ( that.mAuthParams ) ) ; }
@ java.lang.Override public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( STRING_CONSTANT + device ) ) ; } com.android.bluetooth.hid.HidDevService service = getService () ; if ( service == null ) { return false ; } return service . disconnect ( device ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass () ) != ( o . getClass () ) ) ) return false ; com.android.builder.BuildConfig that = ( ( com.android.builder.BuildConfig ) ( o ) ) ; return mBuildConfigLines . equals ( that.mBuildConfigLines ) ; }
private org.jetbrains.jps.builders.java.dependencyView.TIntHashSet addAllSubclasses ( final int root , final org.jetbrains.jps.builders.java.dependencyView.TIntHashSet acc ) { if ( ! ( acc . add ( root ) ) ) { return acc ; } final org.jetbrains.jps.builders.java.dependencyView.TIntHashSet directSubclasses = myClassToSubclasses . get ( root ) ; if ( directSubclasses != null ) { directSubclasses . forEach ( new org.jetbrains.jps.builders.java.dependencyView.TIntProcedure () { @ java.lang.Override public boolean execute ( int s ) { addAllSubclasses ( s , acc ) ; return true ; } } ) ; } return acc ; }
@ java.lang.Override public void onVisibilityChanged ( final android.view.View changedView , final int visibility ) { if ( ( mAwContents ) == null ) return; if ( checkNeedsPost () ) { mRunQueue . addTask ( new java.lang.Runnable () { @ java.lang.Override public void run () { onVisibilityChanged ( changedView , visibility ) ; } } ) ; return; } mAwContents . onVisibilityChanged ( changedView , visibility ) ; }
private static java.lang.String getDigestAlgName ( org.bouncycastle.asn1.ASN1ObjectIdentifier digestAlgOID ) { java.lang.String name = org.bouncycastle.jcajce.util.MessageDigestUtils . getDigestName ( digestAlgOID ) ; int dIndex = name . indexOf ( CHAR_CONS ) ; if ( ( dIndex > NUMBER_CONSTANT ) && ( ! ( name . startsWith ( STRING_CONSTANT ) ) ) ) { return ( name . substring ( NUMBER_CONSTANT , dIndex ) ) + ( name . substring ( ( dIndex + NUMBER_CONSTANT ) ) ) ; } return org.bouncycastle.jcajce.util.MessageDigestUtils . getDigestName ( digestAlgOID ) ; }
@ org.junit.Test public void testNotifyPackageDataDestroyForeignUse () { java.util.List < java.lang.String > fooSecondaries = mFooUser0 . getSecondaryDexPaths () ; notifyDexLoad ( mFooUser0 , fooSecondaries , mUser0 ) ; notifyDexLoad ( mBarUser0 , mFooUser0 . getBaseAndSplitDexPaths () , mUser0 ) ; mDexManager . notifyPackageDataDestroyed ( mFooUser0 . getPackageName () , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mFooUser0 ) ; org.junit.Assert . assertTrue ( pui . isUsedByOtherApps () ) ; org.junit.Assert . assertTrue ( pui . getDexUseInfoMap () . isEmpty () ) ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testHeadsetHangupCallNull ( ) throws java.lang.Exception { org.mockito.Mockito . when ( mMockCallsManager . getForegroundCall () ) . thenReturn ( null ) ; boolean callHungup = mBluetoothPhoneService.mBinder . hangupCall () ; org.mockito.Mockito . verify ( mMockCallsManager , org.mockito.Mockito . never () ) . disconnectCall ( org.mockito.Matchers . any ( com.android.server.telecom.Call . class ) ) ; org.junit.Assert . assertEquals ( callHungup , false ) ; }
@ java.lang.Override public boolean requestDrawGL ( android.graphics.Canvas canvas , boolean waitForCompletion , android.view.View containerView ) { if ( ( mGLfunctor ) == null ) { mGLfunctor = new com.android.webview.chromium.DrawGLFunctor ( mAwContents . getAwDrawGLViewContext () ) ; } return mGLfunctor . requestDrawGL ( ( ( android.view.HardwareCanvas ) ( canvas ) ) , containerView . getViewRootImpl () , waitForCompletion ) ; }
private vogar.tasks.Task createCreateDexJarTask ( vogar.Classpath classpath , java.io.File classpathElement , java.lang.String name , vogar.Action action , java.io.File localDex , java.io.File localTempDir ) { return new vogar.android.DexTask ( run.toolchain . getDexer () , run.androidSdk , classpath , run.benchmark , name , classpathElement , action , localDex , localTempDir , run.multidex ) ; }
public void run () { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge . loadViewServerInfo ( device ) ; if ( viewServerInfo == null ) { return; } com.android.hierarchyviewerlib.device.Window [] windows = com.android.hierarchyviewerlib.device.DeviceBridge . loadWindows ( device ) ; com.android.hierarchyviewerlib.ComponentRegistry . getDeviceSelectionModel () . addDevice ( device , windows ) ; if ( ( viewServerInfo.protocolVersion ) >= NUMBER_CONSTANT ) { com.android.hierarchyviewerlib.device.WindowUpdater . startListenForWindowChanges ( this , device ) ; focusChanged ( device ) ; } }
java.lang.String getName ( com.ibm.icu.impl.NameType type ) { if ( ( _names ) == null ) { return null ; } java.lang.String name = null ; switch ( type ) { case SHORT_STANDARD : name = _names [ NUMBER_CONSTANT ] ; break; case SHORT_DAYLIGHT : name = _names [ NUMBER_CONSTANT ] ; break; default: break; } return name ; }
private com.android.bubble.Bubble startBubble () { if ( ! ( com.android.incallui.ReturnToCallController . canShowBubbles ( context ) ) ) { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , STRING_CONSTANT ) ; return null ; } com.android.bubble.Bubble returnToCallBubble = com.android.bubble.BubbleComponent . get ( context ) . getBubble () ; returnToCallBubble . setBubbleInfo ( generateBubbleInfo () ) ; returnToCallBubble . show () ; return returnToCallBubble ; }
@ java.lang.Override public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor . visitArrayInstance ( this ) ; if ( ( mType ) == ( Type.OBJECT ) ) { for ( java.lang.Object value : getValues () ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( null , this ) ; } visitor . visitLater ( this , ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; } }
@ java.lang.Override public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo > lookup ( @ android.support.annotation.NonNull com.android.dialer.DialerPhoneNumber number ) { if ( ! ( com.android.dialer.blocking.FilteredNumberCompat . useNewFiltering ( appContext ) ) ) { return com.google.common.util.concurrent.Futures . immediateFuture ( com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo . getDefaultInstance () ) ; } return executorService . submit ( ( ) - > queryNumbers ( com.google.common.collect.ImmutableSet . of ( number ) ) . get ( number ) ) ; }
public void setBit ( int i ) throws java.lang.RuntimeException { if ( ( i < NUMBER_CONSTANT ) || ( i > ( ( len ) - NUMBER_CONSTANT ) ) ) { throw new java.lang.RuntimeException () ; } value [ ( i > > > NUMBER_CONSTANT ) ] |= org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial.bitMask [ ( i & NUMBER_CONSTANT ) ] ; return; }
public boolean removeHeaderView ( android.view.View v ) { if ( ( mHeaderViewInfos . size () ) > NUMBER_CONSTANT ) { boolean result = false ; if ( ( ( mAdapter ) != null ) && ( ( ( android.widget.HeaderViewListAdapter ) ( mAdapter ) ) . removeHeader ( v ) ) ) { if ( ( mDataSetObserver ) != null ) { mDataSetObserver . onChanged () ; } result = true ; } removeFixedViewInfo ( v , mHeaderViewInfos ) ; return result ; } return false ; }
private static java.lang.String getName ( java.lang.String s ) { int i = com.ibm.icu.text.DateTimePatternGenerator . getCanonicalIndex ( s , true ) ; java.lang.String name = com.ibm.icu.text.DateTimePatternGenerator.FIELD_NAME [ com.ibm.icu.text.DateTimePatternGenerator.types [ i ] [ NUMBER_CONSTANT ] ] ; if ( ( com.ibm.icu.text.DateTimePatternGenerator.types [ i ] [ NUMBER_CONSTANT ] ) < NUMBER_CONSTANT ) { name += STRING_CONSTANT ; } else { name += STRING_CONSTANT ; } return name ; }
private void registerForNotifications () { mCM . registerForDisconnect ( this , com.android.phone.CallNotifier.PHONE_DISCONNECT , null ) ; mCM . registerForDisplayInfo ( this , com.android.phone.CallNotifier.PHONE_STATE_DISPLAYINFO , null ) ; mCM . registerForSignalInfo ( this , com.android.phone.CallNotifier.PHONE_STATE_SIGNALINFO , null ) ; mCM . registerForInCallVoicePrivacyOn ( this , com.android.phone.CallNotifier.PHONE_ENHANCED_VP_ON , null ) ; mCM . registerForInCallVoicePrivacyOff ( this , com.android.phone.CallNotifier.PHONE_ENHANCED_VP_OFF , null ) ; mCM . registerForSuppServiceFailed ( this , com.android.phone.CallNotifier.PHONE_SUPP_SERVICE_FAILED , null ) ; mCM . registerForTtyModeReceived ( this , com.android.phone.CallNotifier.PHONE_TTY_MODE_RECEIVED , null ) ; }
private void onAudioConfigChanged ( byte [] address , int sampleRate , int channelCount ) { com.android.bluetooth.a2dpsink.A2dpSinkStateMachine.StackEvent event = new com.android.bluetooth.a2dpsink.A2dpSinkStateMachine.StackEvent ( com.android.bluetooth.a2dpsink.A2dpSinkStateMachine.EVENT_TYPE_AUDIO_CONFIG_CHANGED ) ; event.device = getDevice ( address ) ; int channelConfig = ( channelCount == NUMBER_CONSTANT ) ? android.media.AudioFormat.CHANNEL_IN_MONO : android.media.AudioFormat.CHANNEL_IN_STEREO ; event.audioConfig = new android.bluetooth.BluetoothAudioConfig ( sampleRate , channelConfig , android.media.AudioFormat.ENCODING_PCM_16BIT ) ; sendMessage ( com.android.bluetooth.a2dpsink.A2dpSinkStateMachine.STACK_EVENT , event ) ; }
public boolean enterIfInterruptibly ( com.google.common.util.concurrent.Monitor.Guard guard ) throws java.lang.InterruptedException { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException () ; } final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock . lockInterruptibly () ; boolean satisfied = false ; try { return satisfied = guard . isSatisfied () ; } finally { if ( ! satisfied ) { lock . unlock () ; } } }
private void addStreamToTests ( com.android.cts.verifier.ArrayTestListAdapter streams , com.android.cts.verifier.streamquality.StreamingVideoActivity.Stream stream ) { android.content.Intent i = new android.content.Intent ( this , com.android.cts.verifier.streamquality.PlayVideoActivity . class ) ; i . putExtra ( PlayVideoActivity.EXTRA_STREAM , stream ) ; streams . add ( com.android.cts.verifier.TestListAdapter.TestListItem . newTest ( stream.name , com.android.cts.verifier.streamquality.PlayVideoActivity . getTestId ( stream.code ) , i , null ) ) ; }
protected static org.conscrypt.OpenSSLKey wrapPlatformKey ( java.security.interfaces.RSAPrivateKey rsaPrivateKey ) throws java.security.InvalidKeyException { org.conscrypt.OpenSSLKey wrapper = org.conscrypt.Platform . wrapRsaKey ( rsaPrivateKey ) ; if ( wrapper != null ) { return wrapper ; } return new org.conscrypt.OpenSSLKey ( org.conscrypt.NativeCrypto . getRSAPrivateKeyWrapper ( rsaPrivateKey , rsaPrivateKey . getModulus () . toByteArray () ) , true ) ; }
private void replaceInParent ( java.util.TreeMap.Node < K , V > node , java.util.TreeMap.Node < K , V > replacement ) { java.util.TreeMap.Node < K , V > parent = node.parent ; node.parent = null ; if ( replacement != null ) { replacement.parent = parent ; } if ( parent != null ) { if ( ( parent.left ) == node ) { parent.left = replacement ; } else { parent.right = replacement ; } } else { root = replacement ; } }
@ android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress ( android.net.MacAddress base , java.util.Random r ) { long addr = ( ( base.mAddr ) & ( android.net.MacAddress.OUI_MASK ) ) | ( ( android.net.MacAddress.NIC_MASK ) & ( r . nextLong () ) ) ; addr |= android.net.MacAddress.LOCALLY_ASSIGNED_MASK ; addr &= ~ ( android.net.MacAddress.MULTICAST_MASK ) ; return new android.net.MacAddress ( addr ) ; }
@ java.lang.Override protected void cleanup () { if ( mNativeAvailable ) { cleanupNative () ; mNativeAvailable = false ; } if ( ( mPanDevices ) != null ) { java.util.List < android.bluetooth.BluetoothDevice > devList = getConnectedDevices () ; for ( android.bluetooth.BluetoothDevice dev : devList ) { handlePanDeviceStateChange ( dev , mPanIfName , BluetoothProfile.STATE_DISCONNECTED , BluetoothPan.LOCAL_PANU_ROLE , BluetoothPan.REMOTE_NAP_ROLE ) ; } mPanDevices . clear () ; } }
public void test_shutdownNow ( ) throws java.lang.Exception { java.nio.channels.AsynchronousChannelGroup acg = java.nio.channels.AsynchronousChannelGroup . withCachedThreadPool ( java.util.concurrent.Executors . newFixedThreadPool ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; java.nio.channels.AsynchronousServerSocketChannel assc = java.nio.channels.AsynchronousServerSocketChannel . open ( acg ) ; acg . shutdownNow () ; assertTrue ( acg . isShutdown () ) ; assertFalse ( assc . isOpen () ) ; try { java.nio.channels.AsynchronousServerSocketChannel . open ( acg ) ; fail () ; } catch ( java.nio.channels.ShutdownChannelGroupException expected ) {} acg . shutdownNow () ; }
private com.android.builder.VariantConfiguration getVariantWithManifestPackage ( final java.lang.String packageName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getPackageFromManifest () { return packageName ; } @ java.lang.Override protected void validate () {} } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( STRING_CONSTANT ) ) ; return variant ; }
public java.lang.String makeKey ( vogar.Classpath classpath ) { java.lang.String key = keyPrefix ; for ( java.io.File element : classpath . getElements () ) { java.lang.String fileName = element . getName () ; if ( ! ( fileName . endsWith ( STRING_CONSTANT ) ) ) { return null ; } key += STRING_CONSTANT + ( vogar.Md5Cache . md5 ( element ) ) ; } return key ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { new com.android.jack.ir.ast.cfg.BasicBlockLiveProcessor ( cfg , false ) { @ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JSimpleBasicBlock block ) { if ( ( ( block . getElementCount () ) == NUMBER_CONSTANT ) && ( ( block . getLastElement () . getSourceInfo () ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) ) { block . delete () ; } return false ; } } . process () ; }
@ org.junit.Test public void getProperty_volatile ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock . createMock ( com.android.ddmlib.IDevice . class ) ; injectShellResponse ( mockDevice , STRING_CONSTANT ) ; injectShellResponse ( mockDevice , STRING_CONSTANT ) ; org.easymock.EasyMock . replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , fetcher . getProperty ( STRING_CONSTANT ) . get () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , fetcher . getProperty ( STRING_CONSTANT ) . get () ) ; }
public void test_SSL_check_private_key_no_key_no_cert ( ) throws java.lang.Exception { int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_new () ; int s = org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_new ( c ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_check_private_key ( s ) ; fail () ; } catch ( javax.net.ssl.SSLException expected ) {} org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_free ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . SSL_CTX_free ( c ) ; }
public void testSingleOutput () { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest . getUniversalOutput ( NUMBER_CONSTANT ) ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertEquals ( match , result ) ; }
public static void assertEqualCertificateChains ( long [] expected , long [] actual ) { org.junit.Assert . assertEquals ( expected.length , actual.length ) ; for ( int i = NUMBER_CONSTANT ; i < ( expected.length ) ; i ++ ) { org.conscrypt.NativeCrypto . X509_cmp ( expected [ i ] , actual [ i ] ) ; } }
private static void checkSame ( @ com.android.annotations.NonNull java.io.File source , @ com.android.annotations.NonNull java.io.File dest ) { if ( source . equals ( dest ) ) { java.util.logging.Logger . getAnonymousLogger () . info ( java.lang.String . format ( STRING_CONSTANT , source , source . length () , source . lastModified () ) ) ; } }
private void closeService () { if ( com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.pbap.BluetoothPbapUtils . savePbapParams ( this ) ; if ( ( mWakeLock ) != null ) { mWakeLock . release () ; mWakeLock = null ; } cleanUpServerSocket () ; if ( ( mSessionStatusHandler ) != null ) { mSessionStatusHandler . removeCallbacksAndMessages ( null ) ; } }
com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback getProjectCallback ( boolean reset , com.android.ide.common.rendering.LayoutLibrary layoutLibrary ) { if ( ( mProjectCallback ) == null ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager resManager = com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager . getInstance () ; org.eclipse.core.resources.IProject project = getProject () ; com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectRes = resManager . getProjectResources ( project ) ; mProjectCallback = new com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback ( layoutLibrary , projectRes , project , mCredential , this ) ; } else if ( reset ) { mProjectCallback . getMissingClasses () . clear () ; mProjectCallback . getUninstantiatableClasses () . clear () ; } return mProjectCallback ; }
@ java.lang.Override public void afterHandshake ( long session , long ssl , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [] negotiated = org.conscrypt.NativeCrypto . SSL_get0_alpn_selected ( ssl ) ; assertEquals ( STRING_CONSTANT , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , c , sock , fd , callback ) ; }
public void test_x_UTF_16LE_BOM ( ) throws java.lang.Exception { java.nio.charset.Charset cs = java.nio.charset.Charset . forName ( STRING_CONSTANT ) ; assertEncodes ( cs , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDecodes ( cs , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDecodes ( cs , STRING_CONSTANT , CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public com.android.layoutlib.api.LayoutScene render ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiDocumentNode model , int width , int height , java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > explodeNodes , boolean transparentBackground ) { if ( ! ( ensureFileValid () ) ) { return null ; } if ( ! ( ensureModelValid ( model ) ) ) { return null ; } com.android.ide.common.layoutlib.LayoutLibrary layoutLib = getReadyLayoutLib ( true ) ; org.eclipse.core.resources.IProject iProject = mEditedFile . getProject () ; return renderWithBridge ( iProject , model , layoutLib , width , height , explodeNodes , transparentBackground ) ; }
static void writeClassFile ( java.io.PrintStream stream , java.util.HashSet < com.google.doclava.ClassInfo > notStrippable , com.google.doclava.ClassInfo cl ) { com.google.doclava.PackageInfo pkg = cl . containingPackage () ; if ( pkg != null ) { stream . println ( ( ( STRING_CONSTANT + ( pkg . name () ) ) + STRING_CONSTANT ) ) ; } com.google.doclava.Stubs . writeClass ( stream , notStrippable , cl ) ; }
@ javax.annotation.Nonnull private com.android.jack.dx.dex.code.DalvCode createCode ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method , @ javax.annotation.Nonnull com.android.jack.dx.rop.code.RopMethod ropMethod ) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions ( apiLevel , forceJumbo ) ; int paramSize = getParameterWordCount ( method ) ; int positionListKind ; com.android.jack.dx.rop.code.LocalVariableInfo lvInfo ; if ( emitLocalDebugInfo ) { lvInfo = com.android.jack.dx.rop.code.LocalVariableExtractor . extract ( ropMethod ) ; } else { lvInfo = null ; } if ( emitLineNumberTable ) { positionListKind = com.android.jack.dx.dex.code.PositionList.LINES ; } else { positionListKind = com.android.jack.dx.dex.code.PositionList.NONE ; } return com.android.jack.dx.dex.code.RopTranslator . translate ( ropMethod , positionListKind , lvInfo , paramSize , options ) ; }
public static com.android.server.wifi.hotspot2.anqp.ANQPElement buildHS20Element ( com.android.server.wifi.hotspot2.anqp.Constants.ANQPElementType infoID , java.nio.ByteBuffer payload ) throws java.net.ProtocolException { switch ( infoID ) { case HSFriendlyName : return com.android.server.wifi.hotspot2.anqp.HSFriendlyNameElement . parse ( payload ) ; case HSWANMetrics : return com.android.server.wifi.hotspot2.anqp.HSWanMetricsElement . parse ( payload ) ; case HSConnCapability : return com.android.server.wifi.hotspot2.anqp.HSConnectionCapabilityElement . parse ( payload ) ; case HSOSUProviders : return com.android.server.wifi.hotspot2.anqp.RawByteElement . parse ( infoID , payload ) ; default: throw new java.net.ProtocolException ( ( STRING_CONSTANT + infoID ) ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer putLong ( int i , long x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putLong ( ix ( checkIndex ( i , SizeOf.LONG ) ) , x ) ; return this ; }
private static java.lang.String configToString ( android.net.wifi.WifiConfiguration config ) { if ( config == null ) { return null ; } java.lang.StringBuilder sb = new java.lang.StringBuilder () . append ( STRING_CONSTANT ) . append ( config.networkId ) . append ( STRING_CONSTANT ) . append ( config.SSID ) . append ( STRING_CONSTANT ) . append ( config.useExternalScores ) . append ( STRING_CONSTANT ) . append ( config.meteredHint ) ; return sb . toString () ; }
private void createCatchedVariables () { for ( org.objectweb.asm.tree.TryCatchBlockNode tryCatchNode : currentMethod.tryCatchBlocks ) { com.android.jill.frontend.java.Variable declaringCatchVariable = null ; org.objectweb.asm.Type catchedType ; if ( ( tryCatchNode.type ) == null ) { catchedType = org.objectweb.asm.Type . getType ( java.lang.Object . class ) ; } else { catchedType = org.objectweb.asm.Type . getType ( java.lang.Throwable . class ) ; } java.lang.String id = STRING_CONSTANT + ( ( unusedVarCount ) ++ ) ; declaringCatchVariable = new com.android.jill.frontend.java.Variable ( id , id , catchedType , null ) ; catchBlockToCatchedVariable . put ( tryCatchNode , declaringCatchVariable ) ; } }
public boolean hasSourceUrl ( com.android.sdklib.internal.repository.SdkSourceCategory category , com.android.sdklib.internal.repository.SdkSource source ) { synchronized ( mSources ) { java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list = mSources . get ( category ) ; if ( list != null ) { for ( com.android.sdklib.internal.repository.SdkSource s : list ) { if ( s . equals ( source ) ) { return true ; } } } return false ; } }
@ org.junit.Test public void testApplyWhenCommonFileChangesStrict ( ) throws java.lang.Exception { myPatchSpec . setStrict ( true ) ; com.intellij.updater.PatchFileCreator . create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; com.intellij.openapi.util.io.FileUtil . copy ( new java.io.File ( myOlderDir , STRING_CONSTANT ) , new java.io.File ( myOlderDir , STRING_CONSTANT ) ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator . prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; assertEquals ( NUMBER_CONSTANT , preparationResult.validationResults . size () ) ; assertEquals ( new com.intellij.updater.ValidationResult ( ValidationResult.Kind.ERROR , STRING_CONSTANT , ValidationResult.Action.VALIDATE , ValidationResult.MODIFIED_MESSAGE , ValidationResult.Option.NONE ) , preparationResult.validationResults . get ( NUMBER_CONSTANT ) ) ; }
@ android.test.suitebuilder.annotation.SmallTest public void testParcel () { android.telephony.CellIdentityGsm ci = new android.telephony.CellIdentityGsm ( com.android.internal.telephony.CellIdentityGsmTest.LAC , com.android.internal.telephony.CellIdentityGsmTest.CID , com.android.internal.telephony.CellIdentityGsmTest.ARFCN , com.android.internal.telephony.CellIdentityGsmTest.BSIC , com.android.internal.telephony.CellIdentityGsmTest.MCC_STR , com.android.internal.telephony.CellIdentityGsmTest.MNC_STR , com.android.internal.telephony.CellIdentityGsmTest.ALPHA_LONG , com.android.internal.telephony.CellIdentityGsmTest.ALPHA_SHORT ) ; android.os.Parcel p = android.os.Parcel . obtain () ; ci . writeToParcel ( p , NUMBER_CONSTANT ) ; p . setDataPosition ( NUMBER_CONSTANT ) ; android.telephony.CellIdentityGsm newCi = CellIdentityGsm.CREATOR . createFromParcel ( p ) ; assertEquals ( ci , newCi ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.w3c.dom.Node scope , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( ( scope != null ) && ( mDriver . isSuppressed ( this , issue , scope ) ) ) { return; } super . report ( issue , location , message ) ; }
public void testAvailableSkip ( ) throws java.lang.Exception { byte [] deflated = new byte [] { NUMBER_CONSTANT , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; try ( java.io.InputStream in = new java.util.zip.InflaterInputStream ( new java.io.ByteArrayInputStream ( deflated ) ) ) { assertEquals ( NUMBER_CONSTANT , in . available () ) ; assertEquals ( NUMBER_CONSTANT , in . skip ( NUMBER_CONSTANT ) ) ; assertEquals ( NUMBER_CONSTANT , in . available () ) ; } }
public android.bluetooth.BluetoothCodecStatus getCodecStatus ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.a2dp.BLUETOOTH_PERM , STRING_CONSTANT ) ; if ( com.android.bluetooth.a2dp.A2dpService.DBG ) { android.util.Log . d ( com.android.bluetooth.a2dp.A2dpService.TAG , ( ( STRING_CONSTANT + device ) + STRING_CONSTANT ) ) ; } synchronized ( mStateMachines ) { if ( device == null ) { device = mActiveDevice ; } if ( device == null ) { return null ; } com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines . get ( device ) ; if ( sm != null ) { return sm . getCodecStatus () ; } return null ; } }
public void initialize ( int gsmSignalStrength , int gsmBitErrorRate , int cdmaDbm , int cdmaEcio , int evdoDbm , int evdoEcio , int evdoSnr , boolean gsm ) { initialize ( gsmSignalStrength , gsmBitErrorRate , cdmaDbm , cdmaEcio , evdoDbm , evdoEcio , evdoSnr , NUMBER_CONSTANT , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , NUMBER_CONSTANT , gsm ) ; }
@ android.annotation.SystemApi public int setAllowedCarriers ( int slotId , java.util.List < android.service.carrier.CarrierIdentifier > carriers ) { try { com.android.internal.telephony.ITelephony service = getITelephony () ; if ( service != null ) { return service . setAllowedCarriers ( slotId , carriers ) ; } } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.telephony.TelephonyManager.TAG , STRING_CONSTANT , e ) ; } catch ( java.lang.NullPointerException e ) { android.util.Log . e ( android.telephony.TelephonyManager.TAG , STRING_CONSTANT , e ) ; } return - NUMBER_CONSTANT ; }
public void test_reverseOrder () { java.util.Comparator comp = java.util.Collections . reverseOrder () ; java.util.LinkedList list2 = new java.util.LinkedList ( ll ) ; java.util.Collections . sort ( list2 , comp ) ; final int llSize = ll . size () ; for ( int counter = NUMBER_CONSTANT ; counter < llSize ; counter ++ ) assertEquals ( STRING_CONSTANT , list2 . get ( ( ( llSize - counter ) - NUMBER_CONSTANT ) ) , ll . get ( counter ) ) ; }
@ java.lang.Override public java.nio.CharBuffer asCharBuffer () { int size = ( this . remaining () ) > > NUMBER_CONSTANT ; int off = position () ; return new java.nio.ByteBufferAsCharBuffer ( this , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT , size , size , off , order () ) ; }
public void openServer ( java.lang.String server , int port ) throws java.io.IOException , java.net.UnknownHostException { if ( ( serverSocket ) != null ) closeServer () ; serverSocket = doConnect ( server , port ) ; try { serverOutput = new java.io.PrintStream ( new java.io.BufferedOutputStream ( serverSocket . getOutputStream () ) , true , sun.net.NetworkClient.encoding ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.InternalError ( ( ( sun.net.NetworkClient.encoding ) + STRING_CONSTANT ) , e ) ; } serverInput = new java.io.BufferedInputStream ( serverSocket . getInputStream () ) ; }
public void run () { android.renderscript.RenderScript pRS = android.renderscript.RenderScript . create ( mCtx ) ; com.android.rs.test.ScriptC_array_init s = new com.android.rs.test.ScriptC_array_init ( pRS ) ; pRS . setMessageHandler ( mRsMessage ) ; checkInit ( s ) ; s . invoke_array_init_test () ; pRS . finish () ; waitForMessage () ; s . destroy () ; pRS . destroy () ; passTest () ; }
private static void reportMismatch ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Attr idNode , org.w3c.dom.Node inputTypeNode , java.lang.String message ) { com.android.tools.lint.detector.api.Location location ; if ( inputTypeNode != null ) { location = context . getLocation ( inputTypeNode ) ; com.android.tools.lint.detector.api.Location secondary = context . getLocation ( idNode ) ; secondary . setMessage ( STRING_CONSTANT ) ; location . setSecondary ( secondary ) ; } else { location = context . getLocation ( idNode ) ; } context . report ( com.android.tools.lint.checks.TextFieldDetector.ISSUE , idNode . getOwnerElement () , location , message ) ; }
private boolean sendDeviceListMonitoringRequest ( ) throws com.android.ddmlib.TimeoutException , java.io.IOException { byte [] request = com.android.ddmlib.AdbHelper . formAdbRequest ( STRING_CONSTANT ) ; try { com.android.ddmlib.AdbHelper . write ( mMainAdbConnection , request ) ; com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper . readAdbResponse ( mMainAdbConnection , false ) ; if ( ! ( resp.okay ) ) { com.android.ddmlib.Log . e ( STRING_CONSTANT , ( STRING_CONSTANT + ( resp.message ) ) ) ; } return resp.okay ; } catch ( java.io.IOException e ) { com.android.ddmlib.Log . e ( STRING_CONSTANT , STRING_CONSTANT ) ; mMainAdbConnection . close () ; throw e ; } }
@ java.lang.Override public void onDisconnect ( final javax.obex.HeaderSet req , final javax.obex.HeaderSet resp ) { if ( com.android.bluetooth.pbap.BluetoothPbapObexServer.D ) { android.util.Log . d ( com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG , STRING_CONSTANT ) ; } if ( com.android.bluetooth.pbap.BluetoothPbapObexServer.V ) { com.android.bluetooth.pbap.BluetoothPbapObexServer . logHeader ( req ) ; } notifyUpdateWakeLock () ; resp.responseCode = javax.obex.ResponseCodes.OBEX_HTTP_OK ; }
private android.bluetooth.BluetoothGattDescriptor getDescriptor () { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) ; if ( characteristic == null ) return null ; android.bluetooth.BluetoothGattDescriptor descriptor = characteristic . getDescriptor ( com.android.cts.verifier.bluetooth.BleServerService.DESCRIPTOR_UUID ) ; if ( descriptor == null ) { showMessage ( STRING_CONSTANT ) ; return null ; } return descriptor ; }
public java.lang.String getStringAttr ( java.lang.String uri , java.lang.String attrName ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNode = mNode ; if ( ( uiNode . getXmlNode () ) != null ) { org.w3c.dom.Node xmlNode = uiNode . getXmlNode () ; if ( xmlNode != null ) { org.w3c.dom.NamedNodeMap nodeAttributes = xmlNode . getAttributes () ; if ( nodeAttributes != null ) { org.w3c.dom.Node attr = nodeAttributes . getNamedItemNS ( uri , attrName ) ; if ( attr != null ) { return attr . getNodeValue () ; } } } } return null ; }
public void testVrHighPerformanceHEVC ( ) throws java.lang.Exception { if ( ! ( supportsVrHighPerformance () ) ) { android.cts.util.MediaUtils . skipTest ( android.media.cts.DecoderTest.TAG , STRING_CONSTANT ) ; return; } assertTrue ( android.media.cts.DecoderTest . doesMimeTypeHaveMinimumSpecVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_HEVC ) ) ; boolean hevcIsReady = android.media.cts.DecoderTest . doesMimeTypeHaveVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_HEVC ) ; if ( ! hevcIsReady ) { android.util.Log . d ( android.media.cts.DecoderTest.TAG , STRING_CONSTANT ) ; return; } }
private static void splitAndAdd ( java.lang.String searchPath , boolean directoriesOnly , java.util.List < java.io.File > resultList ) { if ( searchPath == null ) { return; } for ( java.lang.String path : searchPath . split ( STRING_CONSTANT ) ) { try { android.system.StructStat sb = Libcore.os . stat ( path ) ; if ( ( ! directoriesOnly ) || ( S_ISDIR ( sb.st_mode ) ) ) { resultList . add ( new java.io.File ( path ) ) ; } } catch ( android.system.ErrnoException ignored ) {} } }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , NUMBER_CONSTANT , NUMBER_CONSTANT , callback , new android.os.Handler ( android.os.Looper . getMainLooper () ) ) ; }
public void test_useLocale_LLocale () { s = new java.util.Scanner ( STRING_CONSTANT ) ; try { s . useLocale ( null ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} s . useLocale ( new java.util.Locale ( STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals ( new java.util.Locale ( STRING_CONSTANT , STRING_CONSTANT ) , s . locale () ) ; }
@ java.lang.Override @ com.android.annotations.NonNull public com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( getPosition ( node ) ) ) ; if ( pos != null ) { return com.android.tools.lint.detector.api.Location . create ( context.file , pos , ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( pos . getEnd () ) ) ) ; } return com.android.tools.lint.detector.api.Location . create ( context.file ) ; }
@ java.lang.Override public boolean onUpdateSource ( com.android.sdklib.internal.repository.sources.SdkSource source , java.lang.Package [] newPackages ) { final boolean changed = mDiffLogic . updateSourcePackages ( source , newPackages ) ; syncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { if ( changed || ( ( mITreeViewer . getInput () ) != ( mDiffLogic . getCategories () ) ) ) { refreshViewerInput () ; } } } ) ; return ! ( isUiDisposed () ) ; }
public static org.bouncycastle.crypto.Digest clonePRFHash ( int prfAlgorithm , org.bouncycastle.crypto.Digest hash ) { switch ( prfAlgorithm ) { case PRFAlgorithm.tls_prf_legacy : return new org.bouncycastle.crypto.tls.CombinedHash ( ( ( org.bouncycastle.crypto.tls.CombinedHash ) ( hash ) ) ) ; default: return org.bouncycastle.crypto.tls.TlsUtils . cloneHash ( org.bouncycastle.crypto.tls.TlsUtils . getHashAlgorithmForPRFAlgorithm ( prfAlgorithm ) , hash ) ; } }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public void bleSetScanFilterServiceData ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.String serviceUuid , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) byte [] serviceData , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) @ com.googlecode.android_scripting.rpc.RpcOptional byte [] serviceDataMask ) { if ( serviceDataMask != null ) { mScanFilterBuilder . setServiceData ( android.os.ParcelUuid . fromString ( serviceUuid ) , serviceData , serviceDataMask ) ; } else { mScanFilterBuilder . setServiceData ( android.os.ParcelUuid . fromString ( serviceUuid ) , serviceData ) ; } }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == NUMBER_CONSTANT ) ) { return - NUMBER_CONSTANT ; } if ( packet != null ) { packet . setReceivedLength ( byteCount ) ; packet . setPort ( srcAddress . getPort () ) ; if ( ! ( srcAddress . getAddress () . equals ( packet . getAddress () ) ) ) { packet . setAddress ( srcAddress . getAddress () ) ; } } return byteCount ; }
@ java.lang.Override protected void checkInvokeReply ( org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply ) { org.apache.harmony.jpda.tests.framework.jdwp.TaggedObject invokeNewObject = reply . getNextValueAsTaggedObject () ; assertEquals ( JDWPConstants.Tag.OBJECT_TAG , invokeNewObject.tag ) ; assertTrue ( STRING_CONSTANT , ( ( invokeNewObject.objectID ) != NUMBER_CONSTANT ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.TaggedObject invokeException = reply . getNextValueAsTaggedObject () ; assertEquals ( JDWPConstants.Tag.OBJECT_TAG , invokeException.tag ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , invokeException.objectID ) ; assertAllDataRead ( reply ) ; }
public void sdpSearch ( android.bluetooth.BluetoothDevice device , android.os.ParcelUuid uuid ) { if ( ! ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) ) { android.util.Log . e ( com.android.bluetooth.sdp.SdpManager.TAG , STRING_CONSTANT ) ; return; } synchronized ( com.android.bluetooth.sdp.SdpManager.mTrackerLock ) { if ( com.android.bluetooth.sdp.SdpManager.sSdpSearchTracker . isSearching ( device , uuid ) ) { return; } com.android.bluetooth.sdp.SdpManager.SdpSearchInstance inst = new com.android.bluetooth.sdp.SdpManager.SdpSearchInstance ( NUMBER_CONSTANT , device , uuid ) ; com.android.bluetooth.sdp.SdpManager.sSdpSearchTracker . add ( inst ) ; startSearch () ; } }
private void verifyGsmInfo ( android.telephony.CellInfoGsm gsm ) { verifyRssiDbm ( gsm . getCellSignalStrength () . getDbm () ) ; int lac = gsm . getCellIdentity () . getLac () ; assertTrue ( STRING_CONSTANT , ( ( lac >= NUMBER_CONSTANT ) && ( lac <= NUMBER_CONSTANT ) ) ) ; int cid = gsm . getCellIdentity () . getCid () ; assertTrue ( STRING_CONSTANT , ( ( cid >= NUMBER_CONSTANT ) && ( cid <= NUMBER_CONSTANT ) ) ) ; }
void replySucceeded ( android.os.Message msg ) { if ( ( msg.replyTo ) != null ) { android.os.Message reply = android.os.Message . obtain () ; reply.what = android.net.wifi.WifiScanner.CMD_OP_SUCCEEDED ; reply.arg2 = msg.arg2 ; if ( ( msg.obj ) != null ) { reply.obj = msg.obj ; } try { msg.replyTo . send ( reply ) ; } catch ( android.os.RemoteException e ) {} } else {} }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.vfs.BaseVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException , com.android.sched.util.file.NotFileException { com.android.sched.vfs.BaseVDir dir = this ; java.util.Iterator < java.lang.String > iter = path . split () . iterator () ; java.lang.String name ; while ( iter . hasNext () ) { name = iter . next () ; if ( iter . hasNext () ) { dir = dir . getVDir ( name ) ; } else { return dir . getVFile ( name ) ; } } throw new java.lang.AssertionError () ; }
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { debugLog ( ( STRING_CONSTANT + ( msg.what ) ) ) ; switch ( msg.what ) { case com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED : { debugLog ( STRING_CONSTANT ) ; processProfileServiceStateChanged ( ( ( java.lang.String ) ( msg.obj ) ) , msg.arg1 ) ; } break; } }
public void testToXml5 ( ) throws java.lang.Exception { java.lang.String xml = STRING_CONSTANT + ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; org.w3c.dom.Document doc = com.android.utils.XmlUtilsTest . parse ( xml ) ; java.lang.String formatted = com.android.utils.XmlUtils . toXml ( doc ) ; assertEquals ( xml , formatted ) ; }
private void checkReturnType ( com.android.dx.rop.type.Type encountered ) { com.android.dx.rop.type.Type returnType = machine . getPrototype () . getReturnType () ; if ( ! ( com.android.dx.cf.code.Merger . isPossiblyAssignableFrom ( returnType , encountered ) ) ) { fail ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( returnType . toHuman () ) ) + STRING_CONSTANT ) + ( encountered . toHuman () ) ) ) ; } }
private java.lang.String formatPhoneNumber ( java.lang.String number , java.lang.String normalizedNumber , java.lang.String countryIso ) { if ( android.text.TextUtils . isEmpty ( number ) ) { return STRING_CONSTANT ; } if ( com.android.dialer.phonenumberutil.PhoneNumberHelper . isUriNumber ( number ) ) { return number ; } if ( android.text.TextUtils . isEmpty ( countryIso ) ) { countryIso = currentCountryIso ; } return com.android.dialer.phonenumberutil.PhoneNumberHelper . formatNumber ( context , number , normalizedNumber , countryIso ) ; }
private void handleAutoTimeZoneEnabled () { java.lang.String tmpLog = ( STRING_CONSTANT + STRING_CONSTANT ) + ( mSavedTimeZoneId ) ; if ( com.android.internal.telephony.NitzStateMachine.DBG ) { android.telephony.Rlog . d ( com.android.internal.telephony.NitzStateMachine.LOG_TAG , tmpLog ) ; } mTimeZoneLog . log ( tmpLog ) ; if ( ( mSavedTimeZoneId ) != null ) { setAndBroadcastNetworkSetTimeZone ( mSavedTimeZoneId ) ; } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testCallMethodWithNoCreatedFeature ( ) throws android.os.RemoteException { mTestImsServiceBinder . createImsFeature ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , ImsFeature.MMTEL , mTestCallback ) ; mTestImsServiceBinder . isConnected ( android.telephony.ims.ImsServiceTest.TEST_SLOT_1 , ImsFeature.MMTEL , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.mockito.Mockito . verify ( mTestImsService.mMockMMTelFeature , org.mockito.Mockito . never () ) . isConnected ( org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyInt () ) ; }
public android.security.KeyPairGeneratorSpec.Builder setKeyType ( java.lang.String keyType ) throws java.security.NoSuchAlgorithmException { if ( keyType == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } else { if ( ( android.security.KeyStore . getKeyTypeForAlgorithm ( keyType ) ) == ( - NUMBER_CONSTANT ) ) { throw new java.security.NoSuchAlgorithmException ( ( STRING_CONSTANT + keyType ) ) ; } } mKeyType = keyType ; return this ; }
private android.telecom.Connection findConnectionForAction ( java.lang.String callId , java.lang.String action ) { if ( ( callId != null ) && ( mConnectionById . containsKey ( callId ) ) ) { return mConnectionById . get ( callId ) ; } android.telecom.Log . w ( this , STRING_CONSTANT , action , callId ) ; return android.telecom.ConnectionService . getNullConnection () ; }
@ java.lang.Override public int [] blend ( int [] src , int [] dst , int [] result ) { return new int [] { dst [ NUMBER_CONSTANT ] , dst [ NUMBER_CONSTANT ] , src [ NUMBER_CONSTANT ] , java.lang.Math . min ( NUMBER_CONSTANT , ( ( src [ NUMBER_CONSTANT ] ) + ( dst [ NUMBER_CONSTANT ] ) ) ) } ; }
@ org.junit.Test public void testNetworkEventSerialization () { android.net.ConnectivityMetricsEvent ev = com.android.server.connectivity.MetricsTestUtil . describeIpEvent ( com.android.server.connectivity.MetricsTestUtil . aType ( android.net.metrics.NetworkEvent . class ) , com.android.server.connectivity.MetricsTestUtil . anInt ( NUMBER_CONSTANT ) , com.android.server.connectivity.MetricsTestUtil . aLong ( NUMBER_CONSTANT ) ) ; java.lang.String want = java.lang.String . join ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; com.android.server.connectivity.IpConnectivityEventBuilderTest . verifySerialization ( want , ev ) ; }
@ java.lang.Override public android.os.ParcelUuid [] getRemoteUuids ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils . checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log . w ( com.android.bluetooth.btservice.AdapterService.TAG , STRING_CONSTANT ) ; return new android.os.ParcelUuid [ NUMBER_CONSTANT ] ; } com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) { return new android.os.ParcelUuid [ NUMBER_CONSTANT ] ; } return service . getRemoteUuids ( device ) ; }
@ java.lang.Override public void onCallerInfoQueryComplete ( android.net.Uri queryHandle , com.android.internal.telephony.CallerInfo info ) { if ( ! ( java.util.Objects . equals ( queryHandle , handle ) ) ) { android.telecom.Log . w ( this , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; return; } if ( ( info == null ) || ( ( info.contactDisplayPhotoUri ) == null ) ) { com.android.server.telecom.ui.CallInfo callInfo = callInfoFactory . makeCallInfo ( info , null , handle , date ) ; showMissedCallNotification ( callInfo , userHandle ) ; } }
public void test_verifySignedCertificateTimestamps_withInvalidOCSPResponse ( ) throws java.lang.Exception { org.conscrypt.OpenSSLX509Certificate [] chain = new org.conscrypt.OpenSSLX509Certificate [] { cert , ca } ; byte [] ocspResponse = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; org.conscrypt.ct.CTVerificationResult result = ctVerifier . verifySignedCertificateTimestamps ( chain , null , ocspResponse ) ; assertEquals ( NUMBER_CONSTANT , result . getValidSCTs () . size () ) ; assertEquals ( NUMBER_CONSTANT , result . getInvalidSCTs () . size () ) ; }
@ com.android.annotations.NonNull public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( boolean emulateStudio_1_0 , java.lang.String . . . tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection () ; try { executeBuild ( java.util.Collections . < java.lang.String > emptyList () , connection , tasks ) ; return buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction () , emulateStudio_1_0 ) ; } finally { connection . close () ; } }
@ java.lang.Override public org.objectweb.asm.MethodVisitor visitMethod ( int access , java.lang.String name , java.lang.String desc , java.lang.String signature , java.lang.String [] exceptions ) { if ( ! ( isInterface ) ) { recordIfInstanceMethod ( access , name , desc ) ; } return super . visitMethod ( access , name , desc , signature , exceptions ) ; }
public static android.renderscript.Sampler CLAMP_LINEAR ( android.renderscript.RenderScript rs ) { if ( ( rs.mSampler_CLAMP_LINEAR ) == null ) { synchronized ( rs ) { if ( ( rs.mSampler_CLAMP_LINEAR ) == null ) { android.renderscript.Sampler.Builder b = new android.renderscript.Sampler.Builder ( rs ) ; b . setMinification ( android.renderscript.Sampler.Value.LINEAR ) ; b . setMagnification ( android.renderscript.Sampler.Value.LINEAR ) ; b . setWrapS ( android.renderscript.Sampler.Value.CLAMP ) ; b . setWrapT ( android.renderscript.Sampler.Value.CLAMP ) ; rs.mSampler_CLAMP_LINEAR = b . create () ; } } } return rs.mSampler_CLAMP_LINEAR ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( retentionPolicy ) != null ; assert ( sourceInfo ) != null ; assert ( annotationType ) != null ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo . exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JAnnotationType type = exportSession . getLookup () . getAnnotationType ( annotationType ) ; com.android.jack.ir.ast.JAnnotation jAnnotation = new com.android.jack.ir.ast.JAnnotation ( jSourceInfo , retentionPolicy , type ) ; for ( com.android.jack.jayce.v0002.nodes.NNameValuePair valuePair : elements ) { jAnnotation . put ( valuePair . exportAsJast ( exportSession , type ) ) ; } return jAnnotation ; }
public static org.bouncycastle.asn1.x9.X9ECParameters getNamedCurveByOid ( org.bouncycastle.asn1.ASN1ObjectIdentifier oid ) { org.bouncycastle.asn1.x9.X9ECParameters params = org.bouncycastle.crypto.ec.CustomNamedCurves . getByOID ( oid ) ; if ( params == null ) { params = org.bouncycastle.asn1.x9.X962NamedCurves . getByOID ( oid ) ; if ( params == null ) { params = org.bouncycastle.asn1.sec.SECNamedCurves . getByOID ( oid ) ; } if ( params == null ) { params = org.bouncycastle.asn1.nist.NISTNamedCurves . getByOID ( oid ) ; } } return params ; }
private void acceptUpgradeRequest ( android.content.Context context ) { com.android.incallui.call.CallList callList = com.android.incallui.InCallPresenter . getInstance () . getCallList () ; if ( callList == null ) { com.android.incallui.StatusBarNotifier . clearAllCallNotifications () ; com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT ) ; } else { com.android.incallui.call.DialerCall call = callList . getVideoUpgradeRequestCall () ; if ( call != null ) { call . getVideoTech () . acceptVideoRequest ( context ) ; } } }
@ java.lang.Override public java.lang.String insnArgString ( com.android.dx.dex.code.DalvInsn insn ) { com.android.dx.rop.code.RegisterSpecList regs = insn . getRegisters () ; return ( ( ( ( regs . get ( NUMBER_CONSTANT ) . regString () ) + STRING_CONSTANT ) + ( regs . get ( NUMBER_CONSTANT ) . regString () ) ) + STRING_CONSTANT ) + ( insn . cstString () ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.vfs.InputOutputVFile getFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException { try { return getSectionVFS ( fileType ) . getRootInputOutputVDir () . getInputVFile ( buildFileVPath ( fileType , typePath ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation () , typePath , fileType ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer putShort ( short x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putShort ( ix ( nextPutIndex ( SizeOf.SHORT ) ) , x ) ; return this ; }
public java.lang.String getISO3Country () { java.lang.String code = libcore.icu.ICU . getISO3Country ( this ) ; if ( ( ! ( countryCode . isEmpty () ) ) && ( code . isEmpty () ) ) { throw new java.util.MissingResourceException ( ( STRING_CONSTANT + ( this ) ) , ( STRING_CONSTANT + ( this ) ) , STRING_CONSTANT ) ; } return code ; }
public static void skipTest ( java.lang.String tag , java.lang.String reason ) { android.util.Log . i ( tag , ( ( ( STRING_CONSTANT + ( android.cts.util.MediaUtils . getTestName () ) ) + STRING_CONSTANT ) + reason ) ) ; com.android.compatibility.common.util.DeviceReportLog log = new com.android.compatibility.common.util.DeviceReportLog ( STRING_CONSTANT , STRING_CONSTANT ) ; try { log . addValue ( STRING_CONSTANT , reason , ResultType.NEUTRAL , ResultUnit.NONE ) ; log . addValue ( STRING_CONSTANT , android.cts.util.MediaUtils . getTestNameWithClass () , ResultType.NEUTRAL , ResultUnit.NONE ) ; log . submit () ; } catch ( java.lang.NullPointerException e ) {} }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JIfStatement ifStmt ) { com.android.jack.ir.ast.JStatement thenStmt = ifStmt . getThenStmt () ; com.android.jack.ir.ast.JStatement elseStmt = ifStmt . getElseStmt () ; if ( ( ! ( thenStmt instanceof com.android.jack.ir.ast.JBlock ) ) || ( ( elseStmt != null ) && ( ! ( elseStmt instanceof com.android.jack.ir.ast.JBlock ) ) ) ) { throw new java.lang.AssertionError ( STRING_CONSTANT ) ; } return super . visit ( ifStmt ) ; }
public static final com.ibm.icu.util.LocaleData.MeasurementSystem getMeasurementSystem ( com.ibm.icu.util.ULocale locale ) { com.ibm.icu.util.UResourceBundle sysBundle = com.ibm.icu.util.LocaleData . measurementTypeBundleForLocale ( locale , com.ibm.icu.util.LocaleData.MEASUREMENT_SYSTEM ) ; switch ( sysBundle . getInt () ) { case NUMBER_CONSTANT : return com.ibm.icu.util.LocaleData.MeasurementSystem.SI ; case NUMBER_CONSTANT : return com.ibm.icu.util.LocaleData.MeasurementSystem.US ; case NUMBER_CONSTANT : return com.ibm.icu.util.LocaleData.MeasurementSystem.UK ; default: return null ; } }
protected proguard.optimize.evaluation.Value getFieldValue ( proguard.optimize.evaluation.Clazz clazz , proguard.classfile.constant.RefConstant refConstant , java.lang.String type ) { if ( loadFieldValues ) { proguard.optimize.evaluation.Member referencedMember = refConstant.referencedMember ; if ( referencedMember != null ) { proguard.optimize.evaluation.Value value = proguard.optimize.evaluation.StoringInvocationUnit . getFieldValue ( ( ( proguard.optimize.evaluation.Field ) ( referencedMember ) ) ) ; if ( value != null ) { return value ; } } } return super . getFieldValue ( clazz , refConstant , type ) ; }
public static int IntAddition2 () { int a ; int b ; int c ; a = NUMBER_CONSTANT ; b = NUMBER_CONSTANT ; a += b ; b = NUMBER_CONSTANT ; c = NUMBER_CONSTANT ; b += c ; c = a + b ; return c ; }
@ org.junit.Test public void testParseICMPv6NA () { final java.lang.String packet = STRING_CONSTANT + ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; final java.lang.String expected = STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( expected , getSummary ( packet ) ) ; }
@ java.lang.Override public void onImageLoadComplete ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry ) { com.android.incallui.NewReturnToCallController newReturnToCallController = newReturnToCallControllerWeakReference . get () ; if ( newReturnToCallController == null ) { return; } if ( ( entry.photo ) != null ) { newReturnToCallController . onPhotoAvatarReceived ( entry.photo ) ; } else { com.android.incallui.call.DialerCall dialerCall = com.android.incallui.call.CallList . getInstance () . getCallById ( callId ) ; if ( dialerCall != null ) { newReturnToCallController . onLetterTileAvatarReceived ( newReturnToCallController . createLettleTileDrawable ( dialerCall , entry ) ) ; } } }
@ com.android.internal.annotations.VisibleForTesting public void mute ( boolean shouldMute ) { android.telecom.Log . v ( this , STRING_CONSTANT , shouldMute ) ; if ( mCallsManager . hasEmergencyCall () ) { shouldMute = false ; android.telecom.Log . v ( this , STRING_CONSTANT ) ; } mCallAudioRouteStateMachine . sendMessageWithSessionInfo ( ( shouldMute ? CallAudioRouteStateMachine.MUTE_ON : CallAudioRouteStateMachine.MUTE_OFF ) ) ; }
public void test_get_RSA_private_params ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto . get_RSA_private_params ( org.conscrypt.NativeCryptoTest.NULL_EVP_PKEY ) ; } catch ( java.lang.NullPointerException expected ) {} try { org.conscrypt.NativeCrypto . get_RSA_private_params ( org.conscrypt.NativeCryptoTest.NULL_EVP_PKEY ) ; } catch ( java.lang.NullPointerException expected ) {} long group = org.conscrypt.NativeCrypto . EC_GROUP_new_by_curve_name ( STRING_CONSTANT ) ; org.conscrypt.NativeRef.EVP_PKEY ctx = new org.conscrypt.NativeRef.EVP_PKEY ( org.conscrypt.NativeCrypto . EC_KEY_generate_key ( group ) ) ; try { org.conscrypt.NativeCrypto . get_RSA_private_params ( ctx ) ; fail () ; } catch ( java.lang.RuntimeException expected ) {} }
private void initLayout () { findViewById ( R.id.fab ) . setOnClickListener ( this ) ; setSupportActionBar ( findViewById ( R.id.toolbar ) ) ; com.android.dialer.main.impl.BottomNavBar navBar = findViewById ( R.id.bottom_nav_bar ) ; navBar . setOnTabSelectedListener ( new com.android.dialer.main.impl.MainActivity.MainBottomNavBarBottomNavTabListener () ) ; navBar . selectTab ( BottomNavBar.TabIndex.SPEED_DIAL ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putDouble ( int i , double x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } putDouble ( ix ( checkIndex ( i , SizeOf.DOUBLE ) ) , x ) ; return this ; }
private void read ( char expected ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { int c = peekCharacter () ; if ( c != expected ) { checkRelaxed ( ( ( ( ( STRING_CONSTANT + expected ) + STRING_CONSTANT ) + ( ( char ) ( c ) ) ) + STRING_CONSTANT ) ) ; if ( c == ( - NUMBER_CONSTANT ) ) { return; } } ( position ) ++ ; }
@ android.annotation.SuppressLint ( value = STRING_CONSTANT ) private static boolean shouldWarnForOutgoingWps ( android.content.Context context , java.lang.String number ) { if ( ( number != null ) && ( number . startsWith ( com.android.dialer.util.DialerUtils.WPS_PREFIX ) ) ) { android.telephony.TelephonyManager telephonyManager = context . getSystemService ( android.telephony.TelephonyManager . class ) ; boolean isOnVolte = ( telephonyManager . getVoiceNetworkType () ) == ( android.telephony.TelephonyManager.NETWORK_TYPE_LTE ) ; boolean hasCurrentActiveCall = ( telephonyManager . getCallState () ) == ( android.telephony.TelephonyManager.CALL_STATE_OFFHOOK ) ; return isOnVolte && hasCurrentActiveCall ; } return false ; }
public static java.lang.String parseMmsAddress ( java.lang.String address ) { if ( android.provider.Telephony.Mms . isEmailAddress ( address ) ) { return address ; } java.lang.String retVal = com.android.mms.ui.MessageUtils . parsePhoneNumberForMms ( address ) ; if ( ( retVal != null ) && ( ( retVal . length () ) != NUMBER_CONSTANT ) ) { return retVal ; } if ( com.android.mms.ui.MessageUtils . isAlias ( address ) ) { return address ; } return null ; }
@ com.android.annotations.NonNull private com.android.sdklib.ISystemImage [] getSystemImages ( com.android.sdklib.IAndroidTarget target ) { if ( target != null ) { com.android.sdklib.ISystemImage [] images = target . getSystemImages () ; if ( ( ( images == null ) || ( ( images.length ) == NUMBER_CONSTANT ) ) && ( ! ( target . isPlatform () ) ) ) {} if ( images != null ) { return images ; } } return new com.android.sdklib.ISystemImage [ NUMBER_CONSTANT ] ; }
@ javax.annotation.Nonnull public static java.lang.String getLine ( ) throws java.io.IOException { synchronized ( com.android.jack.server.Server.lockRead ) { assert ( com.android.jack.server.Server.in ) != null ; java.lang.String str = com.android.jack.server.Server.in . readLine () ; while ( str == null ) { try { com.android.jack.server.Server.in . close () ; } catch ( java.io.IOException e1 ) {} com.android.jack.server.Server.in = new java.io.LineNumberReader ( new java.io.FileReader ( com.android.jack.server.Server.fifo ) ) ; assert ( com.android.jack.server.Server.in ) != null ; str = com.android.jack.server.Server.in . readLine () ; } return str ; } }
@ java.lang.Override public void run () { mFilterText = STRING_CONSTANT ; com.android.hierarchyviewerlib.device.IHvDevice hvDevice = window . getHvDevice () ; com.android.hierarchyviewerlib.models.ViewNode viewNode = hvDevice . loadWindowData ( window ) ; if ( viewNode != null ) { viewNode . setViewCount () ; com.android.hierarchyviewerlib.models.TreeViewModel . getModel () . setData ( window , viewNode ) ; } }
private void maybeShowNotSpamDialog ( final java.lang.String number , final com.android.dialer.logging.ContactLookupResult.Type contactLookupResultType ) { if ( com.android.dialer.spam.SpamComponent . get ( this ) . spam () . isDialogEnabledForSpamNotification () ) { BlockReportSpamDialogs.ReportNotSpamDialogFragment . newInstance ( com.android.incallui.spam.SpamNotificationActivity . getFormattedNumber ( number , this ) , new com.android.dialer.blocking.BlockReportSpamDialogs.OnConfirmListener () { @ java.lang.Override public void onClick () { reportNotSpamAndFinish ( number , contactLookupResultType ) ; } } , dismissListener ) . show ( getFragmentManager () , BlockReportSpamDialogs.NOT_SPAM_DIALOG_TAG ) ; } else { reportNotSpamAndFinish ( number , contactLookupResultType ) ; } }
@ com.android.annotations.NonNull private static java.lang.String getFolderName ( com.android.ide.common.res2.ResourceItem resourceItem ) { com.android.resources.ResourceType itemType = resourceItem . getType () ; java.lang.String folderName = itemType . getName () ; java.lang.String qualifiers = resourceItem . getQualifiers () ; if ( ! ( qualifiers . isEmpty () ) ) { folderName = ( folderName + ( com.android.SdkConstants.RES_QUALIFIER_SEP ) ) + qualifiers ; } return folderName ; }
@ java.lang.Override public boolean isConnected ( int slotId , int featureType , int callSessionType , int callType ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature . isConnected ( callSessionType , callType ) ; } } return false ; }
public static < T > int indexOf ( java.util.Iterator < T > iterator , com.google.common.base.Predicate < ? super T > predicate ) { com.google.common.base.Preconditions . checkNotNull ( predicate , STRING_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; iterator . hasNext () ; i ++ ) { T current = iterator . next () ; if ( predicate . apply ( current ) ) { return i ; } } return - NUMBER_CONSTANT ; }
public void testAbiOnlyWithNoMatch () { java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists . newArrayList () ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; list . add ( com.android.ide.common.build.SplitOutputMatcherTest . getAbiOutput ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest . computeBestOutput ( list , NUMBER_CONSTANT , STRING_CONSTANT ) ; assertNull ( result ) ; }
private static void runConfigMatchTest ( java.lang.String refConfig , int resultIndex , java.lang.String . . . configs ) { com.android.ide.common.resources.configuration.FolderConfiguration reference = com.android.ide.common.resources.configuration.FolderConfiguration . getConfig ( com.android.ide.common.resources.configuration.FolderConfigurationTest . getFolderSegments ( refConfig ) ) ; assertNotNull ( reference ) ; java.util.List < com.android.ide.common.resources.configuration.Configurable > list = com.android.ide.common.resources.configuration.FolderConfigurationTest . getConfigurable ( configs ) ; com.android.ide.common.resources.configuration.Configurable match = reference . findMatchingConfigurable ( list ) ; assertEquals ( resultIndex , list . indexOf ( match ) ) ; }
private void addDependencies ( @ javax.annotation.Nonnull java.util.Set < java.lang.String > filesToRecompile , @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.util.Set < java.lang.String > > typeRecompileDependencies , @ javax.annotation.Nonnull java.util.Set < java.lang.String > fileNames ) { for ( java.lang.String fileName : fileNames ) { for ( java.lang.String dependencyFileName : getDependencyFileNamesToRecompile ( typeRecompileDependencies , fileName ) ) { filesToRecompile . add ( dependencyFileName ) ; } } }
@ com.android.annotations.NonNull public static com.android.sdklib.internal.avd.AvdManager getInstance ( @ com.android.annotations.NonNull com.android.sdklib.repository.local.LocalSdk localSdk , @ com.android.annotations.NonNull com.android.utils.ILogger log ) throws com.android.prefs.AndroidLocation.AndroidLocationException { synchronized ( com.android.sdklib.internal.avd.AvdManager.mManagers ) { com.android.sdklib.internal.avd.AvdManager manager ; if ( ( manager = com.android.sdklib.internal.avd.AvdManager.mManagers . get ( localSdk . getLocation () . getPath () ) ) != null ) { return manager ; } manager = new com.android.sdklib.internal.avd.AvdManager ( localSdk , log ) ; com.android.sdklib.internal.avd.AvdManager.mManagers . put ( localSdk . getLocation () . getPath () , manager ) ; return manager ; } }
private void responseLastCallFailCauseInfo ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.LastCallFailCauseInfo fcInfo ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.LastCallFailCause ret = new com.android.internal.telephony.LastCallFailCause () ; ret.causeCode = fcInfo.causeCode ; ret.vendorCause = fcInfo.vendorCause ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
@ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature () ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value stringCharsetValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; constructorArguments . add ( byteArrayValue ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; constructorArguments . add ( stringCharsetValue ) ; }
@ java.lang.Override public java.lang.String toString () { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; sb . append ( permissions . get ( NUMBER_CONSTANT ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( permissions . size () ) ; i ++ ) { com.android.tools.lint.checks.PermissionRequirement . appendOperator ( sb , operator ) ; sb . append ( permissions . get ( i ) ) ; } return sb . toString () ; }
public void test_addPathToNameLintLjava_lang_String () { for ( int type = NUMBER_CONSTANT ; type <= NUMBER_CONSTANT ; type ++ ) { try { new java.security.cert.X509CertSelector () . addPathToName ( type , ( ( java.lang.String ) ( null ) ) ) ; fail () ; } catch ( java.io.IOException expected ) {} } }
public com.android.jack.dx.dex.file.TypeIdItem intern ( com.android.jack.dx.rop.type.Type type ) { assert type != null ; throwIfPrepared () ; com.android.jack.dx.dex.file.TypeIdItem result = typeIds . get ( type ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.TypeIdItem ( type ) ; typeIds . put ( type , result ) ; } return result ; }
@ org.junit.Before public void init () { com.ibm.icu.dev.test.util.LocaleAliasTest.available = com.ibm.icu.util.ULocale . getAvailableLocales () ; for ( int i = NUMBER_CONSTANT ; i < ( com.ibm.icu.dev.test.util.LocaleAliasTest.available.length ) ; i ++ ) { availableMap . put ( com.ibm.icu.dev.test.util.LocaleAliasTest.available [ i ] . toString () , STRING_CONSTANT ) ; } }
@ java.lang.Override public com.android.ide.common.resources.configuration.FolderConfiguration getConfiguration () { assert ( getSource () ) != null : this ; java.lang.String qualifier = getSource () . getQualifiers () ; if ( qualifier . isEmpty () ) { return new com.android.ide.common.resources.configuration.FolderConfiguration () ; } return com.android.ide.common.resources.configuration.FolderConfiguration . getConfigFromQualifiers ( com.google.common.base.Splitter . on ( CHAR_CONS ) . split ( qualifier ) ) ; }
private void clear () { synchronized ( typeCache ) { typeCache . clear () ; } synchronized ( classCache ) { classCache . clear () ; } synchronized ( enumCache ) { enumCache . clear () ; } synchronized ( interfaceCache ) { interfaceCache . clear () ; } synchronized ( annotationCache ) { annotationCache . clear () ; } }
private static java.lang.String convertOpertatorInfoToString ( int status ) { if ( status == ( android.hardware.radio.V1_0.OperatorStatus.UNKNOWN ) ) { return STRING_CONSTANT ; } else if ( status == ( android.hardware.radio.V1_0.OperatorStatus.AVAILABLE ) ) { return STRING_CONSTANT ; } else if ( status == ( android.hardware.radio.V1_0.OperatorStatus.CURRENT ) ) { return STRING_CONSTANT ; } else if ( status == ( android.hardware.radio.V1_0.OperatorStatus.FORBIDDEN ) ) { return STRING_CONSTANT ; } else { return STRING_CONSTANT ; } }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , android.os.Handler handler , int timeoutMs ) { if ( timeoutMs <= NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler ( handler ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType , cbHandler ) ; }
private boolean initDefaultDevices () { synchronized ( mLock ) { if ( ( mDefaultDevices ) == null ) { try { mDefaultDevices = com.android.sdklib.devices.DeviceParser . parse ( com.android.sdklib.devices.DeviceManager . class . getResourceAsStream ( SdkConstants.FN_DEVICES_XML ) ) ; return true ; } catch ( java.lang.IllegalStateException e ) { mLog . error ( e , null ) ; mDefaultDevices = new java.util.ArrayList < com.android.sdklib.devices.Device > () ; } catch ( java.lang.Exception e ) { mLog . error ( e , STRING_CONSTANT ) ; mDefaultDevices = new java.util.ArrayList < com.android.sdklib.devices.Device > () ; } } } return false ; }
private static org.apache.http.entity.StringEntity createEntity ( java.lang.String content ) { try { org.apache.http.entity.StringEntity entity = new org.apache.http.entity.StringEntity ( content ) ; entity . setContentType ( STRING_CONSTANT ) ; return entity ; } catch ( java.io.UnsupportedEncodingException e ) { android.util.Log . w ( android.webkit.cts.CtsTestServer.TAG , e ) ; } return null ; }
public void addDefaultSourceSet ( final java.lang.String sourceSetName , final java.lang.Class < ? extends org.gradle.language.base.LanguageSourceSet > type ) { all ( new org.gradle.api.Action < org.gradle.language.base.FunctionalSourceSet > () { @ java.lang.Override public void execute ( org.gradle.language.base.FunctionalSourceSet functionalSourceSet ) { functionalSourceSet . maybeCreate ( sourceSetName , type ) ; } } ) ; }
public int getRequestedOrientation ( android.os.IBinder token ) { synchronized ( this ) { int index = indexOfTokenLocked ( token ) ; if ( index < NUMBER_CONSTANT ) { return android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED ; } com.android.server.am.HistoryRecord r = ( ( com.android.server.am.HistoryRecord ) ( mHistory . get ( index ) ) ) ; return mWindowManager . getAppOrientation ( r ) ; } }
private java.lang.String getBase64Encoding ( int number ) { byte [] idByteArray = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) . putInt ( number ) . array () ; idByteArray = java.util.Arrays . copyOfRange ( idByteArray , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; return android.util.Base64 . encodeToString ( idByteArray , ( ( android.util.Base64.NO_WRAP ) | ( android.util.Base64.NO_PADDING ) ) ) ; }
public void handleUssdRequest ( int subId , java.lang.String ussdRequest , android.os.ResultReceiver wrappedCallback ) { enforceCallPermission () ; if ( ! ( android.telephony.SubscriptionManager . isValidSubscriptionId ( subId ) ) ) { return; } android.util.Pair < java.lang.String , android.os.ResultReceiver > ussdObject = new android.util.Pair ( ussdRequest , wrappedCallback ) ; sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_HANDLE_USSD_REQUEST , ussdObject , subId ) ; }
private java.lang.String getPackageName ( int id ) { com.android.bluetooth.avrcp.MediaPlayerInfo player = null ; synchronized ( mMediaPlayerInfoList ) { player = mMediaPlayerInfoList . getOrDefault ( id , null ) ; } if ( player == null ) { android.util.Log . w ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( STRING_CONSTANT + id ) + STRING_CONSTANT ) ) ; return STRING_CONSTANT ; } java.lang.String packageName = player . getPackageName () ; if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( ( STRING_CONSTANT + id ) + STRING_CONSTANT ) + packageName ) ) ; return packageName ; }
public void logState ( android.util.Printer pw , java.lang.String prefix ) { pw . println ( ( ( ( ( ( ( ( ( ( ( prefix + STRING_CONSTANT ) + ( mCount . get () ) ) + STRING_CONSTANT ) + ( mLoadedCount ) ) + STRING_CONSTANT ) + ( mLastCount ) ) + STRING_CONSTANT ) + ( mUnpluggedCount ) ) + STRING_CONSTANT ) + ( mPluggedCount ) ) ) ; }
@ com.android.annotations.NonNull public com.android.utils.Pair < java.io.InputStream , java.lang.Integer > openDirectUrl ( @ com.android.annotations.NonNull java.lang.String urlString , @ com.android.annotations.NonNull com.android.sdklib.internal.repository.ITaskMonitor monitor ) throws com.android.sdklib.internal.repository.CanceledByUserException , java.io.IOException { if ( com.android.sdklib.internal.repository.DownloadCache.DEBUG ) { java.lang.System.out . println ( java.lang.String . format ( STRING_CONSTANT , urlString ) ) ; } com.android.utils.Pair < java.io.InputStream , org.apache.http.HttpResponse > result = openUrl ( urlString , false , monitor , null ) ; return com.android.utils.Pair . of ( result . getFirst () , result . getSecond () . getStatusLine () . getStatusCode () ) ; }
public void testMergeWrite ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger () ; java.io.File folder = getWrittenResources () ; com.android.ide.common.res2.ResourceSet writtenSet = new com.android.ide.common.res2.ResourceSet ( STRING_CONSTANT ) ; writtenSet . addSource ( folder ) ; writtenSet . loadFromFiles ( logger ) ; compareResourceMaps ( merger , writtenSet , false ) ; checkLogger ( logger ) ; }
private com.android.dex.Dex mergeDexes ( ) throws java.io.IOException { mergeStringIds () ; mergeTypeIds () ; mergeTypeLists () ; mergeProtoIds () ; mergeFieldIds () ; mergeMethodIds () ; mergeAnnotations () ; unionAnnotationSetsAndDirectories () ; mergeClassDefs () ; contentsOut.header.off = NUMBER_CONSTANT ; contentsOut.header.size = NUMBER_CONSTANT ; contentsOut.fileSize = dexOut . getLength () ; contentsOut . computeSizesFromOffsets () ; contentsOut . writeHeader ( headerOut ) ; contentsOut . writeMap ( mapListOut ) ; dexOut . writeHashes () ; return dexOut ; }
@ org.junit.Test public void test001c ( ) throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ; runTest001 ( jackOutput , STRING_CONSTANT , false ) ; java.io.File myClass1 = new java.io.File ( jackOutput , com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_1 ) ; java.io.File myClass2 = new java.io.File ( jackOutput , com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_2 ) ; java.io.File myClass3 = new java.io.File ( jackOutput , com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_3 ) ; junit.framework.Assert . assertTrue ( myClass1 . exists () ) ; junit.framework.Assert . assertTrue ( myClass2 . exists () ) ; junit.framework.Assert . assertTrue ( myClass3 . exists () ) ; }
private boolean isSupportedApplication ( com.android.internal.telephony.uicc.UiccCardApplication app ) { if ( ( ( ( ( app . getType () ) != ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType.APPTYPE_USIM ) ) && ( ( app . getType () ) != ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType.APPTYPE_CSIM ) ) ) && ( ( app . getType () ) != ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType.APPTYPE_SIM ) ) ) && ( ( app . getType () ) != ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType.APPTYPE_RUIM ) ) ) { return false ; } return true ; }
public synchronized void stop () { if ( ( mPhoneProxy ) != null ) { if ( com.android.bluetooth.hfp.HeadsetSystemInterface.DBG ) { android.util.Log . d ( com.android.bluetooth.hfp.HeadsetSystemInterface.TAG , STRING_CONSTANT ) ; } mPhoneProxy = null ; mHeadsetService . unbindService ( mPhoneProxyConnection ) ; } mHeadsetPhoneState . cleanup () ; }
public void setSelected ( boolean selected ) { if ( ( ( ( mPrivateFlags ) & ( android.view.View.SELECTED ) ) != NUMBER_CONSTANT ) != selected ) { mPrivateFlags = ( ( mPrivateFlags ) & ( ~ ( android.view.View.SELECTED ) ) ) | ( selected ? android.view.View.SELECTED : NUMBER_CONSTANT ) ; if ( ! selected ) resetPressedState () ; invalidate ( true ) ; refreshDrawableState () ; dispatchSetSelected ( selected ) ; } }
public void testSinglePreDexLibrary ( ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String content = STRING_CONSTANT ; java.io.File input = com.android.builder.internal.compiler.PreDexCacheTest . createInputFile ( content ) ; java.io.File output = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; output . deleteOnExit () ; com.android.builder.internal.compiler.PreDexCache . getCache () . preDexLibrary ( input , output , false , new com.android.builder.internal.compiler.PreDexCacheTest.FakeDexOptions () , mBuildToolInfo , false , new com.android.builder.internal.compiler.PreDexCacheTest.FakeCommandLineRunner ( new com.android.utils.StdLogger ( StdLogger.Level.INFO ) ) ) ; com.android.builder.internal.compiler.PreDexCacheTest . checkOutputFile ( content , output ) ; }
public void testKernelDomain ( ) throws com.android.tradefed.device.DeviceNotAvailableException { java.lang.String domain = STRING_CONSTANT ; java.util.List < android.cts.security.SELinuxHostTest.ProcessDetails > procs = android.cts.security.SELinuxHostTest.ProcessDetails . getProcMap ( mDevice ) . get ( domain ) ; if ( procs != null ) { for ( android.cts.security.SELinuxHostTest.ProcessDetails p : procs ) { assertTrue ( ( ( STRING_CONSTANT + p ) + STRING_CONSTANT ) , p . isKernel () ) ; } } }
@ java.lang.Override public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [] interfaces ) { internalName = name ; this . access = access ; this . signature = signature ; this . superName = superName ; this . interfaces = interfaces ; isInterface = com.google.devtools.build.android.desugar.BitFlags . isSet ( access , Opcodes.ACC_INTERFACE ) ; super . visit ( java.lang.Math . min ( version , Opcodes.V1_7 ) , access , name , signature , superName , interfaces ) ; }
@ java.lang.Override public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [] states ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.map.BluetoothMapService service = getService () ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( NUMBER_CONSTANT ) ; } return service . getDevicesMatchingConnectionStates ( states ) ; }
private void replyFailed ( android.os.Message msg , int what , int why ) { if ( ( msg.replyTo ) == null ) return; android.os.Message reply = android.os.Message . obtain () ; reply.what = what ; reply.arg1 = why ; try { msg.replyTo . send ( reply ) ; } catch ( android.os.RemoteException e ) {} }
private static void doFollowReferencesTestImpl ( Main.A root , int stopAfter , int followSet , java.lang.Object asRoot , Main.Verifier v , java.lang.String additionalEnabled ) { java.lang.String [] lines = Main . followReferences ( NUMBER_CONSTANT , null , root , stopAfter , followSet , asRoot ) ; v . process ( lines , additionalEnabled ) ; }
android.bluetooth.BluetoothGattCharacteristic getCharacteristicById ( android.bluetooth.BluetoothDevice device , int instanceId ) { for ( android.bluetooth.BluetoothGattService svc : mServices ) { for ( android.bluetooth.BluetoothGattCharacteristic charac : svc . getCharacteristics () ) { if ( ( charac . getInstanceId () ) == instanceId ) return charac ; } } return null ; }
static int bufferDeadLoop () { java.lang.StringBuffer b = new java.lang.StringBuffer () ; java.lang.String x = STRING_CONSTANT ; for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { int d = b . toString () . indexOf ( x , NUMBER_CONSTANT ) ; } return b . length () ; }
private void writeUsbConfigurationOption ( java.lang.Object newValue ) { android.hardware.usb.UsbManager manager = ( ( android.hardware.usb.UsbManager ) ( getActivity () . getSystemService ( Context.USB_SERVICE ) ) ) ; java.lang.String function = newValue . toString () ; if ( function . equals ( STRING_CONSTANT ) ) { manager . setCurrentFunction ( function , false ) ; } else { manager . setCurrentFunction ( function , true ) ; } }
@ java.lang.Override public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule . process ( this ) ; ifExpr . traverse ( schedule ) ; thenStmt . traverse ( schedule ) ; if ( ( elseStmt ) != null ) { elseStmt . traverse ( schedule ) ; } }
public void test_SSLEngine_beginHandshake ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext . create () ; try { c.clientContext . createSSLEngine () . beginHandshake () ; fail () ; } catch ( java.lang.IllegalStateException expected ) {} c . close () ; libcore.javax.net.ssl.TestSSLEnginePair p = libcore.javax.net.ssl.TestSSLEnginePair . create ( null ) ; assertConnected ( p ) ; p . close () ; }
@ java.lang.Override protected com.android.ide.common.res2.ResourceFile createFileAndItems ( java.io.File sourceFolder , java.io.File file , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { com.android.ide.common.res2.ResourceSet.FolderData folderData = getFolderData ( file . getParentFile () ) ; if ( folderData == null ) { return null ; } return createResourceFile ( file , folderData , logger ) ; }
public boolean isMatchFor ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration referenceConfig ) { if ( referenceConfig == null ) { return false ; } for ( int i = NUMBER_CONSTANT ; i < ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier testQualifier = mQualifiers [ i ] ; com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier referenceQualifier = referenceConfig.mQualifiers [ i ] ; if ( ( ( testQualifier != null ) && ( referenceQualifier != null ) ) && ( ( testQualifier . isMatchFor ( referenceQualifier ) ) == false ) ) { return false ; } } return true ; }
@ java.lang.Override public android.net.wifi.aware.WifiAwareNetworkSpecifier createFromParcel ( android.os.Parcel in ) { return new android.net.wifi.aware.WifiAwareNetworkSpecifier ( in . readInt () , in . readInt () , in . readInt () , in . readInt () , in . readInt () , in . createByteArray () , in . createByteArray () , in . readString () , in . readInt () ) ; }
static boolean showIncomingVideo ( int videoState , int callState ) { boolean isPaused = android.telecom.VideoProfile . isPaused ( videoState ) ; boolean isCallActive = callState == ( com.android.incallui.call.DialerCall.State.ACTIVE ) ; boolean isCallOutgoingPending = ( DialerCall.State . isDialing ( callState ) ) || ( callState == ( com.android.incallui.call.DialerCall.State.CONNECTING ) ) ; return ( ( ! isPaused ) && ( isCallActive || isCallOutgoingPending ) ) && ( android.telecom.VideoProfile . isReceptionEnabled ( videoState ) ) ; }
void sendTrackChangeWithId ( int type , @ android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController ) { android.util.Log . d ( com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG , ( ( ( STRING_CONSTANT + type ) + STRING_CONSTANT ) + mediaController ) ) ; long qid = getActiveQueueItemId ( mediaController ) ; byte [] track = java.nio.ByteBuffer . allocate ( AvrcpConstants.UID_SIZE ) . putLong ( qid ) . array () ; mMediaInterface . trackChangedRsp ( type , track ) ; mLastTrackIdSent = qid ; }
@ javax.annotation.Nonnull public java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > getBlocksDepthFirst ( boolean forward ) { final java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > blocks = new java.util.ArrayList <> () ; new com.android.jack.ir.ast.cfg.BasicBlockIterator ( this ) { @ java.lang.Override public boolean process ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlock block ) { blocks . add ( block ) ; return true ; } } . iterateDepthFirst ( forward ) ; return blocks ; }
@ java.lang.Override public void onUiReady ( com.android.incallui.CallCardPresenter.CallCardUi ui ) { super . onUiReady ( ui ) ; if ( ( mPrimaryContactInfo ) != null ) { updatePrimaryDisplayInfo () ; } com.android.incallui.InCallPresenter . getInstance () . addListener ( this ) ; com.android.incallui.InCallPresenter . getInstance () . addIncomingCallListener ( this ) ; com.android.incallui.InCallPresenter . getInstance () . addDetailsListener ( this ) ; com.android.incallui.InCallPresenter . getInstance () . addInCallEventListener ( this ) ; }
@ java.lang.Override public int getLteOnCdmaModeForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , STRING_CONSTANT ) ) ) { return com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_UNKNOWN ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone == null ) { return com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_UNKNOWN ; } else { return phone . getLteOnCdmaMode () ; } }
@ org.junit.BeforeClass public static void setUpClass () { com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.CLASSPATH = new java.io.File [] { com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) } ; com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.REF_CLASSPATH = new java.io.File [] { com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) } ; com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.SOURCELIST = com.android.jack.TestTools . getTargetLibSourcelist ( STRING_CONSTANT ) ; com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.JARJAR_RULES = new com.android.jack.JarJarRules ( com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) ) ; }
private boolean shouldShowUI ( int flags ) { updateStatusBar () ; return ( mStatusBar ) != null ? ( ( ( ( mStatusBar . getWakefulnessState () ) != ( com.android.systemui.keyguard.WakefulnessLifecycle.WAKEFULNESS_ASLEEP ) ) && ( ( mStatusBar . getWakefulnessState () ) != ( com.android.systemui.keyguard.WakefulnessLifecycle.WAKEFULNESS_GOING_TO_SLEEP ) ) ) && ( mStatusBar . isDeviceInteractive () ) ) && ( ( flags & ( android.media.AudioManager.FLAG_SHOW_UI ) ) != NUMBER_CONSTANT ) : ( flags & ( android.media.AudioManager.FLAG_SHOW_UI ) ) != NUMBER_CONSTANT ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.flow.FlowNormalizer.Visitor visitor = new com.android.jack.transformations.flow.FlowNormalizer.Visitor ( method ) ; visitor . accept ( method ) ; }
private static void check ( int actual , int expected , java.lang.String msg ) { if ( actual != expected ) { java.lang.System.out . println ( ( ( ( ( msg + STRING_CONSTANT ) + actual ) + STRING_CONSTANT ) + expected ) ) ; java.lang.System . exit ( NUMBER_CONSTANT ) ; } }
@ com.android.ide.eclipse.adt.annotations.VisibleForTesting ( visibility = com.android.ide.eclipse.adt.annotations.VisibleForTesting.Visibility.PACKAGE ) public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute parseString ( java.lang.String value ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute.REGEXP . matcher ( value ) ; if ( m . matches () ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute ( m . group ( NUMBER_CONSTANT ) , m . group ( NUMBER_CONSTANT ) , m . group ( NUMBER_CONSTANT ) ) ; } return null ; }
@ java.lang.Override protected com.android.ide.common.res2.ResourceFile createFileAndItems ( java.io.File sourceFolder , java.io.File file , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { com.android.ide.common.res2.ResourceSet.FolderData folderData = getFolderData ( file . getParentFile () ) ; if ( folderData == null ) { return null ; } return com.android.ide.common.res2.ResourceSet . createResourceFile ( file , folderData , logger ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private static com.google.common.collect.ImmutableList < com.google.devtools.build.android.desugar.InputFileProvider > toRegisteredInputFileProvider ( com.google.common.io.Closer closer , java.util.List < java.nio.file.Path > paths ) throws java.io.IOException { com.google.common.collect.ImmutableList.Builder < com.google.devtools.build.android.desugar.InputFileProvider > builder = new com.google.common.collect.ImmutableList.Builder <> () ; for ( java.nio.file.Path path : paths ) { builder . add ( closer . register ( com.google.devtools.build.android.desugar.Desugar . toInputFileProvider ( path ) ) ) ; } return builder . build () ; }
public static void deleteContents ( java.io.File dir ) throws java.io.IOException { java.io.File [] files = dir . listFiles () ; if ( files != null ) { for ( java.io.File file : files ) { if ( file . isDirectory () ) { libcore.io.IoUtils . deleteContents ( file ) ; } file . delete () ; } } }
public void updateDate ( int year , int monthOfYear , int dayOfMonth ) { if ( ( ( ( mYear ) != year ) || ( ( mMonth ) != monthOfYear ) ) || ( ( mDay ) != dayOfMonth ) ) { mYear = ( ( mYearOptional ) && ( year == ( com.android.contacts.datepicker.DatePicker.NO_YEAR ) ) ) ? getCurrentYear () : year ; mMonth = monthOfYear ; mDay = dayOfMonth ; updateSpinners () ; reorderPickers () ; notifyDateChanged () ; } }
private void preRenderingTargetChangeCleanUp ( com.android.sdklib.IAndroidTarget oldTarget ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () ; if ( currentSdk != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = currentSdk . getTargetData ( oldTarget ) ; if ( data != null ) { com.android.ide.common.layoutlib.LayoutLibrary layoutLib = data . getLayoutLibrary () ; layoutLib . clearCaches ( mEditedFile . getProject () ) ; } } }
private int [] readChunkLengths ( java.io.BufferedInputStream bundle ) throws java.io.IOException { int [] chunks = new int [ NUMBER_CONSTANT ] ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; return chunks ; }
public void testGetMergedDocument () { com.android.manifmerger.XmlDocument xmlDocument = new com.android.manifmerger.XmlDocument ( mSourceLocation , mKeyResolver , mPropertyResolver , mElement , XmlDocument.Type.MAIN , com.google.common.base.Optional . < java.lang.String > absent () ) ; com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . setMergedDocument ( xmlDocument ) . build () ; assertTrue ( mergingReport . getMergedDocument () . isPresent () ) ; assertEquals ( xmlDocument , mergingReport . getMergedDocument () . get () ) ; }
public void test_getReuseAddress ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( null ) ; theSocket . setReuseAddress ( true ) ; assertTrue ( STRING_CONSTANT , theSocket . getReuseAddress () ) ; theSocket . setReuseAddress ( false ) ; assertFalse ( STRING_CONSTANT , theSocket . getReuseAddress () ) ; theSocket . close () ; try { theSocket . getReuseAddress () ; fail ( STRING_CONSTANT ) ; } catch ( java.net.SocketException se ) {} }
private org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket makeCommand ( int type , byte [] test_values ) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket ( org.apache.harmony.jpda.tests.jdwp.DDM.DDMTest.DDMCommandSet.CommandSetID , org.apache.harmony.jpda.tests.jdwp.DDM.DDMTest.DDMCommandSet.ChunkCommand ) ; packet . setNextValueAsInt ( type ) ; packet . setNextValueAsInt ( test_values.length ) ; for ( byte b : test_values ) { packet . setNextValueAsByte ( b ) ; } return packet ; }
public int match ( java.lang.String realm , com.android.server.wifi.hotspot2.anqp.eap.EAPMethod credMethod ) { if ( mRealmData . isEmpty () ) return com.android.server.wifi.hotspot2.AuthMatch.Indeterminate ; int best = com.android.server.wifi.hotspot2.AuthMatch.None ; for ( com.android.server.wifi.hotspot2.anqp.NAIRealmData realmData : mRealmData ) { int match = realmData . match ( realm , credMethod ) ; if ( match > best ) { best = match ; if ( best == ( com.android.server.wifi.hotspot2.AuthMatch.Exact ) ) { return best ; } } } return best ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( retentionPolicy ) != null ; assert ( sourceInfo ) != null ; assert ( annotationType ) != null ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo . exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JAnnotationType type = exportSession . getLookup () . getAnnotationType ( annotationType ) ; com.android.jack.ir.ast.JAnnotation jAnnotation = new com.android.jack.ir.ast.JAnnotation ( jSourceInfo , retentionPolicy , type ) ; for ( com.android.jack.jayce.v0002.nodes.NNameValuePair valuePair : elements ) { jAnnotation . put ( valuePair . exportAsJast ( exportSession ) ) ; } return jAnnotation ; }
@ java.lang.Override protected void onLayout ( boolean changed , int l , int t , int r , int b ) { int childCount = getChildCount () ; for ( int i = NUMBER_CONSTANT ; i < childCount ; i ++ ) { android.view.View child = getChildAt ( i ) ; child . layout ( NUMBER_CONSTANT , NUMBER_CONSTANT , child . getMeasuredWidth () , child . getMeasuredHeight () ) ; } }
public void testConstructor_Success ( ) throws java.lang.Exception { android.security.AndroidKeyPairGeneratorSpec spec = new android.security.AndroidKeyPairGeneratorSpec ( getContext () , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , android.security.AndroidKeyPairGeneratorSpecTest.SERIAL_1 , android.security.AndroidKeyPairGeneratorSpecTest.NOW , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , NUMBER_CONSTANT ) ; assertEquals ( STRING_CONSTANT , getContext () , spec . getContext () ) ; assertEquals ( STRING_CONSTANT , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , spec . getKeystoreAlias () ) ; assertEquals ( STRING_CONSTANT , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , spec . getSubjectDN () ) ; assertEquals ( STRING_CONSTANT , android.security.AndroidKeyPairGeneratorSpecTest.NOW , spec . getStartDate () ) ; assertEquals ( STRING_CONSTANT , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , spec . getEndDate () ) ; }
public final int [] getLabelsInOrder () { int sz = size () ; int [] result = new int [ sz ] ; for ( int i = NUMBER_CONSTANT ; i < sz ; i ++ ) { com.android.jack.dx.util.LabeledItem li = ( ( com.android.jack.dx.util.LabeledItem ) ( get0 ( i ) ) ) ; assert li != null ; result [ i ] = li . getLabel () ; } java.util.Arrays . sort ( result ) ; return result ; }
@ org.jetbrains.annotations.Nullable public static java.io.DataInputStream readContent ( int fileId ) { try { int page ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.r . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . checkFileIsValid ( fileId ) ; page = com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getContentRecordId ( fileId ) ; if ( page == NUMBER_CONSTANT ) return null ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.r . unlock () ; } return com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getContentStorage () . readStream ( page ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } }
protected static org.conscrypt.SSLParametersImpl getDefault ( ) throws java.security.KeyManagementException { org.conscrypt.SSLParametersImpl result = org.conscrypt.SSLParametersImpl.defaultParameters ; if ( result == null ) { org.conscrypt.SSLParametersImpl.defaultParameters = result = new org.conscrypt.SSLParametersImpl ( null , null , null , new org.conscrypt.ClientSessionContext () , new org.conscrypt.ServerSessionContext () , null ) ; } return ( ( org.conscrypt.SSLParametersImpl ) ( result . clone () ) ) ; }
@ org.junit.Test public void testSendUuidIntent () { mRemoteDevices . updateUuids ( mDevice1 ) ; if ( ( android.os.Looper . myLooper () ) != null ) { android.os.Looper . myLooper () . quitSafely () ; } android.os.Looper . loop () ; org.mockito.Mockito . verify ( mAdapterService ) . sendBroadcast ( org.mockito.Mockito . any () , org.mockito.Mockito . anyString () ) ; org.mockito.Mockito . verifyNoMoreInteractions ( mAdapterService ) ; }
@ java.lang.Override public synchronized void onDnsEvent ( int netId , int eventType , int returnCode , int latencyMs , java.lang.String hostname , java.lang.String [] ipAddresses , int ipAddressesCount , int uid ) throws android.os.RemoteException { long timestamp = java.lang.System . currentTimeMillis () ; getMetricsForNetwork ( timestamp , netId ) . addDnsResult ( eventType , returnCode , latencyMs ) ; if ( ( mNetdEventCallback ) != null ) { mNetdEventCallback . onDnsEvent ( hostname , ipAddresses , ipAddressesCount , timestamp , uid ) ; } }
@ java.lang.Override public java.lang.String getAdbLocation () { java.lang.String hvParentLocation = java.lang.System . getProperty ( STRING_CONSTANT ) ; if ( ( hvParentLocation != null ) && ( ( hvParentLocation . length () ) != NUMBER_CONSTANT ) ) { return ( hvParentLocation + ( java.io.File.separator ) ) + ( com.android.sdklib.SdkConstants.FN_ADB ) ; } return com.android.sdklib.SdkConstants.FN_ADB ; }
private android.os.Bundle getPhoneAccountExtras ( android.os.Bundle phoneAccountExtras ) { android.os.PersistableBundle b = com.android.phone.PhoneGlobals . getInstance () . getCarrierConfigForSubId ( mPhone . getSubId () ) ; int instantLetteringMaxLength = b . getInt ( CarrierConfigManager.KEY_CARRIER_INSTANT_LETTERING_LENGTH_LIMIT_INT ) ; java.lang.String instantLetteringEncoding = b . getString ( CarrierConfigManager.KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING ) ; phoneAccountExtras . putInt ( PhoneAccount.EXTRA_CALL_SUBJECT_MAX_LENGTH , instantLetteringMaxLength ) ; phoneAccountExtras . putString ( PhoneAccount.EXTRA_CALL_SUBJECT_CHARACTER_ENCODING , instantLetteringEncoding ) ; return phoneAccountExtras ; }
private static void assertSslSocket ( libcore.java.net.URLConnectionTest.TlsFallbackDisabledScsvSSLSocket socket , boolean expectedWasFallbackScsvSet , java.lang.String . . . expectedEnabledProtocols ) { java.util.Set < java.lang.String > enabledProtocols = new java.util.HashSet < java.lang.String > ( java.util.Arrays . asList ( socket . getEnabledProtocols () ) ) ; java.util.Set < java.lang.String > expectedProtocolsSet = new java.util.HashSet < java.lang.String > ( java.util.Arrays . asList ( expectedEnabledProtocols ) ) ; org.junit.Assert . assertEquals ( expectedProtocolsSet , enabledProtocols ) ; org.junit.Assert . assertEquals ( expectedWasFallbackScsvSet , socket . wasTlsFallbackScsvSet () ) ; }
public boolean put ( java.lang.String key , byte [] value , int uid , int flags ) { try { return ( mBinder . insert ( key , value , uid , flags ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
@ javax.annotation.Nonnull private com.android.jill.frontend.java.Variable getStackVariable ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , int stackIdx ) { int stackHeight = ( frame . getStackSize () ) + stackIdx ; org.objectweb.asm.tree.analysis.BasicValue bv = frame . getStack ( stackHeight ) ; assert bv != ( org.objectweb.asm.tree.analysis.BasicValue.UNINITIALIZED_VALUE ) ; java.lang.String id = ( ( STRING_CONSTANT + stackHeight ) + STRING_CONSTANT ) + ( typeToUntypedDesc ( bv . getType () ) ) ; com.android.jill.frontend.java.Variable variable = getVariable ( id , id , typeToUntyped ( bv . getType () ) ) ; return variable ; }
protected int handleComputeMonthStart ( int year , int month , boolean useMonth ) { int imonth ; if ( ( month < NUMBER_CONSTANT ) || ( month > NUMBER_CONSTANT ) ) { year += month / NUMBER_CONSTANT ; month %= NUMBER_CONSTANT ; } imonth = month + NUMBER_CONSTANT ; double jd = com.ibm.icu.util.IndianCalendar . IndianToJD ( year , imonth , NUMBER_CONSTANT ) ; return ( ( int ) ( jd ) ) ; }
@ javax.annotation.Nonnull private java.io.File createRscLibrary ( ) throws java.io.IOException , java.lang.Exception { java.io.File emptyLib = com.android.jack.test.toolchain.AbstractTestTools . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain . class ) ; toolchain . addResource ( com.android.jack.test.toolchain.AbstractTestTools . getTestRootDir ( STRING_CONSTANT ) ) ; toolchain . srcToLib ( emptyLib , true ) ; return emptyLib ; }
public void test_setTrafficClass ( ) throws java.lang.Exception { try ( java.net.Socket s = new java.net.Socket () ) { for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; ++ i ) { s . setTrafficClass ( i ) ; assertEquals ( ( i & ( ~ ( libcore.java.net.SocketTest.INET_ECN_MASK ) ) ) , s . getTrafficClass () ) ; } } }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile ) { if ( com.google.caliper.SimpleBenchmark . class . isAssignableFrom ( klass ) ) { return new vogar.target.CaliperRunner ( monitor , profile , klass ) ; } else { return null ; } }
@ com.android.annotations.NonNull @ java.lang.Override public com.android.tools.lint.detector.api.Severity getSeverity ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue ) { com.android.tools.lint.detector.api.Severity severity = computeSeverity ( issue ) ; if ( ( mFatalOnly ) && ( severity != ( com.android.tools.lint.detector.api.Severity.FATAL ) ) ) { return com.android.tools.lint.detector.api.Severity.IGNORE ; } if ( ( mFlags . isWarningsAsErrors () ) && ( severity == ( com.android.tools.lint.detector.api.Severity.WARNING ) ) ) { severity = com.android.tools.lint.detector.api.Severity.ERROR ; } if ( ( mFlags . isIgnoreWarnings () ) && ( severity == ( com.android.tools.lint.detector.api.Severity.WARNING ) ) ) { severity = com.android.tools.lint.detector.api.Severity.IGNORE ; } return severity ; }
@ java.lang.Override public boolean inDaylightTime ( java.util.Date time ) { long when = time . getTime () ; long unix = when / NUMBER_CONSTANT ; int transition = java.util.Arrays . binarySearch ( mTransitions , unix ) ; if ( transition < NUMBER_CONSTANT ) { transition = ( ~ transition ) - NUMBER_CONSTANT ; if ( transition < NUMBER_CONSTANT ) { return false ; } } return ( mIsDsts [ ( ( mTypes [ transition ] ) & NUMBER_CONSTANT ) ] ) == NUMBER_CONSTANT ; }
@ java.lang.Override protected boolean isDataPossible ( java.lang.String apnType ) { boolean possible = ( isDataAllowed () ) && ( ! ( ( getAnyDataEnabled () ) && ( ( mState ) == ( DctConstants.State.FAILED ) ) ) ) ; if ( ( ( ! possible ) && ( DBG ) ) && ( isDataAllowed () ) ) { log ( ( STRING_CONSTANT + ( mState ) ) ) ; } return possible ; }
@ java.lang.Override public void endVisit ( org.eclipse.jdt.internal.compiler.ast.UnaryExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope b ) { int operator = ( ( x.bits ) & ( org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK ) ) > > ( org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT ) ; if ( ( operator == ( org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS ) ) && ( ! ( ( x.expression ) instanceof org.eclipse.jdt.internal.compiler.ast.Literal ) ) ) { hasEcjUnaryPosBug = true ; org.eclipse.jdt.internal.compiler.impl.Constant outer = x.constant ; org.eclipse.jdt.internal.compiler.impl.Constant inner = x.expression.constant ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) boolean hasEcjUnaryPosBug = ! ( outer . equals ( inner ) ) ; } }
public final android.content.IContentProvider acquireExistingProvider ( android.net.Uri uri ) { if ( ! ( android.content.ContentResolver.SCHEME_CONTENT . equals ( uri . getScheme () ) ) ) { return null ; } final java.lang.String auth = uri . getAuthority () ; if ( auth != null ) { return acquireExistingProvider ( mContext , auth ) ; } return null ; }
@ java.lang.Override public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface declaringClass = method . getEnclosingType () ; com.android.jack.scheduling.marker.ClassDefItemMarker classDefItemMarker = declaringClass . getMarker ( com.android.jack.scheduling.marker.ClassDefItemMarker . class ) ; assert classDefItemMarker != null ; com.android.jack.dx.dex.file.ClassDefItem classDefItem = classDefItemMarker . getClassDefItem () ; assert classDefItem != null ; com.android.jack.dx.dex.file.EncodedMethod encodedMethod = createEncodedMethod ( method ) ; if ( com.android.jack.backend.dex.EncodedMethodBuilder . isDirectMethod ( method ) ) { classDefItem . addDirectMethod ( encodedMethod ) ; } else { classDefItem . addVirtualMethod ( encodedMethod ) ; } }
public void updateSubscriptionNickname ( int subscriptionId , java.lang.String nickname , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled () ) ) { android.telephony.euicc.EuiccManager . sendUnavailableError ( callbackIntent ) ; return; } try { android.telephony.euicc.EuiccManager . getIEuiccController () . updateSubscriptionNickname ( subscriptionId , nickname , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
private android.os.Parcel getParcelForFile ( java.io.File file ) throws java.io.IOException { java.io.FileInputStream stream = new java.io.FileInputStream ( file ) ; try { byte [] raw = com.android.server.am.UsageStatsService . readFully ( stream ) ; android.os.Parcel in = android.os.Parcel . obtain () ; in . unmarshall ( raw , NUMBER_CONSTANT , raw.length ) ; in . setDataPosition ( NUMBER_CONSTANT ) ; return in ; } finally { stream . close () ; } }
static boolean equalsImpl ( java.util.Map < , > map , java.lang.Object object ) { if ( map == object ) { return true ; } else if ( object instanceof java.util.Map ) { java.util.Map < , > o = ( ( java.util.Map < , > ) ( object ) ) ; return map . entrySet () . equals ( o . entrySet () ) ; } return false ; }
public void test_parse_h_z_2DigitOffsetFromGMT_doesNotParse ( ) throws java.lang.Exception { java.text.SimpleDateFormat pFormat = new java.text.SimpleDateFormat ( STRING_CONSTANT , java.util.Locale.ENGLISH ) ; try { pFormat . parse ( STRING_CONSTANT ) ; fail () ; } catch ( java.text.ParseException expected ) {} try { pFormat . parse ( STRING_CONSTANT ) ; fail () ; } catch ( java.text.ParseException expected ) {} }
public java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > getConfiguredProjectResources () { if ( ( ( mConfiguredProjectRes ) == null ) && ( ( mConfigComposite ) != null ) ) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources project = getProjectResources () ; mConfiguredProjectRes = project . getConfiguredResources ( mConfigComposite . getCurrentConfig () ) ; } return mConfiguredProjectRes ; }
public static com.android.jack.dx.rop.code.Rop opMove ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type . getBasicFrameType () ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.MOVE_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.MOVE_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.MOVE_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.MOVE_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.MOVE_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_ADDR : return com.android.jack.dx.rop.code.Rops.MOVE_RETURN_ADDRESS ; } return com.android.jack.dx.rop.code.Rops . throwBadType ( type ) ; }
private WifiNative.PnoSettings createDummyPnoSettings ( boolean isConnected ) { com.android.server.wifi.WifiNative.PnoSettings pnoSettings = new com.android.server.wifi.WifiNative.PnoSettings () ; pnoSettings.isConnected = isConnected ; pnoSettings.networkList = new com.android.server.wifi.WifiNative.PnoNetwork [ NUMBER_CONSTANT ] ; pnoSettings.networkList [ NUMBER_CONSTANT ] = createDummyPnoNetwork ( STRING_CONSTANT ) ; pnoSettings.networkList [ NUMBER_CONSTANT ] = createDummyPnoNetwork ( STRING_CONSTANT ) ; return pnoSettings ; }
public void initialize ( int strength , java.security.SecureRandom random ) { this . strength = strength ; this . random = random ; java.security.spec.ECGenParameterSpec ecParams = ( ( java.security.spec.ECGenParameterSpec ) ( org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi.EC.ecParameters . get ( org.bouncycastle.util.Integers . valueOf ( strength ) ) ) ) ; if ( ecParams == null ) { throw new java.security.InvalidParameterException ( STRING_CONSTANT ) ; } try { initialize ( ecParams , random ) ; } catch ( java.security.InvalidAlgorithmParameterException e ) { throw new java.security.InvalidParameterException ( STRING_CONSTANT ) ; } }
@ com.android.annotations.NonNull static com.android.build.gradle.internal.model.ProductFlavorImpl cloneFlavor ( com.android.builder.model.ProductFlavor productFlavor ) { com.android.build.gradle.internal.model.ProductFlavorImpl clonedFlavor = new com.android.build.gradle.internal.model.ProductFlavorImpl () ; clonedFlavor.name = productFlavor . getName () ; clonedFlavor.mMinSdkVersion = productFlavor . getMinSdkVersion () ; clonedFlavor.mTargetSdkVersion = productFlavor . getTargetSdkVersion () ; clonedFlavor.mRenderscriptTargetApi = productFlavor . getRenderscriptTargetApi () ; clonedFlavor.mVersionCode = productFlavor . getVersionCode () ; clonedFlavor.mVersionName = productFlavor . getVersionName () ; clonedFlavor.mPackageName = productFlavor . getPackageName () ; clonedFlavor.mTestPackageName = productFlavor . getTestPackageName () ; clonedFlavor.mTestInstrumentationRunner = productFlavor . getTestInstrumentationRunner () ; return clonedFlavor ; }
@ java.lang.Override protected void addSensorEventInternal ( android.hardware.cts.helpers.TestSensorEvent event ) { if ( ( mPreviousEvent ) == null ) { mMaxTimestamp = event.timestamp ; } else { if ( ( event.timestamp ) <= ( mMaxTimestamp ) ) { mOutOfOrderEvents . add ( new android.hardware.cts.helpers.sensorverification.IndexedEventPair ( mIndex , event , mPreviousEvent ) ) ; } else { mMaxTimestamp = event.timestamp ; } } mPreviousEvent = event ; ( mIndex ) ++ ; }
public boolean testBit ( int i ) { if ( i < NUMBER_CONSTANT ) { throw new java.lang.RuntimeException () ; } if ( i > ( ( len ) - NUMBER_CONSTANT ) ) { return false ; } return ( ( value [ ( i > > > NUMBER_CONSTANT ) ] ) & ( org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial.bitMask [ ( i & NUMBER_CONSTANT ) ] ) ) != NUMBER_CONSTANT ; }
public java.lang.String getVoiceMailNumberForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } java.lang.String number = android.telephony.PhoneNumberUtils . extractNetworkPortion ( phone . getVoiceMailNumber () ) ; if ( com.android.internal.telephony.PhoneSubInfoController.VDBG ) log ( ( STRING_CONSTANT + number ) ) ; return number ; } else { loge ( ( STRING_CONSTANT + subId ) ) ; return null ; } }
@ org.junit.Test public void testCheckAccessLevel_deniedAppOpsBit_deniedPermission ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert . assertEquals ( NetworkStatsAccess.Level.DEFAULT , com.android.server.net.NetworkStatsAccess . checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
private void resetFolderPath ( boolean validate ) { com.android.ide.eclipse.adt.internal.wizards.newxmlfile.NewXmlFileCreationPage.TypeInfo type = getSelectedType () ; if ( type != null ) { mConfigSelector . getConfiguration ( mTempConfig ) ; java.lang.StringBuffer sb = new java.lang.StringBuffer ( com.android.ide.eclipse.adt.internal.wizards.newxmlfile.NewXmlFileCreationPage.RES_FOLDER_ABS ) ; sb . append ( mTempConfig . getFolderName ( type . getResFolderType () ) ) ; mInternalWsFolderPathUpdate = true ; mWsFolderPathTextField . setText ( sb . toString () ) ; mInternalWsFolderPathUpdate = false ; if ( validate ) { validatePage () ; } } }
public static byte [] encode ( java.lang.String s ) throws java.io.UTFDataFormatException { long size = java.nio.charset.ModifiedUtf8 . countBytes ( s , true ) ; byte [] output = new byte [ ( ( int ) ( size ) ) + NUMBER_CONSTANT ] ; java.nio.charset.ModifiedUtf8 . encode ( output , NUMBER_CONSTANT , s ) ; output [ NUMBER_CONSTANT ] = ( ( byte ) ( size > > > NUMBER_CONSTANT ) ) ; output [ NUMBER_CONSTANT ] = ( ( byte ) ( size ) ) ; return output ; }
public static int frequency ( java.lang.Iterable < > iterable , @ javax.annotation.Nullable java.lang.Object element ) { if ( iterable instanceof com.google.common.collect.Multiset ) { return ( ( com.google.common.collect.Multiset < > ) ( iterable ) ) . count ( element ) ; } else if ( iterable instanceof java.util.Set ) { return ( ( java.util.Set < > ) ( iterable ) ) . contains ( element ) ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } return com.google.common.collect.Iterators . frequency ( iterable . iterator () , element ) ; }
public void createTest ( com.android.rs.imagejb.Resources res ) { mScript = new com.android.rs.imagejb.ScriptC_colorcube ( mRS ) ; mIntrinsic = android.renderscript.ScriptIntrinsic3DLUT . create ( mRS , android.renderscript.Element . U8_4 ( mRS ) ) ; initCube () ; mScript . invoke_setCube ( mCube ) ; mIntrinsic . setLUT ( mCube ) ; }
public synchronized void release ( ) throws java.io.IOException { java.nio.channels.Channel ch = acquiredBy () ; if ( ! ( ch . isOpen () ) ) throw new java.nio.channels.ClosedChannelException () ; if ( valid ) { if ( ch instanceof sun.nio.ch.FileChannelImpl ) ( ( sun.nio.ch.FileChannelImpl ) ( ch ) ) . release ( this ) ; else throw new java.lang.AssertionError () ; valid = false ; } }
@ org.junit.Test public void testNotifyResponseUnknown ( ) throws org.json.JSONException { final int invalidTransactionId = NUMBER_CONSTANT ; final short transactionId = NUMBER_CONSTANT ; android.os.Bundle args = new android.os.Bundle () ; args . putInt ( STRING_CONSTANT , WifiAwareNative.AWARE_STATUS_SUCCESS ) ; args . putInt ( STRING_CONSTANT , invalidTransactionId ) ; com.android.server.wifi.aware.WifiAwareHalMock . callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils . convertBundleToJson ( args ) . toString () ) ; org.mockito.Mockito . verifyNoMoreInteractions ( mAwareStateManager ) ; }
public com.android.sdklib.internal.repository.SdkSourceCategory getCategory ( com.android.sdklib.internal.repository.SdkSource source ) { if ( source != null ) { synchronized ( mSources ) { for ( java.util.Map.Entry < com.android.sdklib.internal.repository.SdkSourceCategory , java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > > entry : mSources . entrySet () ) { if ( entry . getValue () . contains ( source ) ) { return entry . getKey () ; } } } } return null ; }
@ java.lang.Override public void openModuleDependenciesSettings ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.module.Module module , @ org.jetbrains.annotations.Nullable final com.intellij.openapi.roots.OrderEntry orderEntry ) { com.intellij.openapi.options.ShowSettingsUtil . getInstance () . editConfigurable ( myProject , com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable . getInstance ( myProject ) , new java.lang.Runnable () { @ java.lang.Override public void run () { com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable . getInstance ( myProject ) . selectOrderEntry ( module , orderEntry ) ; } } ) ; }
private boolean acquireWakeLock ( java.lang.String lockName ) { if ( ( mWakeLock ) == null ) { mWakeLockName = lockName ; mWakeLock = mPowerManager . newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , lockName ) ; } if ( ! ( mWakeLock . isHeld () ) ) mWakeLock . acquire () ; return true ; }
@ java.lang.Override public final java.lang.String toString () { byte [] bytes = asBytes () ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( NUMBER_CONSTANT * ( bytes.length ) ) ) ; for ( byte b : bytes ) { sb . append ( com.google.common.hash.HashCode.hexDigits [ ( ( b > > NUMBER_CONSTANT ) & NUMBER_CONSTANT ) ] ) . append ( com.google.common.hash.HashCode.hexDigits [ ( b & NUMBER_CONSTANT ) ] ) ; } return sb . toString () ; }
private java.util.List < com.android.bluetooth.avrcp.MediaController > getActiveControllersList () { java.util.List < com.android.bluetooth.avrcp.MediaController > controllersList = new java.util.ArrayList < com.android.bluetooth.avrcp.MediaController > () ; if ( ( mMediaSessionManager ) != null ) { controllersList = mMediaSessionManager . getActiveSessions ( null ) ; } android.util.Log . i ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( STRING_CONSTANT + ( controllersList . size () ) ) + STRING_CONSTANT ) ) ; return controllersList ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { if ( ( mContext ) == null ) return; try { boolean notifyNow = ( getITelephony () ) != null ; if ( ( listener.mSubId ) == null ) { listener.mSubId = mSubId ; } android.telephony.TelephonyManager.sRegistry . listenForSubscriber ( listener.mSubId , getOpPackageName () , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) {} catch ( java.lang.NullPointerException ex ) {} }
public void configureQuery ( java.lang.String query ) { if ( com.android.dialer.dialpadview.SmartDialCursorLoader.DEBUG ) { com.android.dialer.common.LogUtil . v ( com.android.dialer.dialpadview.SmartDialCursorLoader.TAG , ( STRING_CONSTANT + query ) ) ; } mQuery = com.android.dialer.smartdial.SmartDialNameMatcher . normalizeNumber ( mContext , query ) ; mNameMatcher = new com.android.dialer.smartdial.SmartDialNameMatcher ( mQuery ) ; mNameMatcher . setShouldMatchEmptyQuery ( ( ! ( mShowEmptyListForNullQuery ) ) ) ; }
static int hashCodeImpl ( java.util.List < > list ) { int hashCode = NUMBER_CONSTANT ; for ( java.lang.Object o : list ) { hashCode = ( NUMBER_CONSTANT * hashCode ) + ( o == null ? NUMBER_CONSTANT : o . hashCode () ) ; hashCode = ~ ( ~ hashCode ) ; } return hashCode ; }
public void test_ConstructorLjava_lang_String () { s = new java.util.Scanner ( STRING_CONSTANT ) ; assertNotNull ( s ) ; s . close () ; try { s = new java.util.Scanner ( ( ( java.lang.String ) ( null ) ) ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} }
void deviceConnected ( java.lang.String bdaddr , boolean absoluteVolume ) { if ( com.android.bluetooth.avrcp.AvrcpVolumeManager.DEBUG ) { android.util.Log . d ( com.android.bluetooth.avrcp.AvrcpVolumeManager.TAG , ( ( ( STRING_CONSTANT + bdaddr ) + STRING_CONSTANT ) + absoluteVolume ) ) ; } mDeviceMap . put ( bdaddr , absoluteVolume ) ; if ( bdaddr . equals ( mCurrentDeviceAddr ) ) { switchVolumeDevice ( bdaddr ) ; } }
public boolean setPnoList ( com.android.server.wifi.WifiNative.PnoSettings settings , com.android.server.wifi.WifiNative.PnoEventHandler eventHandler ) { android.util.Log . e ( com.android.server.wifi.WifiNative.TAG , ( STRING_CONSTANT + ( com.android.server.wifi.WifiNative.sPnoCmdId ) ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { com.android.server.wifi.WifiNative.sPnoCmdId = com.android.server.wifi.WifiNative . getNewCmdIdLocked () ; com.android.server.wifi.WifiNative.sPnoEventHandler = eventHandler ; if ( com.android.server.wifi.WifiNative . setPnoListNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sPnoCmdId , settings ) ) { return true ; } } com.android.server.wifi.WifiNative.sPnoEventHandler = null ; return false ; } }
@ java.lang.Override public void onHeaderClick ( com.android.dialer.app.settings.Header header , int position ) { if ( ( header.id ) == ( R.id.settings_header_sounds_and_vibration ) ) { if ( ! ( Settings.System . canWrite ( this ) ) ) { android.widget.Toast . makeText ( this , getResources () . getString ( R.string.toast_cannot_write_system_settings ) , Toast.LENGTH_SHORT ) . show () ; } startActivity ( new android.content.Intent ( android.provider.Settings.ACTION_SOUND_SETTINGS ) ) ; return; } super . onHeaderClick ( header , position ) ; }
@ com.android.annotations.Nullable public java.util.Collection < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod method , int parameterIndex ) { com.android.tools.lint.ExternalAnnotationRepository.MethodInfo m = findMethod ( method ) ; if ( m == null ) { return null ; } if ( ( m.parameterAnnotations ) != null ) { return m.parameterAnnotations . get ( parameterIndex ) ; } return null ; }
private int getDefaultCacheLimit () { int cacheLimit = NUMBER_CONSTANT ; try { java.lang.String s = java.security.AccessController . doPrivileged ( new java.security.PrivilegedAction < java.lang.String > () { @ java.lang.Override public java.lang.String run () { return java.lang.System . getProperty ( STRING_CONSTANT ) ; } } ) ; cacheLimit = ( s != null ) ? java.lang.Integer . parseInt ( s ) : NUMBER_CONSTANT ; } catch ( java.lang.Exception e ) {} return cacheLimit > NUMBER_CONSTANT ? cacheLimit : NUMBER_CONSTANT ; }
@ java.lang.Override public boolean equals ( @ com.android.annotations.Nullable java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( getClass () ) != ( obj . getClass () ) ) return false ; com.android.tools.lint.detector.api.Project other = ( ( com.android.tools.lint.detector.api.Project ) ( obj ) ) ; return mDir . equals ( other.mDir ) ; }
public android.graphics.Bitmap getDrawingCache ( boolean autoScale ) { if ( ( ( mViewFlags ) & ( android.view.View.WILL_NOT_CACHE_DRAWING ) ) == ( android.view.View.WILL_NOT_CACHE_DRAWING ) ) { return null ; } if ( ( ( mViewFlags ) & ( android.view.View.DRAWING_CACHE_ENABLED ) ) == ( android.view.View.DRAWING_CACHE_ENABLED ) ) { buildDrawingCache ( autoScale ) ; } return autoScale ? mDrawingCache : mUnscaledDrawingCache ; }
public static android.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR ( android.renderscript.RenderScript rs ) { if ( ( rs.mSampler_WRAP_LINEAR_MIP_LINEAR ) == null ) { synchronized ( rs ) { if ( ( rs.mSampler_WRAP_LINEAR_MIP_LINEAR ) == null ) { android.renderscript.Sampler.Builder b = new android.renderscript.Sampler.Builder ( rs ) ; b . setMinification ( android.renderscript.Sampler.Value.LINEAR_MIP_LINEAR ) ; b . setMagnification ( android.renderscript.Sampler.Value.LINEAR ) ; b . setWrapS ( android.renderscript.Sampler.Value.WRAP ) ; b . setWrapT ( android.renderscript.Sampler.Value.WRAP ) ; rs.mSampler_WRAP_LINEAR_MIP_LINEAR = b . create () ; } } } return rs.mSampler_WRAP_LINEAR_MIP_LINEAR ; }
public boolean find ( int start ) { if ( ( start < NUMBER_CONSTANT ) || ( start > ( input . length () ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( STRING_CONSTANT + start ) + STRING_CONSTANT ) + ( input . length () ) ) ) ; } synchronized ( this ) { matchFound = java.util.regex.Matcher . findImpl ( address , input , start , matchOffsets ) ; } return matchFound ; }
@ java.lang.Override protected void readSourceFolder ( java.io.File sourceFolder , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { java.io.File [] folders = sourceFolder . listFiles () ; if ( folders != null ) { for ( java.io.File folder : folders ) { if ( ( folder . isDirectory () ) && ( ! ( isIgnored ( folder ) ) ) ) { com.android.ide.common.res2.ResourceSet.FolderData folderData = getFolderData ( folder ) ; if ( folderData != null ) { parseFolder ( sourceFolder , folder , folderData , logger ) ; } } } } }
@ javax.annotation.Nonnull @ java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > argsType , @ javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind ) { synchronized ( methodIds ) { for ( com.android.jack.ir.ast.JMethodId id : methodIds ) { if ( id . equals ( name , argsType , kind ) ) { return id ; } } com.android.jack.ir.ast.JMethodId newMethod = new com.android.jack.ir.ast.JMethodId ( name , argsType , kind ) ; methodIds . add ( newMethod ) ; return newMethod ; } }
private static java.io.File getWrittenResources ( ) throws MergeConsumer.ConsumerException , com.android.ide.common.res2.DuplicateDataException , java.io.IOException { com.android.ide.common.res2.AssetMerger assetMerger = com.android.ide.common.res2.AssetMergerTest . getAssetMerger () ; java.io.File folder = com.google.common.io.Files . createTempDir () ; com.android.ide.common.res2.MergedAssetWriter writer = new com.android.ide.common.res2.MergedAssetWriter ( folder ) ; assetMerger . mergeData ( writer , false ) ; return folder ; }
public static com.android.cts.TestSession createSession ( final java.lang.String testPlanName ) throws com.android.cts.TestNotFoundException , com.android.cts.TestPlanNotFoundException , java.io.IOException , java.security.NoSuchAlgorithmException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String testPlanPath = com.android.cts.TestHost.sConfig . getPlanRepository () . getPlanPath ( testPlanName ) ; com.android.cts.TestSession ts = com.android.cts.TestSessionBuilder . getInstance () . build ( testPlanPath ) ; com.android.cts.TestHost.sSessions . add ( ts ) ; return ts ; }
public int openConvertSession ( java.lang.String mimeType ) { if ( ( null == mimeType ) || ( mimeType . equals ( STRING_CONSTANT ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _openConvertSession ( mUniqueId , mimeType ) ; }
public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { android.bluetooth.BluetoothPbap . log ( STRING_CONSTANT ) ; final android.bluetooth.IBluetoothPbap service = mService ; if ( service == null ) { android.util.Log . w ( android.bluetooth.BluetoothPbap.TAG , STRING_CONSTANT ) ; return false ; } try { service . disconnect ( device ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothPbap.TAG , e . toString () ) ; } return false ; }
@ java.lang.Override protected long getEVP_AEAD ( int keyLength ) throws java.security.InvalidKeyException { if ( keyLength == NUMBER_CONSTANT ) { return org.conscrypt.NativeCrypto . EVP_aead_aes_128_gcm () ; } else if ( keyLength == NUMBER_CONSTANT ) { return org.conscrypt.NativeCrypto . EVP_aead_aes_256_gcm () ; } else { throw new java.lang.RuntimeException ( ( STRING_CONSTANT + keyLength ) ) ; } }
@ org.testng.annotations.Test public static void main ( ) throws java.io.IOException { java.nio.file.Path dir = test.java.nio.file.TestUtil . createTemporaryDirectory () ; try { test.java.nio.file.attribute.PosixFileAttributeViewTest . permissionTests ( dir ) ; test.java.nio.file.attribute.PosixFileAttributeViewTest . createTests ( dir ) ; test.java.nio.file.attribute.PosixFileAttributeViewTest . ownerTests ( dir ) ; test.java.nio.file.attribute.PosixFileAttributeViewTest . lookupPrincipalTests ( dir ) ; test.java.nio.file.attribute.PosixFileAttributeViewTest . exceptionsTests ( dir ) ; } finally { test.java.nio.file.TestUtil . removeAll ( dir ) ; } }
@ java.lang.Override public void bufferChanged ( java.util.List < com.android.ddmlib.logcat.LogCatMessage > addedMessages , java.util.List < com.android.ddmlib.logcat.LogCatMessage > deletedMessages ) { updateUnreadCount ( addedMessages ) ; refreshFiltersTable () ; synchronized ( mLogBuffer ) { addedMessages = applyCurrentFilters ( addedMessages ) ; deletedMessages = applyCurrentFilters ( deletedMessages ) ; mLogBuffer . addAll ( addedMessages ) ; mDeletedLogCount += deletedMessages . size () ; } refreshLogCatTable () ; }
@ com.android.internal.annotations.VisibleForTesting public void setTargetPhoneAccount ( android.telecom.PhoneAccountHandle accountHandle ) { if ( ! ( java.util.Objects . equals ( mTargetPhoneAccountHandle , accountHandle ) ) ) { mTargetPhoneAccountHandle = accountHandle ; for ( com.android.server.telecom.Call.Listener l : mListeners ) { l . onTargetPhoneAccountChanged ( this ) ; } configureIsWorkCall () ; } checkIfVideoCapable () ; }
public void testRendering800x480LocallyWith3Windows ( ) throws java.lang.Throwable { android.util.Log . i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution () ; if ( maxRes == null ) return; if ( ( ( maxRes.first ) >= NUMBER_CONSTANT ) && ( ( maxRes.second ) >= NUMBER_CONSTANT ) ) { runTestRenderingInSeparateThread ( NUMBER_CONSTANT , NUMBER_CONSTANT , false , true ) ; } else { android.util.Log . w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , STRING_CONSTANT ) ; } }
@ java.lang.Deprecated public java.lang.String getPluralFormatter ( com.ibm.icu.util.MeasureUnit unit , com.ibm.icu.text.MeasureFormat.FormatWidth width , int index ) { if ( index != ( com.ibm.icu.impl.StandardPlural.OTHER_INDEX ) ) { java.lang.String pattern = getFormatterOrNull ( unit , width , index ) ; if ( pattern != null ) { return pattern ; } } return getFormatter ( unit , width , StandardPlural.OTHER_INDEX ) ; }
private void resetNetworkModeToDefault () { mButtonPreferredNetworkMode . setValue ( java.lang.Integer . toString ( com.android.phone.Settings.preferredNetworkMode ) ) ; android.provider.Settings.System . putInt ( mPhone . getContext () . getContentResolver () , android.provider.Settings.System.PREFERRED_NETWORK_MODE , com.android.phone.Settings.preferredNetworkMode ) ; mPhone . setPreferredNetworkType ( com.android.phone.Settings.preferredNetworkMode , this . obtainMessage ( com.android.phone.Settings.MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE ) ) ; }
private static boolean nodeNeedsUniquePredecessor ( com.android.jack.ir.ast.cfg.JBasicBlock block ) { if ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) { return false ; } int countPredecessors = block . getPredecessorCount () ; int countSuccessors = block . getSuccessors () . size () ; boolean needsUniquePredecessor = ( countPredecessors > NUMBER_CONSTANT ) && ( countSuccessors > NUMBER_CONSTANT ) ; assert ( ! needsUniquePredecessor ) || ( ! ( ( block instanceof com.android.jack.ir.ast.cfg.JCaseBasicBlock ) || ( block instanceof com.android.jack.ir.ast.cfg.JCatchBasicBlock ) ) ) ; return needsUniquePredecessor ; }
void finishInstrumentationLocked ( com.android.server.am.ProcessRecord app , int resultCode , android.os.Bundle results ) { if ( ( app.instrumentationWatcher ) != null ) { try { app.instrumentationWatcher . instrumentationFinished ( app.instrumentationClass , resultCode , results ) ; } catch ( android.os.RemoteException e ) {} } app.instrumentationWatcher = null ; app.instrumentationClass = null ; app.instrumentationInfo = null ; app.instrumentationProfileFile = null ; app.instrumentationArguments = null ; forceStopPackageLocked ( app.processName , ( - NUMBER_CONSTANT ) , false , false , true , true ) ; }
@ java.lang.Override public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { java.lang.String tag = element . getTagName () ; java.lang.String correct = ( java.lang.Character . toLowerCase ( tag . charAt ( NUMBER_CONSTANT ) ) ) + ( tag . substring ( NUMBER_CONSTANT ) ) ; context . report ( com.android.tools.lint.checks.WrongCaseDetector.WRONG_CASE , element , context . getLocation ( element ) , java.lang.String . format ( STRING_CONSTANT , tag , correct ) ) ; }
@ java.lang.Override public void run ( org.eclipse.jface.action.IAction action ) { java.util.List < org.eclipse.core.resources.IProject > projects = com.android.ide.eclipse.adt.internal.lint.RunLintAction . getProjects ( mSelection , true ) ; if ( ! ( projects . isEmpty () ) ) { com.android.ide.eclipse.adt.internal.lint.EclipseLintRunner . startLint ( projects , null , null , false , true ) ; } else { org.eclipse.jface.dialogs.MessageDialog . openWarning ( com.android.ide.eclipse.adt.AdtPlugin . getDisplay () . getActiveShell () , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public static < O extends com.google.devtools.common.options.OptionsBase > com.google.devtools.common.options.Options < O > parse ( java.lang.Class < O > optionsClass , java.lang.String . . . args ) throws com.google.devtools.common.options.OptionsParsingException { com.google.devtools.common.options.OptionsParser parser = com.google.devtools.common.options.OptionsParser . newOptionsParser ( optionsClass ) ; parser . parse ( OptionPriority.COMMAND_LINE , null , java.util.Arrays . asList ( args ) ) ; java.util.List < java.lang.String > remainingArgs = parser . getResidue () ; return new com.google.devtools.common.options.Options ( parser . getOptions ( optionsClass ) , remainingArgs . toArray ( new java.lang.String [ NUMBER_CONSTANT ] ) ) ; }
@ org.junit.Test public void testHandleUserUnlockAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user1 = com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ; mWifiConfigManager . handleUserUnlock ( user1 ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile . class ) ) ; mContextConfigStoreMockOrder . verify ( mWifiConfigStore , never () ) . write ( anyBoolean () ) ; }
@ com.android.annotations.Nullable public static org.w3c.dom.Document parse ( @ com.android.annotations.NonNull byte [] data ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String xml = com.android.utils.PositionXmlParser . getXmlString ( data ) ; xml = com.android.utils.XmlUtils . stripBom ( xml ) ; return com.android.utils.PositionXmlParser . parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , true ) ; }
public void testTake ( ) throws java.lang.InterruptedException { java.util.concurrent.DelayQueue q = populatedQueue ( jsr166.SIZE ) ; for ( int i = NUMBER_CONSTANT ; i < ( SIZE ) ; ++ i ) { assertEquals ( new jsr166.DelayQueueTest.PDelay ( i ) , q . take () ) ; } }
@ java.lang.Override protected void onPause () { super . onPause () ; mDevicePreferenceMap . clear () ; mDeviceList . removeAll () ; mLocalManager . setForegroundActivity ( null ) ; mDevicePreferenceMap . clear () ; mDeviceList . removeAll () ; unregisterReceiver ( mReceiver ) ; mLocalManager . unregisterCallback ( this ) ; if ( ( mScreenType ) == ( com.android.settings.bluetooth.BluetoothSettings.SCREEN_TYPE_SETTINGS ) ) { mNamePreference . pause () ; mDiscoverableEnabler . pause () ; mEnabler . pause () ; } }
@ java.lang.Override public com.intellij.codeInspection.reference.RefParameter getParameterReference ( final com.intellij.codeInspection.reference.PsiParameter param , final int index ) { com.intellij.codeInspection.reference.RefJavaManagerImpl.LOG . assertTrue ( myRefManager . isValidPointForReference () , STRING_CONSTANT ) ; return myRefManager . getFromRefTableOrCache ( param , new com.intellij.codeInspection.reference.NullableFactory < com.intellij.codeInspection.reference.RefParameter > () { @ org.jetbrains.annotations.Nullable @ java.lang.Override public com.intellij.codeInspection.reference.RefParameter create () { com.intellij.codeInspection.reference.RefParameter ref = new com.intellij.codeInspection.reference.RefParameterImpl ( param , index , myRefManager ) ; ( ( com.intellij.codeInspection.reference.RefParameterImpl ) ( ref ) ) . initialize () ; return ref ; } } ) ; }
public void testFixBootpathExtWithAndroidJar () { java.lang.String [] [] testArray = new java.lang.String [] [] { null , new java.lang.String [] {} , new java.lang.String [] { STRING_CONSTANT } , null , new java.lang.String [] { STRING_CONSTANT } } ; java.lang.String [] [] expectedArray = new java.lang.String [] [] { null , new java.lang.String [] {} , null , null , new java.lang.String [] { STRING_CONSTANT } } ; assertEqualsArrays ( expectedArray , com.android.ide.eclipse.adt.internal.launch.JUnitLaunchConfigDelegate . fixBootpathExt ( testArray ) ) ; }
@ android.test.suitebuilder.annotation.SmallTest public void testLang ( ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; assertEquals ( STRING_CONSTANT , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; assertEquals ( null , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; assertEquals ( null , com.android.internal.telephony.MccTable . defaultLanguageForMcc ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public com.ibm.icu.util.TimeZone cloneAsThawed () { com.ibm.icu.impl.JavaTimeZone tz = ( ( com.ibm.icu.impl.JavaTimeZone ) ( super . cloneAsThawed () ) ) ; tz.javatz = ( ( java.util.TimeZone ) ( javatz . clone () ) ) ; tz.javacal = new java.util.GregorianCalendar ( javatz ) ; tz.isFrozen = false ; return tz ; }
@ com.android.annotations.Nullable public static java.lang.String getResourceArg ( @ com.android.annotations.NonNull org.w3c.dom.Node method , @ com.android.annotations.NonNull org.w3c.dom.Node call , int argIndex ) { assert ( call instanceof lombok.ast.MethodInvocation ) || ( call instanceof lombok.ast.ConstructorInvocation ) ; com.android.tools.lint.checks.StringFormatDetector.StringTracker tracker = new com.android.tools.lint.checks.StringFormatDetector.StringTracker ( null , method , call , argIndex ) ; method . accept ( tracker ) ; return tracker . getFormatStringName () ; }
public java.util.List < com.android.sdklib.devices.Device > getUserDevices () { synchronized ( this ) { if ( ( mUserDevices ) == null ) { mUserDevices = new java.util.ArrayList < com.android.sdklib.devices.Device > () ; try { java.io.File userDevicesFile = new java.io.File ( com.android.prefs.AndroidLocation . getFolder () , com.android.sdklib.SdkConstants.FN_DEVICES_XML ) ; mUserDevices . addAll ( loadDevices ( userDevicesFile ) ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { mLog . warning ( STRING_CONSTANT , e . getMessage () ) ; } } } return mUserDevices ; }
public static com.android.dialer.speeddial.SpeedDialCursor newInstance ( android.database.Cursor strequentCursor ) { if ( ( strequentCursor == null ) || ( ( strequentCursor . getCount () ) == NUMBER_CONSTANT ) ) { return null ; } com.android.dialer.speeddial.SpeedDialCursor cursor = new com.android.dialer.speeddial.SpeedDialCursor ( com.android.dialer.speeddial.SpeedDialCursor . buildCursors ( strequentCursor ) ) ; strequentCursor . close () ; return cursor ; }
@ java.lang.Override protected boolean isFilterStopped ( android.content.pm.PackageParser.ServiceIntentInfo filter , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager . exists ( userId ) ) ) return true ; android.content.pm.PackageParser.Package p = filter.service.owner ; if ( p != null ) { com.android.server.pm.PackageSetting ps = ( ( com.android.server.pm.PackageSetting ) ( p.mExtras ) ) ; if ( ps != null ) { return ( ( ( ps.pkgFlags ) & ( android.content.pm.ApplicationInfo.FLAG_SYSTEM ) ) == NUMBER_CONSTANT ) && ( ps . getStopped ( userId ) ) ; } } return false ; }
@ java.lang.Override public void srcToLib ( @ javax.annotation.Nonnull java.io.File out , boolean zipFiles , @ javax.annotation.Nonnull java.io.File . . . sources ) throws java.lang.Exception { setIncrementalFolder ( com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ) ; super . srcToLib ( out , zipFiles , sources ) ; touchSourceFile ( sources ) ; super . srcToLib ( out , zipFiles , sources ) ; }
public void testWifiFeature ( ) throws java.lang.Exception { if ( ! ( mPackageManager . hasSystemFeature ( PackageManager.FEATURE_WIFI ) ) ) { return; } boolean enabled = mWifiManager . isWifiEnabled () ; try { assertTrue ( mWifiManager . setWifiEnabled ( ( ! enabled ) ) ) ; } finally { mWifiManager . setWifiEnabled ( enabled ) ; } }
private vogar.tasks.Task newCreateDexJarTask ( vogar.Classpath classpath , java.io.File classpathElement , java.lang.String name , vogar.Action action , java.io.File localDex ) { vogar.tasks.Task dex ; if ( run.useJack ) { dex = new vogar.android.JackDexTask ( run , classpath , run.benchmark , name , classpathElement , action , localDex ) ; } else { dex = new vogar.android.DexTask ( run.androidSdk , classpath , run.benchmark , name , classpathElement , action , localDex ) ; } return dex ; }
private static void check ( long actual , long expected , java.lang.String msg ) { if ( actual != expected ) { java.lang.System.out . println ( ( ( ( ( msg + STRING_CONSTANT ) + actual ) + STRING_CONSTANT ) + expected ) ) ; java.lang.System . exit ( NUMBER_CONSTANT ) ; } }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JExpressionStatement makeResetCall ( com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( ( lockClass ) != null ) && ( ( resetClass ) != null ) ) && ( ( resetMethodId ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , resetClass , resetMethodId , JPrimitiveTypeEnum.VOID . getType () , false ) ) ; }
@ org.junit.Test public void testNativeParcelUnparcel () { android.net.UidRange original = new android.net.UidRange ( NUMBER_CONSTANT , java.lang.Integer.MAX_VALUE ) ; byte [] inParcel = android.net.UidRangeTest . marshall ( original ) ; byte [] outParcel = android.net.UidRangeTest . readAndWriteNative ( inParcel ) ; android.net.UidRange roundTrip = android.net.UidRangeTest . unmarshall ( outParcel ) ; org.junit.Assert . assertEquals ( original , roundTrip ) ; org.junit.Assert . assertArrayEquals ( inParcel , outParcel ) ; }
@ org.junit.Test @ org.junit.experimental.categories.Category ( value = com.android.jack.category.SlowTests . class ) public void compileFrameworks ( ) throws java.lang.Exception { java.io.File outDexFolder = com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain . class ) ; toolchain . setSourceLevel ( SourceLevel.JAVA_7 ) ; toolchain . addProperty ( DexFileWriter.DEX_WRITING_POLICY . getName () , STRING_CONSTANT ) ; toolchain . addToClasspath ( com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.CLASSPATH ) . srcToExe ( outDexFolder , false , com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.SOURCELIST ) ; }
public void testSubjectAltNameAndCn () { assertFalse ( verifyWithServerCertificate ( STRING_CONSTANT , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate () . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , STRING_CONSTANT ) ) ) ; assertFalse ( verifyWithServerCertificate ( STRING_CONSTANT , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( STRING_CONSTANT ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , STRING_CONSTANT ) ) ) ; assertTrue ( verifyWithServerCertificate ( STRING_CONSTANT , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate () . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , STRING_CONSTANT ) ) ) ; }
@ java.lang.Override public void onChange ( boolean selfChange ) { if ( isBleScanAlwaysAvailable () ) { return; } disableBleScanMode () ; clearBleApps () ; try { mBluetoothLock . readLock () . lock () ; if ( ( mBluetooth ) != null ) mBluetooth . onBrEdrDown () ; } catch ( android.os.RemoteException e ) { android.util.Slog . e ( com.android.server.BluetoothManagerService.TAG , STRING_CONSTANT , e ) ; } finally { mBluetoothLock . readLock () . unlock () ; } }
@ java.lang.Override public void verify ( java.security.PublicKey key ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , java.security.SignatureException , java.security.cert.CertificateException { if ( key instanceof org.conscrypt.OpenSSLKeyHolder ) { org.conscrypt.OpenSSLKey pkey = ( ( org.conscrypt.OpenSSLKeyHolder ) ( key ) ) . getOpenSSLKey () ; verifyOpenSSL ( pkey ) ; return; } verifyInternal ( key , ( ( java.lang.String ) ( null ) ) ) ; }
@ java.lang.Override public void enter () { super . enter () ; removeDeferredMessages ( com.android.bluetooth.hfp.HeadsetStateMachine.CONNECT_AUDIO ) ; if ( ! ( mDevice . equals ( mHeadsetService . getActiveDevice () ) ) ) { mHeadsetService . setActiveDevice ( mDevice ) ; } setAudioParameters () ; broadcastStateTransitions () ; }
@ java.lang.Override public java.util.stream.Sink < P_OUT > opWrapSink ( int flags , java.util.stream.Sink < P_OUT > sink ) { return new java.util.stream.Sink.ChainedReference < P_OUT , P_OUT > ( sink ) { @ java.lang.Override public void accept ( P_OUT u ) { action . accept ( u ) ; downstream . accept ( u ) ; } } ; }
@ java.lang.Override public void onFinished ( android.preference.Preference preference , boolean reading ) { if ( DBG ) dumpState () ; android.util.Log . i ( com.android.phone.TimeConsumingPreferenceActivity.LOG_TAG , ( ( ( STRING_CONSTANT + ( preference . getKey () ) ) + STRING_CONSTANT ) + reading ) ) ; mBusyList . remove ( preference . getKey () ) ; if ( mBusyList . isEmpty () ) { if ( reading ) { dismissDialogSafely ( com.android.phone.TimeConsumingPreferenceActivity.BUSY_READING_DIALOG ) ; } else { dismissDialogSafely ( com.android.phone.TimeConsumingPreferenceActivity.BUSY_SAVING_DIALOG ) ; } } preference . setEnabled ( true ) ; }
private void addRemoteAddOn ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay vendor , com.android.sdklib.repository.descriptors.IdDisplay name ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newAddon ( version , revision , vendor , name ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
public void test_EVP_get_digestbyname ( ) throws java.lang.Exception { assertTrue ( ( ( org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_digestbyname ( STRING_CONSTANT ) ) != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_digestbyname ( null ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} try { org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_digestbyname ( STRING_CONSTANT ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . EVP_get_digestbyname ( STRING_CONSTANT ) ; fail () ; } catch ( java.lang.RuntimeException expected ) {} }
public com.android.ide.common.resources.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget . getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes . exists () ) { com.android.ide.common.resources.FrameworkResources resources = new com.android.ide.common.resources.FrameworkResources () ; try { resources . loadResources ( frameworkRes ) ; resources . loadPublicResources ( frameworkRes , com.android.ide.eclipse.adt.AdtPlugin . getDefault () ) ; return resources ; } catch ( java.io.IOException e ) {} } return null ; }
@ java.lang.Override public void populateModuleExtraModels ( @ org.jetbrains.annotations.NotNull org.gradle.tooling.model.idea.IdeaModule gradleModule , @ org.jetbrains.annotations.NotNull com.intellij.openapi.externalSystem.model.DataNode < com.intellij.openapi.externalSystem.model.project.ModuleData > ideModule ) { org.jetbrains.plugins.gradle.model.ScalaModel scalaModel = resolverCtx . getExtraProject ( gradleModule , org.jetbrains.plugins.gradle.model.ScalaModel . class ) ; if ( scalaModel != null ) { org.jetbrains.plugins.gradle.model.data.ScalaModelData scalaModelData = org.jetbrains.plugins.gradle.integrations.scala.ScalaGradleProjectResolverExtension . create ( scalaModel ) ; ideModule . createChild ( ScalaModelData.KEY , scalaModelData ) ; } nextResolver . populateModuleExtraModels ( gradleModule , ideModule ) ; }
private boolean handleMenuItemSelected ( int id ) { if ( id == ( R.id.clear ) ) { handleClearItemSelected () ; } else if ( id == ( R.id.view ) ) { handleViewItemSelected () ; } else if ( id == ( R.id.export ) ) { handleExportItemSelected () ; } else { return false ; } return true ; }
private void checkSubroutine ( int offset ) { if ( ( subroutineStarts [ offset ] ) != ( proguard.optimize.peephole.BranchTargetFinder.UNKNOWN ) ) { currentSubroutineStart = subroutineStarts [ offset ] ; } else if ( ( currentSubroutineStart ) != ( proguard.optimize.peephole.BranchTargetFinder.UNKNOWN ) ) { subroutineStarts [ offset ] = currentSubroutineStart ; } }
public void testGetContentEncodingConnects ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . addHeader ( STRING_CONSTANT ) . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server . getUrl ( STRING_CONSTANT ) . openConnection () ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , connection . getContentEncoding () ) ; connection . disconnect () ; }
public void dataCallListChanged ( int indicationType , java.util.ArrayList < android.hardware.radio.V1_0.SetupDataCallResult > dcList ) { mRil . processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil . unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_DATA_CALL_LIST_CHANGED , dcList ) ; mRil.mDataCallListChangedRegistrants . notifyRegistrants ( new android.os.AsyncResult ( null , dcList , null ) ) ; }
@ java.lang.Override public void checkValidity () { super . checkValidity () ; if ( ( ! ( ( getLastElement () ) instanceof com.android.jack.ir.ast.cfg.JVariableAsgBlockElement ) ) || ( ! ( ( ( com.android.jack.ir.ast.cfg.JVariableAsgBlockElement ) ( getLastElement () ) ) . isCatchVariableAssignment () ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , STRING_CONSTANT ) ; } }
private void checkGraphic ( java.lang.String baseName , int minSdk , java.lang.String folderName , int expectedCount ) throws java.io.IOException { com.android.assetstudiolib.NotificationIconGenerator.NotificationOptions options = new com.android.assetstudiolib.NotificationIconGenerator.NotificationOptions () ; options.minSdk = minSdk ; com.android.assetstudiolib.NotificationIconGenerator generator = new com.android.assetstudiolib.NotificationIconGenerator () ; checkGraphic ( expectedCount , folderName , baseName , generator , options ) ; }
private void dispatchBookkeepingRequest ( int sequenceNumber , java.net.Socket socket ) throws java.lang.InterruptedException { requestCount . incrementAndGet () ; com.google.mockwebserver.RecordedRequest request = new com.google.mockwebserver.RecordedRequest ( null , null , null , ( - NUMBER_CONSTANT ) , null , sequenceNumber , socket ) ; dispatcher . dispatch ( request ) ; }
public void testSetSelection () { mGridView = new android.widget.GridView ( mActivity ) ; mGridView . setSelection ( NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , mGridView . getSelectedItemPosition () ) ; mGridView . setSelection ( ( - NUMBER_CONSTANT ) ) ; assertEquals ( ( - NUMBER_CONSTANT ) , mGridView . getSelectedItemPosition () ) ; mGridView . setSelection ( mGridView . getCount () ) ; assertEquals ( mGridView . getCount () , mGridView . getSelectedItemPosition () ) ; }
@ org.junit.Test @ org.junit.experimental.categories.Category ( value = com.android.jack.category.SlowTests . class ) public void compareExtStructure ( ) throws java.lang.Exception { com.android.jack.TestTools . checkStructure ( new com.android.jack.Options () , null , null , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST , false , true , NUMBER_CONSTANT , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [] ) ( null ) ) ) ; }
protected void finalize ( ) throws java.io.IOException { if ( ( fd ) != null ) { if ( ( ( fd ) == ( java.io.FileDescriptor.out ) ) || ( ( fd ) == ( java.io.FileDescriptor.err ) ) ) { flush () ; } else { close () ; } } }
public void test_run_for_SimpleTest2_limiting_to_1method_should_perform_test () { java.lang.Class < > target = vogar.target.junit3.SimpleTest2 . class ; java.util.List < vogar.target.junit.VogarTest > tests = vogar.target.junit.JUnitRunnerFactory . createVogarTests ( target , null , new java.lang.String [] { STRING_CONSTANT } ) ; vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , skipPastReference , testEnvironment , NUMBER_CONSTANT , tests ) ; runner . run ( null ) ; org.mockito.Mockito . verify ( monitor ) . outcomeStarted ( ( ( target . getName () ) + STRING_CONSTANT ) ) ; org.mockito.Mockito . verify ( monitor ) . outcomeFinished ( Result.SUCCESS ) ; }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAssertStatement assertStatement ) { com.android.jack.ir.ast.JExpression arg = assertStatement . getArg () ; com.android.jack.ir.ast.JExpression clonedArg ; if ( arg != null ) { clonedArg = cloneExpression ( arg ) ; } else { clonedArg = null ; } com.android.jack.ir.ast.JExpression clonedTestExpr = cloneExpression ( assertStatement . getTestExpr () ) ; statement = updateCatchBlockList ( new com.android.jack.ir.ast.JAssertStatement ( assertStatement . getSourceInfo () , clonedTestExpr , clonedArg ) , assertStatement ) ; return false ; }
private void answerIncomingCall ( int videoState ) { com.android.incallui.call.CallList callList = com.android.incallui.InCallPresenter . getInstance () . getCallList () ; if ( callList == null ) { com.android.incallui.StatusBarNotifier . clearAllCallNotifications () ; com.android.dialer.common.LogUtil . e ( STRING_CONSTANT , STRING_CONSTANT ) ; } else { com.android.incallui.call.DialerCall call = callList . getIncomingCall () ; if ( call != null ) { call . answer ( videoState ) ; com.android.incallui.InCallPresenter . getInstance () . showInCall ( false , false ) ; } } }
private static void onBatteryChargingChanged ( android.content.Intent intent ) { assert ( org.chromium.base.PowerMonitor.sInstance ) != null ; int chargePlug = intent . getIntExtra ( BatteryManager.EXTRA_PLUGGED , ( - NUMBER_CONSTANT ) ) ; org.chromium.base.PowerMonitor.sInstance.mIsBatteryPower = ( chargePlug != ( android.os.BatteryManager.BATTERY_PLUGGED_USB ) ) && ( chargePlug != ( android.os.BatteryManager.BATTERY_PLUGGED_AC ) ) ; org.chromium.base.PowerMonitor . nativeOnBatteryChargingChanged () ; }
public com.android.server.connectivity.DnsManager.PrivateDnsConfig updatePrivateDns ( android.net.Network network , com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg ) { android.util.Slog . w ( com.android.server.connectivity.DnsManager.TAG , ( ( ( ( STRING_CONSTANT + network ) + STRING_CONSTANT ) + cfg ) + STRING_CONSTANT ) ) ; return cfg != null ? mPrivateDnsMap . put ( network.netId , cfg ) : mPrivateDnsMap . remove ( network.netId ) ; }
public void setUiTTYMode ( android.content.Context context , int uiTtyMode , android.os.Message onComplete ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable () ; try { mImsServiceProxy . setUiTTYMode ( uiTtyMode , onComplete ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } if ( ! ( com.android.ims.ImsManager . getBooleanCarrierConfig ( context , CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) ) { setAdvanced4GMode ( ( ( uiTtyMode == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ) && ( com.android.ims.ImsManager . isEnhanced4gLteModeSettingEnabledByUser ( context ) ) ) ) ; } }
private void assertContentsMatches ( java.io.File expected , java.io.File actual ) throws java.io.IOException { byte [] actualBytes = libcore.io.IoUtils . readFileAsByteArray ( actual . getPath () ) ; byte [] expectedBytes = libcore.io.IoUtils . readFileAsByteArray ( expected . getPath () ) ; org.junit.Assert . assertArrayEquals ( expectedBytes , actualBytes ) ; }
private static void deleteRecord ( final int id ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . markDirty () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . deleteContentAndAttributes ( id ) ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . cleanRecord ( id ) ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords . addToFreeRecordsList ( id ) ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
@ java.lang.Override public int getOffset ( long when ) { long unix = when / NUMBER_CONSTANT ; int transition = java.util.Arrays . binarySearch ( mTransitions , unix ) ; if ( transition < NUMBER_CONSTANT ) { transition = ( ~ transition ) - NUMBER_CONSTANT ; if ( transition < NUMBER_CONSTANT ) { return mEarliestRawOffset ; } } return ( mRawOffset ) + ( ( mOffsets [ ( ( mTypes [ transition ] ) & NUMBER_CONSTANT ) ] ) * NUMBER_CONSTANT ) ; }
private synchronized void onIntrData ( byte reportId , byte [] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( STRING_CONSTANT + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer . wrap ( data ) ; android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.hid.HidDevService.MESSAGE_INTR_DATA ) ; msg.arg1 = reportId ; msg.obj = bb ; mHandler . sendMessage ( msg ) ; }
private android.graphics.Rect getVisibleBounds ( android.view.accessibility.AccessibilityNodeInfo node ) { if ( ! ( visible ) ) { return new android.graphics.Rect () ; } android.graphics.Rect visibleBounds = getBounds () ; io.appium.droiddriver.uiautomation.UiAutomationElement parent = getParent () ; android.graphics.Rect parentBounds ; while ( parent != null ) { parentBounds = parent . getBounds () ; if ( ! ( visibleBounds . intersect ( parentBounds ) ) ) { return new android.graphics.Rect () ; } parent = parent . getParent () ; } return visibleBounds ; }
@ org.junit.Test @ junitparams.Parameters public void testVarargsCustomClass ( junitparams.internal.TestMethodTest.Pair . . . pairs ) { assertEquals ( pairs [ NUMBER_CONSTANT ] . x , pairs [ NUMBER_CONSTANT ] . y ) ; assertEquals ( pairs [ NUMBER_CONSTANT ] . x , pairs [ NUMBER_CONSTANT ] . y ) ; assertTrue ( ( ( pairs [ NUMBER_CONSTANT ] . x ) != ( pairs [ NUMBER_CONSTANT ] . y ) ) ) ; }
private static void assertValues ( android.net.NetworkStats.Entry entry , long rxBytes , long rxPackets , long txBytes , long txPackets , long operations ) { org.junit.Assert . assertEquals ( rxBytes , entry.rxBytes ) ; org.junit.Assert . assertEquals ( rxPackets , entry.rxPackets ) ; org.junit.Assert . assertEquals ( txBytes , entry.txBytes ) ; org.junit.Assert . assertEquals ( txPackets , entry.txPackets ) ; org.junit.Assert . assertEquals ( operations , entry.operations ) ; }
@ com.android.annotations.NonNull public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( boolean emulateStudio_1_0 , java.lang.String . . . tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection () ; try { executeBuild ( java.util.Collections . < java.lang.String > emptyList () , connection , tasks , com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.SUCCESS ) ; return buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction () , emulateStudio_1_0 , null , null ) ; } finally { connection . close () ; } }
private static java.io.File getWrittenResources ( ) throws MergeConsumer.ConsumerException , com.android.ide.common.res2.DuplicateDataException , java.io.IOException { com.android.ide.common.res2.ResourceMerger resourceMerger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger () ; java.io.File folder = com.google.common.io.Files . createTempDir () ; com.android.ide.common.res2.MergedResourceWriter writer = new com.android.ide.common.res2.MergedResourceWriter ( folder , null ) ; resourceMerger . mergeData ( writer , false ) ; return folder ; }
public void testNewInstanceString_ByteArrayIntIntStringConstructor () { runTestNewInstanceString ( STRING_CONSTANT , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider () { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature () ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value stringCharsetValue = getStaticFieldValue ( debuggeeClassId , STRING_CONSTANT ) ; constructorArguments . add ( byteArrayValue ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; constructorArguments . add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( NUMBER_CONSTANT ) ) ; constructorArguments . add ( stringCharsetValue ) ; } } ) ; }
@ java.lang.Override public void run () { if ( ( mRecipientsEditor . getRecipientCount () ) == NUMBER_CONSTANT ) { final android.view.inputmethod.InputMethodManager inputManager = ( ( android.view.inputmethod.InputMethodManager ) ( getSystemService ( Context.INPUT_METHOD_SERVICE ) ) ) ; if ( ( inputManager == null ) || ( ! ( inputManager . isFullscreenMode () ) ) ) { mTextEditor . requestFocus () ; } } }
public void testAvailableEmptySource ( ) throws java.lang.Exception { byte [] deflated = new byte [] { NUMBER_CONSTANT , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; try ( java.io.InputStream in = new java.util.zip.InflaterInputStream ( new java.io.ByteArrayInputStream ( deflated ) ) ) { assertEquals ( ( - NUMBER_CONSTANT ) , in . read () ) ; assertEquals ( ( - NUMBER_CONSTANT ) , in . read () ) ; assertEquals ( NUMBER_CONSTANT , in . available () ) ; } }
public static void initialize ( @ com.android.annotations.NonNull com.android.utils.ILogger logger , @ com.android.annotations.NonNull java.io.File out , @ com.android.annotations.NonNull java.util.List < com.android.builder.profile.Recorder.Property > properties ) throws java.io.IOException { synchronized ( com.android.builder.profile.ProcessRecorderFactory.LOCK ) { if ( ( com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . isInitialized () ) || ( ! ( com.android.builder.profile.ProcessRecorderFactory . isEnabled () ) ) ) { return; } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . setLogger ( logger ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . setOutputFile ( out ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . setRecordWriter ( new com.android.builder.profile.ProcessRecorder.JsonRecordWriter ( new java.io.FileWriter ( out ) ) ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE . get () ; com.android.builder.profile.ProcessRecorderFactory . publishInitialRecords ( properties ) ; } }
private java.util.Set < java.lang.String > getPubkeyBlacklist ( java.lang.String path ) throws java.io.IOException { com.android.org.bouncycastle.jce.provider.CertBlacklist bl = new com.android.org.bouncycastle.jce.provider.CertBlacklist ( path , com.android.org.bouncycastle.jce.provider.CertBlacklist.DEFAULT_SERIAL_BLACKLIST_PATH ) ; java.util.Set < byte [] > arr = bl.pubkeyBlacklist ; java.util.Set < java.lang.String > results = new java.util.HashSet < java.lang.String > () ; for ( byte [] value : arr ) { results . add ( new java.lang.String ( value ) ) ; } return results ; }
@ java.lang.Override public synchronized void reset ( ) throws java.io.IOException { if ( ( buf ) == null ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } if ( ( markpos ) == ( - NUMBER_CONSTANT ) ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } pos = markpos ; }
void onTargetPackageAdded ( @ android.annotation.NonNull final java.lang.String packageName , final int userId ) { if ( com.android.server.om.OverlayManagerService.DEBUG ) { android.util.Slog . d ( com.android.server.om.OverlayManagerService.TAG , ( ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) + userId ) ) ; } final android.content.pm.PackageInfo targetPackage = mPackageManager . getPackageInfo ( packageName , userId ) ; if ( updateAllOverlaysForTarget ( packageName , userId , targetPackage ) ) { mListener . onOverlaysChanged ( packageName , userId ) ; } }
public byte [] generateCertificateSignature ( byte [] hash ) throws java.io.IOException { try { if ( org.bouncycastle.crypto.tls.TlsUtils . isTLSv12 ( context ) ) { return signer . generateRawSignature ( signatureAndHashAlgorithm , privateKey , hash ) ; } else { return signer . generateRawSignature ( privateKey , hash ) ; } } catch ( org.bouncycastle.crypto.CryptoException e ) { throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.internal_error , e ) ; } }
static void deleteRecordRecursively ( int id ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . incModCount ( id ) ; if ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.lazyVfsDataCleaning ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . markAsDeletedRecursively ( id ) ; } else { com.intellij.openapi.vfs.newvfs.persistent.FSRecords . doDeleteRecursively ( id ) ; } } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
public int removeRights ( java.lang.String path ) { if ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return _removeRights ( mUniqueId , path ) ; }
@ java.lang.Override public synchronized void write ( int b ) throws java.io.IOException { buffer . put ( ( ( byte ) ( b ) ) ) ; if ( b == CHAR_CONS ) { synchronized ( out ) { try { com.android.jack.server.type.CommandOutPrintStream.CommandOutOutputStream . writeBuffer ( prefix , out ) ; buffer . flip () ; com.android.jack.server.type.CommandOutPrintStream.CommandOutOutputStream . writeBuffer ( buffer , out ) ; } finally { buffer . clear () ; } } } if ( ( buffer . remaining () ) == NUMBER_CONSTANT ) { write ( CHAR_CONS ) ; } }
@ java.lang.Override public void enter () { if ( com.android.internal.telephony.dataconnection.DataConnection.DBG ) log ( STRING_CONSTANT ) ; mPhone . getServiceStateTracker () . registerForDataRegStateOrRatChanged ( getHandler () , com.android.internal.telephony.dataconnection.DataConnection.EVENT_DATA_CONNECTION_DRS_OR_RAT_CHANGED , null ) ; mPhone . getServiceStateTracker () . registerForDataRoamingOn ( getHandler () , com.android.internal.telephony.dataconnection.DataConnection.EVENT_DATA_CONNECTION_ROAM_ON , null ) ; mPhone . getServiceStateTracker () . registerForDataRoamingOff ( getHandler () , com.android.internal.telephony.dataconnection.DataConnection.EVENT_DATA_CONNECTION_ROAM_OFF , null , true ) ; mDcController . addDc ( this ) ; }
@ org.junit.Test public void testCompile022 ( ) throws java.lang.Exception { java.lang.String packageName = STRING_CONSTANT ; java.lang.String classPrefix = ( packageName . replace ( CHAR_CONS , CHAR_CONS ) ) + STRING_CONSTANT ; java.util.Map < java.lang.String , com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo > input = com.google.common.collect.Maps . newHashMap () ; input . put ( STRING_CONSTANT , new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo ( true ) . specifyInfo ( STRING_CONSTANT , true ) ) ; checkCompiledCode ( packageName , input ) ; }
private static void encodeSize ( com.android.jack.dx.util.AnnotatedOutput out , java.lang.String label , int size ) { if ( out . annotates () ) { out . annotate ( java.lang.String . format ( STRING_CONSTANT , ( label + STRING_CONSTANT ) , java.lang.Integer . valueOf ( size ) ) ) ; } out . writeUleb128 ( size ) ; }
public boolean enableNoAutoConnect () { if ( isEnabled () ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log . d ( android.bluetooth.BluetoothAdapter.TAG , STRING_CONSTANT ) ; return true ; } try { return mManagerService . enableNoAutoConnect ( android.app.ActivityThread . currentPackageName () ) ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothAdapter.TAG , STRING_CONSTANT , e ) ; } return false ; }
public void test_getDoInput ( ) throws java.io.IOException { assertTrue ( STRING_CONSTANT , uc . getDoInput () ) ; fileURLCon . setDoInput ( true ) ; assertTrue ( STRING_CONSTANT , fileURLCon . getDoInput () ) ; uc2 . setDoInput ( false ) ; assertFalse ( STRING_CONSTANT , uc2 . getDoInput () ) ; fileURLCon . connect () ; fileURLCon . getInputStream () . close () ; uc2 . connect () ; try { uc2 . getInputStream () ; fail () ; } catch ( java.lang.Throwable expected ) {} }
public boolean isCallerActiveScorer ( int callingUid ) { android.net.NetworkScorerAppManager.NetworkScorerAppData defaultApp = getActiveScorer () ; if ( defaultApp == null ) { return false ; } if ( callingUid != ( defaultApp.mPackageUid ) ) { return false ; } return ( mContext . checkCallingPermission ( Manifest.permission.SCORE_NETWORKS ) ) == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ; }
@ java.lang.Override public void testEnded ( com.android.ddmlib.testrunner.TestIdentifier test , java.util.Map < java.lang.String , java.lang.String > testMetrics ) { if ( ! ( mFailedTests . remove ( test ) ) ) { if ( ( mLogger ) != null ) { mLogger . info ( STRING_CONSTANT , test . getClassName () , test . getTestName () , mDeviceName ) ; } } super . testEnded ( test , testMetrics ) ; }
public void testGetAndSetDefaultUncaughtExceptionHandler () { java.lang.Thread.UncaughtExceptionHandler defaultHandler = java.lang.Thread . getDefaultUncaughtExceptionHandler () ; jsr166.ThreadTest.MyHandler eh = new jsr166.ThreadTest.MyHandler () ; try { java.lang.Thread . setDefaultUncaughtExceptionHandler ( eh ) ; try { assertSame ( eh , java.lang.Thread . getDefaultUncaughtExceptionHandler () ) ; } finally { java.lang.Thread . setDefaultUncaughtExceptionHandler ( defaultHandler ) ; } } catch ( java.lang.SecurityException ok ) { assertNotNull ( java.lang.System . getSecurityManager () ) ; } assertSame ( defaultHandler , java.lang.Thread . getDefaultUncaughtExceptionHandler () ) ; }
private void showSdkManagerWindow () { try { com.android.sdkuilib.internal.widgets.MessageBoxLog errorLogger = new com.android.sdkuilib.internal.widgets.MessageBoxLog ( STRING_CONSTANT , org.eclipse.swt.widgets.Display . getCurrent () , true ) ; com.android.sdkuilib.repository.SdkUpdaterWindow window = new com.android.sdkuilib.repository.SdkUpdaterWindow ( null , errorLogger , mOsSdkFolder , com.android.sdkuilib.repository.SdkUpdaterWindow.SdkInvocationContext.STANDALONE ) ; window . open () ; errorLogger . displayResult ( true ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } }
@ javax.annotation.CheckForNull private com.android.jack.ir.ast.JMethod findMethod ( @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface enclosingType ) { com.android.jack.ir.ast.JMethod method = null ; java.lang.String searchedSignature = ( new java.lang.String ( binding.selector ) ) + ( new java.lang.String ( binding . signature () ) ) ; for ( com.android.jack.ir.ast.JMethod existing : enclosingType . getMethods () ) { if ( equals ( binding , searchedSignature , existing ) ) { method = existing ; break; } } return method ; }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testProcessChldAddHeldToConf ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall () ; removeCallCapability ( activeCall , Connection.CAPABILITY_MERGE_CONFERENCE ) ; com.android.server.telecom.Call conferenceableCall = org.mockito.Mockito . mock ( com.android.server.telecom.Call . class ) ; java.util.ArrayList < com.android.server.telecom.Call > conferenceableCalls = new java.util.ArrayList <> () ; conferenceableCalls . add ( conferenceableCall ) ; org.mockito.Mockito . when ( activeCall . getConferenceableCalls () ) . thenReturn ( conferenceableCalls ) ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_ADDHELDTOCONF ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . conference ( activeCall , conferenceableCall ) ; org.junit.Assert . assertEquals ( didProcess , true ) ; }
@ org.junit.Test public void testStateTransitionFromConnectingToConnected () { android.util.Log . i ( com.android.bluetooth.mapclient.MapClientStateMachineTest.TAG , STRING_CONSTANT ) ; setupSdpRecordReceipt () ; android.os.Message msg = android.os.Message . obtain ( mHandler , MceStateMachine.MSG_MAS_CONNECTED ) ; mMceStateMachine . getCurrentState () . processMessage ( msg ) ; try { mLock . await () ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } org.junit.Assert . assertEquals ( BluetoothProfile.STATE_CONNECTED , mMceStateMachine . getState () ) ; }
private java.io.File getWrittenResources ( ) throws com.android.ide.common.res2.MergingException , java.io.IOException { com.android.ide.common.res2.ResourceMerger resourceMerger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; java.io.File folder = com.google.common.io.Files . createTempDir () ; com.android.ide.common.res2.MergedResourceWriter writer = new com.android.ide.common.res2.MergedResourceWriter ( folder , mPngCruncher , false , false ) ; resourceMerger . mergeData ( writer , false ) ; return folder ; }
private void responseIccIo ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , com.android.internal.telephony.V1_0.IccIoResult result ) { com.android.internal.telephony.RILRequest rr = mRil . processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.uicc.IccIoResult ret = new com.android.internal.telephony.uicc.IccIoResult ( result.sw1 , result.sw2 , result.simResponse ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse . sendMessageResponse ( rr.mResult , ret ) ; } mRil . processResponseDone ( rr , responseInfo , ret ) ; } }
@ java.lang.Override public int onConnect ( final javax.obex.HeaderSet request , javax.obex.HeaderSet reply ) { if ( com.android.bluetooth.mapclient.MnsObexServer.VDBG ) { android.util.Log . v ( com.android.bluetooth.mapclient.MnsObexServer.TAG , STRING_CONSTANT ) ; } try { byte [] uuid = ( ( byte [] ) ( request . getHeader ( HeaderSet.TARGET ) ) ) ; if ( ! ( java.util.Arrays . equals ( uuid , com.android.bluetooth.mapclient.MnsObexServer.MNS_TARGET ) ) ) { return javax.obex.ResponseCodes.OBEX_HTTP_NOT_ACCEPTABLE ; } } catch ( java.io.IOException e ) { return javax.obex.ResponseCodes.OBEX_HTTP_INTERNAL_ERROR ; } reply . setHeader ( HeaderSet.WHO , com.android.bluetooth.mapclient.MnsObexServer.MNS_TARGET ) ; return javax.obex.ResponseCodes.OBEX_HTTP_OK ; }
public void testGetResourceAsStream1 ( ) throws java.io.IOException { java.lang.Class clazz = getClass () ; java.io.InputStream stream = clazz . getResourceAsStream ( STRING_CONSTANT ) ; assertNotNull ( stream ) ; byte [] buffer = new byte [ NUMBER_CONSTANT ] ; int length = stream . read ( buffer ) ; java.lang.String s = new java.lang.String ( buffer , NUMBER_CONSTANT , length ) ; assertEquals ( STRING_CONSTANT , s ) ; stream . close () ; }
private void changeHeadUpDisplayState () { android.content.res.Configuration config = getResources () . getConfiguration () ; if ( ( ( config.orientation ) == ( android.content.res.Configuration.ORIENTATION_LANDSCAPE ) ) && ( ! ( mPausing ) ) ) { if ( ( mGLRootView ) == null ) attachHeadUpDisplay () ; } else if ( ( mGLRootView ) != null ) { detachHeadUpDisplay () ; } }
private void writeDebugInformation ( @ javax.annotation.Nonnull com.android.jill.frontend.java.Variable v ) throws java.io.IOException { if ( ! ( v . hasLocalIndex () ) ) { return; } org.objectweb.asm.tree.LocalVariableNode lvn = getLocalVariableNode ( v . getLocalIndex () ) ; if ( lvn != null ) { writer . writeKeyword ( Token.DEBUG_VARIABLE_INFORMATION ) ; writer . writeOpen () ; writer . writeString ( lvn.name ) ; writer . writeId ( lvn.desc ) ; writer . writeString ( lvn.signature ) ; writer . writeClose () ; } }
public static boolean isFileBasedResourceType ( @ com.android.annotations.NonNull com.android.resources.ResourceType type ) { java.util.List < com.android.resources.ResourceFolderType > folderTypes = com.android.resources.FolderTypeRelationship . getRelatedFolders ( type ) ; for ( com.android.resources.ResourceFolderType folderType : folderTypes ) { if ( folderType != ( com.android.resources.ResourceFolderType.VALUES ) ) { return type != ( com.android.resources.ResourceType.ID ) ; } } return false ; }
public void close () { synchronized ( this ) { if ( ! ( closing ) ) { closing = true ; try { if ( ( textOut ) != null ) { textOut . close () ; } out . close () ; } catch ( java.io.IOException x ) { trouble = true ; } textOut = null ; charOut = null ; out = null ; } } }
@ java.lang.Override public java.lang.String getExemplarLocationName ( java.lang.String tzID ) { if ( ( tzID == null ) || ( ( tzID . length () ) == NUMBER_CONSTANT ) ) { return null ; } java.lang.String locName = loadTimeZoneNames ( tzID ) . getName ( NameType.EXEMPLAR_LOCATION ) ; return locName ; }
@ java.lang.Override public boolean processMessage ( android.os.Message message ) { logStateAndMessage ( message , this ) ; switch ( message.what ) { case com.android.server.wifi.WifiStateMachine.CMD_AUTO_CONNECT : case com.android.server.wifi.WifiStateMachine.CMD_AUTO_ROAM : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DISCARD ; break; case android.net.wifi.WifiManager.SAVE_NETWORK : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break; case WifiMonitor.NETWORK_DISCONNECTION_EVENT : reportConnectionAttemptEnd ( WifiMetrics.ConnectionEvent.FAILURE_NETWORK_DISCONNECTION , WifiMetricsProto.ConnectionEvent.HLF_NONE ) ; return NOT_HANDLED ; case com.android.server.wifi.WifiStateMachine.CMD_SET_HIGH_PERF_MODE : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break; case com.android.server.wifi.WifiStateMachine.CMD_START_SCAN : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break; default: return NOT_HANDLED ; } return HANDLED ; }
public void testSdkAnnotations ( ) throws java.lang.Exception { com.android.tools.lint.ExternalAnnotationRepository manager = getSdkAnnotations () ; if ( manager == null ) { return; } com.android.tools.lint.client.api.JavaParser.ResolvedMethod method = com.android.tools.lint.ExternalAnnotationRepositoryTest . createMethod ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertNotNull ( manager . getAnnotation ( method , NUMBER_CONSTANT , STRING_CONSTANT ) ) ; }
private void verifyLteInfo ( android.telephony.CellInfoLte lte ) { verifyRssiDbm ( lte . getCellSignalStrength () . getDbm () ) ; int pci = lte . getCellIdentity () . getPci () ; assertTrue ( STRING_CONSTANT , ( ( pci >= NUMBER_CONSTANT ) && ( pci <= NUMBER_CONSTANT ) ) ) ; }
private java.lang.String getOwnerPhoneNumberVcardFromProfile ( final boolean vcardType21 , final byte [] filter ) { int vcardType ; if ( vcardType21 ) { vcardType = com.android.vcard.VCardConfig.VCARD_TYPE_V21_GENERIC ; } else { vcardType = com.android.vcard.VCardConfig.VCARD_TYPE_V30_GENERIC ; } if ( ! ( com.android.bluetooth.pbap.BluetoothPbapConfig . includePhotosInVcard () ) ) { vcardType |= com.android.vcard.VCardConfig.FLAG_REFRAIN_IMAGE_EXPORT ; } return com.android.bluetooth.pbap.BluetoothPbapUtils . createProfileVCard ( mContext , vcardType , filter ) ; }
public void clearUidForwarding ( java.lang.String interfaze , int uidStart , int uidEnd , boolean forwardDns ) { try { mNetd . clearUidRangeRoute ( interfaze , uidStart , uidEnd ) ; if ( forwardDns ) mNetd . clearDnsInterfaceForUidRange ( interfaze , uidStart , uidEnd ) ; } catch ( android.os.RemoteException e ) {} }
@ org.junit.Test public void test_create_BIO_OutputStream ( ) throws java.lang.Exception { byte [] actual = STRING_CONSTANT . getBytes () ; java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream () ; long ctx = org.conscrypt.NativeCrypto . create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto . BIO_write ( ctx , actual , NUMBER_CONSTANT , actual.length ) ; org.junit.Assert . assertEquals ( actual.length , os . size () ) ; org.junit.Assert . assertEquals ( java.util.Arrays . toString ( actual ) , java.util.Arrays . toString ( os . toByteArray () ) ) ; } finally { org.conscrypt.NativeCrypto . BIO_free_all ( ctx ) ; } }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , boolean compareInstructionNumber , float instructionNumberTolerance , @ javax.annotation.CheckForNull com.android.jack.JarJarRules jarjarRules , @ javax.annotation.CheckForNull com.android.jack.ProguardFlags [] proguardFlagFiles ) throws java.lang.Exception { com.android.jack.TestTools . checkStructure ( new com.android.jack.Options () , classpath , null , fileOrSourceList , withDebugInfo , compareInstructionNumber , instructionNumberTolerance , jarjarRules , proguardFlagFiles ) ; }
@ com.android.annotations.Nullable public com.android.sdklib.BuildToolInfo getLatestBuildTool () { if ( mBuildTools . isEmpty () ) { return null ; } com.android.sdklib.repository.FullRevision max = null ; for ( com.android.sdklib.repository.FullRevision r : mBuildTools . keySet () ) { if ( ( max == null ) || ( ( r . compareTo ( max ) ) > NUMBER_CONSTANT ) ) { max = r ; } } return mBuildTools . get ( max ) ; }
public java.lang.String getDeviceSvnUsingSubId ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } return phone . getDeviceSvn () ; } else { loge ( STRING_CONSTANT ) ; return null ; } }
public void testStatements ( ) throws java.lang.Exception { checkStatements ( NUMBER_CONSTANT , ( STRING_CONSTANT + ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) , STRING_CONSTANT ) ; checkStatements ( STRING_CONSTANT , ( STRING_CONSTANT + ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) , STRING_CONSTANT ) ; }
@ com.android.annotations.NonNull public com.android.sdklib.IAndroidTarget [] getTargets () { if ( ( mTargets ) == null ) { java.io.File sdkHome = getSdkHome () ; if ( sdkHome != null ) { com.android.utils.StdLogger log = new com.android.utils.StdLogger ( com.android.utils.StdLogger.Level.WARNING ) ; com.android.sdklib.SdkManager manager = com.android.sdklib.SdkManager . createManager ( sdkHome . getPath () , log ) ; if ( manager != null ) { mTargets = manager . getTargets () ; } else { mTargets = new com.android.sdklib.IAndroidTarget [ NUMBER_CONSTANT ] ; } } else { mTargets = new com.android.sdklib.IAndroidTarget [ NUMBER_CONSTANT ] ; } } return mTargets ; }
static java.lang.String getResourceForFirstArg ( org.w3c.dom.Node method , org.w3c.dom.Node call ) { assert ( call instanceof lombok.ast.MethodInvocation ) || ( call instanceof lombok.ast.ConstructorInvocation ) ; com.android.tools.lint.checks.StringFormatDetector.StringTracker tracker = new com.android.tools.lint.checks.StringFormatDetector.StringTracker ( method , call , NUMBER_CONSTANT ) ; method . accept ( tracker ) ; java.lang.String name = tracker . getFormatStringName () ; return name ; }
public final com.android.tools.perflib.heap.Instance findReference ( long id ) { for ( int i = NUMBER_CONSTANT ; i < ( mHeaps . size () ) ; i ++ ) { com.android.tools.perflib.heap.Instance instance = mHeaps . get ( i ) . getInstance ( id ) ; if ( instance != null ) { return instance ; } } return findClass ( id ) ; }
public static final java.lang.Runnable zygoteInit ( int targetSdkVersion , java.lang.String [] argv , java.lang.ClassLoader classLoader ) { if ( RuntimeInit.DEBUG ) { android.util.Slog . d ( RuntimeInit.TAG , STRING_CONSTANT ) ; } android.os.Trace . traceBegin ( Trace.TRACE_TAG_ACTIVITY_MANAGER , STRING_CONSTANT ) ; com.android.internal.os.RuntimeInit . redirectLogStreams () ; com.android.internal.os.RuntimeInit . commonInit () ; com.android.internal.os.ZygoteInit . nativeZygoteInit () ; return com.android.internal.os.RuntimeInit . applicationInit ( targetSdkVersion , argv , classLoader ) ; }
public void testKernelDomain ( ) throws java.io.FileNotFoundException { java.lang.String domain = STRING_CONSTANT ; java.util.List < android.security.cts.SELinuxDomainTest.ProcessDetails > procs = android.security.cts.SELinuxDomainTest.ProcessDetails . getProcessMap () . get ( domain ) ; assertNotNull ( procs ) ; for ( android.security.cts.SELinuxDomainTest.ProcessDetails p : procs ) { assertTrue ( ( ( STRING_CONSTANT + p ) + STRING_CONSTANT ) , p . isKernel () ) ; } }
@ org.junit.Test public void testGetCurrentNetworkWpsNfcConfigurationToken ( ) throws java.lang.Exception { java.lang.String token = STRING_CONSTANT ; org.mockito.Mockito . when ( mSupplicantStaNetworkMock . getWpsNfcConfigurationToken () ) . thenReturn ( token ) ; executeAndValidateInitializationSequence () ; assertTrue ( ( ( mDut . getCurrentNetworkWpsNfcConfigurationToken () ) == null ) ) ; org.mockito.Mockito . verify ( mSupplicantStaNetworkMock , org.mockito.Mockito . never () ) . getWpsNfcConfigurationToken () ; executeAndValidateConnectSequence ( NUMBER_CONSTANT , false ) ; assertEquals ( token , mDut . getCurrentNetworkWpsNfcConfigurationToken () ) ; org.mockito.Mockito . verify ( mSupplicantStaNetworkMock ) . getWpsNfcConfigurationToken () ; }
public void initialize ( java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException { if ( ! ( params instanceof java.security.spec.RSAKeyGenParameterSpec ) ) { throw new java.security.InvalidAlgorithmParameterException ( STRING_CONSTANT ) ; } java.security.spec.RSAKeyGenParameterSpec rsaParams = ( ( java.security.spec.RSAKeyGenParameterSpec ) ( params ) ) ; param = new org.bouncycastle.crypto.params.RSAKeyGenerationParameters ( rsaParams . getPublicExponent () , ( random != null ? random : new java.security.SecureRandom () ) , rsaParams . getKeysize () , org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi.defaultTests ) ; engine . init ( param ) ; }
@ java.lang.Override public void openLibrary ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.roots.libraries.Library library ) { final com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable config = com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable . getInstance ( myProject ) ; com.intellij.openapi.options.ShowSettingsUtil . getInstance () . editConfigurable ( myProject , config , new java.lang.Runnable () { @ java.lang.Override public void run () { config . selectProjectOrGlobalLibrary ( library , true ) ; } } ) ; }
private void waitForBootCompleted ( ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { if ( isBootCompleted () ) { com.android.ddmlib.Log . d ( android.appsecurity.cts.DirectBootHostTest.TAG , STRING_CONSTANT ) ; java.lang.Thread . sleep ( ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) ; return; } com.android.ddmlib.Log . d ( android.appsecurity.cts.DirectBootHostTest.TAG , STRING_CONSTANT ) ; java.lang.Thread . sleep ( NUMBER_CONSTANT ) ; } throw new java.lang.AssertionError ( STRING_CONSTANT ) ; }
public void run () { boolean pipSupportDisabled = false ; try { mActivity . enterPictureInPictureMode () ; } catch ( java.lang.IllegalStateException e ) { pipSupportDisabled = true ; } catch ( java.lang.IllegalArgumentException e ) { pipSupportDisabled = true ; } assertTrue ( pipSupportDisabled ) ; assertFalse ( mActivity . isInPictureInPictureMode () ) ; }
@ org.junit.Test public void testSetLogLevel ( ) throws java.lang.Exception { org.mockito.Mockito . when ( mISupplicantMock . setDebugParams ( org.mockito.Matchers . anyInt () , org.mockito.Matchers . anyBoolean () , org.mockito.Matchers . anyBoolean () ) ) . thenReturn ( mStatusSuccess ) ; assertFalse ( mDut . setLogLevel ( true ) ) ; executeAndValidateInitializationSequence () ; assertTrue ( mDut . setLogLevel ( true ) ) ; org.mockito.Mockito . verify ( mISupplicantMock ) . setDebugParams ( org.mockito.Matchers . eq ( ISupplicant.DebugLevel.DEBUG ) , org.mockito.Matchers . eq ( false ) , org.mockito.Matchers . eq ( false ) ) ; }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests . assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
private static com.android.jack.ir.ast.JClass getClassOrReportFailure ( com.android.jack.lookup.JNodeLookup lookup , java.lang.String name , java.lang.String prop ) { try { return lookup . getClass ( name ) ; } catch ( java.lang.Throwable e ) { com.android.jack.Jack . getSession () . getReporter () . report ( Severity.FATAL , new com.android.jack.transformations.ast.BoostLockedRegionPriority.BadBoostLockedRegionPriorityConfigurationException ( prop , e ) ) ; com.android.jack.Jack . getSession () . abortEventually () ; return null ; } }
private void updateConnectionServiceFocus ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connSvrFocus ) { if ( ! ( java.util.Objects . equals ( mCurrentFocus , connSvrFocus ) ) ) { if ( connSvrFocus != null ) { connSvrFocus . setConnectionServiceFocusListener ( mConnectionServiceFocusListener ) ; connSvrFocus . connectionServiceFocusGained () ; } mCurrentFocus = connSvrFocus ; } }
@ org.junit.Ignore ( value = STRING_CONSTANT ) @ org.junit.Test @ com.android.devtools.systemimage.uitest.annotations.TestInfo ( id = STRING_CONSTANT ) public void activateDeactivatePolicy ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework . getInstrumentation () ; com.android.devtools.systemimage.uitest.utils.SettingsUtil . activate ( instrumentation , STRING_CONSTANT ) ; assertTrue ( checkStatusOfPolicy ( instrumentation , STRING_CONSTANT ) ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil . deactivate ( instrumentation , STRING_CONSTANT ) ; assertFalse ( checkStatusOfPolicy ( instrumentation , STRING_CONSTANT ) ) ; }
@ java.lang.Override public boolean isEnabled ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue ) { if ( ( issue . getCategory () ) == ( com.android.tools.lint.detector.api.Category.ICONS ) ) { return false ; } if ( issue == ( com.android.tools.lint.checks.ManifestOrderDetector.TARGET_NEWER ) ) { return false ; } if ( ( ( issue == ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_SERVICE ) ) || ( issue == ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_PROVIDER ) ) ) || ( issue == ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_RECEIVER ) ) ) { return false ; } return true ; }
private boolean isUidIdle ( int uid ) { final java.lang.String [] packages = mContext . getPackageManager () . getPackagesForUid ( uid ) ; final int userId = android.os.UserHandle . getUserId ( uid ) ; if ( packages != null ) { for ( java.lang.String packageName : packages ) { if ( ! ( mUsageStats . isAppIdle ( packageName , uid , userId ) ) ) { return false ; } } } return true ; }
@ java.lang.Override public void onSSLStateChange ( int type , int val ) { synchronized ( stateLock ) { switch ( type ) { case org.conscrypt.NativeConstants.SSL_CB_HANDSHAKE_DONE : if ( ( ( engineState ) != ( org.conscrypt.OpenSSLEngineImpl.EngineState.HANDSHAKE_STARTED ) ) && ( ( engineState ) != ( org.conscrypt.OpenSSLEngineImpl.EngineState.READY_HANDSHAKE_CUT_THROUGH ) ) ) { throw new java.lang.IllegalStateException ( ( STRING_CONSTANT + ( engineState ) ) ) ; } engineState = org.conscrypt.OpenSSLEngineImpl.EngineState.HANDSHAKE_COMPLETED ; break; case org.conscrypt.NativeConstants.SSL_CB_HANDSHAKE_START : engineState = org.conscrypt.OpenSSLEngineImpl.EngineState.HANDSHAKE_STARTED ; break; } } }
public com.android.jack.dx.dex.file.TypeIdItem intern ( com.android.jack.dx.rop.type.Type type ) { assert type != null ; throwIfPrepared () ; com.android.jack.dx.dex.file.TypeIdItem result = typeIds . get ( type ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.TypeIdItem ( type ) ; typeIds . put ( type , result ) ; } return result ; }
@ java.lang.Override public synchronized void setEncoding ( java.lang.String encoding ) throws java.io.UnsupportedEncodingException , java.lang.SecurityException { super . setEncoding ( encoding ) ; if ( ( output ) == null ) { return; } flush () ; if ( encoding == null ) { writer = new java.io.OutputStreamWriter ( output ) ; } else { writer = new java.io.OutputStreamWriter ( output , encoding ) ; } }
@ java.lang.Override protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( params != null ) { throw new java.security.InvalidAlgorithmParameterException ( ( STRING_CONSTANT + ( params . getClass () . getName () ) ) ) ; } engineInitInternal ( opmode , key , null ) ; }
@ java.lang.Override public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [] negotiated = org.conscrypt.NativeCrypto . SSL_get0_alpn_selected ( ssl ) ; assertEquals ( STRING_CONSTANT , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { super . setUp () ; org.chromium.base.ContextUtils . initApplicationContext ( getInstrumentation () . getTargetContext () . getApplicationContext () ) ; org.chromium.base.library_loader.LibraryLoader . get ( LibraryProcessType.PROCESS_BROWSER ) . ensureInitialized () ; nativeInit () ; mTestEnvironmentPointer = nativeSetupTestEnvironment () ; }
public static synchronized int insertProviderAt ( java.security.Provider provider , int position ) { int size = org.apache.harmony.security.fortress.Services.providers . size () ; if ( ( position < NUMBER_CONSTANT ) || ( position > size ) ) { position = size + NUMBER_CONSTANT ; } org.apache.harmony.security.fortress.Services.providers . add ( ( position - NUMBER_CONSTANT ) , provider ) ; org.apache.harmony.security.fortress.Services.providersNames . put ( provider . getName () , provider ) ; org.apache.harmony.security.fortress.Services . setNeedRefresh () ; return position ; }
@ java.lang.Override public int getMinSdkVersion ( @ com.android.annotations.NonNull java.io.File manifestFile ) { try { java.lang.Object value = com.android.xml.AndroidManifest . getMinSdkVersion ( new com.android.io.FileWrapper ( manifestFile ) ) ; if ( value instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( value ) ) ; } else if ( value instanceof java.lang.String ) {} } catch ( javax.xml.xpath.XPathExpressionException e ) {} catch ( com.android.io.StreamException e ) { throw new java.lang.RuntimeException ( e ) ; } return NUMBER_CONSTANT ; }
@ java.lang.Override public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor . visit ( this ) ) { visitor . accept ( ifExpr ) ; visitor . accept ( thenStmt ) ; if ( ( elseStmt ) != null ) { visitor . accept ( elseStmt ) ; } } visitor . endVisit ( this ) ; }
private long getPreferredApnId ( int subId , boolean checkApnSp ) { android.content.SharedPreferences sp = getContext () . getSharedPreferences ( com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN , Context.MODE_PRIVATE ) ; long apnId = sp . getLong ( ( ( com.android.providers.telephony.TelephonyProvider.COLUMN_APN_ID ) + subId ) , com.android.providers.telephony.TelephonyProvider.INVALID_APN_ID ) ; if ( ( apnId == ( com.android.providers.telephony.TelephonyProvider.INVALID_APN_ID ) ) && checkApnSp ) { apnId = getPreferredApnIdFromApn ( subId ) ; if ( apnId != ( com.android.providers.telephony.TelephonyProvider.INVALID_APN_ID ) ) { setPreferredApnId ( apnId , subId , false ) ; } } return apnId ; }
public byte [] getFwMemoryDump () { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted () ) { if ( com.android.server.wifi.WifiNative . getFwMemoryDumpNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ) { byte [] fwMemoryDump = com.android.server.wifi.WifiNative.mFwMemoryDump ; com.android.server.wifi.WifiNative.mFwMemoryDump = null ; return fwMemoryDump ; } else { return null ; } } return null ; } }
public static java.util.List < libcore.Repository > openJdkLegacy ( java.nio.file.Path upstreamRoot , java.util.List < java.lang.String > upstreamNames ) { java.util.List < libcore.Repository > result = new java.util.ArrayList <> () ; for ( java.lang.String upstreamName : upstreamNames ) { result . add ( libcore.Repository . openJdkLegacy ( upstreamRoot , upstreamName ) ) ; } return java.util.Collections . unmodifiableList ( result ) ; }
@ javax.annotation.CheckForNull public com.android.jack.ir.ast.JSsaVariableRef getDef () { if ( ( def ) instanceof com.android.jack.ir.ast.cfg.JPhiBlockElement ) { com.android.jack.ir.ast.cfg.JPhiBlockElement phi = ( ( com.android.jack.ir.ast.cfg.JPhiBlockElement ) ( def ) ) ; return phi . getLhs () ; } else { com.android.jack.ir.ast.cfg.JVariableAsgBlockElement assign = ( ( com.android.jack.ir.ast.cfg.JVariableAsgBlockElement ) ( def ) ) ; if ( ( def ) == null ) { return null ; } else { return ( ( com.android.jack.ir.ast.JSsaVariableRef ) ( assign . getAssignment () . getLhs () ) ) ; } } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr ( ) throws java.lang.Exception { switchImsSmsFormat ( PhoneConstants.PHONE_TYPE_GSM ) ; mImsSmsDispatcher . sendText ( null , STRING_CONSTANT , com.android.internal.telephony.TAG , null , null , null , null , false ) ; org.mockito.Mockito . verify ( mSimulatedCommandsVerifier , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . sendImsGsmSms ( org.mockito.Matchers . anyString () , org.mockito.Matchers . anyString () , org.mockito.Mockito . anyInt () , org.mockito.Mockito . anyInt () , org.mockito.Matchers . any ( android.os.Message . class ) ) ; }
protected boolean cleanup () { if ( mNativeAvailable ) { cleanupNative () ; mNativeAvailable = false ; } if ( ( mPanDevices ) != null ) { java.util.List < android.bluetooth.BluetoothDevice > DevList = getConnectedDevices () ; for ( android.bluetooth.BluetoothDevice dev : DevList ) { handlePanDeviceStateChange ( dev , mPanIfName , BluetoothProfile.STATE_DISCONNECTED , BluetoothPan.LOCAL_PANU_ROLE , BluetoothPan.REMOTE_NAP_ROLE ) ; } mPanDevices . clear () ; } return true ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.request.TransformationRequest trRequest = new com.android.jack.transformations.request.TransformationRequest ( method ) ; com.android.jack.transformations.finallyblock.FinallyRemover.JTryStatementVisitor visitor = new com.android.jack.transformations.finallyblock.FinallyRemover.JTryStatementVisitor ( trRequest , method ) ; visitor . accept ( method ) ; trRequest . commit () ; }
@ java.lang.Override public void onStateChange ( boolean state ) { synchronized ( mLock ) { android.util.Log . i ( mTag , ( STRING_CONSTANT + state ) ) ; mIsConnected = state ; if ( ! state ) { if ( ( mAccessControlEnforcer ) != null ) { mAccessControlEnforcer . reset () ; } } else { try { initializeAccessControl () ; } catch ( java.lang.Exception e ) {} synchronized ( mLock ) { mDefaultApplicationSelectedOnBasicChannel = true ; } } } }
public void test_ConstructorLjava_lang_String ( ) throws java.io.IOException { f = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; java.lang.String fileName = f . getAbsolutePath () ; fos = new java.io.FileOutputStream ( fileName ) ; fos . close () ; fos = new java.io.FileOutputStream ( STRING_CONSTANT ) ; fos . close () ; }
@ com.android.annotations.Nullable private org.w3c.dom.Document getProjectDocument ( ) throws java.io.IOException { if ( ( mProjectDoc ) == null ) { java.io.File file = new java.io.File ( mDir , com.android.tools.gradle.eclipse.GradleImport.ECLIPSE_DOT_PROJECT ) ; if ( file . exists () ) { mProjectDoc = mImporter . getXmlDocument ( file , false ) ; } } return mProjectDoc ; }
public void sayHi ( java.lang.Runnable r ) { reporter . accept ( STRING_CONSTANT ) ; Start () ; reporter . accept ( STRING_CONSTANT ) ; r . run () ; reporter . accept ( STRING_CONSTANT ) ; Finish () ; reporter . accept ( STRING_CONSTANT ) ; }
@ java.lang.Override @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public java.lang.String toString () { if ( ( prePosition ) == ( - NUMBER_CONSTANT ) ) { return super . toString () ; } return type . get ( new java.util.MapEntry ( enumMap.keys [ prePosition ] , enumMap.values [ prePosition ] ) ) . toString () ; }
public void test_store_java_io_OutputStream_char ( ) throws java.lang.Exception { java.security.KeyStore keyStore = java.security.KeyStore . getInstance ( java.security.KeyStore . getDefaultType () ) ; try { keyStore . store ( new java.io.ByteArrayOutputStream () , STRING_CONSTANT . toCharArray () ) ; fail () ; } catch ( java.security.KeyStoreException expected ) {} keyStore . load ( null , STRING_CONSTANT . toCharArray () ) ; try { keyStore . store ( null , STRING_CONSTANT . toCharArray () ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} catch ( java.io.IOException expected ) {} }
private boolean isOffsetVisible ( int offset ) { android.text.Layout layout = mTextView . getLayout () ; if ( layout == null ) return false ; final int line = layout . getLineForOffset ( offset ) ; final int lineBottom = layout . getLineBottom ( line ) ; final int primaryHorizontal = ( ( int ) ( layout . getPrimaryHorizontal ( offset ) ) ) ; return isPositionVisible ( ( primaryHorizontal + ( mTextView . viewportToContentHorizontalOffset () ) ) , ( lineBottom + ( mTextView . viewportToContentVerticalOffset () ) ) ) ; }
@ java.lang.Override protected void handleUpdateState ( com.android.systemui.plugins.qs.QSTile.BooleanState state , java.lang.Object arg ) { final android.graphics.drawable.Drawable mEnable = mContext . getDrawable ( R.drawable.ic_qs_nfc_enabled ) ; final android.graphics.drawable.Drawable mDisable = mContext . getDrawable ( R.drawable.ic_qs_nfc_disabled ) ; if ( ( getAdapter () ) == null ) return; state.value = getAdapter () . isEnabled () ; state.label = mContext . getString ( R.string.quick_settings_nfc_label ) ; state.icon = new com.android.systemui.qs.tiles.DrawableIcon ( ( state.value ? mEnable : mDisable ) ) ; state.expandedAccessibilityClassName = android.widget.Switch . class . getName () ; state.contentDescription = state.label ; }
public E next () { if ( ( cursor ) == ( fence ) ) throw new java.util.NoSuchElementException () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) E result = ( ( E ) ( elements [ cursor ] ) ) ; if ( ( ( tail ) != ( fence ) ) || ( result == null ) ) throw new java.util.ConcurrentModificationException () ; lastRet = cursor ; cursor = ( ( cursor ) + NUMBER_CONSTANT ) & ( ( elements.length ) - NUMBER_CONSTANT ) ; return result ; }
public java.lang.String getISO3Language () { if ( languageCode . isEmpty () ) { return STRING_CONSTANT ; } java.lang.String code = libcore.icu.ICU . getISO3Language ( languageCode ) ; if ( ( ! ( languageCode . isEmpty () ) ) && ( code . isEmpty () ) ) { throw new java.util.MissingResourceException ( ( STRING_CONSTANT + ( this ) ) , ( STRING_CONSTANT + ( this ) ) , STRING_CONSTANT ) ; } return code ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger () ; java.io.File folder = com.google.common.io.Files . createTempDir () ; merger . writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files . createTempDir () , null ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger () ; assertTrue ( loadedMerger . loadFromBlob ( folder , true ) ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
@ org.junit.Test public void testSrcStop () { streamHandler . handleMessage ( streamHandler . obtainMessage ( A2dpSinkStreamHandler.SRC_STR_STOP ) ) ; org.mockito.Mockito . verify ( mockAudioManager , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . requestAudioFocus ( org.mockito.Mockito . any () ) ; org.mockito.Mockito . verify ( mockA2dpSink , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . informAudioFocusStateNative ( NUMBER_CONSTANT ) ; org.mockito.Mockito . verify ( mockA2dpSink , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . informAudioTrackGainNative ( NUMBER_CONSTANT ) ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { java.util.List < java.lang.reflect.Field > optionFields = com.google.common.collect.Lists . newArrayList ( com.google.devtools.common.options.OptionsParser . getAllAnnotatedFields ( optionsClass ) ) ; java.util.Collections . sort ( optionFields , com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage . getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , null ) ; } }
@ java.lang.Override public android.bluetooth.BluetoothDevice getClient () { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; } com.android.bluetooth.map.BluetoothMapService service = getService () ; if ( service == null ) { return null ; } if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , ( STRING_CONSTANT + ( service . getRemoteDevice () ) ) ) ; } return service . getRemoteDevice () ; }
public void startRanging ( android.net.wifi.RttManager [] params , android.net.wifi.RttManager.RttListener listener ) { if ( mTerminated ) { android.util.Log . w ( android.net.wifi.aware.DiscoverySession.TAG , STRING_CONSTANT ) ; return; } android.net.wifi.aware.WifiAwareManager mgr = mMgr . get () ; if ( mgr == null ) { android.util.Log . w ( android.net.wifi.aware.DiscoverySession.TAG , STRING_CONSTANT ) ; return; } mgr . startRanging ( mClientId , mSessionId , params , listener ) ; }
public static int calculateDurationInMilis ( com.android.internal.telephony.cat.Duration duration ) { int timeout = NUMBER_CONSTANT ; if ( duration != null ) { switch ( duration.timeUnit ) { case MINUTE : timeout = NUMBER_CONSTANT * NUMBER_CONSTANT ; break; case TENTH_SECOND : timeout = NUMBER_CONSTANT / NUMBER_CONSTANT ; break; case SECOND : default: timeout = NUMBER_CONSTANT ; break; } timeout *= duration.timeInterval ; } return timeout ; }
public static < TValue extends java.lang.Number > double getVariance ( java.util.Collection < TValue > collection ) { android.hardware.cts.helpers.SensorCtsHelper . validateCollection ( collection ) ; double mean = android.hardware.cts.helpers.SensorCtsHelper . getMean ( collection ) ; java.util.ArrayList < java.lang.Double > squaredDifferences = new java.util.ArrayList < java.lang.Double > () ; for ( TValue value : collection ) { double difference = mean - ( value . doubleValue () ) ; squaredDifferences . add ( java.lang.Math . pow ( difference , NUMBER_CONSTANT ) ) ; } return android.hardware.cts.helpers.SensorCtsHelper . getMean ( squaredDifferences ) ; }
public void addStaticField ( com.android.jack.dx.dex.file.EncodedField field , com.android.jack.dx.rop.cst.Constant value ) { assert field != null ; if ( ( staticValuesConstant ) != null ) { throw new java.lang.UnsupportedOperationException ( STRING_CONSTANT ) ; } staticFields . add ( field ) ; staticValues . put ( field , value ) ; }
public static boolean setServicesEnabledSync ( android.content.Context context ) { android.database.Cursor c = null ; try { c = context . getContentResolver () . query ( Account.CONTENT_URI , Account.ID_PROJECTION , null , null , null ) ; boolean enable = ( c != null ) && ( ( c . getCount () ) > NUMBER_CONSTANT ) ; com.android.email.Email . setServicesEnabled ( context , enable ) ; return enable ; } finally { if ( c != null ) { c . close () ; } } }
@ java.lang.Override public void setUiTTYMode ( int slotId , int featureType , int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { feature . setUiTTYMode ( uiTtyMode , onComplete ) ; } } }
private synchronized void onSetReport ( byte reportType , byte reportId , byte [] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log . d ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( STRING_CONSTANT + reportType ) + STRING_CONSTANT ) + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer . wrap ( data ) ; android.os.Message msg = mHandler . obtainMessage ( com.android.bluetooth.hid.HidDevService.MESSAGE_SET_REPORT ) ; msg.arg1 = reportType ; msg.arg2 = reportId ; msg.obj = bb ; mHandler . sendMessage ( msg ) ; }
private int radioTechnologyToDataServiceState ( int code ) { int retVal = android.telephony.ServiceState.STATE_OUT_OF_SERVICE ; switch ( code ) { case NUMBER_CONSTANT : case NUMBER_CONSTANT : case NUMBER_CONSTANT : case NUMBER_CONSTANT : case NUMBER_CONSTANT : case NUMBER_CONSTANT : break; case NUMBER_CONSTANT : case NUMBER_CONSTANT : case NUMBER_CONSTANT : case NUMBER_CONSTANT : retVal = android.telephony.ServiceState.STATE_IN_SERVICE ; break; default: android.util.Log . e ( com.android.internal.telephony.cdma.CdmaServiceStateTracker.LOG_TAG , STRING_CONSTANT ) ; break; } return retVal ; }
public void setZeroDigit ( char zeroDigit ) { if ( ( digits ) != null ) { this . digits [ NUMBER_CONSTANT ] = zeroDigit ; for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { this . digits [ i ] = ( ( char ) ( zeroDigit + i ) ) ; } } else { this . zeroDigit = zeroDigit ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( obj == null ) { return false ; } if ( ( getClass () ) != ( obj . getClass () ) ) { return false ; } android.renderscript.BaseObj b = ( ( android.renderscript.BaseObj ) ( obj ) ) ; return ( mID ) == ( b.mID ) ; }
@ java.lang.Override public void insertElement ( int at , @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlockElement element ) { int size = elements . size () ; if ( at < NUMBER_CONSTANT ) { at = size + at ; } assert ( at >= NUMBER_CONSTANT ) && ( at <= size ) ; if ( at == size ) { appendElement ( element ) ; } else { elements . add ( at , element ) ; element . updateParents ( this ) ; } }
private void fillExistingName ( @ javax.annotation.Nonnull java.util.Collection < ? extends com.android.jack.ir.ast.HasName > namedElements , @ javax.annotation.Nonnull java.util.Collection < java.lang.String > existingNames ) { for ( com.android.jack.ir.ast.HasName namedElement : namedElements ) { if ( ! ( com.android.jack.shrob.obfuscation.Renamer . mustBeRenamed ( ( ( com.android.sched.marker.MarkerManager ) ( namedElement ) ) ) ) ) { existingNames . add ( namedElement . getName () ) ; } } }
@ org.junit.Test public void testEvictingQueue_canAddItems () { com.android.bluetooth.avrcp.EvictingQueue < java.lang.Integer > e = new com.android.bluetooth.avrcp.EvictingQueue < java.lang.Integer > ( NUMBER_CONSTANT ) ; e . add ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( ( ( long ) ( e . size () ) ) , ( ( long ) ( NUMBER_CONSTANT ) ) ) ; }
public void onProxySessionTerminated ( int reason ) { if ( android.net.wifi.aware.WifiAwareManager.VDBG ) android.util.Log . v ( android.net.wifi.aware.WifiAwareManager.TAG , ( STRING_CONSTANT + reason ) ) ; if ( ( mSession ) != null ) { mSession . setTerminated () ; mSession = null ; } else { android.util.Log . w ( android.net.wifi.aware.WifiAwareManager.TAG , STRING_CONSTANT ) ; } mAwareManager . clear () ; mOriginalCallback . onSessionTerminated () ; }
@ java.lang.Override public void run () { com.android.server.location.GpsXtraDownloader xtraDownloader = new com.android.server.location.GpsXtraDownloader ( mProperties ) ; byte [] data = xtraDownloader . downloadXtraData () ; if ( data != null ) { if ( com.android.server.location.GpsLocationProvider.DEBUG ) { android.util.Log . d ( com.android.server.location.GpsLocationProvider.TAG , STRING_CONSTANT ) ; } native_inject_xtra_data ( data , data.length ) ; } sendMessage ( com.android.server.location.GpsLocationProvider.DOWNLOAD_XTRA_DATA_FINISHED , NUMBER_CONSTANT , null ) ; if ( data == null ) { mHandler . sendEmptyMessageDelayed ( com.android.server.location.GpsLocationProvider.DOWNLOAD_XTRA_DATA , com.android.server.location.GpsLocationProvider.RETRY_INTERVAL ) ; } mWakeLock . release () ; }
public void testInstallEmptyDeletedSystemExists ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; store . deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertEmpty () ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; store . installCertificate ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; }
@ java.lang.Override public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable , java.lang.Object data ) { java.lang.String description = describe ( message ) ; com.android.ide.eclipse.adt.AdtPlugin . log ( throwable , STRING_CONSTANT , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addError ( tag , description ) ; }
private void doStop () { if ( ! ( mProfileStarted ) ) { android.util.Log . w ( mName , STRING_CONSTANT ) ; } mProfileStarted = false ; if ( ( mAdapterService ) != null ) { mAdapterService . onProfileServiceStateChanged ( this , BluetoothAdapter.STATE_OFF ) ; } if ( ! ( stop () ) ) { android.util.Log . e ( mName , STRING_CONSTANT ) ; } if ( ( mUserSwitchedReceiver ) != null ) { getApplicationContext () . unregisterReceiver ( mUserSwitchedReceiver ) ; mUserSwitchedReceiver = null ; } stopSelf () ; }
public void configure ( org.bouncycastle.jcajce.provider.config.ConfigurableProvider provider ) { provider . addAlgorithm ( STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.digest.SHA384.Mappings.PREFIX ) + STRING_CONSTANT ) ) ; provider . addAlgorithm ( STRING_CONSTANT , STRING_CONSTANT ) ; provider . addAlgorithm ( ( STRING_CONSTANT + ( org.bouncycastle.asn1.nist.NISTObjectIdentifiers.id_sha384 ) ) , STRING_CONSTANT ) ; addHMACAlgorithm ( provider , STRING_CONSTANT , ( ( org.bouncycastle.jcajce.provider.digest.SHA384.Mappings.PREFIX ) + STRING_CONSTANT ) , ( ( org.bouncycastle.jcajce.provider.digest.SHA384.Mappings.PREFIX ) + STRING_CONSTANT ) ) ; addHMACAlias ( provider , STRING_CONSTANT , PKCSObjectIdentifiers.id_hmacWithSHA384 ) ; }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws com.android.jack.jayce.JayceFormatException , com.android.jack.jayce.JayceVersionException , java.io.IOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode ( NodeLevel.TYPES ) ; java.lang.String packageQualifiedName = com.android.jack.util.NamingTools . getPackageNameFromBinaryName ( com.android.jack.util.NamingTools . getClassBinaryNameFromDescriptor ( type . getSignature () ) ) ; com.android.jack.ir.ast.JPackage pack = session . getLookup () . getOrCreatePackage ( packageQualifiedName ) ; com.android.jack.ir.ast.JDefinedClassOrInterface jType = type . create ( pack , this ) ; return jType ; }
void handleTimerInEmergencyCallbackMode ( int action ) { switch ( action ) { case com.android.internal.telephony.imsphone.ImsPhone.CANCEL_ECM_TIMER : removeCallbacks ( mExitEcmRunnable ) ; ( ( com.android.internal.telephony.GsmCdmaPhone ) ( mDefaultPhone ) ) . notifyEcbmTimerReset ( java.lang.Boolean.TRUE ) ; break; case com.android.internal.telephony.imsphone.ImsPhone.RESTART_ECM_TIMER : long delayInMillis = android.os.SystemProperties . getLong ( TelephonyProperties.PROPERTY_ECM_EXIT_TIMER , com.android.internal.telephony.imsphone.ImsPhone.DEFAULT_ECM_EXIT_TIMER_VALUE ) ; postDelayed ( mExitEcmRunnable , delayInMillis ) ; ( ( com.android.internal.telephony.GsmCdmaPhone ) ( mDefaultPhone ) ) . notifyEcbmTimerReset ( java.lang.Boolean.FALSE ) ; break; default: loge ( ( STRING_CONSTANT + action ) ) ; } }
private static void setUnsignedInt32 ( java.nio.ByteBuffer buffer , int offset , long value ) { if ( ( value < NUMBER_CONSTANT ) || ( value > NUMBER_CONSTANT ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + value ) ) ; } buffer . putInt ( offset , ( ( int ) ( value ) ) ) ; }
public android.net.Uri getPlaybackUri ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } try { return mService . getPlaybackUri ( mAppName , mSubscriptionId , mServiceInfo . getServiceId () ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.telephony.mbms.StreamingService.LOG_TAG , STRING_CONSTANT ) ; mService = null ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_SERVICE_LOST ) ; } }
public static void checkContent ( @ com.android.annotations.NonNull java.io.File archive , @ com.android.annotations.NonNull java.lang.String path , @ com.android.annotations.NonNull byte [] content ) throws java.io.IOException { java.util.Map < java.lang.String , byte [] > pathToContent = java.util.Collections . singletonMap ( path , content ) ; com.android.build.gradle.integration.common.utils.ZipHelper . checkArchive ( archive , pathToContent , com.google.common.collect.ImmutableSet . < java.lang.String > of () ) ; }
public java.lang.StringBuffer format ( android.icu.util.CurrencyAmount currAmt , java.lang.StringBuffer toAppendTo , java.text.FieldPosition pos ) { synchronized ( this ) { android.icu.util.Currency save = getCurrency () ; android.icu.util.Currency curr = currAmt . getCurrency () ; boolean same = curr . equals ( save ) ; if ( ! same ) setCurrency ( curr ) ; format ( currAmt . getNumber () , toAppendTo , pos ) ; if ( ! same ) setCurrency ( save ) ; } return toAppendTo ; }
private com.android.server.telecom.InCallController.InCallServiceInfo getInCallServiceComponent ( android.content.ComponentName componentName , int type ) { java.util.List < com.android.server.telecom.InCallController.InCallServiceInfo > list = getInCallServiceComponents ( componentName , type ) ; if ( ( list != null ) && ( ! ( list . isEmpty () ) ) ) { return list . get ( NUMBER_CONSTANT ) ; } else { android.telecom.Log . e ( this , new java.lang.Exception () , ( ( STRING_CONSTANT + componentName ) + STRING_CONSTANT ) ) ; return new com.android.server.telecom.InCallController.InCallServiceInfo ( componentName , false , false , type ) ; } }
@ org.junit.Test public void testJackArchiveToDexDir ( ) throws java.lang.Exception { java.io.File jackAr = createJackArchiveWithResources () ; java.io.File dexDir = com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools . getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain . class ) ; toolchain . libToExe ( jackAr , dexDir , false ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH , STRING_CONSTANT , false ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH , STRING_CONSTANT , false ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE3_SHORTPATH , STRING_CONSTANT , false ) ; checkResourceContentFromDir ( dexDir , com.android.jack.resource.ResourceTests.RESOURCE4_SHORTPATH , STRING_CONSTANT , false ) ; }
public boolean unregisterApp () { android.util.Log . v ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; boolean result = false ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { result = service . unregisterApp () ; } catch ( android.os.RemoteException e ) { android.util.Log . e ( android.bluetooth.BluetoothHidDevice.TAG , e . toString () ) ; } } else { android.util.Log . w ( android.bluetooth.BluetoothHidDevice.TAG , STRING_CONSTANT ) ; } return result ; }
public void rilConnected ( int indicationType ) { mRil . processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil . unsljLog ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RIL_CONNECTED ) ; mRil . setRadioPower ( false , null ) ; mRil . setCdmaSubscriptionSource ( mRil.mCdmaSubscription , null ) ; mRil . setCellInfoListRate () ; mRil . notifyRegistrantsRilConnectionChanged ( NUMBER_CONSTANT ) ; }
private static int readInt ( @ com.android.annotations.NonNull java.io.FileInputStream fis , @ com.android.annotations.NonNull com.android.builder.internal.incremental.DependencyDataStore.ReusableBuffer buffers ) throws java.io.IOException { int read = fis . read ( buffers.intBuffer ) ; if ( read != NUMBER_CONSTANT ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } java.nio.ByteBuffer b = java.nio.ByteBuffer . wrap ( buffers.intBuffer ) ; return b . getInt () ; }
@ org.junit.Test public void testCheckAccessLevel_isDeviceOwner ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( true ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert . assertEquals ( NetworkStatsAccess.Level.DEVICE , com.android.server.net.NetworkStatsAccess . checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public static void connect () { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . lock () ; try { if ( ! ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.ourInitialized ) ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . init () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . setupFlushing () ; com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.ourInitialized = true ; } } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w . unlock () ; } }
private void testTwo ( java.security.cert.X509Certificate x1 , java.lang.String alias1 , java.security.cert.X509Certificate x2 , java.lang.String alias2 ) { install ( x1 , alias1 ) ; install ( x2 , alias2 ) ; assertRootCa ( x1 , alias1 ) ; assertRootCa ( x2 , alias2 ) ; assertAliases ( alias1 , alias2 ) ; }
private long getPlayPosition () { if ( ( mCurrentPlayState ) == null ) return - NUMBER_CONSTANT ; if ( ( mCurrentPlayState . getPosition () ) == ( android.media.session.PlaybackState.PLAYBACK_POSITION_UNKNOWN ) ) return - NUMBER_CONSTANT ; if ( isPlayingState ( mCurrentPlayState ) ) { return ( ( android.os.SystemClock . elapsedRealtime () ) - ( mLastStateUpdate ) ) + ( mCurrentPlayState . getPosition () ) ; } return mCurrentPlayState . getPosition () ; }
public void testNonBlockingAccept ( ) throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel . open () ; try { ssc . configureBlocking ( false ) ; ssc . bind ( null ) ; assertNull ( ssc . accept () ) ; } finally { ssc . close () ; } }
@ java.lang.Override public void binderDied () { if ( com.android.server.am.ActivityManagerService.localLOGV ) android.util.Slog . v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_CONSTANT + ( this ) ) + STRING_CONSTANT ) + ( mAppThread . asBinder () ) ) ) ; synchronized ( this ) { appDiedLocked ( mApp , mPid , mAppThread , true ) ; } }
@ android.test.suitebuilder.annotation.MediumTest @ org.junit.Test public void testFindOutgoingCallPhoneAccountSelfManaged ( ) throws java.lang.Exception { java.util.List < android.telecom.PhoneAccountHandle > accounts = mCallsManager . findOutgoingCallPhoneAccount ( com.android.server.telecom.tests.CallsManagerTest.SELF_MANAGED_HANDLE , com.android.server.telecom.tests.CallsManagerTest.TEST_ADDRESS , false , null ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , accounts . size () ) ; org.junit.Assert . assertEquals ( com.android.server.telecom.tests.CallsManagerTest.SELF_MANAGED_HANDLE , accounts . get ( NUMBER_CONSTANT ) ) ; }
private void addProcess ( com.googlecode.android_scripting.interpreter.InterpreterProcess process ) { synchronized ( mProcessMap ) { mProcessMap . put ( process . getPort () , process ) ; ( mModCount ) ++ ; } if ( ! ( mHide ) ) { updateNotification ( ( ( process . getName () ) + STRING_CONSTANT ) ) ; } }
protected boolean cleanup () { if ( ( mConnectionStateChangedReceiver ) != null ) { unregisterReceiver ( mConnectionStateChangedReceiver ) ; mConnectionStateChangedReceiver = null ; } if ( ( mStateMachine ) != null ) { mStateMachine . cleanup () ; mStateMachine = null ; } if ( ( mAvrcp ) != null ) { mAvrcp . cleanup () ; mAvrcp = null ; } com.android.bluetooth.a2dp.A2dpService . clearA2dpService () ; return true ; }
void stopScan ( com.android.bluetooth.gatt.ScanClient client ) { enforceAdminPermission () ; int scanQueueSize = ( mScanManager . getBatchScanQueue () . size () ) + ( mScanManager . getRegularScanQueue () . size () ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , ( STRING_CONSTANT + scanQueueSize ) ) ; com.android.bluetooth.gatt.AppScanStats app = null ; app = mScannerMap . getAppScanStatsById ( client.scannerId ) ; if ( app != null ) app . recordScanStop ( client.scannerId ) ; mScanManager . stopScan ( client ) ; }
private void fillFiles ( @ javax.annotation.Nonnull java.io.File folder , @ javax.annotation.Nonnull java.lang.String fileExt , @ javax.annotation.Nonnull java.util.Set < java.lang.String > fileNames ) { for ( java.io.File subFile : folder . listFiles () ) { if ( subFile . isDirectory () ) { fillFiles ( subFile , fileExt , fileNames ) ; } else { java.lang.String path = subFile . getPath () ; if ( subFile . getName () . endsWith ( fileExt ) ) { fileNames . add ( path ) ; } } } }
public void run () { mHandler . removeCallbacks ( this ) ; final boolean succeded ; synchronized ( mInstallLock ) { succeded = deleteApplicationCacheFilesLI ( packageName , userId ) ; } clearExternalStorageDataSync ( packageName , userId , false ) ; if ( observer != null ) { try { observer . onRemoveCompleted ( packageName , succeded ) ; } catch ( android.os.RemoteException e ) { android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_CONSTANT ) ; } } }
public void test_SSLEngine_getSupportedCipherSuites_connect ( ) throws java.lang.Exception { libcore.java.security.TestKeyStore testKeyStore = new libcore.java.security.TestKeyStore.Builder () . keyAlgorithms ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . aliasPrefix ( STRING_CONSTANT ) . ca ( true ) . build () ; test_SSLEngine_getSupportedCipherSuites_connect ( testKeyStore , false ) ; test_SSLEngine_getSupportedCipherSuites_connect ( testKeyStore , true ) ; }
private com.android.builder.core.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.core.VariantConfiguration variant = new com.android.builder.core.VariantConfiguration ( mDefaultConfig , new com.android.builder.core.MockSourceProvider ( STRING_CONSTANT ) , mBuildType , new com.android.builder.core.MockSourceProvider ( STRING_CONSTANT ) , VariantConfiguration.Type.DEFAULT , null ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest () { return versionName ; } } ; variant . addProductFlavor ( mFlavorConfig , new com.android.builder.core.MockSourceProvider ( STRING_CONSTANT ) , STRING_CONSTANT ) ; return variant ; }
public void testSortByApi_Empty () { m . updateStart () ; assertFalse ( m . updateSourcePackages ( null , new java.lang.Package [ NUMBER_CONSTANT ] ) ) ; assertFalse ( m . updateEnd () ) ; assertEquals ( ( STRING_CONSTANT + STRING_CONSTANT ) , getTree ( m ) ) ; }
@ org.junit.Test public void testCrashWatcher ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework . getInstrumentation () ; android.support.test.uiautomator.UiDevice device = testFramework . getDevice () ; com.android.devtools.systemimage.uitest.utils.AppLauncher . launch ( instrumentation , STRING_CONSTANT ) ; device . findObject ( new android.support.test.uiautomator.UiSelector () . className ( STRING_CONSTANT ) ) . click () ; }
public void testUrlContainsQueryButNoPath ( ) throws java.lang.Exception { server . enqueue ( new com.google.mockwebserver.MockResponse () . setBody ( STRING_CONSTANT ) ) ; server . play () ; java.net.URL url = new java.net.URL ( STRING_CONSTANT , server . getHostName () , server . getPort () , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , readAscii ( url . openConnection () . getInputStream () , java.lang.Integer.MAX_VALUE ) ) ; com.google.mockwebserver.RecordedRequest request = server . takeRequest () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , request . getRequestLine () ) ; }
private static double getWifiPowerPerPacket ( com.android.internal.os.PowerProfile profile ) { final long WIFI_BPS = NUMBER_CONSTANT ; final double WIFI_POWER = ( profile . getAveragePower ( PowerProfile.POWER_WIFI_ACTIVE ) ) / NUMBER_CONSTANT ; return WIFI_POWER / ( ( ( ( double ) ( WIFI_BPS ) ) / NUMBER_CONSTANT ) / NUMBER_CONSTANT ) ; }
@ com.android.internal.annotations.VisibleForTesting public boolean filter () { java.util.Optional < java.lang.String > carrierAppForFiltering = getCarrierAppPackageForFiltering () ; java.util.List < java.lang.String > smsFilterPackages = new java.util.ArrayList <> () ; if ( carrierAppForFiltering . isPresent () ) { smsFilterPackages . add ( carrierAppForFiltering . get () ) ; } com.android.internal.telephony.CarrierServicesSmsFilter.FilterAggregator filterAggregator = new com.android.internal.telephony.CarrierServicesSmsFilter.FilterAggregator ( smsFilterPackages . size () ) ; for ( java.lang.String smsFilterPackage : smsFilterPackages ) { filterWithPackage ( smsFilterPackage , filterAggregator ) ; } boolean handled = ( smsFilterPackages . size () ) > NUMBER_CONSTANT ; return handled ; }
private void sendIndicatorIntent ( android.bluetooth.BluetoothDevice device , int ind_id , int ind_value ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED ) ; intent . putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent . putExtra ( BluetoothHeadset.EXTRA_HF_INDICATORS_IND_ID , ind_id ) ; intent . putExtra ( BluetoothHeadset.EXTRA_HF_INDICATORS_IND_VALUE , ind_value ) ; mService . sendBroadcast ( intent , HeadsetService.BLUETOOTH_PERM ) ; }
private static void report ( com.android.tools.lint.detector.api.Context context , com.android.tools.lint.detector.api.Issue issue , com.android.tools.lint.detector.api.Location.Handle handle , java.lang.String message ) { com.android.tools.lint.detector.api.Location location = handle . resolve () ; java.lang.Object clientData = handle . getClientData () ; if ( clientData instanceof org.w3c.dom.Node ) { if ( context . getDriver () . isSuppressed ( null , issue , ( ( org.w3c.dom.Node ) ( clientData ) ) ) ) { return; } } context . report ( issue , location , message , null ) ; }
@ java.lang.Override protected org.eclipse.swt.widgets.Control createControl ( org.eclipse.swt.widgets.Composite parent ) { org.eclipse.swt.widgets.Composite c = new org.eclipse.swt.widgets.Composite ( parent , org.eclipse.swt.SWT.NONE ) ; c . setLayout ( new org.eclipse.swt.layout.GridLayout ( NUMBER_CONSTANT , false ) ) ; c . setLayoutData ( new org.eclipse.swt.layout.GridData ( org.eclipse.swt.layout.GridData.FILL_BOTH ) ) ; createControlsSection ( c ) ; createDetailsSection ( c ) ; clientSelected () ; return c ; }
private com.android.bluetooth.avrcp.MediaPlayerInfo removeMediaPlayerInfo ( java.lang.String packageName ) { synchronized ( mMediaPlayerInfoList ) { int removeKey = - NUMBER_CONSTANT ; for ( java.util.Map.Entry < java.lang.Integer , com.android.bluetooth.avrcp.MediaPlayerInfo > entry : mMediaPlayerInfoList . entrySet () ) { if ( entry . getValue () . getPackageName () . equals ( packageName ) ) { removeKey = entry . getKey () ; break; } } if ( removeKey != ( - NUMBER_CONSTANT ) ) { return mMediaPlayerInfoList . remove ( removeKey ) ; } return null ; } }
public boolean hasChanged ( @ com.android.annotations.NonNull java.util.EnumSet < com.android.sdklib.repository.descriptors.PkgType > filters ) { for ( com.android.sdklib.repository.descriptors.PkgType filter : filters ) { java.util.Collection < com.android.sdklib.repository.local.LocalDirInfo > dirInfos ; synchronized ( mLocalPackages ) { dirInfos = mVisitedDirs . get ( filter ) ; for ( com.android.sdklib.repository.local.LocalDirInfo dirInfo : dirInfos ) { if ( dirInfo . hasChanged () ) { return true ; } } } } return false ; }
@ java.lang.Override public boolean setDefaultForNextTap ( int userId , android.content.ComponentName service ) throws android.os.RemoteException { com.android.nfc.NfcPermissions . validateUserId ( userId ) ; com.android.nfc.NfcPermissions . enforceAdminPermissions ( mContext ) ; if ( ( service != null ) && ( ! ( isServiceRegistered ( userId , service ) ) ) ) { return false ; } return mPreferredServices . setDefaultForNextTap ( service ) ; }
@ java.lang.Override public void run () { try { com.android.ddmlib.PropertyFetcher.GetPropReceiver propReceiver = new com.android.ddmlib.PropertyFetcher.GetPropReceiver () ; mDevice . executeShellCommand ( com.android.ddmlib.PropertyFetcher.GETPROP_COMMAND , propReceiver , com.android.ddmlib.PropertyFetcher.GETPROP_TIMEOUT_SEC , java.util.concurrent.TimeUnit.SECONDS ) ; populateCache ( propReceiver . getCollectedProperties () ) ; } catch ( java.lang.Exception e ) { handleException ( e ) ; } }
@ java.lang.Override public boolean performFinish () { com.android.util.Pair < org.eclipse.core.resources.IFile , org.eclipse.jface.text.IRegion > created = createXmlFile () ; if ( created == null ) { return false ; } else { org.eclipse.core.resources.IFile file = created . getFirst () ; try { com.android.ide.eclipse.adt.AdtPlugin . openFile ( file , null , false ) ; } catch ( org.eclipse.ui.PartInitException e ) { com.android.ide.eclipse.adt.AdtPlugin . log ( e , STRING_CONSTANT , file . getFullPath () . toString () ) ; } return true ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig . get ( com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY ) ; try { writingTool . write ( outputVDir ) ; } catch ( com.android.jack.backend.dex.DexWritingException e ) { session . getReporter () . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } }
public static final javax.net.ssl.SSLContext createSSLContext ( final java.lang.String protocol , final javax.net.ssl.KeyManager [] keyManagers , final javax.net.ssl.TrustManager [] trustManagers ) { try { javax.net.ssl.SSLContext context = javax.net.ssl.SSLContext . getInstance ( protocol ) ; context . init ( keyManagers , trustManagers , new java.security.SecureRandom () ) ; return context ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } }
@ java.lang.Override @ javax.annotation.Nullable public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , java.lang.String [] args ) { if ( new vogar.ClassAnalyzer ( klass ) . hasMethod ( true , void . class , STRING_CONSTANT , java.lang.String [] . class ) ) { return new vogar.target.MainTargetRunner ( monitor , klass , args ) ; } else { return null ; } }
public void testToArray_ArrayStoreException () { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList () ; c . add ( STRING_CONSTANT ) ; c . add ( STRING_CONSTANT ) ; try { c . toArray ( new java.lang.Long [ NUMBER_CONSTANT ] ) ; shouldThrow () ; } catch ( java.lang.ArrayStoreException success ) {} }
private void performPoll ( int flags ) { if ( ( mTime . getCacheAge () ) > ( mSettings . getTimeCacheMaxAge () ) ) { mTime . forceRefresh () ; } synchronized ( mStatsLock ) { mWakeLock . acquire () ; try { performPollLocked ( flags ) ; } finally { mWakeLock . release () ; } } }
public java.lang.String createNetworkSpecifierOpen ( @ android.annotation.Nullable android.net.wifi.aware.PeerHandle peerHandle ) { if ( mTerminated ) { android.util.Log . w ( android.net.wifi.aware.DiscoverySession.TAG , STRING_CONSTANT ) ; return null ; } android.net.wifi.aware.WifiAwareManager mgr = mMgr . get () ; if ( mgr == null ) { android.util.Log . w ( android.net.wifi.aware.DiscoverySession.TAG , STRING_CONSTANT ) ; return null ; } int role = ( ( this ) instanceof android.net.wifi.aware.SubscribeDiscoverySession ) ? WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR : WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER ; return mgr . createNetworkSpecifier ( mClientId , role , mSessionId , peerHandle , null , null ) ; }
public void test_getBroadcast ( ) throws java.lang.Exception { try ( java.net.DatagramSocket theSocket = new java.net.DatagramSocket () ) { theSocket . setBroadcast ( true ) ; assertTrue ( STRING_CONSTANT , theSocket . getBroadcast () ) ; theSocket . setBroadcast ( false ) ; assertFalse ( STRING_CONSTANT , theSocket . getBroadcast () ) ; } }
private void notifyAddressRemoved ( java.lang.String iface , android.net.LinkAddress address ) { final int length = mObservers . beginBroadcast () ; for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { try { mObservers . getBroadcastItem ( i ) . addressRemoved ( iface , address ) ; } catch ( android.os.RemoteException e ) {} catch ( java.lang.RuntimeException e ) {} } mObservers . finishBroadcast () ; }
public void test_ConstructorLjava_net_InetAddressIZ ( ) throws java.io.IOException { int sport = startServer ( STRING_CONSTANT ) ; try ( java.net.Socket s = new java.net.Socket ( java.net.InetAddress . getLocalHost () , sport , true ) ) { assertTrue ( STRING_CONSTANT , ( ( s . getPort () ) == sport ) ) ; } s = new java.net.Socket ( java.net.InetAddress . getLocalHost () , sport , false ) ; }
@ java.lang.Override public final java.nio.ByteBuffer putDouble ( double x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } putDouble ( ix ( nextPutIndex ( SizeOf.DOUBLE ) ) , x ) ; return this ; }
private static java.lang.String quoteSsid ( android.net.wifi.ScanResult scanResult ) { if ( ( scanResult.wifiSsid ) != null ) { return ( STRING_CONSTANT + ( scanResult.wifiSsid . toString () ) ) + STRING_CONSTANT ; } else if ( ( scanResult.SSID ) != null ) { return ( STRING_CONSTANT + ( scanResult.SSID ) ) + STRING_CONSTANT ; } else { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } }
@ java.lang.Override public void addAllMarker ( @ javax.annotation.Nonnull java.util.Collection < com.android.sched.marker.Marker > collection ) { ensureMap () ; for ( com.android.sched.marker.Marker marker : collection ) { assert isValidMarker ( marker ) : ( ( ( STRING_CONSTANT + ( com.android.sched.item.Items . getName ( marker . getClass () ) ) ) + STRING_CONSTANT ) + ( this . getClass () . getName () ) ) + STRING_CONSTANT ; assert ( markers ) != null ; markers . put ( marker . getClass () , marker ) ; } }
private void assertCommand ( java.lang.String [] cmd ) { org.junit.Assert . assertEquals ( cmd [ NUMBER_CONSTANT ] , com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_BINARY ) ; org.junit.Assert . assertEquals ( cmd [ NUMBER_CONSTANT ] , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( cmd [ NUMBER_CONSTANT ] , com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH . replace ( STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( cmd [ NUMBER_CONSTANT ] . endsWith ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( cmd.length , NUMBER_CONSTANT ) ; }
android.bluetooth.BluetoothGattService getService ( android.bluetooth.BluetoothDevice device , java.util.UUID uuid , int instanceId ) { for ( android.bluetooth.BluetoothGattService svc : mServices ) { if ( ( ( svc . getDevice () . equals ( device ) ) && ( ( svc . getInstanceId () ) == instanceId ) ) && ( svc . getUuid () . equals ( uuid ) ) ) { return svc ; } } return null ; }
public void logAndClear () { if ( ( mEventCount ) == NUMBER_CONSTANT ) { return; } byte [] eventTypes = java.util.Arrays . copyOf ( mEventTypes , mEventCount ) ; byte [] returnCodes = java.util.Arrays . copyOf ( mReturnCodes , mEventCount ) ; int [] latenciesMs = java.util.Arrays . copyOf ( mLatenciesMs , mEventCount ) ; mMetricsLog . log ( new android.net.metrics.DnsEvent ( mNetId , eventTypes , returnCodes , latenciesMs ) ) ; com.android.server.connectivity.NetdEventListenerService . maybeLog ( STRING_CONSTANT , mEventCount , mNetId ) ; mEventCount = NUMBER_CONSTANT ; }
private static void printClassInstanceFields ( com.android.ahat.Doc doc , com.android.ahat.Query query , com.android.ahat.heapdump.AhatClassInstance inst ) { doc . section ( STRING_CONSTANT ) ; com.android.ahat.heapdump.AhatInstance base = inst . getBaseline () ; com.android.ahat.ObjectHandler . printFields ( doc , query , com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID , ( ( inst != base ) && ( ! ( base . isPlaceHolder () ) ) ) , inst . asClassInstance () . getInstanceFields () , ( base . isPlaceHolder () ? null : base . asClassInstance () . getInstanceFields () ) ) ; }
public boolean importKey ( java.lang.String keyName , byte [] key , int uid ) { try { return ( mBinder . import_key ( keyName , key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return false ; } }
@ java.lang.Override @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) protected void onListItemClick ( android.widget.ListView l , android.view.View v , int position , long id ) { java.util.Map < java.lang.String , java.lang.Object > map = ( ( java.util.Map < java.lang.String , java.lang.Object > ) ( l . getItemAtPosition ( position ) ) ) ; android.content.Intent intent = ( ( android.content.Intent ) ( map . get ( STRING_CONSTANT ) ) ) ; startActivity ( intent ) ; }
public void testReplacedAlias ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > mergedMap = merger . getDataMap () ; java.util.List < com.android.ide.common.res2.ResourceItem > values = mergedMap . get ( STRING_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , values . size () ) ; com.android.ide.common.res2.ResourceItem layout = values . get ( NUMBER_CONSTANT ) ; assertNull ( layout . getValue () ) ; }
public java.lang.String getHexString () { java.lang.String out = STRING_CONSTANT ; byte [] ssidbytes = getOctets () ; for ( int i = NUMBER_CONSTANT ; i < ( octets . size () ) ; i ++ ) { out += java.lang.String . format ( java.util.Locale.US , STRING_CONSTANT , ssidbytes [ i ] ) ; } return ( octets . size () ) > NUMBER_CONSTANT ? out : null ; }
public void initialize ( int strength , java.security.SecureRandom random ) { this . strength = strength ; if ( random != null ) { this . random = random ; } java.security.spec.ECGenParameterSpec ecParams = ( ( java.security.spec.ECGenParameterSpec ) ( org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi.EC.ecParameters . get ( org.bouncycastle.util.Integers . valueOf ( strength ) ) ) ) ; if ( ecParams == null ) { throw new java.security.InvalidParameterException ( STRING_CONSTANT ) ; } try { initialize ( ecParams , random ) ; } catch ( java.security.InvalidAlgorithmParameterException e ) { throw new java.security.InvalidParameterException ( STRING_CONSTANT ) ; } }
private void transform ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn , @ javax.annotation.Nonnull java.io.OutputStream os ) throws java.io.IOException { com.android.jill.backend.jayce.JayceWriter writer = createWriter ( os ) ; com.android.jill.frontend.java.ClassNodeWriter asm2jayce = new com.android.jill.frontend.java.ClassNodeWriter ( writer , new com.android.jill.frontend.java.SourceInfoWriter ( writer ) , options ) ; asm2jayce . write ( cn ) ; writer . flush () ; }
@ java.lang.Override protected void cleanup () { if ( com.android.bluetooth.gatt.GattService.DBG ) { android.util.Log . d ( com.android.bluetooth.gatt.GattService.TAG , STRING_CONSTANT ) ; } cleanupNative () ; if ( ( mAdvertiseManager ) != null ) { mAdvertiseManager . cleanup () ; } if ( ( mScanManager ) != null ) { mScanManager . cleanup () ; } if ( ( mPeriodicScanManager ) != null ) { mPeriodicScanManager . cleanup () ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ! ( super . equals ( obj ) ) ) { return false ; } java.text.SimpleDateFormat that = ( ( java.text.SimpleDateFormat ) ( obj ) ) ; return ( pattern . equals ( that.pattern ) ) && ( formatData . equals ( that.formatData ) ) ; }
private void addActiveLog ( int reason , java.lang.String packageName , boolean enable ) { synchronized ( mActiveLogs ) { if ( ( mActiveLogs . size () ) > ( com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE ) ) { mActiveLogs . remove () ; } mActiveLogs . add ( new com.android.server.BluetoothManagerService.ActiveLog ( reason , packageName , enable , java.lang.System . currentTimeMillis () ) ) ; } }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . isNative () ) || ( method . isAbstract () ) ) || ( ! ( filter . accept ( this . getClass () , method ) ) ) ) { return; } com.android.jack.transformations.request.TransformationRequest request = new com.android.jack.transformations.request.TransformationRequest ( method ) ; com.android.jack.transformations.uselessif.UselessIfRemover.UselessIfRemoverVisitor visitor = new com.android.jack.transformations.uselessif.UselessIfRemover.UselessIfRemoverVisitor ( request ) ; visitor . accept ( method ) ; request . commit () ; }
private void onConnectionStateChanged ( byte [] address , int state ) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent ( A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED ) ; event.device = getDevice ( address ) ; event.valueInt = state ; if ( com.android.bluetooth.a2dp.A2dpNativeInterface.DBG ) { android.util.Log . d ( com.android.bluetooth.a2dp.A2dpNativeInterface.TAG , ( STRING_CONSTANT + event ) ) ; } sendMessageToService ( event ) ; }
@ java.lang.Override public final void backgroundResourcesReleased ( android.os.IBinder token ) { final long origId = android.os.Binder . clearCallingIdentity () ; try { synchronized ( this ) { com.android.server.am.ActivityStack stack = com.android.server.am.ActivityRecord . getStackLocked ( token ) ; if ( stack != null ) { stack . backgroundResourcesReleased () ; } } } finally { android.os.Binder . restoreCallingIdentity ( origId ) ; } }
@ org.jetbrains.annotations.Nullable private static com.intellij.openapi.vfs.VirtualFile findTargetContentRoot ( com.intellij.openapi.module.Module clientModule ) { final com.intellij.openapi.vfs.VirtualFile [] contentRoots = com.intellij.openapi.roots.ModuleRootManager . getInstance ( clientModule ) . getContentRoots () ; for ( com.intellij.openapi.vfs.VirtualFile contentRoot : contentRoots ) { if ( ( contentRoot . findChild ( GradleConstants.DEFAULT_SCRIPT_NAME ) ) != null ) { return contentRoot ; } } return ( contentRoots.length ) > NUMBER_CONSTANT ? contentRoots [ NUMBER_CONSTANT ] : null ; }
@ java.lang.Override public void onError ( android.preference.Preference preference , int error ) { if ( DBG ) dumpState () ; android.util.Log . i ( com.android.phone.TimeConsumingPreferenceActivity.LOG_TAG , ( ( ( STRING_CONSTANT + ( preference . getKey () ) ) + STRING_CONSTANT ) + error ) ) ; if ( mIsForeground ) { showDialog ( error ) ; } preference . setEnabled ( false ) ; }
@ javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface getAccessorClassForSuperCall ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaringType ) { assert ( currentType ) != null ; com.android.jack.ir.ast.JDefinedClass enclosing = ( ( com.android.jack.ir.ast.JDefinedClass ) ( currentType ) ) ; while ( ! ( com.android.jack.transformations.ast.inner.InnerAccessorGenerator . isSuperClassOf ( ( ( com.android.jack.ir.ast.JDefinedClass ) ( declaringType ) ) , enclosing ) ) ) { enclosing = ( ( com.android.jack.ir.ast.JDefinedClass ) ( enclosing . getEnclosingType () ) ) ; } return enclosing ; }
public java.lang.String getNameByOid ( sun.security.util.ObjectIdentifier oid ) throws java.io.IOException { for ( java.lang.String name : map . keySet () ) { if ( map . get ( name ) . getExtensionId () . equals ( ( ( java.lang.Object ) ( oid ) ) ) ) { return name ; } } return null ; }
void onRemovedFromCallList () { com.android.dialer.common.LogUtil . enterBlock ( STRING_CONSTANT ) ; if ( ( videoTechManager ) != null ) { videoTechManager . dispatchRemovedFromCallList () ; } if ( ( ( rttTranscript ) != null ) && ( ! ( isCallRemoved ) ) ) { saveRttTranscript () ; } isCallRemoved = true ; }
public void testTwoSystemTwoDeleted ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; store . deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; install ( org.conscrypt.TrustedCertificateStoreTest . getCa2 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa2 () ) ; store . deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa2 () ) ; assertEmpty () ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest . getCa1 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa1 () ) ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest . getCa2 () , org.conscrypt.TrustedCertificateStoreTest . getAliasSystemCa2 () ) ; }
@ java.lang.Override public void acceptVideoRequest ( @ android.support.annotation.NonNull android.content.Context context ) { int requestedVideoState = callback . getRequestedVideoState () ; com.android.dialer.common.Assert . checkArgument ( ( requestedVideoState != ( android.telecom.VideoProfile.STATE_AUDIO_ONLY ) ) ) ; com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , ( STRING_CONSTANT + requestedVideoState ) ) ; call . getVideoCall () . sendSessionModifyResponse ( new android.telecom.VideoProfile ( requestedVideoState ) ) ; listener . onUpgradedToVideo ( false ) ; logger . logImpression ( DialerImpression.Type.IMS_VIDEO_REQUEST_ACCEPTED ) ; }
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( ! ( mAcceptUsersInput ) ) { return true ; } switch ( item . getItemId () ) { case StkApp.MENU_ID_END_SESSION : cancelTimeOut () ; sendResponse ( StkAppService.RES_ID_END_SESSION ) ; cancelTimeOut () ; finish () ; return true ; default: break; } return super . onOptionsItemSelected ( item ) ; }
@ java.lang.Override public void log ( java.lang.Throwable exception , java.lang.String format , java.lang.Object . . . args ) { if ( exception != null ) { exception . printStackTrace () ; } java.lang.StringBuilder sb = new java.lang.StringBuilder () ; if ( format != null ) { sb . append ( java.lang.String . format ( format , args ) ) ; } if ( exception != null ) { sb . append ( exception . toString () ) ; } java.lang.System.err . println ( sb ) ; if ( exception != null ) { fail ( exception . toString () ) ; } }
private final void resetContext () { org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = new org.conscrypt.NativeRef.EVP_MD_CTX ( org.conscrypt.NativeCrypto . EVP_MD_CTX_create () ) ; if ( signing ) { evpPkeyCtx = org.conscrypt.NativeCrypto . EVP_DigestSignInit ( ctxLocal , evpMdRef , key . getNativeRef () ) ; } else { evpPkeyCtx = org.conscrypt.NativeCrypto . EVP_DigestVerifyInit ( ctxLocal , evpMdRef , key . getNativeRef () ) ; } configureEVP_PKEY_CTX ( evpPkeyCtx ) ; this . ctx = ctxLocal ; }
public void testConstructor_IllegalAliases_Middle () { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( STRING_CONSTANT , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ) ; fail () ; } catch ( java.nio.charset.IllegalCharsetNameException expected ) {} try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( STRING_CONSTANT , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ) ; fail () ; } catch ( java.nio.charset.IllegalCharsetNameException expected ) {} }
@ org.jetbrains.annotations.Nullable public PS getLinkedProjectSettings ( @ org.jetbrains.annotations.NotNull java.lang.String linkedProjectPath ) { PS ps = myLinkedProjectsSettings . get ( linkedProjectPath ) ; if ( ps == null ) { for ( PS ps1 : myLinkedProjectsSettings . values () ) { for ( java.lang.String modulePath : ps1 . getModules () ) { if ( linkedProjectPath . equals ( modulePath ) ) return ps1 ; } } } if ( ps == null ) { ps = myLinkedProjectsSettings . get ( com.intellij.openapi.util.io.FileUtil . toSystemIndependentName ( linkedProjectPath ) ) ; } return ps ; }
public void log ( com.android.utils.ILogger logger ) { for ( com.android.manifmerger.MergingReport.Record record : mRecords ) { switch ( record.mSeverity ) { case WARNING : logger . warning ( record . toString () ) ; break; case ERROR : logger . error ( null , record . toString () ) ; break; case INFO : logger . info ( record . toString () ) ; break; default: logger . error ( null , ( STRING_CONSTANT + ( record.mSeverity ) ) ) ; } } mActions . log ( logger ) ; }
private int getBrowseId ( java.lang.String packageName ) { boolean response = false ; int browseInfoID = NUMBER_CONSTANT ; synchronized ( mBrowsePlayerInfoList ) { for ( com.android.bluetooth.avrcp.BrowsePlayerInfo info : mBrowsePlayerInfoList ) { if ( info.packageName . equals ( packageName ) ) { response = true ; break; } browseInfoID ++ ; } } if ( ! response ) { browseInfoID = - NUMBER_CONSTANT ; } if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log . d ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( ( STRING_CONSTANT + packageName ) + STRING_CONSTANT ) + browseInfoID ) ) ; return browseInfoID ; }
public void installDrmEngine ( java.lang.String engineFilePath ) { if ( ( null == engineFilePath ) || ( engineFilePath . equals ( STRING_CONSTANT ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_CONSTANT + engineFilePath ) + STRING_CONSTANT ) ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState () ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } _installDrmEngine ( mUniqueId , engineFilePath ) ; }
@ javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs ) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties () ; try { com.android.sched.vfs.InputVFile libProp = vfs . getRootInputVDir () . getInputVFile ( JackLibrary.LIBRARY_PROPERTIES_VPATH ) ; libraryProperties . load ( libProp . openRead () ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.library.NotJackLibraryException ( vfs . getLocation () ) ; } return libraryProperties ; }
@ java.lang.Override public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { java.lang.String name = attribute . getValue () ; for ( int i = NUMBER_CONSTANT , n = name . length () ; i < n ; i ++ ) { char c = name . charAt ( i ) ; if ( c == CHAR_CONS ) { com.android.tools.lint.detector.api.Location location = context . getLocation ( attribute ) ; java.lang.String message = STRING_CONSTANT ; context . report ( com.android.tools.lint.checks.ByteOrderMarkDetector.BOM , null , location , message ) ; break; } } }
protected proguard.optimize.evaluation.Value getMethodParameterValue ( proguard.optimize.evaluation.Clazz clazz , proguard.optimize.evaluation.Method method , int parameterIndex , java.lang.String type , proguard.optimize.evaluation.Clazz referencedClass ) { if ( loadMethodParameterValues ) { proguard.optimize.evaluation.Value value = proguard.optimize.evaluation.StoringInvocationUnit . getMethodParameterValue ( method , parameterIndex ) ; if ( value != null ) { return value ; } } return super . getMethodParameterValue ( clazz , method , parameterIndex , type , referencedClass ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { mSnapshot = new com.android.tools.perflib.heap.Snapshot ( new com.android.tools.perflib.heap.io.InMemoryBuffer ( NUMBER_CONSTANT ) ) ; mSnapshot . setHeapTo ( NUMBER_CONSTANT , STRING_CONSTANT ) ; mDummyClass . setFields ( new com.android.tools.perflib.heap.Field [ NUMBER_CONSTANT ] ) ; mSnapshot . addClass ( NUMBER_CONSTANT , mDummyClass ) ; }
private void sendImsFeatureStatusChanged ( int slot , int feature , int status ) { for ( java.util.Iterator < com.android.ims.internal.IImsServiceFeatureCallback > i = mImsStatusCallbacks . iterator () ; i . hasNext () ; ) { com.android.ims.internal.IImsServiceFeatureCallback callbacks = i . next () ; try { callbacks . imsStatusChanged ( slot , feature , status ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( e . getMessage () ) ) ) ; i . remove () ; } } }
@ android.annotation.NonNull public android.app.admin.DevicePolicyManager getParentProfileInstance ( @ android.annotation.NonNull android.content.ComponentName admin ) { throwIfParentInstance ( STRING_CONSTANT ) ; try { if ( ! ( mService . isManagedProfile ( admin ) ) ) { throw new java.lang.SecurityException ( STRING_CONSTANT ) ; } return new android.app.admin.DevicePolicyManager ( mContext , mService , true ) ; } catch ( android.os.RemoteException e ) { throw e . rethrowFromSystemServer () ; } }
public void testMergeWrite ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger () ; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger () ; java.io.File folder = getWrittenResources () ; com.android.ide.common.res2.ResourceSet writtenSet = new com.android.ide.common.res2.ResourceSet ( STRING_CONSTANT ) ; writtenSet . addSource ( folder ) ; writtenSet . loadFromFiles ( logger ) ; compareResourceMaps ( merger , writtenSet , false ) ; checkLogger ( logger ) ; }
private void addRemoteAddonSysImg ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay vendor , com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abi ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder . newAddonSysImg ( version , vendor , tag , abi , revision ) . create () ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , NUMBER_CONSTANT ) ; mRemotePkgs . put ( d . getType () , r ) ; }
@ java.lang.Override public void put ( com.ibm.icu.impl.UResource.Key key , com.ibm.icu.impl.UResource.Value value ) { if ( key . contentEquals ( STRING_CONSTANT ) ) {} else if ( key . contentEquals ( STRING_CONSTANT ) ) { cacheData . setPerUnitFormatterIfAbsent ( unit , width , value ) ; } else { if ( ! ( hasPatterns ) ) { builder . add ( key , value . getString () ) ; } } }
private static boolean isDebugManifest ( com.android.tools.lint.detector.api.XmlContext context , java.io.File manifestFile ) { com.android.builder.model.AndroidProject model = context . getProject () . getGradleProjectModel () ; if ( model != null ) { for ( com.android.builder.model.BuildTypeContainer container : model . getBuildTypes () ) { if ( container . getBuildType () . isDebuggable () ) { if ( manifestFile . equals ( container . getSourceProvider () . getManifestFile () ) ) { return true ; } } } } return false ; }
private void writeEmptyBlock ( ) throws java.io.IOException { writeDebugBegin ( currentClass , currentLine ) ; writer . writeCatchBlockIds ( currentCatchList ) ; writer . writeKeyword ( Token.BLOCK ) ; writer . writeOpen () ; writer . writeOpenNodeList () ; writer . writeCloseNodeList () ; writeDebugEnd ( currentClass , currentLine ) ; writer . writeClose () ; }
@ org.junit.Test public void testGetCurrentNetworkWpsNfcConfigurationToken ( ) throws java.lang.Exception { java.lang.String token = STRING_CONSTANT ; org.mockito.Mockito . when ( mSupplicantStaNetworkMock . getWpsNfcConfigurationToken () ) . thenReturn ( token ) ; executeAndValidateInitializationSequence () ; assertTrue ( ( ( mDut . getCurrentNetworkWpsNfcConfigurationToken () ) == null ) ) ; executeAndValidateConnectSequence ( NUMBER_CONSTANT , false , false ) ; assertEquals ( token , mDut . getCurrentNetworkWpsNfcConfigurationToken () ) ; }
public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption ( int subId , int keyType , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions . checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , STRING_CONSTANT ) ) ) { return null ; } return phone . getCarrierInfoForImsiEncryption ( keyType ) ; } else { loge ( ( STRING_CONSTANT + subId ) ) ; return null ; } }
@ java.lang.Override public void visibleAreaChanged ( com.intellij.execution.impl.VisibleAreaEvent e ) { java.awt.Rectangle oldR = e . getOldRectangle () ; if ( ( ( ( oldR != null ) && ( ( oldR.height ) <= NUMBER_CONSTANT ) ) && ( ( e . getNewRectangle () . height ) > NUMBER_CONSTANT ) ) && ( ! ( shouldPreserveCurrentVisualArea () ) ) ) { scrollToEnd () ; } }
public void testVrHighPerformanceH264 ( ) throws java.lang.Exception { if ( ! ( supportsVrHighPerformance () ) ) { android.cts.util.MediaUtils . skipTest ( android.media.cts.DecoderTest.TAG , STRING_CONSTANT ) ; return; } boolean h264IsReady = android.media.cts.DecoderTest . doesMimeTypeHaveVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_AVC ) ; assertTrue ( STRING_CONSTANT , h264IsReady ) ; }
@ java.lang.Override public void onClick ( android.view.View view ) { shareIntent . setClassName ( com.android.cts.verifier.managedprovisioning.NfcTestActivity.NFC_BEAM_PACKAGE , com.android.cts.verifier.managedprovisioning.NfcTestActivity.NFC_BEAM_ACTIVITY ) ; try { startActivity ( shareIntent ) ; } catch ( android.content.ActivityNotFoundException e ) { android.widget.Toast . makeText ( this , R.string.provisioning_byod_cannot_resolve_beam_activity , Toast.LENGTH_SHORT ) . show () ; android.util.Log . e ( com.android.cts.verifier.managedprovisioning.NfcTestActivity.TAG , STRING_CONSTANT , e ) ; } }
public org.eclipse.swt.graphics.Color getBackground ( java.lang.Object element , int columnIndex ) { if ( element instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) { if ( ( ( ( com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ( element ) ) . getState () ) == ( com.android.sdkuilib.internal.repository.PackagesPage.PkgState.NEW_AVAILABLE ) ) {} else if ( ( ( ( com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ( element ) ) . getState () ) == ( com.android.sdkuilib.internal.repository.PackagesPage.PkgState.UPDATE_AVAILABLE ) ) { return mColorUpdate ; } } return null ; }
public void testConfigurationUpdatesWhenRotatingWhileFullscreen ( ) throws java.lang.Exception { if ( ! ( supportsScreenRotation () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } setDeviceRotation ( NUMBER_CONSTANT ) ; launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes initialSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; rotateAndCheckSizes ( initialSizes ) ; }
private void onDataConnectionRedirected ( java.lang.String redirectUrl ) { if ( ! ( android.text.TextUtils . isEmpty ( redirectUrl ) ) ) { android.content.Intent intent = new android.content.Intent ( com.android.internal.telephony.TelephonyIntents.ACTION_CARRIER_SIGNAL_REDIRECTED ) ; intent . putExtra ( TelephonyIntents.EXTRA_REDIRECTION_URL_KEY , redirectUrl ) ; mPhone . getCarrierSignalAgent () . notifyCarrierSignalReceivers ( intent ) ; log ( ( STRING_CONSTANT + redirectUrl ) ) ; } }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.Boolean bluetoothHidDeviceReplyReport ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.String deviceID , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer type , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer id , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.String report ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile ) == null ) { return false ; } android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade . getDevice ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . getConnectedDevices () , deviceID ) ; byte [] reportByteArray = report . getBytes () ; return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . replyReport ( device , ( ( byte ) ( ( int ) ( type ) ) ) , ( ( byte ) ( ( int ) ( id ) ) ) , reportByteArray ) ; }
private void addWakeupEvent ( android.net.metrics.WakeupEvent event ) { java.lang.String iface = event.iface ; mWakeupEvents . append ( event ) ; android.net.metrics.WakeupStats stats = mWakeupStats . get ( iface ) ; if ( stats == null ) { stats = new android.net.metrics.WakeupStats ( iface ) ; mWakeupStats . put ( iface , stats ) ; } stats . countEvent ( event ) ; }
@ org.junit.Test public void Test4089106 () { com.ibm.icu.util.TimeZone def = com.ibm.icu.util.TimeZone . getDefault () ; try { com.ibm.icu.util.TimeZone z = new com.ibm.icu.util.SimpleTimeZone ( ( ( int ) ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ; com.ibm.icu.util.TimeZone . setDefault ( z ) ; z = com.ibm.icu.util.TimeZone . getDefault () ; com.ibm.icu.text.SimpleDateFormat f = new com.ibm.icu.text.SimpleDateFormat () ; if ( ! ( f . getTimeZone () . equals ( z ) ) ) errln ( STRING_CONSTANT ) ; } finally { com.ibm.icu.util.TimeZone . setDefault ( def ) ; } }
public java.lang.String getClassName () { if ( ( className ) == null ) { if ( ! ( isReference () ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + ( descriptor ) ) ) ; } if ( ( descriptor . charAt ( NUMBER_CONSTANT ) ) == CHAR_CONS ) { className = descriptor ; } else { className = descriptor . substring ( NUMBER_CONSTANT , ( ( descriptor . length () ) - NUMBER_CONSTANT ) ) ; } } return className ; }
@ org.junit.Test public void parseCacheHeaders_serverRelative () { long now = java.lang.System . currentTimeMillis () ; headers . put ( STRING_CONSTANT , com.android.volley.toolbox.HttpHeaderParserTest . rfc1123Date ( ( now + ( com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS ) ) ) ) ; headers . put ( STRING_CONSTANT , com.android.volley.toolbox.HttpHeaderParserTest . rfc1123Date ( ( now + ( NUMBER_CONSTANT * ( com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS ) ) ) ) ) ; com.android.volley.Cache.Entry entry = com.android.volley.toolbox.HttpHeaderParser . parseCacheHeaders ( response ) ; assertEqualsWithin ( ( now + ( NUMBER_CONSTANT * ( com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS ) ) ) , entry.ttl , com.android.volley.toolbox.HttpHeaderParserTest.ONE_MINUTE_MILLIS ) ; org.junit.Assert . assertEquals ( entry.softTtl , entry.ttl ) ; }
public void setRemoteFeatureMask ( int supportedFeatures ) { if ( com.android.bluetooth.map.BluetoothMapMasInstance.V ) android.util.Log . v ( TAG , ( STRING_CONSTANT + ( mRemoteFeatureMask ) ) ) ; mRemoteFeatureMask = supportedFeatures ; if ( ( mObserver ) != null ) { mObserver . setObserverRemoteFeatureMask ( mRemoteFeatureMask ) ; if ( com.android.bluetooth.map.BluetoothMapMasInstance.V ) android.util.Log . v ( TAG , ( STRING_CONSTANT + ( mRemoteFeatureMask ) ) ) ; } }
public void visitBranchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.BranchInstruction branchInstruction ) { branchInstruction.branchOffset = newBranchOffset ( offset , branchInstruction.branchOffset , newOffset ) ; instructionWriter . visitBranchInstruction ( clazz , method , codeAttribute , newOffset , branchInstruction ) ; newOffset += branchInstruction . length ( newOffset ) ; }
@ java.lang.Override public void checkClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( ( classNode.name . indexOf ( CHAR_CONS ) ) != ( - NUMBER_CONSTANT ) ) && ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) == NUMBER_CONSTANT ) ) { return; } if ( com.android.tools.lint.checks.ViewConstructorDetector . isViewClass ( context , classNode ) ) { com.android.tools.lint.checks.ViewConstructorDetector . checkConstructors ( context , classNode ) ; } }
@ java.lang.Override public void onUserRestrictionsChanged ( int userId , android.os.Bundle newRestrictions , android.os.Bundle prevRestrictions ) { final boolean bluetoothDisallowed = newRestrictions . getBoolean ( UserManager.DISALLOW_BLUETOOTH ) ; if ( ( ( mEnable ) || ( mEnableExternal ) ) && bluetoothDisallowed ) { try { disable ( STRING_CONSTANT , true ) ; } catch ( android.os.RemoteException e ) {} } }
@ com.android.annotations.NonNull @ java.lang.Override public java.util.List < java.io.File > getJavaClassFolders () { if ( ( mJavaClassFolders ) == null ) { mJavaClassFolders = new java.util.ArrayList < java.io.File > ( NUMBER_CONSTANT ) ; java.io.File outputClassFolder = mVariant . getMainArtifact () . getClassesFolder () ; if ( outputClassFolder . exists () ) { mJavaClassFolders . add ( outputClassFolder ) ; } } return mJavaClassFolders ; }
@ java.lang.Override public com.android.server.wifi.wificond.SingleScanSettings createFromParcel ( android.os.Parcel in ) { com.android.server.wifi.wificond.SingleScanSettings result = new com.android.server.wifi.wificond.SingleScanSettings () ; result.channelSettings = new ArrayList < com.android.server.wifi.wificond.ChannelSettings > () ; in . readTypedList ( result.channelSettings , ChannelSettings.CREATOR ) ; result.hiddenNetworks = new ArrayList < com.android.server.wifi.wificond.HiddenNetwork > () ; in . readTypedList ( result.hiddenNetworks , HiddenNetwork.CREATOR ) ; if ( ( in . dataAvail () ) != NUMBER_CONSTANT ) { android.util.Log . e ( com.android.server.wifi.wificond.SingleScanSettings.TAG , STRING_CONSTANT ) ; } return result ; }
private java.lang.String getRawTargetSdkVersion () { com.google.common.base.Optional < com.android.manifmerger.XmlElement > usesSdk = getByTypeAndKey ( ManifestModel.NodeTypes.USES_SDK , null ) ; if ( usesSdk . isPresent () ) { com.google.common.base.Optional < com.android.manifmerger.XmlAttribute > targetSdkVersion = usesSdk . get () . getAttribute ( com.android.manifmerger.XmlNode . fromXmlName ( STRING_CONSTANT ) ) ; if ( targetSdkVersion . isPresent () ) { return targetSdkVersion . get () . getValue () ; } } return getMinSdkVersion () ; }
private void set ( final int local , final java.lang.Object type ) { maxLocals = java.lang.Math . max ( maxLocals , ( local + NUMBER_CONSTANT ) ) ; while ( local >= ( locals . size () ) ) { locals . add ( Opcodes.TOP ) ; } locals . set ( local , type ) ; }
@ java.lang.Override public void imsStatusChanged ( int slotId , int feature , int status ) throws android.os.RemoteException { synchronized ( mLock ) { android.util.Log . i ( LOG_TAG , ( ( ( ( ( STRING_CONSTANT + slotId ) + STRING_CONSTANT ) + feature ) + STRING_CONSTANT ) + status ) ) ; if ( ( ( mSlotId ) == slotId ) && ( feature == ( mSupportedFeature ) ) ) { mFeatureStatusCached = status ; if ( ( mStatusCallback ) != null ) { mStatusCallback . notifyStatusChanged () ; } } } }
public void dragFinished ( org.eclipse.swt.dnd.DragSourceEvent e ) { if ( ( e.detail ) == ( org.eclipse.swt.dnd.DND.DROP_MOVE ) ) { mLayoutEditor . wrapUndoRecording ( STRING_CONSTANT , new java.lang.Runnable () { public void run () { mLayoutEditor . editXmlModel ( new java.lang.Runnable () { public void run () { deleteSelection ( STRING_CONSTANT , mDragSelection ) ; } } ) ; } } ) ; } mDragSelection . clear () ; mDragElements = null ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.GlobalCanvasDragInfo . getInstance () . stopDrag () ; }
@ java.lang.Override public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { org.w3c.dom.Attr nameNode = element . getAttributeNodeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_NAME ) ; if ( nameNode != null ) { java.lang.String permissionName = nameNode . getValue () ; if ( ( java.util.Arrays . binarySearch ( com.android.tools.lint.checks.SystemPermissionsDetector.SYSTEM_PERMISSIONS , permissionName ) ) >= NUMBER_CONSTANT ) { context . report ( com.android.tools.lint.checks.SystemPermissionsDetector.ISSUE , element , context . getLocation ( nameNode ) , STRING_CONSTANT , null ) ; } } }
public static void check ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { if ( ! ( file . exists () ) ) { throw new com.android.sched.util.file.NoSuchFileException ( location ) ; } if ( file . isDirectory () ) { throw new com.android.sched.util.file.NotFileException ( location ) ; } }
@ java.lang.Override public final java.nio.ByteBuffer put ( byte x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException () ; } put ( ix ( nextPutIndex () ) , x ) ; return this ; }
public java.util.concurrent.ConcurrentSkipListMap < K , V > clone () { try { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.concurrent.ConcurrentSkipListMap < K , V > clone = ( ( java.util.concurrent.ConcurrentSkipListMap < K , V > ) ( super . clone () ) ) ; clone . initialize () ; clone . buildFromSorted ( this ) ; return clone ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.InternalError () ; } }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testGetSubscriberNumber ( ) throws java.lang.Exception { com.android.server.telecom.Call mockCall = createForegroundCall () ; android.telecom.PhoneAccount fakePhoneAccount = makeQuickAccount ( STRING_CONSTANT , com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ; org.mockito.Mockito . when ( mMockPhoneAccountRegistrar . getPhoneAccountOfCurrentUser ( org.mockito.ArgumentMatchers . nullable ( android.telecom.PhoneAccountHandle . class ) ) ) . thenReturn ( fakePhoneAccount ) ; java.lang.String subscriberNumber = mBluetoothPhoneService.mBinder . getSubscriberNumber () ; org.junit.Assert . assertEquals ( subscriberNumber , ( ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_ADDRESS ) + ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ) ) ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo ) throws java.lang.Exception { com.android.jack.TestTools . checkStructure ( classpath , fileOrSourceList , withDebugInfo , false , NUMBER_CONSTANT , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [] ) ( null ) ) ) ; }
public void testEnumConstructor ( ) throws java.lang.Exception { java.lang.reflect.Constructor < > constructor = libcore.java.lang.reflect.ParameterTest.TestEnum . class . getDeclaredConstructor ( java.lang.String . class , int . class ) ; libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper helper = new libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper ( constructor ) ; helper . checkStandardParametersBehavior () . checkParametersToString ( STRING_CONSTANT ) . checkParametersNoVarArgs () ; helper . getParameterTestHelper ( NUMBER_CONSTANT ) . checkGetType ( java.lang.String . class ) . checkGetParameterizedType ( STRING_CONSTANT ) ; helper . getParameterTestHelper ( NUMBER_CONSTANT ) . checkGetType ( int . class ) . checkGetParameterizedType ( STRING_CONSTANT ) ; }
@ com.android.annotations.VisibleForTesting ( visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE ) protected void saveLocked () { java.io.FileOutputStream fos = null ; try { java.lang.String folder = com.android.prefs.AndroidLocation . getFolder () ; java.io.File f = new java.io.File ( folder , com.android.sdklib.internal.repository.SdkSourceProperties.SRC_FILENAME ) ; fos = new java.io.FileOutputStream ( f ) ; com.android.sdklib.internal.repository.SdkSourceProperties.sSourcesProperties . store ( fos , STRING_CONSTANT ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException ignore ) {} catch ( java.io.IOException ignore ) {} finally { if ( fos != null ) { try { fos . close () ; } catch ( java.io.IOException ignore ) {} } } }
@ javax.annotation.Nonnull private static java.lang.String concatClasspathStrings ( @ javax.annotation.Nonnull java.lang.String bootclasspath , @ javax.annotation.Nonnull java.lang.String classpath ) { if ( ( bootclasspath == null ) || ( bootclasspath . isEmpty () ) ) { return classpath ; } else if ( classpath . isEmpty () ) { return bootclasspath ; } else { java.lang.StringBuilder classpathStr = new java.lang.StringBuilder ( bootclasspath ) ; classpathStr . append ( java.io.File.pathSeparatorChar ) ; classpathStr . append ( classpath ) ; return classpathStr . toString () ; } }
private boolean isLegal ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { if ( ( expr . getType () ) == ( JPrimitiveTypeEnum.VOID . getType () ) ) { return true ; } return ( ( expr instanceof com.android.jack.ir.ast.JAsgOperation ) || ( expr instanceof com.android.jack.ir.ast.JVariableRef ) ) || ( expr instanceof com.android.jack.ir.ast.JMethodCall ) ; }
public java.lang.annotation.Annotation [] getAnnotations () { try { java.lang.Class < > c = java.lang.Class . forName ( ( ( getName () ) + STRING_CONSTANT ) , false , classLoader ) ; return c . getAnnotations () ; } catch ( java.lang.Exception ex ) { return java.lang.Package.NO_ANNOTATIONS ; } }
static < K , V > java.util.Map.Entry < K , V > unmodifiableEntry ( final java.util.Map.Entry < ? extends K , ? extends V > entry ) { com.google.common.base.Preconditions . checkNotNull ( entry ) ; return new com.google.common.collect.AbstractMapEntry < K , V > () { @ java.lang.Override public K getKey () { return entry . getKey () ; } @ java.lang.Override public V getValue () { return entry . getValue () ; } } ; }
@ org.junit.Test public void watchdogBitePnoGoodIncrementsMetrics () { when ( mWifiNS . selectNetwork ( anyObject () , anyObject () , anyBoolean () , anyBoolean () , anyBoolean () ) ) . thenReturn ( null ) ; mWifiConnectivityManager . handleScreenStateChanged ( false ) ; mWifiConnectivityManager . handleConnectionStateChanged ( WifiConnectivityManager.WIFI_STATE_DISCONNECTED ) ; mAlarmManager . dispatch ( WifiConnectivityManager.WATCHDOG_TIMER_TAG ) ; mLooper . dispatchAll () ; verify ( mWifiMetrics ) . incrementNumConnectivityWatchdogPnoGood () ; verify ( mWifiMetrics , never () ) . incrementNumConnectivityWatchdogPnoBad () ; }
public void testSetTestClassWithTestSuiteProvider ( ) throws java.lang.Exception { mAndroidTestRunner . setTestClassName ( android.test.AndroidTestRunnerTest.SampleTestSuiteProvider . class . getName () , null ) ; java.util.List < junit.framework.TestCase > testCases = mAndroidTestRunner . getTestCases () ; java.util.List < java.lang.String > testNames = new java.util.ArrayList <> () ; for ( junit.framework.TestCase testCase : testCases ) { testNames . add ( testCase . getName () ) ; } assertEquals ( java.util.Arrays . asList ( STRING_CONSTANT ) , testNames ) ; }
public final libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate addSubjectAlternativeName ( int type , java.lang.String name ) { if ( ( subjectAlternativeNames ) == null ) { subjectAlternativeNames = new java.util.ArrayList < java.util.List < > > () ; } java.util.LinkedList < java.lang.Object > entry = new java.util.LinkedList < java.lang.Object > () ; entry . add ( type ) ; entry . add ( name ) ; subjectAlternativeNames . add ( entry ) ; return this ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass () ) != ( o . getClass () ) ) ) return false ; com.google.gct.testing.CloudTestConfigurationImpl that = ( ( com.google.gct.testing.CloudTestConfigurationImpl ) ( o ) ) ; return ( id ) == ( that.id ) ; }
public void handlePackagesChanged () { final int oldItemCount = getCount () ; rebuildList () ; notifyDataSetChanged () ; final int newItemCount = getCount () ; if ( newItemCount == NUMBER_CONSTANT ) { finish () ; } else if ( newItemCount != oldItemCount ) { resizeGrid () ; } }
private static java.nio.file.Path createAndRegisterLambdaDumpDirectory ( ) throws java.io.IOException { java.lang.String propertyValue = java.lang.System . getProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY ) ; if ( propertyValue != null ) { return java.nio.file.Paths . get ( propertyValue ) ; } java.nio.file.Path dumpDirectory = java.nio.file.Files . createTempDirectory ( STRING_CONSTANT ) ; java.lang.System . setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory . toString () ) ; com.google.devtools.build.android.desugar.Desugar . deleteTreeOnExit ( dumpDirectory ) ; return dumpDirectory ; }
public static void create ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) throws com.android.sched.util.file.CannotCreateFileException , com.android.sched.util.file.FileAlreadyExistsException { assert file != null ; if ( file . exists () ) { throw new com.android.sched.util.file.FileAlreadyExistsException ( location ) ; } if ( file . mkdir () ) { com.android.sched.util.file.Directory.logger . log ( java.util.logging.Level.FINE , STRING_CONSTANT , new java.lang.Object [] { location . getDescription () , file . getAbsoluteFile () } ) ; } else { if ( ! ( file . exists () ) ) { throw new com.android.sched.util.file.CannotCreateFileException ( location ) ; } } }
private static java.lang.Class < > findExpectedType ( java.lang.Class < > fromClass ) { for ( java.lang.Class < > c = fromClass ; c != ( java.lang.Object . class ) ; c = c . getSuperclass () ) { for ( java.lang.reflect.Method method : c . getDeclaredMethods () ) { if ( org.junit.internal.matchers.TypeSafeMatcher . isMatchesSafelyMethod ( method ) ) { return method . getParameterTypes () [ NUMBER_CONSTANT ] ; } } } throw new java.lang.Error ( STRING_CONSTANT ) ; }
@ java.lang.Override public void setIsConferenced ( java.lang.String callId , java.lang.String conferenceCallId ) { logIncoming ( STRING_CONSTANT , callId , conferenceCallId ) ; com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs . obtain () ; args.arg1 = callId ; args.arg2 = conferenceCallId ; mHandler . obtainMessage ( com.android.server.telecom.ConnectionServiceWrapper.MSG_SET_IS_CONFERENCED , args ) . sendToTarget () ; }
@ java.lang.Override public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface definedClass = method . getEnclosingType () ; if ( ( ( ! ( definedClass instanceof com.android.jack.ir.ast.JDefinedClass ) ) || ( method . isNative () ) ) || ( method . isAbstract () ) ) { return; } com.android.jack.transformations.enums.opt.SwitchEnumUsageCollector.Visitor visitor = new com.android.jack.transformations.enums.opt.SwitchEnumUsageCollector.Visitor ( ( ( com.android.jack.ir.ast.JDefinedClass ) ( definedClass ) ) ) ; visitor . accept ( method ) ; }
private static void checkAndUpdateBooleanAliases ( java.util.Map < java.lang.String , java.lang.reflect.Field > nameToFieldMap , java.util.Map < java.lang.String , java.lang.String > booleanAliasMap , java.lang.String optionName ) { com.google.devtools.common.options.IsolatedOptionsData . checkForCollisions ( nameToFieldMap , ( STRING_CONSTANT + optionName ) , STRING_CONSTANT ) ; booleanAliasMap . put ( ( STRING_CONSTANT + optionName ) , optionName ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.Boolean bluetoothHidDeviceSendReport ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.String deviceID , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Integer id , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.String report ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile ) == null ) { return false ; } android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade . getDevice ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . getConnectedDevices () , deviceID ) ; byte [] reportByteArray = report . getBytes () ; return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . sendReport ( device , id , reportByteArray ) ; }
public void testConfigurationUpdatesWhenRotatingWhileFullscreen ( ) throws java.lang.Exception { setDeviceRotation ( NUMBER_CONSTANT ) ; launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; setDeviceRotation ( NUMBER_CONSTANT ) ; final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; assertSizesRotate ( orientationASizes , orientationBSizes ) ; }
void putHexString ( java.lang.String original ) { java.lang.String s = checkString ( original , NUMBER_CONSTANT ) ; this . makeValid () ; int usedLen = java.math.NativeBN . BN_hex2bn ( this . bignum , s ) ; if ( usedLen < ( s . length () ) ) { throw invalidBigInteger ( original ) ; } }
private void runConfigMatchTest ( java.lang.String refConfig , int resultIndex , java.lang.String . . . configs ) { com.android.ide.common.resources.configuration.FolderConfiguration reference = com.android.ide.common.resources.configuration.FolderConfiguration . getConfig ( com.android.ide.common.resources.configuration.FolderConfigurationTest . getFolderSegments ( refConfig ) ) ; assertNotNull ( reference ) ; java.util.List < ? extends com.android.ide.common.resources.configuration.Configurable > list = getConfigurable ( configs ) ; com.android.ide.common.resources.configuration.Configurable match = reference . findMatchingConfigurable ( list ) ; assertEquals ( resultIndex , list . indexOf ( match ) ) ; }
public static java.util.Map < java.lang.String , java.lang.String > getHardwareProperties ( com.android.sdklib.devices.Device d ) { java.util.Map < java.lang.String , java.lang.String > props = com.android.sdklib.devices.DeviceManager . getHardwareProperties ( d . getDefaultState () ) ; for ( com.android.sdklib.devices.State s : d . getAllStates () ) { if ( s . getKeyState () . equals ( KeyboardState.HIDDEN ) ) { props . put ( STRING_CONSTANT , com.android.sdklib.devices.DeviceManager . getBooleanVal ( true ) ) ; } } return props ; }
@ org.junit.Test @ com.android.devtools.systemimage.uitest.annotations.TestInfo ( id = STRING_CONSTANT ) public void testCameraAppDisabled ( ) throws java.lang.Exception { enableSampleDeviceAdmin () ; if ( verifyCameraAppDisabled () ) { setCameraEnabled ( true ) ; } org.junit.Assert . assertFalse ( verifyCameraAppDisabled () ) ; setCameraEnabled ( false ) ; gotoCameraApp () ; new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher ( device ) . checkForCondition () ; org.junit.Assert . assertTrue ( verifyCameraAppDisabled () ) ; setCameraEnabled ( true ) ; org.junit.Assert . assertFalse ( verifyCameraAppDisabled () ) ; }
private boolean isDexFilledNewArrayCompatible ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNewArray newArray ) { com.android.jack.ir.ast.JType elementType = newArray . getArrayType () . getElementType () ; java.util.List < com.android.jack.ir.ast.JExpression > initializers = newArray . getInitializers () ; if ( ( ( ( ! ( initializers . isEmpty () ) ) && ( ( initializers . size () ) <= NUMBER_CONSTANT ) ) && ( ( newArray . getDims () . size () ) == NUMBER_CONSTANT ) ) && ( elementType == ( JPrimitiveTypeEnum.INT . getType () ) ) ) { return true ; } return false ; }
private void sendUuidIntent ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.RemoteDevices.DeviceProperties prop = getDeviceProperties ( device ) ; android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_UUID ) ; intent . putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent . putExtra ( BluetoothDevice.EXTRA_UUID , ( prop == null ? null : prop.mUuids ) ) ; com.android.bluetooth.btservice.RemoteDevices.mAdapterService . initProfilePriorities ( device , ( prop == null ? null : prop.mUuids ) ) ; com.android.bluetooth.btservice.RemoteDevices.mAdapterService . sendBroadcast ( intent , AdapterService.BLUETOOTH_ADMIN_PERM ) ; com.android.bluetooth.btservice.RemoteDevices.mSdpTracker . remove ( device ) ; }
static int indexOf ( java.lang.Object o , java.lang.Object [] data , int from , int to ) { if ( o == null ) { for ( int i = from ; i < to ; i ++ ) { if ( ( data [ i ] ) == null ) { return i ; } } } else { for ( int i = from ; i < to ; i ++ ) { if ( o . equals ( data [ i ] ) ) { return i ; } } } return - NUMBER_CONSTANT ; }
@ java.lang.Override public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { if ( insertType == ( com.android.ide.common.api.InsertType.CREATE ) ) { java.lang.String include = mRulesEngine . displayIncludeSourceInput () ; if ( include != null ) { node . editXml ( STRING_CONSTANT , new com.android.ide.common.layout.PropertySettingNodeHandler ( null , com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.ATTR_LAYOUT , ( ( include . length () ) > NUMBER_CONSTANT ? include : null ) ) ) ; } else { parent . removeChild ( node ) ; } } }
public void testLibraries ( ) throws java.lang.Exception { java.io.File project = getProjectDir ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; checkDriver ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , STRING_CONSTANT , com.android.tools.lint.LintCliFlags.ERRNO_SUCCESS , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , new java.io.File ( project , STRING_CONSTANT ) . getPath () , STRING_CONSTANT , STRING_CONSTANT , project . getPath () } ) ; }
int lineNumber ( int offset ) { for ( int i = NUMBER_CONSTANT ; i < ( myOffsets . size () ) ; i ++ ) { if ( offset < ( myOffsets . get ( i ) ) ) { return i ; } } return - NUMBER_CONSTANT ; }
@ java.lang.Override public boolean onKeyDown ( int keyCode , android.view.KeyEvent event ) { switch ( keyCode ) { case android.view.KeyEvent.KEYCODE_DPAD_LEFT : if ( movePrevious () ) { playSoundEffect ( SoundEffectConstants.NAVIGATION_LEFT ) ; return true ; } break; case android.view.KeyEvent.KEYCODE_DPAD_RIGHT : if ( moveNext () ) { playSoundEffect ( SoundEffectConstants.NAVIGATION_RIGHT ) ; return true ; } break; case android.view.KeyEvent.KEYCODE_DPAD_CENTER : case android.view.KeyEvent.KEYCODE_ENTER : mReceivedInvokeKeyDown = true ; } return super . onKeyDown ( keyCode , event ) ; }
@ com.android.annotations.Nullable private com.android.tools.lint.ExternalAnnotationRepository getSdkAnnotations () { java.io.File annotations = findSrcRelativeDir ( STRING_CONSTANT ) ; if ( annotations != null ) { java.util.List < java.io.File > files = java.util.Collections . singletonList ( annotations ) ; com.android.tools.lint.ExternalAnnotationRepository manager = com.android.tools.lint.ExternalAnnotationRepository . create ( null , files ) ; assertNotNull ( manager ) ; return manager ; } else {} return null ; }
@ java.lang.Override protected void test () { java.lang.String listeners = android.provider.Settings.Secure . getString ( getContentResolver () , com.android.cts.verifier.notifications.ENABLED_NOTIFICATION_LISTENERS ) ; if ( ( listeners == null ) || ( ! ( listeners . contains ( com.android.cts.verifier.notifications.LISTENER_PATH ) ) ) ) { status = PASS ; } else { status = WAIT_FOR_USER ; } }
public boolean disableRttResponder () { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( ! ( isHalStarted () ) ) return false ; if ( ( com.android.server.wifi.WifiNative.sRttResponderCmdId ) == NUMBER_CONSTANT ) { android.util.Log . e ( mTAG , STRING_CONSTANT ) ; return true ; } com.android.server.wifi.WifiNative.sRttResponderCmdId = NUMBER_CONSTANT ; return com.android.server.wifi.WifiNative . disableRttResponderNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sRttResponderCmdId ) ; } }
public java.lang.String toString () { if ( ! ( isBound () ) ) return STRING_CONSTANT ; java.net.InetAddress in ; if ( ( java.lang.System . getSecurityManager () ) != null ) in = java.net.InetAddress . getLoopbackAddress () ; else in = impl . getInetAddress () ; return ( ( ( STRING_CONSTANT + in ) + STRING_CONSTANT ) + ( impl . getLocalPort () ) ) + STRING_CONSTANT ; }
@ com.android.annotations.NonNull @ java.lang.Override public java.util.Collection < com.android.builder.model.JavaLibrary > getJavaLibraries () { java.util.Set < java.io.File > files = configuration . getFiles () ; if ( files . isEmpty () ) { return java.util.Collections . emptySet () ; } java.util.Set < com.android.builder.model.JavaLibrary > javaLibraries = com.google.common.collect.Sets . newHashSet () ; for ( java.io.File file : files ) { javaLibraries . add ( new com.android.build.gradle.internal.model.JavaLibraryImpl ( file , null , null ) ) ; } return javaLibraries ; }
@ java.lang.Override public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { if ( ( ! ( element . hasAttributeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_ID ) ) ) && ( ! ( element . hasAttributeNS ( com.android.SdkConstants.ANDROID_URI , com.android.SdkConstants.ATTR_TAG ) ) ) ) { context . report ( com.android.tools.lint.checks.MissingIdDetector.ISSUE , element , context . getLocation ( element ) , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } }
private com.android.jack.ir.JNodeInternalError translateException ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration , java.lang.Exception e , com.android.jack.ir.sourceinfo.SourceInfo info ) { com.android.jack.ir.JNodeInternalError ice = translateException ( e ) ; if ( typeDeclaration != null ) { java.lang.StringBuffer sb = new java.lang.StringBuffer () ; typeDeclaration . printHeader ( NUMBER_CONSTANT , sb ) ; ice . addNode ( typeDeclaration . getClass () . getName () , sb . toString () , info ) ; } return ice ; }
@ org.junit.Test public void TestCircularAliases () { try { android.icu.util.UResourceBundle rb = android.icu.util.UResourceBundle . getBundleInstance ( STRING_CONSTANT , STRING_CONSTANT , android.icu.dev.test.util.ICUResourceBundleTest.testLoader ) ; android.icu.util.UResourceBundle sub = rb . get ( STRING_CONSTANT ) ; java.lang.String s1 = sub . getString () ; if ( s1 != null ) { errln ( STRING_CONSTANT ) ; } } catch ( java.lang.IllegalArgumentException ex ) { logln ( STRING_CONSTANT ) ; } catch ( java.util.MissingResourceException ex ) { warnln ( ( STRING_CONSTANT + ( ex . getMessage () ) ) ) ; } }
public static void setupLogs ( ) throws com.android.jack.CLILogConfiguration.LogConfigurationException { com.android.jack.CLILogConfiguration.LogLevel level = com.android.jack.CLILogConfiguration.LogLevel.WARNING ; java.lang.String stringLevel = java.lang.System . getProperty ( STRING_CONSTANT ) ; if ( stringLevel != null ) { try { level = new com.android.sched.util.codec.EnumCodec < com.android.jack.CLILogConfiguration.LogLevel > ( com.android.jack.CLILogConfiguration.LogLevel . class ) . checkString ( new com.android.sched.util.codec.CodecContext () , stringLevel ) ; } catch ( com.android.sched.util.codec.ParsingException e ) { throw new com.android.jack.CLILogConfiguration.LogConfigurationException ( e . getMessage () ) ; } } com.android.sched.util.log.LoggerFactory . configure ( level ) ; }
public static void main ( java.lang.String [] args ) { com.android.uiautomator.DebugBridge . init () ; try { com.android.uiautomator.UiAutomatorViewer window = new com.android.uiautomator.UiAutomatorViewer () ; window . setBlockOnOpen ( true ) ; window . open () ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } finally { com.android.uiautomator.DebugBridge . terminate () ; } }
@ java.lang.Override @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed () ) ; try { return loadVDir ( parent , name ) ; } catch ( com.android.sched.util.file.NotDirectoryException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( getVDirLocation ( parent , name ) , e ) ; } }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest . getResourceMerger ( false ) ; java.io.File folder = com.google.common.io.Files . createTempDir () ; merger . writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files . createTempDir () , mPngCruncher , false , false ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger () ; assertTrue ( loadedMerger . loadFromBlob ( folder , true ) ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public void testRunSingleTestMethod ( ) throws java.lang.Exception { java.lang.String testMethodName = STRING_CONSTANT ; mAndroidTestRunner . setTestClassName ( android.test.AndroidTestRunnerTest.TwoTestTestCase . class . getName () , testMethodName ) ; java.util.List < junit.framework.TestCase > testCases = mAndroidTestRunner . getTestCases () ; java.util.List < java.lang.String > testNames = new java.util.ArrayList <> () ; for ( junit.framework.TestCase testCase : testCases ) { testNames . add ( testCase . getName () ) ; } assertEquals ( java.util.Arrays . asList ( testMethodName ) , testNames ) ; }
@ org.junit.Test public void testParseICMPv6NS () { final java.lang.String packet = STRING_CONSTANT + ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; final java.lang.String expected = STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( expected , getSummary ( packet ) ) ; }
public com.android.ims.ImsEcbm getEcbmInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mEcbm ) != null ) && ( mEcbm . isBinderAlive () ) ) { return mEcbm ; } checkAndThrowExceptionIfServiceUnavailable () ; try { com.android.ims.internal.IImsEcbm iEcbm = mImsServiceProxy . getEcbmInterface () ; if ( iEcbm == null ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , ImsReasonInfo.CODE_ECBM_NOT_SUPPORTED ) ; } mEcbm = new com.android.ims.ImsEcbm ( iEcbm ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mEcbm ; }
public void test_limiting_to_1method_and_run_for_SimpleTest2_should_perform_test () { java.lang.Class < > target = vogar.target.junit3.SimpleTest2 . class ; java.util.List < vogar.target.junit.VogarTest > tests = vogar.target.junit.JUnitRunnerFactory . createVogarTests ( target , STRING_CONSTANT , vogar.target.JUnitRunnerTest.EMPTY_ARGS ) ; vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , skipPastReference , testEnvironment , NUMBER_CONSTANT , tests ) ; runner . run ( null ) ; org.mockito.Mockito . verify ( monitor ) . outcomeStarted ( ( ( target . getName () ) + STRING_CONSTANT ) ) ; org.mockito.Mockito . verify ( monitor ) . outcomeFinished ( Result.SUCCESS ) ; }
@ com.android.server.hdmi.HdmiAnnotations.ServiceThreadOnly void startQueuedActions () { assertRunOnServiceThread () ; for ( com.android.server.hdmi.HdmiCecFeatureAction action : new java.util.ArrayList ( mActions ) ) { if ( ! ( action . started () ) ) { android.util.Slog . i ( com.android.server.hdmi.HdmiCecLocalDevice.TAG , ( STRING_CONSTANT + action ) ) ; action . start () ; } } }
private void addStreamToTests ( com.android.cts.verifier.ArrayTestListAdapter streams , com.android.cts.verifier.streamquality.StreamingVideoActivity.Stream stream ) { android.content.Intent i = new android.content.Intent ( this , com.android.cts.verifier.streamquality.PlayVideoActivity . class ) ; i . putExtra ( PlayVideoActivity.EXTRA_STREAM , stream ) ; streams . add ( com.android.cts.verifier.TestListAdapter.TestListItem . newTest ( stream.name , com.android.cts.verifier.streamquality.PlayVideoActivity . getTestId ( stream.code ) , i ) ) ; }
public void test_reset ( ) throws java.io.IOException { java.io.InputStream is = new java.io.ByteArrayInputStream ( new byte [ NUMBER_CONSTANT ] ) ; try ( java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( is ) ) { try { iis . reset () ; fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) {} } }
android.content.res.Configuration applyConfigCompatMainThread ( int displayDensity , android.content.res.Configuration config , android.content.res.CompatibilityInfo compat ) { if ( config == null ) { return null ; } if ( ! ( compat . supportsScreen () ) ) { mMainThreadConfig . setTo ( config ) ; config = mMainThreadConfig ; compat . applyToConfiguration ( displayDensity , config ) ; } return config ; }
public void testSetTestClassWithTestSuite ( ) throws java.lang.Exception { mAndroidTestRunner . setTestClassName ( android.test.AndroidTestRunnerTest.SampleTestSuite . class . getName () , null ) ; java.util.List < junit.framework.TestCase > testCases = mAndroidTestRunner . getTestCases () ; java.util.List < java.lang.String > testNames = new java.util.ArrayList <> () ; for ( junit.framework.TestCase testCase : testCases ) { testNames . add ( testCase . getName () ) ; } assertEquals ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) , testNames ) ; }
public void test_ConstructorLjava_net_Proxy_Exception () { java.net.SocketAddress addr1 = java.net.InetSocketAddress . createUnresolved ( STRING_CONSTANT , NUMBER_CONSTANT ) ; java.net.Proxy proxy1 = new java.net.Proxy ( java.net.Proxy.Type.HTTP , addr1 ) ; try { new java.net.Socket ( proxy1 ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} java.net.Proxy proxy2 = new java.net.Proxy ( java.net.Proxy.Type.SOCKS , addr1 ) ; new java.net.Socket ( proxy2 ) ; new java.net.Socket ( java.net.Proxy.NO_PROXY ) ; }
public void dconst ( final double cst ) { long bits = java.lang.Double . doubleToLongBits ( cst ) ; if ( ( bits == NUMBER_CONSTANT ) || ( bits == NUMBER_CONSTANT ) ) { mv . visitInsn ( ( ( org.objectweb.asm.Opcodes.DCONST_0 ) + ( ( int ) ( cst ) ) ) ) ; } else { mv . visitLdcInsn ( cst ) ; } }
public int checkRightsStatus ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_CONSTANT ) ) ) || ( ! ( DrmStore.Action . isValid ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return _checkRightsStatus ( mUniqueId , path , action ) ; }
@ org.junit.Test public void testDefaultMethodFails ( ) throws java.lang.Exception { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( com.google.devtools.build.android.desugar.Java7CompatibilityTest.WithDefault . class . getName () ) ; try { reader . accept ( new com.google.devtools.build.android.desugar.Java7Compatibility ( null , null , null ) , NUMBER_CONSTANT ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException expected ) { com.google.common.truth.Truth . assertThat ( expected ) . hasMessageThat () . contains ( STRING_CONSTANT ) ; } }
public static com.android.jack.dx.rop.code.Rop opReturn ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type . getBasicFrameType () ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.RETURN_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.RETURN_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.RETURN_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.RETURN_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.RETURN_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_VOID : return com.android.jack.dx.rop.code.Rops.RETURN_VOID ; } return com.android.jack.dx.rop.code.Rops . throwBadType ( type ) ; }
public void test_RAND_bytes_Success ( ) throws java.lang.Exception { byte [] output = new byte [ NUMBER_CONSTANT ] ; org.apache.harmony.xnet.provider.jsse.NativeCrypto . RAND_bytes ( output ) ; boolean isZero = true ; for ( int i = NUMBER_CONSTANT ; i < ( output.length ) ; i ++ ) { isZero &= ( output [ i ] ) == NUMBER_CONSTANT ; } assertFalse ( ( STRING_CONSTANT + STRING_CONSTANT ) , isZero ) ; }
public static android.content.Intent createManageBlockedNumbersIntent ( android.content.Context context ) { if ( ( com.android.dialer.blocking.FilteredNumberCompat . canUseNewFiltering () ) && ( com.android.dialer.blocking.FilteredNumberCompat . hasMigratedToNewBlocking ( context ) ) ) { return context . getSystemService ( android.telecom.TelecomManager . class ) . createManageBlockedNumbersIntent () ; } android.content.Intent intent = new android.content.Intent ( STRING_CONSTANT ) ; intent . setPackage ( context . getPackageName () ) ; return intent ; }
private int [] readChunkLengths ( java.io.BufferedInputStream bundle ) throws java.io.IOException { int [] chunks = new int [ NUMBER_CONSTANT ] ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; chunks [ NUMBER_CONSTANT ] = readInt ( bundle ) ; return chunks ; }
@ android.test.suitebuilder.annotation.SmallTest @ org.junit.Test public void testRegistrationConfigConstructorsEqual () { android.telephony.ims.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder () . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_MMTEL ) . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_RCS ) . build () ; android.telephony.ims.stub.ImsFeatureConfiguration testConfig2 = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder () . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_RCS ) . addFeature ( NUMBER_CONSTANT , ImsFeature.FEATURE_MMTEL ) . build () ; junit.framework.Assert . assertEquals ( testConfig , testConfig2 ) ; }
private void checkSigningBlockDoneIfEnabled () { if ( ( ! ( mV2SignaturePending ) ) && ( ! ( mV3SignaturePending ) ) ) { return; } if ( ( mAddSigningBlockRequest ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } if ( ! ( mAddSigningBlockRequest . isDone () ) ) { throw new java.lang.IllegalStateException ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; } mAddSigningBlockRequest = null ; mV2SignaturePending = false ; mV3SignaturePending = false ; }
@ java.lang.Override public void onShowView () { super . onShowView () ; com.google.gwt.user.client.Window . enableScrolling ( false ) ; if ( prefs . hideTopMenu () ) { com.google.gerrit.client.Gerrit . setHeaderVisible ( false ) ; } resizeHandler = com.google.gwt.user.client.Window . addResizeHandler ( new com.google.gwt.event.logical.shared.ResizeHandler () { @ java.lang.Override public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror () ; } } ) ; }
private com.google.inject.Injector createSshInjector () { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > () ; if ( sshd ) { modules . add ( new com.google.gerrit.sshd.SshModule () ) ; if ( slave ) { modules . add ( new com.google.gerrit.sshd.commands.SlaveCommandModule () ) ; } else { modules . add ( new com.google.gerrit.sshd.commands.MasterCommandModule () ) ; } } else { modules . add ( new com.google.gerrit.server.ssh.NoSshModule () ) ; } return sysInjector . createChildInjector ( modules ) ; }
@ org.kohsuke.args4j.Argument ( index = NUMBER_CONSTANT , required = true , multiValued = true , metaVar = STRING_CONSTANT , usage = STRING_CONSTANT ) void addChange ( java.lang.String token ) { try { changeArgumentParser . addChange ( token , changes , projectState ) ; } catch ( java.io.IOException | com.google.gerrit.sshd.commands.UnloggedFailure e ) { throw new java.lang.IllegalArgumentException ( e . getMessage () , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT , e ) ; } catch ( com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT , e ) ; } }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; a1 = a1 . dereference () ; if ( ! ( a1 instanceof com.googlecode.prolog_cafe.builtin.IntegerTerm ) ) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( STRING_CONSTANT , a1 ) ; } else { engine . cut ( ( ( com.googlecode.prolog_cafe.builtin.IntegerTerm ) ( a1 ) ) . intValue () ) ; } return cont ; }
private void load ( ) throws java.io.IOException { close () ; reader = repo . newObjectReader () ; org.eclipse.jgit.lib.Ref ref = repo . getRefDatabase () . exactRef ( RefNames.REFS_GPG_KEYS ) ; if ( ref == null ) { return; } try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( reader ) ) { tip = rw . parseCommit ( ref . getObjectId () ) ; notes = org.eclipse.jgit.notes.NoteMap . read ( reader , tip ) ; } }
private void assertStatus ( org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus , java.lang.String expectedMessage ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result . getRemoteUpdate ( ref ) ; com.google.common.truth.Truth . assertThat ( refUpdate . getStatus () ) . named ( message ( refUpdate ) ) . isEqualTo ( expectedStatus ) ; com.google.common.truth.Truth . assertThat ( refUpdate . getMessage () ) . isEqualTo ( expectedMessage ) ; }
@ java.lang.Override protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { rsp . setContentType ( STRING_CONSTANT ) ; try ( java.io.InputStream in = openRobotsFile () ; java.io.OutputStream out = rsp . getOutputStream () ) { com.google.common.io.ByteStreams . copy ( in , out ) ; } }
@ java.lang.Override public boolean equals ( final java.lang.Object other ) { if ( other == null ) return false ; if ( ( getClass () ) == ( other . getClass () ) ) { final com.google.gerrit.server.query.WildPatternPredicate < > p = ( ( com.google.gerrit.server.query.WildPatternPredicate < > ) ( other ) ) ; return com.google.gerrit.server.query.WildPatternPredicate . getOperator () . equals ( p . getOperator () ) ; } return false ; }
@ java.lang.Override public void onTopicEdited ( com.google.gerrit.extensions.events.TopicEditedListener.Event ev ) { try { com.google.gerrit.reviewdb.client.Change change = getChange ( ev . getChange () ) ; com.google.gerrit.server.events.TopicChangedEvent event = new com.google.gerrit.server.events.TopicChangedEvent ( change ) ; event.change = changeAttributeSupplier ( change ) ; event.changer = accountAttributeSupplier ( ev . getEditor () ) ; event.oldTopic = ev . getOldTopic () ; dispatcher . get () . postEvent ( change , event ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.common.StreamEventsApiListener.log . error ( STRING_CONSTANT , e ) ; } }
static void configure ( org.eclipse.jgit.lib.Config config , java.lang.String port ) { config . setEnum ( STRING_CONSTANT , null , STRING_CONSTANT , IndexType.ELASTICSEARCH ) ; config . setString ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; config . setString ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; config . setString ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , port ) ; }
@ org.junit.Test public void listBranchesOfNonVisibleProject_NotFound ( ) throws java.lang.Exception { blockRead ( STRING_CONSTANT ) ; setApiUser ( user ) ; exception . expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException . class ) ; gApi . projects () . name ( project . get () ) . branches () . get () ; }
public void testUSER_NoPreferredEmailUser () { setFrom ( STRING_CONSTANT ) ; final java.lang.String name = STRING_CONSTANT ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; org.easymock.EasyMock . replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create () . from ( user ) ; assertNotNull ( r ) ; assertEquals ( name , r.name ) ; assertEquals ( ident . getEmailAddress () , r.email ) ; org.easymock.EasyMock . verify ( accountCache ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void invalidate ( final java.lang.Object key ) { if ( ( keyType . getRawType () . isInstance ( key ) ) && ( store . mightContain ( ( ( K ) ( key ) ) ) ) ) { executor . execute ( ( ) - > store . invalidate ( ( ( K ) ( key ) ) ) ) ; } mem . invalidate ( key ) ; }
public java.lang.String fetch ( java.lang.String projectName , java.lang.String commitId ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) { try ( org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk . parseCommit ( org.eclipse.jgit.lib.ObjectId . fromString ( commitId ) ) ; return commit . getFullMessage () ; } } }
public void select () { com.google.gerrit.client.download.DownloadCommandLink first = null ; for ( com.google.gwt.user.client.ui.Widget w : this ) { if ( w instanceof com.google.gerrit.client.download.DownloadCommandLink ) { final com.google.gerrit.client.download.DownloadCommandLink d = ( ( com.google.gerrit.client.download.DownloadCommandLink ) ( w ) ) ; if ( first == null ) { first = d ; } } } if ( first != null ) { first . select () ; } }
@ java.lang.Override public void onSend () { com.google.gerrit.client.changes.ChangeApi . cherrypick ( info . legacy_id () . get () , revision , getDestinationBranch () , getMessageText () , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide () ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange2 ( result . legacy_id () ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; super . onFailure ( caught ) ; } } ) ; }
@ java.lang.Override protected void run ( ) throws com.google.gerrit.sshd.commands.Failure { try { checkPermission () ; } catch ( com.google.gerrit.common.errors.PermissionDeniedException err ) { throw new com.google.gerrit.sshd.commands.UnloggedFailure ( ( STRING_CONSTANT + ( err . getMessage () ) ) ) ; } com.google.gerrit.sshd.commands.QueryShell shell = factory . create ( in , out ) ; shell . setOutputFormat ( format ) ; if ( ( query ) != null ) { shell . execute ( query ) ; } else { shell . run () ; } }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.CommitInfo > apply ( com.google.gerrit.server.change.RevisionResource resource ) throws com.google.gwtorm.server.OrmException { try { com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.CommitInfo > r = com.google.gerrit.extensions.restapi.Response . ok ( json . toCommit ( resource . getPatchSet () , resource . getChange () . getProject () , addLinks ) ) ; if ( resource . isCacheable () ) { r . caching ( com.google.gerrit.extensions.restapi.CacheControl . PRIVATE ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.DAYS ) ) ; } return r ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public < V > void newConstantMetric ( java.lang.String name , V value , com.google.gerrit.metrics.Description desc ) { desc . setConstant () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.lang.Class < V > type = ( ( java.lang.Class < V > ) ( value . getClass () ) ) ; com.google.gerrit.metrics.CallbackMetric0 < V > metric = newCallbackMetric ( name , type , desc ) ; newTrigger ( metric , ( ) - > { metric . set ( value ) ; } ) ; }
@ org.junit.Test public void deleteReviewerFromReviewableChangeByAdminCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setEmailStrategy ( admin , EmailStrategy.CC_ON_OWN_COMMENTS ) ; setApiUser ( admin ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner , extraReviewer ) . cc ( admin , extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private static void validateProjectConfigEntryIsEditable ( com.google.gerrit.server.config.ProjectConfigEntry projectConfigEntry , com.google.gerrit.server.project.ProjectState projectState , java.lang.String parameterName , java.lang.String pluginName ) throws com.google.gerrit.extensions.restapi.BadRequestException { if ( ! ( projectConfigEntry . isEditable ( projectState ) ) ) { throw new com.google.gerrit.extensions.restapi.BadRequestException ( java.lang.String . format ( STRING_CONSTANT , parameterName , pluginName , projectState . getName () ) ) ; } }
void onSaveSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { final com.google.gerrit.client.reviewdb.Account me = com.google.gerrit.client.Gerrit . getUserAccount () ; me . setFullName ( result . getFullName () ) ; me . setPreferredEmail ( result . getPreferredEmail () ) ; com.google.gerrit.client.Gerrit . refreshMenuBar () ; if ( ( accountSettings ) != null ) { accountSettings . display ( me ) ; } }
protected boolean shouldSendMessage () { if ( ( body . length () ) == NUMBER_CONSTANT ) { return false ; } if ( smtpRcptTo . isEmpty () ) { return false ; } if ( ( ( ( smtpRcptTo . size () ) == NUMBER_CONSTANT ) && ( ( rcptTo . size () ) == NUMBER_CONSTANT ) ) && ( rcptTo . contains ( fromId ) ) ) { return false ; } return true ; }
@ java.lang.Override protected java.util.List < com.google.gerrit.reviewdb.client.Change > impl ( com.google.gerrit.server.util.RequestContext ctx ) throws com.google.gwtorm.server.OrmException { java.lang.String ref = event . getRefName () ; com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . getProjectName () ) ; if ( ref . equals ( RefNames.REFS_CONFIG ) ) { return com.google.gerrit.server.query.change.ChangeData . asChanges ( queryProvider . get () . byProjectOpen ( project ) ) ; } return com.google.gerrit.server.query.change.ChangeData . asChanges ( queryProvider . get () . byBranchOpen ( new com.google.gerrit.reviewdb.client.Branch.NameKey ( project , ref ) ) ) ; }
protected com.google.gerrit.common.data.PermissionRule block ( java.lang.String permission , com.google.gerrit.reviewdb.client.AccountGroup.UUID id , java.lang.String ref , com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache . checkedGet ( project ) . getConfig () ; com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.project.Util . block ( cfg , permission , id , ref ) ; saveProjectConfig ( project , cfg ) ; return rule ; }
@ org.junit.Test @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void testToString () { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.OrPredicateTest.TestPredicate c = com.google.gerrit.server.query.OrPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.query.Predicate . or ( a , b ) . toString () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.query.Predicate . or ( a , b , c ) . toString () ) ; }
private static byte [] read ( java.util.jar.JarFile jarFile , java.util.jar.JarEntry entry ) throws java.io.IOException { byte [] data = new byte [ ( ( int ) ( entry . getSize () ) ) ] ; try ( java.io.InputStream in = jarFile . getInputStream ( entry ) ) { org.eclipse.jgit.util.IO . readFully ( in , data , NUMBER_CONSTANT , data.length ) ; } return data ; }
private java.lang.String getHtml ( java.lang.String formatterName , com.googlesource.gerrit.plugins.xdocs.formatter.StreamFormatter f , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectLoader loader , com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String path , org.eclipse.jgit.lib.ObjectId revId ) throws java.io.IOException { try ( java.io.InputStream raw = loader . openStream () ) { return ( ( com.googlesource.gerrit.plugins.xdocs.formatter.StreamFormatter ) ( f ) ) . format ( project . get () , path , revId . getName () , com.googlesource.gerrit.plugins.xdocs.XDocLoader . getAbbrRevId ( repo , revId ) , getFormatterConfig ( formatterName ) , raw ) ; } }
@ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { if ( ( ( mySubname == null ) && ( ( subname ) == null ) ) || ( ( mySubname != null ) && ( mySubname . equals ( subname ) ) ) ) { projects . display ( result ) ; } }
public java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > publishedByChange ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( migration . readChanges () ) ) { return com.google.gerrit.server.PatchLineCommentsUtil . sort ( com.google.gerrit.server.PatchLineCommentsUtil . byCommentStatus ( db . patchComments () . byChange ( notes . getChangeId () ) , Status.PUBLISHED ) ) ; } notes . load () ; java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > comments = new java.util.ArrayList <> () ; comments . addAll ( notes . getComments () . values () ) ; return com.google.gerrit.server.PatchLineCommentsUtil . sort ( comments ) ; }
private static java.lang.String LHEX ( byte [] bin ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ( ( bin.length ) * NUMBER_CONSTANT ) ) ; for ( byte b : bin ) { r . append ( com.google.gerrit.httpd.ProjectDigestFilter.LHEX [ ( ( b > > > NUMBER_CONSTANT ) & NUMBER_CONSTANT ) ] ) ; r . append ( com.google.gerrit.httpd.ProjectDigestFilter.LHEX [ ( b & NUMBER_CONSTANT ) ] ) ; } return r . toString () ; }
@ org.junit.Test public void testThreeLevelTreeWithSomeIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; org.junit.Assert . assertEquals ( com.google.gerrit.server.query.change.AndSource . class , out . getClass () ) ; org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableList . of ( query ( in . getChild ( NUMBER_CONSTANT ) ) , in . getChild ( NUMBER_CONSTANT ) ) , out . getChildren () ) ; }
public java.util.Set < com.googlesource.gerrit.plugins.its.base.workflow.Property > extractFrom ( com.google.gerrit.server.data.RefUpdateAttribute refUpdateAttribute ) { java.util.Set < com.googlesource.gerrit.plugins.its.base.workflow.Property > properties = com.google.common.collect.Sets . newHashSet () ; properties . add ( propertyFactory . create ( STRING_CONSTANT , refUpdateAttribute.newRev ) ) ; properties . add ( propertyFactory . create ( STRING_CONSTANT , refUpdateAttribute.oldRev ) ) ; properties . add ( propertyFactory . create ( STRING_CONSTANT , refUpdateAttribute.oldRev ) ) ; properties . add ( propertyFactory . create ( STRING_CONSTANT , refUpdateAttribute.refName ) ) ; return properties ; }
@ org.junit.Test public void testCarriageReturn ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit () ; com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator ( null , new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE ) , null , null , null ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = validator . performValidation ( repo , c , com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactlyElementsIn ( com.google.common.collect.ImmutableSet . of ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void testOpenRepositoryCreatedDirectlyOnDisk ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectA = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; createRepository ( repoManager . getBasePath ( projectA ) , projectA . get () ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( projectA ) ) { com.google.common.truth.Truth . assertThat ( repo ) . isNotNull () ; } com.google.common.truth.Truth . assertThat ( repoManager . list () ) . containsExactly ( projectA ) ; }
public com.google.gerrit.server.project.SubmitRuleEvaluator setPatchSet ( com.google.gerrit.reviewdb.client.PatchSet ps ) { com.google.common.base.Preconditions . checkArgument ( ps . getId () . getParentKey () . equals ( cd . getId () ) , STRING_CONSTANT , ps . getId () , cd . getId () ) ; patchSet = ps ; return this ; }
@ org.junit.Test public void testBulletList1 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( STRING_CONSTANT + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.BEGIN_LIST ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.END_LIST ) ) , n . asString () ) ; }
public java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return byCommitsOnBranchNotMerged ( repo , db , branch , hashes , ( ( indexConfig . maxTerms () ) - NUMBER_CONSTANT ) ) ; }
private void format ( java.io.OutputStream out ) throws java.io.IOException { out . write ( com.google.gerrit.server.change.GetPatch . formatEmailHeader ( commit ) . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ; try ( org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter ( out ) ) { fmt . setRepository ( repo ) ; fmt . format ( base . getTree () , commit . getTree () ) ; fmt . flush () ; } }
@ java.lang.Override protected void runImpl ( ) throws java.io.IOException { final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack ( repo ) ; if ( ! ( projectControl . allRefsAreVisible () ) ) { up . setRefFilter ( new com.google.gerrit.server.git.VisibleRefFilter ( repo , projectControl , db . get () ) ) ; } up . upload ( in , out , err ) ; }
@ java.lang.Override public int compare ( com.googlesource.gerrit.plugins.verifystatus.server.PatchSetVerification a , com.googlesource.gerrit.plugins.verifystatus.server.PatchSetVerification b ) { return new org.apache.commons.lang.builder.CompareToBuilder () . append ( a . getReporter () , b . getReporter () ) . append ( a . getName () , b . getName () ) . append ( b . getGranted () , a . getGranted () ) . toComparison () ; }
@ org.junit.Test public void testReplaceSortKeyPredicate_NestedSortKey ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ; p = parse ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( parse ( STRING_CONSTANT ) , com.google.gerrit.server.index.IndexedChangeQuery . replaceSortKeyPredicates ( p , STRING_CONSTANT ) ) ; p = parse ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( parse ( STRING_CONSTANT ) , com.google.gerrit.server.index.IndexedChangeQuery . replaceSortKeyPredicates ( p , STRING_CONSTANT ) ) ; }
@ java.lang.Override public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { if ( ( updated () ) && ( fireEvent ) ) { hashtagsEdited . fire ( change , ctx . getAccountId () , updatedHashtags , toAdd , toRemove , ctx . getWhen () ) ; } }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.notedb.ChangeNotes . unwrap ( db ) . changes () . get ( changeId ) ; com.google.common.base.Preconditions . checkNotNull ( change , STRING_CONSTANT , changeId ) ; com.google.common.base.Preconditions . checkArgument ( change . getProject () . equals ( project ) , ( STRING_CONSTANT + STRING_CONSTANT ) , project , changeId , change . getProject () ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load () ; }
public void updateProjectWatch ( final com.google.gerrit.client.reviewdb.AccountProjectWatch watch , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) { if ( ! ( getAccountId () . equals ( watch . getAccountId () ) ) ) { callback . onFailure ( new com.google.gerrit.client.rpc.NoSuchEntityException () ) ; return; } run ( callback , new com.google.gerrit.server.rpc.account.Action < com.google.gwtjsonrpc.client.VoidResult > () { public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { db . accountProjectWatches () . update ( java.util.Collections . singleton ( watch ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; } } ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onFix ( com.google.gwt.event.dom.client.ClickEvent e ) { e . stopPropagation () ; java.lang.String t = com.google.gerrit.client.Dispatcher . toEditScreen ( project , psId , comment . path () , comment . line () ) ; if ( ! ( com.google.gerrit.client.Gerrit . isSignedIn () ) ) { com.google.gerrit.client.Gerrit . doSignIn ( t ) ; } else { com.google.gerrit.client.Gerrit . display ( t ) ; } }
@ java.lang.Override protected void configure () { bind ( java.util.concurrent.Executor . class ) . annotatedWith ( com.ericsson.gerrit.plugins.highavailability.event.EventExecutor . class ) . toProvider ( com.ericsson.gerrit.plugins.highavailability.event.EventExecutorProvider . class ) ; listener () . to ( com.ericsson.gerrit.plugins.highavailability.event.EventExecutorProvider . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.common.EventListener . class ) . to ( com.ericsson.gerrit.plugins.highavailability.event.EventHandler . class ) ; }
private com.google.gerrit.reviewdb.client.PatchSet updateDraftPatchSet ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return dbProvider . get () . patchSets () . atomicUpdate ( rsrc . getPatchSet () . getId () , new com.google.gwtorm.server.AtomicUpdate < com.google.gerrit.reviewdb.client.PatchSet > () { @ java.lang.Override public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet patchset ) { patchset . setDraft ( false ) ; return patchset ; } } ) ; }
private void fireHook () { final java.util.Map < com.google.gerrit.reviewdb.ApprovalCategory.Id , com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > changed = new java.util.HashMap < com.google.gerrit.reviewdb.ApprovalCategory.Id , com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > () ; for ( com.google.gerrit.reviewdb.ApprovalCategoryValue.Id v : approvals ) { changed . put ( v . getParentKey () , v ) ; } hooks . doCommentAddedHook ( change , user . getAccount () , patchSet , messageText , changed ) ; }
public boolean canRebase ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( isOwner () ) || ( getRefControl () . canSubmit ( isOwner () ) ) ) || ( getRefControl () . canRebase () ) ) && ( ! ( isPatchSetLocked ( db ) ) ) ; }
@ org.junit.Test public void badRequestCausedByCacheNotFound ( ) throws java.lang.Exception { java.lang.String pluginName = STRING_CONSTANT ; java.lang.String cacheName = STRING_CONSTANT ; configureMocksFor ( pluginName , cacheName ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e = new com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException ( pluginName , cacheName ) ; org.mockito.Mockito . doThrow ( e ) . when ( evictCacheMock ) . evict ( org.mockito.ArgumentMatchers . any () ) ; servlet . doPost ( requestMock , responseMock ) ; org.mockito.Mockito . verify ( responseMock ) . sendError ( javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST , e . getMessage () ) ; }
private static com.google.gitiles.doc.ImageLoader newImageLoader ( com.google.gitiles.doc.MarkdownToHtml.Builder b ) { if ( ( ( ( ( b.reader ) != null ) && ( ( b.view ) != null ) ) && ( ( b.config ) != null ) ) && ( ( b.root ) != null ) ) { return new com.google.gitiles.doc.ImageLoader ( b.reader , b.view , b.config , b.root ) ; } return null ; }
private PushOneCommit.Result updateChange ( com.google.gerrit.acceptance.PushOneCommit.Result r , java.lang.String content ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , STRING_CONSTANT , STRING_CONSTANT , content , r . getChangeId () ) ; return push . to ( STRING_CONSTANT ) ; }
private static java.lang.String replace ( final java.lang.String pat , final java.lang.String key , final java.lang.String val ) { final int n = pat . indexOf ( ( ( STRING_CONSTANT + key ) + STRING_CONSTANT ) ) ; if ( n != ( - NUMBER_CONSTANT ) ) { return ( ( pat . substring ( NUMBER_CONSTANT , n ) ) + val ) + ( pat . substring ( ( ( n + NUMBER_CONSTANT ) + ( key . length () ) ) ) ) ; } else { return null ; } }
private void newDraft ( net.codemirror.lib.CodeMirror cm ) { int cmLine = cm . getLineNumber ( cm . extras () . activeLine () ) ; com.google.gerrit.client.diff.UnifiedChunkManager.LineSidePair pair = host . getLineSidePairFromCmLine ( cmLine ) ; com.google.gerrit.client.diff.DisplaySide side = pair . getSide () ; if ( cm . somethingSelected () ) {} else { insertNewDraft ( side , ( cmLine + NUMBER_CONSTANT ) ) ; } }
private void saveChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) { change = ctx . getChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx . getUpdate ( psId ) ; wasDraftChange = ( change . getStatus () ) == ( Change.Status.DRAFT ) ; if ( wasDraftChange ) { change . setStatus ( Change.Status.NEW ) ; update . setStatus ( change . getStatus () ) ; ctx . saveChange () ; } }
public static java.lang.String addTab ( java.lang.String str ) { java.lang.StringBuffer buf = new java.lang.StringBuffer ( STRING_CONSTANT ) ; for ( java.lang.String s : str . split ( STRING_CONSTANT ) ) { if ( ! ( s . trim () . isEmpty () ) ) { buf . append ( ( ( STRING_CONSTANT + s ) + STRING_CONSTANT ) ) ; } } return buf . toString () ; }
private com.google.gerrit.server.notedb.NoteDbUpdateManager.Result rebuild ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId , boolean checkReadOnly ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( failNextUpdate . getAndSet ( false ) ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } com.google.gerrit.server.notedb.NoteDbUpdateManager.Result result = ( checkReadOnly ) ? delegate . rebuild ( db , changeId ) : delegate . rebuildEvenIfReadOnly ( db , changeId ) ; if ( stealNextUpdate . getAndSet ( false ) ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } return result ; }
@ java.lang.Override protected void run ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if ( luceneVersionManager . activateLatestIndex ( name ) ) { stdout . println ( STRING_CONSTANT ) ; } else { stdout . println ( STRING_CONSTANT ) ; } } catch ( com.google.gerrit.lucene.ReindexerAlreadyRunningException e ) { throw new com.google.gerrit.sshd.commands.UnloggedFailure ( ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; } }
private boolean add ( com.google.gerrit.server.mail.ProjectWatch.Watchers matching , com.google.gerrit.reviewdb.client.AccountProjectWatch w , com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = args.identifiedUserFactory . create ( w . getAccountId () ) ; try { if ( filterMatch ( user , w . getFilter () ) ) { if ( w . isNotify ( type ) ) { matching.bcc.accounts . add ( w . getAccountId () ) ; } return true ; } } catch ( com.google.gerrit.server.query.QueryParseException e ) {} return false ; }
@ org.junit.Test public void currentRevision ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo c = get ( changeId , com.google.gerrit.extensions.client.ListChangesOption.CURRENT_REVISION ) ; com.google.common.truth.Truth . assertThat ( c.currentRevision ) . isEqualTo ( commitId ( NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( c.revisions . keySet () ) . containsAllIn ( com.google.common.collect.ImmutableSet . of ( commitId ( NUMBER_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( c.revisions . get ( commitId ( NUMBER_CONSTANT ) ) . _number ) . isEqualTo ( NUMBER_CONSTANT ) ; }
private void columnStatus ( com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb , com.google.gerrit.client.diff.FileInfo info ) { sb . openTd () . setStyleName ( com.google.gerrit.client.change.FileTable.R . css () . statusTypeCell () ) ; if ( ! ( Patch.COMMIT_MSG . equals ( info . path () ) ) ) { sb . append ( info . status () ) ; } sb . closeTd () ; }
@ java.lang.Override public boolean updateChange ( com.google.gerrit.server.update.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException { change = ctx . getChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx . getUpdate ( change . currentPatchSetId () ) ; change . setPrivate ( isPrivate ) ; change . setLastUpdatedOn ( ctx . getWhen () ) ; update . setPrivate ( isPrivate ) ; addMessage ( ctx , update ) ; return true ; }
public java.util.List < com.google.gerrit.reviewdb.client.ChangeMessage > byChange ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( migration . readChanges () ) ) { return com.google.gerrit.server.ChangeMessagesUtil . sortChangeMessages ( db . changeMessages () . byChange ( notes . getChangeId () ) ) ; } return notes . load () . getChangeMessages () ; }
@ org.junit.Test public void testAppend_boolean () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( true ) ) ; org.junit.Assert . assertSame ( b , b . append ( false ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ java.lang.Override public void start () { org.apache.log4j.Logger replicationLogger = org.apache.log4j.LogManager . getLogger ( ReplicationQueue.REPLICATION_LOG_NAME ) ; java.lang.String loggerName = replicationLogger . getName () ; org.apache.log4j.AsyncAppender asyncAppender = systemLog . createAsyncAppender ( loggerName , new org.apache.log4j.PatternLayout ( ( ( STRING_CONSTANT + ( PushOne.ID_MDC_KEY ) ) + STRING_CONSTANT ) ) ) ; replicationLogger . removeAppender ( loggerName ) ; replicationLogger . addAppender ( asyncAppender ) ; replicationLogger . setAdditivity ( false ) ; }
@ org.junit.Test public void missingRepo ( ) throws java.lang.Exception { assumeNoteDbDisabled () ; com.google.gerrit.server.notedb.ChangeNotes notes = insertChange () ; com.google.gerrit.reviewdb.client.Project.NameKey name = notes . getProjectName () ; ( ( com.google.gerrit.testutil.InMemoryRepositoryManager ) ( repoManager ) ) . deleteRepository ( name ) ; com.google.common.truth.Truth . assertThat ( checker . check ( notes , null ) . problems () ) . containsExactly ( com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT . problem ( ( STRING_CONSTANT + name ) ) ) ; }
private void mergeImpl ( final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { try { new com.google.gerrit.git.MergeOp ( server , schema , replication , branch ) . merge () ; } catch ( java.lang.Throwable e ) { com.google.gerrit.git.ChangeMergeQueue.log . error ( ( ( STRING_CONSTANT + branch ) + STRING_CONSTANT ) , e ) ; } }
private static void editTree ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation op , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.dircache.DirCacheEditor dce , org.eclipse.jgit.lib.ObjectInserter ins , java.lang.String path , byte [] content ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { switch ( op ) { case DELETE_ENTRY : dce . add ( new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath ( path ) ) ; break; case CHANGE_ENTRY : case RESTORE_ENTRY : dce . add ( com.google.gerrit.server.edit.ChangeEditModifier . getPathEdit ( op , repo , rw , base , path , ins , content ) ) ; break; } dce . finish () ; }
@ java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply ( com.google.gerrit.server.project.ChildProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ( recursive ) || ( rsrc . isDirectChild () ) ) { return json . format ( rsrc . getChild () . getProject () ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( rsrc . getChild () . getName () ) ; }
@ java.lang.Override public int compareTo ( com.google.gerrit.server.notedb.rebuild.Event other ) { return com.google.common.collect.ComparisonChain . start () . compare ( this . when , other.when ) . compareTrueFirst ( isPatchSet () , isPatchSet () ) . compareTrueFirst ( this . predatesChange , other.predatesChange ) . compare ( this . who , other.who , com.google.gerrit.reviewdb.server.ReviewDbUtil . intKeyOrdering () ) . compare ( this . psId , other.psId , com.google.gerrit.reviewdb.server.ReviewDbUtil . intKeyOrdering () . nullsLast () ) . result () ; }
@ java.lang.Override public void writeCommit ( com.google.gerrit.server.notedb.BatchMetaDataUpdate batch ) throws com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder () ; if ( migration . write () ) { org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes () ; if ( treeId != null ) { builder . setTreeId ( treeId ) ; } } batch . write ( this , builder ) ; }
@ java.lang.Override public java.lang.String getCreateSequenceSql ( final com.google.gwtorm.schema.SequenceModel seq ) { final java.lang.StringBuilder r = new java.lang.StringBuilder () ; r . append ( STRING_CONSTANT ) ; r . append ( seq . getSequenceName () ) ; r . append ( STRING_CONSTANT ) ; return r . toString () ; }
@ org.junit.Test public void testPrefixReducesSearchSpace ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.RegexFilePredicate p = com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ) ; }
public void addComment ( java.lang.String issueKey , java.lang.String comment ) throws java.io.IOException { if ( issueExists ( issueKey ) ) { com.googlesource.gerrit.plugins.its.jira.JiraClient.log . debug ( STRING_CONSTANT , issueKey ) ; apiBuilder . getIssue () . doPost ( ( issueKey + STRING_CONSTANT ) , gson . toJson ( new com.googlesource.gerrit.plugins.its.jira.restapi.JiraComment ( comment ) ) , java.net.HttpURLConnection.HTTP_CREATED ) ; com.googlesource.gerrit.plugins.its.jira.JiraClient.log . debug ( STRING_CONSTANT , issueKey ) ; } else { com.googlesource.gerrit.plugins.its.jira.JiraClient.log . error ( STRING_CONSTANT , issueKey ) ; } }
@ java.lang.Override public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { java.lang.String change = com.google.gwt.http.client.URL . decode ( screen . getToken ( NUMBER_CONSTANT ) ) ; java.lang.String patchSet = com.google.gwt.http.client.URL . decode ( screen . getToken ( NUMBER_CONSTANT ) ) ; java.lang.String path = screen . getToken ( NUMBER_CONSTANT ) ; screen . show ( new com.googlesource.gerrit.plugins.xdocs.client.XDocUnifiedDiffScreen ( change , patchSet , path ) ) ; screen . setWindowTitle ( com.googlesource.gerrit.plugins.xdocs.client.FileInfo . getFileName ( path ) ) ; }
@ org.junit.Test public void newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerReviewersInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , STRING_CONSTANT , other , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.starrer , other ) . to ( sc.owner , sc.reviewer ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
@ com.google.common.annotations.VisibleForTesting public void stop () { if ( ( runId ) != null ) { try { java.nio.file.Files . delete ( runFile ) ; } catch ( java.io.IOException err ) { com.google.gerrit.pgm.Daemon.log . warn ( ( STRING_CONSTANT + ( runFile ) ) , err ) ; } } manager . stop () ; }
@ org.junit.Test public void testPushForMasterWithTopic ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String topic = STRING_CONSTANT ; com.google.gerrit.acceptance.git.PushOneCommit.Result r = pushTo ( ( STRING_CONSTANT + topic ) ) ; r . assertOkStatus () ; r . assertChange ( Change.Status.NEW , topic ) ; r = pushTo ( ( STRING_CONSTANT + topic ) ) ; r . assertOkStatus () ; r . assertChange ( Change.Status.NEW , topic ) ; }
private static void assertCommentInfo ( com.google.gerrit.extensions.client.Comment expected , com.google.gerrit.extensions.common.CommentInfo actual ) { com.google.common.truth.Truth . assertThat ( actual.line ) . isEqualTo ( expected.line ) ; com.google.common.truth.Truth . assertThat ( actual.message ) . isEqualTo ( expected.message ) ; com.google.common.truth.Truth . assertThat ( actual.inReplyTo ) . isEqualTo ( expected.inReplyTo ) ; com.google.gerrit.acceptance.server.change.CommentsIT . assertCommentRange ( expected.range , actual.range ) ; if ( ( ( actual.side ) == null ) && ( ( expected.side ) != null ) ) { com.google.common.truth.Truth . assertThat ( Side.REVISION ) . isEqualTo ( expected.side ) ; } }
boolean updateFastForward ( java.lang.String refName , org.eclipse.jgit.lib.ObjectId oldValue , org.eclipse.jgit.lib.ObjectId newValue ) { com.google.gerrit.server.git.TagSet.CachedRef ref = refs . get ( refName ) ; if ( ref != null ) { org.eclipse.jgit.lib.ObjectId cur = ref . get () ; if ( cur . equals ( oldValue ) ) { return ref . compareAndSet ( cur , newValue ) ; } } return false ; }
private PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git , boolean conflicting ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil . checkout ( git , STRING_CONSTANT ) ; java.lang.String file = ( conflicting ) ? STRING_CONSTANT : ( STRING_CONSTANT + ( count ) ) + STRING_CONSTANT ; com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , ( STRING_CONSTANT + ( count ) ) , file , ( STRING_CONSTANT + ( count ) ) ) ; ( count ) ++ ; return push . to ( STRING_CONSTANT ) ; }
private com.google.gerrit.server.events.ApprovalAttribute getApprovalAttribute ( java.util.Map.Entry < com.google.gerrit.reviewdb.ApprovalCategory.Id , com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > approval ) { com.google.gerrit.server.events.ApprovalAttribute a = new com.google.gerrit.server.events.ApprovalAttribute () ; a.type = approval . getKey () . get () ; com.google.gerrit.common.data.ApprovalType at = approvalTypes . byId ( approval . getKey () ) ; if ( at != null ) { a.description = at . getCategory () . getName () ; } a.value = java.lang.Short . toString ( approval . getValue () . get () ) ; return a ; }
@ java.lang.Override protected void configureServlets () { install ( new com.google.gerrit.server.config.FactoryModule () { @ java.lang.Override protected void configure () { factory ( ChangeDetailFactory.Factory . class ) ; factory ( IncludedInDetailFactory.Factory . class ) ; factory ( PatchSetDetailFactory.Factory . class ) ; factory ( PatchSetPublishDetailFactory.Factory . class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl . class ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > files ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return ( ( java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > ) ( listFiles . apply ( revision ) . value () ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public java.lang.Boolean call () { try ( com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.reviewdb.server.ReviewDbUtil . unwrapDb ( schemaFactory . open () ) ) { return rebuildProject ( db , changesByProject , project , allUsersRepo ) ; } catch ( java.lang.Exception e ) { com.google.gerrit.pgm.RebuildNoteDb.log . error ( ( STRING_CONSTANT + project ) , e ) ; return false ; } }
public static void patch ( java.lang.String token , com.google.gerrit.reviewdb.client.PatchSet.Id base , com.google.gerrit.reviewdb.client.Patch.Key id , int patchIndex , com.google.gerrit.common.data.PatchSetDetail patchSetDetail , com.google.gerrit.client.changes.PatchTable patchTable , com.google.gerrit.client.patches.PatchScreen.TopView topView ) { com.google.gerrit.client.Dispatcher . patch ( token , base , id , null , NUMBER_CONSTANT , patchIndex , patchSetDetail , patchTable , topView , null ) ; }
private org.eclipse.jgit.revwalk.RevCommit commit ( com.google.gerrit.server.git.ProjectConfig cfg ) throws java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { try ( com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , cfg . getProject () . getNameKey () , db ) ) { util . tick ( NUMBER_CONSTANT ) ; util . setAuthorAndCommitter ( md . getCommitBuilder () ) ; md . setMessage ( STRING_CONSTANT ) ; cfg . commit ( md ) ; org.eclipse.jgit.lib.Ref ref = db . getRef ( RefNames.REFS_CONFIG ) ; return util . getRevWalk () . parseCommit ( ref . getObjectId () ) ; } }
private static com.google.gerrit.client.ui.Screen mine () { if ( com.google.gerrit.client.Gerrit . isSignedIn () ) { return new com.google.gerrit.client.changes.AccountDashboardScreen ( com.google.gerrit.client.Gerrit . getUserAccount () . getId () ) ; } com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen ( null ) ; r . setRequiresSignIn ( true ) ; return r ; }
@ java.lang.Override void send ( java.lang.String message ) { com.google.gerrit.client.changes.ChangeApi . abandon ( project . get () , id . get () , message , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.info.ChangeInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( project , id ) ) ; hide () ; } } ) ; }
private com.google.gerrit.server.events.Event getEventFromRequest ( javax.servlet.http.HttpServletRequest req ) throws java.io.IOException { java.lang.String jsonEvent = com.google.common.io.CharStreams . toString ( req . getReader () ) ; com.google.gson.Gson gson = new com.google.gson.GsonBuilder () . registerTypeAdapter ( com.google.gerrit.server.events.Event . class , new com.google.gerrit.server.events.EventDeserializer () ) . registerTypeAdapter ( com.google.common.base.Supplier . class , new com.google.gerrit.server.events.SupplierDeserializer () ) . create () ; return gson . fromJson ( jsonEvent , com.google.gerrit.server.events.Event . class ) ; }
@ org.junit.Test public void deleteReviewerFromWipChangeNotifyAll ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange () ; removeReviewer ( sc , extraReviewer , NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( extraReviewer ) . cc ( extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public static < T > void mapOf ( com.google.inject.Binder binder , com.google.inject.TypeLiteral < T > member ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.inject.Key < com.google.gerrit.extensions.registration.DynamicMap < T > > key = ( ( com.google.inject.Key < com.google.gerrit.extensions.registration.DynamicMap < T > > ) ( com.google.inject.Key . get ( com.google.inject.util.Types . newParameterizedType ( com.google.gerrit.extensions.registration.DynamicMap . class , member . getType () ) ) ) ) ; binder . bind ( key ) . toProvider ( new com.google.gerrit.extensions.registration.DynamicMapProvider ( member ) ) . in ( Scopes.SINGLETON ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > filter ( java.util.Collection < com.google.gerrit.reviewdb.RefRight > all ) { java.util.List < com.google.gerrit.reviewdb.RefRight > mine = new java.util.ArrayList < com.google.gerrit.reviewdb.RefRight > ( all . size () ) ; for ( com.google.gerrit.reviewdb.RefRight right : all ) { if ( matches ( right . getRefPattern () ) ) { mine . add ( right ) ; } } return mine ; }
public static void abandon ( int id , java.lang.String msg , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.Input input = com.google.gerrit.client.changes.ChangeApi.Input . create () ; input . message ( com.google.gerrit.client.changes.ChangeApi . emptyToNull ( msg ) ) ; com.google.gerrit.client.changes.ChangeApi . call ( id , STRING_CONSTANT ) . post ( input , cb ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onSyntaxHighlighting ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs . syntaxHighlighting ( e . getValue () ) ; if ( ( view ) != null ) { mode . setEnabled ( prefs . syntaxHighlighting () ) ; if ( prefs . syntaxHighlighting () ) { setMode ( view . getContentType () ) ; } view . setSyntaxHighlighting ( prefs . syntaxHighlighting () ) ; } }
@ java.lang.Override public void doPost ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { try { doAuth ( req , rsp ) ; } catch ( java.lang.Exception e ) { getServletContext () . log ( STRING_CONSTANT , e ) ; finishLogin ( req , rsp , null , null ) ; } }
public java.util.List < com.google.gerrit.server.git.VersionedMetaData.PathInfo > getPathInfos ( boolean recursive ) throws java.io.IOException { org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk ( reader ) ; tw . addTree ( revision . getTree () ) ; tw . setRecursive ( recursive ) ; java.util.List < com.google.gerrit.server.git.VersionedMetaData.PathInfo > paths = new java.util.ArrayList <> () ; while ( tw . next () ) { paths . add ( new com.google.gerrit.server.git.VersionedMetaData.PathInfo ( tw ) ) ; } return paths ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.httpd.GerritOptions . class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( config , headless , slave ) ) ; if ( test ) { bind ( java.lang.String . class ) . annotatedWith ( com.google.gerrit.server.securestore.SecureStoreClassName . class ) . toInstance ( com.google.gerrit.server.securestore.DefaultSecureStore . class . getName () ) ; bind ( com.google.gerrit.server.securestore.SecureStore . class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider . class ) ; } }
@ java.lang.Override public com.googlesource.gerrit.plugins.replication.SecureCredentialsProvider create ( java.lang.String remoteName ) { try { if ( needsReload () ) { secureCredentialsFactory . compareAndSet ( secureCredentialsFactory . get () , new com.googlesource.gerrit.plugins.replication.SecureCredentialsFactory ( site ) ) ; secureCredentialsFactoryLoadTs = getSecureConfigLastEditTs () ; com.googlesource.gerrit.plugins.replication.AutoReloadSecureCredentialsFactoryDecorator.log . info ( STRING_CONSTANT ) ; } } catch ( java.lang.Exception e ) { com.googlesource.gerrit.plugins.replication.AutoReloadSecureCredentialsFactoryDecorator.log . error ( ( STRING_CONSTANT + STRING_CONSTANT ) , e ) ; } return secureCredentialsFactory . get () . create ( remoteName ) ; }
@ org.junit.Test public void setAssigneeOnReviewableChangeByAdmin ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; assign ( sc , admin , sc.assignee ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer , admin ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.assignee ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > currentApprovals ( ) throws com.google.gwtorm.server.OrmException { if ( ( currentApprovals ) == null ) { com.google.gerrit.reviewdb.client.Change c = change () ; if ( c == null ) { currentApprovals = java.util.Collections . emptyList () ; } else { currentApprovals = com.google.common.collect.ImmutableList . copyOf ( approvalsUtil . byPatchSet ( db , changeControl () , c . currentPatchSetId () ) ) ; } } return currentApprovals ; }
public com.google.gerrit.reviewdb.client.Account findByNameOrEmail ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String nameOrEmail ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > r = findAllByNameOrEmail ( db , nameOrEmail ) ; return ( r . size () ) == NUMBER_CONSTANT ? byId . get ( r . iterator () . next () ) . getAccount () : null ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { site = new com.google.gerrit.server.config.SitePaths ( com.google.gerrit.testutil.TempFileUtil . createTempDirectory () . toPath () ) ; site . resolve ( STRING_CONSTANT ) . toFile () . mkdir () ; cfg = new org.eclipse.jgit.lib.Config () ; cfg . setString ( STRING_CONSTANT , null , STRING_CONSTANT , STRING_CONSTANT ) ; repoManager = new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , cfg ) ; }
public com.google.gerrit.testutil.TestNotesMigration setFromEnv () { switch ( com.google.gerrit.testutil.NoteDbMode . get () ) { case READ_WRITE : setWriteChanges ( true ) ; setReadChanges ( true ) ; break; case WRITE : setWriteChanges ( true ) ; setReadChanges ( false ) ; break; case CHECK : case OFF : default: setWriteChanges ( false ) ; setReadChanges ( false ) ; break; } return this ; }
private com.google.gerrit.server.util.RequestContext newRequestContext ( com.google.gerrit.reviewdb.client.Account.Id requestUserId ) { final com.google.gerrit.server.CurrentUser requestUser = userFactory . create ( com.google.inject.util.Providers . of ( db ) , requestUserId ) ; return new com.google.gerrit.server.util.RequestContext () { @ java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser () { return requestUser ; } @ java.lang.Override public com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > getReviewDbProvider () { return com.google.inject.util.Providers . of ( db ) ; } } ; }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.client.OrmException { if ( cd . fastIsVisibleTo ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.Change c = cd . change ( db ) ; if ( ( c != null ) && ( changeControl . controlFor ( c , user ) . isVisible ( db . get () ) ) ) { cd . cacheVisibleTo ( user ) ; return true ; } else { return false ; } } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { return false ; } }
private java.util.Collection < com.google.gerrit.server.project.ProjectState > tree ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.project.ProjectState > tree = new java.util.LinkedHashMap <> () ; for ( com.google.gerrit.server.project.ProjectState ps : rsrc . getProjectState () . tree () ) { tree . put ( ps . getNameKey () , ps ) ; } tree . keySet () . retainAll ( permissionBackend . user ( user ) . filter ( ProjectPermission.ACCESS , tree . keySet () ) ) ; return tree . values () ; }
@ org.junit.Test public void testBlockRule_ParentBlocksChild () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canForceUpdate () ) ; }
private void updateScreenHeader ( net.codemirror.lib.ScrollInfo si ) { if ( ( ( si . getTop () ) == NUMBER_CONSTANT ) && ( ! ( diffTable . isHeaderVisible () ) ) ) { diffTable . setHeaderVisible ( true ) ; } else if ( ( ( si . getTop () ) > ( NUMBER_CONSTANT * ( si . getClientHeight () ) ) ) && ( diffTable . isHeaderVisible () ) ) { diffTable . setHeaderVisible ( false ) ; } }
@ org.junit.Test public void testParentString () { final long pId = NUMBER_CONSTANT ; final com.google.gwtorm.client.LongKeyTestCase.Parent p1 = new com.google.gwtorm.client.LongKeyTestCase.Parent ( pId ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + pId ) , p1 . toString () ) ; final com.google.gwtorm.client.LongKeyTestCase.Parent p2 = new com.google.gwtorm.client.LongKeyTestCase.Parent ( NUMBER_CONSTANT ) ; p2 . fromString ( p1 . toString () ) ; org.junit.Assert . assertEquals ( p1 , p2 ) ; }
@ org.junit.Test public void queryChangesLimit ( ) throws java.lang.Exception { createChange () ; com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = gApi . changes () . query () . withLimit ( NUMBER_CONSTANT ) . get () ; com.google.common.truth.Truth . assertThat ( results . size () ) . is ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( com.google.common.collect.Iterables . getOnlyElement ( results ) . changeId ) . isEqualTo ( r2 . getChangeId () ) ; }
private org.eclipse.jgit.internal.storage.file.LockFile lockForDelete ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { java.io.File importStatus = projects.FS_LAYOUT . getImportStatusFile ( project . get () ) ; org.eclipse.jgit.internal.storage.file.LockFile lockFile = new org.eclipse.jgit.internal.storage.file.LockFile ( importStatus ) ; try { if ( lockFile . lock () ) { return lockFile ; } else { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } }
@ org.junit.Test public void createEmptyChangeOnExistingBranchWithNewBranch ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput in = new com.google.gerrit.extensions.common.ChangeInput () ; in.branch = org.eclipse.jgit.lib.Constants.MASTER ; in.subject = STRING_CONSTANT ; in.project = project . get () ; in.newBranch = true ; exception . expect ( com.google.gerrit.extensions.restapi.ResourceConflictException . class ) ; gApi . changes () . create ( in ) . get () ; }
private void initBranchLink ( com.google.gerrit.client.changes.ChangeInfo info ) { branchLink . setText ( info . branch () ) ; branchLink . setTargetHistoryToken ( com.google.gerrit.common.PageLinks . toChangeQuery ( com.google.gerrit.client.ui.BranchLink . query ( info . project_name_key () , info . status () , info . branch () , null ) ) ) ; }
@ org.junit.Test public void newPatchSetByOtherOnReviewableChangeOwnerSelfCcInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , STRING_CONSTANT , other , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner , sc.reviewer , other ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
private static void codemirror ( final java.lang.String token , final com.google.gerrit.client.DiffObject base , @ com.google.gerrit.common.Nullable final com.google.gerrit.reviewdb.client.Project.NameKey project , final com.google.gerrit.reviewdb.client.Patch.Key id , final com.google.gerrit.client.diff.DisplaySide side , final int line ) { com.google.gwt.core.client.GWT . runAsync ( new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { @ java.lang.Override public void onSuccess () { com.google.gerrit.client.Gerrit . display ( token , new com.google.gerrit.client.diff.SideBySide ( project , base , com.google.gerrit.client.DiffObject . patchSet ( id . getParentKey () ) , id . get () , side , line ) ) ; } } ) ; }
private com.google.inject.Injector createSshInjector () { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList <> () ; modules . add ( sysInjector . getInstance ( com.google.gerrit.sshd.SshModule . class ) ) ; modules . add ( new com.google.gerrit.sshd.SshHostKeyModule () ) ; modules . add ( new com.google.gerrit.sshd.commands.DefaultCommandModule ( false , sysInjector . getInstance ( com.google.gerrit.server.config.DownloadConfig . class ) , sysInjector . getInstance ( com.google.inject.Module . class ) ) ) ; modules . add ( new com.google.gerrit.sshd.commands.IndexCommandsModule ( sysInjector ) ) ; return sysInjector . createChildInjector ( modules ) ; }
@ java.lang.Override public void onShowView () { super . onShowView () ; if ( ( cmA ) != null ) { cmA . refresh () ; } if ( ( cmB ) != null ) { cmB . refresh () ; } com.google.gwt.user.client.Window . enableScrolling ( false ) ; for ( com.google.gerrit.client.diff.CommentBox box : initialBoxes ) { box . resizePaddingWidget () ; } }
@ java.lang.Override public java.lang.String toString () { if ( isError () ) { return ( ( ( ( ( STRING_CONSTANT + ( error ) ) + STRING_CONSTANT ) + ( errorDescription ) ) + STRING_CONSTANT ) + ( errorUri ) ) + STRING_CONSTANT ; } return ( ( ( STRING_CONSTANT + ( accessToken ) ) + STRING_CONSTANT ) + ( tokenType ) ) + STRING_CONSTANT ; }
@ org.junit.Test public void byKey ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , newChange ( repo ) ) ; java.lang.String key = change . getKey () . get () ; assertQuery ( STRING_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; i ++ ) { java.lang.String q = key . substring ( NUMBER_CONSTANT , ( NUMBER_CONSTANT - i ) ) ; assertQuery ( q , change ) ; } }
@ org.junit.Test public void testReplaceTwoLinks () { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . html ( STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.SafeHtml n = o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) , n . asString () ) ; }
private java.util.List < com.google.gerrit.client.ui.InlineHyperlink > getUnifiedDiffLink () { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink () ; toUnifiedDiffLink . setHTML ( new com.google.gwt.user.client.ui.ImageResourceRenderer () . render ( Gerrit.RESOURCES . unifiedDiff () ) ) ; toUnifiedDiffLink . setTargetHistoryToken ( com.google.gerrit.client.Dispatcher . toUnified ( base , revision , path ) ) ; toUnifiedDiffLink . setTitle ( PatchUtil.C . unifiedDiff () ) ; return java.util.Collections . singletonList ( toUnifiedDiffLink ) ; }
public void testOwnerProject () { grant ( local , com.google.gerrit.reviewdb.ApprovalCategory.OWN , admin , STRING_CONSTANT , NUMBER_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl uBlah = user ( devs ) ; com.google.gerrit.server.project.ProjectControl uAdmin = user ( devs , admin ) ; assertFalse ( STRING_CONSTANT , uBlah . isOwner () ) ; assertTrue ( STRING_CONSTANT , uAdmin . isOwner () ) ; }
@ org.junit.Test public void testCreateSchema_LabelTypes ( ) throws java.lang.Exception { java.util.List < java.lang.String > labels = new java.util.ArrayList <> () ; for ( com.google.gerrit.common.data.LabelType label : getLabelTypes () . getLabelTypes () ) { labels . add ( label . getName () ) ; } org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , labels ) ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Index.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { permissionBackend . user ( user ) . check ( GlobalPermission.MAINTAIN_SERVER ) ; indexer . index ( db . get () , rsrc . getChange () ) ; return com.google.gerrit.extensions.restapi.Response . none () ; }
public void onSuccess ( final java.util.List < com.google.gerrit.common.data.AccountInfo > result ) { final java.util.ArrayList < com.google.gerrit.client.ui.AccountSuggestOracle.AccountSuggestion > r = new java.util.ArrayList ( result . size () ) ; for ( final com.google.gerrit.common.data.AccountInfo p : result ) { r . add ( new com.google.gerrit.client.ui.AccountSuggestOracle.AccountSuggestion ( p ) ) ; } callback . onSuggestionsReady ( req , new com.google.gerrit.client.ui.Response ( r ) ) ; }
@ java.lang.Override @ com.google.gerrit.common.Nullable public com.googlesource.gerrit.plugins.github.oauth.GitHubLogin get ( java.lang.String username ) { try { com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken accessToken = newAccessTokenFromUser ( username ) ; if ( accessToken != null ) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin login = new com.googlesource.gerrit.plugins.github.oauth.GitHubLogin ( config ) ; login . login ( accessToken ) ; return login ; } return null ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.github.oauth.IdentifiedUserGitHubLoginProvider.log . error ( ( ( STRING_CONSTANT + username ) + STRING_CONSTANT ) , e ) ; return null ; } }
private boolean isTrusted ( final com.google.gerrit.client.reviewdb.AccountExternalId id ) { if ( id . getExternalId () . startsWith ( STRING_CONSTANT ) ) { return isAllowGoogleAccountUpgrade () ; } if ( id . getExternalId () . startsWith ( STRING_CONSTANT ) ) { return true ; } for ( final java.lang.String p : trusted ) { if ( matches ( p , id ) ) { return true ; } } return false ; }
@ org.junit.Test public void deleteReviewerFromReviewableChangeNotifyOwnerReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; removeReviewer ( sc , extraReviewer , NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( extraReviewer ) . cc ( extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( sc.starrer ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > get ( java.lang.String p , com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > m ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > r = null ; if ( m != null ) { r = m . get ( p ) ; } if ( r == null ) { r = com.google.gwt.core.client.JsArray . createArray () . cast () ; } return r ; }
private static java.lang.String getUserPreference () { if ( com.google.gerrit.client.Gerrit . isSignedIn () ) { com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme pref = com.google.gerrit.client.Gerrit . getUserAccount () . getGeneralPreferences () . getDownloadUrl () ; if ( pref != null ) { switch ( pref ) { case ANON_GIT : return STRING_CONSTANT ; case HTTP : case ANON_HTTP : return STRING_CONSTANT ; case SSH : return STRING_CONSTANT ; default: return null ; } } } return null ; }
private void onLineTooLong ( final org.eclipse.jgit.lib.AbbreviatedObjectId id , java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > messagesList , final java.lang.String errorMessage ) throws com.google.gerrit.server.git.validators.CommitValidationException { final java.lang.String message = ( ( id . name () ) + STRING_CONSTANT ) + errorMessage ; if ( rejectTooLong ) { messagesList . add ( new com.google.gerrit.server.git.validators.CommitValidationMessage ( message , true ) ) ; throw new com.google.gerrit.server.git.validators.CommitValidationException ( STRING_CONSTANT , messagesList ) ; } messagesList . add ( new com.google.gerrit.server.git.validators.CommitValidationMessage ( ( STRING_CONSTANT + message ) , false ) ) ; }
@ java.lang.Override protected void onLoad () { super . onLoad () ; if ( ( regFocus ) == null ) { regFocus = com.google.gwtexpui.globalkey.client.GlobalKey . addApplication ( this , new com.google.gwtexpui.globalkey.client.KeyCommand ( NUMBER_CONSTANT , CHAR_CONS , Gerrit.C . keySearch () ) { @ java.lang.Override public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { event . preventDefault () ; searchBox . setFocus ( true ) ; searchBox . selectAll () ; } } ) ; } }
public java.util.List < com.google.gerrit.server.git.VersionedMetaData.PathInfo > getPathInfos ( boolean recursive ) throws java.io.IOException { try ( org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk ( reader ) ) { tw . addTree ( revision . getTree () ) ; tw . setRecursive ( recursive ) ; java.util.List < com.google.gerrit.server.git.VersionedMetaData.PathInfo > paths = new java.util.ArrayList <> () ; while ( tw . next () ) { paths . add ( new com.google.gerrit.server.git.VersionedMetaData.PathInfo ( tw ) ) ; } return paths ; } }
@ org.junit.Test public void commitTime ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit root = repo . commit () . create () ; org.eclipse.jgit.revwalk.RevCommit master = repo . commit () . parent ( root ) . create () ; com.google.common.truth.Truth . assertThat ( getTime ( root ) ) . isEqualTo ( ( ( start ) + NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( getTime ( master ) ) . isEqualTo ( ( ( start ) + NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void onKeyUp ( com.google.gwt.event.dom.client.KeyUpEvent event ) { com.google.gerrit.client.admin.ProjectTagsScreen.Query q = new com.google.gerrit.client.admin.ProjectTagsScreen.Query ( filterTxt . getValue () ) ; if ( match . equals ( q.qMatch ) ) { q . start ( start ) ; } else { if ( ( query ) == null ) { q . run () ; } query = q ; } }
void audit ( com.google.gerrit.sshd.SshScope.Context ctx , java.lang.Object result , java.lang.String commandName , java.lang.String [] args ) { final java.lang.String sid = extractSessionId ( ctx ) ; final long created = extractCreated ( ctx ) ; final java.lang.String what = extractWhat ( commandName , args ) ; auditService . dispatch ( new com.google.gerrit.audit.AuditEvent ( sid , extractCurrentUser ( ctx ) , ( STRING_CONSTANT + what ) , created , java.util.Arrays . asList ( args ) , result ) ) ; }
@ java.lang.Override public com.google.gerrit.server.query.Predicate < T > copy ( final java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > children ) { if ( ( children . size () ) != NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return new com.google.gerrit.server.query.NotPredicate ( children . iterator () . next () ) ; }
@ org.junit.Test public void treeTextEscaped ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevBlob blob = repo . blob ( STRING_CONSTANT ) ; repo . branch ( STRING_CONSTANT ) . commit () . add ( STRING_CONSTANT , blob ) . create () ; com.google.common.truth.Truth . assertThat ( buildBlob ( STRING_CONSTANT , STRING_CONSTANT ) ) . isEqualTo ( ( ( STRING_CONSTANT + ( blob . name () ) ) + STRING_CONSTANT ) ) ; }
private void assertProblems ( com.google.gerrit.server.git.gpg.TestKey tk , java.lang.String . . . expected ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.CheckResult result = checker . check ( tk . getPublicKey () , tk . getKeyId () ) ; org.junit.Assert . assertEquals ( java.util.Arrays . asList ( expected ) , result . getProblems () ) ; }
@ java.lang.Override protected void configureServlets () { install ( new com.google.gerrit.server.config.FactoryModule () { @ java.lang.Override protected void configure () { factory ( AgreementInfoFactory.Factory . class ) ; factory ( DeleteExternalIds.Factory . class ) ; factory ( ExternalIdDetailFactory.Factory . class ) ; factory ( RegisterNewEmailSender.Factory . class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.account.AccountSecurityImpl . class ) ; rpc ( com.google.gerrit.httpd.rpc.account.AccountServiceImpl . class ) ; }
@ org.junit.Test public void testCarriageReturn ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( rw ) ; com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator ( null , new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE ) , null , null , null ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = validator . performValidation ( repo , c , rw , com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactly ( STRING_CONSTANT ) ; } }
void loadRevisionInfo () { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi . actions ( getProject () . get () , changeId . get () , revision ) ; call . background () ; call . get ( new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.ActionInfo > > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.ActionInfo > actionMap ) { actionMap . copyKeysIntoChildren ( STRING_CONSTANT ) ; renderRevisionInfo ( changeInfo , actionMap ) ; } } ) ; }
@ java.lang.Override public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId () . toString () ; try { if ( cd . getChange () . getStatus () . isOpen () ) { openIndex . deleteById ( id ) ; commit ( openIndex ) ; } else { closedIndex . deleteById ( id ) ; commit ( closedIndex ) ; } } catch ( org.apache.solr.client.solrj.SolrServerException e ) { throw new java.io.IOException ( e ) ; } }
@ org.junit.Test public void returnsAncestors ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c1_1 = commitBuilder () . add ( STRING_CONSTANT , STRING_CONSTANT ) . message ( STRING_CONSTANT ) . create () ; java.lang.String id1 = getChangeId ( c1_1 ) ; org.eclipse.jgit.revwalk.RevCommit c2_1 = commitBuilder () . add ( STRING_CONSTANT , STRING_CONSTANT ) . message ( STRING_CONSTANT ) . create () ; java.lang.String id2 = getChangeId ( c2_1 ) ; com.google.gerrit.acceptance.GitUtil . pushHead ( testRepo , STRING_CONSTANT , false ) ; assertSubmittedTogether ( id1 ) ; assertSubmittedTogether ( id2 , id2 , id1 ) ; }
@ org.junit.Test public void testChildString () { final com.google.gwtorm.client.IntKeyTestCase.Child c1 = new com.google.gwtorm.client.IntKeyTestCase.Child ( new com.google.gwtorm.client.IntKeyTestCase.Parent ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , c1 . toString () ) ; final com.google.gwtorm.client.IntKeyTestCase.Child c2 = new com.google.gwtorm.client.IntKeyTestCase.Child ( new com.google.gwtorm.client.IntKeyTestCase.Parent ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; c2 . fromString ( c1 . toString () ) ; org.junit.Assert . assertEquals ( c1 , c2 ) ; }
private static com.google.gerrit.reviewdb.client.AccountGroup missing ( com.google.gerrit.reviewdb.client.AccountGroup.Id key ) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey name = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( ( STRING_CONSTANT + key ) ) ; com.google.gerrit.reviewdb.client.AccountGroup g = new com.google.gerrit.reviewdb.client.AccountGroup ( name , key , null ) ; g . setType ( AccountGroup.Type.SYSTEM ) ; return g ; }
@ org.junit.Test public void testNoteInMiddle ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) , call ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) ) ) ; }
static boolean parentsEqual ( org.eclipse.jgit.revwalk.RevCommit a , org.eclipse.jgit.revwalk.RevCommit b ) { if ( ( a . getParentCount () ) != ( b . getParentCount () ) ) { return false ; } for ( int i = NUMBER_CONSTANT ; i < ( a . getParentCount () ) ; i ++ ) { if ( ! ( a . getParent ( i ) . equals ( b . getParent ( i ) ) ) ) { return false ; } } return true ; }
@ java.lang.Override public void visit ( org.pegdown.ast.HeaderNode node ) { java.lang.String tag = STRING_CONSTANT + ( node . getLevel () ) ; html . open ( tag ) ; html . attribute ( STRING_CONSTANT , toc . idFromHeader ( node ) ) ; visitChildren ( node ) ; html . close ( tag ) ; }
public void setSshInjector ( com.google.inject.Injector injector ) { sshModule = copy ( injector ) ; sshGen = injector . getProvider ( com.google.gerrit.server.plugins.ModuleGenerator . class ) ; sshSets = com.google.gerrit.extensions.registration.PrivateInternals_DynamicTypes . dynamicSetsOf ( injector ) ; sshMaps = com.google.gerrit.extensions.registration.PrivateInternals_DynamicTypes . dynamicMapsOf ( injector ) ; onStart . addAll ( com.google.gerrit.server.plugins.PluginGuiceEnvironment . listeners ( injector , com.google.gerrit.server.plugins.StartPluginListener . class ) ) ; onReload . addAll ( com.google.gerrit.server.plugins.PluginGuiceEnvironment . listeners ( injector , com.google.gerrit.server.plugins.ReloadPluginListener . class ) ) ; }
public void onSignOut () { final int max = table . getRowCount () ; for ( int row = NUMBER_CONSTANT ; row < max ; row ++ ) { if ( ( getRowItem ( row ) ) != null ) { table . clearCell ( row , com.google.gerrit.client.changes.ChangeTable.C_STAR ) ; } } }
@ java.lang.Override protected void onInitUI () { super . onInitUI () ; dashes = new com.google.gerrit.client.dashboards.DashboardsTable ( project ) ; com.google.gwt.user.client.ui.FlowPanel fp = new com.google.gwt.user.client.ui.FlowPanel () ; fp . add ( dashes ) ; add ( fp ) ; dashes . setSavePointerId ( ( STRING_CONSTANT + ( getProjectKey () . get () ) ) ) ; display () ; }
public void remove ( com.google.gerrit.common.data.AccessSection section ) { if ( section != null ) { java.lang.String name = section . getName () ; if ( sectionsWithUnknownPermissions . contains ( name ) ) { com.google.gerrit.common.data.AccessSection a = accessSections . get ( name ) ; a . setPermissions ( new java.util.ArrayList < com.google.gerrit.common.data.Permission > () ) ; } else { accessSections . remove ( name ) ; } } }
public void atomicDelete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.Change > changes = null ; changes = db . changes () . byProject ( project . getNameKey () ) ; deleteChanges ( changes ) ; db . accountProjectWatches () . delete ( db . accountProjectWatches () . byProject ( project . getNameKey () ) ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection () ; indexes . setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriteImpl ( indexes , null , new com.google.gerrit.server.index.IndexRewriteImpl.BasicRewritesImpl ( null , indexes ) , new com.google.gerrit.server.query.change.SqlRewriterImpl ( null ) ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection () ; indexes . setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriteImpl ( indexes , new com.google.gerrit.server.query.change.BasicChangeRewrites ( null ) ) ; }
@ org.junit.Test public void testReplaceOverlappingAtFirstCharLongestMatch () { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . html ( STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.RawFindReplace ab = new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ; com.google.gwtexpui.safehtml.client.RawFindReplace abc = new com.google.gwtexpui.safehtml.client.RawFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( ab , abc ) ) . asString () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , o . replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest . repls ( abc , ab ) ) . asString () ) ; }
@ org.junit.Test public void testToString () { org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . toString () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . toString () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . toString () ) ; }
@ java.lang.Override protected void onUnload () { if ( ( updateCheck ) != null ) { updateCheck . cancel () ; updateCheck = null ; } for ( com.google.gwt.event.shared.HandlerRegistration h : handlers ) { h . removeHandler () ; } handlers . clear () ; super . onUnload () ; }
private org.eclipse.jgit.revwalk.RevCommit squashEdit ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.revwalk.RevCommit edit , com.google.gerrit.reviewdb.client.PatchSet basePatchSet ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parent = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . fromString ( basePatchSet . getRevision () . get () ) ) ; if ( parent . getTree () . equals ( edit . getTree () ) ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } return com.google.gerrit.server.edit.ChangeEditUtil . writeSquashedCommit ( rw , inserter , parent , edit ) ; }
@ java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec ( com.googlecode.prolog_cafe.lang.Prolog engine ) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine . setB0 () ; com.googlecode.prolog_cafe.lang.Term a1 = arg1 . dereference () ; com.google.gerrit.server.project.ProjectState projectState = StoredValues.PROJECT_STATE . get ( engine ) ; com.google.gerrit.extensions.client.SubmitType submitType = projectState . getSubmitType () ; if ( ! ( a1 . unify ( gerrit.PRED_project_default_submit_type_1.term [ submitType . ordinal () ] , engine.trail ) ) ) { return engine . fail () ; } return cont ; }
@ java.lang.Override public void doPost ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { try { doAuth ( req , rsp ) ; } catch ( java.lang.Exception e ) { getServletContext () . log ( STRING_CONSTANT , e ) ; finishLogin ( rsp , null , null ) ; } }
public java.lang.Iterable < com.google.gerrit.server.plugins.Plugin > getPlugins ( boolean all ) { if ( ! all ) { return running . values () ; } else { java.util.List < com.google.gerrit.server.plugins.Plugin > plugins = new java.util.ArrayList ( running . values () ) ; plugins . addAll ( disabled . values () ) ; return plugins ; } }
@ org.junit.Test public void byProject ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo1 = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo2 = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo1 ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( newChange ( repo2 ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; }
private org.eclipse.jgit.lib.ObjectId createCommit ( com.google.gerrit.server.IdentifiedUser me , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.revwalk.RevCommit prevEdit , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.lib.ObjectId tree , java.lang.String msg ) throws java.io.IOException { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder () ; builder . setTreeId ( tree ) ; builder . setParentIds ( base ) ; builder . setAuthor ( prevEdit . getAuthorIdent () ) ; builder . setCommitter ( getCommitterIdent ( me ) ) ; builder . setMessage ( msg ) ; return inserter . insert ( builder ) ; }
@ org.junit.Test public void uploadPackSubsetOfBranchesVisibleIncludingHead ( ) throws java.lang.Exception { allow ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; deny ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; assertUploadPackRefs ( STRING_CONSTANT , ( ( r1 ) + STRING_CONSTANT ) , ( ( r1 ) + STRING_CONSTANT ) , ( ( r3 ) + STRING_CONSTANT ) , ( ( r3 ) + STRING_CONSTANT ) , STRING_CONSTANT , STRING_CONSTANT ) ; }
private void assertChangeSetMergeable ( com.google.gerrit.server.query.change.ChangeData change , boolean expected ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet . completeChangeSet ( db , change . change () , user ( admin ) ) ; com.google.common.truth.Truth . assertThat ( submit . unmergeableChanges ( cs ) . isEmpty () ) . isEqualTo ( expected ) ; }
@ java.lang.Override public com.google.gerrit.server.account.GroupMembership membershipsOf ( com.google.gerrit.server.IdentifiedUser user ) { java.lang.String id = com.google.gerrit.server.auth.ldap.LdapGroupBackend . findId ( user . state () . getExternalIds () ) ; if ( id == null ) { return com.google.gerrit.server.account.GroupMembership.EMPTY ; } try { return new com.google.gerrit.server.account.ListGroupMembership ( membershipCache . get ( id ) ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log . warn ( java.lang.String . format ( STRING_CONSTANT , id ) , e ) ; return com.google.gerrit.server.account.GroupMembership.EMPTY ; } }
void close () { try { searcherManager . close () ; } catch ( java.io.IOException e ) { com.google.gerrit.lucene.LuceneChangeIndex.log . warn ( STRING_CONSTANT , e ) ; } try { writer . close ( true ) ; } catch ( java.io.IOException e ) { com.google.gerrit.lucene.LuceneChangeIndex.log . warn ( STRING_CONSTANT , e ) ; } try { dir . close () ; } catch ( java.io.IOException e ) { com.google.gerrit.lucene.LuceneChangeIndex.log . warn ( STRING_CONSTANT , e ) ; } }
private void doTopicEdit () { java.lang.String topic = newTopic . getText () ; com.google.gerrit.client.changes.ChangeApi . topic ( change . getId () . get () , topic , new com.google.gerrit.client.rpc.GerritCallback < java.lang.String > () { @ java.lang.Override public void onSuccess ( java.lang.String result ) { sent = true ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( change . getId () ) ) ; hide () ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { enableButtons ( true ) ; super . onFailure ( caught ) ; } } ) ; }
private static com.google.gerrit.extensions.restapi.BinaryResult base64 ( com.google.gerrit.extensions.restapi.BinaryResult bin ) throws java.io.IOException { int maxSize = com.google.gerrit.httpd.restapi.RestApiServlet . base64MaxSize ( bin . getContentLength () ) ; int estSize = java.lang.Math . min ( com.google.gerrit.httpd.restapi.RestApiServlet . base64MaxSize ( com.google.gerrit.httpd.restapi.RestApiServlet.HEAP_EST_SIZE ) , maxSize ) ; org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet . heap ( estSize , maxSize ) ; try ( java.io.OutputStream encoded = com.google.common.io.BaseEncoding . base64 () . encodingStream ( new java.io.OutputStreamWriter ( buf , java.nio.charset.StandardCharsets.ISO_8859_1 ) ) ) { bin . writeTo ( encoded ) ; } return com.google.gerrit.httpd.restapi.RestApiServlet . asBinaryResult ( buf ) ; }
private void clearActiveLine ( net.codemirror.lib.CodeMirror cm ) { if ( cm . hasActiveLine () ) { net.codemirror.lib.CodeMirror.LineHandle activeLine = cm . getActiveLine () ; cm . removeLineClass ( activeLine , LineClassWhere.WRAP , DiffTable.style . activeLine () ) ; cm . setActiveLine ( null ) ; } }
@ org.junit.Test public void deleteVoteFromReviewableChangeByAdmin ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setApiUser ( admin ) ; deleteVote ( sc , voter ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer , voter ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.DeleteActive.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( self . get () ) == ( rsrc . getUser () ) ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } return setInactiveFlag . deactivate ( rsrc . getUser () . getAccountId () ) ; }
private void selectProtocol ( com.google.gerrit.acceptance.git.PushForReviewIT.Protocol p ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String url ; switch ( p ) { case SSH : url = sshUrl ; break; case HTTP : url = admin . getHttpUrl ( server ) ; break; default: throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + p ) ) ; } git = com.google.gerrit.acceptance.git.GitUtil . cloneProject ( ( ( url + STRING_CONSTANT ) + ( project . get () ) ) ) ; }
private java.util.List < com.google.gerrit.extensions.common.WebLinkInfo > getFileWebLinks ( com.google.gerrit.reviewdb.client.Project project , java.lang.String rev , java.lang.String file ) { java.util.List < com.google.gerrit.extensions.common.WebLinkInfo > links = webLinks . getFileLinks ( project . getName () , rev , file ) ; return links . isEmpty () ? null : links ; }
@ java.lang.Override public void configure () { install ( dbInjector . getInstance ( com.google.gerrit.pgm.util.BatchProgramModule . class ) ) ; install ( com.google.gerrit.server.git.SearchingChangeCacheImpl . module () ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.extensions.events.GitReferenceUpdatedListener . class ) . to ( com.google.gerrit.server.index.change.ReindexAfterUpdate . class ) ; install ( new com.google.gerrit.server.index.DummyIndexModule () ) ; }
public final com.google.gerrit.gpg.CheckResult check ( org.bouncycastle.openpgp.PGPPublicKey key ) { if ( ( store ) == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return check ( key , NUMBER_CONSTANT , true , ( ( trusted ) != null ? new java.util.HashSet < com.google.gerrit.gpg.Fingerprint > () : null ) ) ; }
@ java.lang.Deprecated private void appendFileLine ( java.lang.StringBuilder cmts , com.google.gerrit.server.patch.PatchFile fileData , short side , int line ) { java.lang.String lineStr = getLine ( fileData , side , line ) ; cmts . append ( STRING_CONSTANT ) . append ( line ) . append ( STRING_CONSTANT ) . append ( lineStr ) . append ( STRING_CONSTANT ) ; }
private org.eclipse.jgit.internal.storage.file.LockFile lockForDelete ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { java.io.File importStatus = projects.FS_LAYOUT . getImportStatusFile ( project . get () ) ; org.eclipse.jgit.internal.storage.file.LockFile lockFile = new org.eclipse.jgit.internal.storage.file.LockFile ( importStatus ) ; try { if ( lockFile . lock () ) { return lockFile ; } throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } }
public java.util.List < com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition.Item > getTransitions ( java.lang.String issueKey ) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi < com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition > api = apiBuilder . get ( com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition . class , STRING_CONSTANT ) ; return java.util.Arrays . asList ( api . doGet ( ( issueKey + STRING_CONSTANT ) , java.net.HttpURLConnection.HTTP_OK ) . getTransitions () ) ; }
@ org.junit.Test public void conflictingChanges ( ) throws com.jcraft.jsch.JSchException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git , true ) ; com.google.gerrit.acceptance.PushOneCommit.Result conflictingChange1 = createChange ( git , true ) ; com.google.gerrit.acceptance.PushOneCommit.Result conflictingChange2 = createChange ( git , true ) ; createChange ( git , false ) ; java.util.Set < java.lang.String > changes = queryConflictingChanges ( change ) ; assertChanges ( changes , conflictingChange1 , conflictingChange2 ) ; }
private net.codemirror.lib.Configuration getConfig () { return net.codemirror.lib.Configuration . create () . set ( STRING_CONSTANT , false ) . set ( STRING_CONSTANT , NUMBER_CONSTANT ) . set ( STRING_CONSTANT , NUMBER_CONSTANT ) . set ( STRING_CONSTANT , true ) . set ( STRING_CONSTANT , NUMBER_CONSTANT ) . set ( STRING_CONSTANT , false ) . set ( STRING_CONSTANT , true ) . set ( STRING_CONSTANT , true ) . set ( STRING_CONSTANT , STRING_CONSTANT ) . set ( STRING_CONSTANT , type ) ; }
@ java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec ( com.googlecode.prolog_cafe.lang.Prolog engine ) throws com.googlecode.prolog_cafe.lang.PrologException { engine . setB0 () ; com.googlecode.prolog_cafe.lang.Term a1 = arg1 . dereference () ; com.google.gerrit.reviewdb.Change change = StoredValues.CHANGE . get ( engine ) ; com.google.gerrit.reviewdb.Branch.NameKey name = change . getDest () ; if ( ! ( a1 . unify ( com.googlecode.prolog_cafe.lang.SymbolTerm . create ( name . get () ) , engine.trail ) ) ) { return engine . fail () ; } return cont ; }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi revert ( com.google.gerrit.extensions.api.changes.RevertInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changeApi . id ( revert . get () . apply ( change , in ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } catch ( com.google.gerrit.common.errors.EmailException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override protected void preUpdateSchema ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema s = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) ; try ( com.google.gwtorm.jdbc.JdbcExecutor e = new com.google.gwtorm.jdbc.JdbcExecutor ( s ) ) { renameTables ( db , s , e ) ; renameColumn ( db , s , e ) ; } renameIndexes ( db ) ; }
@ org.junit.Test public void setAssigneeOnReviewableChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; assign ( sc , sc.owner , sc.assignee ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.assignee ) ; }
private static org.bouncycastle.openpgp.PGPPublicKeyRingCollection readPubRing ( final java.io.File pub ) { try ( java.io.InputStream fin = new java.io.FileInputStream ( pub ) ; java.io.InputStream in = org.bouncycastle.openpgp.PGPUtil . getDecoderStream ( fin ) ) { return new org.bouncycastle.openpgp.PGPPublicKeyRingCollection ( in ) ; } catch ( java.io.IOException | org.bouncycastle.openpgp.PGPException e ) { throw new com.google.inject.ProvisionException ( ( STRING_CONSTANT + pub ) , e ) ; } }
@ org.junit.Test public void testNameValue () { final java.lang.String name = STRING_CONSTANT ; final java.lang.String value = STRING_CONSTANT ; final com.google.gerrit.server.query.OperatorPredicate < java.lang.String > f = f ( name , value ) ; org.junit.Assert . assertSame ( name , f . getOperator () ) ; org.junit.Assert . assertSame ( value , f . getValue () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , f . getChildren () . size () ) ; }
@ org.junit.Test public void addReviewer ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput () ; in.reviewer = user.email ; gApi . changes () . id ( r . getChangeId () ) . addReviewer ( in ) ; org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableSet . of ( user.id ) , getReviewers ( r . getChangeId () ) ) ; }
@ org.junit.Test public void deleteVoteFromReviewableChangeWithSelfCc ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; selfCc () ; deleteVote ( sc , voter ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer , voter ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ org.junit.Test public void mergeByOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.diff.FileInfo > m ) { files . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . _number () ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , rev . _number () ) , style , editMessage , reply ) ; files . setValue ( m , myLastReply , comments . get ( NUMBER_CONSTANT ) , drafts . get ( NUMBER_CONSTANT ) , fileTableMode ) ; }
@ java.lang.Override public void configure () { listener () . to ( com.google.gerrit.lucene.LuceneIndexModule.SingleVersionListener . class ) ; bind ( new com.google.inject.TypeLiteral < java.util.Map < java.lang.String , java.lang.Integer > > () {} ) . annotatedWith ( com.google.inject.name.Names . named ( com.google.gerrit.lucene.LuceneIndexModule.SINGLE_VERSIONS ) ) . toInstance ( singleVersions ) ; }
@ java.lang.Override public void start () { queue . start () ; if ( ( ( srvInfo . getState () ) == ( ServerInformation.State.STARTUP ) ) && ( config . isReplicateAllOnPluginStart () ) ) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState ( new com.googlesource.gerrit.plugins.replication.PushResultProcessing.GitUpdateProcessing ( eventDispatcher . get () ) ) ; pushAllFuture . set ( pushAll . create ( null , com.googlesource.gerrit.plugins.replication.ReplicationFilter . all () , state , false ) . schedule ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ) ; } }
public static void setAssignee ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String user , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.AccountInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.AssigneeInput input = com.google.gerrit.client.changes.ChangeApi.AssigneeInput . create () ; input . assignee ( user ) ; com.google.gerrit.client.changes.ChangeApi . change ( project , id ) . view ( STRING_CONSTANT ) . put ( input , cb ) ; }
private java.lang.String url ( com.google.gerrit.client.info.FileInfo info ) { return info . binary () ? com.google.gerrit.client.Dispatcher . toUnified ( project , base , curr , info . path () ) : ( mode ) == ( com.google.gerrit.client.change.FileTable.Mode.REVIEW ) ? com.google.gerrit.client.Dispatcher . toPatch ( project , base , curr , info . path () ) : com.google.gerrit.client.Dispatcher . toEditScreen ( project , curr , info . path () ) ; }
private com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > sort ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > in ) { if ( in != null ) { for ( com.google.gerrit.client.changes.CommentInfo c : com.google.gerrit.client.rpc.Natives . asList ( in ) ) { c . path ( path ) ; } java.util.Collections . sort ( com.google.gerrit.client.rpc.Natives . asList ( in ) , new java.util.Comparator < com.google.gerrit.client.changes.CommentInfo > () { @ java.lang.Override public int compare ( com.google.gerrit.client.changes.CommentInfo a , com.google.gerrit.client.changes.CommentInfo b ) { return a . updated () . compareTo ( b . updated () ) ; } } ) ; } return in ; }
private static boolean valid ( final com.google.gerrit.client.data.ApprovalType at , final com.google.gerrit.server.workflow.FunctionState state ) { if ( ( state . getChange () . getStatus () ) != ( Change.Status.NEW ) ) { return false ; } for ( final com.google.gerrit.client.data.ApprovalType t : state . getApprovalTypes () ) { if ( ! ( state . isValid ( t ) ) ) { return false ; } } return true ; }
@ java.lang.Override public boolean equals ( final java.lang.Object other ) { if ( other == null ) return false ; if ( ( getClass () ) == ( other . getClass () ) ) { final com.google.gerrit.server.query.VariablePredicate < > v = ( ( com.google.gerrit.server.query.VariablePredicate < > ) ( other ) ) ; return ( getName () . equals ( v . getName () ) ) && ( getChildren () . equals ( v . getChildren () ) ) ; } return false ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( ( ( db ) instanceof com.google.gwtorm.jdbc.JdbcSchema ) ) . isTrue () ; connection = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) . getConnection () ; createdOnRetrieval = connection . prepareStatement ( STRING_CONSTANT ) ; createdOnUpdate = connection . prepareStatement ( STRING_CONSTANT ) ; auditEntryDeletion = connection . prepareStatement ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testAppend_String () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; org.junit.Assert . assertSame ( b , b . append ( STRING_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . append ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
private java.io.File getSiteFromReviewDb ( java.sql.Connection conn ) { try ( java.sql.Statement stmt = conn . createStatement () ; java.sql.ResultSet rs = stmt . executeQuery ( STRING_CONSTANT ) ) { if ( rs . next () ) { return new java.io.File ( rs . getString ( NUMBER_CONSTANT ) ) ; } } catch ( java.sql.SQLException e ) { return null ; } return null ; }
@ java.lang.Override void send ( java.lang.String message ) { com.google.gerrit.client.changes.ChangeApi . createChange ( project , branch , topic , message , base , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( result . legacyId () ) ) ; hide () ; } } ) ; }
protected Project.NameKey createProject ( java.lang.String nameSuffix , com.google.gerrit.reviewdb.client.Project.NameKey parent , boolean createEmptyCommit , com.google.gerrit.extensions.client.SubmitType submitType ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = name ( nameSuffix ) ; in.parent = ( parent != null ) ? parent . get () : null ; in.submitType = submitType ; in.createEmptyCommit = createEmptyCommit ; return createProject ( in ) ; }
@ java.lang.Override public com.google.gerrit.server.notedb.NoteDbUpdateManager.Result execute ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.server.notedb.NoteDbUpdateManager manager ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( failNextUpdate . getAndSet ( false ) ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } com.google.gerrit.server.notedb.NoteDbUpdateManager.Result result = delegate . execute ( db , changeId , manager ) ; if ( stealNextUpdate . getAndSet ( false ) ) { throw new java.io.IOException ( STRING_CONSTANT ) ; } return result ; }
private void addDiffChunkAndPadding ( net.codemirror.lib.CodeMirror cmToPad , int lineToPad , int lineOnOther , int chunkSize , boolean edit ) { net.codemirror.lib.CodeMirror otherCm = otherCm ( cmToPad ) ; linePaddingOnOtherSideMap . put ( otherCm . getLineHandle ( lineOnOther ) , new com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper ( addPaddingWidget ( cmToPad , lineToPad , NUMBER_CONSTANT , Unit.EM , null ) , lineToPad , chunkSize ) ) ; diffChunks . add ( new com.google.gerrit.client.diff.DiffChunkInfo ( getSideFromCm ( otherCm ) , ( ( lineOnOther - chunkSize ) + NUMBER_CONSTANT ) , lineOnOther , edit ) ) ; }
public com.google.common.collect.ImmutableListMultimap < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > byChangeFromIndex ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changeData = queryProvider . get () . setRequestedFields ( ChangeField.ID , ChangeField.STAR ) . byLegacyChangeId ( changeId ) ; if ( ( changeData . size () ) != NUMBER_CONSTANT ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( changeId ) ; } return changeData . get ( NUMBER_CONSTANT ) . stars () ; }
public T load ( ) throws com.google.gwtorm.server.OrmException { if ( loaded ) { return self () ; } if ( ( ! ( migration . enabled () ) ) || ( ( changeId ) == null ) ) { loadDefaults () ; return self () ; } try ( org.eclipse.jgit.lib.Repository repo = repoManager . openMetadataRepository ( getProjectName () ) ) { load ( repo ) ; loaded = true ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return self () ; }
@ java.lang.Override protected com.google.gerrit.extensions.restapi.Response < > applyImpl ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.PublishDraftPatchSet.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return publish . apply ( updateFactory , rsrc . getControl () . getUser () , rsrc . getChange () , rsrc . getChange () . currentPatchSetId () , null ) ; }
public com.google.gerrit.reviewdb.client.PatchSet currentPatchSet ( ) throws com.google.gwtorm.server.OrmException { if ( ( currentPatchSet ) == null ) { com.google.gerrit.reviewdb.client.Change c = change () ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : patches () ) { if ( p . getId () . equals ( c . currentPatchSetId () ) ) { currentPatchSet = p ; return p ; } } } return currentPatchSet ; }
private void setDefaultVisibilityCache () { if ( ( visibilityCache ) == null ) { if ( config . getSubsections ( STRING_CONSTANT ) . contains ( STRING_CONSTANT ) ) { visibilityCache = new com.google.gitiles.VisibilityCache ( false , com.google.gitiles.ConfigUtil . getCacheBuilder ( config , STRING_CONSTANT ) ) ; } else { visibilityCache = new com.google.gitiles.VisibilityCache ( false ) ; } } }
@ java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo get ( java.util.EnumSet < com.google.gerrit.extensions.common.ListChangesOption > s ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return ChangeInfoMapper.INSTANCE . apply ( changeJson . get () . addOptions ( s ) . format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private java.util.HashMap < java.lang.String , java.lang.String > getGitblitInitParams () { java.util.HashMap < java.lang.String , java.lang.String > props = new java.util.HashMap < java.lang.String , java.lang.String > () ; props . put ( STRING_CONSTANT , STRING_CONSTANT ) ; props . put ( STRING_CONSTANT , STRING_CONSTANT ) ; return props ; }
public java.lang.String getChangeUrl () { if ( ( getGerritUrl () ) != null ) { final java.lang.StringBuilder r = new java.lang.StringBuilder () ; r . append ( getGerritUrl () ) ; r . append ( change . getChangeId () ) ; return r . toString () ; } return null ; }
public void syncChangeStatus ( final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { final java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > approvals = db . patchSetApprovals () . byChange ( change . getId () ) . toList () ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals ) { a . cache ( change ) ; } db . patchSetApprovals () . update ( approvals ) ; }
@ java.lang.Override protected void configure () { install ( new com.google.inject.assistedinject.FactoryModuleBuilder () . implement ( com.google.gerrit.server.index.change.ChangeIndex . class , com.google.gerrit.lucene.LuceneChangeIndex . class ) . build ( ChangeIndex.Factory . class ) ) ; install ( new com.google.inject.assistedinject.FactoryModuleBuilder () . implement ( com.google.gerrit.server.index.account.AccountIndex . class , com.google.gerrit.lucene.LuceneAccountIndex . class ) . build ( AccountIndex.Factory . class ) ) ; install ( new com.google.gerrit.server.index.IndexModule ( threads ) ) ; if ( ( singleVersions ) == null ) { install ( new com.google.gerrit.lucene.LuceneIndexModule.MultiVersionModule () ) ; } else { install ( new com.google.gerrit.lucene.LuceneIndexModule.SingleVersionModule ( singleVersions ) ) ; } }
public com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Project.NameKey projectKey = change . getProject () ; try { return projectControl . controlFor ( projectKey , user ) . controlFor ( db , change ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } }
private java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > suggestReviewers ( com.google.gerrit.server.api.changes.SuggestedReviewersRequest r ) throws com.google.gerrit.extensions.restapi.RestApiException { try { suggestReviewers . setQuery ( r . getQuery () ) ; suggestReviewers . setLimit ( r . getLimit () ) ; return suggestReviewers . apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ org.junit.Test public void byProjectPrefix ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo1 = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo2 = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( repo1 , newChange ( repo1 ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( repo2 , newChange ( repo2 ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; assertQuery ( STRING_CONSTANT , change2 , change1 ) ; }
@ java.lang.Override public boolean cancel ( boolean mayInterruptIfRunning ) { if ( task . cancel ( mayInterruptIfRunning ) ) { if ( ( ( runnable ) instanceof com.google.gerrit.server.git.WorkQueue.CancelableRunnable ) && ( running . compareAndSet ( false , true ) ) ) { ( ( com.google.gerrit.server.git.WorkQueue.CancelableRunnable ) ( runnable ) ) . cancel () ; } executor . remove ( this ) ; executor . purge () ; return true ; } return false ; }
private void setXsrfToken () { com.google.gerrit.client.Gerrit.xGerritAuth = com.google.gwt.user.client.Cookies . getCookie ( com.google.gerrit.common.data.HostPageData.XSRF_COOKIE_NAME ) ; com.google.gwtjsonrpc.client.JsonUtil . setDefaultXsrfManager ( new com.google.gwtjsonrpc.client.XsrfManager () { @ java.lang.Override public java.lang.String getToken ( com.google.gwtjsonrpc.client.JsonDefTarget proxy ) { return com.google.gerrit.client.Gerrit.xGerritAuth ; } @ java.lang.Override public void setToken ( com.google.gwtjsonrpc.client.JsonDefTarget proxy , java.lang.String token ) {} } ) ; }
private com.google.gerrit.httpd.resources.Resource getMarkdownAsHtmlResource ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String md , int lastModified ) throws java.io.IOException { byte [] html = new com.google.gerrit.server.documentation.MarkdownFormatter () . suppressHtml () . markdownToDocHtml ( replaceMacros ( project , md ) , java.nio.charset.StandardCharsets.UTF_8 . name () ) ; return new com.google.gerrit.httpd.resources.SmallResource ( html ) . setContentType ( STRING_CONSTANT ) . setCharacterEncoding ( java.nio.charset.StandardCharsets.UTF_8 . name () ) . setLastModified ( lastModified ) ; }
protected void bccWatchesNotifyAllComments () { if ( ( db ) != null ) { final com.google.gerrit.server.project.ProjectState ps = getProjectState () ; if ( ps != null ) { for ( final com.google.gerrit.reviewdb.AccountProjectWatch w : getProjectWatches () ) { if ( w . isNotifyAllComments () ) { add ( RecipientType.BCC , w . getAccountId () ) ; } } } } }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi cherryPick ( com.google.gerrit.extensions.api.changes.CherryPickInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changes . id ( cherryPick . apply ( revision , in ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.common.errors.EmailException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override protected void run ( ) throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input . fromCommits ( com.google.common.collect.Lists . transform ( commitsToBan , ObjectId : : getName ) ) ; input.reason = reason ; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit . apply ( new com.google.gerrit.server.project.ProjectResource ( projectControl ) , input ) ; printCommits ( r.newlyBanned , STRING_CONSTANT ) ; printCommits ( r.alreadyBanned , STRING_CONSTANT ) ; printCommits ( r.ignored , STRING_CONSTANT ) ; } catch ( java.lang.Exception e ) { throw die ( e ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < java.util.Set < java.lang.String > > apply ( com.google.gerrit.server.change.ChangeResource req ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req . getNotes () . load () ; java.util.Set < java.lang.String > hashtags = notes . getHashtags () ; if ( hashtags == null ) { hashtags = java.util.Collections . emptySet () ; } return com.google.gerrit.extensions.restapi.Response . ok ( hashtags ) ; }
private static Account.Id toAccountId ( com.google.gerrit.server.account.AccountResolver accountResolver , java.lang.String nameOrEmail ) throws com.google.gerrit.common.errors.NoSuchAccountException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Account a = accountResolver . findByNameOrEmail ( nameOrEmail ) ; if ( a == null ) { throw new com.google.gerrit.common.errors.NoSuchAccountException ( ( ( STRING_CONSTANT + nameOrEmail ) + STRING_CONSTANT ) ) ; } return a . getId () ; }
private static void setMissingHeader ( java.util.Map < java.lang.String , com.google.gerrit.server.mail.send.EmailHeader > hdrs , java.lang.String name , java.lang.String value ) { if ( ( ! ( hdrs . containsKey ( name ) ) ) || ( hdrs . get ( name ) . isEmpty () ) ) { hdrs . put ( name , new com.google.gerrit.server.mail.send.EmailHeader.String ( value ) ) ; } }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info . revisions () . copyKeysIntoChildren ( STRING_CONSTANT ) ; com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeInfo.RevisionInfo > list = info . revisions () . values () ; com.google.gerrit.client.changes.ChangeInfo.RevisionInfo . sortRevisionInfoByNumber ( list ) ; diffTable . setUpPatchSetNav ( list , diff ) ; }
@ org.junit.Test public void commentOnReviewableChangeByReviewerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.reviewer , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private com.google.gerrit.reviewdb.client.Change newChange ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges . newChange ( project , changeOwner . getAccountId () ) ; com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate ( c , changeOwner ) ; u . setBranch ( c . getDest () . get () ) ; u . commit () ; return c ; }
public void load ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { reader = db . newObjectReader () ; try { revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( reader ) . parseCommit ( id ) : null ; onLoad () ; } finally { reader . release () ; reader = null ; } }
@ java.lang.Override public com.google.common.base.Optional < com.google.gerrit.reviewdb.client.Account.Id > load ( java.lang.String username ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = db . accountExternalIds () . get ( new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT , username ) ) ; if ( extId != null ) { return com.google.common.base.Optional . of ( extId . getAccountId () ) ; } return com.google.common.base.Optional . absent () ; } }
@ java.lang.Override public Response.Redirect apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.avatar.AvatarProvider impl = avatarProvider . get () ; if ( impl == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } java.lang.String url = impl . getUrl ( rsrc . getUser () , size ) ; if ( com.google.common.base.Strings . isNullOrEmpty ( url ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } else { return com.google.gerrit.extensions.restapi.Response . redirect ( url ) ; } }
public com.googlecode.prolog_cafe.lang.Term arg ( int nth ) { com.googlecode.prolog_cafe.lang.Term t = this ; int old_nth = nth ; while ( ( t instanceof com.googlecode.prolog_cafe.lang.ListTerm ) && ( NUMBER_CONSTANT < nth ) ) { nth -- ; t = ( ( com.googlecode.prolog_cafe.lang.ListTerm ) ( t ) ) . cdr . dereference () ; } if ( t instanceof com.googlecode.prolog_cafe.lang.ListTerm ) return ( ( com.googlecode.prolog_cafe.lang.ListTerm ) ( t ) ) . car ; throw new java.lang.ArrayIndexOutOfBoundsException ( old_nth ) ; }
@ java.lang.Override public void index ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) throws java.io.IOException { for ( com.google.gerrit.index.Index < com.google.gerrit.reviewdb.client.AccountGroup.UUID , com.google.gerrit.server.group.InternalGroup > i : getWriteIndexes () ) { groupCache . evict ( uuid ) ; java.util.Optional < com.google.gerrit.server.group.InternalGroup > internalGroup = groupCache . get ( uuid ) ; if ( internalGroup . isPresent () ) { i . replace ( internalGroup . get () ) ; } else { i . delete ( uuid ) ; } } fireGroupIndexedEvent ( uuid . get () ) ; }
@ java.lang.Override public com.google.gerrit.extensions.auth.oauth.OAuthToken getAccessToken ( com.google.gerrit.extensions.auth.oauth.OAuthVerifier rv ) { if ( ( rv == null ) || ( ( rv . getValue () ) == null ) ) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException ( STRING_CONSTANT ) ; } return getAsOAuthToken ( uaaClient . getAccessToken ( rv . getValue () ) ) ; }
@ java.lang.Override public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.AddMembers.PutMember.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input () ; in._oneMember = id ; java.util.List < com.google.gerrit.server.group.MembersCollection.MemberInfo > list = put . get () . apply ( resource , in ) ; if ( ( list . size () ) == NUMBER_CONSTANT ) { return list . get ( NUMBER_CONSTANT ) ; } else { throw new java.lang.IllegalStateException () ; } }
private java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , com.google.gerrit.reviewdb.client.AccountGroupMember > getMembers ( final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , com.google.gerrit.reviewdb.client.AccountGroupMember > members = com.google.common.collect.Maps . newHashMap () ; for ( final com.google.gerrit.reviewdb.client.AccountGroupMember m : db . get () . accountGroupMembers () . byGroup ( groupId ) ) { members . put ( m . getAccountId () , m ) ; } return members ; }
public static java.lang.String getToken ( final javax.servlet.http.HttpServletRequest req ) { java.lang.String token = req . getPathInfo () ; if ( com.google.common.base.Strings . isNullOrEmpty ( token ) ) { return com.google.gerrit.httpd.LoginUrlToken.DEFAULT_TOKEN ; } else { return com.google.common.base.CharMatcher . is ( CHAR_CONS ) . trimLeadingFrom ( token ) ; } }
@ org.junit.Test public void testProjectCreation ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectA = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . createRepository ( projectA ) ) { com.google.common.truth.Truth . assertThat ( repo ) . isNotNull () ; } try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( projectA ) ) { com.google.common.truth.Truth . assertThat ( repo ) . isNotNull () ; } com.google.common.truth.Truth . assertThat ( repoManager . list () ) . containsExactly ( projectA ) ; }
private org.eclipse.jgit.lib.ObjectId createNoteContent ( com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt = new com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter ( gerritServerIdent . getTimeZone () , anonymousCowardName ) ; if ( ps != null ) { try { createCodeReviewNote ( ps , fmt ) ; return getInserter () . insert ( Constants.OBJ_BLOB , fmt . toString () . getBytes ( STRING_CONSTANT ) ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new java.io.IOException ( e ) ; } } return null ; }
private static java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > byCommentStatus ( com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > comments , final com.google.gerrit.reviewdb.client.PatchLineComment.Status status ) { return com.google.common.collect.Lists . newArrayList ( com.google.common.collect.Iterables . filter ( comments , new com.google.common.base.Predicate < com.google.gerrit.reviewdb.client.PatchLineComment > () { @ java.lang.Override public boolean apply ( com.google.gerrit.reviewdb.client.PatchLineComment input ) { return ( input . getStatus () ) == status ; } } ) ) ; }
public static void incrementPatchSet ( com.google.gerrit.reviewdb.client.Change change ) { com.google.gerrit.reviewdb.client.PatchSet.Id curr = change . currentPatchSetId () ; com.google.gerrit.reviewdb.client.PatchSetInfo ps = new com.google.gerrit.reviewdb.client.PatchSetInfo ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getId () , ( curr != null ? ( curr . get () ) + NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ) ; ps . setSubject ( STRING_CONSTANT ) ; change . setCurrentPatchSet ( ps ) ; }
void testRelative ( java.lang.String a , java.lang.String b , java.lang.String want ) throws java.lang.Exception { java.lang.String got = com.googlesource.gerrit.plugins.supermanifest.JiriUpdater . relativize ( java.net.URI . create ( a ) , java.net.URI . create ( b ) ) . toString () ; if ( ! ( got . equals ( want ) ) ) { fail ( java.lang.String . format ( STRING_CONSTANT , a , b , got , want ) ) ; } }
private static java.util.List < java.lang.String > transformCommits ( java.util.List < org.eclipse.jgit.lib.ObjectId > commits ) { if ( ( commits == null ) || ( commits . isEmpty () ) ) { return null ; } return com.google.common.collect.Lists . transform ( commits , ObjectId : : getName ) ; }
void setLineLength ( int columns ) { columnMarginA . getStyle () . setMarginLeft ( ( columns * ( cmA . defaultCharWidth () ) ) , Unit.PX ) ; columnMarginB . getStyle () . setMarginLeft ( ( columns * ( cmB . defaultCharWidth () ) ) , Unit.PX ) ; }
@ java.lang.Override public void removeMembers ( java.lang.String . . . members ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers . apply ( rsrc , AddMembers.Input . fromMembers ( java.util.Arrays . asList ( members ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ org.junit.Test public void deleteBranchesNotFound ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput () ; java.util.List < java.lang.String > branches = com.google.common.collect.Lists . newArrayList ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; branches . add ( STRING_CONSTANT ) ; input.branches = branches ; try { project () . deleteBranches ( input ) ; fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceConflictException e ) { com.google.common.truth.Truth . assertThat ( e ) . hasMessageThat () . isEqualTo ( errorMessageForBranches ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) ) ) ; } assertBranchesDeleted ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; }
@ org.junit.Test public void submitOnPushSuccessfulMerge ( ) throws java.lang.Exception { java.lang.String master = STRING_CONSTANT ; org.eclipse.jgit.lib.ObjectId objectId = repo () . getRef ( STRING_CONSTANT ) . getObjectId () ; push ( master , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; testRepo . reset ( objectId ) ; grant ( Permission.SUBMIT , project , STRING_CONSTANT ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = push ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; r . assertOkStatus () ; r . assertChange ( Change.Status.MERGED , null , admin ) ; assertMergeCommit ( master , STRING_CONSTANT ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > addReviewers ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , com.google.gerrit.common.data.LabelTypes labelTypes , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.lang.Iterable < com.google.gerrit.reviewdb.client.Account.Id > wantReviewers , java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > existingReviewers ) throws com.google.gwtorm.server.OrmException { return addReviewers ( db , update , labelTypes , change , ps . getId () , info . getAuthor () . getAccount () , info . getCommitter () . getAccount () , wantReviewers , existingReviewers ) ; }
com.google.gerrit.server.restapi.change.PostReviewers.Addition ccCurrentUser ( com.google.gerrit.server.CurrentUser user , com.google.gerrit.server.change.RevisionResource revision ) { return new com.google.gerrit.server.restapi.change.PostReviewers.Addition ( user . getUserName () . orElse ( null ) , revision . getChangeResource () , com.google.common.collect.ImmutableSet . of ( user . getAccountId () ) , null , com.google.gerrit.extensions.client.ReviewerState.CC , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE , com.google.common.collect.ImmutableListMultimap . of () , true ) ; }
private com.google.gerrit.reviewdb.client.Account findAccount ( java.lang.String nameOrEmail ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException { try { return accounts . parse ( nameOrEmail ) . getAccount () ; } catch ( com.google.gerrit.extensions.restapi.UnprocessableEntityException e ) { switch ( authType ) { case HTTP_LDAP : case CLIENT_SSL_CERT_LDAP : case LDAP : if ( ( accountResolver . find ( nameOrEmail ) ) == null ) { return createAccountByLdap ( nameOrEmail ) ; } break; default: } throw e ; } }
@ org.junit.Test public void testChildHashCode () { final int pId = NUMBER_CONSTANT ; final int cId = NUMBER_CONSTANT ; final com.google.gwtorm.client.IntKeyTestCase.Parent p = new com.google.gwtorm.client.IntKeyTestCase.Parent ( pId ) ; final com.google.gwtorm.client.IntKeyTestCase.Child c = new com.google.gwtorm.client.IntKeyTestCase.Child ( p , cId ) ; org.junit.Assert . assertSame ( p , c . getParentKey () ) ; org.junit.Assert . assertTrue ( ( cId != ( c . hashCode () ) ) ) ; }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , com.google.gerrit.extensions.restapi.CacheControl c ) throws java.io.IOException { res . setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet . configureCaching ( req , res , null , c ) ; com.google.gerrit.httpd.restapi.RestApiServlet . replyText ( req , res , msg ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gwtorm.nosql.generic.Row > fetchRows ( java.lang.Iterable < byte [] > keys ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gwtorm.nosql.generic.Row > r = new java.util.ArrayList <> () ; for ( byte [] key : keys ) { byte [] val = fetchRow ( key ) ; if ( val != null ) { r . add ( new com.google.gwtorm.nosql.generic.Row ( key , val ) ) ; } } return new com.google.gwtorm.server.ListResultSet ( r ) ; }
protected void assertSubmittable ( java.lang.String changeId ) throws java.lang.Exception { com.google.gerrit.server.change.RevisionResource rsrc = parseCurrentRevisionResource ( changeId ) ; com.google.gerrit.extensions.webui.UiAction.Description desc = submitHandler . getDescription ( rsrc ) ; com.google.common.truth.Truth . assertThat ( desc . isVisible () ) . named ( STRING_CONSTANT ) . isTrue () ; com.google.common.truth.Truth . assertThat ( desc . isEnabled () ) . named ( STRING_CONSTANT ) . isTrue () ; }
@ java.lang.Override public void onSend () { com.google.gerrit.client.changes.ChangeApi . rebase ( project . get () , id . get () , revision , getBase () , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.info.ChangeInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { sent = true ; hide () ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( project , id ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; super . onFailure ( caught ) ; } } ) ; }
@ org.junit.Test public void restoreReviewableChangeByAdmin ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageAbandonedReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; restore ( sc.changeId , admin ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( admin ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public void extend ( com.google.gerrit.server.data.ChangeAttribute a , com.google.gerrit.reviewdb.client.Change change ) { a.createdOn = ( change . getCreatedOn () . getTime () ) / NUMBER_CONSTANT ; a.lastUpdated = ( change . getLastUpdatedOn () . getTime () ) / NUMBER_CONSTANT ; a.open = change . getStatus () . isOpen () ; }
@ org.junit.Test public void offlineUponStart ( ) throws java.lang.Exception { setUpClientMock ( true ) ; eventsDb . createDBIfNotCreated () ; org.easymock.EasyMock . expectLastCall () . andThrow ( new java.sql.SQLException ( new java.net.ConnectException () ) ) . once () ; eventsDb . queryOne () ; org.easymock.EasyMock . expectLastCall () . andThrow ( new java.sql.SQLException () ) ; easyMock . replayAll () ; store = new com.ericsson.gerrit.plugins.eventslog.SQLStore ( pcFactoryMock , userProviderMock , cfgMock , eventsDb , localEventsDb , poolMock ) ; store . start () ; easyMock . verifyAll () ; }
protected void renderTextError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String message ) throws java.io.IOException { res . setStatus ( statusCode ) ; setApiHeaders ( req , res , com.google.gitiles.FormatType.TEXT ) ; setCacheHeaders ( res ) ; try ( java.io.Writer out = com.google.gitiles.BaseServlet . newWriter ( req , res ) ) { out . write ( message ) ; } }
@ java.lang.Override public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { final com.google.gwt.user.client.ui.Widget sender = ( ( com.google.gwt.user.client.ui.Widget ) ( event . getSource () ) ) ; if ( ( send ) == sender ) { onSend () ; } else if ( ( cancel ) == sender ) { saveStateOnUnload = false ; goChange () ; } }
private com.google.gerrit.common.data.PermissionRange getRange ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.common.data.LabelType lt , com.google.gerrit.reviewdb.client.Account.Id id ) { java.lang.String permission = com.google.gerrit.common.data.Permission . forLabel ( lt . getName () ) ; com.google.gerrit.server.IdentifiedUser user = userFactory . create ( id ) ; return ctl . forUser ( user ) . getRange ( permission ) ; }
public void testInheritRead_OverrideWithDeny () { grant ( parent , com.google.gerrit.common.data.Permission.READ , registered , STRING_CONSTANT ) ; grant ( local , com.google.gerrit.common.data.Permission.READ , registered , STRING_CONSTANT ) . setDeny () ; com.google.gerrit.server.project.ProjectControl u = user () ; assertFalse ( STRING_CONSTANT , u . isVisible () ) ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.diff.FileInfo > m ) { files . setRevisions ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . _number () ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , rev . _number () ) ) ; files . setValue ( m , myLastReply , comments . get ( NUMBER_CONSTANT ) , drafts . get ( NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void byPathRegex ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . parseBody ( repo . commit () . message ( STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . create () ) ; com.google.gerrit.reviewdb.client.Change change = insert ( newChange ( repo , commit , null , null , null ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change ) ; }
@ org.junit.Test public void testToSafeHtml () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; b . append ( NUMBER_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml h = b . toSafeHtml () ; org.junit.Assert . assertNotNull ( h ) ; org.junit.Assert . assertNotSame ( h , b ) ; org.junit.Assert . assertFalse ( ( h instanceof com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , h . asString () ) ; }
void setMaxHeight ( int height ) { maxHeight = height - ( ( getTabBar () . getOffsetHeight () ) + NUMBER_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; i < ( getTabBar () . getTabCount () ) ; i ++ ) { tabs . get ( i ) . setMaxHeight ( maxHeight ) ; } }
@ org.junit.Test public void deleteBranches ( ) throws java.lang.Exception { java.util.HashMap < java.lang.String , org.eclipse.jgit.revwalk.RevCommit > initialRevisions = initialRevisions ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput () ; input.branches = com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ; project () . deleteBranches ( input ) ; assertBranchesDeleted ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; assertRefUpdatedEvents ( initialRevisions ) ; }
public com.google.gerrit.server.project.ChangeControl changeControl ( ) throws com.google.gwtorm.server.OrmException { if ( ( changeControl ) == null ) { com.google.gerrit.reviewdb.client.Change c = change () ; try { changeControl = changeControlFactory . controlFor ( db , c , userFactory . create ( c . getOwner () ) ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return changeControl ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.RequestCleanup . class ) . in ( com.google.inject.servlet.RequestScoped . class ) ; bind ( com.google.gerrit.server.config.RequestScopedReviewDbProvider . class ) ; bind ( IdentifiedUser.RequestFactory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.project.PerRequestProjectControlCache . class ) . in ( com.google.inject.servlet.RequestScoped . class ) ; bind ( ProjectControl.Factory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
protected java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > getProjectOwners () { final com.google.gerrit.server.project.ProjectState r ; r = projectCache . get ( change . getProject () ) ; return r != null ? r . getOwners () : java.util.Collections . < com.google.gerrit.client.reviewdb.AccountGroup.Id > emptySet () ; }
@ java.lang.Override public void delete ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.io.IOException { org.apache.lucene.index.Term idTerm = com.google.gerrit.lucene.QueryBuilder . idTerm ( schema , id ) ; try { com.google.common.util.concurrent.Futures . allAsList ( openIndex . delete ( idTerm ) , closedIndex . delete ( idTerm ) ) . get () ; } catch ( java.util.concurrent.ExecutionException | java.lang.InterruptedException e ) { throw new java.io.IOException ( e ) ; } }
@ org.junit.Test public void testFindConflictingSubtree ( ) throws java.lang.Exception { changedPaths = com.google.common.collect.Sets . newHashSet ( STRING_CONSTANT ) ; runCheck ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidatorTest.INITIAL_PATHNAMES , changedPaths , messages , vistedPaths ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( messages ) ) . containsExactly ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessage ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator . conflict ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( vistedPaths ) . containsExactly ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
private boolean isSubmitForMissingCommitsStillPossible ( final com.google.gerrit.server.git.CodeReviewCommit commit ) { if ( ( ( commit.missing ) == null ) || ( commit.missing . isEmpty () ) ) { return false ; } for ( com.google.gerrit.server.git.CodeReviewCommit missingCommit : commit.missing ) { loadChangeInfo ( missingCommit ) ; if ( ( missingCommit.patchsetId ) == null ) { return false ; } if ( ! ( missingCommit . getChange () . currentPatchSetId () . equals ( missingCommit.patchsetId ) ) ) { return false ; } } return true ; }
public void set ( com.google.gerrit.client.DiffObject base , com.google.gerrit.reviewdb.client.PatchSet.Id curr , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.client.change.ChangeScreen.Style style , com.google.gwt.user.client.ui.Widget replyButton , com.google.gerrit.client.change.FileTable.Mode mode , boolean editExists ) { this . base = base ; this . curr = curr ; this . project = project ; this . style = style ; this . replyButton = replyButton ; this . mode = mode ; this . editExists = editExists ; }
@ org.junit.Test public void testUnblockInLocal_Fails () { com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , fixers , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl f = util . user ( local , fixers ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , f . controlForRef ( STRING_CONSTANT ) . canUpdate () ) ; }
@ org.junit.After public void deleteGpgKeys ( ) throws java.lang.Exception { java.lang.String ref = com.google.gerrit.reviewdb.client.RefNames.REFS_GPG_KEYS ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( allUsers ) ) { if ( ( repo . getRefDatabase () . exactRef ( ref ) ) != null ) { org.eclipse.jgit.lib.RefUpdate ru = repo . updateRef ( ref ) ; ru . setForceUpdate ( true ) ; com.google.common.truth.Truth . assert_ () . withFailureMessage ( ( STRING_CONSTANT + ref ) ) . that ( ru . delete () ) . isEqualTo ( RefUpdate.Result.FORCED ) ; } } }
@ java.lang.Override public com.google.gerrit.gpg.CheckResult checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key , int depth ) { try { if ( ( depth == NUMBER_CONSTANT ) && ( ( expectedUser ) != null ) ) { return checkIdsForExpectedUser ( key ) ; } return checkIdsForArbitraryUser ( key ) ; } catch ( org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException e ) { java.lang.String msg = STRING_CONSTANT ; com.google.gerrit.gpg.GerritPublicKeyChecker.log . warn ( ( ( msg + STRING_CONSTANT ) + ( com.google.gerrit.gpg.PublicKeyStore . keyIdToString ( key . getKeyID () ) ) ) , e ) ; return com.google.gerrit.gpg.CheckResult . bad ( msg ) ; } }
@ org.junit.Test public void testCreate_NotExisting ( ) throws java.io.IOException { final java.nio.file.Path root = com.google.gerrit.server.config.SitePathsTest . random () ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertTrue ( site.isNew ) ; org.junit.Assert . assertEquals ( root , site.site_path ) ; org.junit.Assert . assertEquals ( root . resolve ( STRING_CONSTANT ) , site.etc_dir ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onCursoBlinkRate ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > e ) { java.lang.String v = e . getValue () ; if ( ( v != null ) && ( ( v . length () ) > NUMBER_CONSTANT ) ) { prefs . cursorBlinkRate ( java.lang.Math . max ( NUMBER_CONSTANT , java.lang.Integer . parseInt ( v ) ) ) ; if ( ( view ) != null ) { view . setOption ( STRING_CONSTANT , prefs . cursorBlinkRate () ) ; } } }
public void createTableIfNotExists ( ) throws com.google.gwtorm.server.OrmException { try ( java.sql.Connection con = ds . getConnection () ; java.sql.Statement stmt = con . createStatement () ) { doCreateTable ( stmt ) ; } catch ( java.sql.SQLException e ) { throw convertError ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public void funnel ( K from , com.google.common.hash.PrimitiveSink into ) { try { java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream ( new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream ( into ) ) ; try { ser . writeObject ( from ) ; ser . flush () ; } finally { ser . close () ; } } catch ( java.io.IOException err ) { throw new java.lang.RuntimeException ( STRING_CONSTANT , err ) ; } }
@ java.lang.Override public java.lang.String encode ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String emailAddress ) { try { java.lang.String payload = java.lang.String . format ( STRING_CONSTANT , accountId , emailAddress ) ; byte [] utf8 = payload . getBytes ( STRING_CONSTANT ) ; java.lang.String base64 = org.eclipse.jgit.util.Base64 . encodeBytes ( utf8 ) ; return emailRegistrationToken . newToken ( base64 ) ; } catch ( com.google.gwtjsonrpc.server.XsrfException | java.io.UnsupportedEncodingException e ) { throw new java.lang.IllegalArgumentException ( e ) ; } }
private void initWildCardProject ( final com.google.gerrit.reviewdb.ReviewDb c ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Project p ; p = new com.google.gerrit.reviewdb.Project ( com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME ) ; p . setDescription ( STRING_CONSTANT ) ; p . setUseContributorAgreements ( false ) ; c . projects () . insert ( java.util.Collections . singleton ( p ) ) ; }
@ java.lang.Override protected void onInitUI () { table = new com.google.gerrit.client.changes.DashboardTable ( this , params ) { @ java.lang.Override public void finishDisplay () { super . finishDisplay () ; display () ; } } ; super . onInitUI () ; java.lang.String title = table . getTitle () ; if ( title != null ) { setWindowTitle ( title ) ; setPageTitle ( title ) ; } add ( table ) ; }
protected static final com.google.gerrit.server.schema.ScriptRunner getScriptRunner ( java.lang.String path ) throws java.io.IOException { if ( path == null ) { return ScriptRunner.NOOP ; } com.google.gerrit.server.schema.ScriptRunner runner ; try ( java.io.InputStream in = com.google.gerrit.reviewdb.server.ReviewDb . class . getResourceAsStream ( path ) ) { if ( in == null ) { throw new java.lang.IllegalStateException ( ( ( STRING_CONSTANT + path ) + STRING_CONSTANT ) ) ; } runner = new com.google.gerrit.server.schema.ScriptRunner ( path , in ) ; } return runner ; }
protected static java.lang.Iterable < java.lang.Integer > ids ( java.lang.Iterable < com.google.gerrit.extensions.common.AccountInfo > accounts ) { return com.google.common.collect.FluentIterable . from ( accounts ) . transform ( new com.google.common.base.Function < com.google.gerrit.extensions.common.AccountInfo , java.lang.Integer > () { @ java.lang.Override public java.lang.Integer apply ( com.google.gerrit.extensions.common.AccountInfo in ) { return in._accountId ; } } ) ; }
private void sendHtml ( javax.servlet.http.HttpServletResponse res , org.w3c.dom.Document doc ) throws java.io.IOException { byte [] bin = com.google.gerrit.httpd.HtmlDomUtil . toUTF8 ( doc ) ; res . setStatus ( HttpServletResponse.SC_UNAUTHORIZED ) ; res . setContentType ( STRING_CONSTANT ) ; res . setCharacterEncoding ( STRING_CONSTANT ) ; res . setContentLength ( bin.length ) ; try ( javax.servlet.ServletOutputStream out = res . getOutputStream () ) { out . write ( bin ) ; } }
private com.google.gerrit.common.ChangeHookRunner.PatchSetAttribute getPatchSetAttribute ( final com.google.gerrit.reviewdb.PatchSet patchSet ) { com.google.gerrit.common.ChangeHookRunner.PatchSetAttribute p = new com.google.gerrit.common.ChangeHookRunner.PatchSetAttribute () ; p.revision = patchSet . getRevision () . get () ; p.number = java.lang.Integer . toString ( patchSet . getPatchSetId () ) ; p.ref = patchSet . getRefName () ; return p ; }
@ org.junit.Test public void testGetAddressAccess ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = open () ; org.junit.Assert . assertNotNull ( schema . addresses () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , schema . addresses () . getRelationName () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , schema . addresses () . getRelationID () ) ; }
@ java.lang.Override public java.lang.Boolean load ( java.lang.String groupDn ) throws java.lang.Exception { final javax.naming.directory.DirContext ctx = helper . open () ; try { javax.naming.Name compositeGroupName = new javax.naming.CompositeName () . add ( groupDn ) ; try { ctx . getAttributes ( compositeGroupName ) ; return true ; } catch ( javax.naming.NamingException e ) { return false ; } } finally { helper . close ( ctx ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > files ( java.lang.String base ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return ( ( java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > ) ( listFiles . get () . setBase ( base ) . apply ( revision ) . value () ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
protected void selectProtocol ( com.google.gerrit.acceptance.git.AbstractPushForReview.Protocol p ) throws java.lang.Exception { java.lang.String url ; switch ( p ) { case SSH : url = sshUrl ; break; case HTTP : url = admin . getHttpUrl ( server ) ; break; default: throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + p ) ) ; } setRepo ( com.google.gerrit.acceptance.GitUtil . cloneProject ( project , ( ( url + STRING_CONSTANT ) + ( project . get () ) ) ) ) ; }
@ org.junit.Test public void testStop ( ) throws java.lang.Exception { evictCacheExecutorProvider . start () ; com.google.common.truth.Truth . assertThat ( evictCacheExecutorProvider . get () ) . isEqualTo ( executorMock ) ; evictCacheExecutorProvider . stop () ; org.mockito.Mockito . verify ( executorMock ) . shutdown () ; com.google.common.truth.Truth . assertThat ( evictCacheExecutorProvider . get () ) . isNull () ; }
protected void deny ( com.google.gerrit.reviewdb.client.Project.NameKey p , java.lang.String permission , com.google.gerrit.reviewdb.client.AccountGroup.UUID id , java.lang.String ref ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache . checkedGet ( p ) . getConfig () ; com.google.gerrit.server.project.Util . deny ( cfg , permission , id , ref ) ; saveProjectConfig ( p , cfg ) ; }
@ org.junit.Test public void queryChangesNoOptions ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.common.ChangeInfo result = com.google.common.collect.Iterables . getOnlyElement ( query ( r . getChangeId () ) ) ; com.google.common.truth.Truth . assertThat ( result.labels ) . isNull () ; com.google.common.truth.Truth . assertThat ( result.messages ) . isNull () ; com.google.common.truth.Truth . assertThat ( result.revisions ) . isNull () ; com.google.common.truth.Truth . assertThat ( result.actions ) . isNull () ; }
private void createAdminsGroup ( com.google.gerrit.server.Sequences seqs , org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.common.data.GroupReference groupReference ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getGroupCreation ( seqs , groupReference ) ; com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate . builder () . setDescription ( STRING_CONSTANT ) . build () ; createGroup ( allUsersRepo , groupCreation , groupUpdate ) ; }
@ org.junit.Test public void testPushNewPatchsetToRefsChanges ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( STRING_CONSTANT ) ; r . assertOkStatus () ; com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , PushOneCommit.SUBJECT , STRING_CONSTANT , STRING_CONSTANT , r . getChangeId () ) ; r = push . to ( ( STRING_CONSTANT + ( r . getChange () . change () . getId () . get () ) ) ) ; r . assertOkStatus () ; }
private java.util.Set < java.lang.String > getRefNamesAllUsers ( java.lang.String prefix ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = repoManager . openRepository ( allUsers ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { org.eclipse.jgit.lib.RefDatabase refDb = repo . getRefDatabase () ; return refDb . getRefs ( prefix ) . keySet () ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close () ; } }
private java.lang.String readAbandonMessage ( org.eclipse.jgit.lib.Config cfg , java.lang.String webUrl ) { java.lang.String abandonMessage = cfg . getString ( com.google.gerrit.server.config.ChangeCleanupConfig.SECTION , null , com.google.gerrit.server.config.ChangeCleanupConfig.KEY_ABANDON_MESSAGE ) ; if ( com.google.common.base.Strings . isNullOrEmpty ( abandonMessage ) ) { abandonMessage = com.google.gerrit.server.config.ChangeCleanupConfig.DEFAULT_ABANDON_MESSAGE ; } if ( ! ( com.google.common.base.Strings . isNullOrEmpty ( webUrl ) ) ) { abandonMessage = abandonMessage . replaceAll ( STRING_CONSTANT , webUrl ) ; } return abandonMessage ; }
private void updateAccountInNoteDb ( org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , allUsersName , allUsersRepo ) ; org.eclipse.jgit.lib.PersonIdent ident = serverIdent . get () ; md . getCommitBuilder () . setAuthor ( ident ) ; md . getCommitBuilder () . setCommitter ( ident ) ; new com.google.gerrit.server.account.AccountConfig ( account . getId () , allUsersRepo ) . load () . setAccount ( account ) . commit ( md ) ; }
@ org.junit.Test public void submitOnPushMergeConflict ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId objectId = repo () . getRef ( STRING_CONSTANT ) . getObjectId () ; push ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; testRepo . reset ( objectId ) ; grant ( Permission.SUBMIT , project , STRING_CONSTANT ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = push ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; r . assertErrorStatus () ; r . assertChange ( Change.Status.NEW , null ) ; r . assertMessage ( CommitMergeStatus.PATH_CONFLICT . getMessage () ) ; }
public static java.util.Map < java.lang.String , java.lang.String > menuEntry ( java.lang.String text , java.lang.String url ) { if ( url != null ) { return com.google.common.collect.ImmutableMap . of ( STRING_CONSTANT , text , STRING_CONSTANT , url ) ; } return com.google.common.collect.ImmutableMap . of ( STRING_CONSTANT , text ) ; }
private static < T > T readContentFromJson ( com.google.gerrit.acceptance.RestResponse r , int expectedStatus , java.lang.Class < T > clazz ) throws java.lang.Exception { r . assertStatus ( expectedStatus ) ; try ( com.google.gson.stream.JsonReader jsonReader = new com.google.gson.stream.JsonReader ( r . getReader () ) ) { jsonReader . setLenient ( true ) ; return newGson () . fromJson ( jsonReader , clazz ) ; } }
@ org.junit.Test public void listTasksWithoutViewQueueCapability ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession . get ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; java.util.List < com.google.gerrit.server.config.ListTasks.TaskInfo > result = newGson () . fromJson ( r . getReader () , new com.google.gson.reflect.TypeToken < java.util.List < com.google.gerrit.server.config.ListTasks.TaskInfo > > () {} . getType () ) ; com.google.common.truth.Truth . assertThat ( result ) . isEmpty () ; }
@ org.junit.Test public void banCommit_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , BanCommit.Input . fromCommits ( STRING_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil . current ( db . get () , rsrc . getNotes () ) ; return includedIn . apply ( rsrc . getProject () , ps . getRevision () . get () ) ; }
private void verifyComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { com.google.common.base.Preconditions . checkArgument ( ( ( c . getRevId () ) != null ) , STRING_CONSTANT , c ) ; com.google.common.base.Preconditions . checkArgument ( c . getAuthor () . equals ( getAccountId () ) , ( STRING_CONSTANT + STRING_CONSTANT ) , getAccountId () , c ) ; }
private com.google.inject.AbstractModule createIndexModule () { if ( slave ) { return new com.google.gerrit.server.index.DummyIndexModule () ; } switch ( indexType ) { case LUCENE : return ( luceneModule ) != null ? luceneModule : new com.google.gerrit.lucene.LuceneIndexModule () ; default: throw new java.lang.IllegalStateException ( ( STRING_CONSTANT + ( indexType ) ) ) ; } }
private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gerrit.reviewdb.client.Account.Id reviewerId ) { com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id = com.google.common.collect.Iterables . getLast ( ctl . getLabelTypes () . getLabelTypes () ) . getLabelId () ; return new com.google.gerrit.reviewdb.client.PatchSetApproval ( new com.google.gerrit.reviewdb.client.PatchSetApproval.Key ( patchSetId , reviewerId , id ) , ( ( short ) ( NUMBER_CONSTANT ) ) , com.google.gerrit.server.util.TimeUtil . nowTs () ) ; }
private void set ( java.lang.String branch , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { final org.eclipse.jgit.lib.RefUpdate u = realDb . updateRef ( ( ( org.eclipse.jgit.lib.Constants.R_HEADS ) + branch ) ) ; u . setForceUpdate ( true ) ; u . setNewObjectId ( id ) ; switch ( u . update () ) { case NEW : case FAST_FORWARD : case FORCED : break; default: org.junit.Assert . fail ( ( ( ( STRING_CONSTANT + branch ) + STRING_CONSTANT ) + ( u . getResult () ) ) ) ; } }
protected com.google.gitiles.FakeHttpServletResponse buildResponse ( java.lang.String path , java.lang.String queryString , int expectedStatus ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletRequest req = com.google.gitiles.FakeHttpServletRequest . newRequest () ; req . setPathInfo ( path ) ; if ( queryString != null ) { req . setQueryString ( queryString ) ; } com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse () ; servlet . service ( req , res ) ; com.google.common.truth.Truth . assertThat ( res . getStatus () ) . isEqualTo ( expectedStatus ) ; return res ; }
void onRestore ( int idx ) { java.lang.String path = list . get ( idx ) . path () ; com.google.gerrit.client.changes.ChangeEditApi . restore ( project . get () , curr . getParentKey () . get () , path , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChangeInEditMode ( project , curr . getParentKey () ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) {} } ) ; }
public static void resize ( com.google.gwt.user.client.ui.Widget w , java.lang.String id ) { java.lang.StringBuilder autoResizeScript = new java.lang.StringBuilder () ; autoResizeScript . append ( STRING_CONSTANT ) ; autoResizeScript . append ( STRING_CONSTANT ) ; autoResizeScript . append ( id ) ; autoResizeScript . append ( STRING_CONSTANT ) ; autoResizeScript . append ( STRING_CONSTANT ) ; autoResizeScript . append ( STRING_CONSTANT ) ; autoResizeScript . append ( STRING_CONSTANT ) ; w . getElement () . setAttribute ( STRING_CONSTANT , autoResizeScript . toString () ) ; }
private void initApprovals ( final com.google.gerrit.client.changes.PatchSetPublishDetail r , final com.google.gwt.user.client.ui.Panel body ) { for ( final com.google.gerrit.client.data.ApprovalType ct : com.google.gerrit.client.rpc.Common . getGerritConfig () . getApprovalTypes () . getApprovalTypes () ) { if ( r . isAllowed ( ct . getCategory () . getId () ) ) { initApprovalType ( r , body , ct ) ; } } }
@ java.lang.Override public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { com.google.gerrit.reviewdb.client.Change change = rsrc . getChange () ; return new com.google.gerrit.extensions.webui.UiAction.Description () . setLabel ( STRING_CONSTANT ) . setTitle ( STRING_CONSTANT ) . setVisible ( ( ( ! ( change . isPrivate () ) ) && ( canSetPrivate ( rsrc ) ) ) ) ; }
private void setStatus ( com.google.gerrit.server.notedb.ChangeUpdate update ) { java.lang.String msg = message . getMessage () ; if ( msg == null ) { return; } if ( com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_ABANDONED_REGEXP . matcher ( msg ) . matches () ) { update . setStatus ( Change.Status.ABANDONED ) ; noteDbChange . setStatus ( Change.Status.ABANDONED ) ; return; } if ( com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_RESTORED_REGEXP . matcher ( msg ) . matches () ) { update . setStatus ( Change.Status.NEW ) ; noteDbChange . setStatus ( Change.Status.NEW ) ; } }
private java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > safeGetApprovals ( com.google.gerrit.server.git.CodeReviewCommit n ) { try { return approvalsUtil . byPatchSet ( db . get () , n.notes , n.patchsetId ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.git.MergeUtil.log . error ( ( STRING_CONSTANT + ( n.patchsetId ) ) , e ) ; return java.util.Collections . emptyList () ; } }
private java.lang.String replaceInUrl ( java.lang.String placeholder , java.lang.String url , java.lang.String replacement ) { if ( ( ( url == null ) || ( replacement == null ) ) || ( ! ( url . contains ( placeholder ) ) ) ) { return url ; } return url . replace ( placeholder , com.google.gerrit.extensions.restapi.Url . encode ( replacement ) ) ; }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply ( com.google.gerrit.server.project.CommitResource rsrc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc . getCommit () ; com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc . getProjectState () . getNameKey () ; return includedIn . apply ( project , commit . getId () . getName () ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onLineWrapping ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs . lineWrapping ( e . getValue () ) ; view . getCmFromSide ( DisplaySide.A ) . setOption ( STRING_CONSTANT , prefs . lineWrapping () ) ; view . getCmFromSide ( DisplaySide.B ) . setOption ( STRING_CONSTANT , prefs . lineWrapping () ) ; }
@ org.junit.Test public void taggedCommitTime ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo . commit () . create () ; repo . tick ( NUMBER_CONSTANT ) ; org.eclipse.jgit.revwalk.RevTag tag = repo . tag ( STRING_CONSTANT , commit ) ; com.google.common.truth.Truth . assertThat ( getTime ( commit ) ) . isEqualTo ( ( ( start ) + NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( getTime ( tag ) ) . isEqualTo ( ( ( start ) + NUMBER_CONSTANT ) ) ; }
private void deleteProject ( org.eclipse.jgit.transport.URIish replicateURI ) { if ( ! ( replicateURI . isRemote () ) ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue . deleteLocally ( replicateURI ) ; } else if ( com.googlesource.gerrit.plugins.replication.ReplicationQueue . isSSH ( replicateURI ) ) { deleteRemoteSsh ( replicateURI ) ; } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . warn ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , replicateURI ) ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection () ; indexes . setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriter ( indexes , com.google.gerrit.server.index.IndexConfig . create ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; }
public static com.google.gerrit.server.util.LabelVote parseWithEquals ( java.lang.String text ) { com.google.common.base.Preconditions . checkArgument ( ( ! ( com.google.common.base.Strings . isNullOrEmpty ( text ) ) ) , STRING_CONSTANT ) ; int e = text . lastIndexOf ( CHAR_CONS ) ; com.google.common.base.Preconditions . checkArgument ( ( e >= NUMBER_CONSTANT ) , STRING_CONSTANT , text ) ; return com.google.gerrit.server.util.LabelVote . create ( text . substring ( NUMBER_CONSTANT , e ) , java.lang.Short . parseShort ( text . substring ( ( e + NUMBER_CONSTANT ) ) ) ) ; }
private com.google.gerrit.extensions.common.EditInfo toEditInfo ( boolean files ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession . get ( ( files ? urlGetFiles () : urlEdit () ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( org.apache.http.HttpStatus.SC_OK ) ; return newGson () . fromJson ( r . getReader () , com.google.gerrit.extensions.common.EditInfo . class ) ; }
@ org.junit.Test public void testParentString () { final com.google.gwtorm.client.IntKeyTestCase.Parent p1 = new com.google.gwtorm.client.IntKeyTestCase.Parent ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , p1 . toString () ) ; final com.google.gwtorm.client.IntKeyTestCase.Parent p2 = new com.google.gwtorm.client.IntKeyTestCase.Parent ( NUMBER_CONSTANT ) ; p2 . fromString ( p1 . toString () ) ; org.junit.Assert . assertEquals ( p1 , p2 ) ; }
private java.lang.String getLatestDiff ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId oldTreeId , org.eclipse.jgit.lib.ObjectId newTreeId ) throws java.io.IOException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream () ; try ( org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter ( out ) ) { fmt . setRepository ( repo ) ; fmt . format ( oldTreeId , newTreeId ) ; fmt . flush () ; return out . toString () ; } }
private void renderOwner ( com.google.gerrit.client.changes.ChangeInfo info ) { java.lang.String name = ( ( info . owner () . name () ) != null ) ? info . owner () . name () : com.google.gerrit.client.Gerrit . getConfig () . getAnonymousCowardName () ; java.lang.String email = ( ( info . owner () . email () ) != null ) ? info . owner () . email () : name ; ownerText . setInnerText ( name ) ; ownerText . setTitle ( email ) ; }
public java.lang.String getScope ( java.util.Set < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > scopes ) { if ( ( scopes . size () ) <= NUMBER_CONSTANT ) { return STRING_CONSTANT ; } java.lang.StringBuilder out = new java.lang.StringBuilder () ; for ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes ) { if ( ( out . length () ) > NUMBER_CONSTANT ) { out . append ( STRING_CONSTANT ) ; } out . append ( scope . getValue () ) ; } return out . toString () ; }
@ org.junit.Test public void commentOnReviewableChangeByReviewerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.reviewer , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ org.junit.Test public void submitWithCherryPickIfFastForwardPossible ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange () ; submit ( change . getChangeId () ) ; assertCherryPick ( git , false ) ; com.google.common.truth.Truth . assertThat ( getRemoteHead () . getParent ( NUMBER_CONSTANT ) ) . isEqualTo ( change . getCommit () . getParent ( NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testFindReplace () { final java.lang.String find = STRING_CONSTANT ; final java.lang.String replace = STRING_CONSTANT ; final com.google.gwtexpui.safehtml.client.RawFindReplace a = new com.google.gwtexpui.safehtml.client.RawFindReplace ( find , replace ) ; org.junit.Assert . assertEquals ( find , a . pattern () . getSource () ) ; org.junit.Assert . assertEquals ( replace , a . replace ( find ) ) ; org.junit.Assert . assertEquals ( ( ( ( STRING_CONSTANT + find ) + STRING_CONSTANT ) + replace ) , a . toString () ) ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.SubmitInput in = com.google.gerrit.client.changes.ChangeApi.SubmitInput . create () ; in . wait_for_merge ( true ) ; com.google.gerrit.client.changes.ChangeApi . call ( id , commit , STRING_CONSTANT ) . post ( in , cb ) ; }
public void set ( com.google.gerrit.reviewdb.client.PatchSet.Id base , com.google.gerrit.reviewdb.client.PatchSet.Id curr , com.google.gerrit.client.change.ChangeScreen2.Style style , com.google.gwt.user.client.ui.Widget replyButton , com.google.gerrit.client.change.FileTable.Mode mode , boolean editExists ) { this . base = base ; this . curr = curr ; this . style = style ; this . replyButton = replyButton ; this . mode = mode ; this . editExists = editExists ; }
public static void rename ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String path , java.lang.String newPath , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input . create () ; in . oldPath ( path ) ; in . newPath ( newPath ) ; com.google.gerrit.client.changes.ChangeApi . edit ( project , id ) . post ( in , cb ) ; }
@ org.junit.Test public void setAssigneeToSelfOnReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; assign ( sc , sc.owner , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer , sc.assignee ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) ; }
public static void assertBranchInfo ( com.google.gerrit.server.project.ListBranches.BranchInfo expected , com.google.gerrit.server.project.ListBranches.BranchInfo actual ) { com.google.common.truth.Truth . assertThat ( actual.ref ) . isEqualTo ( expected.ref ) ; if ( ( expected.revision ) != null ) { com.google.common.truth.Truth . assertThat ( actual.revision ) . isEqualTo ( expected.revision ) ; } com.google.common.truth.Truth . assertThat ( com.google.gerrit.acceptance.rest.project.BranchAssert . toBoolean ( actual.canDelete ) ) . isEqualTo ( expected.canDelete ) ; }
@ org.junit.Test public void restore ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; gApi . changes () . id ( r . getChangeId () ) . abandon () ; gApi . changes () . id ( r . getChangeId () ) . restore () ; }
private java.lang.String newChange ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , ident , git , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ) ; return push . to ( STRING_CONSTANT ) . getChangeId () ; }
private static java.util.TreeMap < java.lang.Integer , com.google.gerrit.reviewdb.client.PatchSet > getPatchSets ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets () ; java.util.TreeMap < java.lang.Integer , com.google.gerrit.reviewdb.client.PatchSet > result = new java.util.TreeMap <> () ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId () . get () , ps ) ; } return result ; }
@ org.junit.Test public void testFileExtension_Constant ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.RegexFilePredicate p = com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; }
@ java.lang.Override public void writeCommit ( com.google.gerrit.server.notedb.BatchMetaDataUpdate batch ) throws com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder () ; if ( migration . writeChanges () ) { java.util.concurrent.atomic.AtomicBoolean removedAllComments = new java.util.concurrent.atomic.AtomicBoolean () ; org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes ( removedAllComments ) ; if ( removedAllComments . get () ) { batch . removeRef ( getRefName () ) ; } else if ( treeId != null ) { builder . setTreeId ( treeId ) ; batch . write ( builder ) ; } } }
@ java.lang.Override public java.lang.String getSqlType ( final com.google.gwtorm.schema.ColumnModel col , final com.google.gwtorm.schema.sql.SqlDialect dialect ) { final java.lang.StringBuilder r = new java.lang.StringBuilder () ; r . append ( dialect . getSqlTypeName ( getSqlTypeConstant () ) ) ; if ( col . isNotNull () ) { r . append ( STRING_CONSTANT ) ; } return r . toString () ; }
@ org.junit.Test public void testAppend_StringBuilder () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; org.junit.Assert . assertSame ( b , b . append ( new java.lang.StringBuilder ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertSame ( b , b . append ( new java.lang.StringBuilder ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
void invalidateAll () { com.google.gerrit.server.cache.h2.H2CacheImpl.SqlHandle c = null ; try { c = acquire () ; try ( java.sql.Statement s = c.conn . createStatement () ) { s . executeUpdate ( STRING_CONSTANT ) ; } bloomFilter = newBloomFilter () ; } catch ( java.sql.SQLException e ) { com.google.gerrit.server.cache.h2.H2CacheImpl.log . warn ( ( STRING_CONSTANT + ( url ) ) , e ) ; c = close ( c ) ; } finally { release ( c ) ; } }
@ java.lang.Override public int run ( ) throws java.lang.Exception { final java.lang.String v = com.google.gerrit.pgm.Version . getVersion () ; if ( v == null ) { java.lang.System.err . println ( STRING_CONSTANT ) ; return NUMBER_CONSTANT ; } java.lang.System.out . println ( ( STRING_CONSTANT + v ) ) ; return NUMBER_CONSTANT ; }
@ org.junit.Test public void testAddTooLongPath ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( rw ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator . performValidation ( repo , c , rw , com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest . getMaxPathLength () ) ; java.util.Set < java.lang.String > expected = com.google.common.collect.ImmutableSet . of ( ( STRING_CONSTANT + ( com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG ) ) ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; } }
boolean add ( final java.lang.Runnable newTask ) { synchronized ( this ) { if ( ( ! ( shutdownStarted ) ) && ( ! ( shutdownComplete ) ) ) { if ( tasks . isEmpty () ) { java.lang.Runtime . getRuntime () . addShutdownHook ( this ) ; } tasks . add ( newTask ) ; return true ; } return false ; } }
public void setEnableSmallFileFeatures ( final boolean on ) { enableSmallFileFeatures = on ; if ( enableSmallFileFeatures ) { syntaxHighlighting . setValue ( value . isSyntaxHighlighting () ) ; } else { syntaxHighlighting . setValue ( false ) ; } toggleEnabledStatus ( update . isEnabled () ) ; }
@ org.junit.Test public void testBulletList4 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . html ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( STRING_CONSTANT + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.BEGIN_LIST ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.END_LIST ) ) , n . asString () ) ; }
@ org.junit.Test public void mergeByOtherNotifyOwnerReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , other , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( sc.starrer ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; }
private void assertRedirectsTo ( java.lang.String expectedLocation , javax.servlet.http.HttpServletRequest req ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse () ; servlet . service ( req , res ) ; com.google.common.truth.Truth . assertThat ( res . getStatus () ) . isEqualTo ( javax.servlet.http.HttpServletResponse.SC_MOVED_PERMANENTLY ) ; com.google.common.truth.Truth . assertThat ( res . getHeader ( com.google.common.net.HttpHeaders.LOCATION ) ) . isEqualTo ( expectedLocation ) ; }
@ org.junit.Test public void testGetUser ( ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( getConfiguration () . http () . user () ) . isEmpty () ; globalPluginConfig . setString ( com.ericsson.gerrit.plugins.highavailability.Configuration.HTTP_SECTION , null , com.ericsson.gerrit.plugins.highavailability.Configuration.USER_KEY , com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.USER ) ; com.google.common.truth.Truth . assertThat ( getConfiguration () . http () . user () ) . isEqualTo ( com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.USER ) ; }
public void push ( com.googlecode.prolog_cafe.lang.Undoable t ) { if ( ( ++ ( top ) ) >= ( buffer.length ) ) { int len = buffer.length ; com.googlecode.prolog_cafe.lang.Undoable [] new_buffer = new com.googlecode.prolog_cafe.lang.Undoable [ NUMBER_CONSTANT * len ] ; java.lang.System . arraycopy ( buffer , NUMBER_CONSTANT , new_buffer , NUMBER_CONSTANT , len ) ; buffer = new_buffer ; } buffer [ top ] = t ; }
@ java.lang.Override public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > read ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = args.db . get () . changes () . get ( id ) ; if ( c != null ) { return new com.google.gwtorm.server.ListResultSet ( java.util.Collections . singletonList ( args.changeDataFactory . create ( args.db . get () , c ) ) ) ; } else { return new com.google.gwtorm.server.ListResultSet ( java.util.Collections . < com.google.gerrit.server.query.change.ChangeData > emptyList () ) ; } }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Change change = object . change () ; if ( change == null ) { return false ; } final com.google.gerrit.server.IdentifiedUser owner = userFactory . create ( dbProvider , change . getOwner () ) ; return owner . getEffectiveGroups () . contains ( uuid ) ; }
private PushOneCommit.Result createChangeWithTopic ( java.lang.String topic ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git ) ; com.google.common.truth.Truth . assertThat ( topic ) . isNotEmpty () ; return push . to ( ( STRING_CONSTANT + topic ) ) ; }
private void setRulesPl ( java.lang.String rule ) throws java.lang.Exception { try ( com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory . create ( project ) ) { com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.RulesPl r = new com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.RulesPl () ; r . load ( md ) ; r.rule = rule ; r . commit ( md ) ; } }
public void load ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { this . rw = walk ; this . reader = walk . getObjectReader () ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; onLoad () ; } finally { this . rw = null ; this . reader = null ; } }
@ java.lang.Override public void run () { try ( com.google.gerrit.reviewdb.server.ReviewDb db = database . open () ) { for ( ; ; ) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next () ; if ( extId == null ) { break; } convertLocalUserToLowerCase ( db , extId ) ; synchronized ( monitor ) { monitor . update ( NUMBER_CONSTANT ) ; } } } catch ( com.google.gwtorm.server.OrmException e ) { e . printStackTrace () ; } }
private org.bouncycastle.openpgp.PGPPublicKeyRingCollection readPubRing ( ) throws com.google.gerrit.client.rpc.ContactInformationStoreException { final java.io.File pub = new java.io.File ( server . getSitePath () , STRING_CONSTANT ) ; try { java.io.InputStream in = new java.io.FileInputStream ( pub ) ; try { in = org.bouncycastle.openpgp.PGPUtil . getDecoderStream ( in ) ; return new org.bouncycastle.openpgp.PGPPublicKeyRingCollection ( in ) ; } finally { in . close () ; } } catch ( java.io.IOException e ) { throw new com.google.gerrit.client.rpc.ContactInformationStoreException ( e ) ; } catch ( org.bouncycastle.openpgp.PGPException e ) { throw new com.google.gerrit.client.rpc.ContactInformationStoreException ( e ) ; } }
@ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.GpgKeyInfo > putGpgKeys ( java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.PostGpgKeys.Input in = new com.google.gerrit.server.account.PostGpgKeys.Input () ; in.add = add ; in.delete = delete ; try { return postGpgKeys . apply ( account , in ) ; } catch ( org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private void statesCleanUp () { if ( ( ! ( stateMap . isEmpty () ) ) && ( ! ( isRetrying () ) ) ) { for ( java.util.Map.Entry < java.lang.String , com.googlesource.gerrit.plugins.replication.ReplicationState > entry : stateMap . entries () ) { entry . getValue () . notifyRefReplicated ( projectName . get () , entry . getKey () , uri , RefPushResult.FAILED , null ) ; } } }
public void parse ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { raw = reader . open ( noteId , org.eclipse.jgit.lib.Constants.OBJ_BLOB ) . getCachedBytes ( com.google.gerrit.server.notedb.RevisionNote.MAX_NOTE_SZ ) ; org.eclipse.jgit.util.MutableInteger p = new org.eclipse.jgit.util.MutableInteger () ; com.google.gerrit.server.notedb.RevisionNote . trimLeadingEmptyLines ( raw , p ) ; if ( ( p.value ) >= ( raw.length ) ) { comments = com.google.common.collect.ImmutableList . of () ; return; } comments = com.google.common.collect.ImmutableList . copyOf ( parse ( raw , p.value ) ) ; }
@ java.lang.Override public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change c ) { c . setStatus ( Change.Status.MERGED ) ; c . setMergeable ( true ) ; if ( ! ( merged . equals ( c . currentPatchSetId () ) ) ) { try { c . setCurrentPatchSet ( patchSetInfoFactory . get ( schema , merged ) ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1 ) { com.google.gerrit.server.git.MergeOp.log . error ( ( STRING_CONSTANT + merged ) , e1 ) ; } } com.google.gerrit.server.ChangeUtil . updated ( c ) ; return c ; }
public java.lang.String getStatusDescription () { if ( ( exception ) != null ) { return getErrorDescription ( exception ) ; } else { switch ( status . getStatus () ) { case COMPLETE : return STRING_CONSTANT ; case CANCELLED : return STRING_CONSTANT ; default: return ( ( ( ( ( STRING_CONSTANT + ( currTask ) ) + STRING_CONSTANT ) + ( task ) ) + STRING_CONSTANT ) + ( lastPercentage ) ) + STRING_CONSTANT ; } } }
protected static com.google.gerrit.server.update.Order getOrder ( java.util.Collection < ? extends com.google.gerrit.server.update.BatchUpdate > updates ) { com.google.gerrit.server.update.Order o = null ; for ( com.google.gerrit.server.update.BatchUpdate u : updates ) { if ( o == null ) { o = u.order ; } else if ( ( u.order ) != o ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } } return o ; }
private boolean canAddPatchSet ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( refControl . asForRef () . testOrFalse ( RefPermission.CREATE_CHANGE ) ) ) || ( isPatchSetLocked ( db ) ) ) { return false ; } if ( isOwner () ) { return true ; } return refControl . canAddPatchSet () ; }
@ java.lang.Override public synchronized < F1 , F2 > com.google.gerrit.metrics.Timer2 < F1 , F2 > newTimer ( java.lang.String name , com.google.gerrit.metrics.Description desc , com.google.gerrit.metrics.Field < F1 > field1 , com.google.gerrit.metrics.Field < F2 > field2 ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . checkTimerDescription ( name , desc ) ; com.google.gerrit.metrics.dropwizard.TimerImplN m = new com.google.gerrit.metrics.dropwizard.TimerImplN ( this , name , desc , field1 , field2 ) ; define ( name , desc ) ; bucketed . put ( name , m ) ; return m . timer2 () ; }
private java.net.InetSocketAddress computePreferredAddress () { for ( final java.net.SocketAddress addr : listen ) { if ( ! ( addr instanceof java.net.InetSocketAddress ) ) { continue; } java.net.InetSocketAddress inetAddr = ( ( java.net.InetSocketAddress ) ( addr ) ) ; if ( inetAddr . getAddress () . isLoopbackAddress () ) { continue; } return inetAddr ; } for ( final java.net.SocketAddress addr : listen ) { if ( addr instanceof java.net.InetSocketAddress ) { return ( ( java.net.InetSocketAddress ) ( addr ) ) ; } } return null ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( final com.google.gerrit.client.reviewdb.Change change ) throws com.google.gerrit.server.project.NoSuchChangeException { try { final com.google.gerrit.client.reviewdb.Project.NameKey projectKey = change . getProject () ; return projectControl . validateFor ( projectKey ) . controlFor ( change ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } }
private void format ( java.io.OutputStream out ) throws java.io.IOException { out . write ( com.google.gerrit.server.change.GetPatch . formatEmailHeader ( commit ) . getBytes ( com.google.common.base.Charsets.UTF_8 ) ) ; org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter ( out ) ; fmt . setRepository ( repo ) ; fmt . format ( base . getTree () , commit . getTree () ) ; fmt . flush () ; }
public com.google.gerrit.server.git.WorkQueue.Task.State getState () { if ( isCancelled () ) { return com.google.gerrit.server.git.WorkQueue.Task.State.CANCELLED ; } else if ( ( isDone () ) && ( ! ( isPeriodic () ) ) ) { return com.google.gerrit.server.git.WorkQueue.Task.State.DONE ; } else if ( running . get () ) { return com.google.gerrit.server.git.WorkQueue.Task.State.RUNNING ; } final long delay = getDelay ( java.util.concurrent.TimeUnit.MILLISECONDS ) ; if ( delay <= NUMBER_CONSTANT ) { return com.google.gerrit.server.git.WorkQueue.Task.State.READY ; } else { return com.google.gerrit.server.git.WorkQueue.Task.State.SLEEPING ; } }
private java.util.List < com.google.gerrit.server.change.RevisionResource > byLegacyPatchSetId ( com.google.gerrit.server.change.ChangeResource change , java.lang.String id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = dbProvider . get () . patchSets () . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getId () , java.lang.Integer . parseInt ( id ) ) ) ; if ( ps != null ) { return java.util.Collections . singletonList ( new com.google.gerrit.server.change.RevisionResource ( change , ps ) ) ; } return java.util.Collections . emptyList () ; }
private java.util.Set < com.google.gerrit.reviewdb.client.Account > listAccounts ( final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID , final com.google.gerrit.reviewdb.client.Project.NameKey project , final java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > seen ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( SystemGroupBackend.PROJECT_OWNERS . equals ( groupUUID ) ) { return getProjectOwners ( project , seen ) ; } com.google.gerrit.reviewdb.client.AccountGroup group = groupCache . get ( groupUUID ) ; if ( group != null ) { return getGroupMembers ( group , project , seen ) ; } return java.util.Collections . emptySet () ; }
private org.eclipse.jgit.revwalk.RevCommit writeCommit ( java.lang.String body , boolean initWorkInProgress ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil = injector . getInstance ( com.google.gerrit.server.notedb.ChangeNoteUtil . class ) ; return writeCommit ( body , noteUtil . newIdent ( changeOwner . getAccount () , com.google.gerrit.common.TimeUtil . nowTs () , serverIdent ) , initWorkInProgress ) ; }
@ java.lang.Override public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { java.lang.String projectName = com.google.gwt.http.client.URL . decode ( screen . getToken ( NUMBER_CONSTANT ) ) ; java.lang.String revision = com.google.gwt.http.client.URL . decode ( screen . getToken ( NUMBER_CONSTANT ) ) ; java.lang.String path = screen . getToken ( NUMBER_CONSTANT ) ; screen . show ( new com.googlesource.gerrit.plugins.xdocs.client.XDocScreen ( projectName , revision , path ) ) ; screen . setWindowTitle ( com.googlesource.gerrit.plugins.xdocs.client.FileInfo . getFileName ( path ) ) ; }
@ java.lang.Override public com.google.gerrit.extensions.registration.DynamicItem < T > . ReloadableHandle replace ( com.google.inject.Key < T > newKey , com.google.inject.Provider < T > newItem ) { com.google.gerrit.extensions.registration.DynamicItem.NamedProvider < T > n = new com.google.gerrit.extensions.registration.DynamicItem.NamedProvider ( newItem , item.pluginName ) ; if ( ref . compareAndSet ( item , n ) ) { return new ReloadableHandle ( newKey , n , defaultItem ) ; } return null ; }
@ org.kohsuke.args4j.Argument ( index = NUMBER_CONSTANT , required = true , multiValued = true , metaVar = STRING_CONSTANT , usage = STRING_CONSTANT ) void addChange ( java.lang.String token ) { try { changeArgumentParser . addChange ( token , changes , null , false ) ; } catch ( com.google.gerrit.sshd.commands.UnloggedFailure e ) { throw new java.lang.IllegalArgumentException ( e . getMessage () , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT , e ) ; } }
private java.util.Map < java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > scanDraftComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > drafts = com.google.common.collect.Maps . newHashMap () ; for ( com.google.gerrit.reviewdb.client.PatchLineComment c : db . get () . patchComments () . draftByPatchSetAuthor ( rsrc . getPatchSet () . getId () , rsrc . getAccountId () ) ) { drafts . put ( c . getKey () . get () , c ) ; } return drafts ; }
protected < K , V > com.google.gerrit.server.cache.NamedCacheBinding < K , V > core ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type , final java.lang.String name ) { return core ( com.google.inject.Key . get ( type , com.google.inject.name.Names . named ( name ) ) , type ) . name ( name ) ; }
@ org.junit.Test public void abandonWipChangeNotifyAll ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
private com.google.gerrit.reviewdb.client.AccountGroup newGroup ( com.google.gerrit.reviewdb.server.ReviewDb c , java.lang.String name ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.google.gerrit.server.account.GroupUUID . make ( name , serverUser ) ; return new com.google.gerrit.reviewdb.client.AccountGroup ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( name ) , new com.google.gerrit.reviewdb.client.AccountGroup.Id ( c . nextAccountGroupId () ) , uuid , com.google.gerrit.common.TimeUtil . nowTs () ) ; }
public void checkRemoveReviewer ( com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.server.CurrentUser currentUser , com.google.gerrit.reviewdb.client.PatchSetApproval approval ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { if ( canRemoveReviewerWithoutPermissionCheck ( notes . getChange () , currentUser , approval . getAccountId () , approval . getValue () ) ) { return; } permissionBackend . user ( currentUser ) . change ( notes ) . database ( dbProvider ) . check ( ChangePermission.REMOVE_REVIEWER ) ; }
void display ( final com.google.gerrit.client.reviewdb.Account account ) { info . setText ( NUMBER_CONSTANT , fieldIdx , account . getFullName () ) ; info . setText ( NUMBER_CONSTANT , fieldIdx , account . getPreferredEmail () ) ; info . setText ( NUMBER_CONSTANT , fieldIdx , com.google.gerrit.client.FormatUtil . mediumFormat ( account . getRegisteredOn () ) ) ; info . setText ( NUMBER_CONSTANT , fieldIdx , account . getId () . toString () ) ; }
@ java.lang.Override public void run () { final com.google.gerrit.reviewdb.server.ReviewDb db ; try { db = database . open () ; } catch ( com.google.gwtorm.server.OrmException e ) { e . printStackTrace () ; return; } try { for ( ; ; ) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next () ; if ( extId == null ) { break; } convertLocalUserToLowerCase ( db , extId ) ; synchronized ( monitor ) { monitor . update ( NUMBER_CONSTANT ) ; } } } finally { db . close () ; } }
protected boolean shouldSendMessage () { if ( ( body . length () ) == NUMBER_CONSTANT ) { return false ; } if ( smtpRcptTo . isEmpty () ) { return false ; } if ( ( ( ( smtpRcptTo . size () ) == NUMBER_CONSTANT ) && ( ( rcptTo . size () ) == NUMBER_CONSTANT ) ) && ( rcptTo . contains ( fromId ) ) ) { return false ; } return true ; }
@ java.lang.Override protected java.lang.Void impl ( com.google.gerrit.server.util.RequestContext ctx ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.server.ReviewDb db = ctx . getReviewDbProvider () . get () ; com.google.gerrit.reviewdb.client.Change c = db . changes () . get ( id ) ; if ( c != null ) { indexerFactory . create ( executor , indexes ) . index ( db , c ) ; } return null ; }
@ org.junit.Test public void fooSubdirJson ( ) throws java.lang.Exception { java.util.Map < java.lang.String , com.google.gitiles.RepositoryDescription > res = buildJson ( com.google.gitiles.HostIndexServletTest.REPOS , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( res ) . hasSize ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( res ) . containsKey ( STRING_CONSTANT ) ; com.google.gitiles.RepositoryDescription d = res . get ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( d.name ) . isEqualTo ( repo . getRepository () . getDescription () . getRepositoryName () ) ; }
private void initChangeAction ( com.google.gerrit.client.info.ChangeInfo info ) { com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.ActionInfo > actions = ( info . hasActions () ) ? info . actions () : com.google.gerrit.client.rpc.NativeMap . create () ; actions . copyKeysIntoChildren ( STRING_CONSTANT ) ; if ( actions . containsKey ( STRING_CONSTANT ) ) { deleteChange . setVisible ( true ) ; deleteChange . setTitle ( actions . get ( STRING_CONSTANT ) . title () ) ; } }
public void testCreateSchema_LabelTypes ( ) throws java.lang.Exception { java.util.List < java.lang.String > labels = com.google.common.collect.Lists . newArrayList () ; for ( com.google.gerrit.common.data.LabelType label : getLabelTypes () . getLabelTypes () ) { labels . add ( label . getName () ) ; } assertEquals ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , labels ) ; }
private static com.google.gerrit.extensions.restapi.BinaryResult compress ( com.google.gerrit.extensions.restapi.BinaryResult bin ) throws java.io.IOException { org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet . heap ( com.google.gerrit.httpd.restapi.RestApiServlet.HEAP_EST_SIZE , ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) ; try ( java.util.zip.GZIPOutputStream gz = new java.util.zip.GZIPOutputStream ( buf ) ) { bin . writeTo ( gz ) ; } return com.google.gerrit.httpd.restapi.RestApiServlet . asBinaryResult ( buf ) . setContentType ( bin . getContentType () ) ; }
@ org.junit.Test public void queryChangesMultipleTerms ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange () ; createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( ( STRING_CONSTANT + ( r1 . getChangeId () ) ) ) ; org.junit.Assert . assertEquals ( r1 . getChangeId () , com.google.common.collect.Iterables . getOnlyElement ( results ) . changeId ) ; }
private void rename ( java.lang.String path , java.lang.String newPath ) { hide () ; com.google.gerrit.client.changes.ChangeEditApi . rename ( project . get () , changeId . get () , path , newPath , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChangeInEditMode ( project , changeId ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) {} } ) ; }
@ java.lang.Override public synchronized void schedule ( final com.google.gerrit.reviewdb.client.Branch.NameKey branch ) { com.google.gerrit.server.git.ChangeMergeQueue.MergeEntry e = active . get ( branch ) ; if ( e == null ) { e = new com.google.gerrit.server.git.ChangeMergeQueue.MergeEntry ( branch ) ; active . put ( branch , e ) ; e.needMerge = true ; scheduleJob ( e ) ; } else { e.needMerge = true ; } }
private java.util.List < com.google.gerrit.server.change.GetRelated.ChangeAndCommit > getRelated ( com.google.gerrit.reviewdb.client.Change.Id changeId , int ps ) throws java.io.IOException { java.lang.String url = java.lang.String . format ( STRING_CONSTANT , changeId . get () , ps ) ; return newGson () . fromJson ( adminSession . get ( url ) . getReader () , com.google.gerrit.server.change.GetRelated.RelatedInfo . class ) . changes ; }
@ java.lang.Override protected void configure () { bind ( com.codahale.metrics.MetricRegistry . class ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . class ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.metrics.MetricMaker . class ) . to ( com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . class ) ; install ( new com.google.gerrit.metrics.proc.ProcMetricModule () ) ; install ( new com.google.gerrit.metrics.proc.JGitMetricModule () ) ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > ids ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > predicates = new java.util.ArrayList ( ids . size () ) ; for ( com.google.gerrit.reviewdb.client.Account.Id id : ids ) { predicates . add ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( id ) ) ; } return com.google.gerrit.server.query.Predicate . or ( predicates ) ; }
private com.google.gerrit.server.project.ProjectControl user ( com.google.gerrit.reviewdb.AccountGroup . . . memberOf ) { com.google.gerrit.server.project.RefControl.Factory refControlFactory = new com.google.gerrit.server.project.RefControl.Factory () { @ java.lang.Override public com.google.gerrit.server.project.RefControl create ( final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String ref ) { return new com.google.gerrit.server.project.RefControl ( systemConfig , projectControl , ref ) ; } } ; return new com.google.gerrit.server.project.ProjectControl ( systemConfig , java.util.Collections . < com.google.gerrit.reviewdb.AccountGroup.Id > emptySet () , java.util.Collections . < com.google.gerrit.reviewdb.AccountGroup.Id > emptySet () , refControlFactory , new com.google.gerrit.server.project.RefControlTest.MockUser ( memberOf ) , newProjectState () ) ; }
private void send ( ) throws javax.mail.MessagingException { if ( haveRcptTo () ) { ccSender () ; if ( ( settingsUrl () ) != null ) { openFooter () ; body . append ( STRING_CONSTANT ) ; body . append ( settingsUrl () ) ; body . append ( STRING_CONSTANT ) ; } msg . setText ( body . toString () , STRING_CONSTANT ) ; javax.mail.Transport . send ( msg ) ; } }
protected void setPageTitle ( final java.lang.String text ) { final java.lang.String old = headerText . getText () ; if ( text . isEmpty () ) { header . setVisible ( false ) ; } else { headerText . setText ( text ) ; header . setVisible ( true ) ; } if ( ( ( windowTitle ) == null ) || ( windowTitle . equals ( old ) ) ) { setWindowTitle ( text ) ; } }
@ java.lang.Override public com.google.gerrit.server.notedb.ChangeNotes call ( ) throws java.lang.Exception { com.google.common.base.Preconditions . checkArgument ( change . getProject () . equals ( project ) , ( STRING_CONSTANT + STRING_CONSTANT ) , project , changeId , change . getProject () ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load () ; }
@ org.junit.Test public void commentOnReviewableChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ org.junit.Test public void commentOnReviewableChangeByOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override protected void configure () { factory ( ForwardingRemovalListener.Factory . class ) ; bind ( com.google.gerrit.server.cache.h2.DefaultCacheFactory . class ) ; bind ( com.google.gerrit.server.cache.MemoryCacheFactory . class ) . to ( com.google.gerrit.server.cache.h2.DefaultCacheFactory . class ) ; bind ( com.google.gerrit.server.cache.PersistentCacheFactory . class ) . to ( com.google.gerrit.server.cache.h2.H2CacheFactory . class ) ; listener () . to ( com.google.gerrit.server.cache.h2.H2CacheFactory . class ) ; }
private java.lang.String buildBlob ( java.lang.String path , java.lang.String expectedMode ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = buildText ( path ) ; com.google.common.truth.Truth . assertThat ( res . getHeader ( PathServlet.MODE_HEADER ) ) . isEqualTo ( expectedMode ) ; java.lang.String base64 = res . getActualBodyString () ; return new java.lang.String ( com.google.common.io.BaseEncoding . base64 () . decode ( base64 ) , java.nio.charset.StandardCharsets.UTF_8 ) ; }
void doReply () { if ( ! ( com.google.gerrit.client.Gerrit . isSignedIn () ) ) { com.google.gerrit.client.Gerrit . doSignIn ( getCommentManager () . getSideBySide2 () . getToken () ) ; } else if ( ( replyBox ) == null ) { addReplyBox () ; } else { openReplyBox () ; } }
protected void logError ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.strategy.SubmitStrategyOp.log . isErrorEnabled () ) { if ( t != null ) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log . error ( ( ( args.submissionId ) + msg ) , t ) ; } else { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log . error ( ( ( args.submissionId ) + msg ) ) ; } } }
@ org.junit.Test public void abandonReviewableChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
boolean wouldPushProject ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ! ( isVisible ( project ) ) ) { return false ; } java.util.List < java.lang.String > projects = config . getProjects () ; if ( projects . isEmpty () ) { return true ; } return new com.googlesource.gerrit.plugins.replication.ReplicationFilter ( projects ) . matches ( project ) ; }
protected org.eclipse.jgit.junit.TestRepository < > createProjectWithPush ( java.lang.String name , @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey parent , boolean createEmptyCommit , com.google.gerrit.extensions.client.SubmitType submitType ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = createProject ( name , parent , createEmptyCommit , submitType ) ; grant ( project , STRING_CONSTANT , Permission.PUSH ) ; grant ( project , STRING_CONSTANT , Permission.SUBMIT ) ; return cloneProject ( project ) ; }
private GitilesView.Builder parseAutoCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) throws java.io.IOException { if ( path . isEmpty () ) { return null ; } com.google.gitiles.RevisionParser.Result result = parseRevision ( req , path ) ; if ( result == null ) { return null ; } if ( ( result . getOldRevision () ) != null ) { return parseDiffCommand ( repoName , result ) ; } else { return parseShowCommand ( repoName , result ) ; } }
protected com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.common.changes.ListChangesOption . . . options ) throws java.io.IOException { java.lang.String q = ( ( options.length ) > NUMBER_CONSTANT ) ? STRING_CONSTANT + ( com.google.common.base.Joiner . on ( STRING_CONSTANT ) . join ( options ) ) : STRING_CONSTANT ; com.google.gerrit.acceptance.RestResponse r = session . get ( ( ( STRING_CONSTANT + changeId ) + q ) ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_OK , r . getStatusCode () ) ; return newGson () . fromJson ( r . getReader () , com.google.gerrit.server.change.ChangeJson.ChangeInfo . class ) ; }
@ org.junit.Test public void testRejectJavaScript_AnchorHref () { final java.lang.String href = STRING_CONSTANT ; try { new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () . openAnchor () . setAttribute ( STRING_CONSTANT , href ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( java.lang.RuntimeException e ) { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + href ) , e . getMessage () ) ; } }
public static long replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , com.google.gerrit.extensions.restapi.CacheControl c , @ com.google.gerrit.common.Nullable java.lang.Throwable err ) throws java.io.IOException { if ( err != null ) { com.google.gerrit.util.http.RequestUtil . setErrorTraceAttribute ( req , err ) ; } com.google.gerrit.httpd.restapi.RestApiServlet . configureCaching ( req , res , null , null , c ) ; res . setStatus ( statusCode ) ; return com.google.gerrit.httpd.restapi.RestApiServlet . replyText ( req , res , msg ) ; }
private void printCommits ( java.util.List < java.lang.String > commits , java.lang.String message ) { if ( ( commits != null ) && ( ! ( commits . isEmpty () ) ) ) { stdout . print ( ( message + STRING_CONSTANT ) ) ; stdout . print ( com.google.common.base.Joiner . on ( STRING_CONSTANT ) . join ( commits ) ) ; stdout . print ( STRING_CONSTANT ) ; } }
@ java.lang.Override protected void run ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { boolean ok = true ; for ( com.google.gerrit.server.change.ChangeResource rsrc : changes . values () ) { try { index . apply ( rsrc , new com.google.gerrit.server.change.Index.Input () ) ; } catch ( java.lang.Exception e ) { ok = false ; writeError ( STRING_CONSTANT , java.lang.String . format ( STRING_CONSTANT , rsrc . getId () , e . getMessage () ) ) ; } } if ( ! ok ) { throw die ( STRING_CONSTANT ) ; } }
@ java.lang.Override public void delete ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.io.IOException { org.apache.lucene.index.Term idTerm = com.google.gerrit.lucene.QueryBuilder . idTerm ( id ) ; try { com.google.common.util.concurrent.Futures . allAsList ( openIndex . delete ( idTerm ) , closedIndex . delete ( idTerm ) ) . get () ; } catch ( java.util.concurrent.ExecutionException | java.lang.InterruptedException e ) { throw new java.io.IOException ( e ) ; } }
private void assertParseNotifyValue ( java.lang.String notifyValue , java.lang.String expectedFilter , java.util.Set < com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType > expectedNotifyTypes ) { com.google.gerrit.server.account.WatchConfig.NotifyValue nv = parseNotifyValue ( notifyValue ) ; com.google.common.truth.Truth . assertThat ( nv . filter () ) . isEqualTo ( expectedFilter ) ; com.google.common.truth.Truth . assertThat ( nv . notifyTypes () ) . containsExactlyElementsIn ( expectedNotifyTypes ) ; }
private void updateDraft ( java.lang.String changeId , java.lang.String revId , com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput c , java.lang.String uuid ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) + revId ) + STRING_CONSTANT ) + uuid ) , c ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { notifyDraftDelta ( ( wasNew ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ; comment = com.google.gerrit.client.patches.CommentEditorPanel . toComment ( psId , comment . getKey () . getParentKey () . get () , result ) ; text . setReadOnly ( false ) ; save . setEnabled ( true ) ; cancel . setEnabled ( true ) ; discard . setEnabled ( true ) ; render () ; onSave . onSuccess ( VoidResult.INSTANCE ) ; }
@ java.lang.Override protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init () ; setListIdHeader () ; add ( RecipientType.TO , to ) ; if ( ! ( threadId . isEmpty () ) ) { setHeader ( MailHeader.REFERENCES . fieldName () , threadId ) ; } }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.server.git.MergeOp.OpenRepo or , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.server.git.CodeReviewCommit branchTip ) throws com.google.gerrit.server.git.IntegrationException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory . create ( submitType , db , or.repo , or.rw , or.ins , or.canMergeFlag , getAlreadyAccepted ( or , branchTip ) , destBranch , caller , commits ) ; }
@ org.junit.Test public void testHashCode () { org.junit.Assert . assertTrue ( ( ( com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) == ( com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) ) ) ; org.junit.Assert . assertFalse ( ( ( com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) == ( com.google.gerrit.server.query.FieldPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) ) ) ; }
@ java.lang.Override protected void configure () { bind ( new com.google.inject.TypeLiteral < com.google.gwtorm.client.SchemaFactory < com.google.gerrit.reviewdb.ReviewDb > > () {} ) . to ( new com.google.inject.TypeLiteral < com.google.gwtorm.jdbc.Database < com.google.gerrit.reviewdb.ReviewDb > > () {} ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( new com.google.inject.TypeLiteral < com.google.gwtorm.jdbc.Database < com.google.gerrit.reviewdb.ReviewDb > > () {} ) . toProvider ( com.google.gerrit.server.schema.ReviewDbDatabaseProvider . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
private static void setMissingHeader ( java.util.Map < java.lang.String , com.google.gerrit.server.mail.send.EmailHeader > hdrs , java.lang.String name , java.lang.String value ) { if ( ( ! ( hdrs . containsKey ( name ) ) ) || ( hdrs . get ( name ) . isEmpty () ) ) { hdrs . put ( name , new com.google.gerrit.server.mail.send.EmailHeader.String ( value ) ) ; } }
@ org.junit.Test public void testUnblockLargerScope_Fails () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canUpdate () ) ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = db . get () . changes () . get ( changeId ) ; if ( change == null ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( changeId ) ; } return controlFor ( change , user ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Account account , java.lang.String agreementName ) { if ( ! ( listeners . iterator () . hasNext () ) ) { return; } com.google.gerrit.server.extensions.events.AgreementSignup.Event event = new com.google.gerrit.server.extensions.events.AgreementSignup.Event ( util . accountInfo ( account ) , agreementName ) ; for ( com.google.gerrit.extensions.events.AgreementSignupListener l : listeners ) { try { l . onAgreementSignup ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( this , l , e ) ; } } }
private static org.eclipse.jgit.lib.PersonIdent ident ( com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil , org.eclipse.jgit.lib.PersonIdent serverIdent , com.google.gerrit.server.CurrentUser u , java.util.Date when ) { com.google.gerrit.server.notedb.AbstractChangeUpdate . checkUserType ( u ) ; if ( u instanceof com.google.gerrit.server.IdentifiedUser ) { return noteUtil . newIdent ( u . asIdentifiedUser () . getAccount () , when , serverIdent ) ; } else if ( u instanceof com.google.gerrit.server.InternalUser ) { return serverIdent ; } throw new java.lang.IllegalStateException () ; }
@ java.lang.Override protected void configure () { factory ( EditCommitMessageHandler.Factory . class ) ; factory ( RebaseChangeHandler.Factory . class ) ; factory ( ChangeDetailFactory.Factory . class ) ; factory ( IncludedInDetailFactory.Factory . class ) ; factory ( PatchSetDetailFactory.Factory . class ) ; factory ( PatchSetPublishDetailFactory.Factory . class ) ; factory ( PublishAction.Factory . class ) ; factory ( DeleteDraftChange.Factory . class ) ; }
private void deleteDraft ( java.lang.String changeId , java.lang.String revId , java.lang.String uuid ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = userSession . delete ( ( ( ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) + revId ) + STRING_CONSTANT ) + uuid ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_NO_CONTENT ) ; }
@ org.junit.Test public void testErrorWhileSendingUnhealthyResponse ( ) throws java.io.IOException { javax.servlet.http.HttpServletResponse responseMock = org.mockito.Mockito . mock ( javax.servlet.http.HttpServletResponse . class ) ; servlet . doDelete ( null , responseMock ) ; org.mockito.Mockito . verify ( responseMock ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; responseMock = org.mockito.Mockito . mock ( javax.servlet.http.HttpServletResponse . class ) ; org.mockito.Mockito . doThrow ( new java.io.IOException ( STRING_CONSTANT ) ) . when ( responseMock ) . sendError ( javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE ) ; servlet . doGet ( null , responseMock ) ; org.mockito.Mockito . verify ( responseMock ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR ) ; }
@ org.junit.Test public void testNotNot () { final com.google.gerrit.server.query.NotPredicateTest.TestPredicate p = com.google.gerrit.server.query.NotPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ; final com.google.gerrit.server.query.Predicate < java.lang.String > n = com.google.gerrit.server.query.Predicate . not ( p ) ; org.junit.Assert . assertTrue ( ( n instanceof com.google.gerrit.server.query.NotPredicate ) ) ; org.junit.Assert . assertNotSame ( p , n ) ; org.junit.Assert . assertSame ( p , com.google.gerrit.server.query.Predicate . not ( n ) ) ; }
private boolean stopRemovedPlugins ( java.util.List < java.io.File > jars ) { java.util.Set < java.lang.String > unload = com.google.common.collect.Sets . newHashSet ( running . keySet () ) ; for ( java.io.File jar : jars ) { unload . remove ( com.google.gerrit.server.plugins.PluginLoader . nameOf ( jar ) ) ; } for ( java.lang.String name : unload ) { com.google.gerrit.server.plugins.PluginLoader.log . info ( java.lang.String . format ( STRING_CONSTANT , name ) ) ; running . remove ( name ) . stop () ; } return ! ( unload . isEmpty () ) ; }
@ java.lang.Override public void afterRefUpdates ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { if ( failAfterRefUpdates ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } for ( com.google.gerrit.server.git.strategy.SubmitStrategy strategy : strategies ) { com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments args = strategy.args ; if ( args.mergeTip . getCurrentTip () . equals ( args.mergeTip . getInitialTip () ) ) { continue; } } }
@ org.junit.Test public void byFileRegex ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . parseBody ( repo . commit () . message ( STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . create () ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , newChangeForCommit ( repo , commit ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change ) ; }
void appendInsert ( int numLines ) { int origLineB = lineB ; lineB += numLines ; int bAheadOfA = ( lineB ) - ( lineA ) ; lineMapAtoB . add ( new com.google.gerrit.client.diff.LineMapper.LineGap ( lineA , ( - NUMBER_CONSTANT ) , bAheadOfA ) ) ; lineMapBtoA . add ( new com.google.gerrit.client.diff.LineMapper.LineGap ( origLineB , ( ( lineB ) - NUMBER_CONSTANT ) , ( - bAheadOfA ) ) ) ; }
private void setMillisProvider () { clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS . convert ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ; final java.util.concurrent.atomic.AtomicLong clockMs = new java.util.concurrent.atomic.AtomicLong ( ( ( java.util.concurrent.TimeUnit.MILLISECONDS . convert ( ChangeUtil.SORT_KEY_EPOCH_MINS , java.util.concurrent.TimeUnit.MINUTES ) ) + ( java.util.concurrent.TimeUnit.MILLISECONDS . convert ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.DAYS ) ) ) ) ; org.joda.time.DateTimeUtils . setCurrentMillisProvider ( new org.joda.time.DateTimeUtils.MillisProvider () { @ java.lang.Override public long getMillis () { return clockMs . getAndAdd ( clockStepMs ) ; } } ) ; }
@ org.junit.Test public void queryChangesNoOptions ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.common.ChangeInfo result = com.google.common.collect.Iterables . getOnlyElement ( query ( r . getChangeId () ) ) ; org.junit.Assert . assertNull ( result.labels ) ; org.junit.Assert . assertNull ( result.messages ) ; org.junit.Assert . assertNull ( result.revisions ) ; org.junit.Assert . assertNull ( result.actions ) ; }
@ org.junit.Test public void testKernelStyleFooter ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( ( ( ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) + ( SOB1 ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) + ( SOB2 ) ) , call ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( SOB1 ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) + ( SOB2 ) ) ) ) ; }
@ java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.AccountInfo > r = deleteAssignee . apply ( change , null ) ; return r . isNone () ? null : r . value () ; } catch ( com.google.gerrit.server.git.UpdateException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private void assertChildNotFound ( com.google.gerrit.reviewdb.client.Project.NameKey parent , java.lang.String child ) throws java.lang.Exception { try { gApi . projects () . name ( parent . get () ) . child ( child ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException e ) { com.google.common.truth.Truth . assertThat ( e . getMessage () ) . contains ( child ) ; } }
@ java.lang.Override public void run () { int line = ( cm . extras () . hasActiveLine () ) ? cm . getLineNumber ( cm . extras () . activeLine () ) : NUMBER_CONSTANT ; int res = java.util.Collections . binarySearch ( chunks , new com.google.gerrit.client.diff.DiffChunkInfo ( cm . side () , line , NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ) ; diffChunkNavHelper ( chunks , host , res , dir ) ; }
private com.google.gerrit.server.account.AccountState makeUser ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id ( NUMBER_CONSTANT ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( userId , com.google.gerrit.server.util.TimeUtil . nowTs () ) ; account . setFullName ( name ) ; account . setPreferredEmail ( email ) ; return new com.google.gerrit.server.account.AccountState ( account , java.util.Collections . < com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet () , java.util.Collections . < com.google.gerrit.reviewdb.client.AccountExternalId > emptySet () ) ; }
public < V > void newCallbackMetric ( java.lang.String name , java.lang.Class < V > valueClass , com.google.gerrit.metrics.Description desc , com.google.common.base.Supplier < V > trigger ) { com.google.gerrit.metrics.CallbackMetric0 < V > metric = newCallbackMetric ( name , valueClass , desc ) ; newTrigger ( metric , ( ) - > metric . set ( trigger . get () ) ) ; }
protected synchronized void startThread ( final com.google.gerrit.sshd.BaseCommand.CommandRunnable thunk ) { final com.google.gerrit.sshd.BaseCommand.TaskThunk tt = new com.google.gerrit.sshd.BaseCommand.TaskThunk ( thunk ) ; if ( isAdminCommand () ) { new java.lang.Thread ( tt , tt . toString () ) . start () ; } else { task = executor . submit ( tt ) ; } }
private static boolean onSupportedJavaVersion () { final java.lang.String version = java.lang.System . getProperty ( STRING_CONSTANT ) ; if ( NUMBER_CONSTANT <= ( Main . parse ( version ) ) ) { return true ; } java.lang.System.err . println ( STRING_CONSTANT ) ; java.lang.System.err . println ( ( ( STRING_CONSTANT + version ) + STRING_CONSTANT ) ) ; return false ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void delete ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.io.IOException { org.apache.lucene.index.Term idTerm = com.google.gerrit.lucene.QueryBuilder . idTerm ( id ) ; try { com.google.common.util.concurrent.Futures . allAsList ( openIndex . delete ( idTerm ) , closedIndex . delete ( idTerm ) ) . get () ; } catch ( java.util.concurrent.ExecutionException | java.lang.InterruptedException e ) { throw new java.io.IOException ( e ) ; } }
@ java.lang.Override public com.google.gerrit.server.notedb.NoteDbChangeState rebuild ( com.google.gerrit.server.notedb.NoteDbUpdateManager manager , com.google.gerrit.server.notedb.ChangeBundle bundle ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( bundle . getChange () ) ; buildUpdates ( manager , bundle ) ; return com.google.gerrit.server.notedb.NoteDbChangeState . applyDelta ( change , manager . stage () . get ( change . getId () ) ) ; }
private void closeRepository () { if ( ( inserter ) != null ) { inserter . close () ; inserter = null ; } if ( ( rw ) != null ) { rw . close () ; rw = null ; } if ( ( repo ) != null ) { repo . close () ; repo = null ; } }
public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment ( ) throws com.googlecode.prolog_cafe.exceptions.CompileException { com.googlecode.prolog_cafe.lang.PrologMachineCopy pmc = rulesMachine ; if ( pmc == null ) { pmc = rulesCache . loadMachine ( getNameKey () , config . getRulesId () ) ; rulesMachine = pmc ; } return envFactory . create ( pmc ) ; }
public static com.google.gerrit.common.data.LabelType withDefaultValues ( java.lang.String name ) { com.google.gerrit.common.data.LabelType . checkName ( name ) ; java.util.List < com.google.gerrit.common.data.LabelValue > values = new java.util.ArrayList < com.google.gerrit.common.data.LabelValue > ( NUMBER_CONSTANT ) ; values . add ( new com.google.gerrit.common.data.LabelValue ( ( ( short ) ( NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ) ; values . add ( new com.google.gerrit.common.data.LabelValue ( ( ( short ) ( NUMBER_CONSTANT ) ) , STRING_CONSTANT ) ) ; return new com.google.gerrit.common.data.LabelType ( name , values ) ; }
static com.google.gerrit.server.config.ConfigUtilTest.SectionInfo defaults () { com.google.gerrit.server.config.ConfigUtilTest.SectionInfo i = new com.google.gerrit.server.config.ConfigUtilTest.SectionInfo () ; i.i = NUMBER_CONSTANT ; i.ii = NUMBER_CONSTANT ; i.id = NUMBER_CONSTANT ; i.l = NUMBER_CONSTANT ; i.ll = NUMBER_CONSTANT ; i.ld = NUMBER_CONSTANT ; i.b = true ; i.bb = false ; i.bd = true ; i.s = STRING_CONSTANT ; i.sd = STRING_CONSTANT ; i.t = com.google.gerrit.extensions.client.Theme.DEFAULT ; i.td = com.google.gerrit.extensions.client.Theme.DEFAULT ; return i ; }
@ org.junit.Test public void branchDelegation1 () { com.google.gerrit.server.project.Util . allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl uDev = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertNotOwner ( uDev ) ; assertOwner ( STRING_CONSTANT , uDev ) ; assertOwner ( STRING_CONSTANT , uDev ) ; assertOwner ( STRING_CONSTANT , uDev ) ; assertNotOwner ( STRING_CONSTANT , uDev ) ; assertNotOwner ( STRING_CONSTANT , uDev ) ; }
public com.google.gitiles.GitilesView.Builder copyFrom ( com.google.gitiles.GitilesView other ) { hostName = other.hostName ; servletPath = other.servletPath ; switch ( type ) { case LOG : case DIFF : oldRevision = other.oldRevision ; case PATH : path = other.path ; case REVISION : revision = other.revision ; case REPOSITORY_INDEX : repositoryName = other.repositoryName ; default: break; } return this ; }
@ java.lang.Override public void printJson ( final java.lang.StringBuffer sb , final java.util.List < T > o ) { sb . append ( CHAR_CONS ) ; boolean first = true ; for ( final T item : o ) { if ( first ) { first = false ; } else { sb . append ( CHAR_CONS ) ; } if ( item != null ) { serializer . printJson ( sb , item ) ; } else { sb . append ( com.google.gwtjsonrpc.client.JS_NULL ) ; } } sb . append ( CHAR_CONS ) ; }
private void updateHead ( org.eclipse.jgit.transport.URIish replicateURI , java.lang.String newHead ) { if ( ! ( replicateURI . isRemote () ) ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue . updateHeadLocally ( replicateURI , newHead ) ; } else if ( com.googlesource.gerrit.plugins.replication.ReplicationQueue . isSSH ( replicateURI ) ) { updateHeadRemoteSsh ( replicateURI , newHead ) ; } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . warn ( java.lang.String . format ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , replicateURI ) ) ; } }
public com.google.gerrit.common.data.Capable canPushToAtLeastOneRef () { if ( ( ! ( canPerformOnAnyRef ( Permission.PUSH ) ) ) && ( ! ( canPerformOnAnyRef ( Permission.PUSH_TAG ) ) ) ) { java.lang.String pName = state . getProject () . getName () ; return new com.google.gerrit.common.data.Capable ( ( ( STRING_CONSTANT + pName ) + STRING_CONSTANT ) ) ; } if ( state . isUseContributorAgreements () ) { return verifyActiveContributorAgreement () ; } return com.google.gerrit.common.data.Capable.OK ; }
@ java.lang.Override protected void configure () { factory ( RestoreChangeHandler.Factory . class ) ; factory ( RevertChange.Factory . class ) ; factory ( RebaseChangeHandler.Factory . class ) ; factory ( ChangeDetailFactory.Factory . class ) ; factory ( IncludedInDetailFactory.Factory . class ) ; factory ( PatchSetDetailFactory.Factory . class ) ; factory ( PatchSetPublishDetailFactory.Factory . class ) ; factory ( SubmitAction.Factory . class ) ; factory ( PublishAction.Factory . class ) ; factory ( DeleteDraftChange.Factory . class ) ; }
private void appendLineNone ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m . openTd () ; m . setStyleName ( STRING_CONSTANT ) ; m . closeTd () ; m . openTd () ; m . addStyleName ( STRING_CONSTANT ) ; m . addStyleName ( STRING_CONSTANT ) ; m . closeTd () ; }
private org.apache.lucene.search.Query not ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > n = p . getChild ( NUMBER_CONSTANT ) ; if ( n instanceof com.google.gerrit.server.index.TimestampRangePredicate ) { return notTimestamp ( ( ( com.google.gerrit.server.index.TimestampRangePredicate < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; } org.apache.lucene.search.BooleanQuery q = new org.apache.lucene.search.BooleanQuery () ; q . add ( new org.apache.lucene.search.MatchAllDocsQuery () , org.apache.lucene.search.BooleanClause.Occur.MUST ) ; q . add ( toQuery ( n ) , org.apache.lucene.search.BooleanClause.Occur.MUST_NOT ) ; return q ; }
private boolean can ( com.google.gerrit.server.permissions.ProjectPermission perm ) throws com.google.gerrit.server.permissions.PermissionBackendException { switch ( perm ) { case ACCESS : return ( ( ! ( isHidden () ) ) && ( ( user . isInternalUser () ) || ( canPerformOnAnyRef ( Permission.READ ) ) ) ) || ( isOwner () ) ; case READ : return ( ! ( isHidden () ) ) && ( allRefsAreVisible ( java.util.Collections . emptySet () ) ) ; } throw new com.google.gerrit.server.permissions.PermissionBackendException ( ( perm + STRING_CONSTANT ) ) ; }
private void updateScreenHeader ( net.codemirror.lib.ScrollInfo si ) { if ( ( ( si . getTop () ) == NUMBER_CONSTANT ) && ( ! ( com.google.gerrit.client.Gerrit . isHeaderVisible () ) ) ) { diffTable . setHeaderVisible ( true ) ; } else if ( ( ( si . getTop () ) > ( NUMBER_CONSTANT * ( si . getClientHeight () ) ) ) && ( com.google.gerrit.client.Gerrit . isHeaderVisible () ) ) { diffTable . setHeaderVisible ( false ) ; } }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , com.google.gerrit.extensions.restapi.CacheControl c , @ com.google.gerrit.common.Nullable java.lang.Throwable err ) throws java.io.IOException { if ( err != null ) { com.google.gerrit.util.http.RequestUtil . setErrorTraceAttribute ( req , err ) ; } com.google.gerrit.httpd.restapi.RestApiServlet . configureCaching ( req , res , null , c ) ; res . setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet . replyText ( req , res , msg ) ; }
private PushOneCommit.Result push ( java.lang.String content , java.lang.String baseChangeId ) throws java.lang.Exception { java.lang.String subject = STRING_CONSTANT ; java.lang.String fileName = STRING_CONSTANT ; com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , subject , fileName , content , baseChangeId ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = push . to ( STRING_CONSTANT ) ; r . assertOkStatus () ; return r ; }
private static boolean isStaticResource ( javax.servlet.http.HttpServletRequest httpRequest ) { java.lang.String requestURI = httpRequest . getRequestURI () ; java.lang.String pathExt = org.apache.commons.lang.StringUtils . substringAfterLast ( requestURI , STRING_CONSTANT ) ; if ( org.apache.commons.lang.StringUtils . isEmpty ( pathExt ) ) { return false ; } boolean staticResource = com.googlesource.gerrit.plugins.github.oauth.OAuthFilter.GERRIT_STATIC_RESOURCES_EXTS . contains ( pathExt . toLowerCase () ) ; return staticResource ; }
@ org.junit.Test public void deleteReviewerFromReviewableChangeByAdmin ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setApiUser ( admin ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner , extraReviewer ) . cc ( extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ org.junit.Test public void dontSkipWhenUserBelongsToOtherGroupsUUID ( ) throws java.lang.Exception { java.lang.String config = STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ; com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , config ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName () ) ; com.google.common.truth.Truth . assertThat ( validatorConfig . isEnabledForRef ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( STRING_CONSTANT ) . get () , projectName , STRING_CONSTANT , STRING_CONSTANT ) ) . isTrue () ; }
@ org.junit.Test public void missingOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount owner = accountCreator . create ( STRING_CONSTANT ) ; com.google.gerrit.server.project.ChangeControl ctl = insertChange ( owner ) ; accountsUpdate . create () . deleteByKey ( owner . getId () ) ; assertProblems ( ctl , null , com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT . problem ( ( STRING_CONSTANT + ( owner . getId () ) ) ) ) ; }
private com.google.gerrit.client.reviewdb.AccountGroup lookup ( final com.google.gerrit.client.reviewdb.AccountGroup.NameKey groupName ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.ReviewDb db = schema . open () ; try { return db . accountGroups () . get ( groupName ) ; } finally { db . close () ; } }
private java.lang.String createDraftChangeWith2PS ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git ) ; com.google.gerrit.acceptance.PushOneCommit.Result result = push . to ( STRING_CONSTANT ) ; push = pushFactory . create ( db , admin . getIdent () , git , PushOneCommit.SUBJECT , STRING_CONSTANT , STRING_CONSTANT , result . getChangeId () ) ; return push . to ( STRING_CONSTANT ) . getChangeId () ; }
@ java.lang.Override public com.google.gerrit.reviewdb.AccountGroup missing ( final com.google.gerrit.reviewdb.AccountGroup.Id key ) { final com.google.gerrit.reviewdb.AccountGroup.NameKey name = new com.google.gerrit.reviewdb.AccountGroup.NameKey ( ( STRING_CONSTANT + ( key . toString () ) ) ) ; final com.google.gerrit.reviewdb.AccountGroup g = new com.google.gerrit.reviewdb.AccountGroup ( name , key , null ) ; g . setType ( AccountGroup.Type.SYSTEM ) ; g . setOwnerGroupId ( administrators ) ; return g ; }
private static void whoAmI () { final java.lang.String name = com.google.gerrit.client.FormatUtil . nameEmail ( com.google.gerrit.client.Gerrit . getUserAccount () ) ; final com.google.gwt.user.client.ui.MenuItem me = com.google.gerrit.client.Gerrit.menuBar . addItem ( name , ( ( com.google.gwt.user.client.Command ) ( null ) ) ) ; me . removeStyleName ( STRING_CONSTANT ) ; me . addStyleName ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testPreformat3 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) , n . asString () ) ; }
private org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser () ; try ( org.eclipse.jgit.lib.ObjectReader or = repo . newObjectReader () ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { p . reset ( or , rw . parseTree ( repo . resolve ( name ) ) ) ; return p ; } }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info . revisions () . copyKeysIntoChildren ( STRING_CONSTANT ) ; com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeInfo.RevisionInfo > list = info . revisions () . values () ; com.google.gerrit.client.changes.ChangeInfo.RevisionInfo . sortRevisionInfoByNumber ( list ) ; diffTable . setUpPatchSetNav ( list , diff ) ; }
private static java.lang.String describe ( com.google.gerrit.server.CurrentUser user ) { if ( user . isIdentifiedUser () ) { return user . getAccountId () . toString () ; } if ( user instanceof com.google.gerrit.server.query.change.SingleGroupUser ) { return STRING_CONSTANT + ( user . getEffectiveGroups () . getKnownGroups () . iterator () . next () . toString () ) ; } return user . toString () ; }
@ org.junit.Test public void testCreate_NotDirectory ( ) throws java.io.IOException { final java.io.File root = com.google.gerrit.server.config.SitePathsTest . random () ; try { org.junit.Assert . assertTrue ( root . createNewFile () ) ; try { new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( java.io.FileNotFoundException e ) { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( root . getPath () ) ) , e . getMessage () ) ; } } finally { root . delete () ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { site = new com.google.gerrit.server.config.SitePaths ( com.google.gerrit.testutil.TempFileUtil . createTempDirectory () . toPath () ) ; site . resolve ( STRING_CONSTANT ) . toFile () . mkdir () ; cfg = new org.eclipse.jgit.lib.Config () ; cfg . setString ( STRING_CONSTANT , null , STRING_CONSTANT , STRING_CONSTANT ) ; repoManager = new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , cfg ) ; repoManager . start () ; }
@ java.lang.Override protected void onUnload () { super . onUnload () ; removeKeyHandlerRegs () ; if ( ( resizeHandler ) != null ) { resizeHandler . removeHandler () ; resizeHandler = null ; } if ( ( cmA ) != null ) { cmA . getWrapperElement () . removeFromParent () ; } if ( ( cmB ) != null ) { cmB . getWrapperElement () . removeFromParent () ; } com.google.gwt.user.client.Window . enableScrolling ( true ) ; com.google.gerrit.client.Gerrit . setHeaderVisible ( true ) ; }
protected < K extends java.io.Serializable , V extends java.io.Serializable > com.google.gerrit.server.cache.NamedCacheBinding < K , V > disk ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type , final java.lang.String name ) { return disk ( com.google.inject.Key . get ( type , com.google.inject.name.Names . named ( name ) ) , type ) . name ( name ) ; }
@ java.lang.Override public void changeProjectAccess ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.lang.String baseRevision , java.lang.String msg , java.util.List < com.google.gerrit.common.data.AccessSection > sections , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > cb ) { org.eclipse.jgit.lib.ObjectId base ; if ( ( baseRevision != null ) && ( ! ( baseRevision . isEmpty () ) ) ) { base = org.eclipse.jgit.lib.ObjectId . fromString ( baseRevision ) ; } else { base = null ; } changeProjectAccessFactory . create ( projectName , base , sections , msg ) . to ( cb ) ; }
@ java.lang.Override protected void onCellSingleClick ( int row , int column ) { super . onCellSingleClick ( row , column ) ; if ( ( column == NUMBER_CONSTANT ) || ( column == NUMBER_CONSTANT ) ) { if ( ! ( STRING_CONSTANT . equals ( table . getText ( row , column ) ) ) ) { onCellDoubleClick ( row , column ) ; } } }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onTabWidth ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > e ) { java.lang.String v = e . getValue () ; if ( ( v != null ) && ( ( v . length () ) > NUMBER_CONSTANT ) ) { prefs . tabSize ( java.lang.Math . max ( NUMBER_CONSTANT , java.lang.Integer . parseInt ( v ) ) ) ; if ( ( view ) != null ) { view . setOption ( STRING_CONSTANT , v ) ; } } }
com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult post ( java.lang.String endpoint , java.lang.String content ) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost ( ( ( peerInfo . get () . getDirectUrl () ) + endpoint ) ) ; if ( ! ( com.google.common.base.Strings . isNullOrEmpty ( content ) ) ) { post . addHeader ( STRING_CONSTANT , com.google.common.net.MediaType.JSON_UTF_8 . toString () ) ; post . setEntity ( new org.apache.http.entity.StringEntity ( content , java.nio.charset.StandardCharsets.UTF_8 ) ) ; } return httpClient . execute ( post , new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler () ) ; }
@ org.junit.Test public void changePermission ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.config.AccessCheckInput in = new com.google.gerrit.extensions.api.config.AccessCheckInput () ; in.account = user.email ; in.permission = STRING_CONSTANT ; in.ref = STRING_CONSTANT ; exception . expect ( com.google.gerrit.extensions.restapi.BadRequestException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; gApi . projects () . name ( normalProject . get () ) . checkAccess ( in ) ; }
@ org.junit.Test public void testCreatePermissionOnlyProject ( ) throws java.lang.Exception { java.lang.String newProjectName = name ( STRING_CONSTANT ) ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = newProjectName ; in.permissionsOnly = true ; gApi . projects () . create ( in ) ; assertHead ( newProjectName , RefNames.REFS_CONFIG ) ; }
private void addDiffChunk ( net.codemirror.lib.CodeMirror cmToPad , int lineOnOther , int chunkSize , boolean edit ) { chunks . add ( new com.google.gerrit.client.diff.DiffChunkInfo ( host . otherCm ( cmToPad ) . side () , ( ( lineOnOther - chunkSize ) + NUMBER_CONSTANT ) , lineOnOther , edit ) ) ; }
private void parseUpdate ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { com.google.gerrit.server.project.RefControl ctl = projectControl . controlForRef ( cmd . getRefName () ) ; if ( ctl . canUpdate () ) { if ( ( com.google.gerrit.server.git.ReceiveCommits . isHead ( cmd ) ) && ( ! ( isCommit ( cmd ) ) ) ) { return; } validateNewCommits ( ctl , cmd ) ; cmd . execute ( rp ) ; } else { reject ( cmd , STRING_CONSTANT ) ; } }
static com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , > commitField ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String id ) { if ( ( ( ( id . length () ) == ( org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH ) ) && ( schema != null ) ) && ( schema . hasField ( com.google.gerrit.server.index.ChangeField.EXACT_COMMIT ) ) ) { return com.google.gerrit.server.index.ChangeField.EXACT_COMMIT ; } return com.google.gerrit.server.index.ChangeField.COMMIT ; }
private org.apache.lucene.search.Query exactQuery ( com.google.gerrit.server.index.IndexPredicate < V > p ) { if ( p instanceof com.google.gerrit.server.index.RegexPredicate < > ) { return regexQuery ( p ) ; } return new org.apache.lucene.search.TermQuery ( new org.apache.lucene.index.Term ( p . getField () . getName () , p . getValue () ) ) ; }
@ java.lang.Override public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData cData : index . getSource ( com.google.gerrit.server.query.Predicate . and ( new com.google.gerrit.server.query.change.LegacyChangeIdPredicate ( args , object . getId () ) , this ) , NUMBER_CONSTANT , NUMBER_CONSTANT ) . read () ) { if ( cData . getId () . equals ( object . getId () ) ) { return true ; } } } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; }
private com.google.gerrit.reviewdb.ChangeMessage message ( final com.google.gerrit.reviewdb.Change c , final java.lang.String body ) { final java.lang.String uuid ; try { uuid = com.google.gerrit.server.ChangeUtil . messageUUID ( schema ) ; } catch ( com.google.gwtorm.client.OrmException e ) { return null ; } final com.google.gerrit.reviewdb.ChangeMessage m = new com.google.gerrit.reviewdb.ChangeMessage ( new com.google.gerrit.reviewdb.ChangeMessage.Key ( c . getId () , uuid ) , null , c . currentPatchSetId () ) ; m . setMessage ( body ) ; return m ; }
@ java.lang.Override protected java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > getAdvertisedRefs ( org.eclipse.jgit.lib.Repository repository , org.eclipse.jgit.revwalk.RevWalk revWalk ) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return filter ( repository . getRefDatabase () . getRefs ( RefDatabase.ALL ) ) ; } catch ( org.eclipse.jgit.transport.ServiceMayNotContinueException e ) { throw e ; } catch ( java.io.IOException e ) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException () ; ex . initCause ( e ) ; throw ex ; } }
@ org.junit.Test public void taggedTagTime ( ) throws java.lang.Exception { repo . tick ( NUMBER_CONSTANT ) ; org.eclipse.jgit.revwalk.RevTag tag = repo . tag ( STRING_CONSTANT , repo . commit () . create () ) ; repo . tick ( ( - NUMBER_CONSTANT ) ) ; org.eclipse.jgit.revwalk.RevTag tagTag = repo . tag ( STRING_CONSTANT , tag ) ; com.google.common.truth.Truth . assertThat ( getTime ( tag ) ) . isEqualTo ( ( ( start ) + NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( getTime ( tagTag ) ) . isEqualTo ( ( ( start ) + NUMBER_CONSTANT ) ) ; }
public com.google.gerrit.common.data.GroupInfoCache create () { final java.util.List < com.google.gerrit.common.data.GroupInfo > r = new java.util.ArrayList < com.google.gerrit.common.data.GroupInfo > ( out . size () ) ; for ( final com.google.gerrit.reviewdb.client.AccountGroup a : out . values () ) { if ( a == null ) continue; r . add ( new com.google.gerrit.common.data.GroupInfo ( a ) ) ; } return new com.google.gerrit.common.data.GroupInfoCache ( r ) ; }
protected void insert ( final int row , final com.google.gerrit.client.projects.ProjectInfo k ) { table . insertRow ( row ) ; applyDataRowStyle ( row ) ; final com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table . getFlexCellFormatter () ; fmt . addStyleName ( row , NUMBER_CONSTANT , Gerrit.RESOURCES . css () . dataCell () ) ; fmt . addStyleName ( row , NUMBER_CONSTANT , Gerrit.RESOURCES . css () . dataCell () ) ; populate ( row , k ) ; }
@ java.lang.Override public void run () { try { com.google.gerrit.server.mail.MergedSender cm = mergedSenderFactory . create ( ctx . getProject () , psId . getParentKey () ) ; cm . setFrom ( ctx . getAccountId () ) ; cm . setPatchSet ( patchSet , info ) ; cm . send () ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.git.MergedByPushOp.log . error ( ( STRING_CONSTANT + ( psId ) ) , e ) ; } }
public void run () { try { executePredicate () ; } catch ( com.googlecode.prolog_cafe.lang.JavaInterruptedException e ) { java.lang.System . exit ( NUMBER_CONSTANT ) ; } catch ( com.googlecode.prolog_cafe.lang.PrologException e ) { java.lang.System.out . println ( e . toString () ) ; } catch ( java.lang.Exception e ) { printStackTrace ( e ) ; } stop () ; }
private org.asciidoctor.AttributesBuilder getAttributes ( com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String revision ) { org.asciidoctor.AttributesBuilder ab = org.asciidoctor.AttributesBuilder . attributes () . tableOfContents ( cfg . getBoolean ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_INCLUDE_TOC , true ) ) . sourceHighlighter ( STRING_CONSTANT ) ; for ( java.lang.String name : attributes . stringPropertyNames () ) { ab . attribute ( name , attributes . getProperty ( name ) ) ; } ab . attribute ( STRING_CONSTANT ) ; ab . attribute ( STRING_CONSTANT , revision ) ; return ab ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.account.AccountResource.StarredChange rsrc , com.google.gerrit.server.account.StarredChanges.EmptyInput in ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( self . get () ) != ( rsrc . getUser () ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( STRING_CONSTANT ) ; } starredChangesUtil . unstar ( self . get () . getAccountId () , rsrc . getChange () . getProject () , rsrc . getChange () . getId () ) ; return com.google.gerrit.extensions.restapi.Response . none () ; }
@ java.lang.Override public void execute ( java.lang.String issue , com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest , java.util.Set < com.googlesource.gerrit.plugins.its.base.workflow.Property > properties ) throws java.io.IOException { java.lang.String comment = java.lang.String . join ( STRING_CONSTANT , actionRequest . getParameters () ) ; if ( ! ( com.google.common.base.Strings . isNullOrEmpty ( comment ) ) ) { its . addComment ( issue , comment ) ; } }
private java.lang.String setTopic ( int sourceId , java.lang.String topic ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ( topic == null ) || ( topic . isEmpty () ) ) { topic = STRING_CONSTANT + ( java.util.UUID . randomUUID () . toString () ) ; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log . debug ( STRING_CONSTANT , sourceId , topic ) ; gApi . changes () . id ( sourceId ) . topic ( topic ) ; } return topic ; }
@ com.google.common.annotations.VisibleForTesting java.util.Map < java.lang.String , > buildData ( javax.servlet.http.HttpServletRequest req ) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory . forRequest ( req ) . getRepositoryDescription () ; return com.google.common.collect.ImmutableMap . of ( STRING_CONSTANT , desc.cloneUrl , STRING_CONSTANT , com.google.common.base.Strings . nullToEmpty ( desc.description ) , STRING_CONSTANT , getRefs ( req , Constants.R_HEADS ) , STRING_CONSTANT , getRefs ( req , Constants.R_TAGS ) ) ; }
@ java.lang.Override public int compareTo ( com.google.gerrit.common.data.Permission b ) { int cmp = ( com.google.gerrit.common.data.Permission . index ( this ) ) - ( com.google.gerrit.common.data.Permission . index ( b ) ) ; if ( cmp == NUMBER_CONSTANT ) { cmp = getName () . compareTo ( b . getName () ) ; } return cmp ; }
public void testSubsequentGetReads ( ) throws com.google.gwtorm.client.OrmException { db . create () ; final com.google.gerrit.reviewdb.SystemConfig exp = db . getSystemConfig () ; final com.google.gerrit.reviewdb.SystemConfig act = db . getSystemConfig () ; assertNotSame ( exp , act ) ; assertEquals ( exp.sitePath , act.sitePath ) ; }
public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws com.google.gerrit.server.GpgException , com.google.gerrit.server.patch.PatchListNotAvailableException , com.google.gwtorm.server.OrmException , java.io.IOException { accountLoader = accountLoaderFactory . create ( has ( com.google.gerrit.extensions.client.ListChangesOption.DETAILED_ACCOUNTS ) ) ; try ( org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary ( ctl ) ) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo ( ctl , changeDataFactory . create ( db . get () , ctl ) , in , repo , true , null ) ; accountLoader . fill () ; return rev ; } }
@ org.junit.Test public void testTimeAltersId ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; tick () ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; tick () ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; }
public com.google.gerrit.extensions.registration.RegistrationHandle add ( final com.google.inject.Provider < T > item ) { final java.util.concurrent.atomic.AtomicReference < com.google.inject.Provider < T > > ref = new java.util.concurrent.atomic.AtomicReference ( item ) ; items . add ( ref ) ; return new com.google.gerrit.extensions.registration.RegistrationHandle () { @ java.lang.Override public void remove () { if ( ref . compareAndSet ( item , null ) ) { items . remove ( ref ) ; } } } ; }
private synchronized void unloadPlugin ( com.google.gerrit.server.plugins.Plugin plugin ) { persistentCacheFactory . onStop ( plugin . getName () ) ; java.lang.String name = plugin . getName () ; com.google.gerrit.server.plugins.PluginLoader.log . info ( java.lang.String . format ( STRING_CONSTANT , name , plugin . getVersion () ) ) ; plugin . stop ( env ) ; env . onStopPlugin ( plugin ) ; running . remove ( name ) ; disabled . remove ( name ) ; toCleanup . add ( plugin ) ; }
private static com.google.gerrit.extensions.restapi.BinaryResult asBinaryResult ( final org.eclipse.jgit.lib.ObjectLoader obj ) { com.google.gerrit.extensions.restapi.BinaryResult result = new com.google.gerrit.extensions.restapi.BinaryResult () { @ java.lang.Override public void writeTo ( java.io.OutputStream os ) throws java.io.IOException { obj . copyTo ( os ) ; } } ; result . setContentLength ( obj . getSize () ) ; return result ; }
@ java.lang.Override public void onLoad () { super . onLoad () ; Util.LIST_SVC . forAccount ( ownerId , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.AccountDashboardInfo > () { public void onSuccess ( final com.google.gerrit.client.data.AccountDashboardInfo r ) { display ( r ) ; } public void onFailure ( final java.lang.Throwable caught ) { com.google.gwt.core.client.GWT . log ( STRING_CONSTANT , caught ) ; } } ) ; }
@ org.junit.Test public void testIsIPv6 ( ) throws java.net.UnknownHostException { final java.net.InetAddress ipv6 = java.net.InetAddress . getByName ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ipv6 instanceof java.net.Inet6Address ) ) ; org.junit.Assert . assertTrue ( com.google.gerrit.server.util.SocketUtil . isIPv6 ( ipv6 ) ) ; final java.net.InetAddress ipv4 = java.net.InetAddress . getByName ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ipv4 instanceof java.net.Inet4Address ) ) ; org.junit.Assert . assertFalse ( com.google.gerrit.server.util.SocketUtil . isIPv6 ( ipv4 ) ) ; }
public boolean isReviewer ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( getCurrentUser () . isIdentifiedUser () ) { java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > results = ( cd != null ) ? cd . reviewers () . values () : approvalsUtil . getReviewers ( db , change . getId () ) . values () ; com.google.gerrit.server.IdentifiedUser user = ( ( com.google.gerrit.server.IdentifiedUser ) ( getCurrentUser () ) ) ; return results . contains ( user . getAccountId () ) ; } return false ; }
private void createBatchUsersGroup ( com.google.gerrit.server.Sequences seqs , org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.common.data.GroupReference groupReference , com.google.gerrit.reviewdb.client.AccountGroup.UUID adminsGroupUuid ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getGroupCreation ( seqs , groupReference ) ; com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate . builder () . setDescription ( STRING_CONSTANT ) . setOwnerGroupUUID ( adminsGroupUuid ) . build () ; createGroup ( allUsersRepo , groupCreation , groupUpdate ) ; }
static int getMinOwnerVoteLevel ( com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData . change () . getProject () ; try { return ( ( com.googlesource.gerrit.plugins.findowners.Config.config ) == null ) || ( project == null ) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config . getFromProjectConfigWithInheritance ( project , com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME ) . getInt ( com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL , com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { com.googlesource.gerrit.plugins.findowners.Config.log . error ( ( STRING_CONSTANT + project ) , e ) ; return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel ; } }
private void fireEvent ( com.google.gerrit.common.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.common.ChangeHookRunner.EventListenerHolder holder : listeners . values () ) { if ( isVisibleTo ( event , holder.user , db ) ) { holder.listener . onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
@ java.lang.Override protected void configure () { install ( new com.google.gerrit.server.schema.SchemaVersion.Module () ) ; bind ( org.eclipse.jgit.lib.PersonIdent . class ) . annotatedWith ( com.google.gerrit.server.GerritPersonIdent . class ) . toProvider ( com.google.gerrit.server.GerritPersonIdentProvider . class ) ; bind ( com.google.gerrit.server.config.AllProjectsName . class ) . toProvider ( com.google.gerrit.server.config.AllProjectsNameProvider . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
@ java.lang.Override public void name ( java.lang.String name ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.group.PutName.Input in = new com.google.gerrit.server.group.PutName.Input () ; in.name = name ; try { putName . apply ( rsrc , in ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil . asRestApiException ( STRING_CONSTANT , e ) ; } }
public java.lang.String string ( final java.lang.String title , final java.lang.String name , final java.lang.String dv , final boolean nullIfDefault ) { final java.lang.String ov = get ( name ) ; java.lang.String nv = ui . readString ( ( ov != null ? ov : dv ) , STRING_CONSTANT , title ) ; if ( nullIfDefault && ( nv . equals ( dv ) ) ) { nv = null ; } if ( ! ( com.google.gerrit.pgm.init.Section . eq ( ov , nv ) ) ) { set ( name , nv ) ; } return nv ; }
@ org.junit.Test public void testHashCode () { org.junit.Assert . assertTrue ( ( ( f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) == ( f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) ) ) ; org.junit.Assert . assertFalse ( ( ( f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) == ( f ( STRING_CONSTANT , STRING_CONSTANT ) . hashCode () ) ) ) ; }
private void addMissingLabel ( java.lang.String text ) { com.google.gwt.user.client.Element li = com.google.gwt.user.client.DOM . createElement ( STRING_CONSTANT ) ; li . setClassName ( Gerrit.RESOURCES . css () . missingApproval () ) ; li . setInnerText ( text ) ; com.google.gwt.user.client.DOM . appendChild ( missing . getElement () , li ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { java.lang.String p = STRING_CONSTANT + i ; createProject ( p ) ; com.google.gerrit.acceptance.GitUtil . cloneProject ( new com.google.gerrit.reviewdb.client.Project.NameKey ( p ) , sshSession ) ; } return null ; }
private PushOneCommit.Result push ( java.lang.String ref , java.lang.String subject , java.lang.String fileName , java.lang.String content ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , subject , fileName , content ) ; return push . to ( ref ) ; }
@ org.junit.Test public void testCreate_NonEmpty ( ) throws java.io.IOException { final java.io.File root = com.google.gerrit.server.config.SitePathsTest . random () ; final java.io.File txt = new java.io.File ( root , STRING_CONSTANT ) ; try { org.junit.Assert . assertTrue ( root . mkdir () ) ; org.junit.Assert . assertTrue ( txt . createNewFile () ) ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertFalse ( site.isNew ) ; org.junit.Assert . assertEquals ( root , site.site_path ) ; } finally { txt . delete () ; root . delete () ; } }
@ org.junit.Test public void maxPages ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , newChange ( repo ) ) ; com.google.gerrit.extensions.api.changes.Changes.QueryRequest query = newQuery ( STRING_CONSTANT ) . withLimit ( NUMBER_CONSTANT ) ; assertQuery ( query , change ) ; assertQuery ( query . withStart ( NUMBER_CONSTANT ) ) ; assertQuery ( query . withStart ( NUMBER_CONSTANT ) ) ; assertBadQuery ( query . withStart ( NUMBER_CONSTANT ) ) ; assertQuery ( query . withLimit ( NUMBER_CONSTANT ) . withStart ( NUMBER_CONSTANT ) ) ; }
private void deleteSshKey ( com.google.gerrit.extensions.common.SshKeyInfo i ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException , org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey . create ( user . getAccountId () , i.seq , i.sshPublicKey ) ; deleteSshKey . apply ( new com.google.gerrit.server.account.AccountResource.SshKey ( user . asIdentifiedUser () , sshKey ) , null ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > patchIds ( ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > ret = new java.util.HashSet <> () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData . values () ) { ret . add ( cd . change () . currentPatchSetId () ) ; } return ret ; }
@ org.junit.Test public void shouldCreateSharedDirectoryIfItDoesNotExist ( ) throws java.lang.Exception { java.io.File configuredDirectory = tempFolder . newFolder () ; com.google.common.truth.Truth . assertThat ( configuredDirectory . delete () ) . isTrue () ; org.mockito.Mockito . when ( configMock . main () . sharedDirectory () ) . thenReturn ( configuredDirectory . getAbsolutePath () ) ; java.nio.file.Path sharedDirectory = module . getSharedDirectory () ; com.google.common.truth.Truth . assertThat ( sharedDirectory . toFile () . exists () ) . isTrue () ; }
@ java.lang.Override protected org.eclipse.jgit.lib.CommitBuilder applyImpl ( org.eclipse.jgit.lib.ObjectInserter ins ) throws com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder () ; cb . setMessage ( STRING_CONSTANT ) ; java.util.concurrent.atomic.AtomicBoolean removedAllComments = new java.util.concurrent.atomic.AtomicBoolean () ; org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes ( ins , removedAllComments ) ; if ( removedAllComments . get () ) { return null ; } cb . setTreeId ( com.google.common.base.Preconditions . checkNotNull ( treeId ) ) ; return cb ; }
protected com.google.gerrit.server.GerritServer getGerritServer ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { try { return com.google.gerrit.server.GerritServer . getInstance () ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( NUMBER_CONSTANT , STRING_CONSTANT , e ) ; } catch ( com.google.gwtjsonrpc.server.XsrfException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( NUMBER_CONSTANT , STRING_CONSTANT , e ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply ( com.google.gerrit.server.project.ChildProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ( recursive ) || ( rsrc . isDirectChild () ) ) { return json . format ( rsrc . getChild () . getProject () ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( rsrc . getChild () . getProject () . getName () ) ; }
@ java.lang.Override public com.google.gerrit.server.CurrentUser getUser () { return new com.google.gerrit.server.CurrentUser () { @ java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups () { return new com.google.gerrit.server.account.GroupMembership () { @ java.lang.Override public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > intersection ( java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groupIds ) { return null ; } @ java.lang.Override public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getKnownGroups () { return null ; } @ java.lang.Override public boolean containsAnyOf ( java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groupIds ) { return true ; } @ java.lang.Override public boolean contains ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) { return true ; } } ; } } ; }
private static javax.xml.parsers.DocumentBuilder newBuilder ( ) throws javax.xml.parsers.ParserConfigurationException { final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory . newInstance () ; factory . setValidating ( false ) ; factory . setExpandEntityReferences ( false ) ; factory . setIgnoringComments ( true ) ; factory . setCoalescing ( true ) ; return factory . newDocumentBuilder () ; }
@ org.junit.Test public void byKey ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change = insert ( newChange ( repo , null , null , null , null ) ) ; java.lang.String key = change . getKey () . get () ; assertQuery ( STRING_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; i ++ ) { java.lang.String q = key . substring ( NUMBER_CONSTANT , ( NUMBER_CONSTANT - i ) ) ; assertQuery ( q , change ) ; } }
@ org.junit.Test public void byAfter ( ) throws java.lang.Exception { com.google.gerrit.testutil.TestTimeUtil . resetWithClockStep ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.HOURS ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( repo , newChange ( repo ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( repo , newChange ( repo ) ) ; com.google.gerrit.testutil.TestTimeUtil . setClockStep ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.MILLISECONDS ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change2 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; assertQuery ( STRING_CONSTANT , change2 , change1 ) ; }
@ java.lang.Override public com.google.gerrit.server.ContactStore get () { try { return new com.google.gerrit.server.EncryptedContactStore ( server , schema ) ; } catch ( final com.google.gerrit.client.rpc.ContactInformationStoreException initError ) { return new com.google.gerrit.server.ContactStore () { @ java.lang.Override public void store ( com.google.gerrit.client.reviewdb.Account account , com.google.gerrit.client.reviewdb.ContactInformation info ) throws com.google.gerrit.client.rpc.ContactInformationStoreException { throw initError ; } } ; } }
public static com.google.gerrit.reviewdb.client.Change.Id fromEditRefPart ( java.lang.String ref ) { int startChangeId = ( ref . indexOf ( RefNames.EDIT_PREFIX ) ) + ( RefNames.EDIT_PREFIX . length () ) ; int endChangeId = com.google.gerrit.reviewdb.client.Change.Id . nextNonDigit ( ref , startChangeId ) ; java.lang.String id = ref . substring ( startChangeId , endChangeId ) ; if ( ( id != null ) && ( ! ( id . isEmpty () ) ) ) { return new com.google.gerrit.reviewdb.client.Change.Id ( java.lang.Integer . parseInt ( id ) ) ; } return null ; }
private static java.util.List < com.google.gwtorm.schema.QueryModel.OrderBy > orderByLeaves ( java.util.List < com.google.gwtorm.schema.QueryModel.OrderBy > in ) { java.util.ArrayList < com.google.gwtorm.schema.QueryModel.OrderBy > r = new java.util.ArrayList ( in . size () ) ; for ( com.google.gwtorm.schema.QueryModel.OrderBy m : in ) { if ( m.column . isNested () ) { for ( com.google.gwtorm.schema.ColumnModel c : m.column . getAllLeafColumns () ) { r . add ( new com.google.gwtorm.schema.QueryModel.OrderBy ( c , m.descending ) ) ; } } else { r . add ( m ) ; } } return r ; }
private void reply ( org.eclipse.jetty.server.HttpConnection conn , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { byte [] msg = com.google.gerrit.pgm.http.jetty.HiddenErrorHandler . message ( conn ) ; res . setHeader ( HttpHeader.CONTENT_TYPE . asString () , STRING_CONSTANT ) ; res . setContentLength ( msg.length ) ; try { com.google.gwtexpui.server.CacheHeaders . setNotCacheable ( res ) ; } finally { try ( javax.servlet.ServletOutputStream out = res . getOutputStream () ) { out . write ( msg ) ; } } }
public java.lang.String getComment () { final java.lang.String s = getSshPublicKey () ; if ( ( s == null ) || ( ( s . length () ) == NUMBER_CONSTANT ) ) { return STRING_CONSTANT ; } final java.lang.String [] parts = s . split ( STRING_CONSTANT , NUMBER_CONSTANT ) ; if ( ( parts.length ) < NUMBER_CONSTANT ) { return STRING_CONSTANT ; } return parts [ NUMBER_CONSTANT ] ; }
private com.google.gerrit.server.account.AuthResult byAccountId ( final java.lang.String idStr ) { final com.google.gerrit.reviewdb.client.Account.Id id ; try { id = Account.Id . parse ( idStr ) ; } catch ( java.lang.NumberFormatException nfe ) { return null ; } try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { return auth ( db . accounts () . get ( id ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { getServletContext () . log ( STRING_CONSTANT , e ) ; return null ; } }
@ java.lang.Override public void close ( ) throws java.io.IOException { try { java.io.Reader reader = getReader () ; if ( reader != null ) { while ( ( reader . read () ) != ( - NUMBER_CONSTANT ) ) {} } } finally { response . close () ; } }
private void initParent () { parentPanel = new com.google.gwt.user.client.ui.VerticalPanel () ; parentPanel . add ( new com.google.gerrit.client.ui.SmallHeading ( Util.C . headingParentProjectName () ) ) ; parentName = new com.google.gerrit.client.ui.Hyperlink ( STRING_CONSTANT , STRING_CONSTANT ) ; parentPanel . add ( parentName ) ; add ( parentPanel ) ; }
private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > toPatchSets ( com.google.gerrit.client.changes.ChangeInfo info ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeInfo.RevisionInfo > all = info . revisions () . values () ; com.google.gerrit.client.changes.ChangeInfo.RevisionInfo . sortRevisionInfoByNumber ( all ) ; java.util.List < com.google.gerrit.reviewdb.client.PatchSet > r = new java.util.ArrayList ( all . length () ) ; for ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev : com.google.gerrit.client.rpc.Natives . asList ( all ) ) { r . add ( com.google.gerrit.client.changes.ChangeDetailCache . toPatchSet ( info , rev ) ) ; } return r ; }
@ java.lang.Override public boolean retryRequest ( java.io.IOException exception , int executionCount , org.apache.http.protocol.HttpContext context ) { if ( ( executionCount > ( cfg . getMaxTries () ) ) || ( exception instanceof javax.net.ssl.SSLException ) ) { return false ; } logRetry ( exception . getMessage () , context ) ; try { java.lang.Thread . sleep ( cfg . getRetryInterval () ) ; } catch ( java.lang.InterruptedException e ) { java.lang.Thread . currentThread () . interrupt () ; return false ; } return true ; }
@ org.junit.Test public void testNoEscaping () { java.lang.String find = STRING_CONSTANT ; java.lang.String link = STRING_CONSTANT ; com.google.gwtexpui.safehtml.client.LinkFindReplace a = new com.google.gwtexpui.safehtml.client.LinkFindReplace ( find , link ) ; com.google.common.truth.Truth . assertThat ( a . pattern () . getSource () ) . isEqualTo ( find ) ; com.google.common.truth.Truth . assertThat ( a . replace ( find ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( a . toString () ) . isEqualTo ( ( ( ( STRING_CONSTANT + find ) + STRING_CONSTANT ) + link ) ) ; }
@ org.junit.Test public void testLoader ( ) throws java.lang.Exception { com.google.common.cache.LoadingCache < java.lang.String , java.util.regex.Pattern > patternCache = com.google.common.cache.CacheBuilder . newBuilder () . build ( new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.Loader () ) ; for ( java.lang.String pattern : com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest . getPatterns () . keySet () ) { com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest . getPatterns () . get ( pattern ) . pattern () ) . isEqualTo ( patternCache . get ( pattern ) . pattern () ) ; } }
public com.googlecode.prolog_cafe.lang.NumberTerm subtract ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t instanceof com.googlecode.prolog_cafe.lang.DoubleTerm ) return new com.googlecode.prolog_cafe.lang.DoubleTerm ( ( ( this . doubleValue () ) - ( t . doubleValue () ) ) ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) - ( t . intValue () ) ) ) ; }
private java.util.List < com.google.gerrit.common.data.GroupReference > suggestAccountGroup ( @ javax.annotation.Nullable final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String query , final int limit ) { return com.google.common.collect.Lists . newArrayList ( com.google.common.collect.Iterables . limit ( groupBackend . suggest ( query , projectControl ) , ( limit <= NUMBER_CONSTANT ? NUMBER_CONSTANT : java.lang.Math . min ( limit , NUMBER_CONSTANT ) ) ) ) ; }
public com.google.gerrit.client.ui.InlineHyperlink getNextPatchLink ( int index ) { int nextPatchIndex = getNextPatch ( index , false , PREFERENCE_VALIDATOR ) ; if ( nextPatchIndex < NUMBER_CONSTANT ) { return null ; } return createLink ( nextPatchIndex , null , com.google.gwtexpui.safehtml.client.SafeHtml . asis ( Util.C . nextPatchLinkIcon () ) ) ; }
@ org.junit.Test public void addRemoveMember ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = PUT ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_CREATED ) ; com.google.gerrit.extensions.common.AccountInfo ai = newGson () . fromJson ( r . getReader () , com.google.gerrit.extensions.common.AccountInfo . class ) ; com.google.gerrit.acceptance.rest.account.AccountAssert . assertAccountInfo ( user , ai ) ; assertMembers ( STRING_CONSTANT , admin , user ) ; r . consume () ; com.google.common.truth.Truth . assertThat ( DELETE ( STRING_CONSTANT ) ) . isEqualTo ( HttpStatus.SC_NO_CONTENT ) ; assertMembers ( STRING_CONSTANT , admin ) ; }
@ org.junit.Before public void setUpMocks () { indexRestApiServlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet ( indexerMock , schemaFactoryMock ) ; id = new com.google.gerrit.reviewdb.client.Change.Id ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServletTest.CHANGE_NUMBER ) ; org.mockito.Mockito . when ( requestMock . getPathInfo () ) . thenReturn ( ( STRING_CONSTANT + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServletTest.CHANGE_NUMBER ) ) ) ; change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , com.google.gerrit.common.TimeUtil . nowTs () ) ; }
@ java.lang.Override public void unstarChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.change.ChangeResource rsrc = changes . parse ( TopLevelResource.INSTANCE , com.google.gerrit.extensions.restapi.IdString . fromUrl ( id ) ) ; com.google.gerrit.server.account.AccountResource.StarredChange starredChange = new com.google.gerrit.server.account.AccountResource.StarredChange ( account . getUser () , rsrc ) ; starredChangesDelete . apply ( starredChange , new com.google.gerrit.server.account.StarredChanges.EmptyInput () ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private static com.google.gerrit.client.ui.Screen mine () { if ( com.google.gerrit.client.Gerrit . isSignedIn () ) { return new com.google.gerrit.client.changes.AccountDashboardScreen ( com.google.gerrit.client.Gerrit . getUserAccount () . getId () ) ; } else { com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen ( null ) ; r . setRequiresSignIn ( true ) ; return r ; } }
@ org.junit.Test public void testGetGroup ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache . get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( STRING_CONSTANT ) ) ; testGetGroup ( adminGroup . getGroupUUID () . get () , adminGroup ) ; testGetGroup ( adminGroup . getName () , adminGroup ) ; testGetGroup ( adminGroup . getId () . get () , adminGroup ) ; }
@ java.lang.Override public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( com.google.gerrit.index.Index < com.google.gerrit.reviewdb.client.Account.Id , com.google.gerrit.server.account.AccountState > i : getWriteIndexes () ) { byIdCache . evict ( id ) ; java.util.Optional < com.google.gerrit.server.account.AccountState > accountState = byIdCache . get ( id ) ; if ( accountState . isPresent () ) { i . replace ( accountState . get () ) ; } else { i . delete ( id ) ; } } fireAccountIndexedEvent ( id . get () ) ; }
private static boolean getBooleanParam ( com.google.gitiles.GitilesView view , java.lang.String name ) { java.util.List < java.lang.String > values = view . getParameters () . get ( name ) ; return ( ! ( values . isEmpty () ) ) && ( ( values . get ( NUMBER_CONSTANT ) . isEmpty () ) || ( values . get ( NUMBER_CONSTANT ) . equals ( STRING_CONSTANT ) ) ) ; }
private static void initVimKeys () { net.codemirror.lib.KeyMap km = net.codemirror.lib.CodeMirror . cloneKeyMap ( STRING_CONSTANT ) ; for ( java.lang.String s : new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ) { km . remove ( s ) ; } net.codemirror.lib.CodeMirror . addKeyMap ( STRING_CONSTANT , km ) ; }
@ java.lang.Override public void printJson ( final java.lang.StringBuffer sb , final java.util.Set < T > o ) { sb . append ( CHAR_CONS ) ; boolean first = true ; for ( final T item : o ) { if ( first ) { first = false ; } else { sb . append ( CHAR_CONS ) ; } if ( item != null ) { serializer . printJson ( sb , item ) ; } else { sb . append ( com.google.gwtjsonrpc.client.JS_NULL ) ; } } sb . append ( CHAR_CONS ) ; }
public static void assertAccountInfo ( com.google.gerrit.acceptance.TestAccount a , com.google.gerrit.extensions.common.AccountInfo ai ) { com.google.common.truth.Truth . assertThat ( a.id . get () ) . isEqualTo ( ai._accountId ) ; com.google.common.truth.Truth . assertThat ( a.fullName ) . isEqualTo ( ai.name ) ; com.google.common.truth.Truth . assertThat ( a.email ) . isEqualTo ( ai.email ) ; }
@ org.junit.Test public void testPreformat4 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( ( STRING_CONSTANT + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) , n . asString () ) ; }
private void bccWatchesNotifySubmittedChanges () { if ( ( db ) != null ) { final com.google.gerrit.server.project.ProjectState ps = getProjectState () ; if ( ps != null ) { for ( final com.google.gerrit.reviewdb.AccountProjectWatch w : getProjectWatches () ) { if ( w . isNotifySubmittedChanges () ) { add ( RecipientType.BCC , w . getAccountId () ) ; } } } } }
@ org.junit.Test public void newPatchSetByOtherOnReviewableChangeNotifyOwnerReviewersInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , STRING_CONSTANT , other ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.starrer , other ) . to ( sc.reviewer ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
@ org.junit.Test public void newPatchSetOnWipChangeNotifyAllInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , STRING_CONSTANT , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( sc.reviewer ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
private void setSubmitType ( com.google.gerrit.extensions.common.SubmitType submitType ) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input () ; in.submitType = submitType ; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.FALSE ; com.google.gerrit.acceptance.RestResponse r = adminSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , in ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; r . consume () ; }
@ org.junit.Test public void restoreReviewableChangeByAdminCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageAbandonedReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; restore ( sc.changeId , admin , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer , admin ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ com.google.inject.Provides @ com.google.inject.Singleton com.google.gitiles.GitilesServlet getServlet ( @ com.google.inject.name.Named ( value = STRING_CONSTANT ) org.eclipse.jgit.lib.Config cfg , com.google.gitiles.GitilesUrls urls , com.google.gitiles.GitilesAccess.Factory accessFactory , org.eclipse.jgit.transport.resolver.RepositoryResolver < javax.servlet.http.HttpServletRequest > resolver , com.googlesource.gerrit.plugins.gitiles.MenuFilter menuFilter ) throws javax.servlet.ServletException { com.google.gitiles.GitilesServlet s = new com.google.gitiles.GitilesServlet ( cfg , null , urls , accessFactory , resolver , null , null , null , null ) ; for ( com.google.gitiles.GitilesView.Type view : GitilesView.Type . values () ) { s . addFilter ( view , menuFilter ) ; } return s ; }
@ org.junit.Test public void testFindReplace () { final java.lang.String find = STRING_CONSTANT ; final java.lang.String replace = STRING_CONSTANT ; final com.google.gwtexpui.safehtml.client.RawFindReplace a = new com.google.gwtexpui.safehtml.client.RawFindReplace ( find , replace ) ; com.google.common.truth.Truth . assertThat ( a . pattern () . getSource () ) . isEqualTo ( find ) ; com.google.common.truth.Truth . assertThat ( a . replace ( find ) ) . isEqualTo ( replace ) ; com.google.common.truth.Truth . assertThat ( a . toString () ) . isEqualTo ( ( ( ( STRING_CONSTANT + find ) + STRING_CONSTANT ) + replace ) ) ; }
private void applyReview ( com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.extensions.api.changes.ReviewInput review ) throws com.google.gerrit.extensions.restapi.RestApiException { gApi . changes () . id ( patchSet . getId () . getParentKey () . get () ) . revision ( patchSet . getRevision () . get () ) . review ( review ) ; }
@ java.lang.Override public java.lang.String call ( ) throws java.lang.Exception { java.lang.String actionName = actionString . substring ( NUMBER_CONSTANT , actionString . indexOf ( STRING_CONSTANT ) ) ; java.lang.String actionValue = actionString . substring ( ( ( actionString . indexOf ( STRING_CONSTANT ) ) + NUMBER_CONSTANT ) ) ; doPerformAction ( bugId , actionName , actionValue ) ; return bugId ; }
private boolean combineB ( final int i ) { final int s = edits . get ( i ) . getBeginB () ; final int e = edits . get ( ( i - NUMBER_CONSTANT ) ) . getEndB () ; return ( s - e ) <= ( ( NUMBER_CONSTANT * ( context ) ) + NUMBER_CONSTANT ) ; }
private com.google.gerrit.reviewdb.client.PatchSetInfo previousPatchSetInfo ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gwtorm.server.OrmException { try { return patchSetInfoFactory . get ( dbProvider . get () , new com.google.gerrit.reviewdb.client.PatchSet.Id ( patchSetId . getParentKey () , ( ( patchSetId . get () ) - NUMBER_CONSTANT ) ) ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
private org.eclipse.jgit.lib.ObjectId toObjectId ( com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gerrit.common.errors.NoSuchEntityException { try { return org.eclipse.jgit.lib.ObjectId . fromString ( ps . getRevision () . get () ) ; } catch ( java.lang.IllegalArgumentException e ) { com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory.log . error ( ( ( STRING_CONSTANT + ( ps . getId () ) ) + STRING_CONSTANT ) ) ; throw new com.google.gerrit.common.errors.NoSuchEntityException () ; } }
private static java.lang.String text ( java.lang.String branch , java.lang.String topic ) { if ( ( topic != null ) && ( ! ( topic . isEmpty () ) ) ) { return ( ( branch + STRING_CONSTANT ) + topic ) + STRING_CONSTANT ; } return branch ; }
public static org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Set < java.io.File > files ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Map < java.io.File , byte [] > tmp = new java.util.HashMap <> () ; for ( java.io.File f : files ) { tmp . put ( f , null ) ; } return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . makeCommit ( rw , repo , message , tmp ) ; }
@ org.junit.Test public void deleteVoteFromReviewableChangeNotifyOwnerReviewersWithSelfCc ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; selfCc () ; deleteVote ( sc , voter , NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer , voter ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( sc.starrer ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( caller == ( java.lang.Thread . currentThread () ) ) { insertChange ( db ) ; } else { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory . open () ) { insertChange ( db ) ; } } synchronized ( newProgress ) { newProgress . update ( NUMBER_CONSTANT ) ; } return null ; }
public void setValue ( final int pComplete ) { assert ( NUMBER_CONSTANT <= pComplete ) && ( pComplete <= NUMBER_CONSTANT ) ; value = pComplete ; bar . setWidth ( ( ( NUMBER_CONSTANT * pComplete ) + STRING_CONSTANT ) ) ; msg . setText ( ( ( ( callerText ) + pComplete ) + STRING_CONSTANT ) ) ; }
public static < T > void setOf ( com.google.inject.Binder binder , com.google.inject.TypeLiteral < T > member ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.inject.Key < com.google.gerrit.extensions.registration.DynamicSet < T > > key = ( ( com.google.inject.Key < com.google.gerrit.extensions.registration.DynamicSet < T > > ) ( com.google.inject.Key . get ( com.google.inject.util.Types . newParameterizedType ( com.google.gerrit.extensions.registration.DynamicSet . class , member . getType () ) ) ) ) ; binder . bind ( key ) . toProvider ( new com.google.gerrit.extensions.registration.DynamicSetProvider ( member ) ) . in ( Scopes.SINGLETON ) ; }
protected com.google.gerrit.reviewdb.client.Change newChange ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges . newChange ( project , changeOwner . getAccountId () ) ; com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate ( c , changeOwner ) ; u . setBranch ( c . getDest () . get () ) ; u . commit () ; return c ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( o instanceof com.google.gitiles.Revision ) { com.google.gitiles.Revision r = ( ( com.google.gitiles.Revision ) ( o ) ) ; return ( ( ( ( java.util.Objects . equals ( name , r.name ) ) && ( java.util.Objects . equals ( id , r.id ) ) ) && ( ( type ) == ( r.type ) ) ) && ( java.util.Objects . equals ( peeledId , r.peeledId ) ) ) && ( ( peeledType ) == ( r.peeledType ) ) ; } return false ; }
@ org.junit.Test public void byStatus ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.server.change.ChangeInserter ins1 = newChangeWithStatus ( repo , Change.Status.NEW ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( repo , ins1 ) ; com.google.gerrit.server.change.ChangeInserter ins2 = newChangeWithStatus ( repo , Change.Status.MERGED ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( repo , ins2 ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; }
@ java.lang.Override public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( ! ( publisherThread . isAlive () ) ) { publisherThread . start () ; } if ( queue . offer ( event ) ) { if ( ( lostEventCount ) > NUMBER_CONSTANT ) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER . warn ( STRING_CONSTANT , lostEventCount ) ; lostEventCount = NUMBER_CONSTANT ; } } else { if ( ( ( ( lostEventCount ) ++ ) % NUMBER_CONSTANT ) == NUMBER_CONSTANT ) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER . error ( STRING_CONSTANT , lostEventCount ) ; } } }
public static com.google.gerrit.server.util.LabelVote parseWithEquals ( java.lang.String text ) { com.google.common.base.Preconditions . checkArgument ( ( ! ( com.google.common.base.Strings . isNullOrEmpty ( text ) ) ) , STRING_CONSTANT ) ; int e = text . lastIndexOf ( CHAR_CONS ) ; com.google.common.base.Preconditions . checkArgument ( ( e >= NUMBER_CONSTANT ) , STRING_CONSTANT , text ) ; return com.google.gerrit.server.util.LabelVote . create ( text . substring ( NUMBER_CONSTANT , e ) , java.lang.Short . parseShort ( text . substring ( ( e + NUMBER_CONSTANT ) ) , text . length () ) ) ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; idA = org.eclipse.jgit.lib.ObjectId . fromString ( STRING_CONSTANT ) ; name = new com.google.gerrit.reviewdb.Project.NameKey ( STRING_CONSTANT ) ; realDb = createBareRepository () ; mockDb = org.easymock.EasyMock . createStrictMock ( org.eclipse.jgit.lib.Repository . class ) ; pc = org.easymock.EasyMock . createStrictMock ( com.google.gerrit.server.project.ProjectControl . class ) ; pcf = org.easymock.EasyMock . createStrictMock ( ProjectControl.Factory . class ) ; grm = org.easymock.EasyMock . createStrictMock ( com.google.gerrit.server.git.GitRepositoryManager . class ) ; refMocks = new java.util.ArrayList < com.google.gerrit.server.project.RefControl > () ; }
@ java.lang.Override protected void doGet ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { com.google.gerrit.server.tools.ToolsCatalog.Entry ent = toc . get ( req . getPathInfo () ) ; if ( ent == null ) { rsp . sendError ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND ) ; return; } switch ( ent . getType () ) { case FILE : doGetFile ( ent , rsp ) ; break; case DIR : doGetDirectory ( ent , req , rsp ) ; break; default: rsp . sendError ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND ) ; break; } }
@ org.junit.Test ( expected = com.google.gerrit.extensions.restapi.ResourceConflictException . class ) public void rebase ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; gApi . changes () . id ( r . getChangeId () ) . revision ( r . getCommit () . name () ) . rebase () ; }
public static void logEventListenerError ( java.lang.Object listener , java.lang.Exception error ) { if ( com.google.gerrit.server.extensions.events.EventUtil.log . isDebugEnabled () ) { com.google.gerrit.server.extensions.events.EventUtil.log . debug ( java.lang.String . format ( STRING_CONSTANT , listener . getClass () . getName () ) , error ) ; } else { com.google.gerrit.server.extensions.events.EventUtil.log . warn ( STRING_CONSTANT , listener . getClass () . getName () , error . getMessage () ) ; } }
private boolean canUpdate () { if ( ( RefNames.REFS_CONFIG . equals ( refName ) ) && ( ! ( projectControl . isOwner () ) ) ) { if ( ! ( ( projectControl . getProjectState () . isAllProjects () ) && ( projectControl . isAdmin () ) ) ) { return false ; } } return canPerform ( Permission.PUSH ) ; }
@ org.junit.Test public void isoWithUtc ( ) throws java.lang.Exception { org.eclipse.jgit.lib.PersonIdent ident = newIdent ( STRING_CONSTANT , STRING_CONSTANT ) ; com.google.gitiles.DateFormatter df = new com.google.gitiles.DateFormatter ( com.google.common.base.Optional . of ( java.util.TimeZone . getTimeZone ( STRING_CONSTANT ) ) , Format.ISO ) ; com.google.common.truth.Truth . assertThat ( df . format ( ident ) ) . isEqualTo ( STRING_CONSTANT ) ; }
@ java.lang.Override public void run () { try { final com.google.gerrit.server.mail.MergedSender cm = mergedSenderFactory . create ( id ) ; cm . setFrom ( currentUser . getAccountId () ) ; cm . setPatchSet ( result.newPatchSet , result.info ) ; cm . send () ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id psi = result.newPatchSet . getId () ; com.google.gerrit.server.git.ReceiveCommits.log . error ( ( STRING_CONSTANT + psi ) , e ) ; } }
public int compareTo ( com.googlecode.prolog_cafe.lang.Term anotherTerm ) { if ( ( val ) != ( this ) ) return val . compareTo ( anotherTerm ) ; if ( ! ( anotherTerm instanceof com.googlecode.prolog_cafe.lang.VariableTerm ) ) return BEFORE ; if ( ( this ) == anotherTerm ) return EQUAL ; int x = ( this . hashCode () ) - ( ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( anotherTerm ) ) . hashCode () ) ; if ( x != NUMBER_CONSTANT ) return x ; throw new com.googlecode.prolog_cafe.exceptions.InternalException ( STRING_CONSTANT ) ; }
private static < C extends com.google.gerrit.extensions.client.Comment > C populate ( C c , java.lang.String path , com.google.gerrit.extensions.client.Side side , int line , java.lang.String message ) { c.path = path ; c.side = side ; c.line = ( line != NUMBER_CONSTANT ) ? line : null ; c.message = message ; if ( line != NUMBER_CONSTANT ) { com.google.gerrit.extensions.client.Comment.Range range = new com.google.gerrit.extensions.client.Comment.Range () ; range.startLine = line ; range.startCharacter = NUMBER_CONSTANT ; range.endLine = line ; range.endCharacter = NUMBER_CONSTANT ; c.range = range ; } return c ; }
@ java.lang.Override protected void configure () { bindScope ( com.google.inject.servlet.RequestScoped . class , PerThreadRequestScope.REQUEST ) ; bind ( PerThreadRequestScope.Propagator . class ) ; bind ( com.googlesource.gerrit.plugins.replication.Destination . class ) . toInstance ( this ) ; bind ( org.eclipse.jgit.transport.RemoteConfig . class ) . toInstance ( config . getRemoteConfig () ) ; install ( new com.google.inject.assistedinject.FactoryModuleBuilder () . build ( PushOne.Factory . class ) ) ; }
@ java.lang.Override protected void configureServlets () { rpc ( com.google.gerrit.httpd.rpc.SuggestServiceImpl . class ) ; rpc ( com.google.gerrit.httpd.rpc.SystemInfoServiceImpl . class ) ; install ( new com.google.gerrit.httpd.rpc.account.AccountModule () ) ; install ( new com.google.gerrit.httpd.rpc.changedetail.ChangeModule () ) ; install ( new com.google.gerrit.httpd.rpc.patch.PatchModule () ) ; install ( new com.google.gerrit.httpd.rpc.project.ProjectModule () ) ; }
@ java.lang.Deprecated private void fireCommentAddedHook ( com.google.gerrit.server.change.RevisionResource rsrc ) { com.google.gerrit.server.IdentifiedUser user = ( ( com.google.gerrit.server.IdentifiedUser ) ( rsrc . getControl () . getCurrentUser () ) ) ; try { hooks . doCommentAddedHook ( change , user . getAccount () , rsrc . getPatchSet () , message . getMessage () , categories , db . get () ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.change.PostReview.log . warn ( STRING_CONSTANT , e ) ; } }
private java.util.List < com.google.gerrit.extensions.common.AccountInfo > GET ( java.lang.String endpoint ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession . get ( endpoint ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; return newGson () . fromJson ( r . getReader () , new com.google.gson.reflect.TypeToken < java.util.List < com.google.gerrit.extensions.common.AccountInfo > > () {} . getType () ) ; }
@ org.junit.Test public void revisionActionsOneChangePerTopicUnapproved ( ) throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic ( name ( STRING_CONSTANT ) ) . getChangeId () ; java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ActionInfo > actions = getActions ( changeId ) ; com.google.common.truth.Truth . assertThat ( actions ) . containsKey ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( actions ) . containsKey ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( actions ) . hasSize ( NUMBER_CONSTANT ) ; }
@ java.lang.Override public void evaluate ( ) throws java.lang.Throwable { boolean mem = ( description . getAnnotation ( com.google.gerrit.acceptance.UseLocalDisk . class ) ) == null ; boolean enableHttpd = ( ( description . getAnnotation ( com.google.gerrit.acceptance.NoHttpd . class ) ) == null ) && ( ( description . getTestClass () . getAnnotation ( com.google.gerrit.acceptance.NoHttpd . class ) ) == null ) ; beforeTest ( description , mem , enableHttpd ) ; base . evaluate () ; afterTest () ; }
private void deleteOrUpdateDraftChange ( com.google.gerrit.server.update.ChangeContext ctx , java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > patchSets ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange () ; if ( deletedOnlyPatchSet () ) { deleteChangeOp = deleteChangeOpProvider . get () ; deleteChangeOp . updateChange ( ctx ) ; return; } if ( c . currentPatchSetId () . equals ( psId ) ) { c . setCurrentPatchSet ( previousPatchSetInfo ( ctx , patchSets ) ) ; } }
@ java.lang.Override public com.google.gerrit.server.plugins.ServerPlugin get ( java.io.File srcFile , com.google.gerrit.server.PluginUser pluginUser , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot , java.lang.String pluginCanonicalWebUrl , java.io.File pluginDataDir ) throws com.google.gerrit.server.plugins.InvalidPluginException { com.googlesource.gerrit.plugins.scripting.groovyprovider.GroovyPluginScriptEngine scriptEngine = scriptEngineProvider . get () ; return new com.google.gerrit.server.plugins.ServerPlugin ( getPluginName ( srcFile ) , pluginCanonicalWebUrl , pluginUser , srcFile , snapshot , new com.googlesource.gerrit.plugins.scripting.groovyprovider.GroovyPluginScanner ( getPluginName ( srcFile ) , scriptEngine , srcFile ) , pluginDataDir , scriptEngine . getGroovyClassLoader () ) ; }
private void insertDummyApproval ( final com.google.gerrit.reviewdb.Change change , final com.google.gerrit.reviewdb.PatchSet.Id psId , final com.google.gerrit.reviewdb.Account.Id forAccount , final com.google.gerrit.reviewdb.ApprovalCategory.Id catId , final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.PatchSetApproval ca = new com.google.gerrit.reviewdb.PatchSetApproval ( new com.google.gerrit.reviewdb.PatchSetApproval.Key ( psId , forAccount , catId ) , ( ( short ) ( NUMBER_CONSTANT ) ) ) ; ca . cache ( change ) ; db . patchSetApprovals () . insert ( java.util.Collections . singleton ( ca ) ) ; }
private static java.lang.String nameOf ( java.lang.String name ) { if ( name . endsWith ( STRING_CONSTANT ) ) { name = name . substring ( NUMBER_CONSTANT , name . lastIndexOf ( CHAR_CONS ) ) ; } int ext = name . lastIndexOf ( CHAR_CONS ) ; return NUMBER_CONSTANT < ext ? name . substring ( NUMBER_CONSTANT , ext ) : name ; }
@ org.junit.Test public void createEmptyChange ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo in = new com.google.gerrit.extensions.common.ChangeInfo () ; in.branch = org.eclipse.jgit.lib.Constants.MASTER ; in.subject = STRING_CONSTANT ; in.project = project . get () ; com.google.gerrit.extensions.common.ChangeInfo info = gApi . changes () . create ( in ) . get () ; com.google.common.truth.Truth . assertThat ( info.project ) . isEqualTo ( in.project ) ; com.google.common.truth.Truth . assertThat ( info.branch ) . isEqualTo ( in.branch ) ; com.google.common.truth.Truth . assertThat ( info.subject ) . isEqualTo ( in.subject ) ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git , java.lang.String subject , java.lang.String fileName , java.lang.String content ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , subject , fileName , content ) ; return push . to ( STRING_CONSTANT ) ; }
private java.lang.Runnable maybePrevVimSearch ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable () { @ java.lang.Override public void run () { if ( cm . vim () . hasSearchHighlight () ) { cm . vim () . handleKey ( STRING_CONSTANT ) ; } else { getCommentManager () . commentNav ( cm , Direction.NEXT ) . run () ; } } } ; }
private boolean shouldGet () { if ( console . isBatch () ) { return required ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder () ; msg . append ( STRING_CONSTANT ) ; msg . append ( STRING_CONSTANT ) ; if ( required ) { msg . append ( STRING_CONSTANT ) ; } else { msg . append ( STRING_CONSTANT ) ; msg . append ( STRING_CONSTANT ) ; } msg . append ( STRING_CONSTANT ) ; return console . yesno ( true , msg . toString () , name ) ; } }
public org.eclipse.jgit.lib.ObjectId loadRevision ( ) throws com.google.gwtorm.server.OrmException { if ( loaded ) { return getRevision () ; } else if ( ! ( migration . enabled () ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo = repoManager . openMetadataRepository ( getProjectName () ) ) { org.eclipse.jgit.lib.Ref ref = repo . getRefDatabase () . exactRef ( getRefName () ) ; return ref != null ? ref . getObjectId () : null ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
@ org.junit.Test public void changeMessageCommitFormatSimple ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges . newChange ( project , changeOwner . getAccountId () , NUMBER_CONSTANT ) ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; update . setChangeMessage ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; update . commit () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , update . getRefName () ) ; assertBodyEquals ( ( STRING_CONSTANT + ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) , update . getRevision () ) ; }
@ java.lang.Override public void visit ( org.pegdown.ast.HeaderNode node ) { java.lang.String tag = STRING_CONSTANT + ( node . getLevel () ) ; html . open ( tag ) ; java.lang.String id = toc . idFromHeader ( node ) ; if ( id != null ) { html . attribute ( STRING_CONSTANT , id ) ; } visitChildren ( node ) ; html . close ( tag ) ; }
private com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent createRepoSizeEvent () { com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent event = new com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent ( com.googlesource.gerrit.plugins.quota.Publisher.REPO_SIZE ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache . all () ) { long size = repoSizeCache . get ( p ) ; if ( size > NUMBER_CONSTANT ) { event . addData ( size , p . get () ) ; } } return event ; }
public static void rebase ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String commit , java.lang.String base , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.RebaseInput rebaseInput = com.google.gerrit.client.changes.ChangeApi.RebaseInput . create () ; rebaseInput . setBase ( base ) ; com.google.gerrit.client.changes.ChangeApi . call ( project , id , commit , STRING_CONSTANT ) . post ( rebaseInput , cb ) ; }
private static java.util.Set < java.lang.String > parseShowBranch ( javax.servlet.http.HttpServletRequest req ) { java.util.Set < java.lang.String > branches = com.google.common.collect.Sets . newLinkedHashSet () ; java.lang.String [] values = req . getParameterValues ( STRING_CONSTANT ) ; if ( values != null ) { java.util.Collections . addAll ( branches , values ) ; } values = req . getParameterValues ( STRING_CONSTANT ) ; if ( values != null ) { java.util.Collections . addAll ( branches , values ) ; } return branches ; }
private static java.util.List < com.googlesource.gerrit.plugins.analytics.CommitInfo > getCommits ( org.eclipse.jgit.lib.ObjectId [] ids , long [] times , boolean [] merges ) { java.util.List < com.googlesource.gerrit.plugins.analytics.CommitInfo > commits = new java.util.ArrayList ( ids.length ) ; for ( int i = NUMBER_CONSTANT ; i < ( ids.length ) ; i ++ ) { commits . add ( new com.googlesource.gerrit.plugins.analytics.CommitInfo ( ids [ i ] . name () , times [ i ] , merges [ i ] ) ) ; } return commits ; }
public static boolean canRead ( final com.google.gerrit.client.reviewdb.Account.Id who , final com.google.gerrit.client.data.ProjectCache.Entry e ) { if ( e == null ) { return false ; } final java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > myGroups = com.google.gerrit.client.rpc.Common . getGroupCache () . getEffectiveGroups ( who ) ; return com.google.gerrit.client.rpc.BaseServiceImplementation . canPerform ( myGroups , e , ApprovalCategory.READ , ( ( short ) ( NUMBER_CONSTANT ) ) , true ) ; }
@ org.junit.Test public void changeMessageCommitFormatSimple ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges . newChange ( project , changeOwner . getAccountId () , NUMBER_CONSTANT ) ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; update . setChangeMessage ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; update . commit () ; com.google.common.truth.Truth . assertThat ( update . getRefName () ) . isEqualTo ( STRING_CONSTANT ) ; assertBodyEquals ( ( STRING_CONSTANT + ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) , update . getRevision () ) ; }
@ java.lang.Override public void run () { try ( java.io.BufferedReader br = new java.io.BufferedReader ( new java.io.InputStreamReader ( in , STRING_CONSTANT ) ) ) { java.lang.String line ; while ( ( line = br . readLine () ) != null ) { com.google.gerrit.httpd.gitweb.GitwebServlet.log . error ( ( STRING_CONSTANT + line ) ) ; } } catch ( java.io.IOException e ) { com.google.gerrit.httpd.gitweb.GitwebServlet.log . debug ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { validate ( ctx ) ; ctx . addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . zeroId () , commit , getPatchSetId () . toRefName () , ReceiveCommand.Type.CREATE ) ) ; }
@ org.junit.Test public void createTagNotAllowed ( ) throws java.lang.Exception { block ( ( ( org.eclipse.jgit.lib.Constants.R_TAGS ) + STRING_CONSTANT ) , Permission.CREATE , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput () ; input.ref = STRING_CONSTANT ; exception . expect ( com.google.gerrit.extensions.restapi.AuthException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; tag ( input.ref ) . create ( input ) ; }
@ org.junit.Test public void submit ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit.Result r = createChange () ; gApi . changes () . id ( ( STRING_CONSTANT + ( r . getChangeId () ) ) ) . current () . review ( com.google.gerrit.acceptance.api.revision.RevisionIT . approve () ) ; gApi . changes () . id ( ( STRING_CONSTANT + ( r . getChangeId () ) ) ) . current () . submit () ; }
private void assertNotFound ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession . get ( ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) + ( id . name () ) ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > getNameKeys ( ) throws com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Project > pList = getProjects () ; final java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > nameKeys = new java.util.ArrayList ( pList . size () ) ; for ( com.google.gerrit.reviewdb.client.Project p : pList ) { nameKeys . add ( p . getNameKey () ) ; } return nameKeys ; }
@ java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser () { final com.google.gerrit.server.CurrentUser user = session . getCurrentUser () ; if ( ( user != null ) && ( user . isIdentifiedUser () ) ) { com.google.gerrit.server.IdentifiedUser identifiedUser = userFactory . create ( ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId () ) ; identifiedUser . setAccessPath ( user . getAccessPath () ) ; return identifiedUser ; } return user ; }
@ org.junit.Test public void shouldNotCallRemoteWhenEventIsForwarded ( ) throws java.lang.Exception { org.easymock.EasyMock . reset ( poolMock ) ; replayAll () ; com.ericsson.gerrit.plugins.syncindex.Context . setForwardedEvent ( true ) ; indexEventHandler . onChangeIndexed ( id . get () ) ; indexEventHandler . onChangeDeleted ( id . get () ) ; com.ericsson.gerrit.plugins.syncindex.Context . unsetForwardedEvent () ; verifyAll () ; }
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean preserveGitRepository ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { final org.eclipse.jgit.lib.Repository repository = repoManager . openRepository ( project . getNameKey () ) ; if ( repository == null ) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException ( STRING_CONSTANT ) ; } cleanCache ( repository ) ; if ( ! preserveGitRepository ) { deleteGitRepository ( repository ) ; } }
@ java.lang.Override public void remove ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { listLock . lock () ; try { java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > n = com.google.common.collect.Sets . newTreeSet ( list . get ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL ) ) ; n . remove ( name ) ; list . put ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL , java.util.Collections . unmodifiableSortedSet ( n ) ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.project.ProjectCacheImpl.log . warn ( STRING_CONSTANT , e ) ; } finally { listLock . unlock () ; } evict ( name ) ; }
@ org.junit.Test public void deleteVoteFromReviewableChangeNotifyOwnerReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; deleteVote ( sc , voter , NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( voter ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( sc.starrer ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ) ; servlet = new com.google.gitiles.RepositoryIndexServlet ( new com.google.gitiles.DefaultRenderer () , new com.google.gitiles.TestGitilesAccess ( repo . getRepository () ) , new com.google.gitiles.TimeCache () ) ; }
@ java.lang.Override protected void configure () { factory ( AgreementInfoFactory.Factory . class ) ; factory ( DeleteExternalIds.Factory . class ) ; factory ( ExternalIdDetailFactory.Factory . class ) ; factory ( GroupDetailHandler.Factory . class ) ; factory ( RegisterNewEmailSender.Factory . class ) ; factory ( RenameGroup.Factory . class ) ; }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo loadChangeTableColumns ( com.google.gerrit.extensions.client.GeneralPreferencesInfo r , com.google.gerrit.server.account.VersionedAccountPreferences v , com.google.gerrit.server.account.VersionedAccountPreferences d ) { r.changeTable = com.google.gerrit.server.account.GeneralPreferencesLoader . changeTable ( v ) ; if ( ( r.changeTable . isEmpty () ) && ( ! ( v . isDefaults () ) ) ) { r.changeTable = com.google.gerrit.server.account.GeneralPreferencesLoader . changeTable ( d ) ; } return r ; }
private org.eclipse.jgit.revwalk.RevCommit parse ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( project ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = rw . parseCommit ( id ) ; rw . parseBody ( c ) ; return c ; } }
public com.google.gerrit.extensions.common.RevisionInfo revisionInfo ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gerrit.server.GpgException , com.google.gerrit.server.patch.PatchListNotAvailableException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory . create ( db . get () , project , ps . getId () . getParentKey () ) ; return changeJson . getRevisionInfo ( cd , ps ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws java.lang.Exception { try { accountCache . evict ( id ) ; index . replace ( accountCache . get ( id ) ) ; verboseWriter . println ( ( STRING_CONSTANT + desc ) ) ; done . incrementAndGet () ; } catch ( java.lang.Exception e ) { failed . incrementAndGet () ; throw e ; } return null ; }
protected void setUseContentMerge ( ) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input () ; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.TRUE ; com.google.gerrit.acceptance.RestResponse r = adminSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , in ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; r . consume () ; }
@ java.lang.Override public void go () { if ( ( com.google.gerrit.client.Gerrit.patchScreen ) != null ) { com.google.gerrit.client.Gerrit.patchScreen . setTopView ( PatchScreen.TopView.MAIN ) ; if ( type == ( com.google.gerrit.client.Gerrit.patchScreen . getPatchScreenType () ) ) { com.google.gwt.dom.client.AnchorElement . as ( getElement () ) . blur () ; } else { new com.google.gerrit.client.ui.PatchLink ( STRING_CONSTANT , type , com.google.gerrit.client.Gerrit.patchScreen ) . go () ; } } }
@ org.junit.Test public void changeAssigneeToSelfOnReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; assign ( sc , sc.owner , sc.assignee ) ; sender . clear () ; assign ( sc , sc.owner , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer , sc.assignee ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) ; }
private void doAssertApproval ( int expected , com.google.gerrit.extensions.common.ChangeInfo c ) { com.google.gerrit.extensions.common.LabelInfo cr = c.labels . get ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( ( ( int ) ( cr.defaultValue ) ) ) . isEqualTo ( ( - NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( cr.all ) . hasSize ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( cr.all . get ( NUMBER_CONSTANT ) . name ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( cr.all . get ( NUMBER_CONSTANT ) . value ) . isEqualTo ( expected ) ; }
@ org.junit.Test public void testAppend_StringBuffer () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( ( ( java.lang.StringBuffer ) ( null ) ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; org.junit.Assert . assertSame ( b , b . append ( new java.lang.StringBuffer ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertSame ( b , b . append ( new java.lang.StringBuffer ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
public < V > void newCallbackMetric ( java.lang.String name , java.lang.Class < V > valueClass , com.google.gerrit.metrics.Description desc , com.google.common.base.Supplier < V > trigger ) { com.google.gerrit.metrics.CallbackMetric0 < V > metric = newCallbackMetric ( name , valueClass , desc ) ; newTrigger ( metric , ( ) - > { metric . set ( trigger . get () ) ; } ) ; }
@ org.junit.Test public void deleteBranchesForbidden ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput () ; input.branches = com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ; setApiUser ( user ) ; try { project () . deleteBranches ( input ) ; fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceConflictException e ) { com.google.common.truth.Truth . assertThat ( e ) . hasMessageThat () . isEqualTo ( errorMessageForBranches ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ) ; } setApiUser ( admin ) ; assertBranches ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; }
private void walk ( final org.eclipse.jgit.revwalk.RevWalk rw , final org.eclipse.jgit.revwalk.RevFlag VISIBLE , final org.eclipse.jgit.revwalk.RevCommit tagged , final java.util.List < org.eclipse.jgit.revwalk.RevCommit > starts ) throws java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { rw . resetRetain ( VISIBLE ) ; for ( org.eclipse.jgit.revwalk.RevCommit o : starts ) { try { rw . markStart ( o ) ; } catch ( java.io.IOException e ) {} } rw . markUninteresting ( tagged ) ; while ( ( rw . next () ) != null ) {} }
@ org.junit.Test public void nullAccountId ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.reviewdb.client.PatchSet.Id psId = r . getPatchSetId () ; com.google.gerrit.reviewdb.client.Change.Id id = psId . getParentKey () ; com.google.gerrit.reviewdb.client.ChangeMessage msg1 = insertMessage ( id , psId , user . getId () , com.google.gerrit.common.TimeUtil . nowTs () , STRING_CONSTANT ) ; insertMessage ( id , psId , null , msg1 . getWrittenOn () , STRING_CONSTANT ) ; checker . rebuildAndCheckChanges ( id ) ; }
private com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken newAccessTokenFromUser ( java.lang.String username ) { com.google.gerrit.server.account.AccountState account = accountCache . getByUsername ( username ) ; java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > externalIds = account . getExternalIds () ; for ( com.google.gerrit.server.account.externalids.ExternalId accountExternalId : externalIds ) { java.lang.String key = accountExternalId . key () . get () ; if ( key . startsWith ( com.googlesource.gerrit.plugins.github.oauth.IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX ) ) { return new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken ( key . substring ( com.googlesource.gerrit.plugins.github.oauth.IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX . length () ) ) ; } } return null ; }
private void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.RevisionInfo revision , com.google.gerrit.extensions.common.AccountInfo reviewer , com.google.gerrit.extensions.common.AccountInfo adder , java.sql.Timestamp when ) { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event ( change , revision , reviewer , adder , when ) ; for ( com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners ) { try { l . onReviewerAdded ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( com.google.gerrit.server.extensions.events.ReviewerAdded.log , e ) ; } } }
public com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Branch.NameKey , com.google.gerrit.server.query.change.ChangeData > changesByBranch ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.Branch.NameKey , com.google.gerrit.server.query.change.ChangeData > ret = com.google.common.collect.ArrayListMultimap . create () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData ) { ret . put ( cd . change () . getDest () , cd ) ; } return ret ; }
private long getEffectiveMaxObjectSizeLimit ( com.google.gerrit.server.project.ProjectState p ) { long global = cfg . getLong ( STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ; long local = p . getMaxObjectSizeLimit () ; if ( ( global > NUMBER_CONSTANT ) && ( local > NUMBER_CONSTANT ) ) { return java.lang.Math . min ( global , local ) ; } return java.lang.Math . max ( global , local ) ; }
@ org.junit.Test public void createNewChangeSignedOffByFooter ( ) throws java.lang.Exception { setSignedOffByFooter ( true ) ; try { com.google.gerrit.extensions.common.ChangeInfo info = assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; java.lang.String message = info.revisions . get ( info.currentRevision ) . commit . message ; com.google.common.truth.Truth . assertThat ( message ) . contains ( java.lang.String . format ( STRING_CONSTANT , org.eclipse.jgit.lib.Constants.SIGNED_OFF_BY_TAG , admin . getIdent () . getEmailAddress () ) ) ; } finally { setSignedOffByFooter ( false ) ; } }
@ org.junit.Test public void testPushForMasterAsDraft ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit.Result r = pushTo ( STRING_CONSTANT ) ; r . assertOkStatus () ; r . assertChange ( Change.Status.DRAFT , null ) ; r = pushTo ( STRING_CONSTANT ) ; r . assertOkStatus () ; r . assertChange ( Change.Status.DRAFT , null ) ; }
@ java.lang.Override public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { init () ; validate ( ctx ) ; patchSetInfo = patchSetInfoFactory . get ( ctx . getRevWalk () , commit , psId ) ; ctx . addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . zeroId () , commit , getPatchSetId () . toRefName () , ReceiveCommand.Type.CREATE ) ) ; }
@ java.lang.Override void onRefReplicatedToOneNode ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status , org.eclipse.jgit.transport.RemoteRefUpdate.Status refStatus ) { com.googlesource.gerrit.plugins.replication.RefReplicatedEvent event = new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent ( project , ref , com.googlesource.gerrit.plugins.replication.PushResultProcessing . resolveNodeName ( uri ) , status , refStatus ) ; postEvent ( project , ref , event ) ; }
private void insertNoneRow ( final int row ) { insertRow ( row ) ; table . setText ( row , NUMBER_CONSTANT , Util.C . changeTableNone () ) ; table . getFlexCellFormatter () . setColSpan ( row , NUMBER_CONSTANT , com.google.gerrit.client.changes.ChangeTable.COLUMNS ) ; setStyleName ( row , NUMBER_CONSTANT , STRING_CONSTANT ) ; }
public void execute ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( migration . failChangeWrites () ) { throw new com.google.gwtorm.server.OrmException ( com.google.gerrit.server.notedb.NoteDbUpdateManager.CHANGES_READ_ONLY ) ; } if ( isEmpty () ) { return; } try ( com.google.gerrit.metrics.Timer1.Context timer = metrics.updateLatency . start ( com.google.gerrit.server.notedb.NoteDbTable.CHANGES ) ) { stage () ; execute ( changeRepo ) ; execute ( allUsersRepo ) ; } finally { close () ; } }
public com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > changesByProject ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > ret = com.google.common.collect.ArrayListMultimap . create () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData . values () ) { ret . put ( cd . change () . getProject () , cd . getId () ) ; } return ret ; }
@ java.lang.Override protected void configure () { if ( ! ( com.google.gerrit.gpg.BouncyCastleUtil . havePGP () ) ) { throw new com.google.inject.ProvisionException ( STRING_CONSTANT ) ; } bind ( com.google.gerrit.gpg.PublicKeyStore . class ) . toProvider ( com.google.gerrit.gpg.SignedPushModule.StoreProvider . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.server.git.ReceivePackInitializer . class ) . to ( com.google.gerrit.gpg.SignedPushModule.Initializer . class ) ; }
public void removeOldEvents ( int maxAge ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds . getConnection () ; java.sql.Statement stat = conn . createStatement () ) { stat . execute ( java.lang.String . format ( STRING_CONSTANT , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY , new java.sql.Timestamp ( ( ( java.lang.System . currentTimeMillis () ) - ( java.util.concurrent.TimeUnit.MILLISECONDS . convert ( maxAge , java.util.concurrent.TimeUnit.DAYS ) ) ) ) ) ) ; } }
@ java.lang.Override protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException , javax.servlet.ServletException { rsp . setContentType ( STRING_CONSTANT ) ; rsp . setCharacterEncoding ( STRING_CONSTANT ) ; try ( java.io.Writer out = rsp . getWriter () ) { out . write ( STRING_CONSTANT ) ; out . write ( STRING_CONSTANT ) ; out . write ( STRING_CONSTANT ) ; out . write ( STRING_CONSTANT ) ; out . write ( STRING_CONSTANT ) ; } }
@ org.junit.Test public void testEndOfString ( ) throws com.google.gwtorm.server.OrmException { org.junit.Assert . assertTrue ( com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; }
@ org.junit.Test public void writeNoChanges ( ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( modifier . createEdit ( change , ps ) ) . isEqualTo ( RefUpdate.Result.NEW ) ; try { modifier . modifyFile ( editUtil . byChange ( change ) . get () , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ; org.junit.Assert . fail () ; } catch ( com.google.gerrit.server.project.InvalidChangeOperationException e ) { com.google.common.truth.Truth . assertThat ( e . getMessage () ) . isEqualTo ( STRING_CONSTANT ) ; } }
protected void bccStarredBy () { try { for ( com.google.gerrit.reviewdb.StarredChange w : args.db . get () . starredChanges () . byChange ( change . getId () ) ) { super . add ( RecipientType.BCC , w . getAccountId () ) ; } } catch ( com.google.gwtorm.client.OrmException err ) {} }
public static void createGroup ( java.lang.String groupName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject . createObject () ; new com.google.gerrit.client.rpc.RestApi ( STRING_CONSTANT ) . id ( groupName ) . ifNoneMatch () . data ( in ) . put ( cb ) ; }
public boolean isDirectChild () { com.google.gerrit.server.project.ProjectState firstParent = com.google.common.collect.Iterables . getFirst ( child . parents () , null ) ; return ( firstParent != null ) && ( parent . getNameKey () . equals ( firstParent . getProject () . getNameKey () ) ) ; }
@ java.lang.Override protected void configure () { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.server.git.validators.CommitValidationListener . class ) . to ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator . class ) ; bind ( com.google.gerrit.server.config.ProjectConfigEntry . class ) . annotatedWith ( com.google.gerrit.extensions.annotations.Exports . named ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.KEY_CHECK_BLOCKED_KEYWORD_PATTERN ) ) . toInstance ( new com.google.gerrit.server.config.ProjectConfigEntry ( STRING_CONSTANT , null , ProjectConfigEntry.Type.ARRAY , null , false , ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; }
@ java.lang.Override public java.lang.String toString () { java.lang.StringBuilder b = new java.lang.StringBuilder () ; b . append ( STRING_CONSTANT ) ; if ( currentUser . getUserName () . isPresent () ) { b . append ( ( ( STRING_CONSTANT + ( currentUser . getUserName () . get () ) ) + STRING_CONSTANT ) ) ; } return b . toString () ; }
protected java.lang.String getChangeUrl () { if ( ( ( change ) != null ) && ( ( getGerritUrl () ) != null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder () ; r . append ( getGerritUrl () ) ; r . append ( change . getChangeId () ) ; return r . toString () ; } return null ; }
private void testGetAccount ( java.lang.String url , com.google.gerrit.acceptance.TestAccount expectedAccount ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession . get ( url ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; com.google.gerrit.acceptance.rest.account.AccountAssert . assertAccountInfo ( expectedAccount , newGson () . fromJson ( r . getReader () , com.google.gerrit.extensions.common.AccountInfo . class ) ) ; }
private void add ( com.google.gerrit.reviewdb.ReviewDb db , java.util.List < com.google.gerrit.sshd.SshKeyCacheEntry > kl , com.google.gerrit.reviewdb.AccountSshKey k ) { try { kl . add ( new com.google.gerrit.sshd.SshKeyCacheEntry ( k . getKey () , k ) ) ; } catch ( java.lang.OutOfMemoryError e ) { throw e ; } catch ( java.lang.Throwable e ) { markInvalid ( db , k ) ; } }
private com.google.inject.Module getIndexModule () { switch ( com.google.gerrit.server.index.IndexModule . getIndexType ( dbInjector ) ) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule . singleVersionWithExplicitVersions ( com.google.common.collect.ImmutableMap . of () , threads , false ) ; case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule . singleVersionWithExplicitVersions ( com.google.common.collect.ImmutableMap . of () , threads , false ) ; default: throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } }
public static void query ( java.lang.String query , java.util.Set < com.google.gerrit.extensions.client.ListChangesOption > options , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeList > callback , int start , int limit ) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeList . newQuery ( query ) ; if ( limit > NUMBER_CONSTANT ) { call . addParameter ( STRING_CONSTANT , limit ) ; } com.google.gerrit.client.changes.ChangeList . addOptions ( call , options ) ; if ( start != NUMBER_CONSTANT ) { call . addParameter ( STRING_CONSTANT , start ) ; } call . get ( callback ) ; }
private boolean isRevisionOutOfDate () { try ( org.eclipse.jgit.lib.Repository git = gitMgr . openRepository ( getNameKey () ) ) { org.eclipse.jgit.lib.Ref ref = git . getRefDatabase () . exactRef ( RefNames.REFS_CONFIG ) ; if ( ( ref == null ) || ( ( ref . getObjectId () ) == null ) ) { return true ; } return ! ( ref . getObjectId () . equals ( config . getRevision () ) ) ; } catch ( java.io.IOException gone ) { return true ; } }
private com.google.gitiles.GitilesView getView ( java.lang.String pathAndQuery ) throws java.io.IOException , javax.servlet.ServletException { java.util.concurrent.atomic.AtomicReference < com.google.gitiles.GitilesView > view = com.google.common.util.concurrent.Atomics . newReference () ; com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse () ; service ( pathAndQuery , view , res ) ; org.junit.Assert . assertTrue ( ( STRING_CONSTANT + ( res . getStatus () ) ) , ( ( ( res . getStatus () ) < NUMBER_CONSTANT ) || ( ( res . getStatus () ) >= NUMBER_CONSTANT ) ) ) ; return view . get () ; }
@ org.junit.Test public void testTagDiv () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . openDiv () ) ; org.junit.Assert . assertSame ( b , b . append ( STRING_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . closeDiv () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
public static com.google.gerrit.extensions.client.GeneralPreferencesInfo defaults () { com.google.gerrit.extensions.client.GeneralPreferencesInfo p = new com.google.gerrit.extensions.client.GeneralPreferencesInfo () ; p.changesPerPage = com.google.gerrit.extensions.client.GeneralPreferencesInfo.DEFAULT_PAGESIZE ; p.showSiteHeader = true ; p.useFlashClipboard = true ; p.emailStrategy = com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ; p.reviewCategoryStrategy = com.google.gerrit.extensions.client.GeneralPreferencesInfo.ReviewCategoryStrategy.NONE ; p.downloadScheme = null ; p.downloadCommand = com.google.gerrit.extensions.client.GeneralPreferencesInfo.DownloadCommand.CHECKOUT ; p.dateFormat = com.google.gerrit.extensions.client.GeneralPreferencesInfo.DateFormat.STD ; p.timeFormat = com.google.gerrit.extensions.client.GeneralPreferencesInfo.TimeFormat.HHMM_12 ; p.expandInlineDiffs = false ; p.highlightAssigneeInChangeTable = true ; p.relativeDateInChangeTable = false ; p.diffView = com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.SIDE_BY_SIDE ; p.sizeBarInChangeTable = true ; p.legacycidInChangeTable = false ; p.muteCommonPathPrefixes = true ; p.signedOffBy = false ; p.defaultBaseForMerges = com.google.gerrit.extensions.client.GeneralPreferencesInfo.DefaultBase.FIRST_PARENT ; return p ; }
private void initAgreements () { grid . addHeader ( new com.google.gerrit.client.ui.SmallHeading ( Util.C . headingAgreements () ) ) ; contributorAgreements = com.google.gerrit.client.admin.ProjectInfoScreen . newInheritedBooleanBox () ; if ( com.google.gerrit.client.Gerrit . info () . auth () . useContributorAgreements () ) { saveEnabler . listenTo ( contributorAgreements ) ; grid . add ( Util.C . useContributorAgreements () , contributorAgreements ) ; } signedOffBy = com.google.gerrit.client.admin.ProjectInfoScreen . newInheritedBooleanBox () ; saveEnabler . listenTo ( signedOffBy ) ; grid . addHtml ( Util.C . useSignedOffBy () , signedOffBy ) ; }
@ org.junit.Test public void testInheritRead_OverrideWithDeny () { com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.REGISTERED , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.REGISTERED , STRING_CONSTANT ) . setDeny () ; com.google.gerrit.server.project.ProjectControl u = util . user ( local ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . isVisible () ) ; }
private java.util.List < com.google.gerrit.server.git.CodeReviewCommit > sort ( java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toSort ) throws com.google.gerrit.server.git.IntegrationException { try { return new com.google.gerrit.server.git.RebaseSorter ( args.rw , args.alreadyAccepted , args.canMergeFlag ) . sort ( toSort ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.git.IntegrationException ( STRING_CONSTANT , e ) ; } }
private void deleteRef ( com.google.gerrit.reviewdb.client.Change change , org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.git.ChainedReceiveCommands cmds ) throws java.io.IOException { java.lang.String refName = com.google.gerrit.server.notedb.ChangeNoteUtil . changeRefName ( change . getId () ) ; org.eclipse.jgit.lib.ObjectId old = cmds . getObjectId ( repo , refName ) ; if ( old != null ) { cmds . add ( new org.eclipse.jgit.transport.ReceiveCommand ( old , org.eclipse.jgit.lib.ObjectId . zeroId () , refName ) ) ; } }
private com.google.gerrit.reviewdb.client.Change updateDraftChange ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return dbProvider . get () . changes () . atomicUpdate ( rsrc . getChange () . getId () , new com.google.gwtorm.server.AtomicUpdate < com.google.gerrit.reviewdb.client.Change > () { @ java.lang.Override public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus () ) == ( Change.Status.DRAFT ) ) { change . setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil . updated ( change ) ; } return change ; } } ) ; }
@ java.lang.Override public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ; com.google.gerrit.httpd.ProjectDigestFilter.Response rsp = new com.google.gerrit.httpd.ProjectDigestFilter.Response ( req , ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) ) ; if ( verify ( req , rsp ) ) { chain . doFilter ( req , rsp ) ; } }
@ org.junit.Test public void createEmptyChange_MissingMessage ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = new com.google.gerrit.extensions.common.ChangeInfo () ; ci.project = project . get () ; ci.branch = STRING_CONSTANT ; com.google.gerrit.acceptance.RestResponse r = adminSession . post ( STRING_CONSTANT , ci ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_BAD_REQUEST ) ; com.google.common.truth.Truth . assertThat ( r . getEntityContent () ) . contains ( STRING_CONSTANT ) ; }
@ org.junit.Test public void setAssigneeOnReviewableChangeByAdminCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; assign ( sc , admin , sc.assignee , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer ) . cc ( admin ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.assignee ) ; }
private com.google.gerrit.server.notedb.ChangeNotes getNotes ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get () . changes () . get ( changeId ) ; if ( c == null ) { throw com.google.gerrit.sshd.commands.PatchSetParser . error ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) ) ; } return notesFactory . create ( db . get () , c ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.Change > allChanges () { try ( com.google.gerrit.reviewdb.server.ReviewDb db = database . open () ) { return db . changes () . all () . toList () ; } catch ( com.google.gwtorm.server.OrmException e ) { stderr . println ( ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; return java.util.Collections . emptyList () ; } }
@ java.lang.Override public void run () { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory . create ( change . getProject () , change . getId () ) ; cm . setFrom ( change . getOwner () ) ; cm . setPatchSet ( patchSet , patchSetInfo ) ; cm . setNotify ( notify ) ; cm . addReviewers ( reviewers ) ; cm . addExtraCC ( extraCC ) ; cm . send () ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.change.ChangeInserter.log . error ( ( STRING_CONSTANT + ( change . getId () ) ) , e ) ; } }
public synchronized void addSecureCredentials ( java.lang.String authUsername , java.lang.String authToken ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { secureConf . load () ; secureConf . setString ( STRING_CONSTANT , authUsername , STRING_CONSTANT , authUsername ) ; secureConf . setString ( STRING_CONSTANT , authUsername , STRING_CONSTANT , authToken ) ; secureConf . save () ; }
private java.util.List < > buildTagsSoyData ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo . getRepository () ) ) { return com.google.gitiles.RefServlet . getTagsSoyData ( buildSoyRequest () , new com.google.gitiles.TimeCache ( com.google.gitiles.TimeCache . defaultBuilder () ) , rw , java.lang.Integer.MAX_VALUE ) ; } }
@ java.lang.Override public java.lang.Object apply ( com.google.gerrit.extensions.restapi.TopLevelResource resource ) { if ( ( format ) == ( com.google.gerrit.server.OutputFormat.TEXT ) ) { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream () ; display ( buf ) ; return com.google.gerrit.extensions.restapi.BinaryResult . create ( buf . toByteArray () ) . setContentType ( STRING_CONSTANT ) . setCharacterEncoding ( STRING_CONSTANT ) ; } return apply () ; }
@ java.lang.Override public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource root , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Change > changes = findChanges ( id . encoded () ) ; if ( ( changes . size () ) != NUMBER_CONSTANT ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } com.google.gerrit.server.project.ChangeControl control ; try { control = changeControlFactory . validateFor ( changes . get ( NUMBER_CONSTANT ) , user . get () ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.change.ChangeResource ( control ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > getAll () { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > all = new java.util.HashSet ( ( ( reviewers . size () ) + ( cc . size () ) ) ) ; all . addAll ( reviewers ) ; all . addAll ( cc ) ; return java.util.Collections . unmodifiableSet ( all ) ; }
private com.google.gerrit.reviewdb.client.Change insertChange ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges . newChange ( project , adminId ) ; db . changes () . insert ( java.util.Collections . singleton ( c ) ) ; com.google.gerrit.server.notedb.ChangeUpdate u = changeUpdateFactory . create ( changeControlFactory . controlFor ( c , userFactory . create ( adminId ) ) ) ; u . setBranch ( c . getDest () . get () ) ; u . commit () ; return c ; }
@ org.junit.Test public void getDetail ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession . get ( ( ( STRING_CONSTANT + ( admin.username ) ) + STRING_CONSTANT ) ) ; com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson () . fromJson ( r . getReader () , com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo . class ) ; com.google.gerrit.acceptance.rest.account.AccountAssert . assertAccountInfo ( admin , info ) ; com.google.gerrit.reviewdb.client.Account account = getAccount ( admin . getId () ) ; com.google.common.truth.Truth . assertThat ( info.registeredOn ) . isEqualTo ( account . getRegisteredOn () ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onCursoBlinkRate ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > e ) { java.lang.String v = e . getValue () ; if ( ( v != null ) && ( ( v . length () ) > NUMBER_CONSTANT ) ) { prefs . cursorBlinkRate ( java.lang.Math . max ( NUMBER_CONSTANT , java.lang.Integer . parseInt ( v ) ) ) ; if ( ( view ) != null ) { view . getEditor () . setOption ( STRING_CONSTANT , prefs . cursorBlinkRate () ) ; } } }
private void deleteProject ( org.eclipse.jgit.transport.URIish replicateURI ) { if ( ! ( replicateURI . isRemote () ) ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue . deleteLocally ( replicateURI ) ; com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . info ( ( STRING_CONSTANT + replicateURI ) ) ; } else if ( com.googlesource.gerrit.plugins.replication.ReplicationQueue . isSSH ( replicateURI ) ) { deleteRemoteSsh ( replicateURI ) ; com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . info ( ( STRING_CONSTANT + replicateURI ) ) ; } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . warn ( java.lang.String . format ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , replicateURI ) ) ; } }
@ java.lang.Override public void configure () { install ( dbInjector . getInstance ( com.google.gerrit.pgm.util.BatchProgramModule . class ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.extensions.events.GitReferenceUpdatedListener . class ) . to ( com.google.gerrit.server.index.change.ReindexAfterUpdate . class ) ; install ( new com.google.gerrit.server.index.DummyIndexModule () ) ; factory ( ChangeResource.Factory . class ) ; }
@ java.lang.Override public int weigh ( com.google.gerrit.server.patch.PatchListKey key , com.google.gerrit.server.patch.PatchList value ) { int size = ( ( ( ( ( ( NUMBER_CONSTANT + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + NUMBER_CONSTANT ) + NUMBER_CONSTANT ) + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + NUMBER_CONSTANT ; for ( com.google.gerrit.server.patch.PatchListEntry e : value . getPatches () ) { size += e . weigh () ; } return size ; }
@ org.junit.Before public void setUpInjector ( ) throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager () ; com.google.inject.Injector injector = com.google.gerrit.testutil.InMemoryModule . createInjector ( lifecycle ) ; injector . injectMembers ( this ) ; lifecycle . start () ; db = schemaFactory . open () ; schemaCreator . create ( db ) ; userId = accountManager . authenticate ( com.google.gerrit.server.account.AuthRequest . forUser ( STRING_CONSTANT ) ) . getAccountId () ; user = userFactory . create ( userId ) ; configureProject () ; setUpChange () ; }
@ java.lang.Override public java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > onCommitReceived ( com.google.gerrit.server.events.CommitReceivedEvent receiveEvent ) throws com.google.gerrit.server.git.validators.CommitValidationException { if ( itsConfig . isEnabled ( receiveEvent . getProjectNameKey () , receiveEvent . getRefName () ) ) { return validCommit ( receiveEvent.commit ) ; } return java.util.Collections . emptyList () ; }
private org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Set < java.io.File > files = new java.util.HashSet <> () ; files . add ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . createEmptyFile ( com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG , repo ) ) ; files . add ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . createEmptyFile ( com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.GOOD , repo ) ) ; return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . makeCommit ( rw , repo , STRING_CONSTANT , files ) ; }
void display ( final com.google.gerrit.common.data.ProjectDetail result ) { project = result.project ; descTxt . setText ( project . getDescription () ) ; setBool ( contributorAgreements , result.useContributorAgreements ) ; setBool ( signedOffBy , result.useSignedOffBy ) ; setBool ( contentMerge , result.useContentMerge ) ; setBool ( requireChangeID , result.requireChangeID ) ; setSubmitType ( project . getSubmitType () ) ; setState ( project . getState () ) ; saveProject . setEnabled ( false ) ; }
private void appendImageDifferences ( final com.google.gerrit.common.data.PatchScript script , final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder nc ) { final boolean syntaxHighlighting = script . getDiffPrefs () . syntaxHighlighting ; if ( ( script . getDisplayMethodA () ) == ( com.google.gerrit.common.data.PatchScript.DisplayMethod.IMG ) ) { final java.lang.String url = getUrlA () ; appendImageLine ( nc , url , syntaxHighlighting , false ) ; } if ( ( script . getDisplayMethodB () ) == ( com.google.gerrit.common.data.PatchScript.DisplayMethod.IMG ) ) { final java.lang.String url = getUrlB () ; appendImageLine ( nc , url , syntaxHighlighting , true ) ; } }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { if ( e == null ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err ) ; } else { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err , e ) ; } return com.google.gerrit.server.project.SubmitRuleEvaluator . defaultRuleError () ; } return com.google.gerrit.server.project.SubmitRuleEvaluator . createRuleError ( err ) ; }
@ org.junit.Test public void testBulletList5 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . html ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( STRING_CONSTANT + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.BEGIN_LIST ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.END_LIST ) ) , n . asString () ) ; }
private void addDiffChunkAndPadding ( net.codemirror.lib.CodeMirror cmToPad , int lineToPad , int lineOnOther , int chunkSize , boolean edit ) { net.codemirror.lib.CodeMirror otherCm = otherCm ( cmToPad ) ; linePaddingOnOtherSideMap . put ( otherCm . getLineHandle ( lineOnOther ) , new com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper ( addPaddingWidget ( cmToPad , DiffTable.style . padding () , lineToPad , NUMBER_CONSTANT , Unit.EM , null ) , lineToPad , chunkSize ) ) ; diffChunks . add ( new com.google.gerrit.client.diff.SideBySide2.DiffChunkInfo ( getSideFromCm ( otherCm ) , ( ( lineOnOther - chunkSize ) + NUMBER_CONSTANT ) , lineOnOther , edit ) ) ; }
@ java.lang.Override public int run ( ) throws java.lang.Exception { final com.google.inject.Injector injector = com.google.inject.Guice . createInjector ( com.google.inject.Stage.PRODUCTION , new com.google.gerrit.server.config.DatabaseModule () , new com.google.gerrit.server.config.GerritGlobalModule () , new com.google.gerrit.server.ssh.SshModule () ) ; injector . getInstance ( com.google.gerrit.server.ssh.SshDaemon . class ) . start () ; return never () ; }
private void assertSubmitApproval ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSetApproval a = getSubmitter ( patchSetId ) ; org.junit.Assert . assertTrue ( a . isSubmit () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , a . getValue () ) ; org.junit.Assert . assertEquals ( admin.id , a . getAccountId () ) ; }
@ org.junit.Test public void testNameValue () { final java.lang.String name = STRING_CONSTANT ; final java.lang.String value = STRING_CONSTANT ; final com.google.gerrit.server.query.OperatorPredicate < java.lang.String > f = com.google.gerrit.server.query.FieldPredicateTest . f ( name , value ) ; org.junit.Assert . assertSame ( name , f . getOperator () ) ; org.junit.Assert . assertSame ( value , f . getValue () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , f . getChildren () . size () ) ; }
void add () { java.util.List < java.lang.String > values = new java.util.ArrayList <> () ; for ( com.google.gwtexpui.globalkey.client.NpTextBox input : inputs ) { java.lang.String v = input . getValue () . trim () ; if ( ! ( v . isEmpty () ) ) { input . setValue ( STRING_CONSTANT ) ; values . add ( v ) ; } } insert ( values ) ; }
@ org.junit.Test public void submitOnPushMergeConflict ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId objectId = repo () . getRef ( STRING_CONSTANT ) . getObjectId () ; push ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; testRepo . reset ( objectId ) ; grant ( Permission.SUBMIT , project , STRING_CONSTANT ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = push ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; r . assertOkStatus () ; r . assertChange ( Change.Status.NEW , null , admin ) ; r . assertMessage ( CommitMergeStatus.PATH_CONFLICT . getMessage () ) ; }
void onOpenForm () { com.google.gwt.user.client.ui.UIObject . setVisible ( form , true ) ; com.google.gwt.user.client.ui.UIObject . setVisible ( show , false ) ; com.google.gwt.user.client.ui.UIObject . setVisible ( error , false ) ; editAssigneeIcon . setVisible ( false ) ; suggestBox . setFocus ( true ) ; if ( ( currentAssignee ) != null ) { suggestBox . setText ( com.google.gerrit.client.FormatUtil . nameEmail ( currentAssignee ) ) ; suggestBox . selectAll () ; } }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( o == null ) || ( ! ( o instanceof com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen.ReviewerEntry ) ) ) { return false ; } com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen.ReviewerEntry other = ( ( com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen.ReviewerEntry ) ( o ) ) ; if ( ( ! ( this . filter . equals ( other.filter ) ) ) || ( ! ( this . reviewer . equals ( other.reviewer ) ) ) ) { return false ; } return true ; }
private java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted ( org.eclipse.jgit.revwalk.RevWalk rw , java.lang.Iterable < org.eclipse.jgit.lib.Ref > refs ) throws java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { java.util.Set < org.eclipse.jgit.revwalk.RevCommit > accepted = com.google.common.collect.Sets . newHashSet () ; for ( org.eclipse.jgit.lib.Ref r : refs ) { try { accepted . add ( rw . parseCommit ( r . getObjectId () ) ) ; } catch ( org.eclipse.jgit.errors.IncorrectObjectTypeException nonCommit ) {} } return accepted ; }
private com.google.gerrit.server.query.change.ChangeData changeData () { if ( ( cd ) == null ) { com.google.gerrit.reviewdb.server.ReviewDb reviewDb = db () ; com.google.common.base.Preconditions . checkState ( ( reviewDb != null ) , STRING_CONSTANT ) ; cd = changeDataFactory . create ( reviewDb , notes ) ; } return cd ; }
@ java.lang.Override public boolean equals ( final java.lang.Object obj ) { if ( ( ! ( super . equals ( obj ) ) ) || ( ! ( obj instanceof com.google.gerrit.common.data.AccessSection ) ) ) { return false ; } return new java.util.HashSet ( getPermissions () ) . equals ( new java.util.HashSet ( ( ( com.google.gerrit.common.data.AccessSection ) ( obj ) ) . getPermissions () ) ) ; }
@ org.junit.Test public void addHashtagWithPermissionAllowed ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; grant ( project , STRING_CONSTANT , Permission.EDIT_HASHTAGS , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; addHashtags ( r , STRING_CONSTANT ) ; assertThatGet ( r ) . containsExactly ( STRING_CONSTANT ) ; assertMessage ( r , STRING_CONSTANT ) ; }
public boolean matches ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { if ( projectPatterns . isEmpty () ) { return true ; } java.lang.String projectName = name . get () ; for ( java.lang.String pattern : projectPatterns ) { if ( matchesPattern ( projectName , pattern ) ) { return true ; } } return false ; }
private void validateCanReadCommit ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.project.ProjectControl projectControl , org.eclipse.jgit.lib.ObjectId revId ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( revId ) ; if ( ! ( projectControl . canReadCommit ( db . get () , rw , commit ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } } }
public void update ( ) throws com.google.gerrit.server.git.SubmoduleException { try { schema = schemaFactory . open () ; updateSubmoduleSubscriptions () ; updateSuperProjects ( destBranch , rw , mergeTip . getId () . toObjectId () , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.server.git.SubmoduleException ( STRING_CONSTANT , e ) ; } finally { if ( ( schema ) != null ) { schema . close () ; schema = null ; } } }
@ java.lang.Override protected void setUpEnvironment ( com.google.gerrit.rules.PrologEnvironment env ) { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change.Key ( STRING_CONSTANT ) , new com.google.gerrit.reviewdb.client.Change.Id ( NUMBER_CONSTANT ) , new com.google.gerrit.reviewdb.client.Account.Id ( NUMBER_CONSTANT ) , new com.google.gerrit.reviewdb.client.Branch.NameKey ( localKey , STRING_CONSTANT ) , com.google.gerrit.server.util.TimeUtil . nowTs () ) ; env . set ( StoredValues.CHANGE_CONTROL , util . user ( local ) . controlFor ( change ) ) ; }
private < T extends com.google.gwt.core.client.JavaScriptObject > void sendRaw ( com.google.gwt.http.client.RequestBuilder.Method method , java.lang.String body , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { com.google.gerrit.client.rpc.RestApi.HttpCallback < T > httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback ( background , cb ) ; try { if ( ! ( background ) ) { RpcStatus.INSTANCE . onRpcStart () ; } com.google.gwt.http.client.RequestBuilder req = request ( method ) ; req . setHeader ( STRING_CONSTANT , com.google.gerrit.client.rpc.RestApi.TEXT_TYPE ) ; req . sendRequest ( body , httpCallback ) ; } catch ( com.google.gwt.http.client.RequestException e ) { httpCallback . onError ( null , e ) ; } }
@ org.junit.Test public void testCreateSchema_LabelTypes ( ) throws java.lang.Exception { java.util.List < java.lang.String > labels = com.google.common.collect.Lists . newArrayList () ; for ( com.google.gerrit.common.data.LabelType label : getLabelTypes () . getLabelTypes () ) { labels . add ( label . getName () ) ; } org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) , labels ) ; }
@ org.junit.Test public void testIndexAndNonIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; org.junit.Assert . assertSame ( com.google.gerrit.server.query.change.AndSource . class , out . getClass () ) ; org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableList . of ( query ( com.google.gerrit.server.query.Predicate . and ( in . getChild ( NUMBER_CONSTANT ) , in . getChild ( NUMBER_CONSTANT ) ) ) , in . getChild ( NUMBER_CONSTANT ) ) , out . getChildren () ) ; }
private static org.eclipse.jgit.lib.ObjectId resolveRevision ( org.eclipse.jgit.lib.Repository repo , java.lang.String revision ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { if ( revision == null ) { return null ; } org.eclipse.jgit.lib.ObjectId revId = repo . resolve ( revision ) ; if ( revId == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } return revId ; }
private com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes () . get ( patchSetId . getParentKey () ) ; com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory . create ( db , c ) . load () ; return approvalsUtil . getSubmitter ( db , notes , patchSetId ) ; }
@ org.junit.Test public void uploadPackSubsetOfBranchesVisibleIncludingHead ( ) throws java.lang.Exception { allow ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; deny ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; assertUploadPackRefs ( STRING_CONSTANT , ( ( r1 ) + STRING_CONSTANT ) , ( ( r1 ) + STRING_CONSTANT ) , ( ( r3 ) + STRING_CONSTANT ) , ( ( r3 ) + STRING_CONSTANT ) , STRING_CONSTANT , STRING_CONSTANT ) ; }
@ org.junit.Test public void testOwnerProject () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl uBlah = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl uAdmin = util . user ( local , com.google.gerrit.server.project.Util.DEVS , com.google.gerrit.server.project.Util.ADMIN ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , uBlah . isOwner () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , uAdmin . isOwner () ) ; }
@ org.junit.Test public void queryChangesNoResults ( ) throws java.lang.Exception { createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , results . size () ) ; results = query ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( results . isEmpty () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private com.google.gerrit.server.query.Predicate < T > operator ( final java.lang.String name , final java.lang.String value ) throws com.google.gerrit.server.query.QueryParseException { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gerrit.server.query.QueryBuilder.OperatorFactory f = opFactories . get ( name ) ; if ( f == null ) { throw com.google.gerrit.server.query.QueryBuilder . error ( ( ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) + value ) ) ; } return f . create ( this , value ) ; }
protected void assertNoSubmitter ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = com.google.common.collect.Iterables . getOnlyElement ( queryProvider . get () . byKeyPrefix ( changeId ) ) . change () ; com.google.gerrit.server.notedb.ChangeNotes cn = notesFactory . create ( db , c . getProject () , c . getId () ) ; com.google.gerrit.reviewdb.client.PatchSetApproval submitter = approvalsUtil . getSubmitter ( db , cn , new com.google.gerrit.reviewdb.client.PatchSet.Id ( cn . getChangeId () , psId ) ) ; com.google.common.truth.Truth . assertThat ( submitter ) . isNull () ; }
@ java.lang.Override public void onShowView () { super . onShowView () ; commit . onShowView () ; related . setMaxHeight ( commit . getElement () . getParentElement () . getOffsetHeight () ) ; if ( openReplyBox ) { onReply () ; } else { java.lang.String prior = com.google.gerrit.client.Gerrit . getPriorView () ; if ( ( prior != null ) && ( prior . startsWith ( STRING_CONSTANT ) ) ) { scrollToPath ( prior . substring ( NUMBER_CONSTANT ) ) ; } } startPoller () ; }
public boolean canReadCommit ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.lib.Repository repo = openRepository () ) { return isMergedIntoVisibleRef ( repo , db , rw , commit , repo . getAllRefs () . values () ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String . format ( STRING_CONSTANT , commit . name () , getProject () . getNameKey () ) ; com.google.gerrit.server.project.ProjectControl.log . error ( msg , e ) ; return false ; } }
public static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ; cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { sessionOwner = new com.google.gerrit.acceptance.RestSession ( server , user ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , user ) ; com.google.gerrit.acceptance.GitUtil . initSsh ( user ) ; sshSession . open () ; setRepo ( com.google.gerrit.acceptance.GitUtil . cloneProject ( project , sshSession ) ) ; sshSession . close () ; user2 = accounts . user2 () ; sessionDev = new com.google.gerrit.acceptance.RestSession ( server , user2 ) ; }
protected void renderTextError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String message ) throws java.io.IOException { res . setStatus ( statusCode ) ; setApiHeaders ( res , com.google.gitiles.FormatType.TEXT ) ; setCacheHeaders ( res ) ; java.io.PrintWriter out = res . getWriter () ; out . write ( message ) ; out . close () ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onWhitespaceErrors ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs . showWhitespaceErrors ( e . getValue () ) ; if ( ( view ) != null ) { view . operation ( new java.lang.Runnable () { @ java.lang.Override public void run () { boolean s = prefs . showWhitespaceErrors () ; view . getCmFromSide ( DisplaySide.A ) . setOption ( STRING_CONSTANT , s ) ; view . getCmFromSide ( DisplaySide.B ) . setOption ( STRING_CONSTANT , s ) ; } } ) ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { final java.util.Properties p = new java.util.Properties () ; p . setProperty ( STRING_CONSTANT , org.h2.Driver . class . getName () ) ; p . setProperty ( STRING_CONSTANT , ( STRING_CONSTANT + ( ( com.google.gwtorm.server.PhoneBookDbTestCase.runCount ) ++ ) ) ) ; db = new com.google.gwtorm.jdbc.Database < com.google.gwtorm.data.PhoneBookDb > ( new com.google.gwtorm.jdbc.SimpleDataSource ( p ) , com.google.gwtorm.data.PhoneBookDb . class ) ; openSchemas = new java.util.ArrayList < com.google.gwtorm.data.PhoneBookDb > () ; }
@ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.GpgKeyInfo > listGpgKeys ( com.google.gerrit.server.account.AccountResource account ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.GpgException { try { return gpgKeys . get () . list () . apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException | org.bouncycastle.openpgp.PGPException | java.io.IOException e ) { throw new com.google.gerrit.server.GpgException ( e ) ; } }
@ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { for ( com.google.gerrit.reviewdb.Patch p : detail . getPatches () ) { com.google.gerrit.client.ui.PatchLink.SideBySide link = new com.google.gerrit.client.ui.PatchLink.SideBySide ( p . getFileName () , p . getKey () , NUMBER_CONSTANT , null , null ) ; com.google.gwt.user.client.Window . open ( link . getElement () . toString () , p . getFileName () , null ) ; } }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ) ; servlet = new com.google.gitiles.RepositoryIndexServlet ( new com.google.gitiles.TestGitilesAccess ( repo . getRepository () ) , new com.google.gitiles.DefaultRenderer () , new com.google.gitiles.TimeCache () ) ; }
@ org.junit.Test public void deleteBranchByProjectOwnerForcePushBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner () ; blockForcePush () ; com.google.gerrit.acceptance.RestResponse r = userSession . delete ( ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) + ( branch . getShortName () ) ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; r . consume () ; }
@ org.junit.Test public void revisionActionsOneChangePerTopicUnapproved ( ) throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic () . getChangeId () ; java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ActionInfo > actions = getActions ( changeId ) ; com.google.common.truth.Truth . assertThat ( actions ) . containsKey ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( actions ) . containsKey ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( actions ) . hasSize ( NUMBER_CONSTANT ) ; }
@ org.junit.Test public void cannotGetDashboardWithInheritedForNonDefault ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DashboardInfo info = createDashboard ( DashboardsCollection.DEFAULT_DASHBOARD_NAME , STRING_CONSTANT ) ; exception . expect ( com.google.gerrit.extensions.restapi.BadRequestException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; project () . dashboard ( info.id ) . get ( true ) ; }
public com.google.gerrit.server.project.ChangeControl changeControl ( com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException { if ( ( changeControl ) != null ) { throw new java.lang.IllegalStateException ( ( STRING_CONSTANT + ( changeControl . getUser () ) ) ) ; } try { if ( ( change ) != null ) { changeControl = changeControlFactory . controlFor ( change , user ) ; } else { changeControl = changeControlFactory . controlFor ( project , legacyId , user ) ; } } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return changeControl ; }
public void load ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { this . reader = walk . getObjectReader () ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; onLoad () ; } finally { reader = null ; } }
private static void updateHeadLocally ( org.eclipse.jgit.transport.URIish uri , java.lang.String newHead ) { try ( org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository ( uri . getPath () ) ) { if ( newHead != null ) { org.eclipse.jgit.lib.RefUpdate u = repo . updateRef ( Constants.HEAD ) ; u . link ( newHead ) ; } } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . error ( java.lang.String . format ( STRING_CONSTANT , uri . getPath () , newHead ) , e ) ; } }
@ java.lang.Override public void resetHtml ( final com.google.gwt.user.client.ui.FlexTable myTable , final com.google.gwtexpui.safehtml.client.SafeHtml bodyHtml ) { final com.google.gwt.user.client.Element oldBody = getBodyElement ( myTable ) ; final com.google.gwt.user.client.Element newBody = com.google.gerrit.client.ui.FancyFlexTableImplIE6 . parseBody ( bodyHtml ) ; assert newBody != null ; final com.google.gwt.user.client.Element tableElem = com.google.gwt.user.client.DOM . getParent ( oldBody ) ; tableElem . removeChild ( oldBody ) ; com.google.gerrit.client.ui.FancyFlexTableImplIE6 . setBodyElement ( myTable , newBody ) ; com.google.gwt.user.client.DOM . appendChild ( tableElem , newBody ) ; }
public java.lang.String getString ( java.lang.String name , java.lang.String defaultValue ) { if ( defaultValue == null ) { return cfg . getString ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName , name ) ; } return com.google.common.base.MoreObjects . firstNonNull ( cfg . getString ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName , name ) , defaultValue ) ; }
public void populate ( com.google.gerrit.reviewdb.client.Patch.Key pk , com.google.gerrit.client.changes.PatchTable pt , int patchIndex ) { patchKey = pk ; fileList = pt ; reviewedLink = createReviewedLink ( patchIndex ) ; top . clear () ; checkBoxTop = createReviewedCheckbox () ; top . add ( checkBoxTop ) ; top . add ( createReviewedAnchor () ) ; bottom . clear () ; checkBoxBottom = createReviewedCheckbox () ; bottom . add ( checkBoxBottom ) ; bottom . add ( createReviewedAnchor () ) ; }
@ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.GpgKeyInfo > putGpgKeys ( com.google.gerrit.server.account.AccountResource account , java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input () ; in.add = add ; in.delete = delete ; try { return postGpgKeys . get () . apply ( account , in ) ; } catch ( org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.server.GpgException ( e ) ; } }
@ org.junit.Test public void treeAndBlobTime ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevBlob blob = repo . blob ( STRING_CONSTANT ) ; org.eclipse.jgit.revwalk.RevTree tree = repo . tree ( repo . file ( STRING_CONSTANT , blob ) ) ; com.google.common.truth.Truth . assertThat ( getTime ( blob ) ) . isEqualTo ( java.lang.Long.MIN_VALUE ) ; com.google.common.truth.Truth . assertThat ( getTime ( tree ) ) . isEqualTo ( java.lang.Long.MIN_VALUE ) ; }
protected TestRepository < > . CommitBuilder amendBuilder ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId head = repo () . getRef ( STRING_CONSTANT ) . getObjectId () ; TestRepository < > . CommitBuilder b = testRepo . amendRef ( STRING_CONSTANT ) ; com.google.common.base.Optional < java.lang.String > id = com.google.gerrit.acceptance.GitUtil . getChangeId ( testRepo , head ) ; if ( id . isPresent () ) { b . insertChangeId ( id . get () . substring ( NUMBER_CONSTANT ) ) ; } else { b . insertChangeId () ; } return b ; }
private void addProperty ( com.google.gson.JsonObject obj , java.lang.String key , java.util.List < java.lang.String > values ) { if ( ! ( values . isEmpty () ) ) { com.google.gson.JsonArray list = new com.google.gson.JsonArray () ; for ( java.lang.String v : values ) { list . add ( new com.google.gson.JsonPrimitive ( v ) ) ; } obj . add ( key , list ) ; } }
public boolean isVisible () { return ( ( ( ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( groupBackend . isVisibleToAll ( group . getGroupUUID () ) ) ) || ( user . getCapabilities () . canAdministrateServer () ) ) || ( isOwner () ) ) || ( user . memberOf ( group . getGroupUUID () ) ) ; }
@ java.lang.Override protected void preInvoke ( final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call ) { super . preInvoke ( call ) ; if ( call . isComplete () ) { return; } if ( ( call . getMethod () . getAnnotation ( com.google.gerrit.common.auth.SignInRequired . class ) ) != null ) { if ( ( ! ( call . requireXsrfValid () ) ) || ( ! ( session . get () . isSignedIn () ) ) ) { call . onFailure ( new com.google.gerrit.common.errors.NotSignedInException () ) ; } } }
private static java.lang.String url ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id ps , com.google.gerrit.client.changes.CommentInfo info ) { return com.google.gerrit.client.Dispatcher . toPatch ( project , null , ps , info . path () , ( ( info . side () ) == ( com.google.gerrit.extensions.client.Side.PARENT ) ? com.google.gerrit.client.diff.DisplaySide.A : com.google.gerrit.client.diff.DisplaySide.B ) , info . line () ) ; }
@ org.junit.Test public void noChangeMessage ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; update . putReviewer ( changeOwner . getAccount () . getId () , com.google.gerrit.server.notedb.ReviewerState.REVIEWER ) ; update . commit () ; com.google.gerrit.server.notedb.ChangeNotes notes = newNotes ( c ) ; com.google.common.truth.Truth . assertThat ( notes . getChangeMessages () ) . isEmpty () ; }
private boolean isDirty () { java.lang.String msg = editArea . getValue () . trim () ; if ( isNew () ) { return ( msg . length () ) > NUMBER_CONSTANT ; } return ! ( msg . equals ( ( ( comment . message () ) != null ? comment . message () . trim () : STRING_CONSTANT ) ) ) ; }
private java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > getOwnersFromEmails ( java.util.Set < java.lang.String > emails ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > result = new java.util.HashSet < com.google.gerrit.reviewdb.client.Account.Id > () ; for ( java.lang.String email : emails ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > ids = resolver . findAll ( db , email ) ; result . addAll ( ids ) ; } return result ; }
private static void publish ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { java.lang.String token = com.google.gerrit.client.Dispatcher . toPublish ( ps ) ; new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { public void onSuccess () { com.google.gerrit.client.Gerrit . display ( token , select () ) ; } private com.google.gerrit.client.ui.Screen select () { return new com.google.gerrit.client.changes.PublishCommentScreen ( ps ) ; } } . onSuccess () ; }
public void setCfgInjector ( com.google.inject.Injector cfgInjector ) { final com.google.inject.Module cm = copy ( cfgInjector ) ; final com.google.inject.Module sm = copy ( sysInjector ) ; sysModule = new com.google.inject.AbstractModule () { @ java.lang.Override protected void configure () { install ( copyConfigModule ) ; install ( cm ) ; install ( sm ) ; } } ; }
@ java.lang.Override public boolean accept ( java.io.File pathname ) { java.lang.String n = pathname . getName () ; return ( ( ( n . endsWith ( STRING_CONSTANT ) ) || ( n . endsWith ( STRING_CONSTANT ) ) ) && ( pathname . isFile () ) ) && ( n . contains ( STRING_CONSTANT ) ) ; }
public com.google.gerrit.extensions.common.AccountInfo accountInfo ( com.google.gerrit.reviewdb.client.Account a ) { if ( ( a == null ) || ( ( a . getId () ) == null ) ) { return null ; } com.google.gerrit.extensions.common.AccountInfo ai = new com.google.gerrit.extensions.common.AccountInfo ( a . getId () . get () ) ; ai.email = a . getPreferredEmail () ; ai.name = a . getFullName () ; ai.username = a . getUserName () ; return ai ; }
@ java.lang.Deprecated private void appendFileLine ( java.lang.StringBuilder cmts , com.google.gerrit.server.patch.PatchFile fileData , short side , int line ) { java.lang.String lineStr = getLine ( fileData , side , line ) ; cmts . append ( STRING_CONSTANT ) . append ( line ) . append ( STRING_CONSTANT ) . append ( lineStr ) . append ( STRING_CONSTANT ) ; }
private boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectState pe = projectCache . get ( change . getProject () ) ; if ( pe == null ) { return false ; } com.google.gerrit.server.project.ProjectControl pc = pe . controlFor ( user ) ; return pc . controlFor ( change ) . isVisible ( db ) ; }
@ org.junit.Test public void testCreateProjectApi ( ) throws java.lang.Exception { final java.lang.String newProjectName = STRING_CONSTANT ; com.google.gerrit.extensions.common.ProjectInfo p = gApi . projects () . create ( newProjectName ) . get () ; com.google.common.truth.Truth . assertThat ( p.name ) . isEqualTo ( newProjectName ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( newProjectName ) ) ; com.google.common.truth.Truth . assertThat ( projectState ) . isNotNull () ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjectInfo ( projectState . getProject () , p ) ; assertHead ( newProjectName , STRING_CONSTANT ) ; }
@ java.lang.Override public void starChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.change.ChangeResource rsrc = changes . parse ( TopLevelResource.INSTANCE , com.google.gerrit.extensions.restapi.IdString . fromUrl ( id ) ) ; starredChangesCreate . setChange ( rsrc ) ; starredChangesCreate . apply ( account , new com.google.gerrit.server.account.StarredChanges.EmptyInput () ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public java.lang.String get () { java.lang.String canonicalUrl = super . get () ; if ( canonicalUrl != null ) { return canonicalUrl ; } if ( ( requestProvider ) != null ) { final javax.servlet.http.HttpServletRequest req ; try { req = requestProvider . get () ; } catch ( com.google.inject.ProvisionException noWeb ) { if ( ( noWeb . getCause () ) instanceof com.google.inject.OutOfScopeException ) { return null ; } throw noWeb ; } return com.google.gerrit.httpd.CanonicalWebUrl . computeFromRequest ( req ) ; } return null ; }
public com.google.common.util.concurrent.CheckedFuture < , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.Collection < com.google.gerrit.reviewdb.client.Change.Id > ids ) { java.util.List < com.google.common.util.concurrent.ListenableFuture < > > futures = new java.util.ArrayList ( ids . size () ) ; for ( com.google.gerrit.reviewdb.client.Change.Id id : ids ) { futures . add ( indexAsync ( project , id ) ) ; } return com.google.gerrit.server.index.ChangeIndexer . allAsList ( futures ) ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.Put.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException { try { editModifier . modifyFile ( rsrc . getChangeEdit () , rsrc . getPath () , input.content ) ; } catch ( com.google.gerrit.server.project.InvalidChangeOperationException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e . getMessage () ) ; } return com.google.gerrit.extensions.restapi.Response . none () ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git , java.lang.String subject , java.lang.String fileName , java.lang.String content , java.lang.String topic ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , subject , fileName , content ) ; return push . to ( ( STRING_CONSTANT + topic ) ) ; }
private static final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter ( com.google.common.base.Optional < com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit > limit ) { return new com.googlesource.gerrit.plugins.quota.Module.Holder ( com.googlesource.gerrit.plugins.quota.RateLimitUploadListener . createSmoothBurstyRateLimiter ( limit . get () . getRatePerSecond () , limit . get () . getMaxBurstSeconds () ) , ( ( int ) ( ( limit . get () . getMaxBurstSeconds () ) * ( limit . get () . getRatePerSecond () ) ) ) ) ; }
@ java.lang.Override public void name ( java.lang.String name ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.group.PutName.Input in = new com.google.gerrit.server.group.PutName.Input () ; in.name = name ; try { putName . apply ( rsrc , in ) ; } catch ( com.google.gerrit.common.errors.NoSuchGroupException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( name , e ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private com.google.inject.Injector createSshInjector () { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList <> () ; modules . add ( sysInjector . getInstance ( com.google.gerrit.sshd.SshModule . class ) ) ; if ( ! ( test ) ) { modules . add ( new com.google.gerrit.sshd.SshHostKeyModule () ) ; } modules . add ( new com.google.gerrit.sshd.commands.DefaultCommandModule ( slave , sysInjector . getInstance ( com.google.gerrit.server.config.DownloadConfig . class ) , sysInjector . getInstance ( com.google.inject.Module . class ) ) ) ; if ( ! ( slave ) ) { modules . add ( new com.google.gerrit.sshd.commands.IndexCommandsModule ( sysInjector ) ) ; } return sysInjector . createChildInjector ( modules ) ; }
private int colorLines ( net.codemirror.lib.CodeMirror cm , int line , int cnt ) { for ( int i = NUMBER_CONSTANT ; i < cnt ; i ++ ) { cm . addLineClass ( ( line + i ) , LineClassWhere.WRAP , diffTable.style . diff () ) ; } return line + cnt ; }
private java.util.List < java.lang.String > getLinesOfComment ( com.google.gerrit.reviewdb.client.Comment comment , com.google.gerrit.server.patch.PatchFile fileData ) { java.util.List < java.lang.String > lines = new java.util.ArrayList <> () ; if ( ( comment.range ) == null ) { lines . add ( getLine ( fileData , comment.side , comment.lineNbr ) ) ; } else { lines . addAll ( getLinesByRange ( comment.range , fileData , comment.side ) ) ; } return lines ; }
@ java.lang.Override public void onSend () { com.google.gerrit.client.changes.ChangeApi . createChange ( project , getDestinationBranch () , message . getText () , null , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide () ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( result . legacy_id () ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; super . onFailure ( caught ) ; } } ) ; }
protected PushOneCommit.Result createChange ( java.lang.String ref ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , testRepo ) ; com.google.gerrit.acceptance.PushOneCommit.Result result = push . to ( ref ) ; result . assertOkStatus () ; return result ; }
private int finish ( final java.util.Iterator < com.google.gerrit.client.reviewdb.PatchLineComment > i , int row , final int col ) { while ( i . hasNext () ) { final com.google.gerrit.client.reviewdb.PatchLineComment c = i . next () ; insertRow ( row ) ; bindComment ( row , col , c , ( ! ( i . hasNext () ) ) ) ; row ++ ; } return row ; }
@ java.lang.Override public void funnel ( K from , com.google.common.hash.PrimitiveSink into ) { try ( java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream ( new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream ( into ) ) ) { ser . writeObject ( from ) ; ser . flush () ; } catch ( java.io.IOException err ) { throw new java.lang.RuntimeException ( STRING_CONSTANT , err ) ; } }
@ java.lang.Override public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId () . toString () ; try { if ( cd . change () . getStatus () . isOpen () ) { delete ( id , openIndex ) ; } else { delete ( id , closedIndex ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } }
@ java.lang.Override protected void configure () { propertyExtractor = createMock ( com.googlesource.gerrit.plugins.hooks.util.PropertyExtractor . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.util.PropertyExtractor . class ) . toInstance ( propertyExtractor ) ; ruleBase = createMock ( com.googlesource.gerrit.plugins.hooks.workflow.RuleBase . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.workflow.RuleBase . class ) . toInstance ( ruleBase ) ; actionExecutor = createMock ( com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor . class ) . toInstance ( actionExecutor ) ; bind ( com.googlesource.gerrit.plugins.hooks.its.ItsConfig . class ) . toInstance ( new com.googlesource.gerrit.plugins.hooks.its.ItsConfig ( null , null , null ) { @ java.lang.Override public boolean isEnabled ( com.google.gerrit.server.events.ChangeEvent event ) { return true ; } } ) ; }
public static void message ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String commit , java.lang.String message , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.CherryPickInput input = com.google.gerrit.client.changes.ChangeApi.CherryPickInput . create () ; input . setMessage ( message ) ; com.google.gerrit.client.changes.ChangeApi . call ( project , id , commit , STRING_CONSTANT ) . post ( input , cb ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createChecked ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = create ( db , project , changeId ) ; if ( ( notes . getChange () ) == null ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( changeId ) ; } return notes ; }
private int safePageSize ( final int pageSize ) throws com.google.gerrit.common.errors.InvalidQueryException { int maxLimit = currentUser . get () . getCapabilities () . getRange ( GlobalCapability.QUERY_LIMIT ) . getMax () ; if ( maxLimit <= NUMBER_CONSTANT ) { throw new com.google.gerrit.common.errors.InvalidQueryException ( STRING_CONSTANT ) ; } return ( NUMBER_CONSTANT < pageSize ) && ( pageSize <= maxLimit ) ? pageSize : maxLimit ; }
@ java.lang.Override public void run () { int line = ( cm . extras () . hasActiveLine () ) ? cm . getLineNumber ( cm . extras () . activeLine () ) : NUMBER_CONSTANT ; int res = java.util.Collections . binarySearch ( chunks , new com.google.gerrit.client.diff.UnifiedDiffChunkInfo ( cm . side () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , line , false ) , getDiffChunkComparatorCmLine () ) ; diffChunkNavHelper ( chunks , host , res , dir ) ; }
@ org.junit.Test public void testTagHeightWidth () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . openElement ( STRING_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . setHeight ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . setWidth ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertSame ( b , b . closeSelf () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ org.junit.Test public void testUSER_NoPreferredEmailUser () { setFrom ( STRING_CONSTANT ) ; final java.lang.String name = STRING_CONSTANT ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; org.easymock.EasyMock . replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create () . from ( user ) ; org.junit.Assert . assertNotNull ( r ) ; org.junit.Assert . assertEquals ( name , r.name ) ; org.junit.Assert . assertEquals ( ident . getEmailAddress () , r.email ) ; org.easymock.EasyMock . verify ( accountCache ) ; }
private static com.google.gerrit.server.project.ListBranches.BranchInfo createBranchInfo ( org.eclipse.jgit.lib.Ref ref , com.google.gerrit.server.project.RefControl refControl , java.util.Set < java.lang.String > targets ) { return new com.google.gerrit.server.project.ListBranches.BranchInfo ( ref . getName () , ( ( ref . getObjectId () ) != null ? ref . getObjectId () . name () : null ) , ( ( ! ( targets . contains ( ref . getName () ) ) ) && ( refControl . canDelete () ) ) ) ; }
public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle < T > add ( com.google.inject.Key < T > key , com.google.inject.Provider < T > item ) { java.util.concurrent.atomic.AtomicReference < com.google.inject.Provider < T > > ref = new java.util.concurrent.atomic.AtomicReference ( item ) ; items . add ( ref ) ; return new ReloadableHandle ( ref , key , item ) ; }
public static void doSignOut () { com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gwt.user.client.Cookies . removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gwt.user.client.Cookies . removeCookie ( com.google.gerrit.client.Gerrit.OPENIDUSER_COOKIE ) ; for ( final com.google.gerrit.client.SignedInListener l : com.google.gerrit.client.Gerrit.signedInListeners ) { l . onSignOut () ; } com.google.gerrit.client.Gerrit . refreshMenuBar () ; if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.currentScreen . onSignOut () ; } }
public com.google.common.base.Optional < com.googlesource.gerrit.plugins.manager.gson.SmartJson > getOptional ( java.lang.String fieldName ) { if ( ( ( jsonElem ) != null ) && ( ( jsonElem . getAsJsonObject () . get ( fieldName ) ) != null ) ) { return com.google.common.base.Optional . of ( com.googlesource.gerrit.plugins.manager.gson.SmartJson . of ( jsonElem . getAsJsonObject () . get ( fieldName ) ) ) ; } else { return com.google.common.base.Optional . absent () ; } }
private static < T > void replace ( com.google.gerrit.server.plugins.Plugin newPlugin , com.google.gerrit.extensions.registration.ReloadableRegistrationHandle < T > h , com.google.inject.Binding < T > b ) { com.google.gerrit.extensions.registration.RegistrationHandle n = h . replace ( b . getKey () , b . getProvider () ) ; if ( n != null ) { newPlugin . add ( n ) ; } }
public com.google.gitiles.GitilesView.Builder setOldRevision ( com.google.gitiles.Revision revision ) { switch ( type ) { case DIFF : case LOG : break; default: com.google.common.base.Preconditions . checkState ( ( revision == null ) , STRING_CONSTANT , type ) ; break; } this . oldRevision = revision ; return this ; }
@ java.lang.Override public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.io.IOException { if ( ( deleteChangeOp ) != null ) { deleteChangeOp . updateRepo ( ctx ) ; return; } ctx . addRefUpdate ( org.eclipse.jgit.lib.ObjectId . fromString ( patchSet . getRevision () . get () ) , org.eclipse.jgit.lib.ObjectId . zeroId () , patchSet . getRefName () ) ; }
private void append ( final java.lang.StringBuilder sb , final org.eclipse.jgit.diff.Edit o ) { sb . append ( o . getBeginA () ) ; sb . append ( CHAR_CONS ) ; sb . append ( o . getEndA () ) ; sb . append ( CHAR_CONS ) ; sb . append ( o . getBeginB () ) ; sb . append ( CHAR_CONS ) ; sb . append ( o . getEndB () ) ; }
@ java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo get ( java.util.EnumSet < com.google.gerrit.extensions.common.ListChangesOption > s ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changeJson . get () . addOptions ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private void appendSkipLine ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final int skipCnt ) { m . openTr () ; m . openTd () ; m . setStyleName ( com.google.gerrit.client.patches.S_ICON_CELL ) ; m . closeTd () ; m . openTd () ; m . setStyleName ( STRING_CONSTANT ) ; m . setAttribute ( STRING_CONSTANT , NUMBER_CONSTANT ) ; m . append ( PatchUtil.M . patchSkipRegion ( skipCnt ) ) ; m . closeTd () ; m . closeTr () ; }
private java.util.Optional < com.google.gerrit.reviewdb.client.Account > loadAccount ( com.google.gerrit.reviewdb.client.Account.Id accountId , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { rw . reset () ; com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig ( accountId ) ; accountConfig . load ( rw , commit ) ; return accountConfig . getLoadedAccount () ; }
@ java.lang.Override public com.google.gerrit.server.notedb.NoteDbChangeState rebuild ( com.google.gerrit.server.notedb.NoteDbUpdateManager manager , com.google.gerrit.server.notedb.ChangeBundle bundle ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( bundle . getChange () ) ; buildUpdates ( manager , bundle ) ; return com.google.gerrit.server.notedb.NoteDbChangeState . applyDelta ( change , manager . stage () ) ; }
protected void renderJson ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.Object src , java.lang.reflect.Type typeOfSrc ) throws java.io.IOException { setApiHeaders ( res , com.google.gitiles.FormatType.JSON ) ; res . setStatus ( javax.servlet.http.HttpServletResponse.SC_OK ) ; java.io.PrintWriter writer = res . getWriter () ; new com.google.gson.GsonBuilder () . setFieldNamingPolicy ( com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES ) . setPrettyPrinting () . generateNonExecutableJson () . create () . toJson ( src , typeOfSrc , writer ) ; writer . print ( CHAR_CONS ) ; writer . close () ; }
@ org.junit.Test public void testBulletList2 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( ( STRING_CONSTANT + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.BEGIN_LIST ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.END_LIST ) ) + STRING_CONSTANT ) , n . asString () ) ; }
@ org.junit.Test public void testFindConflictingSubtree2 ( ) throws java.lang.Exception { changedPaths = com.google.common.collect.Sets . newHashSet ( STRING_CONSTANT , STRING_CONSTANT ) ; runCheck ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidatorTest.INITIAL_PATHNAMES , changedPaths , messages , vistedPaths ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( messages ) ) . containsExactly ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessage ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator . conflict ( STRING_CONSTANT , STRING_CONSTANT ) ) , com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessage ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator . conflict ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( vistedPaths ) . containsExactly ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
@ org.junit.Test public void createEmptyChange_InvalidStatus ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = newChangeInfo ( ChangeStatus.SUBMITTED ) ; com.google.gerrit.acceptance.RestResponse r = adminSession . post ( STRING_CONSTANT , ci ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_BAD_REQUEST ) ; com.google.common.truth.Truth . assertThat ( r . getEntityContent () ) . contains ( STRING_CONSTANT ) ; }
@ java.lang.Override public T call ( ) throws java.lang.Exception { com.google.gerrit.server.util.RequestContext old = local . setContext ( new com.google.gerrit.server.util.RequestContext () { @ java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser () { return context . getCurrentUser () ; } @ java.lang.Override public com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > getReviewDbProvider () { return dbProviderProvider . get () ; } } ) ; try { return callable . call () ; } finally { local . setContext ( old ) ; } }
public int compare ( com.google.gerrit.reviewdb.client.PatchLineComment c1 , com.google.gerrit.reviewdb.client.PatchLineComment c2 ) { java.lang.String filename1 = c1 . getKey () . getParentKey () . get () ; java.lang.String filename2 = c2 . getKey () . getParentKey () . get () ; return com.google.common.collect.ComparisonChain . start () . compare ( filename1 , filename2 ) . compare ( c1 . getLine () , c2 . getLine () ) . compare ( c1 . getWrittenOn () , c2 . getWrittenOn () ) . result () ; }
@ org.junit.Test public void receivePackRespectsVisibilityOfOpenChanges ( ) throws java.lang.Exception { allow ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; deny ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; com.google.common.truth.Truth . assertThat ( getReceivePackRefs () . additionalHaves () ) . containsExactly ( com.google.gerrit.acceptance.git.RefAdvertisementIT . obj ( c3 , NUMBER_CONSTANT ) ) ; }
private void addDiffChunk ( net.codemirror.lib.CodeMirror cmToPad , int lineOnOther , int chunkSize , boolean edit ) { chunks . add ( new com.google.gerrit.client.diff.DiffChunkInfo ( host . otherCm ( cmToPad ) . side () , ( ( lineOnOther - chunkSize ) + NUMBER_CONSTANT ) , lineOnOther , edit ) ) ; }
public static com.google.gerrit.client.rpc.RestApi change ( @ com.google.gerrit.common.Nullable java.lang.String project , int id ) { if ( project == null ) { return new com.google.gerrit.client.rpc.RestApi ( STRING_CONSTANT ) . id ( java.lang.String . valueOf ( id ) ) ; } return new com.google.gerrit.client.rpc.RestApi ( STRING_CONSTANT ) . id ( project , id ) ; }
@ org.junit.Test public void submitWithCherryPickIfFastForwardPossible ( ) throws java.lang.Exception { org.eclipse.jgit.api.Git git = createProject () ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change . getChangeId () ) ; assertCherryPick ( git , false ) ; com.google.common.truth.Truth . assertThat ( getRemoteHead () . getParent ( NUMBER_CONSTANT ) ) . isEqualTo ( change . getCommit () . getParent ( NUMBER_CONSTANT ) ) ; }
private java.util.List < java.lang.String > validate ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit c , boolean verbose , com.google.gerrit.server.config.PluginConfig cfg ) throws java.lang.Exception { com.googlesource.gerrit.plugins.findowners.OwnersValidatorTest.MockedEmails myEmails = new com.googlesource.gerrit.plugins.findowners.OwnersValidatorTest.MockedEmails () ; com.googlesource.gerrit.plugins.findowners.OwnersValidator validator = new com.googlesource.gerrit.plugins.findowners.OwnersValidator ( null , null , null , myEmails ) ; java.lang.String ownersFileName = com.googlesource.gerrit.plugins.findowners.OwnersValidator . getOwnersFileName ( cfg ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = validator . performValidation ( c , rw , ownersFileName , verbose ) ; return com.googlesource.gerrit.plugins.findowners.OwnersValidatorTest . transformMessages ( m ) ; }
@ java.lang.Override protected void onShowView ( com.google.gerrit.client.ui.Screen view ) { final java.lang.String token = view . getToken () ; if ( ! ( token . equals ( com.google.gwt.user.client.History . getToken () ) ) ) { com.google.gwt.user.client.History . newItem ( token , false ) ; com.google.gerrit.client.Gerrit . dispatchHistoryHooks ( token ) ; } if ( view instanceof com.google.gerrit.client.changes.ChangeListScreen ) { com.google.gerrit.client.Gerrit.lastChangeListToken = token ; } super . onShowView ( view ) ; view . onShowView () ; }
public static java.io.File defaultFile ( javax.servlet.FilterConfig filterConfig ) { java.lang.String configPath = java.lang.System . getProperty ( com.google.gitiles.GitilesConfig.PROPERTY_NAME , com.google.gitiles.GitilesConfig.DEFAULT_PATH ) ; if ( ( configPath == null ) && ( filterConfig != null ) ) { configPath = filterConfig . getInitParameter ( com.google.gitiles.GitilesConfig.FILTER_CONFIG_PARAM ) ; } return new java.io.File ( configPath ) ; }
@ java.lang.Override public boolean apply ( com.google.gerrit.reviewdb.client.Project project , java.lang.String hash , java.lang.String name , com.google.gerrit.server.git.GitRepositoryManager gitRepoManager ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName () ) ; try ( org.eclipse.jgit.lib.Repository db = gitRepoManager . openRepository ( p ) ; org.eclipse.jgit.api.Git git = new org.eclipse.jgit.api.Git ( db ) ) { git . branchCreate () . setName ( branch ) . setStartPoint ( hash ) . call () ; } return true ; }
@ java.lang.Override public void onLoad () { super . onLoad () ; Util.LIST_SVC . myStarredChanges ( new com.google.gerrit.client.rpc.GerritCallback < java.util.List < com.google.gerrit.client.data.ChangeInfo > > () { public void onSuccess ( final java.util.List < com.google.gerrit.client.data.ChangeInfo > result ) { starred . display ( result ) ; table . finishDisplay () ; } } ) ; }
private com.google.gerrit.server.project.ProjectControl user ( com.google.gerrit.server.git.ProjectConfig local , java.lang.String name , com.google.gerrit.reviewdb.client.AccountGroup . . . memberOf ) { return new com.google.gerrit.server.project.ProjectControl ( java.util.Collections . < com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet () , java.util.Collections . < com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet () , sectionSorter , changeControlFactory , permissionBackend , new com.google.gerrit.server.project.RefControlTest.MockUser ( name , memberOf ) , newProjectState ( local ) ) ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.diff.FileInfo > m ) { files . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . _number () ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , rev . _number () ) , style , editMessage , reply , fileTableMode , ( ( edit ) != null ) ) ; files . setValue ( m , myLastReply , comments . get ( NUMBER_CONSTANT ) , drafts . get ( NUMBER_CONSTANT ) ) ; }
private void createRepository ( java.nio.file.Path directory , java.lang.String projectName ) throws java.io.IOException { java.lang.String n = projectName + ( org.eclipse.jgit.lib.Constants.DOT_GIT_EXT ) ; org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey . exact ( directory . resolve ( n ) . toFile () , FS.DETECTED ) ; try ( org.eclipse.jgit.lib.Repository db = org.eclipse.jgit.lib.RepositoryCache . open ( loc , false ) ) { db . create ( true ) ; } }
@ java.lang.Override public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > restart ( com.google.gerrit.server.query.change.ChangeData last ) throws com.google.gwtorm.server.OrmException { pred = com.google.gerrit.server.index.IndexedChangeQuery . replaceSortKeyPredicates ( pred , last . change () . getSortKey () ) ; try { source = index . getSource ( pred , NUMBER_CONSTANT , limit ) ; } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return read () ; }
net.codemirror.lib.LineWidget addLineWidget ( net.codemirror.lib.CodeMirror cm , int line , final com.google.gwt.user.client.ui.Widget widget , net.codemirror.lib.Configuration options ) { widget . setVisible ( false ) ; net.codemirror.lib.LineWidget lineWidget = cm . addLineWidget ( line , widget . getElement () , options ) ; lineWidget . onFirstRedraw ( new java.lang.Runnable () { @ java.lang.Override public void run () { widget . setVisible ( true ) ; } } ) ; return lineWidget ; }
@ org.junit.Before public void createSyncEventsRestApiServlet ( ) throws java.lang.Exception { syncEventsRestApiServlet = new com.ericsson.gerrit.plugins.syncevents.SyncEventsRestApiServlet ( dispatcher ) ; req = createNiceMock ( javax.servlet.http.HttpServletRequest . class ) ; rsp = createNiceMock ( javax.servlet.http.HttpServletResponse . class ) ; org.easymock.EasyMock . expect ( req . getContentType () ) . andReturn ( com.google.common.net.MediaType.JSON_UTF_8 . toString () ) ; }
@ org.junit.Test public void basePathForSpecificFilter () { java.lang.String basePath = STRING_CONSTANT ; configureBasePath ( STRING_CONSTANT , basePath ) ; com.google.common.truth.Truth . assertThat ( repoCfg . getBasePath ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ) ) . isNull () ; com.google.common.truth.Truth . assertThat ( repoCfg . getBasePath ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ) . toString () ) . isEqualTo ( basePath ) ; }
@ java.lang.Override public com.google.gerrit.reviewdb.client.PatchSetInfo createValue ( com.googlecode.prolog_cafe.lang.Prolog engine ) { com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.rules.StoredValues . getChange ( engine ) ; com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.rules.StoredValues . getPatchSet ( engine ) ; com.google.gerrit.rules.PrologEnvironment env = ( ( com.google.gerrit.rules.PrologEnvironment ) ( engine.control ) ) ; com.google.gerrit.server.patch.PatchSetInfoFactory patchInfoFactory = env . getArgs () . getPatchSetInfoFactory () ; try { return patchInfoFactory . get ( change . getProject () , ps ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e ) { throw new com.googlecode.prolog_cafe.exceptions.SystemException ( e . getMessage () ) ; } }
private org.eclipse.jgit.revwalk.RevCommit parseCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) { return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; } try ( org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = walk . parseCommit ( id ) ; walk . parseBody ( commit ) ; return commit ; } }
@ java.lang.Override public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { b . setEnabled ( false ) ; new com.google.gerrit.client.changes.AbandonChangeDialog ( patchSet . getId () , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > () { public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { changeScreen . update ( result ) ; } public void onFailure ( java.lang.Throwable caught ) { b . setEnabled ( true ) ; } } ) . center () ; }
private com.google.gerrit.extensions.restapi.BinaryResult wrapBlob ( java.lang.String path , final org.eclipse.jgit.lib.ObjectLoader obj , byte [] raw , eu.medsea.mimeutil.MimeType contentType , @ com.google.gerrit.common.Nullable java.lang.String suffix ) { return com.google.gerrit.server.change.FileContentUtil . asBinaryResult ( raw , obj ) . setContentType ( contentType . toString () ) . setAttachmentName ( com.google.gerrit.server.change.FileContentUtil . safeFileName ( path , suffix ) ) ; }
public boolean canReadCommit ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo = openRepository () ; try { return isMergedIntoVisibleRef ( repo , db , rw , commit , repo . getAllRefs () . values () ) ; } finally { repo . close () ; } } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String . format ( STRING_CONSTANT , commit . name () , getProject () . getNameKey () ) ; com.google.gerrit.server.project.ProjectControl.log . error ( msg , e ) ; return false ; } }
private java.lang.String getTabToken ( final java.lang.String token , final java.lang.String tab ) { if ( token . startsWith ( STRING_CONSTANT ) ) { return com.google.gerrit.client.Dispatcher . toGroup ( group . getGroupUUID () , tab ) ; } return com.google.gerrit.client.Dispatcher . toGroup ( group . getGroupId () , tab ) ; }
private com.google.gerrit.server.ReviewersUtil.VisibilityControl getVisibility ( final com.google.gerrit.server.change.ChangeResource rsrc ) { if ( rsrc . getControl () . getRefControl () . isVisibleByRegisteredUsers () ) { return new com.google.gerrit.server.ReviewersUtil.VisibilityControl () { @ java.lang.Override public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; } return new com.google.gerrit.server.ReviewersUtil.VisibilityControl () { @ java.lang.Override public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory . create ( account ) ; return rsrc . getControl () . forUser ( who ) . isRefVisible () ; } } ; }
@ org.junit.Test public void testChildHashCode () { final java.lang.String pName = STRING_CONSTANT ; final java.lang.String cName = STRING_CONSTANT ; final com.google.gwtorm.client.StringKeyTestCase.Parent p = new com.google.gwtorm.client.StringKeyTestCase.Parent ( pName ) ; final com.google.gwtorm.client.StringKeyTestCase.Child c = new com.google.gwtorm.client.StringKeyTestCase.Child ( p , cName ) ; org.junit.Assert . assertSame ( p , c . getParentKey () ) ; org.junit.Assert . assertTrue ( ( ( cName . hashCode () ) != ( c . hashCode () ) ) ) ; }
@ java.lang.Override public com.google.gerrit.server.plugins.ServerPlugin get ( java.io.File srcFile , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot , com.googlesource.gerrit.plugins.cookbook.pluginprovider.PluginDescription pluginDescriptor ) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.String name = getPluginName ( srcFile ) ; return new com.google.gerrit.server.plugins.ServerPlugin ( name , pluginDescriptor.canonicalUrl , pluginDescriptor.user , srcFile , snapshot , new com.googlesource.gerrit.plugins.cookbook.pluginprovider.HelloSshPluginContentScanner ( name ) , pluginDescriptor.dataDir , getClass () . getClassLoader () ) ; }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : object . approvals () ) { final com.google.gerrit.server.IdentifiedUser reviewer = userFactory . create ( dbProvider , p . getAccountId () ) ; if ( reviewer . getEffectiveGroups () . contains ( uuid ) ) { return true ; } } return false ; }
private void set ( com.google.gerrit.client.changes.CommentInfo info ) { date . setInnerText ( com.google.gerrit.client.FormatUtil . shortFormatDayTime ( info . updated () ) ) ; if ( ( info . message () ) != null ) { java.lang.String msg = info . message () . trim () ; summary . setInnerText ( msg ) ; message . setHTML ( linkProcessor . apply ( new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () . append ( msg ) . wikify () ) ) ; } comment = info ; }
@ org.junit.Test public void setNonExistingParent_UnprocessibleEntity ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , newParentInput ( STRING_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_UNPROCESSABLE_ENTITY ) ; r . consume () ; }
public static < T extends com.google.gwtorm.client.Key < > > boolean eq ( final T a , final T b ) { if ( a == b ) { return true ; } if ( ( a == null ) || ( b == null ) ) { return false ; } return a . equals ( b ) ; }
@ java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff ( com.google.gerrit.server.patch.IntraLineDiffKey key , com.google.gerrit.server.patch.IntraLineDiffArgs args ) { if ( computeIntraline ) { try { return intraCache . get ( key , intraLoaderFactory . create ( key , args ) ) ; } catch ( java.util.concurrent.ExecutionException | org.eclipse.jgit.errors.LargeObjectException e ) { IntraLineLoader.log . warn ( ( STRING_CONSTANT + key ) , e ) ; return new com.google.gerrit.server.patch.IntraLineDiff ( IntraLineDiff.Status.ERROR ) ; } } return new com.google.gerrit.server.patch.IntraLineDiff ( IntraLineDiff.Status.DISABLED ) ; }
@ org.junit.Test public void testTransitionToUnhealthy ( ) throws java.io.IOException { assertIsHealthy () ; javax.servlet.http.HttpServletResponse responseMock = org.mockito.Mockito . mock ( javax.servlet.http.HttpServletResponse . class ) ; servlet . doDelete ( null , responseMock ) ; org.mockito.Mockito . verify ( responseMock ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; assertIsUnhealthy () ; responseMock = org.mockito.Mockito . mock ( javax.servlet.http.HttpServletResponse . class ) ; servlet . doDelete ( null , responseMock ) ; org.mockito.Mockito . verify ( responseMock ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; assertIsUnhealthy () ; }
@ org.junit.Test public void testBlockedExtensions ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( rw , com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator . performValidation ( repo , c , rw , com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC ) ; java.util.List < java.lang.String > expected = new java.util.ArrayList <> () ; for ( java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC ) { expected . add ( ( STRING_CONSTANT + extension ) ) ; } com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; } }
public static java.lang.String getTargetUrl ( javax.servlet.ServletRequest request ) { int meEnd = com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol . state ( request ) . indexOf ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.ME_SEPARATOR ) ; java.lang.String finalUrlSuffix = ( STRING_CONSTANT + ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.FINAL_URL_PARAM ) ) + STRING_CONSTANT ; if ( meEnd > NUMBER_CONSTANT ) { return ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol . state ( request ) . substring ( ( meEnd + NUMBER_CONSTANT ) ) ) + finalUrlSuffix ; } return finalUrlSuffix ; }
private org.eclipse.jgit.treewalk.TreeWalk find ( final org.eclipse.jgit.lib.ObjectId within ) throws java.io.IOException , org.eclipse.jgit.errors.CorruptObjectException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { if ( ( ( path ) == null ) || ( within == null ) ) { return null ; } try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( reader ) ) { final org.eclipse.jgit.revwalk.RevTree tree = rw . parseTree ( within ) ; return org.eclipse.jgit.treewalk.TreeWalk . forPath ( reader , path , tree ) ; } }
private void assertRedirectsTo ( java.lang.String expectedLocation , javax.servlet.http.HttpServletRequest req ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse () ; servlet . service ( req , res ) ; org.junit.Assert . assertEquals ( javax.servlet.http.HttpServletResponse.SC_MOVED_PERMANENTLY , res . getStatus () ) ; org.junit.Assert . assertEquals ( expectedLocation , res . getHeader ( com.google.common.net.HttpHeaders.LOCATION ) ) ; }
private static com.google.gerrit.server.account.AccountState missing ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.server.util.TimeUtil . nowTs () ) ; java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids = java.util.Collections . emptySet () ; java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > anon = com.google.common.collect.ImmutableSet . of () ; return new com.google.gerrit.server.account.AccountState ( account , anon , ids ) ; }
public void testOnAllNodesReplicated ( ) throws com.google.gwtorm.server.OrmException { org.easymock.EasyMock . reset ( dispatcherMock ) ; com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent expectedDoneEvent = new com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent ( STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ; dispatcherMock . postEvent ( com.googlesource.gerrit.plugins.replication.RefReplicationDoneEventEquals . eqEvent ( expectedDoneEvent ) ) ; org.easymock.EasyMock . expectLastCall () . once () ; org.easymock.EasyMock . replay ( dispatcherMock ) ; gitUpdateProcessing . onRefReplicatedToAllNodes ( STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ; org.easymock.EasyMock . verify ( dispatcherMock ) ; }
@ java.lang.Override protected com.google.template.soy.tofu.SoyTofu getTofu () { com.google.template.soy.SoyFileSet.Builder builder = com.google.template.soy.SoyFileSet . builder () . setCompileTimeGlobals ( globals ) ; for ( java.net.URL template : templates . values () ) { try { com.google.common.base.Preconditions . checkState ( new java.io.File ( template . toURI () ) . exists () , STRING_CONSTANT , template ) ; } catch ( java.net.URISyntaxException e ) { throw new java.lang.IllegalStateException ( e ) ; } builder . add ( template ) ; } return builder . build () . compileToTofu () ; }
public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger ( final org.eclipse.jgit.lib.Repository repo , final org.eclipse.jgit.lib.ObjectInserter inserter ) { org.eclipse.jgit.merge.ThreeWayMerger m ; if ( useContentMerge ) { m = MergeStrategy.RESOLVE . newMerger ( repo , true ) ; } else { m = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE . newMerger ( repo ) ; } m . setObjectInserter ( new org.eclipse.jgit.lib.ObjectInserter.Filter () { @ java.lang.Override protected org.eclipse.jgit.lib.ObjectInserter delegate () { return inserter ; } @ java.lang.Override public void flush () {} @ java.lang.Override public void release () {} } ) ; return m ; }
@ org.junit.Test public void createNewChangeSignedOffByFooter ( ) throws java.lang.Exception { setSignedOffByFooter () ; com.google.gerrit.extensions.common.ChangeInfo info = assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; java.lang.String message = info.revisions . get ( info.currentRevision ) . commit . message ; com.google.common.truth.Truth . assertThat ( message ) . contains ( java.lang.String . format ( STRING_CONSTANT , org.eclipse.jgit.lib.Constants.SIGNED_OFF_BY_TAG , admin . getIdent () . getEmailAddress () ) ) ; }
@ java.lang.Override public java.lang.String apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.googlesource.gerrit.plugins.cookbook.HelloProjectAction.Input input ) { final java.lang.String greeting = ( input.french ) ? STRING_CONSTANT : STRING_CONSTANT ; return java.lang.String . format ( STRING_CONSTANT , greeting , ( isNullOrEmpty ( input.message ) ? firstNonNull ( user . get () . getUserName () , STRING_CONSTANT ) : input.message ) , rsrc . getName () ) ; }
public boolean unify ( com.googlecode.prolog_cafe.lang.Term t , com.googlecode.prolog_cafe.lang.Trail trail ) { if ( t instanceof com.googlecode.prolog_cafe.lang.VariableTerm ) return ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( t ) ) . unify ( this , trail ) ; if ( ! ( t instanceof com.googlecode.prolog_cafe.lang.IntegerTerm ) ) return false ; else return ( this . val ) == ( ( ( com.googlecode.prolog_cafe.lang.IntegerTerm ) ( t ) ) . value () ) ; }
@ java.lang.Override public void advertiseRefs ( org.eclipse.jgit.transport.BaseReceivePack rp ) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { allRefs = rp . getAdvertisedRefs () ; if ( ( allRefs ) == null ) { try { allRefs = rp . getRepository () . getRefDatabase () . getRefs ( org.eclipse.jgit.lib.RefDatabase.ALL ) ; } catch ( org.eclipse.jgit.transport.ServiceMayNotContinueException e ) { throw e ; } catch ( java.io.IOException e ) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException () ; ex . initCause ( e ) ; throw ex ; } } rp . setAdvertisedRefs ( allRefs , rp . getAdvertisedObjects () ) ; }
protected java.io.OutputStream startRenderStreamingHtml ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String templateName , java.util.Map < java.lang.String , > soyData ) throws java.io.IOException { req . setAttribute ( com.google.gitiles.BaseServlet.STREAMING_ATTRIBUTE , true ) ; return renderer . renderStreaming ( res , false , templateName , startHtmlResponse ( req , res , soyData ) ) ; }
@ java.lang.Override protected void configure () { bind ( GitilesAccess.Factory . class ) . to ( GerritGitilesAccess.Factory . class ) ; bind ( new com.google.inject.TypeLiteral < org.eclipse.jgit.transport.resolver.RepositoryResolver < javax.servlet.http.HttpServletRequest > > () {} ) . to ( com.googlesource.gerrit.plugins.gitiles.Resolver . class ) ; listener () . to ( com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle . class ) ; }
private boolean isTrusted ( final com.google.gerrit.reviewdb.client.AccountExternalId id ) { if ( id . isScheme ( AccountExternalId.SCHEME_MAILTO ) ) { return true ; } if ( id . isScheme ( AccountExternalId.SCHEME_UUID ) ) { return true ; } if ( id . isScheme ( AccountExternalId.SCHEME_USERNAME ) ) { return true ; } for ( final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs ) { if ( p . matches ( id ) ) { return true ; } } return false ; }
@ org.junit.Test public void deleteReviewerFromReviewableChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setEmailStrategy ( sc.owner , EmailStrategy.CC_ON_OWN_COMMENTS ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner , extraReviewer ) . cc ( extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.extensions.api.GerritApi . class ) . to ( com.google.gerrit.server.api.GerritApiImpl . class ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; }
@ java.lang.Override public java.lang.Void call ( ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { java.lang.String p = STRING_CONSTANT + i ; createProject ( p ) ; com.google.gerrit.acceptance.GitUtil . cloneProject ( ( ( ( sshSession . getUrl () ) + STRING_CONSTANT ) + p ) ) ; } return null ; }
public void testSubsequentGetReads ( ) throws com.google.gwtorm.client.OrmException { db . create () ; final com.google.gerrit.reviewdb.SystemConfig exp = db . getSystemConfig () ; final com.google.gerrit.reviewdb.SystemConfig act = db . getSystemConfig () ; assertNotSame ( exp , act ) ; assertEquals ( exp.adminGroupId , act.adminGroupId ) ; assertEquals ( exp.anonymousGroupId , act.anonymousGroupId ) ; assertEquals ( exp.registeredGroupId , act.registeredGroupId ) ; assertEquals ( exp.sitePath , act.sitePath ) ; assertEquals ( exp.registerEmailPrivateKey , act.registerEmailPrivateKey ) ; }
@ java.lang.Override public synchronized < F1 > com.google.gerrit.metrics.Timer1 < F1 > newTimer ( java.lang.String name , com.google.gerrit.metrics.Description desc , com.google.gerrit.metrics.Field < F1 > field1 ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . checkTimerDescription ( name , desc ) ; com.google.gerrit.metrics.dropwizard.TimerImpl1 < F1 > m = new com.google.gerrit.metrics.dropwizard.TimerImpl1 ( this , name , desc , field1 ) ; define ( name , desc ) ; bucketed . put ( name , m ) ; return m . timer () ; }
@ java.lang.Override public boolean equals ( final java.lang.Object other ) { if ( other == null ) return false ; return ( ( getClass () ) == ( other . getClass () ) ) && ( getChildren () . equals ( ( ( com.google.gerrit.server.query.Predicate < > ) ( other ) ) . getChildren () ) ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean preserveGitRepository ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repository = repoManager . openRepository ( project . getNameKey () ) ; cleanCache ( repository ) ; if ( ! preserveGitRepository ) { deleteGitRepository ( project . getNameKey () , repository ) ; } }
@ org.junit.Test public void testUnblockForceEditTopicName () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) . setForce ( true ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canForceEditTopicName () ) ; }
@ org.junit.Test public void byPathRegex ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . parseBody ( repo . commit () . message ( STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . create () ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , newChangeForCommit ( repo , commit ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change ) ; }
private int insertRow ( final int beforeRow ) { for ( final com.google.gerrit.client.changes.ChangeTable.Section s : sections ) { if ( beforeRow <= ( s.titleRow ) ) { ( s.titleRow ) ++ ; } if ( beforeRow < ( s.dataBegin ) ) { ( s.dataBegin ) ++ ; } } return table . insertRow ( beforeRow ) ; }
private void applyReview ( final com.google.gerrit.server.project.ChangeControl ctl , final com.google.gerrit.reviewdb.client.PatchSet patchSet , final com.google.gerrit.server.change.PostReview.Input review ) throws java.lang.Exception { if ( ! ( review.labels . isEmpty () ) ) { reviewProvider . get () . apply ( new com.google.gerrit.server.change.RevisionResource ( new com.google.gerrit.server.change.ChangeResource ( ctl ) , patchSet ) , review ) ; } }
public static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ; cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; }
@ java.lang.Override protected com.google.gerrit.server.notedb.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( ( ( change ) != null ) && ( autoRebuild ) ) { com.google.gerrit.server.notedb.NoteDbChangeState state = com.google.gerrit.server.notedb.NoteDbChangeState . parse ( change ) ; if ( ! ( com.google.gerrit.server.notedb.NoteDbChangeState . areDraftsUpToDate ( state , new com.google.gerrit.server.git.RepoRefCache ( repo ) , getChangeId () , author ) ) ) { return rebuildAndOpen ( repo ) ; } } return super . openHandle ( repo ) ; }
@ org.junit.Test public void dateTwoOnly ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > params = new java.util.HashMap <> () ; java.lang.String oldDate = STRING_CONSTANT ; params . put ( STRING_CONSTANT , oldDate ) ; java.lang.String query = com.ericsson.gerrit.plugins.eventslog.QueryMakerTest.queryMaker . formQueryFromRequestParameters ( params ) ; com.google.common.truth.Truth . assertThat ( query ) . contains ( java.lang.String . format ( STRING_CONSTANT , oldDate ) ) ; }
public static org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.dircache.DirCacheEntry [] entries , org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.lib.Repository > repo , org.eclipse.jgit.revwalk.RevCommit . . . parents ) throws java.lang.Exception { final org.eclipse.jgit.revwalk.RevTree ta = repo . tree ( entries ) ; org.eclipse.jgit.revwalk.RevCommit c = ( parents == null ) ? repo . commit ( ta ) : repo . commit ( ta , parents ) ; repo . parseBody ( c ) ; return rw . parseCommit ( c ) ; }
private void updateSuperProjects ( java.util.Collection < com.google.gerrit.reviewdb.client.Branch.NameKey > branches ) { logDebug ( STRING_CONSTANT ) ; com.google.gerrit.server.git.SubmoduleOp subOp = subOpProvider . get () ; try { subOp . updateSuperProjects ( branches , submissionId , orm ) ; logDebug ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.server.git.SubmoduleException e ) { logError ( ( STRING_CONSTANT + STRING_CONSTANT ) , e ) ; } }
@ java.lang.Override protected void configure () { if ( isConfigPresent ( pluginName ) ) { com.googlesource.gerrit.plugins.its.rtc.RTCModule.LOG . info ( STRING_CONSTANT ) ; bind ( com.googlesource.gerrit.plugins.its.base.its.ItsFacade . class ) . to ( com.googlesource.gerrit.plugins.its.rtc.RTCItsFacade . class ) . in ( Scopes.SINGLETON ) ; install ( new com.googlesource.gerrit.plugins.its.base.ItsHookModule ( pluginName , pluginCfgFactory ) ) ; } }
private static boolean needsSuperSerializer ( com.google.gwt.core.ext.typeinfo.JClassType type ) { com.google.gwt.core.ext.typeinfo.JClassType t = type . getSuperclass () ; while ( ! ( java.lang.Object . class . getName () . equals ( t . getQualifiedSourceName () ) ) ) { if ( ( com.google.gwtjsonrpc.rebind.SerializerCreator . sortFields ( t ) . length ) > NUMBER_CONSTANT ) { return true ; } t = type . getSuperclass () ; } return false ; }
public com.google.gerrit.common.data.Capable canPushToAtLeastOneRef () { if ( ( ( ! ( canPerformOnAnyRef ( Permission.PUSH ) ) ) && ( ! ( canPerformOnAnyRef ( Permission.CREATE_TAG ) ) ) ) && ( ! ( isOwner () ) ) ) { return new com.google.gerrit.common.data.Capable ( ( ( STRING_CONSTANT + ( state . getName () ) ) + STRING_CONSTANT ) ) ; } return com.google.gerrit.common.data.Capable.OK ; }
@ org.junit.Test public void copyMinScoreOnRework ( ) throws java.lang.Exception { codeReview . setCopyMinScore ( true ) ; saveLabelConfig () ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; revision ( r ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . reject () ) ; r = amendChange ( r . getChangeId () ) ; assertApproval ( r , ( - NUMBER_CONSTANT ) ) ; }
private void merge ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { revision ( r ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . approve () ) ; revision ( r ) . submit () ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( project ) ) { com.google.common.truth.Truth . assertThat ( repo . getRef ( STRING_CONSTANT ) . getObjectId () ) . isEqualTo ( r . getCommitId () ) ; } }
@ org.junit.Test public void testChangeIdAfterBugOrIssue ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) + ( SOB1 ) ) , call ( ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) + ( SOB1 ) ) ) ) ; org.junit.Assert . assertEquals ( ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) + ( SOB1 ) ) , call ( ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) + ( SOB1 ) ) ) ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.extensions.api.projects.Projects . class ) . to ( com.google.gerrit.server.api.projects.ProjectsImpl . class ) ; factory ( BranchApiImpl.Factory . class ) ; factory ( TagApiImpl.Factory . class ) ; factory ( ProjectApiImpl.Factory . class ) ; factory ( ChildProjectApiImpl.Factory . class ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > filter ( java.util.Collection < com.google.gerrit.reviewdb.RefRight > all ) { java.util.List < com.google.gerrit.reviewdb.RefRight > mine = new java.util.ArrayList < com.google.gerrit.reviewdb.RefRight > ( all . size () ) ; for ( com.google.gerrit.reviewdb.RefRight right : all ) { if ( com.google.gerrit.server.project.RefControl . matches ( getRefName () , right . getRefPattern () ) ) { mine . add ( right ) ; } } return mine ; }
public static int getHeaderFooterHeight () { int h = com.google.gerrit.client.Gerrit.bottomMenu . getOffsetHeight () ; if ( com.google.gerrit.client.Gerrit.topMenu . isVisible () ) { h += com.google.gerrit.client.Gerrit.topMenu . getOffsetHeight () ; } if ( com.google.gerrit.client.Gerrit.siteHeader . isVisible () ) { h += com.google.gerrit.client.Gerrit.siteHeader . getOffsetHeight () ; } if ( com.google.gerrit.client.Gerrit.siteFooter . isVisible () ) { h += com.google.gerrit.client.Gerrit.siteFooter . getOffsetHeight () ; } return h ; }
private java.util.List < com.google.gwtexpui.globalkey.client.KeyCommand > sort ( final com.google.gwtexpui.globalkey.client.KeyCommandSet set ) { final java.util.List < com.google.gwtexpui.globalkey.client.KeyCommand > keys = new java.util.ArrayList ( set . getKeys () ) ; java.util.Collections . sort ( keys , new java.util.Comparator < com.google.gwtexpui.globalkey.client.KeyCommand > () { @ java.lang.Override public int compare ( com.google.gwtexpui.globalkey.client.KeyCommand arg0 , com.google.gwtexpui.globalkey.client.KeyCommand arg1 ) { return arg0 . getHelpText () . compareTo ( arg1 . getHelpText () ) ; } } ) ; return keys ; }
private static void assertOnlyChild ( java.lang.String o , com.google.gerrit.server.query.Predicate < java.lang.String > c , com.google.gerrit.server.query.Predicate < java.lang.String > p ) { org.junit.Assert . assertEquals ( ( o + STRING_CONSTANT ) , NUMBER_CONSTANT , p . getChildCount () ) ; org.junit.Assert . assertSame ( ( o + STRING_CONSTANT ) , c , p . getChild ( NUMBER_CONSTANT ) ) ; }
private com.google.inject.AbstractModule createIndexModule () { if ( slave ) { return new com.google.gerrit.server.index.DummyIndexModule () ; } switch ( indexType ) { case LUCENE : return ( luceneModule ) != null ? luceneModule : new com.google.gerrit.lucene.LuceneIndexModule () ; default: throw new java.lang.IllegalStateException ( ( STRING_CONSTANT + ( indexType ) ) ) ; } }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { com.google.inject.Injector injector = com.google.inject.Guice . createInjector ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProviderTest.TestModule () ) ; try ( org.apache.http.impl.client.CloseableHttpClient httpClient1 = injector . getInstance ( org.apache.http.impl.client.CloseableHttpClient . class ) ) { com.google.common.truth.Truth . assertThat ( httpClient1 ) . isNotNull () ; try ( org.apache.http.impl.client.CloseableHttpClient httpClient2 = injector . getInstance ( org.apache.http.impl.client.CloseableHttpClient . class ) ) { com.google.common.truth.Truth . assertThat ( httpClient1 ) . isEqualTo ( httpClient2 ) ; } } }
protected Project.NameKey createProject ( java.lang.String nameSuffix , com.google.gerrit.reviewdb.client.Project.NameKey parent , boolean createEmptyCommit ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = name ( nameSuffix ) ; in.parent = ( parent != null ) ? parent . get () : null ; in.createEmptyCommit = createEmptyCommit ; return createProject ( in ) ; }
private void approve ( java.lang.String changeId ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession . post ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) , new com.google.gerrit.extensions.api.changes.ReviewInput () . label ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; r . consume () ; }
@ org.junit.Test public void testChildString () { final java.lang.String pv = STRING_CONSTANT ; final java.lang.String cv = STRING_CONSTANT ; final com.google.gwtorm.client.StringKeyTestCase.Child c1 = new com.google.gwtorm.client.StringKeyTestCase.Child ( new com.google.gwtorm.client.StringKeyTestCase.Parent ( pv ) , cv ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , c1 . toString () ) ; final com.google.gwtorm.client.StringKeyTestCase.Child c2 = new com.google.gwtorm.client.StringKeyTestCase.Child ( new com.google.gwtorm.client.StringKeyTestCase.Parent ( STRING_CONSTANT ) , STRING_CONSTANT ) ; c2 . fromString ( c1 . toString () ) ; org.junit.Assert . assertEquals ( c1 , c2 ) ; }
@ java.lang.Override public PatchSet.Id call ( ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { try { if ( caller == ( java.lang.Thread . currentThread () ) ) { return insertPatchSet ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory . open () ; try { return insertPatchSet ( db ) ; } finally { db . close () ; } } } finally { synchronized ( replaceProgress ) { replaceProgress . update ( NUMBER_CONSTANT ) ; } } }
protected void assertNoSubmitter ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes cn = notesFactory . create ( db , com.google.common.collect.Iterables . getOnlyElement ( queryProvider . get () . byKeyPrefix ( changeId ) ) . change () ) ; com.google.gerrit.reviewdb.client.PatchSetApproval submitter = approvalsUtil . getSubmitter ( db , cn , new com.google.gerrit.reviewdb.client.PatchSet.Id ( cn . getChangeId () , psId ) ) ; com.google.common.truth.Truth . assertThat ( submitter ) . isNull () ; }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange ( com.google.gerrit.acceptance.PushOneCommit.Result pr ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session . get ( ( ( STRING_CONSTANT + ( pr . getChangeId () ) ) + STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_OK , r . getStatusCode () ) ; return newGson () . fromJson ( r . getReader () , com.google.gerrit.server.change.ChangeJson.ChangeInfo . class ) ; }
private com.google.inject.Injector createSshInjector () { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > () ; modules . add ( sysInjector . getInstance ( com.google.gerrit.sshd.SshModule . class ) ) ; if ( ! ( test ) ) { modules . add ( new com.google.gerrit.sshd.SshHostKeyModule () ) ; } if ( slave ) { modules . add ( new com.google.gerrit.sshd.commands.SlaveCommandModule () ) ; } else { modules . add ( new com.google.gerrit.sshd.commands.MasterCommandModule () ) ; } return sysInjector . createChildInjector ( modules ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIdOnlyWhenNoteDbDisabled ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Preconditions . checkState ( ( ! ( args.migration . readChanges () ) ) , ( STRING_CONSTANT + STRING_CONSTANT ) ) ; com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.notedb.ChangeNotes . unwrap ( db ) . changes () . get ( changeId ) ; com.google.common.base.Preconditions . checkNotNull ( change , STRING_CONSTANT , changeId ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load () ; }
@ org.junit.Test public void deleteVoteFromReviewableChangeByAdminCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setEmailStrategy ( admin , EmailStrategy.CC_ON_OWN_COMMENTS ) ; setApiUser ( admin ) ; deleteVote ( sc , voter ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer , admin , voter ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private static java.util.Properties loadBuckProperties ( java.io.File gen ) throws java.io.FileNotFoundException , java.io.IOException { java.util.Properties properties = new java.util.Properties () ; try ( java.io.InputStream in = new java.io.FileInputStream ( new java.io.File ( new java.io.File ( gen , STRING_CONSTANT ) , STRING_CONSTANT ) ) ) { properties . load ( in ) ; } return properties ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.Abandon.Op op = new com.google.gerrit.server.change.Abandon.Op ( msgTxt , notifyHandling ) ; try ( com.google.gerrit.server.git.BatchUpdate u = batchUpdateFactory . create ( dbProvider . get () , control . getProject () . getNameKey () , control . getUser () , com.google.gerrit.common.TimeUtil . nowTs () ) ) { u . addOp ( control . getId () , op ) . execute () ; } return op.change ; }
private static org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { if ( ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . zeroId () ) ) ) { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser () ; p . reset ( walk . getObjectReader () , walk . parseTree ( id ) ) ; return p ; } return new org.eclipse.jgit.treewalk.EmptyTreeIterator () ; }
public com.google.gerrit.extensions.api.changes.ReviewerInfo format ( com.google.gerrit.extensions.api.changes.ReviewerInfo out , com.google.gerrit.server.permissions.PermissionBackend.ForChange perm , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change () . currentPatchSetId () ; com.google.gerrit.server.project.ChangeControl ctl = cd . changeControl () . forUser ( perm . user () ) ; return format ( out , perm , cd , approvalsUtil . byPatchSetUser ( db . get () , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( out._accountId ) , null , null ) ) ; }
private org.apache.lucene.search.Query or ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { try { org.apache.lucene.search.BooleanQuery q = new org.apache.lucene.search.BooleanQuery () ; for ( int i = NUMBER_CONSTANT ; i < ( p . getChildCount () ) ; i ++ ) { q . add ( toQuery ( p . getChild ( i ) ) , org.apache.lucene.search.BooleanClause.Occur.SHOULD ) ; } return q ; } catch ( org.apache.lucene.search.BooleanQuery e ) { throw new com.google.gerrit.server.query.QueryParseException ( ( STRING_CONSTANT + p ) , e ) ; } }
public static void applyUserPreferences () { if ( ( com.google.gerrit.client.Gerrit.myAccount ) != null ) { final com.google.gerrit.reviewdb.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount . getGeneralPreferences () ; com.google.gwtexpui.clippy.client.CopyableLabel . setFlashEnabled ( p . isUseFlashClipboard () ) ; if ( ( com.google.gerrit.client.Gerrit.siteHeader ) != null ) { com.google.gerrit.client.Gerrit.siteHeader . setVisible ( p . isShowSiteHeader () ) ; } if ( ( com.google.gerrit.client.Gerrit.siteFooter ) != null ) { com.google.gerrit.client.Gerrit.siteFooter . setVisible ( p . isShowSiteHeader () ) ; } } }
public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment ( ) throws com.googlecode.prolog_cafe.compiler.CompileException { com.googlecode.prolog_cafe.lang.PrologMachineCopy pmc = rulesMachine ; if ( pmc == null ) { pmc = rulesCache . loadMachine ( getProject () . getNameKey () , config . getRulesId () ) ; rulesMachine = pmc ; } return envFactory . create ( pmc ) ; }
@ java.lang.Override public java.util.List < java.lang.String > lookup ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory . create ( db , project , psId . getParentKey () ) ; com.google.gerrit.reviewdb.client.PatchSet ps = psUtil . get ( db , notes , psId ) ; return ps != null ? ps . getGroups () : null ; }
private javax.crypto.Cipher cipher ( byte [] initVector , int mode ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.spec.InvalidParameterSpecException , javax.crypto.NoSuchPaddingException { javax.crypto.spec.IvParameterSpec spec = new javax.crypto.spec.IvParameterSpec ( initVector ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; java.security.AlgorithmParameters params = java.security.AlgorithmParameters . getInstance ( com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.ALGORITHM ) ; params . init ( spec ) ; cipher . init ( mode , key , params ) ; return cipher ; }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { try { return apply ( new com.google.gerrit.server.project.ProjectResource ( projectControlFactory . controlFor ( nameKey , self . get () ) ) ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( nameKey . get () ) ; } }
private void setEnabledForUseContentMerge () { if ( SubmitType.FAST_FORWARD_ONLY . equals ( Project.SubmitType . valueOf ( submitType . getValue ( submitType . getSelectedIndex () ) ) ) ) { contentMerge . setEnabled ( false ) ; final com.google.gerrit.reviewdb.client.InheritedBoolean inheritedBoolean = new com.google.gerrit.reviewdb.client.InheritedBoolean () ; inheritedBoolean . setValue ( InheritableBoolean.FALSE ) ; setBool ( contentMerge , inheritedBoolean ) ; } else { contentMerge . setEnabled ( submitType . isEnabled () ) ; } }
@ java.lang.Override protected java.util.List createEntry ( final java.lang.String url ) throws java.lang.Exception { try { final java.util.List < > list = manager . discover ( url ) ; return ( list != null ) && ( ! ( list . isEmpty () ) ) ? list : null ; } catch ( org.openid4java.discovery.DiscoveryException e ) { return null ; } }
@ org.junit.Test public void testCreateChildProject ( ) throws java.lang.Exception { final java.lang.String parentName = STRING_CONSTANT ; com.google.gerrit.acceptance.RestResponse r = adminSession . put ( ( STRING_CONSTANT + parentName ) ) ; r . consume () ; final java.lang.String childName = STRING_CONSTANT ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.parent = parentName ; r = adminSession . put ( ( STRING_CONSTANT + childName ) , in ) ; com.google.gerrit.reviewdb.client.Project project = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( childName ) ) . getProject () ; com.google.common.truth.Truth . assertThat ( project . getParentName () ) . isEqualTo ( in.parent ) ; }
private static java.util.List < com.google.gerrit.client.changes.CommentInfo > copyPath ( java.lang.String path , com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > l ) { for ( int i = NUMBER_CONSTANT ; i < ( l . length () ) ; i ++ ) { l . get ( i ) . path ( path ) ; } return com.google.gerrit.client.rpc.Natives . asList ( l ) ; }
private com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( com.google.gson.JsonElement json ) { com.google.gson.JsonElement source = json . getAsJsonObject () . get ( STRING_CONSTANT ) ; if ( source == null ) { source = json . getAsJsonObject () . get ( STRING_CONSTANT ) ; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( source . getAsJsonObject () . get ( GroupField.UUID . getName () ) . getAsString () ) ; return groupCache . get () . get ( uuid ) ; }
public com.google.gerrit.extensions.registration.DynamicMap < T > get () { com.google.gerrit.extensions.registration.PrivateInternals_DynamicMapImpl < T > m = new com.google.gerrit.extensions.registration.PrivateInternals_DynamicMapImpl < T > () ; java.util.List < com.google.inject.Binding < T > > bindings = injector . findBindingsByType ( type ) ; if ( bindings != null ) { for ( com.google.inject.Binding < T > b : bindings ) { m . put ( STRING_CONSTANT , b . getKey () , b . getProvider () ) ; } } return m ; }
protected void populateProjects () { com.google.gerrit.client.projects.ProjectMap . match ( subname , new com.google.gerrit.client.ui.IgnoreOutdatedFilterResultsCallbackWrapper ( this , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.projects.ProjectMap > () { @ java.lang.Override public void onSuccess ( final com.google.gerrit.client.projects.ProjectMap result ) { projectsTab . display ( result , subname ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup () ; } } } ) ) ; }
@ java.lang.Override protected com.google.gerrit.server.notedb.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( autoRebuild ) { com.google.gerrit.server.notedb.NoteDbChangeState state = com.google.gerrit.server.notedb.NoteDbChangeState . parse ( change ) ; com.google.gerrit.server.git.RefCache refs = ( ( this . refs ) != null ) ? this . refs : new com.google.gerrit.server.git.RepoRefCache ( repo ) ; if ( ! ( com.google.gerrit.server.notedb.NoteDbChangeState . isChangeUpToDate ( state , refs , getChangeId () ) ) ) { return rebuildAndOpen ( repo ) ; } } return super . openHandle ( repo ) ; }
@ java.lang.Override public void setReviewed ( java.lang.String path , boolean reviewed ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.change.FileResource , com.google.gerrit.server.change.Reviewed.Input > view ; if ( reviewed ) { view = putReviewed ; } else { view = deleteReviewed ; } view . apply ( files . parse ( revision , com.google.gerrit.extensions.restapi.IdString . fromDecoded ( path ) ) , new com.google.gerrit.server.change.Reviewed.Input () ) ; } catch ( java.lang.Exception e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
public static com.google.gerrit.extensions.common.GroupOptionsInfo createOptions ( com.google.gerrit.common.data.GroupDescription.Basic group ) { com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo () ; if ( ( group instanceof com.google.gerrit.common.data.GroupDescription.Internal ) && ( ( ( com.google.gerrit.common.data.GroupDescription.Internal ) ( group ) ) . isVisibleToAll () ) ) { options.visibleToAll = true ; } return options ; }
@ org.junit.Test public void commentOnWipChangeByOwnerNotifyAll ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
void doReply () { if ( ! ( com.google.gerrit.client.Gerrit . isSignedIn () ) ) { com.google.gerrit.client.Gerrit . doSignIn ( parent . getToken () ) ; } else if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = addReplyBox () ; if ( ! ( getCommentInfo () . has_line () ) ) { parent . addFileCommentBox ( box ) ; } } else { openReplyBox () ; } }
boolean isSingleProjectMatch () { java.util.List < java.lang.String > projects = config . getProjects () ; boolean ret = ( projects . size () ) == NUMBER_CONSTANT ; if ( ret ) { java.lang.String projectMatch = projects . get ( NUMBER_CONSTANT ) ; if ( ( com.googlesource.gerrit.plugins.replication.ReplicationFilter . getPatternType ( projectMatch ) ) != ( ReplicationFilter.PatternType.EXACT_MATCH ) ) { ret = false ; } } return ret ; }
public < V > void newConstantMetric ( java.lang.String name , V value , com.google.gerrit.metrics.Description desc ) { desc . setConstant () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.lang.Class < V > type = ( ( java.lang.Class < V > ) ( value . getClass () ) ) ; com.google.gerrit.metrics.CallbackMetric0 < V > metric = newCallbackMetric ( name , type , desc ) ; newTrigger ( metric , ( ) - > metric . set ( value ) ) ; }
public static void abandon ( int changeId , java.lang.String message , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo > callback ) { com.google.gerrit.client.changes.ChangeApi.Message msg = new com.google.gerrit.client.changes.ChangeApi.Message () ; msg . setMessage ( message ) ; new com.google.gerrit.client.rpc.RestApi ( ( ( ( com.google.gerrit.client.changes.ChangeApi.URI ) + changeId ) + STRING_CONSTANT ) ) . data ( msg ) . post ( callback ) ; }
@ java.lang.Override public void description ( java.lang.String description ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.group.PutDescription.Input in = new com.google.gerrit.server.group.PutDescription.Input () ; in.description = description ; try { putDescription . apply ( rsrc , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
public void display ( final com.google.gerrit.common.data.ChangeDetail detail ) { clear () ; final com.google.gerrit.reviewdb.PatchSet currps = detail . getCurrentPatchSet () ; currentPatchSetId = currps . getId () ; patchSets = detail . getPatchSets () ; for ( final com.google.gerrit.reviewdb.PatchSet ps : patchSets ) { if ( ps == currps ) { add ( new com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel ( parent , detail , detail . getCurrentPatchSetDetail () ) ) ; } else { add ( new com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel ( parent , detail , ps ) ) ; } } }
private void renderActionTextDate ( com.google.gerrit.client.changes.ChangeInfo info ) { java.lang.String action ; if ( info . created () . equals ( info . updated () ) ) { action = Util.C . changeInfoBlockUploaded () ; } else { action = Util.C . changeInfoBlockUpdated () ; } actionText . setInnerText ( action ) ; actionDate . setInnerText ( com.google.gerrit.client.FormatUtil . relativeFormat ( info . updated () ) ) ; }
public com.google.gerrit.common.data.GroupReference resolve ( com.google.gerrit.common.data.GroupReference group ) { if ( group != null ) { if ( ( ( group . getUUID () ) == null ) || ( ( group . getUUID () . get () ) == null ) ) { return group ; } com.google.gerrit.common.data.GroupReference ref = byUUID . get ( group . getUUID () ) ; if ( ref != null ) { return ref ; } byUUID . put ( group . getUUID () , group ) ; } return group ; }
private static void codemirror ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id baseId , final com.google.gerrit.reviewdb.client.Patch.Key id , final com.google.gerrit.client.diff.DisplaySide side , final int line ) { com.google.gwt.core.client.GWT . runAsync ( new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { @ java.lang.Override public void onSuccess () { com.google.gerrit.client.Gerrit . display ( token , new com.google.gerrit.client.diff.SideBySide ( baseId , id . getParentKey () , id . get () , side , line ) ) ; } } ) ; }
@ java.lang.Override protected void configure () { propertyExtractor = createMock ( com.googlesource.gerrit.plugins.hooks.util.PropertyExtractor . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.util.PropertyExtractor . class ) . toInstance ( propertyExtractor ) ; ruleBase = createMock ( com.googlesource.gerrit.plugins.hooks.workflow.RuleBase . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.workflow.RuleBase . class ) . toInstance ( ruleBase ) ; actionExecutor = createMock ( com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor . class ) . toInstance ( actionExecutor ) ; bind ( com.googlesource.gerrit.plugins.hooks.its.ItsConfig . class ) . toInstance ( new com.googlesource.gerrit.plugins.hooks.its.ItsConfig ( null , null , null , null ) { @ java.lang.Override public boolean isEnabled ( com.google.gerrit.server.events.ChangeEvent event ) { return true ; } } ) ; }
private synchronized com.google.gerrit.testutil.InMemoryRepositoryManager.Repo get ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.testutil.InMemoryRepositoryManager.Repo repo = repos . get ( name . get () . toLowerCase () ) ; if ( repo != null ) { return repo ; } throw new org.eclipse.jgit.errors.RepositoryNotFoundException ( name . get () ) ; }
public long getEffectiveMaxObjectSizeLimit ( com.google.gerrit.server.project.ProjectState p ) { long global = getMaxObjectSizeLimit () ; long local = p . getMaxObjectSizeLimit () ; if ( ( global > NUMBER_CONSTANT ) && ( local > NUMBER_CONSTANT ) ) { return java.lang.Math . min ( global , local ) ; } return java.lang.Math . max ( global , local ) ; }
void schedule ( final com.google.gerrit.client.reviewdb.Project.NameKey project , final java.lang.String ref , final org.spearce.jgit.transport.URIish uri ) { synchronized ( pending ) { com.google.gerrit.git.PushOp e = pending . get ( uri ) ; if ( e == null ) { e = new com.google.gerrit.git.PushOp ( server , this , project . get () , remote , uri ) ; pool . schedule ( e , delay , java.util.concurrent.TimeUnit.SECONDS ) ; pending . put ( uri , e ) ; } e . addRef ( ref ) ; } }
com.google.gerrit.server.change.PostReviewers.Addition ccCurrentUser ( com.google.gerrit.server.CurrentUser user , com.google.gerrit.server.change.RevisionResource revision ) { return new com.google.gerrit.server.change.PostReviewers.Addition ( user . getUserName () , revision . getChangeResource () , com.google.common.collect.ImmutableSet . of ( user . getAccountId () ) , null , com.google.gerrit.extensions.client.ReviewerState.CC , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE , com.google.common.collect.ImmutableListMultimap . of () , true ) ; }
private java.util.List < com.google.gerrit.extensions.common.WebLinkInfo > getFileWebLinks ( com.google.gerrit.reviewdb.client.Project project , java.lang.String rev , java.lang.String file ) { java.util.List < com.google.gerrit.extensions.common.WebLinkInfo > fileWebLinks = new java.util.ArrayList <> () ; for ( com.google.gerrit.extensions.common.WebLinkInfo link : webLinks . getFileLinks ( project . getName () , rev , file ) ) { if ( ( ! ( com.google.common.base.Strings . isNullOrEmpty ( link.name ) ) ) && ( ! ( com.google.common.base.Strings . isNullOrEmpty ( link.url ) ) ) ) { fileWebLinks . add ( link ) ; } } return fileWebLinks ; }
private void applyReview ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final com.google.gerrit.extensions.api.changes.ReviewInput review ) throws com.google.gerrit.extensions.restapi.RestApiException { gApi . changes () . id ( patchSet . getId () . getParentKey () . get () ) . revision ( patchSet . getRevision () . get () ) . review ( review ) ; }
@ org.junit.Test public void commentOnReviewableChangeByOwnerNotifyOwnerReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . notTo ( sc.owner , sc.starrer ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ org.junit.Test public void testListComments ( ) throws java.lang.Exception { assertListComments ( revRes1 , com.google.common.collect.ImmutableMap . of ( STRING_CONSTANT , com.google.common.collect.Lists . newArrayList ( plc3 , plc1 , plc2 ) ) ) ; assertListComments ( revRes2 , java.util.Collections . < java.lang.String , java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchLineComment > > emptyMap () ) ; }
private static org.eclipse.jgit.lib.ObjectId emptyTree ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { try ( org.eclipse.jgit.lib.ObjectInserter oi = repo . newObjectInserter () ) { org.eclipse.jgit.lib.ObjectId id = oi . insert ( Constants.OBJ_TREE , new byte [] {} ) ; oi . flush () ; return id ; } }
@ java.lang.Override public void login ( final com.google.gerrit.server.account.AuthResult res , final boolean rememberMe ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId () ; final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res . getExternalId () ; if ( ( val ) != null ) { manager . destroy ( key ) ; } key = manager . createKey ( id ) ; val = manager . createVal ( key , id , rememberMe , identity , null , null ) ; saveCookie () ; }
private java.util.Collection < com.google.gerrit.server.config.ListCaches.CacheInfo > getCaches () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.Map < java.lang.String , com.google.gerrit.server.config.ListCaches.CacheInfo > caches = ( ( java.util.Map < java.lang.String , com.google.gerrit.server.config.ListCaches.CacheInfo > ) ( listCaches . get () . apply ( new com.google.gerrit.server.config.ConfigResource () ) ) ) ; for ( java.util.Map.Entry < java.lang.String , com.google.gerrit.server.config.ListCaches.CacheInfo > entry : caches . entrySet () ) { com.google.gerrit.server.config.ListCaches.CacheInfo cache = entry . getValue () ; cache.name = entry . getKey () ; } return caches . values () ; }
@ java.lang.Override protected void configure () { bind ( java.util.concurrent.ScheduledExecutorService . class ) . annotatedWith ( com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor . class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.ExecutorProvider . class ) . in ( Scopes.SINGLETON ) ; bind ( org.apache.http.impl.client.CloseableHttpClient . class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.HttpClientProvider . class ) . in ( Scopes.SINGLETON ) ; factory ( PostTask.Factory . class ) ; factory ( RemoteConfig.Factory . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , com.google.gerrit.common.EventListener . class ) . to ( com.googlesource.gerrit.plugins.webhooks.EventHandler . class ) ; install ( processors ) ; }
@ org.junit.Test public void testBlockedExtensionsCaseInsensitive ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( rw , com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_UC ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator . performValidation ( repo , c , rw , com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC ) ; java.util.List < java.lang.String > expected = new java.util.ArrayList <> () ; for ( java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_UC ) { expected . add ( ( STRING_CONSTANT + extension ) ) ; } com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.RevisionApi revision ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return revisionApi . create ( revisions . parse ( change , com.google.gerrit.extensions.restapi.IdString . fromDecoded ( id ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private void loadMessages ( ) throws com.google.gwtorm.client.OrmException { detail . setMessages ( db . changeMessages () . byChange ( changeId ) . toList () ) ; for ( final com.google.gerrit.client.reviewdb.ChangeMessage m : detail . getMessages () ) { acc . want ( m . getAuthor () ) ; } }
private com.google.gerrit.extensions.common.CommentInfo getDraftComment ( java.lang.String changeId , java.lang.String revId , java.lang.String uuid ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = userSession . get ( ( ( ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) + revId ) + STRING_CONSTANT ) + uuid ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; return newGson () . fromJson ( r . getReader () , com.google.gerrit.extensions.common.CommentInfo . class ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { if ( ! ( diffPref . getAccountId () . equals ( getAccountId () ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_CONSTANT + ( diffPref . getAccountId () ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) + ( getAccountId () ) ) ) ; } db . accountDiffPreferences () . upsert ( java.util.Collections . singleton ( diffPref ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
private java.util.Collection < java.security.PublicKey > computeHostKeys () { final org.apache.sshd.common.KeyPairProvider p = getKeyPairProvider () ; final java.util.List < java.security.PublicKey > keys = new java.util.ArrayList < java.security.PublicKey > ( NUMBER_CONSTANT ) ; com.google.gerrit.server.ssh.GerritSshDaemon . addPublicKey ( keys , p , KeyPairProvider.SSH_DSS ) ; com.google.gerrit.server.ssh.GerritSshDaemon . addPublicKey ( keys , p , KeyPairProvider.SSH_RSA ) ; return java.util.Collections . unmodifiableList ( keys ) ; }
public Account.Id lookup ( java.lang.String externalId ) throws com.google.gerrit.server.account.AccountException { try { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { com.google.gerrit.reviewdb.client.AccountExternalId ext = db . accountExternalIds () . get ( new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( externalId ) ) ; return ext != null ? ext . getAccountId () : null ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.server.account.AccountException ( ( STRING_CONSTANT + externalId ) , e ) ; } }
@ org.junit.Before public void setUp () { listenerMock = org.mockito.Mockito . mock ( com.google.gerrit.common.EventListener . class ) ; com.google.gerrit.extensions.registration.DynamicSet < com.google.gerrit.common.EventListener > listeners = com.google.gerrit.extensions.registration.DynamicSet . emptySet () ; listeners . add ( listenerMock ) ; broker = new com.ericsson.gerrit.plugins.highavailability.event.ForwardedAwareEventBroker ( null , listeners , null , null , null , null ) ; }
@ java.lang.Override public final void onSuccess ( com.google.gerrit.client.changes.ChangeList result ) { if ( isAttached () ) { if ( ( ( result . length () ) == NUMBER_CONSTANT ) && ( com.google.gerrit.client.changes.QueryScreen . isSingleQuery ( query ) ) ) { com.google.gerrit.client.changes.ChangeInfo c = result . get ( NUMBER_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change.Id id = c . legacy_id () ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( id ) ) ; } else { display ( result ) ; this . display () ; } } }
@ java.lang.Override public java.util.List < com.google.gerrit.server.project.CommentLinkInfo > get () { java.util.Set < java.lang.String > subsections = cfg . getSubsections ( ProjectConfig.COMMENTLINK ) ; java.util.List < com.google.gerrit.server.project.CommentLinkInfo > cls = com.google.common.collect.Lists . newArrayListWithCapacity ( subsections . size () ) ; for ( java.lang.String name : subsections ) { cls . add ( com.google.gerrit.server.git.ProjectConfig . buildCommentLink ( cfg , name , true ) ) ; } return com.google.common.collect.ImmutableList . copyOf ( cls ) ; }
java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > all ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { checkReadEnabled () ; if ( readFromGit ) { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( allUsersName ) ) { return all ( repo , com.google.gerrit.server.account.externalids.ExternalIdReader . readRevision ( repo ) ) ; } } return com.google.gerrit.server.account.externalids.ExternalId . from ( db . accountExternalIds () . all () . toList () ) ; }
public com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope [] getDefaultScopes () { if ( ( ( scopes ) == null ) || ( ( scopes . get ( STRING_CONSTANT ) ) == null ) ) { return new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope [ NUMBER_CONSTANT ] ; } return scopes . get ( STRING_CONSTANT ) . toArray ( new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope [ NUMBER_CONSTANT ] ) ; }
private static boolean valid ( final com.google.gerrit.client.data.ApprovalType at , final com.google.gerrit.client.workflow.FunctionState state ) { for ( final com.google.gerrit.client.data.ApprovalType t : com.google.gerrit.client.rpc.Common . getGerritConfig () . getApprovalTypes () ) { if ( ! ( state . isValid ( t ) ) ) { return false ; } } return true ; }
private org.eclipse.jgit.lib.Repository openRepository ( java.lang.String name ) throws java.io.IOException { name = com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener . urlToRepoKey ( canonicalWebUrl , name ) ; if ( repos . containsKey ( name ) ) { return repos . get ( name ) ; } org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; repos . put ( name , repo ) ; return repo ; }
@ java.lang.Override public void operationComplete ( org.apache.mina.core.future.IoFuture future ) { final com.google.gerrit.sshd.SshScope.Context ctx = sshScope . newContext ( null , sd , null ) ; final com.google.gerrit.sshd.SshScope.Context old = sshScope . set ( ctx ) ; try { sshLog . onLogout () ; } finally { sshScope . set ( old ) ; } }
public boolean exists ( final java.lang.String externalId ) throws com.google.gerrit.server.account.AccountException { try { final com.google.gerrit.client.reviewdb.ReviewDb db = schema . open () ; try { return ( db . accountExternalIds () . get ( new com.google.gerrit.client.reviewdb.AccountExternalId.Key ( externalId ) ) ) != null ; } finally { db . close () ; } } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.account.AccountException ( ( STRING_CONSTANT + externalId ) , e ) ; } }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) throws com.google.gerrit.common.errors.NoSuchGroupException { final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache . get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.common.errors.NoSuchGroupException ( groupId ) ; } return new com.google.gerrit.server.account.GroupControl ( user . get () , group ) ; }
protected java.util.List < com.google.gerrit.extensions.common.ChangeInfo > assertQuery ( com.google.gerrit.extensions.api.changes.Changes.QueryRequest query , com.google.gerrit.reviewdb.client.Change . . . changes ) throws java.lang.Exception { java.util.List < com.google.gerrit.extensions.common.ChangeInfo > result = query . get () ; java.lang.Iterable < java.lang.Integer > ids = com.google.gerrit.server.query.change.AbstractQueryChangesTest . ids ( result ) ; com.google.common.truth.Truth . assertThat ( ids ) . named ( format ( query , ids , changes ) ) . containsExactlyElementsIn ( com.google.gerrit.server.query.change.AbstractQueryChangesTest . ids ( changes ) ) . inOrder () ; return result ; }
@ java.lang.Override public void afterRefUpdates ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { if ( failAfterRefUpdates ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } for ( com.google.gerrit.server.git.strategy.SubmitStrategy strategy : strategies ) { com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments args = strategy.args ; if ( args.mergeTip . getCurrentTip () . equals ( args.mergeTip . getInitialTip () ) ) { continue; } com.google.gerrit.reviewdb.client.Account account = args.accountCache . get ( args.caller . getAccountId () ) . getAccount () ; args.hooks . doRefUpdatedHook ( args.destBranch , args.mergeTip . getInitialTip () , args.mergeTip . getCurrentTip () , account ) ; } }
private java.lang.String [] getPackFiles ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( p ) ) { java.io.File packDir = new java.io.File ( repo . getDirectory () , STRING_CONSTANT ) ; return packDir . list ( new java.io.FilenameFilter () { @ java.lang.Override public boolean accept ( java.io.File dir , java.lang.String name ) { return name . endsWith ( STRING_CONSTANT ) ; } } ) ; } }
public com.google.gerrit.server.git.ChangeSet completeChangeSet ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory . create ( db , change . getProject () , change . getId () ) ; cd . changeControl ( user ) ; if ( com.google.gerrit.server.change.Submit . wholeTopicEnabled ( cfg ) ) { return completeChangeSetIncludingTopics ( db , new com.google.gerrit.server.git.ChangeSet ( cd ) , user ) ; } return completeChangeSetWithoutTopic ( db , new com.google.gerrit.server.git.ChangeSet ( cd ) , user ) ; }
@ java.lang.Override public void stop () { if ( ( scanner ) != null ) { scanner . end () ; } synchronized ( this ) { boolean clean = ! ( running . isEmpty () ) ; for ( com.google.gerrit.server.plugins.Plugin p : running . values () ) { p . stop () ; } running . clear () ; broken . clear () ; if ( clean ) { java.lang.System . gc () ; processPendingCleanups () ; } } }
@ java.lang.Override public com.google.gerrit.common.data.WebLinkInfoCommon apply ( com.google.gerrit.extensions.webui.WebLink webLink ) { com.google.gerrit.extensions.common.WebLinkInfo info = ( ( com.google.gerrit.extensions.webui.FileHistoryWebLink ) ( webLink ) ) . getFileHistoryWebLink ( project , revision , file ) ; if ( info == null ) { return null ; } com.google.gerrit.common.data.WebLinkInfoCommon commonInfo = new com.google.gerrit.common.data.WebLinkInfoCommon () ; commonInfo.name = info.name ; commonInfo.imageUrl = info.imageUrl ; commonInfo.url = info.url ; commonInfo.target = info.target ; return commonInfo ; }
protected void rpc ( final java.lang.String name , java.lang.Class < ? extends com.google.gwtjsonrpc.client.RemoteJsonService > clazz ) { final com.google.inject.Key < com.google.gerrit.server.http.GerritJsonServlet > srv = com.google.inject.Key . get ( com.google.gerrit.server.http.GerritJsonServlet . class , com.google.inject.internal.UniqueAnnotations . create () ) ; final com.google.gerrit.server.http.GerritJsonServletProvider provider = new com.google.gerrit.server.http.GerritJsonServletProvider ( clazz ) ; bind ( clazz ) ; serve ( ( ( prefix ) + name ) ) . with ( srv ) ; bind ( srv ) . toProvider ( provider ) . in ( Scopes.SINGLETON ) ; }
@ org.junit.Test public void createProjectWithGitSuffix ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( gApi . projects () . create ( ( name + STRING_CONSTANT ) ) . get () . name ) . isEqualTo ( name ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead ( name , RefNames.REFS_CONFIG ) ; eventRecorder . assertRefUpdatedEvents ( name , RefNames.REFS_CONFIG , null , head ) ; eventRecorder . assertRefUpdatedEvents ( name , STRING_CONSTANT , new java.lang.String [] {} ) ; }
private void parseApproval ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id accountId , java.sql.Timestamp ts , java.lang.String line ) throws org.eclipse.jgit.errors.ConfigInvalidException { if ( accountId == null ) { throw parseException ( STRING_CONSTANT , psId . get () ) ; } if ( line . startsWith ( STRING_CONSTANT ) ) { parseRemoveApproval ( psId , accountId , ts , line ) ; } else { parseAddApproval ( psId , accountId , ts , line ) ; } }
public void login ( final com.google.gerrit.server.account.AuthResult res , final boolean rememberMe ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId () ; final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res . getExternalId () ; if ( ( val ) != null ) { manager . destroy ( key ) ; } key = manager . createKey ( id ) ; val = manager . createVal ( key , id , rememberMe , identity , null ) ; saveCookie () ; }
private void assertHasNoTags ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( rsrc . getNameKey () ) ) { if ( ! ( repo . getRefDatabase () . getRefs ( Constants.R_TAGS ) . isEmpty () ) ) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException ( java.lang.String . format ( STRING_CONSTANT , rsrc . getName () ) ) ; } } catch ( java.io.IOException e ) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException ( e ) ; } }
private void rebuild ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try { rebuilder . rebuild ( db . get () , rsrc . getId () ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( com.google.gerrit.extensions.restapi.IdString . fromDecoded ( rsrc . getId () . toString () ) ) ; } }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onSave ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.account.AccountApi . putDiffPreferences ( prefs , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.account.DiffPreferences > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.account.DiffPreferences result ) { com.google.gerrit.reviewdb.client.AccountDiffPreference p = com.google.gerrit.client.Gerrit . getAccountDiffPreference () ; if ( p == null ) { p = com.google.gerrit.reviewdb.client.AccountDiffPreference . createDefault ( com.google.gerrit.client.Gerrit . getUserAccount () . getId () ) ; } result . copyTo ( p ) ; com.google.gerrit.client.Gerrit . setAccountDiffPreference ( p ) ; } } ) ; if ( ( view ) != null ) { close () ; } }
public int compareTo ( com.googlecode.prolog_cafe.lang.Term anotherTerm ) { if ( ! ( anotherTerm instanceof com.googlecode.prolog_cafe.lang.ClosureTerm ) ) return AFTER ; if ( code . equals ( ( ( com.googlecode.prolog_cafe.lang.ClosureTerm ) ( anotherTerm ) ) . code ) ) return EQUAL ; return ( code . hashCode () ) - ( ( ( com.googlecode.prolog_cafe.lang.ClosureTerm ) ( anotherTerm ) ) . code . hashCode () ) ; }
public static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Change.Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onTabWidth ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > e ) { java.lang.String v = e . getValue () ; if ( ( v != null ) && ( ( v . length () ) > NUMBER_CONSTANT ) ) { prefs . tabSize ( java.lang.Math . max ( NUMBER_CONSTANT , java.lang.Integer . parseInt ( v ) ) ) ; if ( ( view ) != null ) { view . getEditor () . setOption ( STRING_CONSTANT , v ) ; } } }
@ java.lang.Override protected void onShowView ( com.google.gerrit.client.ui.Screen view ) { java.lang.String token = view . getToken () ; com.google.gwt.user.client.History . newItem ( token , false ) ; com.google.gerrit.client.Gerrit . dispatchHistoryHooks ( token ) ; if ( view instanceof com.google.gerrit.client.changes.ChangeListScreen ) { com.google.gerrit.client.Gerrit.lastChangeListToken = token ; } super . onShowView ( view ) ; view . onShowView () ; com.google.gerrit.client.Gerrit.lastViewToken = token ; }
private void fireEvent ( com.google.gerrit.common.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.common.ChangeHookRunner.EventListenerHolder holder : listeners . values () ) { if ( isVisibleTo ( event , holder.user , db ) ) { holder.listener . onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
public java.util.List toJava () { java.util.List < java.lang.Object > vec = new java.util.ArrayList < java.lang.Object > () ; com.googlecode.prolog_cafe.lang.Term t = this ; while ( t instanceof com.googlecode.prolog_cafe.lang.ListTerm ) { vec . add ( ( ( com.googlecode.prolog_cafe.lang.ListTerm ) ( t ) ) . car () . dereference () . toJava () ) ; t = ( ( com.googlecode.prolog_cafe.lang.ListTerm ) ( t ) ) . cdr () . dereference () ; } return vec ; }
private void abandonAllOpenChanges ( com.google.gerrit.reviewdb.client.Project.NameKey destProject ) throws com.google.gerrit.server.project.NoSuchChangeException { try { for ( com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery . byProjectOpen ( destProject ) ) { abandonOneChange ( cd . change () ) ; } } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { logWarn ( STRING_CONSTANT , e ) ; } }
@ org.junit.Test public void newPatchSetOnWipChangeSettingReadyInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isFalse () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , STRING_CONSTANT , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; assertThat ( sender ) . notSent () ; }
@ org.junit.Test public void testUnblockInParentBlockInLocal () { com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.ProjectControl d = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , d . controlForRef ( STRING_CONSTANT ) . canUpdate () ) ; }
@ org.junit.Test public void permissionLacksRef ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.config.AccessCheckInput in = new com.google.gerrit.extensions.api.config.AccessCheckInput () ; in.account = user.email ; in.permission = STRING_CONSTANT ; exception . expect ( com.google.gerrit.extensions.restapi.BadRequestException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; gApi . projects () . name ( normalProject . get () ) . checkAccess ( in ) ; }
public com.google.gerrit.server.project.ChangeControl changeControl ( ) throws com.google.gwtorm.server.OrmException { if ( ( changeControl ) == null ) { com.google.gerrit.reviewdb.client.Change c = change () ; try { changeControl = changeControlFactory . controlFor ( c , userFactory . create ( c . getOwner () ) ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return changeControl ; }
@ org.junit.Test public void testToString () { org.junit.Assert . assertEquals ( STRING_CONSTANT , f ( STRING_CONSTANT , STRING_CONSTANT ) . toString () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , f ( STRING_CONSTANT , STRING_CONSTANT ) . toString () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , f ( STRING_CONSTANT , STRING_CONSTANT ) . toString () ) ; }
@ java.lang.Override public AccountGroup.Id call ( ) throws com.google.gerrit.common.errors.NameAlreadyUsedException , com.google.gerrit.common.errors.PermissionDeniedException , com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.PerformCreateGroup performCreateGroup = performCreateGroupFactory . create () ; final com.google.gerrit.reviewdb.Account.Id me = user . getAccountId () ; return performCreateGroup . createGroup ( groupName , null , false , null , java.util.Collections . singleton ( me ) , null ) ; }
public static org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Map < java.io.File , byte [] > files ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { try ( org.eclipse.jgit.api.Git git = new org.eclipse.jgit.api.Git ( repo ) ) { if ( files != null ) { com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . addFiles ( git , files ) ; } return rw . parseCommit ( git . commit () . setMessage ( message ) . call () ) ; } }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.plugins.ServerInformationImpl . class ) ; bind ( com.google.gerrit.extensions.systemstatus.ServerInformation . class ) . to ( com.google.gerrit.server.plugins.ServerInformationImpl . class ) ; bind ( com.google.gerrit.server.plugins.PluginCleanerTask . class ) ; bind ( com.google.gerrit.server.plugins.PluginGuiceEnvironment . class ) ; bind ( com.google.gerrit.server.plugins.PluginLoader . class ) ; bind ( com.google.gerrit.server.plugins.CopyConfigModule . class ) ; listener () . to ( com.google.gerrit.server.plugins.PluginLoader . class ) ; }
@ org.junit.Test public void queryChangesMultipleTerms ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange () ; createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( ( STRING_CONSTANT + ( r1 . getChangeId () ) ) ) ; com.google.common.truth.Truth . assertThat ( com.google.common.collect.Iterables . getOnlyElement ( results ) . changeId ) . isEqualTo ( r1 . getChangeId () ) ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { diff = diffInfo ; fileSize = com.google.gerrit.client.diff.SideBySide2 . bucketFileSize ( diffInfo ) ; if ( prefs . syntaxHighlighting () ) { if ( ( fileSize . compareTo ( com.google.gerrit.client.diff.SideBySide2.FileSize.SMALL ) ) > NUMBER_CONSTANT ) { modeInjectorCb . onSuccess ( null ) ; } else { injectMode ( diffInfo , modeInjectorCb ) ; } } else { modeInjectorCb . onSuccess ( null ) ; } }
public java.util.List < com.google.gerrit.reviewdb.Patch > toPatchList ( final com.google.gerrit.reviewdb.PatchSet.Id setId ) { final java.util.ArrayList < com.google.gerrit.reviewdb.Patch > r = new java.util.ArrayList < com.google.gerrit.reviewdb.Patch > ( patches . size () ) ; for ( final com.google.gerrit.server.patch.PatchListEntry e : patches ) { r . add ( e . toPatch ( setId ) ) ; } return r ; }
public static void put ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String path , java.lang.String content , com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > cb ) { if ( Patch.COMMIT_MSG . equals ( path ) ) { com.google.gerrit.client.changes.ChangeEditApi . putMessage ( project , id , content , cb ) ; } else { com.google.gerrit.client.changes.ChangeEditApi . editFile ( project , id , path ) . put ( content , cb ) ; } }
private void savePatchSet ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . isDraft () ) ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } patchSet . setDraft ( false ) ; if ( ! ( wasDraftChange ) ) { ctx . saveChange () ; } ctx . getDb () . patchSets () . update ( java.util.Collections . singleton ( patchSet ) ) ; }
public void run () { try { final java.io.BufferedReader br = new java.io.BufferedReader ( new java.io.InputStreamReader ( in , STRING_CONSTANT ) ) ; try { java.lang.String line ; while ( ( line = br . readLine () ) != null ) { com.google.gerrit.httpd.gitweb.GitWebServlet.log . error ( ( STRING_CONSTANT + line ) ) ; } } finally { br . close () ; } } catch ( java.io.IOException e ) { com.google.gerrit.httpd.gitweb.GitWebServlet.log . debug ( STRING_CONSTANT , e ) ; } }
private boolean isEmpty () { return ( ( ( ( ( ( ( ( approvals . isEmpty () ) && ( ( changeMessage ) == null ) ) && ( comments . isEmpty () ) ) && ( reviewers . isEmpty () ) ) && ( ( status ) == null ) ) && ( ( subject ) == null ) ) && ( ( submitRecords ) == null ) ) && ( ( hashtags ) == null ) ) && ( ( topic ) == null ) ; }
private int getPort ( java.net.URL originalUrl ) { java.lang.String protocol = originalUrl . getProtocol () . toLowerCase () ; int port = originalUrl . getPort () ; if ( port == ( - NUMBER_CONSTANT ) ) { return protocol . equals ( STRING_CONSTANT ) ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } return port ; }
private com.google.common.truth.IterableSubject < ? extends com.google.common.truth.IterableSubject < , java.lang.String , java.lang.Iterable < java.lang.String > > , java.lang.String , java.lang.Iterable < java.lang.String > > assertThatGet ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { return com.google.common.truth.Truth . assertThat ( gApi . changes () . id ( r . getChange () . getId () . get () ) . getHashtags () ) ; }
private static void setXGerritAuthCookie ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp , com.google.gerrit.httpd.WebSession session ) { java.lang.String v = ( session != null ) ? session . getXGerritAuth () : STRING_CONSTANT ; javax.servlet.http.Cookie c = new javax.servlet.http.Cookie ( com.google.gerrit.common.data.HostPageData.XSRF_COOKIE_NAME , v ) ; c . setPath ( STRING_CONSTANT ) ; c . setSecure ( com.google.gerrit.httpd.raw.HostPageServlet . isSecure ( req ) ) ; c . setMaxAge ( ( session != null ? - NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ; rsp . addCookie ( c ) ; }
public com.google.common.collect.ListMultimap < java.lang.String , com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry > getEvents ( java.lang.String query ) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { try ( java.sql.Connection conn = ds . getConnection () ; java.sql.Statement stat = conn . createStatement () ) { return listEvents ( stat , query ) ; } catch ( java.sql.SQLException e ) { throw new com.ericsson.gerrit.plugins.eventslog.EventsLogException ( STRING_CONSTANT , e ) ; } }
@ org.junit.Test public void testCreate_Empty ( ) throws java.io.IOException { final java.nio.file.Path root = com.google.gerrit.server.config.SitePathsTest . random () ; try { java.nio.file.Files . createDirectory ( root ) ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertTrue ( site.isNew ) ; org.junit.Assert . assertEquals ( root , site.site_path ) ; } finally { java.nio.file.Files . delete ( root ) ; } }
@ com.google.inject.Provides @ com.google.inject.Singleton @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.FAVICON_SERVLET ) javax.servlet.http.HttpServlet getFaviconServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { com.google.gerrit.httpd.raw.StaticModule.Paths p = getPaths () ; if ( ( p.warFs ) != null ) { return new com.google.gerrit.httpd.raw.SingleFileServlet ( cache , p.warFs . getPath ( STRING_CONSTANT ) , false ) ; } return new com.google.gerrit.httpd.raw.SingleFileServlet ( cache , webappSourcePath ( STRING_CONSTANT ) , true ) ; }
private boolean canAddPatchSet ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( refControl . asForRef () . testOrFalse ( RefPermission.CREATE_CHANGE ) ) ) || ( isPatchSetLocked ( db ) ) ) { return false ; } if ( isOwner () ) { return true ; } return refControl . canAddPatchSet () ; }
@ org.junit.Test public void testWhereNameEq ( ) throws com.google.gwtorm.schema.QueryParseException { final org.antlr.runtime.tree.Tree t = parse ( STRING_CONSTANT ) ; org.junit.Assert . assertNotNull ( t ) ; org.junit.Assert . assertEquals ( QueryParser.WHERE , t . getType () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , t . getChildCount () ) ; com.google.gwtorm.schema.QueryParserTest . assertGoodEQ ( t . getChild ( NUMBER_CONSTANT ) , STRING_CONSTANT ) ; }
@ org.junit.Test ( expected = com.google.gerrit.server.git.RepositoryCaseMismatchException . class ) public void testNameCaseMismatchAfterRestart ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( ( ( com.google.gerrit.server.util.HostPlatform . isWin32 () ) || ( com.google.gerrit.server.util.HostPlatform . isMac () ) ) ) . isTrue () ; com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; repoManager . createRepository ( name ) ; com.google.gerrit.server.git.LocalDiskRepositoryManager newRepoManager = new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , cfg ) ; newRepoManager . createRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ) ; }
private static com.google.gson.Gson newGson ( com.google.common.collect.Multimap < java.lang.String , java.lang.String > config , @ javax.annotation.Nullable javax.servlet.http.HttpServletRequest req ) { com.google.gson.GsonBuilder gb = OutputFormat.JSON_COMPACT . newGsonBuilder () ; com.google.gerrit.httpd.restapi.RestApiServlet . enablePrettyPrint ( gb , config , req ) ; com.google.gerrit.httpd.restapi.RestApiServlet . enablePartialGetFields ( gb , config ) ; return gb . create () ; }
@ org.junit.Test public void defaultMessage ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange () . getChangeId () ; com.google.gerrit.extensions.common.ChangeInfo c = get ( changeId ) ; org.junit.Assert . assertNotNull ( c.messages ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , c.messages . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , c.messages . iterator () . next () . message ) ; }
protected java.util.SortedSet < java.lang.String > cacheNames () { final java.util.SortedSet < java.lang.String > names = new java.util.TreeSet < java.lang.String > () ; names . add ( STRING_CONSTANT ) ; names . add ( STRING_CONSTANT ) ; for ( final net.sf.ehcache.Ehcache c : getAllCaches () ) { names . add ( c . getName () ) ; } return names ; }
@ org.junit.Test public void byProjectPrefix ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo1 = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo2 = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo1 ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( newChange ( repo2 ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; assertQuery ( STRING_CONSTANT , change2 , change1 ) ; }
public static void projectDefault ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.dashboards.DashboardMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( STRING_CONSTANT + ( com.google.gwt.http.client.URL . encode ( project . get () ) . replaceAll ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ) . addParameterTrue ( STRING_CONSTANT ) . send ( com.google.gerrit.client.rpc.NativeMap . copyKeysIntoChildren ( callback ) ) ; }
@ org.junit.Test public void setAssigneeOnReviewableChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; assign ( sc , sc.owner , sc.assignee , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.reviewer , sc.ccer , sc.starrer ) . cc ( sc.owner ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.assignee ) ; }
public java.lang.String getGerritPluginName ( java.nio.file.Path srcPath ) { java.lang.String fileName = srcPath . getFileName () . toString () ; if ( isUiPlugin ( fileName ) ) { return fileName . substring ( NUMBER_CONSTANT , fileName . lastIndexOf ( CHAR_CONS ) ) ; } if ( serverPluginFactory . handles ( srcPath ) ) { return serverPluginFactory . getPluginName ( srcPath ) ; } return null ; }
private static void formatDiff ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree , org.eclipse.jgit.treewalk.AbstractTreeIterator newTree , java.lang.String path , org.eclipse.jgit.diff.DiffFormatter diff ) throws java.io.IOException { try { if ( ! ( path . isEmpty () ) ) { diff . setPathFilter ( org.eclipse.jgit.treewalk.filter.PathFilter . create ( path ) ) ; } diff . setRepository ( repo ) ; diff . setDetectRenames ( true ) ; diff . format ( oldTree , newTree ) ; } finally { diff . release () ; } }
@ java.lang.Override public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { if ( ( changeMessage ) == null ) { return; } emailReviewers ( ctx . getProject () , currChange , del , changeMessage ) ; reviewerDeleted . fire ( currChange , currPs , reviewer , ctx . getAccount () , changeMessage . getMessage () , newApprovals , oldApprovals , ctx . getWhen () ) ; }
private void serveGwtUi () { serve ( STRING_CONSTANT ) . with ( com.google.inject.Key . get ( javax.servlet.http.HttpServlet . class , com.google.inject.name.Names . named ( com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET ) ) ) ; if ( ( ( warFs ) == null ) && ( ( buckOut ) != null ) ) { filter ( STRING_CONSTANT ) . through ( new com.google.gerrit.httpd.raw.RecompileGwtUiFilter ( buckOut , unpackedWar ) ) ; } }
@ java.lang.Override protected void configure () { bind ( com.codahale.metrics.MetricRegistry . class ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . class ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.metrics.MetricMaker . class ) . to ( com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . class ) ; install ( new com.google.gerrit.metrics.proc.ProcMetricModule () ) ; install ( new com.google.gerrit.metrics.proc.JGitMetricModule () ) ; }
@ java.lang.Override protected void configure () { bind ( org.eclipse.jgit.lib.PersonIdent . class ) . annotatedWith ( com.google.gerrit.server.GerritPersonIdent . class ) . toProvider ( com.google.gerrit.server.GerritPersonIdentProvider . class ) ; bind ( com.google.gerrit.server.config.AllProjectsName . class ) . toProvider ( com.google.gerrit.server.config.AllProjectsNameProvider . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.config.AllUsersName . class ) . toProvider ( com.google.gerrit.server.config.AllUsersNameProvider . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( java.lang.String . class ) . annotatedWith ( com.google.gerrit.server.config.AnonymousCowardName . class ) . toProvider ( com.google.gerrit.server.config.AnonymousCowardNameProvider . class ) ; }
private boolean canCreateServiceUser () { if ( userProvider . get () . isIdentifiedUser () ) { com.google.gerrit.server.account.CapabilityControl ctl = userProvider . get () . getCapabilities () ; return ( ctl . canPerform ( ( ( ( pluginName ) + STRING_CONSTANT ) + ( CreateServiceUserCapability.ID ) ) ) ) || ( ctl . canAdministrateServer () ) ; } return false ; }
protected static void renameTable ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String from , java.lang.String to ) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.jdbc.JdbcSchema s = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) ; try ( com.google.gwtorm.jdbc.JdbcExecutor e = new com.google.gwtorm.jdbc.JdbcExecutor ( s ) ) { s . renameTable ( e , from , to ) ; } }
public com.google.gerrit.extensions.api.changes.ReviewerInfo format ( com.google.gerrit.extensions.api.changes.ReviewerInfo out , com.google.gerrit.server.permissions.PermissionBackend.ForChange perm , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change () . currentPatchSetId () ; return format ( out , perm , cd , approvalsUtil . byPatchSetUser ( db . get () , cd . notes () , perm . user () , psId , new com.google.gerrit.reviewdb.client.Account.Id ( out._accountId ) , null , null ) ) ; }
@ java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse ( com.google.gerrit.server.project.ProjectResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gerrit.server.permissions.PermissionBackendException , java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection . parse ( TopLevelResource.INSTANCE , id ) ; for ( com.google.gerrit.server.project.ProjectState pp : p . getProjectState () . parents () ) { if ( parent . getNameKey () . equals ( pp . getProject () . getNameKey () ) ) { return new com.google.gerrit.server.project.ChildProjectResource ( parent , p . getProjectState () ) ; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
@ org.junit.Test public void testSERVER_NullUser () { setFrom ( STRING_CONSTANT ) ; org.easymock.EasyMock . replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create () . from ( null ) ; org.junit.Assert . assertNotNull ( r ) ; org.junit.Assert . assertEquals ( ident . getName () , r.name ) ; org.junit.Assert . assertEquals ( ident . getEmailAddress () , r.email ) ; org.easymock.EasyMock . verify ( accountCache ) ; }
public com.google.common.base.Optional < com.googlesource.gerrit.plugins.manager.gson.SmartJson > getOptional ( java.lang.String fieldName ) { if ( ( ( jsonElem ) != null ) && ( ( jsonElem . getAsJsonObject () . get ( fieldName ) ) != null ) ) { return com.google.common.base.Optional . of ( com.googlesource.gerrit.plugins.manager.gson.SmartJson . of ( jsonElem . getAsJsonObject () . get ( fieldName ) ) ) ; } return com.google.common.base.Optional . absent () ; }
@ org.junit.Test public void testProjectNotVisible ( ) throws java.lang.Exception { final com.google.gerrit.server.project.NoSuchProjectException err = new com.google.gerrit.server.project.NoSuchProjectException ( name ) ; validate () . andThrow ( err ) ; doReplay () ; try { new com.google.gerrit.httpd.rpc.project.ListBranches ( pcf , grm , name ) . call () ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e2 ) { org.junit.Assert . assertSame ( err , e2 ) ; } doVerify () ; }
public final com.google.common.util.concurrent.ListenableFuture < > rebuildAsync ( final com.google.gerrit.reviewdb.client.Change.Id id , com.google.common.util.concurrent.ListeningExecutorService executor ) { return executor . submit ( new java.util.concurrent.Callable < java.lang.Void > () { @ java.lang.Override public java.lang.Void call ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory . open () ) { rebuild ( db , id ) ; } return null ; } } ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { results = new java.util.ArrayList <> () ; results . add ( push ( STRING_CONSTANT , null ) ) ; changeId = results . get ( NUMBER_CONSTANT ) . getChangeId () ; results . add ( push ( STRING_CONSTANT , changeId ) ) ; results . add ( push ( STRING_CONSTANT , changeId ) ) ; }
private com.google.common.collect.Multimap < java.lang.String , java.io.File > asMultimap ( java.util.List < java.io.File > plugins ) throws java.io.IOException { com.google.common.collect.Multimap < java.lang.String , java.io.File > map = com.google.common.collect.LinkedHashMultimap . create () ; for ( java.io.File srcFile : plugins ) { map . put ( getPluginName ( srcFile ) , srcFile ) ; } return map ; }
@ org.junit.Test public void testCreate_NotExisting ( ) throws java.io.IOException { final java.io.File root = com.google.gerrit.server.config.SitePathsTest . random () ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertTrue ( site.isNew ) ; org.junit.Assert . assertEquals ( root , site.site_path ) ; org.junit.Assert . assertEquals ( new java.io.File ( root , STRING_CONSTANT ) , site.etc_dir ) ; }
public final java.lang.String getDisplayName () { if ( ( created_by () . username () ) != null ) { return created_by () . username () ; } if ( ( created_by () . _account_id () ) != ( - NUMBER_CONSTANT ) ) { return java.lang.Integer . toString ( created_by () . _account_id () ) ; } return STRING_CONSTANT ; }
@ org.junit.Test public void submitWithFastForward ( ) throws java.lang.Exception { org.eclipse.jgit.api.Git git = createProject () ; org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead () ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change . getChangeId () ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead () ; com.google.common.truth.Truth . assertThat ( head . getId () ) . isEqualTo ( change . getCommitId () ) ; com.google.common.truth.Truth . assertThat ( head . getParent ( NUMBER_CONSTANT ) ) . isEqualTo ( oldHead ) ; assertSubmitter ( change . getChangeId () , NUMBER_CONSTANT ) ; }
@ java.lang.Override public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { final com.google.gwt.user.client.ui.Widget sender = ( ( com.google.gwt.user.client.ui.Widget ) ( event . getSource () ) ) ; if ( ( send ) == sender ) { onSend ( false ) ; } else if ( ( submit ) == sender ) { onSend ( true ) ; } else if ( ( cancel ) == sender ) { saveStateOnUnload = false ; goChange () ; } }
public java.lang.String getStatusDescription () { if ( ( exception ) != null ) { return getErrorDescription ( exception ) ; } else { switch ( status . getStatus () ) { case COMPLETE : return STRING_CONSTANT ; case CANCELLED : return STRING_CONSTANT ; default: return ( ( ( ( ( STRING_CONSTANT + ( currTask ) ) + STRING_CONSTANT ) + ( task ) ) + STRING_CONSTANT ) + ( lastPercentage ) ) + STRING_CONSTANT ; } } }
public java.lang.Iterable < com.google.gerrit.server.plugins.Plugin > getPlugins ( boolean all ) { if ( ! all ) { return running . values () ; } java.util.List < com.google.gerrit.server.plugins.Plugin > plugins = new java.util.ArrayList ( running . values () ) ; plugins . addAll ( disabled . values () ) ; return plugins ; }
public static void cherrypick ( java.lang.String project , int id , java.lang.String commit , java.lang.String destination , java.lang.String message , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.CherryPickInput cherryPickInput = com.google.gerrit.client.changes.ChangeApi.CherryPickInput . create () ; cherryPickInput . setMessage ( message ) ; cherryPickInput . setDestination ( destination ) ; com.google.gerrit.client.changes.ChangeApi . call ( project , id , commit , STRING_CONSTANT ) . post ( cherryPickInput , cb ) ; }
@ org.junit.Test public void rootJson ( ) throws java.lang.Exception { java.lang.String name = repo . getRepository () . getDescription () . getRepositoryName () ; java.util.Map < java.lang.String , com.google.gitiles.RepositoryDescription > res = buildJson ( com.google.gitiles.HostIndexServletTest.REPOS , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( res ) . hasSize ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( res ) . containsKey ( name ) ; com.google.gitiles.RepositoryDescription d = res . get ( name ) ; com.google.common.truth.Truth . assertThat ( d.name ) . isEqualTo ( name ) ; }
public void select ( java.lang.String urlType ) { com.google.gerrit.client.download.DownloadUrlLink first = null ; for ( com.google.gwt.user.client.ui.Widget w : this ) { if ( w instanceof com.google.gerrit.client.download.DownloadUrlLink ) { final com.google.gerrit.client.download.DownloadUrlLink d = ( ( com.google.gerrit.client.download.DownloadUrlLink ) ( w ) ) ; if ( first == null ) { first = d ; } if ( d . getUrlType () . equals ( urlType ) ) { d . select () ; return; } } } if ( first != null ) { first . select () ; } }
private < V , K > com.google.gerrit.server.cache.h2.H2CacheImpl.SqlStore < K , V > newSqlStore ( java.lang.String name , com.google.inject.TypeLiteral < K > keyType , long maxSize ) { java.io.File db = new java.io.File ( cacheDir , name ) . getAbsoluteFile () ; java.lang.String url = STRING_CONSTANT + ( db . toURI () . toString () ) ; return new com.google.gerrit.server.cache.h2.H2CacheImpl.SqlStore ( url , keyType , maxSize ) ; }
private java.lang.String newChange2 ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , ident , git , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ) ; return push . rm ( STRING_CONSTANT ) . getChangeId () ; }
public com.google.gerrit.server.notedb.ChangeNotes load ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = repoManager . openRepository ( change . getProject () ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { return new com.google.gerrit.server.notedb.ChangeNotes ( repo , change ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close () ; } }
private void ccApprovals ( final boolean includeZero ) { if ( ( db ) != null ) { try { for ( com.google.gerrit.client.reviewdb.ChangeApproval ap : db . changeApprovals () . byChange ( change . getId () ) ) { if ( ( ! includeZero ) && ( ( ap . getValue () ) == NUMBER_CONSTANT ) ) { continue; } add ( RecipientType.CC , ap . getAccountId () ) ; } } catch ( com.google.gwtorm.client.OrmException err ) {} } }
public void activate ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) { if ( ( indexOf ( patchSetId ) ) != ( - NUMBER_CONSTANT ) ) { if ( ! ( patchSetId . equals ( activePatchSetId ) ) ) { deactivate () ; com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel patchSetPanel = patchSetPanels . get ( patchSetId ) ; patchSetPanel . setActive ( true ) ; activePatchSetId = patchSetId ; } } else { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( patchSetId . getParentKey () ) ) ; } }
private void onSend () { if ( commentEditors . isEmpty () ) { onSend2 () ; } else { final com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > afterSaveDraft = new com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > () { private int done ; @ java.lang.Override public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { if ( ( ++ ( done ) ) == ( commentEditors . size () ) ) { onSend2 () ; } } } ; for ( final com.google.gerrit.client.patches.CommentEditorPanel p : commentEditors ) { p . saveDraft ( afterSaveDraft ) ; } } }
private void call ( com.googlecode.prolog_cafe.lang.BufferingPrologControl env , java.lang.String name ) { com.googlecode.prolog_cafe.lang.StructureTerm head = com.googlecode.prolog_cafe.lang.SymbolTerm . create ( pkg , name , NUMBER_CONSTANT ) ; if ( ! ( env . execute ( Prolog.BUILTIN , STRING_CONSTANT , head ) ) ) { org.junit.Assert . fail ( ( ( ( STRING_CONSTANT + ( pkg ) ) + STRING_CONSTANT ) + name ) ) ; } }
public java.lang.String formatWithEquals () { if ( ( value () ) <= ( ( short ) ( NUMBER_CONSTANT ) ) ) { return ( ( label () ) + CHAR_CONS ) + ( value () ) ; } return ( ( label () ) + STRING_CONSTANT ) + ( value () ) ; }
@ org.junit.Test public void testEscapeString () { final java.lang.String [] testPairs = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ; for ( int i = NUMBER_CONSTANT ; i < ( testPairs.length ) ; i += NUMBER_CONSTANT ) { org.junit.Assert . assertEquals ( com.google.gerrit.server.StringUtil . escapeString ( testPairs [ i ] ) , testPairs [ ( i + NUMBER_CONSTANT ) ] ) ; } }
@ java.lang.Override public void replace ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { try { replace ( com.google.gerrit.lucene.LuceneGroupIndex . idTerm ( group ) , toDocument ( group ) ) . get () ; } catch ( java.util.concurrent.ExecutionException | java.lang.InterruptedException e ) { throw new java.io.IOException ( e ) ; } }
private com.google.gerrit.extensions.common.CommentInfo addDraft ( java.lang.String changeId , java.lang.String revId , com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput c ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) + revId ) + STRING_CONSTANT ) , c ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_CREATED ) ; return newGson () . fromJson ( r . getReader () , com.google.gerrit.extensions.common.CommentInfo . class ) ; }
private com.google.gerrit.server.group.InternalGroup rebuild ( com.google.gerrit.server.group.InternalGroup group ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( allUsers ) ) { rebuilder . rebuild ( repo , com.google.gerrit.server.group.db.GroupBundle . fromReviewDb ( db , group . getId () ) , null ) ; com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig . loadForGroup ( repo , group . getGroupUUID () ) ; java.util.Optional < com.google.gerrit.server.group.InternalGroup > result = groupConfig . getLoadedGroup () ; com.google.common.truth.Truth . assertThat ( result ) . isPresent () ; return result . get () ; } }
private java.util.List < com.google.gerrit.server.git.CodeReviewCommit > sort ( java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toSort ) throws com.google.gerrit.server.git.IntegrationException { try { return new com.google.gerrit.server.git.RebaseSorter ( args.rw , args.mergeTip . getInitialTip () , args.alreadyAccepted , args.canMergeFlag , args.internalChangeQuery ) . sort ( toSort ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.git.IntegrationException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > guessRelevantGroupUUIDs () { java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groups = com.google.common.collect.Sets . newHashSet () ; for ( com.google.gerrit.reviewdb.client.Project.NameKey n : all () ) { com.google.gerrit.server.project.ProjectState p = byName . getIfPresent ( n . get () ) ; if ( p != null ) { groups . addAll ( p . getConfig () . getAllGroupUUIDs () ) ; } } return groups ; }
@ java.lang.Override public void onLoad () { super . onLoad () ; Util.GROUP_SVC . ownedGroups ( new com.google.gerrit.client.rpc.ScreenLoadCallback < java.util.List < com.google.gerrit.client.reviewdb.AccountGroup > > ( this ) { @ java.lang.Override protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.AccountGroup > result ) { groups . display ( result ) ; groups . finishDisplay ( true ) ; } } ) ; }
private void deleteOrUpdateDraftChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange () ; if ( deletedOnlyPatchSet () ) { deleteChangeOp = deleteChangeOpProvider . get () ; deleteChangeOp . updateChange ( ctx ) ; return; } if ( c . currentPatchSetId () . equals ( psId ) ) { c . setCurrentPatchSet ( previousPatchSetInfo ( ctx ) ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Mute.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.StarredChangesUtil.IllegalLabelException , com.google.gwtorm.server.OrmException { if ( ( rsrc . isUserOwner () ) || ( isMuted ( rsrc ) ) ) { return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; } stars . mute ( rsrc ) ; return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; }
@ org.junit.Test public void checkTrustChainWithExpiredKey ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey keyA = add ( com.google.gerrit.gpg.testutil.TestTrustKeys . keyA () , user ) ; com.google.gerrit.gpg.testutil.TestKey keyB = add ( com.google.gerrit.gpg.testutil.TestTrustKeys . keyB () , addUser ( STRING_CONSTANT ) ) ; com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory . create ( user , store ) ; assertProblems ( checker . check ( keyA . getPublicKey () ) , Status.OK , STRING_CONSTANT , ( ( STRING_CONSTANT + ( com.google.gerrit.gpg.PublicKeyStore . keyToString ( keyB . getPublicKey () ) ) ) + STRING_CONSTANT ) , STRING_CONSTANT ) ; }
@ java.lang.Override public synchronized void start () { com.google.gerrit.server.plugins.PluginLoader.log . info ( ( STRING_CONSTANT + ( pluginsDir . getAbsolutePath () ) ) ) ; srvInfoImpl.state = ServerInformation.State.STARTUP ; rescan () ; srvInfoImpl.state = ServerInformation.State.RUNNING ; if ( ( scanner ) != null ) { scanner . start () ; } }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { diff = diffInfo ; fileSize = com.google.gerrit.client.diff.SideBySide2 . bucketFileSize ( diffInfo ) ; if ( prefs . syntaxHighlighting () ) { if ( ( fileSize . compareTo ( com.google.gerrit.client.diff.SideBySide2.FileSize.SMALL ) ) > NUMBER_CONSTANT ) { modeInjectorCb . onSuccess ( null ) ; } else { injectMode ( diffInfo , modeInjectorCb ) ; } } else { modeInjectorCb . onSuccess ( null ) ; } }
@ java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { change = new com.google.gerrit.reviewdb.client.Change ( com.google.gerrit.server.change.ChangeInserter . getChangeKey ( commit ) , changeId , ctx . getAccountId () , new com.google.gerrit.reviewdb.client.Branch.NameKey ( ctx . getProject () , refName ) , ctx . getWhen () ) ; change . setStatus ( com.google.common.base.MoreObjects . firstNonNull ( status , Change.Status.NEW ) ) ; change . setTopic ( topic ) ; return change ; }
public com.google.gerrit.common.data.PermissionRule getRule ( com.google.gerrit.common.data.GroupReference group , boolean create ) { initRules () ; for ( com.google.gerrit.common.data.PermissionRule r : rules ) { if ( com.google.gerrit.common.data.Permission . sameGroup ( r , group ) ) { return r ; } } if ( create ) { com.google.gerrit.common.data.PermissionRule r = new com.google.gerrit.common.data.PermissionRule ( group ) ; rules . add ( r ) ; return r ; } return null ; }
protected void blurHint () { if ( ( ( ! ( hintOn ) ) && ( ( getHintText () ) != null ) ) && ( STRING_CONSTANT . equals ( super . getText () ) ) ) { hintOn = true ; super . setText ( getHintText () ) ; if ( ( getHintStyleName () ) != null ) { addStyleName ( getHintStyleName () ) ; } } }
private static java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > predicates ( java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > ids ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > r = com.google.common.collect.Lists . newArrayListWithCapacity ( ids . size () ) ; for ( com.google.gerrit.reviewdb.client.Change.Id id : ids ) { r . add ( new com.google.gerrit.server.query.change.LegacyChangeIdPredicate ( id ) ) ; } return r ; }
@ org.junit.Test public void testProjectCreation ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectA = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . createRepository ( projectA ) ) { com.google.common.truth.Truth . assertThat ( repo ) . isNotNull () ; } try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( projectA ) ) { com.google.common.truth.Truth . assertThat ( repo ) . isNotNull () ; } com.google.common.truth.Truth . assertThat ( repoManager . list () ) . containsExactly ( projectA ) ; }
private static com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy toEmailStrategy ( java.lang.String v , boolean emailStrategyColumnExists ) throws com.google.gwtorm.server.OrmException { if ( v == null ) { return com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ; } if ( emailStrategyColumnExists ) { return com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy . valueOf ( v ) ; } if ( v . equals ( STRING_CONSTANT ) ) { return com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ; } else if ( v . equals ( STRING_CONSTANT ) ) { return com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ; } else { throw new com.google.gwtorm.server.OrmException ( ( STRING_CONSTANT + v ) ) ; } }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ) ; servlet = new com.google.gitiles.RepositoryIndexServlet ( new com.google.gitiles.TestGitilesAccess ( repo . getRepository () ) , new com.google.gitiles.DefaultRenderer () , new com.google.gitiles.TimeCache () ) ; }
public boolean unify ( com.googlecode.prolog_cafe.lang.Term t , com.googlecode.prolog_cafe.lang.Trail trail ) { t = t . dereference () ; if ( t instanceof com.googlecode.prolog_cafe.lang.VariableTerm ) { ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( t ) ) . bind ( this , trail ) ; return true ; } return com.googlecode.prolog_cafe.lang.SymbolTerm . eq ( this , t ) ; }
void scanTree ( org.eclipse.jgit.revwalk.RevTree tree ) throws java.io.IOException , org.eclipse.jgit.errors.CorruptObjectException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { if ( config.render ) { try ( org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk ( reader ) ) { tw . setRecursive ( false ) ; tw . addTree ( tree ) ; while ( ( tw . next () ) && ( ! ( isPresent () ) ) ) { considerEntry ( tw ) ; } } } }
private void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.ChangeInfo revertChange , java.sql.Timestamp when ) { com.google.gerrit.server.extensions.events.ChangeReverted.Event event = new com.google.gerrit.server.extensions.events.ChangeReverted.Event ( change , revertChange , when ) ; for ( com.google.gerrit.extensions.events.ChangeRevertedListener l : listeners ) { try { l . onChangeReverted ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( com.google.gerrit.server.extensions.events.ChangeReverted.log , e ) ; } } }
private static java.util.TreeSet < java.lang.String > filterNonCore ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.actions.ActionInfo > m ) { java.util.TreeSet < java.lang.String > ids = new java.util.TreeSet ( m . keySet () ) ; for ( java.lang.String id : com.google.gerrit.client.change.Actions.CORE ) { ids . remove ( id ) ; } return ids ; }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission.WithValue perm ) { com.google.gerrit.common.data.PermissionRange r = label ( perm . permissionName () ) ; if ( ( ( perm . forUser () ) == ( ForUser.ON_BEHALF_OF ) ) && ( r . isEmpty () ) ) { return false ; } return r . contains ( perm . value () ) ; }
public static boolean isChangeReviewed ( com.google.gerrit.reviewdb.client.Account.Id self , com.google.gerrit.server.query.change.ChangeData cd , java.lang.Iterable < com.google.gerrit.reviewdb.client.ChangeMessage > msgs ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.ChangeMessage > reversed = ChangeNotes.MESSAGE_BY_TIME . reverse () . sortedCopy ( msgs ) ; com.google.gerrit.reviewdb.client.Account.Id changeOwnerId = cd . change () . getOwner () ; for ( com.google.gerrit.reviewdb.client.ChangeMessage cm : reversed ) { if ( self . equals ( cm . getAuthor () ) ) { return true ; } else if ( changeOwnerId . equals ( cm . getAuthor () ) ) { return false ; } } return false ; }
@ org.junit.Test public void hashtagChangeNotes ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; java.util.LinkedHashSet < java.lang.String > hashtags = new java.util.LinkedHashSet <> () ; hashtags . add ( STRING_CONSTANT ) ; hashtags . add ( STRING_CONSTANT ) ; update . setHashtags ( hashtags ) ; update . commit () ; com.google.gerrit.server.notedb.ChangeNotes notes = newNotes ( c ) ; com.google.common.truth.Truth . assertThat ( notes . getHashtags () ) . isEqualTo ( hashtags ) ; }
@ org.junit.Test public void namedAnchor ( ) throws java.lang.Exception { java.lang.String markdown = STRING_CONSTANT + STRING_CONSTANT ; repo . branch ( STRING_CONSTANT ) . commit () . add ( STRING_CONSTANT , markdown ) . create () ; java.lang.String html = buildHtml ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( html ) . contains ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( html ) . contains ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) ) ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig . gerrit ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . sshd ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . contactstore ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . user ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . auth ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . gitweb ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . repo ( config , rs ) ; }
@ org.junit.Test public void deleteBranchesNotFound ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput () ; java.util.List < java.lang.String > branches = com.google.common.collect.Lists . newArrayList ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; branches . add ( STRING_CONSTANT ) ; input.branches = branches ; try { project () . deleteBranches ( input ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceConflictException e ) { com.google.common.truth.Truth . assertThat ( e ) . hasMessageThat () . isEqualTo ( errorMessageForBranches ( com.google.common.collect.ImmutableList . of ( STRING_CONSTANT ) ) ) ; } assertBranchesDeleted ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchProjectException , java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache . checkedGet ( name ) ; if ( ( projectState == null ) || ( ! ( projectState . getProject () . getState () . permitsRead () ) ) ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( name ) ; } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository ( projectState , userProvider . get () , repoManager . openRepository ( name ) , visibleRefFilterFactory , permissionBackend ) ; }
public void setEnableIntralineDifference ( final boolean on ) { enableIntralineDifference = on ; if ( enableIntralineDifference ) { intralineDifference . setValue ( getValue () . intralineDifference ) ; } else { intralineDifference . setValue ( false ) ; } toggleEnabledStatus ( save . isEnabled () ) ; }
@ org.junit.Test public void getRelatedNoResult ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = push . to ( STRING_CONSTANT ) . getPatchSetId () ; java.util.List < com.google.gerrit.server.change.GetRelated.ChangeAndCommit > related = getRelated ( ps ) ; com.google.common.truth.Truth . assertThat ( related ) . isEmpty () ; }
protected void command ( final com.google.gerrit.sshd.CommandName parent , final java.lang.Class < ? extends com.google.gerrit.sshd.BaseCommand > clazz ) { com.google.gerrit.sshd.CommandMetaData meta = clazz . getAnnotation ( com.google.gerrit.sshd.CommandMetaData . class ) ; if ( meta == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } bind ( com.google.gerrit.sshd.Commands . key ( parent , meta . name () , meta . description () ) ) . to ( clazz ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onEdit ( com.google.gwt.event.dom.client.ClickEvent e ) { e . stopPropagation () ; java.lang.String t = com.google.gerrit.client.Dispatcher . toEditScreen ( psId , comment . path () , comment . line () ) ; if ( ! ( com.google.gerrit.client.Gerrit . isSignedIn () ) ) { com.google.gerrit.client.Gerrit . doSignIn ( t ) ; } else { com.google.gerrit.client.Gerrit . display ( t ) ; } }
@ java.lang.Override public com.google.gerrit.common.data.ChangeDetail call ( ) throws com.google.gerrit.common.errors.EmailException , com.google.gerrit.common.errors.NoSuchEntityException , com.google.gerrit.server.patch.PatchSetInfoNotAvailableException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { rebaseChange . rebase ( patchSetId , currentUser ) ; return changeDetailFactory . create ( patchSetId . getParentKey () ) . call () ; }
@ java.lang.Override public com.google.gerrit.extensions.client.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.client.Project.NameKey project , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) { try { com.google.gerrit.server.change.ChangeKindCacheImpl.Key key = new com.google.gerrit.server.change.ChangeKindCacheImpl.Key ( prior , next , useRecursiveMerge ) ; return cache . get ( key , new com.google.gerrit.server.change.ChangeKindCacheImpl.Loader ( key , repoManager , project , repo , rw ) ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.change.ChangeKindCacheImpl.log . warn ( ( ( ( STRING_CONSTANT + ( next . name () ) ) + STRING_CONSTANT ) + project ) , e ) ; return com.google.gerrit.extensions.client.ChangeKind.REWORK ; } }
@ java.lang.Override protected void configure () { bind ( DataSourceProvider.Context . class ) . toInstance ( DataSourceProvider.Context.MULTI_USER ) ; bind ( com.google.inject.Key . get ( javax.sql.DataSource . class , com.google.inject.name.Names . named ( STRING_CONSTANT ) ) ) . toProvider ( com.google.gerrit.server.schema.DataSourceProvider . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; listener () . to ( com.google.gerrit.server.schema.DataSourceProvider . class ) ; }
@ org.junit.Test public void voteOnBehalfOfInvalidLabel ( ) throws java.lang.Exception { allowCodeReviewOnBehalfOf () ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi . changes () . id ( r . getChangeId () ) . current () ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput () ; in.onBehalfOf = user.id . toString () ; in . label ( STRING_CONSTANT , NUMBER_CONSTANT ) ; exception . expect ( com.google.gerrit.extensions.restapi.BadRequestException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; revision . review ( in ) ; }
@ org.junit.Test public void queryChangesOneTerm ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange () ; com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , results . size () ) ; org.junit.Assert . assertEquals ( r2 . getChangeId () , results . get ( NUMBER_CONSTANT ) . changeId ) ; org.junit.Assert . assertEquals ( r1 . getChangeId () , results . get ( NUMBER_CONSTANT ) . changeId ) ; }
@ java.lang.Override public void run () { net.codemirror.lib.CodeMirror.Viewport fromTo = cm . getViewport () ; int size = ( ( fromTo . getTo () ) - ( fromTo . getFrom () ) ) + NUMBER_CONSTANT ; if ( ( cm . getOldViewportSize () ) == size ) { return; } cm . setOldViewportSize ( size ) ; diffTable.sidePanel . adjustGutters ( cmB ) ; }
@ java.lang.Override public void run () { try { com.google.gerrit.server.mail.MergedSender cm = mergedSenderFactory . create ( ps . getId () . getParentKey () ) ; cm . setFrom ( user . getAccountId () ) ; cm . setPatchSet ( ps , info ) ; cm . send () ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.git.ReceiveCommits.log . error ( ( STRING_CONSTANT + ( ps . getId () ) ) , e ) ; } }
private void writeBlobText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , com.google.gitiles.PathServlet.WalkResult wr ) throws java.io.IOException { setModeHeader ( res , wr.type ) ; try ( java.io.Writer writer = startRenderText ( req , res ) ; java.io.OutputStream out = com.google.common.io.BaseEncoding . base64 () . encodingStream ( writer ) ) { wr . getObjectReader () . open ( wr.id ) . copyTo ( out ) ; } }
@ org.junit.Test public void commentOnReviewableChangeByReviewer ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.reviewer , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.reviewer ) . to ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ java.lang.Override public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin hubLogin = loginProvider . get ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ) ; if ( ! ( hubLogin . isLoggedIn () ) ) { hubLogin . login ( request , response , authScopes ) ; return; } else { chain . doFilter ( request , response ) ; } }
private void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.AccountInfo editor , java.lang.String oldTopic , java.sql.Timestamp when ) { com.google.gerrit.server.extensions.events.TopicEdited.Event event = new com.google.gerrit.server.extensions.events.TopicEdited.Event ( change , editor , oldTopic , when ) ; for ( com.google.gerrit.extensions.events.TopicEditedListener l : listeners ) { try { l . onTopicEdited ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( com.google.gerrit.server.extensions.events.TopicEdited.log , e ) ; } } }
private PushOneCommit.Result push ( java.lang.String ref , java.lang.String subject , java.lang.String fileName , java.lang.String content , java.lang.String changeId ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , git , subject , fileName , content , changeId ) ; return push . to ( ref ) ; }
private java.lang.String getHttpBasicAuthenticationHeader ( final javax.servlet.http.HttpServletRequest req ) throws java.io.UnsupportedEncodingException { java.lang.String hdr = req . getHeader ( com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GIT_AUTHORIZATION_HEADER ) ; if ( ( hdr == null ) || ( ! ( hdr . startsWith ( com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GIT_AUTHENTICATION_BASIC ) ) ) ) { return null ; } return new java.lang.String ( org.apache.commons.codec.binary.Base64 . decodeBase64 ( hdr . substring ( com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GIT_AUTHENTICATION_BASIC . length () ) ) , com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter . encoding ( req ) ) ; }
public void assertCanDelete ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException { try { pcHandler . assertCanDelete ( rsrc ) ; dbHandler . assertCanDelete ( rsrc . getControl () . getProject () ) ; } catch ( com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e . getMessage () ) ; } }
private java.lang.String getRedirectUrl ( java.lang.String pathAndQuery ) throws java.io.IOException , javax.servlet.ServletException { com.google.gitiles.TestViewFilter.Result result = com.google.gitiles.TestViewFilter . service ( repo , pathAndQuery ) ; com.google.common.truth.Truth . assertThat ( result . getResponse () . getStatus () ) . isEqualTo ( NUMBER_CONSTANT ) ; return result . getResponse () . getHeader ( com.google.common.net.HttpHeaders.LOCATION ) ; }
@ org.junit.Test public void queryChangesOneTerm ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange () ; com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( results . size () ) . is ( NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( results . get ( NUMBER_CONSTANT ) . changeId ) . isEqualTo ( r2 . getChangeId () ) ; com.google.common.truth.Truth . assertThat ( results . get ( NUMBER_CONSTANT ) . changeId ) . isEqualTo ( r1 . getChangeId () ) ; }
private static java.lang.String legacyAll ( final java.lang.String token ) { if ( com.google.gerrit.client.Dispatcher . matchPrefix ( STRING_CONSTANT , token ) ) { return com.google.gerrit.common.PageLinks . toChangeQuery ( STRING_CONSTANT ) ; } if ( com.google.gerrit.client.Dispatcher . matchPrefix ( STRING_CONSTANT , token ) ) { return com.google.gerrit.common.PageLinks . toChangeQuery ( STRING_CONSTANT ) ; } if ( com.google.gerrit.client.Dispatcher . matchPrefix ( STRING_CONSTANT , token ) ) { return com.google.gerrit.common.PageLinks . toChangeQuery ( STRING_CONSTANT ) ; } return null ; }
public void storeEvent ( java.lang.String projectName , java.sql.Timestamp timestamp , java.lang.String event ) throws java.sql.SQLException { execute ( ( ( java.lang.String . format ( STRING_CONSTANT , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.PROJECT_ENTRY , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.EVENT_ENTRY ) ) + ( java.lang.String . format ( STRING_CONSTANT , projectName , timestamp , event ) ) ) ) ; }
private static org.eclipse.jgit.dircache.DirCache readTree ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId base ) throws java.io.IOException { final org.eclipse.jgit.dircache.DirCache dc = org.eclipse.jgit.dircache.DirCache . newInCore () ; final org.eclipse.jgit.dircache.DirCacheBuilder b = dc . builder () ; b . addTree ( new byte [ NUMBER_CONSTANT ] , DirCacheEntry.STAGE_0 , rw . getObjectReader () , rw . parseTree ( base ) ) ; b . finish () ; return dc ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.Put.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException { try { editModifier . modifyFile ( rsrc . getChangeEdit () , rsrc . getPath () , com.google.common.io.ByteStreams . toByteArray ( input.content . getInputStream () ) ) ; } catch ( com.google.gerrit.server.project.InvalidChangeOperationException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e . getMessage () ) ; } return com.google.gerrit.extensions.restapi.Response . none () ; }
@ org.junit.Test public void singlePeeledTagText ( ) throws java.lang.Exception { setUpSimpleRefs () ; com.google.gitiles.FakeHttpServletResponse res = buildText ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( res . getActualBodyString () ) . isEqualTo ( ( ( ( ( id ( STRING_CONSTANT ) ) + STRING_CONSTANT ) + ( peeled ( STRING_CONSTANT ) ) ) + STRING_CONSTANT ) ) ; }
public com.google.gerrit.testutil.InMemoryDatabase create ( ) throws com.google.gwtorm.server.OrmException { if ( ! ( created ) ) { created = true ; try ( com.google.gerrit.reviewdb.server.ReviewDb c = open () ) { schemaCreator . create ( c ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gwtorm.server.OrmException ( STRING_CONSTANT , e ) ; } } return this ; }
@ org.junit.Test public void createEmptyChange_MissingBranch ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = new com.google.gerrit.extensions.common.ChangeInfo () ; ci.project = project . get () ; com.google.gerrit.acceptance.RestResponse r = adminSession . post ( STRING_CONSTANT , ci ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_BAD_REQUEST ) ; com.google.common.truth.Truth . assertThat ( r . getEntityContent () ) . contains ( STRING_CONSTANT ) ; }
@ java.lang.Override public boolean hasNext () { if ( ( next ) != null ) { return true ; } if ( ! ( itr . hasNext () ) ) { return false ; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr . next () ; if ( r . get () . startsWith ( pfx ) ) { next = r ; return true ; } itr = java.util.Collections . < com.google.gerrit.reviewdb.client.Project.NameKey > emptyList () . iterator () ; return false ; }
@ com.google.common.annotations.VisibleForTesting java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes , int indexLimit ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( hashes . size () ) > indexLimit ) { return byCommitsOnBranchNotMergedFromDatabase ( repo , db , branch , hashes ) ; } return byCommitsOnBranchNotMergedFromIndex ( branch , hashes ) ; }
@ java.lang.Override public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.AddMembers.PutMember.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input () ; in._oneMember = id ; java.util.List < com.google.gerrit.server.group.MembersCollection.MemberInfo > list = put . get () . apply ( resource , in ) ; if ( ( list . size () ) == NUMBER_CONSTANT ) { return list . get ( NUMBER_CONSTANT ) ; } throw new java.lang.IllegalStateException () ; }
@ org.junit.Test public void testCreate_NonEmpty ( ) throws java.io.IOException { final java.nio.file.Path root = com.google.gerrit.server.config.SitePathsTest . random () ; final java.nio.file.Path txt = root . resolve ( STRING_CONSTANT ) ; try { java.nio.file.Files . createDirectory ( root ) ; java.nio.file.Files . createFile ( txt ) ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertFalse ( site.isNew ) ; org.junit.Assert . assertEquals ( root , site.site_path ) ; } finally { java.nio.file.Files . delete ( txt ) ; java.nio.file.Files . delete ( root ) ; } }
private java.util.Collection < com.google.gerrit.server.config.ListCaches.CacheInfo > getCaches () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.Map < java.lang.String , com.google.gerrit.server.config.ListCaches.CacheInfo > caches = ( ( java.util.Map < java.lang.String , com.google.gerrit.server.config.ListCaches.CacheInfo > ) ( listCaches . apply ( new com.google.gerrit.server.config.ConfigResource () ) ) ) ; for ( java.util.Map.Entry < java.lang.String , com.google.gerrit.server.config.ListCaches.CacheInfo > entry : caches . entrySet () ) { com.google.gerrit.server.config.ListCaches.CacheInfo cache = entry . getValue () ; cache.name = entry . getKey () ; } return caches . values () ; }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = object . change () ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id current = c . currentPatchSetId () ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : object . approvals () . get ( current ) ) { if ( ( p . getValue () ) != NUMBER_CONSTANT ) { return true ; } } return false ; }
@ java.lang.Override public void start ( final org.apache.sshd.server.Environment env ) throws java.io.IOException { java.lang.String s = env . getEnv () . get ( Environment.ENV_COLUMNS ) ; if ( ( s != null ) && ( ! ( s . isEmpty () ) ) ) { try { columns = java.lang.Integer . parseInt ( s ) ; } catch ( java.lang.NumberFormatException err ) { columns = NUMBER_CONSTANT ; } } super . start ( env ) ; }
@ java.lang.Override public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( change . getStatus () . isOpen () ) { if ( ( destTopicName ) != null ) { change . setTopic ( destTopicName ) ; } change . setStatus ( Change.Status.NEW ) ; change . setCurrentPatchSet ( result.info ) ; com.google.gerrit.server.ChangeUtil . updated ( change ) ; return change ; } else { return null ; } }
@ org.junit.Test public void mergeByReviewer ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , sc.reviewer ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.reviewer ) . to ( sc.owner ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; }
@ java.lang.Override public void start () { queue . start () ; if ( ( ( srvInfo . getState () ) == ( ServerInformation.State.STARTUP ) ) && ( config . isReplicateAllOnPluginStart () ) ) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState ( new com.googlesource.gerrit.plugins.replication.PushResultProcessing.GitUpdateProcessing ( eventDispatcher . get () , database ) ) ; pushAllFuture . set ( pushAll . create ( null , com.googlesource.gerrit.plugins.replication.ReplicationFilter . all () , state ) . schedule ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ) ; } }
@ java.lang.Override public void doFilter ( javax.servlet.ServletRequest req , javax.servlet.ServletResponse rsp , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { com.google.gerrit.httpd.WebSession s = ( user . get () . isIdentifiedUser () ) ? session . get () : null ; setXsrfTokenCookie ( ( ( javax.servlet.http.HttpServletRequest ) ( req ) ) , ( ( javax.servlet.http.HttpServletResponse ) ( rsp ) ) , s ) ; chain . doFilter ( req , rsp ) ; }
@ java.lang.Override public AccountGroup.Id call ( ) throws com.google.gerrit.common.errors.NameAlreadyUsedException , com.google.gerrit.common.errors.PermissionDeniedException , com.google.gwtorm.server.OrmException { final com.google.gerrit.server.account.PerformCreateGroup performCreateGroup = performCreateGroupFactory . create () ; final com.google.gerrit.reviewdb.client.Account.Id me = user . getAccountId () ; return performCreateGroup . createGroup ( groupName , null , visibleToAll , null , java.util.Collections . singleton ( me ) , null ) . getId () ; }
public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws com.google.gerrit.server.GpgException , com.google.gerrit.server.patch.PatchListNotAvailableException , com.google.gwtorm.server.OrmException , java.io.IOException { accountLoader = accountLoaderFactory . create ( has ( com.google.gerrit.extensions.client.ListChangesOption.DETAILED_ACCOUNTS ) ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( ctl . getProject () . getNameKey () ) ) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo ( ctl , changeDataFactory . create ( db . get () , ctl ) , in , repo , true ) ; accountLoader . fill () ; return rev ; } }
public boolean isOwner () { if ( canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.OWN , ( ( short ) ( NUMBER_CONSTANT ) ) ) ) { return true ; } if ( ( ! ( getRefName () . equals ( RefRight.ALL . substring ( NUMBER_CONSTANT , ( ( RefRight.ALL . length () ) - NUMBER_CONSTANT ) ) ) ) ) && ( getProjectControl () . isOwner () ) ) { return true ; } return false ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.project.ProjectResource project , com.google.gerrit.extensions.api.projects.DeleteBranchesInput input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( ( input == null ) || ( ( input.branches ) == null ) ) || ( input.branches . isEmpty () ) ) { throw new com.google.gerrit.extensions.restapi.BadRequestException ( STRING_CONSTANT ) ; } deleteRefFactory . create ( project ) . refs ( input.branches ) . delete () ; return com.google.gerrit.extensions.restapi.Response . none () ; }
private void plugins ( java.io.StringWriter w ) { java.util.List < java.lang.String > urls = new java.util.ArrayList <> () ; for ( com.google.gerrit.extensions.webui.WebUiPlugin u : plugins ) { urls . add ( java.lang.String . format ( STRING_CONSTANT , u . getPluginName () , u . getJavaScriptResourcePath () ) ) ; } if ( ! ( urls . isEmpty () ) ) { w . write ( ( ( com.google.gerrit.httpd.raw.HostPageServlet.HPD_ID ) + STRING_CONSTANT ) ) ; json ( urls , w ) ; w . write ( STRING_CONSTANT ) ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito . when ( config . getUser () ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProviderTest.EMPTY ) ; org.mockito.Mockito . when ( config . getPassword () ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProviderTest.EMPTY ) ; org.mockito.Mockito . when ( config . getConnectionTimeout () ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProviderTest.TIME_INTERVAL ) ; org.mockito.Mockito . when ( config . getSocketTimeout () ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProviderTest.TIME_INTERVAL ) ; }
private java.util.SortedSet < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > getScopes ( java.lang.String baseScopeKey , com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope . . . scopes ) { java.util.HashSet < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > fullScopes = new java.util.HashSet ( scopesForKey ( baseScopeKey ) ) ; fullScopes . addAll ( java.util.Arrays . asList ( scopes ) ) ; return new java.util.TreeSet ( fullScopes ) ; }
@ java.lang.Override public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.ChangeMergedEvent ) { com.google.gerrit.server.events.ChangeMergedEvent changeMergedEvent = ( ( com.google.gerrit.server.events.ChangeMergedEvent ) ( event ) ) ; mergeResults . put ( changeMergedEvent.change.number , changeMergedEvent.newRev ) ; } else if ( event instanceof com.google.gerrit.server.events.RefUpdatedEvent ) { com.google.gerrit.server.events.RefUpdatedEvent e = ( ( com.google.gerrit.server.events.RefUpdatedEvent ) ( event ) ) ; com.google.gerrit.server.data.RefUpdateAttribute r = e.refUpdate ; refUpdatedEvents . put ( ( ( ( r.project ) + STRING_CONSTANT ) + ( r.refName ) ) , r ) ; } }
@ org.junit.Test public void testReadVarInt32 ( ) throws java.io.IOException { org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.google.gerrit.server.ioutil.BasicSerialization . readVarInt32 ( com.google.gerrit.server.ioutil.BasicSerializationTest . r ( com.google.gerrit.server.ioutil.BasicSerializationTest . b ( NUMBER_CONSTANT ) ) ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.google.gerrit.server.ioutil.BasicSerialization . readVarInt32 ( com.google.gerrit.server.ioutil.BasicSerializationTest . r ( com.google.gerrit.server.ioutil.BasicSerializationTest . b ( NUMBER_CONSTANT ) ) ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.google.gerrit.server.ioutil.BasicSerialization . readVarInt32 ( com.google.gerrit.server.ioutil.BasicSerializationTest . r ( com.google.gerrit.server.ioutil.BasicSerializationTest . b ( ( NUMBER_CONSTANT | NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ) ) ) ; }
@ org.junit.Test public void testCreate_NotExisting ( ) throws java.io.IOException { final java.nio.file.Path root = com.google.gerrit.server.config.SitePathsTest . random () ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertTrue ( site.isNew ) ; org.junit.Assert . assertEquals ( root . toFile () , site.site_path ) ; org.junit.Assert . assertEquals ( root . resolve ( STRING_CONSTANT ) , site.etc_dir ) ; }
@ org.junit.Test public void canReadCommitWhenAllRefsVisible ( ) throws java.lang.Exception { allow ( project , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , STRING_CONSTANT ) ; org.eclipse.jgit.lib.ObjectId id = repo . branch ( STRING_CONSTANT ) . commit () . create () ; com.google.gerrit.server.project.ProjectControl pc = newProjectControl () ; org.eclipse.jgit.revwalk.RevWalk rw = repo . getRevWalk () ; org.junit.Assert . assertTrue ( pc . canReadCommit ( db , rw , rw . parseCommit ( id ) ) ) ; }
private void saveChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gwtorm.server.OrmException { change = ctx . getChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx . getUpdate ( psId ) ; wasDraftChange = ( change . getStatus () ) == ( Change.Status.DRAFT ) ; if ( wasDraftChange ) { change . setStatus ( Change.Status.NEW ) ; update . setStatus ( change . getStatus () ) ; com.google.gerrit.server.ChangeUtil . updated ( change ) ; ctx . getDb () . changes () . update ( java.util.Collections . singleton ( change ) ) ; } }
static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Change.Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; }
private void executeIndexTask ( int id , boolean deleted ) { if ( ! ( com.ericsson.gerrit.plugins.syncindex.Context . isForwardedEvent () ) ) { com.ericsson.gerrit.plugins.syncindex.IndexEventHandler.SyncIndexTask syncIndexTask = new com.ericsson.gerrit.plugins.syncindex.IndexEventHandler.SyncIndexTask ( id , deleted ) ; if ( queuedTasks . add ( syncIndexTask ) ) { executor . execute ( syncIndexTask ) ; } } }
void onDelete ( int idx ) { java.lang.String path = list . get ( idx ) . path () ; com.google.gerrit.client.changes.ChangeEditApi . delete ( project . get () , curr . getParentKey () . get () , path , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChangeInEditMode ( project , curr . getParentKey () ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) {} } ) ; }
private static byte [] readWholeEntry ( com.google.gerrit.server.plugins.PluginContentScanner scanner , com.google.gerrit.server.plugins.PluginEntry entry ) throws java.io.IOException { byte [] data = new byte [ entry . getSize () . get () . intValue () ] ; try ( java.io.InputStream in = scanner . getInputStream ( entry ) ) { org.eclipse.jgit.util.IO . readFully ( in , data , NUMBER_CONSTANT , data.length ) ; } return data ; }
public com.google.gerrit.extensions.api.changes.ReviewerInfo format ( com.google.gerrit.extensions.api.changes.ReviewerInfo out , com.google.gerrit.server.permissions.PermissionBackend.ForChange perm , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change () . currentPatchSetId () ; return format ( out , perm , cd , approvalsUtil . byPatchSetUser ( db . get () , cd . notes () , perm . user () , psId , new com.google.gerrit.reviewdb.client.Account.Id ( out._accountId ) , null , null ) ) ; }
@ org.junit.Test public void testCreate_Empty ( ) throws java.io.IOException { final java.io.File root = com.google.gerrit.server.config.SitePathsTest . random () ; try { org.junit.Assert . assertTrue ( root . mkdir () ) ; final com.google.gerrit.server.config.SitePaths site = new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert . assertTrue ( site.isNew ) ; org.junit.Assert . assertEquals ( root , site.site_path ) ; } finally { root . delete () ; } }
@ org.junit.Test public void getChildProject ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey child = createProject ( STRING_CONSTANT ) ; com.google.gerrit.extensions.common.ProjectInfo childInfo = gApi . projects () . name ( allProjects . get () ) . child ( child . get () ) . get () ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjectInfo ( projectCache . get ( child ) . getProject () , childInfo ) ; }
public boolean unify ( com.googlecode.prolog_cafe.lang.Term t , com.googlecode.prolog_cafe.lang.Trail trail ) { if ( t instanceof com.googlecode.prolog_cafe.lang.VariableTerm ) return ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( t ) ) . unify ( this , trail ) ; if ( ! ( t instanceof com.googlecode.prolog_cafe.lang.DoubleTerm ) ) return false ; return ( this . val ) == ( ( ( com.googlecode.prolog_cafe.lang.DoubleTerm ) ( t ) ) . value () ) ; }
@ java.lang.Override protected void configure () { factory ( MetaDataUpdate.InternalFactory . class ) ; bind ( MetaDataUpdate.Server . class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder () , org.eclipse.jgit.transport.PostUploadHook . class ) . to ( com.google.gerrit.server.git.UploadPackMetricsHook . class ) ; com.google.gerrit.extensions.registration.DynamicItem . itemOf ( binder () , com.google.gerrit.server.git.ChangeReportFormatter . class ) ; com.google.gerrit.extensions.registration.DynamicItem . bind ( binder () , com.google.gerrit.server.git.ChangeReportFormatter . class ) . to ( com.google.gerrit.server.git.DefaultChangeReportFormatter . class ) ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , com.google.gerrit.server.git.MergeTip mergeTip , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted , java.util.Set < com.google.gerrit.server.git.CodeReviewCommit > incoming , com.google.gerrit.server.util.RequestId submissionId , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling , com.google.common.collect.ListMultimap < com.google.gerrit.extensions.api.changes.RecipientType , com.google.gerrit.reviewdb.client.Account.Id > accountsToNotify , com.google.gerrit.server.git.SubmoduleOp submoduleOp , boolean dryrun ) ;
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onChangeRevision ( com.google.gwt.event.dom.client.ChangeEvent e ) { int idx = revisionList . getSelectedIndex () ; if ( NUMBER_CONSTANT <= idx ) { java.lang.String n = revisionList . getValue ( idx ) ; revisionList . setEnabled ( false ) ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange2 ( changeId , n ) ) ; } }
@ org.junit.Test public void setParentForAllProjects_Conflict ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . put ( ( ( STRING_CONSTANT + ( allProjects . get () ) ) + STRING_CONSTANT ) , newParentInput ( project . get () ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_CONFLICT ) ; r . consume () ; }
@ java.lang.Override protected void configureServlets () { rpc ( com.google.gerrit.server.rpc.AccountServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.AccountSecurityImpl . class ) ; rpc ( com.google.gerrit.server.rpc.GroupAdminServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ChangeListServiceImpl . class ) ; rpc ( com.google.gerrit.server.patch.PatchDetailServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.ProjectAdminServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.SuggestServiceImpl . class ) ; rpc ( com.google.gerrit.server.rpc.SystemInfoServiceImpl . class ) ; install ( new com.google.gerrit.server.rpc.changedetail.ChangeDetailModule () ) ; }
private void deleteRemoteSsh ( org.eclipse.jgit.transport.URIish uri ) { java.lang.String quotedPath = QuotedString.BOURNE . quote ( uri . getPath () ) ; java.lang.String cmd = STRING_CONSTANT + quotedPath ; java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.ReplicationQueue . newErrorBufferStream () ; try { executeRemoteSsh ( uri , cmd , errStream ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog . error ( java.lang.String . format ( ( STRING_CONSTANT + ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) ) , uri , e , cmd , errStream ) , e ) ; } }
private boolean requestRegistration ( final org.openid4java.message.AuthRequest aReq ) { if ( AuthRequest.SELECT_ID . equals ( aReq . getIdentity () ) ) { return true ; } try { return ! ( accountManager . exists ( aReq . getIdentity () ) ) ; } catch ( com.google.gerrit.server.account.AccountException e ) { com.google.gerrit.server.openid.OpenIdServiceImpl.log . warn ( STRING_CONSTANT , e ) ; return true ; } }
@ java.lang.Override public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c . setStatus ( Change.Status.MERGED ) ; c . setSubmissionId ( submissionId ) ; if ( ! ( merged . equals ( c . currentPatchSetId () ) ) ) { try { c . setCurrentPatchSet ( patchSetInfoFactory . get ( db , notes , merged ) ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1 ) { logError ( ( STRING_CONSTANT + merged ) , e1 ) ; } } com.google.gerrit.server.ChangeUtil . updated ( c ) ; return c ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchChangeException { final com.google.gerrit.reviewdb.client.Project.NameKey projectKey = change . getProject () ; try { return projectControl . controlFor ( projectKey , user ) . controlFor ( change ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () , e ) ; } }
private static java.lang.String defaultOf ( com.google.gerrit.reviewdb.client.Project proj ) { final java.lang.String defaultId = com.google.common.base.MoreObjects . firstNonNull ( proj . getLocalDefaultDashboard () , com.google.common.base.Strings . nullToEmpty ( proj . getDefaultDashboard () ) ) ; if ( defaultId . startsWith ( com.google.gerrit.reviewdb.client.RefNames.REFS_DASHBOARDS ) ) { return defaultId . substring ( com.google.gerrit.reviewdb.client.RefNames.REFS_DASHBOARDS . length () ) ; } return defaultId ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; loggedEvents = new java.util.ArrayList <> () ; loggerName = this . getClass () . getCanonicalName () ; loggerName = loggerName . substring ( NUMBER_CONSTANT , ( ( loggerName . length () ) - NUMBER_CONSTANT ) ) ; loggerSettings = com.google.gerrit.testutil.log.LogUtil . logToCollection ( loggerName , loggedEvents ) ; }
@ java.lang.Override protected com.google.gerrit.common.data.ProjectAccess updateProjectConfig ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md , boolean parentProjectUpdate ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchProjectException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.revwalk.RevCommit commit = config . commit ( md ) ; gitRefUpdated . fire ( config . getProject () . getNameKey () , RefNames.REFS_CONFIG , base , commit . getId () , user . asIdentifiedUser () . getAccount () ) ; projectCache . evict ( config . getProject () ) ; return projectAccessFactory . create ( projectName ) . call () ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { group1 = group ( STRING_CONSTANT ) ; group2 = group ( STRING_CONSTANT ) ; group3 = group ( STRING_CONSTANT ) ; user1 = user ( STRING_CONSTANT , STRING_CONSTANT , group1 ) ; user2 = user ( STRING_CONSTANT , STRING_CONSTANT , group2 ) ; user3 = user ( STRING_CONSTANT , STRING_CONSTANT , group1 , group2 ) ; }
private com.google.common.collect.FluentIterable < com.google.gerrit.server.project.ListBranches.BranchInfo > filterBranches ( com.google.common.collect.FluentIterable < com.google.gerrit.server.project.ListBranches.BranchInfo > branches ) throws com.google.gerrit.extensions.restapi.BadRequestException { if ( ! ( com.google.common.base.Strings . isNullOrEmpty ( matchSubstring ) ) ) { branches = branches . filter ( new com.google.gerrit.server.project.ListBranches.SubstringPredicate ( matchSubstring ) ) ; } else if ( ! ( com.google.common.base.Strings . isNullOrEmpty ( matchRegex ) ) ) { branches = branches . filter ( new com.google.gerrit.server.project.ListBranches.RegexPredicate ( matchRegex ) ) ; } return branches ; }
public static java.lang.String toProjectAdmin ( com.google.gerrit.reviewdb.client.Project.NameKey n , java.lang.String panel ) { if ( ( panel == null ) || ( ProjectScreen.INFO . equals ( panel ) ) ) { return STRING_CONSTANT + ( n . toString () ) ; } return ( ( STRING_CONSTANT + ( n . toString () ) ) + STRING_CONSTANT ) + panel ; }
public java.util.List < java.lang.Integer > getValuesAsList () { if ( ( intList ) == null ) { intList = new java.util.ArrayList ( values . size () ) ; for ( com.google.gerrit.common.data.LabelValue v : values ) { intList . add ( java.lang.Integer . valueOf ( v . getValue () ) ) ; } java.util.Collections . sort ( intList ) ; java.util.Collections . reverse ( intList ) ; } return intList ; }
private void openRepos ( java.util.Collection < com.google.gerrit.reviewdb.client.Project.NameKey > projects ) throws com.google.gerrit.server.git.IntegrationException { for ( com.google.gerrit.reviewdb.client.Project.NameKey project : projects ) { try { orm . openRepo ( project ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException noProject ) { logWarn ( ( ( ( STRING_CONSTANT + ( noProject . project () ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) ) ; abandonAllOpenChangeForDeletedProject ( noProject . project () ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.git.IntegrationException ( ( STRING_CONSTANT + project ) , e ) ; } } }
public com.google.gitiles.GitilesView.Builder setRevision ( com.google.gitiles.Revision revision ) { switch ( type ) { case HOST_INDEX : case REPOSITORY_INDEX : case REFS : case DESCRIBE : throw new java.lang.IllegalStateException ( java.lang.String . format ( STRING_CONSTANT , type ) ) ; default: this . revision = com.google.common.base.Preconditions . checkNotNull ( revision ) ; return this ; } }
@ java.lang.Override public int weigh ( com.google.gerrit.server.patch.DiffSummaryKey key , com.google.gerrit.server.patch.DiffSummary value ) { int size = ( ( ( ( ( NUMBER_CONSTANT + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + NUMBER_CONSTANT ) + NUMBER_CONSTANT ) + NUMBER_CONSTANT ) + NUMBER_CONSTANT ; for ( java.lang.String p : value . getPaths () ) { size += ( ( ( ( NUMBER_CONSTANT + NUMBER_CONSTANT ) + ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) + NUMBER_CONSTANT ) + NUMBER_CONSTANT ) + ( ( p . length () ) * NUMBER_CONSTANT ) ; } return size ; }
void onSaveSuccess ( final com.google.gerrit.reviewdb.Account result ) { final com.google.gerrit.reviewdb.Account me = com.google.gerrit.client.Gerrit . getUserAccount () ; me . setFullName ( result . getFullName () ) ; me . setPreferredEmail ( result . getPreferredEmail () ) ; com.google.gerrit.client.Gerrit . refreshMenuBar () ; if ( ( accountSettings ) != null ) { accountSettings . display ( me ) ; } }
Project.NameKey projectName ( org.eclipse.jgit.lib.Repository repo ) { java.nio.file.Path gitDir = repo . getDirectory () . toPath () ; if ( gitDir . startsWith ( basePath ) ) { java.lang.String p = basePath . relativize ( gitDir ) . toString () ; java.lang.String n = p . substring ( NUMBER_CONSTANT , ( ( p . length () ) - ( STRING_CONSTANT . length () ) ) ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; } com.googlesource.gerrit.plugins.quota.ProjectNameResolver.log . warn ( ( STRING_CONSTANT + gitDir ) ) ; return null ; }
@ java.lang.Override public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.server.project.ProjectState project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) { try { return cache . get ( new com.google.gerrit.server.change.ChangeKindCacheImpl.Key ( repo , prior , next , useRecursiveMerge ) ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.change.ChangeKindCacheImpl.log . warn ( ( ( ( STRING_CONSTANT + ( next . name () ) ) + STRING_CONSTANT ) + ( project . getProject () . getName () ) ) , e ) ; return ChangeKind.REWORK ; } }
public void run () { int height = ( com.google.gwt.user.client.Window . getClientHeight () ) - ( ( com.google.gerrit.client.Gerrit . getHeaderFooterHeight () ) + NUMBER_CONSTANT ) ; cmA . setHeight ( height ) ; cmB . setHeight ( height ) ; render ( diff ) ; commentManager . render ( comments , prefs . expandAllComments () ) ; skipManager . render ( prefs . context () , diff ) ; }
private void ensureRowMeasurements () { if ( ( ( rowHeight ) == NUMBER_CONSTANT ) && ( ( rows ) != null ) ) { surrogate . setInnerSafeHtml ( rows . get ( NUMBER_CONSTANT ) ) ; getContainerElement () . appendChild ( surrogate ) ; rowHeight = surrogate . getOffsetHeight () ; rowWidth = surrogate . getOffsetWidth () ; getContainerElement () . removeChild ( surrogate ) ; getContainerElement () . getStyle () . setHeight ( ( ( rowHeight ) * ( rows . size () ) ) , Style.Unit.PX ) ; } }
private void removeRow ( final int row ) { for ( final com.google.gerrit.client.changes.ChangeTable.Section s : sections ) { if ( row < ( s.titleRow ) ) { ( s.titleRow ) -- ; } if ( row < ( s.dataBegin ) ) { ( s.dataBegin ) -- ; } } table . removeRow ( row ) ; }
private void abandonAllOpenChanges ( com.google.gerrit.reviewdb.client.Project.NameKey destProject ) { try { for ( com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery . byProjectOpen ( destProject ) ) { abandonOneChange ( cd . change () ) ; } } catch ( com.google.gerrit.server.project.NoSuchChangeException | java.io.IOException | com.google.gwtorm.server.OrmException e ) { logWarn ( ( STRING_CONSTANT + destProject ) , e ) ; } }
private org.eclipse.jgit.internal.storage.file.LockFile lockForImport ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { java.io.File importStatus = projects.FS_LAYOUT . getImportStatusFile ( targetProject . get () ) ; org.eclipse.jgit.internal.storage.file.LockFile lockFile = new org.eclipse.jgit.internal.storage.file.LockFile ( importStatus ) ; try { if ( lockFile . lock () ) { return lockFile ; } else { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } } catch ( java.io.IOException e1 ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } }
public com.google.gerrit.server.change.ReviewerJson.ReviewerInfo format ( com.google.gerrit.server.change.ReviewerJson.ReviewerInfo out , com.google.gerrit.server.project.ChangeControl ctl ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange () . currentPatchSetId () ; return format ( out , ctl , approvalsUtil . byPatchSetUser ( db . get () , ctl , psId , out._id ) ) ; }
void initMeter () { if ( ( meter ) == null ) { meter = new com.google.gwtexpui.progress.client.ProgressBar ( Util.M . loadingPatchSet ( psid . get () ) ) ; this . myBody . clear () ; this . myBody . add ( meter ) ; } updateMeter () ; }
public int shutdown () { int cnt = NUMBER_CONSTANT ; if ( ( pool ) != null ) { for ( java.lang.Runnable r : pool . getQueue () ) { com.googlesource.gerrit.plugins.replication.Destination.repLog . warn ( java.lang.String . format ( STRING_CONSTANT , r ) ) ; } cnt = pool . shutdownNow () . size () ; pool = null ; } return cnt ; }
public < T extends java.io.Closeable > void putEntry ( T out , java.lang.String path , byte [] data ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) org.eclipse.jgit.api.ArchiveCommand.Format < T > fmt = ( ( org.eclipse.jgit.api.ArchiveCommand.Format < T > ) ( format ) ) ; fmt . putEntry ( out , null , path , FileMode.REGULAR_FILE , new org.eclipse.jgit.lib.ObjectLoader.SmallObject ( org.eclipse.jgit.lib.FileMode.TYPE_FILE , data ) ) ; }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , com.google.gerrit.extensions.restapi.CacheControl c , @ com.google.gerrit.common.Nullable java.lang.Throwable err ) throws java.io.IOException { if ( err != null ) { com.google.gerrit.util.http.RequestUtil . setErrorTraceAttribute ( req , err ) ; } com.google.gerrit.httpd.restapi.RestApiServlet . configureCaching ( req , res , null , null , c ) ; res . setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet . replyText ( req , res , msg ) ; }
private boolean canCreateServiceUser () { if ( userProvider . get () . isIdentifiedUser () ) { return ( permissionBackend . user ( userProvider ) . testOrFalse ( new com.google.gerrit.extensions.api.access.PluginPermission ( pluginName , CreateServiceUserCapability.ID ) ) ) || ( permissionBackend . user ( userProvider ) . testOrFalse ( com.google.gerrit.server.permissions.GlobalPermission.ADMINISTRATE_SERVER ) ) ; } else { return false ; } }
@ java.lang.Override public boolean isActive ( java.lang.String username ) throws com.google.gerrit.server.account.AccountException , java.io.IOException , javax.naming.NamingException , javax.security.auth.login.LoginException { final javax.naming.directory.DirContext ctx = helper . open () ; try { com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper . getSchema ( ctx ) ; helper . findAccount ( schema , ctx , username , false ) ; return true ; } catch ( com.google.gerrit.server.auth.NoSuchUserException e ) { return false ; } finally { helper . close ( ctx ) ; } }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.diff.FileInfo > m ) { files . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . _number () ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , rev . _number () ) , style , editMessage , reply , ( ( edit ) != null ) ) ; files . setValue ( m , myLastReply , comments . get ( NUMBER_CONSTANT ) , drafts . get ( NUMBER_CONSTANT ) , fileTableMode ) ; }
private void onCreateProject ( final com.google.gerrit.reviewdb.client.Project.NameKey newProjectName ) { namesUpdateLock . lock () ; try { java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > n = new java.util.TreeSet ( names ) ; n . add ( newProjectName ) ; names = java.util.Collections . unmodifiableSortedSet ( n ) ; } finally { namesUpdateLock . unlock () ; } }
static com.google.gerrit.server.auth.ldap.LdapType guessType ( final javax.naming.directory.DirContext ctx ) throws javax.naming.NamingException { final javax.naming.directory.Attributes rootAtts = ctx . getAttributes ( STRING_CONSTANT ) ; javax.naming.directory.Attribute supported = rootAtts . get ( STRING_CONSTANT ) ; if ( ( supported != null ) && ( supported . contains ( STRING_CONSTANT ) ) ) { return new com.google.gerrit.server.auth.ldap.LdapType.ActiveDirectory ( rootAtts ) ; } return com.google.gerrit.server.auth.ldap.LdapType.RFC_2307 ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onKeyMap ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ChangeEvent e ) { com.google.gerrit.extensions.client.KeyMapType keyMapType = com.google.gerrit.extensions.client.KeyMapType . valueOf ( keyMap . getValue ( keyMap . getSelectedIndex () ) ) ; prefs . keyMapType ( keyMapType ) ; if ( ( view ) != null ) { view . getEditor () . setOption ( STRING_CONSTANT , keyMapType . name () . toLowerCase () ) ; } }
public com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Branch.NameKey , com.google.gerrit.server.query.change.ChangeData > changesByBranch ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.Branch.NameKey , com.google.gerrit.server.query.change.ChangeData > ret = com.google.common.collect.ArrayListMultimap . create () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData . values () ) { ret . put ( cd . change () . getDest () , cd ) ; } return ret ; }
private void printTree ( final com.google.gerrit.sshd.commands.TreeNode node , final int level , final boolean isLast ) { printNode ( node , level , isLast ) ; final java.util.SortedSet < ? extends com.google.gerrit.sshd.commands.TreeNode > childNodes = node . getChildren () ; int i = NUMBER_CONSTANT ; for ( final com.google.gerrit.sshd.commands.TreeNode childNode : childNodes ) { final boolean isLastChild = ( ++ i ) == ( childNodes . size () ) ; printTree ( childNode , ( level + NUMBER_CONSTANT ) , isLastChild ) ; } }
public static com.google.gerrit.server.index.IndexConfig fromConfig ( org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig . create ( cfg . getInt ( STRING_CONSTANT , null , STRING_CONSTANT , NUMBER_CONSTANT ) , cfg . getInt ( STRING_CONSTANT , null , STRING_CONSTANT , NUMBER_CONSTANT ) , cfg . getInt ( STRING_CONSTANT , null , STRING_CONSTANT , NUMBER_CONSTANT ) ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > open () { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList <> ( NUMBER_CONSTANT ) ; for ( final com.google.gerrit.reviewdb.client.Change.Status e : Change.Status . values () ) { if ( e . isOpen () ) { r . add ( new com.google.gerrit.server.query.change.ChangeStatusPredicate ( e ) ) ; } } return ( r . size () ) == NUMBER_CONSTANT ? r . get ( NUMBER_CONSTANT ) : or ( r ) ; }
private void assertReviewers ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.acceptance.TestAccount . . . expectedReviewers ) throws com.google.gwtorm.server.OrmException { java.lang.Iterable < com.google.gerrit.reviewdb.client.Account.Id > actualIds = approvalsUtil . getReviewers ( db , notesFactory . create ( db , c . getProject () , c . getId () ) ) . values () ; com.google.common.truth.Truth . assertThat ( actualIds ) . containsExactlyElementsIn ( com.google.common.collect.Sets . newHashSet ( com.google.gerrit.acceptance.TestAccount . ids ( expectedReviewers ) ) ) ; }
@ java.lang.Override protected org.apache.lucene.search.IndexSearcher refreshIfNeeded ( org.apache.lucene.search.IndexSearcher referenceToRefresh ) throws java.io.IOException { final org.apache.lucene.index.IndexReader r = referenceToRefresh . getIndexReader () ; assert r instanceof org.apache.lucene.index.DirectoryReader : STRING_CONSTANT + r ; final org.apache.lucene.index.IndexReader newReader = org.apache.lucene.index.DirectoryReader . openIfChanged ( ( ( org.apache.lucene.index.DirectoryReader ) ( r ) ) ) ; if ( newReader == null ) { return null ; } return com.google.gerrit.lucene.WrappableSearcherManager . getSearcher ( searcherFactory , newReader ) ; }
@ org.junit.Test public void submitWithCherryPickIfFastForwardPossible ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change . getChangeId () ) ; assertCherryPick ( git , false ) ; com.google.common.truth.Truth . assertThat ( getRemoteHead () . getParent ( NUMBER_CONSTANT ) ) . isEqualTo ( change . getCommit () . getParent ( NUMBER_CONSTANT ) ) ; }
private static com.google.gerrit.client.rpc.RestApi contentEditOrPs ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String filename ) { return ( id . get () ) == NUMBER_CONSTANT ? com.google.gerrit.client.changes.ChangeFileApi . contentEdit ( id . getParentKey () , filename ) : com.google.gerrit.client.changes.ChangeApi . revision ( id ) . view ( STRING_CONSTANT ) . id ( filename ) . view ( STRING_CONSTANT ) ; }
public com.google.gerrit.reviewdb.client.Change submit ( com.google.gerrit.server.change.RevisionResource rsrc , com.google.gerrit.server.IdentifiedUser caller , boolean force ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { java.lang.String topic = rsrc . getChange () . getTopic () ; if ( ( submitWholeTopic ) && ( ! ( com.google.common.base.Strings . isNullOrEmpty ( topic ) ) ) ) { return submitWholeTopic ( rsrc , caller , force , topic ) ; } else { return submitThisChange ( rsrc , caller , force ) ; } }
public com.google.gerrit.server.git.ChangeSet completeChangeSet ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory . create ( db , change . getProject () , change . getId () ) ; cd . changeControl ( user ) ; if ( com.google.gerrit.server.change.Submit . wholeTopicEnabled ( cfg ) ) { return completeChangeSetIncludingTopics ( db , new com.google.gerrit.server.git.ChangeSet ( cd , db , null ) , user ) ; } return completeChangeSetWithoutTopic ( db , new com.google.gerrit.server.git.ChangeSet ( cd , db , null ) , user ) ; }
private void printTree ( final com.google.gerrit.sshd.commands.TreeNode node , final int level , final boolean isLast ) { printNode ( node , level , isLast ) ; final java.util.SortedSet < ? extends com.google.gerrit.sshd.commands.TreeNode > childNodes = node . getChildren () ; int i = NUMBER_CONSTANT ; final int size = childNodes . size () ; for ( final com.google.gerrit.sshd.commands.TreeNode childNode : childNodes ) { final boolean isLastChild = ( ++ i ) == size ; printTree ( childNode , ( level + NUMBER_CONSTANT ) , isLastChild ) ; } }
public void testSubsequentGetReads ( ) throws com.google.gwtorm.client.OrmException { db . create () ; final com.google.gerrit.reviewdb.SystemConfig exp = db . getSystemConfig () ; final com.google.gerrit.reviewdb.SystemConfig act = db . getSystemConfig () ; assertNotSame ( exp , act ) ; assertEquals ( exp.sitePath , act.sitePath ) ; assertEquals ( exp.registerEmailPrivateKey , act.registerEmailPrivateKey ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache . checkedGet ( allProjects ) . getConfig () ; codeReview = com.google.common.base.Preconditions . checkNotNull ( cfg . getLabelSections () . get ( STRING_CONSTANT ) ) ; codeReview . setDefaultValue ( ( ( short ) ( - NUMBER_CONSTANT ) ) ) ; saveProjectConfig ( cfg ) ; }
private void fail ( java.lang.String error , boolean failed , java.lang.Exception e ) { if ( failed ) { this . failed . update ( NUMBER_CONSTANT ) ; } if ( e != null ) { com.google.gerrit.server.index.change.AllChangesIndexer.log . warn ( error , e ) ; } else { com.google.gerrit.server.index.change.AllChangesIndexer.log . warn ( error ) ; } verboseWriter . println ( error ) ; }
@ org.junit.Test public void restoreReviewableChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageAbandonedReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; restore ( sc.changeId , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
@ org.junit.Test public void submitToEmptyRepo ( ) throws com.jcraft.jsch.JSchException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.api.Git git = createProject ( false ) ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change . getChangeId () ) ; com.google.common.truth.Truth . assertThat ( getRemoteHead () . getId () ) . isEqualTo ( change . getCommitId () ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.BatchRefUpdate batchRefUpdate ) { for ( org.eclipse.jgit.transport.ReceiveCommand cmd : batchRefUpdate . getCommands () ) { if ( ( cmd . getResult () ) == ( ReceiveCommand.Result.OK ) ) { fire ( project , cmd ) ; } } }
private void assertHead ( java.lang.String projectName , java.lang.String expectedRef ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) { com.google.common.truth.Truth . assertThat ( repo . getRef ( Constants.HEAD ) . getTarget () . getName () ) . isEqualTo ( expectedRef ) ; } }
public com.google.gerrit.server.project.ChangeControl changeControl ( com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException { if ( ( changeControl ) != null ) { throw new java.lang.IllegalStateException ( ( STRING_CONSTANT + ( changeControl . getUser () ) ) ) ; } try { if ( ( change ) != null ) { changeControl = changeControlFactory . controlFor ( db , change , user ) ; } else { changeControl = changeControlFactory . controlFor ( db , project , legacyId , user ) ; } } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return changeControl ; }
@ java.lang.Override protected com.vmware.gerrit.owners.common.PathOwners createValue ( com.googlecode.prolog_cafe.lang.Prolog engine ) { com.google.gerrit.server.patch.PatchList patchList = StoredValues.PATCH_LIST . get ( engine ) ; org.eclipse.jgit.lib.Repository repository = StoredValues.REPOSITORY . get ( engine ) ; com.google.gerrit.rules.PrologEnvironment env = ( ( com.google.gerrit.rules.PrologEnvironment ) ( engine.control ) ) ; try { return new com.vmware.gerrit.owners.common.PathOwners ( resolver , db , repository , patchList ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.googlecode.prolog_cafe.exceptions.SystemException ( e . getMessage () ) ; } }
private void goUpToChange ( boolean openReplyBox ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . valueOf ( base . get () ) : null ; java.lang.String rev = java.lang.String . valueOf ( revision . get () ) ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( changeId , rev ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , b , rev , openReplyBox , false ) ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > draftsByUser ( ) throws com.google.gwtorm.server.OrmException { if ( ( draftsByUser ) == null ) { com.google.gerrit.reviewdb.client.Change c = change () ; if ( c == null ) { return java.util.Collections . emptySet () ; } draftsByUser = new java.util.HashSet <> () ; for ( com.google.gerrit.reviewdb.client.PatchLineComment sc : plcUtil . draftByChange ( db , notes () ) ) { draftsByUser . add ( sc . getAuthor () ) ; } } return draftsByUser ; }
@ org.junit.Test public void createEditByDeletingExistingFileRest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . delete ( urlEditFile () ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( org.apache.http.HttpStatus.SC_NO_CONTENT ) ; com.google.common.base.Optional < com.google.gerrit.server.edit.ChangeEdit > edit = editUtil . byChange ( change ) ; try { fileUtil . getContent ( edit . get () . getChange () . getProject () , edit . get () . getRevision () . get () , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException rnfe ) {} }
private void loadDraftComments ( com.google.gerrit.reviewdb.client.Account.Id author ) throws com.google.gwtorm.server.OrmException { if ( ( ( draftCommentNotes ) == null ) || ( ! ( author . equals ( draftCommentNotes . getAuthor () ) ) ) ) { draftCommentNotes = new com.google.gerrit.server.notedb.DraftCommentNotes ( args , change , author ) ; draftCommentNotes . load () ; } }
private java.lang.String call ( final java.lang.String body ) throws java.lang.Exception { final java.io.File tmp = write ( body ) ; try { final java.io.File hook = getHook ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , runHook ( repository , hook , tmp . getAbsolutePath () ) ) ; return read ( tmp ) ; } finally { tmp . delete () ; } }
@ org.junit.Test public void receivePackRespectsVisibilityOfOpenChanges ( ) throws java.lang.Exception { allow ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; deny ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; com.google.common.truth.Truth . assertThat ( getReceivePackRefs () . additionalHaves () ) . containsExactly ( com.google.gerrit.acceptance.git.RefAdvertisementIT . obj ( c3 , NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testSelectSERVER () { setFrom ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ( create () ) instanceof com.google.gerrit.server.mail.FromAddressGeneratorProvider.ServerGen ) ) ; setFrom ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ( create () ) instanceof com.google.gerrit.server.mail.FromAddressGeneratorProvider.ServerGen ) ) ; setFrom ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ( create () ) instanceof com.google.gerrit.server.mail.FromAddressGeneratorProvider.ServerGen ) ) ; }
com.google.gerrit.httpd.WebSessionManager.Val createVal ( final com.google.gerrit.httpd.WebSessionManager.Key key , final com.google.gerrit.httpd.WebSessionManager.Val val ) { final com.google.gerrit.reviewdb.client.Account.Id who = val . getAccountId () ; final boolean remember = val . isPersistentCookie () ; final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val . getExternalId () ; return createVal ( key , who , remember , lastLogin ) ; }
@ java.lang.Override public com.google.gerrit.server.data.PatchSetAttribute get () { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( notes . getChange () . getProject () ) ; org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return eventFactory . asPatchSetAttribute ( revWalk , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw com.google.common.base.Throwables . propagate ( e ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.common.DiffInfo diff ( java.lang.String base ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDiff . setBase ( base ) . apply ( file ) . value () ; } catch ( java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = resource . toAccountGroup () ; if ( group == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } try { com.google.gerrit.server.account.GroupControl c = controlFactory . validateFor ( group . getOwnerGroupUUID () ) ; return json . format ( c . getGroup () ) ; } catch ( com.google.gerrit.common.errors.NoSuchGroupException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } }
@ java.lang.Override public void run () { ui . header ( STRING_CONSTANT ) ; initAuthType () ; if ( ( auth . getSecure ( STRING_CONSTANT ) ) == null ) { auth . setSecure ( STRING_CONSTANT , com.google.gwtjsonrpc.server.SignedToken . generateRandomKey () ) ; } initSignedPush () ; }
@ org.junit.Test public void testUsernamePatternNonRegex () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , STRING_CONSTANT , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = util . user ( local , STRING_CONSTANT , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , d . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onKeyMap ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ChangeEvent e ) { com.google.gerrit.extensions.client.KeyMapType keyMapType = com.google.gerrit.extensions.client.KeyMapType . valueOf ( keyMap . getValue ( keyMap . getSelectedIndex () ) ) ; prefs . keyMapType ( keyMapType ) ; if ( ( view ) != null ) { view . setOption ( STRING_CONSTANT , keyMapType . name () . toLowerCase () ) ; } }
private void addRanges ( java.util.Map < java.lang.String , java.lang.Object > have , com.google.gerrit.server.account.CapabilityControl cc ) { for ( java.lang.String name : com.google.gerrit.common.data.GlobalCapability . getRangeNames () ) { if ( ( want ( name ) ) && ( cc . hasExplicitRange ( name ) ) ) { have . put ( name , new com.google.gerrit.server.account.GetCapabilities.Range ( cc . getRange ( name ) ) ) ; } } }
@ java.lang.Override public com.google.gerrit.server.patch.PatchList get ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { com.google.gerrit.reviewdb.client.Project.NameKey project = change . getProject () ; if ( ( patchSet . getRevision () ) == null ) { throw new com.google.gerrit.server.patch.PatchListNotAvailableException ( ( STRING_CONSTANT + ( patchSet . getId () ) ) ) ; } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId . fromString ( patchSet . getRevision () . get () ) ; com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE ; return get ( new com.google.gerrit.server.patch.PatchListKey ( null , b , ws ) , project ) ; }
private java.util.Map < java.lang.String , com.google.gerrit.common.data.LabelType > byId () { if ( ( byId ) == null ) { byId = new java.util.HashMap < java.lang.String , com.google.gerrit.common.data.LabelType > () ; if ( ( labelTypes ) != null ) { for ( com.google.gerrit.common.data.LabelType t : labelTypes ) { if ( ( t . getId () ) != null ) { byId . put ( t . getId () , t ) ; } } } } return byId ; }
@ org.junit.Test public void submitWithFastForward ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead () ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change . getChangeId () ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead () ; com.google.common.truth.Truth . assertThat ( head . getId () ) . isEqualTo ( change . getCommitId () ) ; com.google.common.truth.Truth . assertThat ( head . getParent ( NUMBER_CONSTANT ) ) . isEqualTo ( oldHead ) ; assertSubmitter ( change . getChangeId () , NUMBER_CONSTANT ) ; }
public Account.Id lookup ( java.lang.String externalId ) throws com.google.gerrit.server.account.AccountException { try { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { com.google.gerrit.reviewdb.client.AccountExternalId ext = db . accountExternalIds () . get ( new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( externalId ) ) ; return ext != null ? ext . getAccountId () : null ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.server.account.AccountException ( ( STRING_CONSTANT + externalId ) , e ) ; } }
public void atomicDelete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = queryProvider . get () . byProject ( project . getNameKey () ) ; deleteChanges ( changes ) ; db . accountProjectWatches () . delete ( db . accountProjectWatches () . byProject ( project . getNameKey () ) ) ; }
private java.lang.String getDisplayName ( com.google.gerrit.reviewdb.client.Account account ) { if ( account != null ) { java.lang.String result = ( ( account . getFullName () ) == null ) ? anonymousCowardName : account . getFullName () ; if ( ( account . getPreferredEmail () ) != null ) { result += ( STRING_CONSTANT + ( account . getPreferredEmail () ) ) + STRING_CONSTANT ; } return result ; } return anonymousCowardName ; }
@ java.lang.Override public com.google.gerrit.reviewdb.AccountSshKey create ( com.google.gerrit.reviewdb.AccountSshKey.Id id , java.lang.String encoded ) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { encoded = com.google.gerrit.sshd.SshUtil . toOpenSshPublicKey ( encoded ) ; com.google.gerrit.reviewdb.AccountSshKey key = new com.google.gerrit.reviewdb.AccountSshKey ( id , encoded ) ; com.google.gerrit.sshd.SshUtil . parse ( key ) ; return key ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new com.google.gerrit.common.errors.InvalidSshKeyException () ; } catch ( java.security.spec.InvalidKeySpecException e ) { throw new com.google.gerrit.common.errors.InvalidSshKeyException () ; } catch ( java.security.NoSuchProviderException e ) { com.google.gerrit.sshd.SshKeyCacheImpl.log . error ( STRING_CONSTANT , e ) ; throw new com.google.gerrit.common.errors.InvalidSshKeyException () ; } }
protected void fireEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.common.UserScopedEventListener listener : listeners ) { if ( isVisibleTo ( change , listener . getUser () ) ) { listener . onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
@ java.lang.Override public java.lang.String getETag () { com.google.gerrit.server.CurrentUser user = control . getUser () ; com.google.common.hash.Hasher h = com.google.common.hash.Hashing . md5 () . newHasher () . putBoolean ( user . getStarredChanges () . contains ( getId () ) ) ; prepareETag ( h , user ) ; return h . hash () . toString () ; }
public static com.google.gerrit.client.rpc.RestApi suggestReviewers ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String q , int n , boolean e ) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi . change ( project , id ) . view ( STRING_CONSTANT ) . addParameter ( STRING_CONSTANT , n ) . addParameter ( STRING_CONSTANT , e ) ; if ( q != null ) { api . addParameter ( STRING_CONSTANT , q ) ; } return api ; }
public void contributorAgreements ( final com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.client.reviewdb.ContributorAgreement > > callback ) { try { final com.google.gerrit.client.reviewdb.ReviewDb db = server . getSchemaFactory () . open () ; try { callback . onSuccess ( db . contributorAgreements () . active () . toList () ) ; } finally { db . close () ; } } catch ( com.google.gwtorm.client.OrmException e ) { callback . onFailure ( e ) ; } }
@ org.junit.Test public void updateMessageNoChange ( ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( modifier . createEdit ( change , getCurrentPatchSet ( changeId ) ) ) . isEqualTo ( RefUpdate.Result.NEW ) ; com.google.common.base.Optional < com.google.gerrit.server.edit.ChangeEdit > edit = editUtil . byChange ( change ) ; exception . expect ( com.google.gerrit.server.edit.UnchangedCommitMessageException . class ) ; exception . expectMessage ( STRING_CONSTANT ) ; modifier . modifyMessage ( edit . get () , edit . get () . getEditCommit () . getFullMessage () ) ; }
void importGit ( ) throws com.google.gwtorm.client.OrmException , java.io.IOException { if ( flags.importProjects ) { gitProjectImporter . run ( new com.google.gerrit.server.git.GitProjectImporter.Messages () { @ java.lang.Override public void info ( java.lang.String msg ) { java.lang.System.err . println ( msg ) ; java.lang.System.err . flush () ; } @ java.lang.Override public void warning ( java.lang.String msg ) { info ( msg ) ; } } ) ; } }
public com.google.gerrit.extensions.common.ChangeInfo format ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory . create ( db . get () , rsrc . getControl () ) ; return format ( cd , com.google.common.base.Optional . of ( rsrc . getPatchSet () . getId () ) , true ) ; }
private void addWebLink ( java.lang.String href , java.lang.String name ) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor () ; a . setHref ( href ) ; a . setText ( name ) ; com.google.gwt.dom.client.Element el = a . getElement () ; webLinkCell . appendChild ( el ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) throws com.google.gerrit.common.errors.NoSuchGroupException { final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache . get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.common.errors.NoSuchGroupException ( groupId ) ; } return new com.google.gerrit.server.account.GroupControl ( user . get () , group ) ; }
@ java.lang.Deprecated private void appendComment ( java.lang.StringBuilder out , int contextLines , com.google.gerrit.server.patch.PatchFile currentFileData , com.google.gerrit.reviewdb.client.Comment comment ) { if ( comment instanceof com.google.gerrit.reviewdb.client.RobotComment ) { com.google.gerrit.reviewdb.client.RobotComment robotComment = ( ( com.google.gerrit.reviewdb.client.RobotComment ) ( comment ) ) ; out . append ( STRING_CONSTANT ) . append ( robotComment.robotId ) . append ( STRING_CONSTANT ) . append ( robotComment.robotRunId ) . append ( STRING_CONSTANT ) ; } if ( ( comment.range ) != null ) { appendRangedComment ( out , currentFileData , comment ) ; } else { appendLineComment ( out , contextLines , currentFileData , comment ) ; } }
private com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.server.change.RevisionResource rsrc , com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gwtorm.server.OrmException { if ( rsrc . getChange () . getId () . equals ( id ) ) { return rsrc . getControl () ; } com.google.gerrit.reviewdb.client.Change c = dbProvider . get () . changes () . get ( id ) ; if ( c == null ) { return null ; } return rsrc . getControl () . getProjectControl () . controlFor ( c ) ; }
@ java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo apply ( com.google.gerrit.server.change.ChangeResource req , com.google.gerrit.extensions.api.changes.AbandonInput input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl control = req . getControl () ; if ( ! ( control . canAbandon ( dbProvider . get () ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( STRING_CONSTANT ) ; } com.google.gerrit.reviewdb.client.Change change = abandon ( control , input.message ) ; return json . create ( ChangeJson.NO_OPTIONS ) . format ( change ) ; }
private com.google.gerrit.server.project.ProjectState newProjectState () { com.google.gerrit.server.project.ProjectCache projectCache = null ; com.google.gerrit.reviewdb.Project.NameKey wildProject = new com.google.gerrit.reviewdb.Project.NameKey ( STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl.AssistedFactory projectControlFactory = null ; com.google.gerrit.reviewdb.Project project = new com.google.gerrit.reviewdb.Project ( parent ) ; com.google.gerrit.server.project.ProjectState ps = new com.google.gerrit.server.project.ProjectState ( anonymousUser , projectCache , wildProject , projectControlFactory , project , localRights ) ; ps . setInheritedRights ( inheritedRights ) ; return ps ; }
@ org.junit.Test public void testAppend_char () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( CHAR_CONS ) ) ; org.junit.Assert . assertSame ( b , b . append ( CHAR_CONS ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
@ org.junit.Test public void testEvictGroupsByIncludeOK ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID key = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( STRING_CONSTANT ) ; java.lang.String keyJson = new com.google.gson.GsonBuilder () . create () . toJson ( key ) ; org.mockito.Mockito . when ( httpSessionMock . post ( buildCacheEndpoint ( Constants.GROUPS_BYINCLUDE ) , keyJson ) ) . thenReturn ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.SUCCESSFUL , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.EMPTY_MSG ) ) ; com.google.common.truth.Truth . assertThat ( forwarder . evict ( Constants.GROUPS_BYINCLUDE , key ) ) . isTrue () ; }
@ org.junit.Test public void testCreateSchema_Label_CodeReview ( ) throws java.lang.Exception { com.google.gerrit.common.data.LabelType codeReview = getLabelTypes () . byLabel ( STRING_CONSTANT ) ; org.junit.Assert . assertNotNull ( codeReview ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , codeReview . getName () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , codeReview . getAbbreviation () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , codeReview . getFunctionName () ) ; org.junit.Assert . assertTrue ( codeReview . isCopyMinScore () ) ; assertValueRange ( codeReview , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void suggestReviewersChange ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange () . getChangeId () ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , STRING_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( reviewers . size () , NUMBER_CONSTANT ) ; reviewers = suggestReviewers ( changeId , STRING_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( reviewers . size () , NUMBER_CONSTANT ) ; reviewers = suggestReviewers ( changeId , STRING_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( reviewers . size () , NUMBER_CONSTANT ) ; }
private com.google.gerrit.reviewdb.Account makeUser ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.reviewdb.Account.Id userId = new com.google.gerrit.reviewdb.Account.Id ( NUMBER_CONSTANT ) ; final com.google.gerrit.reviewdb.Account account = new com.google.gerrit.reviewdb.Account ( userId ) ; account . setFullName ( name ) ; account . setPreferredEmail ( email ) ; return account ; }
private void saveChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) { change = ctx . getChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx . getUpdate ( psId ) ; wasDraftChange = ( change . getStatus () ) == ( Change.Status.DRAFT ) ; if ( wasDraftChange ) { change . setStatus ( Change.Status.NEW ) ; update . setStatus ( change . getStatus () ) ; com.google.gerrit.server.ChangeUtil . updated ( change ) ; ctx . saveChange () ; } }
private static boolean isParentOf ( org.eclipse.jgit.revwalk.RevWalk walk , com.google.gitiles.Revision oldRevision , com.google.gitiles.Revision newRevision ) throws java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevCommit newCommit = walk . parseCommit ( newRevision . getId () ) ; if ( ( newCommit . getParentCount () ) > NUMBER_CONSTANT ) { return java.util.Arrays . asList ( newCommit . getParents () ) . contains ( oldRevision . getId () ) ; } return oldRevision == ( Revision.NULL ) ; }
void display ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { this . revision = revision ; boolean hasUser = com.google.gerrit.client.Gerrit . isSignedIn () ; com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = info . revision ( revision ) ; com.google.gerrit.client.changes.ChangeInfo.CommitInfo commit = revInfo . commit () ; changeId = info . legacy_id () ; project = info . project () ; subject = commit . subject () ; message = commit . message () ; initChangeActions ( info , hasUser ) ; initRevisionActions ( info , revInfo , hasUser ) ; }
@ java.lang.Override public void doImport ( org.eclipse.jgit.lib.ProgressMonitor progress ) throws java.lang.Exception { progress . beginTask ( STRING_CONSTANT , NUMBER_CONSTANT ) ; java.lang.String repositoryName = ( ( getOrganisation () ) + STRING_CONSTANT ) + ( getRepositoryName () ) ; progress . update ( NUMBER_CONSTANT ) ; replicationConfig . addSecureCredentials ( authUsername , authToken ) ; progress . update ( NUMBER_CONSTANT ) ; replicationConfig . addReplicationRemote ( authUsername , ( ( gitHubUrl ) + STRING_CONSTANT ) , repositoryName ) ; progress . endTask () ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.StarredChanges.EmptyInput in ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( self . get () ) != ( rsrc . getUser () ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( STRING_CONSTANT ) ; } try { starredChangesUtil . star ( self . get () . getAccountId () , change . getProject () , change . getId () ) ; } catch ( com.google.gwtorm.server.OrmDuplicateKeyException e ) { return com.google.gerrit.extensions.restapi.Response . none () ; } return com.google.gerrit.extensions.restapi.Response . none () ; }
@ org.junit.Test public void submitTwoChangesWithFastForward_missingDependency ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead () ; createChange () ; com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange () ; submitWithConflict ( change2 . getChangeId () ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead () ; com.google.common.truth.Truth . assertThat ( head . getId () ) . isEqualTo ( oldHead . getId () ) ; }
void add () { java.util.List < java.lang.String > values = new java.util.ArrayList <> () ; for ( com.google.gwtexpui.globalkey.client.NpTextBox input : inputs ) { values . add ( input . getValue () . trim () ) ; input . setValue ( STRING_CONSTANT ) ; } insert ( values ) ; }
public static java.util.List < com.google.gitiles.blame.Region > loadBlame ( com.google.gitiles.blame.BlameCacheImpl.Key key ) throws java.io.IOException { try ( org.eclipse.jgit.blame.BlameGenerator gen = new org.eclipse.jgit.blame.BlameGenerator ( key.repo , key.path ) ) { gen . push ( null , key.commitId ) ; return com.google.gitiles.blame.BlameCacheImpl . loadRegions ( gen ) ; } finally { key.repo = null ; } }
@ java.lang.Override public void run () { while ( ! ( stop ) ) { openIndex . maybeRefresh () ; closedIndex . maybeRefresh () ; synchronized ( this ) { try { wait ( NUMBER_CONSTANT ) ; } catch ( java.lang.InterruptedException e ) { com.google.gerrit.lucene.LuceneChangeIndex.log . warn ( STRING_CONSTANT , e ) ; } } } }
private void setReviewed ( com.google.gerrit.client.info.FileInfo info , boolean r ) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi . revision ( project . get () , curr ) . view ( STRING_CONSTANT ) . id ( info . path () ) . view ( STRING_CONSTANT ) ; if ( r ) { api . put ( com.google.gerrit.client.rpc.CallbackGroup . < com.google.gerrit.client.changes.ReviewInfo > emptyCallback () ) ; } else { api . delete ( com.google.gerrit.client.rpc.CallbackGroup . < com.google.gerrit.client.changes.ReviewInfo > emptyCallback () ) ; } }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder ( org.eclipse.jgit.lib.Config config , java.lang.String section ) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder () . setNow ( java.time.ZonedDateTime . now ( java.time.ZoneId . systemDefault () ) ) . setKeyInterval ( com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL ) . setKeyStartTime ( com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME ) . setConfig ( config ) . setSection ( section ) ; }
public com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > changesByProject ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > ret = com.google.common.collect.ArrayListMultimap . create () ; for ( com.google.gerrit.server.query.change.ChangeData cd : changeData . values () ) { ret . put ( cd . change () . getProject () , cd . getId () ) ; } return ret ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , com.google.gerrit.server.git.MergeTip mergeTip , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted , java.util.Set < com.google.gerrit.server.git.CodeReviewCommit > incoming , com.google.gerrit.server.util.RequestId submissionId , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling , com.google.common.collect.ListMultimap < com.google.gerrit.extensions.api.changes.RecipientType , com.google.gerrit.reviewdb.client.Account.Id > accountsToNotify , com.google.gerrit.server.git.SubmoduleOp submoduleOp , boolean dryrun ) ;
private static org.eclipse.jgit.patch.Patch parsePatch ( byte [] enc ) { byte [] buf = com.google.common.io.BaseEncoding . base64 () . decode ( new java.lang.String ( enc , java.nio.charset.StandardCharsets.UTF_8 ) ) ; org.eclipse.jgit.patch.Patch p = new org.eclipse.jgit.patch.Patch () ; p . parse ( buf , NUMBER_CONSTANT , buf.length ) ; com.google.common.truth.Truth . assertThat ( p . getErrors () ) . isEqualTo ( com.google.common.collect.ImmutableList . of () ) ; return p ; }
@ java.lang.Override public java.lang.String getSqlType ( final com.google.gwtorm.schema.ColumnModel column , final com.google.gwtorm.schema.sql.SqlDialect dialect ) { final java.lang.String f = getFalseLiteralValue () ; final java.lang.StringBuilder r = new java.lang.StringBuilder () ; r . append ( STRING_CONSTANT ) ; if ( column . isNotNull () ) { r . append ( ( STRING_CONSTANT + f ) ) ; r . append ( STRING_CONSTANT ) ; } return r . toString () ; }
@ org.junit.Test public void createBranch_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) + ( branch . getShortName () ) ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection () ; indexes . setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriteImpl ( indexes , new com.google.gerrit.server.query.change.BasicChangeRewrites () ) ; }
@ com.google.inject.Provides @ com.google.inject.Singleton @ com.google.gerrit.server.index.IndexExecutor ( value = com.google.gerrit.server.git.QueueProvider.QueueType.BATCH ) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue workQueue ) { if ( ( batchExecutor ) != null ) { return batchExecutor ; } int threads = config . getInt ( STRING_CONSTANT , null , STRING_CONSTANT , NUMBER_CONSTANT ) ; if ( threads <= NUMBER_CONSTANT ) { threads = java.lang.Runtime . getRuntime () . availableProcessors () ; } return com.google.common.util.concurrent.MoreExecutors . listeningDecorator ( workQueue . createQueue ( threads , STRING_CONSTANT ) ) ; }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine . setB0 () ; com.googlecode.prolog_cafe.builtin.Term a1 = arg1 ; int idx ; a1 = a1 . dereference () ; if ( ! ( a1 instanceof com.googlecode.prolog_cafe.builtin.IntegerTerm ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( this , NUMBER_CONSTANT , STRING_CONSTANT , a1 ) ; idx = ( ( com.googlecode.prolog_cafe.builtin.IntegerTerm ) ( a1 ) ) . intValue () ; engine.internalDB . erase ( idx ) ; return cont ; }
@ org.junit.Test public void testWhitelist ( ) throws java.lang.Exception { java.lang.String [] patterns = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ; try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = validator . performValidation ( repo , makeCommit ( rw ) , rw , patterns , true ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactly ( STRING_CONSTANT ) ; } }
@ org.junit.Test public void testRejectJavaScript_ImgSrc () { final java.lang.String href = STRING_CONSTANT ; try { new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () . openElement ( STRING_CONSTANT ) . setAttribute ( STRING_CONSTANT , href ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( java.lang.RuntimeException e ) { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + href ) , e . getMessage () ) ; } }
private com.google.inject.Key < javax.servlet.http.HttpServlet > gerritUrl () { return key ( new javax.servlet.http.HttpServlet () { private static final long serialVersionUID = NUMBER_CONSTANT ; @ java.lang.Override protected void doGet ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { com.google.gerrit.httpd.UrlModule . toGerrit ( req . getRequestURI () . substring ( req . getContextPath () . length () ) , req , rsp ) ; } } ) ; }
private void savePatchSet ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . isDraft () ) ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( STRING_CONSTANT ) ; } psUtil . publish ( ctx . getDb () , ctx . getUpdate ( psId ) , patchSet ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection () ; indexes . setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriteImpl ( indexes , null , new com.google.gerrit.server.index.IndexRewriteImpl.BasicRewritesImpl ( null , indexes ) , new com.google.gerrit.server.query.change.SqlRewriterImpl ( null ) ) ; }
@ org.junit.Test public void testCreateProjectApi ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException { final java.lang.String newProjectName = STRING_CONSTANT ; com.google.gerrit.extensions.common.ProjectInfo p = gApi . projects () . name ( newProjectName ) . create () . get () ; org.junit.Assert . assertEquals ( newProjectName , p.name ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( newProjectName ) ) ; org.junit.Assert . assertNotNull ( projectState ) ; com.google.gerrit.acceptance.rest.project.ProjectAssert . assertProjectInfo ( projectState . getProject () , p ) ; assertHead ( newProjectName , STRING_CONSTANT ) ; }
private static Account.Id toAccountId ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.account.AccountResolver accountResolver , java.lang.String nameOrEmail ) throws com.google.gerrit.common.errors.NoSuchAccountException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = accountResolver . findByNameOrEmail ( db , nameOrEmail ) ; if ( a == null ) { throw new com.google.gerrit.common.errors.NoSuchAccountException ( ( ( STRING_CONSTANT + nameOrEmail ) + STRING_CONSTANT ) ) ; } return a . getId () ; }
private void stopRemovedPlugins ( java.util.List < java.io.File > jars ) { java.util.Set < java.lang.String > unload = com.google.common.collect.Sets . newHashSet ( running . keySet () ) ; for ( java.io.File jar : jars ) { unload . remove ( com.google.gerrit.server.plugins.PluginLoader . nameOf ( jar ) ) ; } for ( java.lang.String name : unload ) { com.google.gerrit.server.plugins.PluginLoader.log . info ( java.lang.String . format ( STRING_CONSTANT , name ) ) ; running . remove ( name ) . stop () ; } }
private void addDiffChunk ( net.codemirror.lib.CodeMirror cmToPad , int line , int lineOnOther , int chunkSize , boolean edit ) { chunks . add ( new com.google.gerrit.client.diff.DiffChunkInfo ( host . otherCm ( cmToPad ) . side () , ( ( lineOnOther - chunkSize ) + NUMBER_CONSTANT ) , ( ( line - chunkSize ) + NUMBER_CONSTANT ) , lineOnOther , edit ) ) ; }
public void insertChange ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.common.data.LabelTypes labelTypes , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) throws com.google.gwtorm.server.OrmException { insertChange ( db , change , null , ps , commit , labelTypes , info , reviewers ) ; }
private static byte [] readResource ( final org.apache.velocity.runtime.resource.Resource p ) throws java.io.IOException { try ( java.io.InputStream in = p . getResourceLoader () . getResourceStream ( p . getName () ) ; java.io.ByteArrayOutputStream byteOut = new java.io.ByteArrayOutputStream () ) { org.apache.commons.io.IOUtils . copy ( in , byteOut ) ; return byteOut . toByteArray () ; } }
@ org.junit.Test public void testUnblockInLocalVisibilityByRegisteredUsers_Fails () { com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.REGISTERED , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.REGISTERED ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . isVisibleByRegisteredUsers () ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection () ; indexes . setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriteImpl ( indexes , new com.google.gerrit.server.query.change.BasicChangeRewrites ( null , indexes ) ) ; }
private void checkCanRunAs ( ) throws com.google.gerrit.sshd.UnloggedFailure { if ( ( caller ) instanceof com.google.gerrit.server.PeerDaemonUser ) {} else if ( ! ( enableRunAs ) ) { throw new com.google.gerrit.sshd.UnloggedFailure ( NUMBER_CONSTANT , STRING_CONSTANT ) ; } else if ( ! ( caller . getCapabilities () . canRunAs () ) ) { throw new com.google.gerrit.sshd.UnloggedFailure ( NUMBER_CONSTANT , STRING_CONSTANT ) ; } }
void setReviewedByCurrentUser ( boolean reviewed ) { if ( ( fileList ) != null ) { fileList . updateReviewedStatus ( patchKey , reviewed ) ; } PatchUtil.DETAIL_SVC . setReviewedByCurrentUser ( patchKey , reviewed , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > () { @ java.lang.Override public void onFailure ( java.lang.Throwable arg0 ) {} @ java.lang.Override public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) {} } ) ; }
@ org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner () ; blockCreateReference () ; com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) + ( branch . getShortName () ) ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
protected com.google.gerrit.client.reviewdb.ReviewDb openReviewDb ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { if ( ( db ) == null ) { try { db = schema . open () ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( NUMBER_CONSTANT , STRING_CONSTANT , e ) ; } } return db ; }
@ org.junit.Test public void testUnblockInLocalForceEditTopicName_Fails () { com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) . setBlock () ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) . setForce ( true ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.REGISTERED ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canForceEditTopicName () ) ; }
public java.lang.String diff ( org.eclipse.jgit.diff.RawText v0 , org.eclipse.jgit.diff.RawText v1 ) throws java.io.IOException { org.eclipse.jgit.diff.DiffAlgorithm algorithm = org.eclipse.jgit.diff.MyersDiff.INSTANCE ; org.eclipse.jgit.diff.EditList editList = algorithm . diff ( RawTextComparator.DEFAULT , v0 , v1 ) ; java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream () ; try ( org.eclipse.jgit.diff.DiffFormatter formatter = new org.eclipse.jgit.diff.DiffFormatter ( os ) ) { formatter . format ( editList , v0 , v1 ) ; } return os . toString ( com.googlesource.gerrit.plugins.serverconfig.UnifiedDiffer.CHARSET_NAME ) ; }
private java.util.List < com.google.gerrit.extensions.common.ProjectInfo > getDirectChildProjects ( com.google.gerrit.reviewdb.client.Project.NameKey parent ) { java.util.List < com.google.gerrit.extensions.common.ProjectInfo > childProjects = new java.util.ArrayList <> () ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : projectCache . all () ) { com.google.gerrit.server.project.ProjectState e = projectCache . get ( projectName ) ; if ( e == null ) { continue; } if ( parent . equals ( e . getProject () . getParent ( allProjects ) ) ) { childProjects . add ( json . format ( e . getProject () ) ) ; } } return childProjects ; }
@ java.lang.Override public void replace ( com.google.gerrit.server.account.AccountState as ) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder () . defaultIndex ( indexName ) . defaultType ( com.google.gerrit.elasticsearch.ElasticAccountIndex.ACCOUNTS ) . addAction ( insert ( com.google.gerrit.elasticsearch.ElasticAccountIndex.ACCOUNTS , as ) ) . refresh ( true ) . build () ; io.searchbox.client.JestResult result = client . execute ( bulk ) ; if ( ! ( result . isSucceeded () ) ) { throw new java.io.IOException ( java.lang.String . format ( STRING_CONSTANT , as . getAccount () . getId () , indexName , result . getErrorMessage () ) ) ; } }
@ java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange change ( com.google.gerrit.server.notedb.ChangeNotes notes ) { com.google.gerrit.reviewdb.client.Change change = notes . getChange () ; com.google.common.base.Preconditions . checkArgument ( getProjectControl () . getProject () . getNameKey () . equals ( change . getProject () ) , STRING_CONSTANT ) ; return getProjectControl () . controlFor ( notes ) . asForChange ( null , db ) ; }
private static org.eclipse.jgit.dircache.DirCacheEditor.PathEdit getPathEdit ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation op , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , java.lang.String path , org.eclipse.jgit.lib.ObjectInserter ins , byte [] content ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { final org.eclipse.jgit.lib.ObjectId oid = ( op == ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.CHANGE_ENTRY ) ) ? ins . insert ( Constants.OBJ_BLOB , content ) : com.google.gerrit.server.edit.ChangeEditModifier . getObjectIdForRestoreOperation ( rw , base , path ) ; return new org.eclipse.jgit.dircache.DirCacheEditor.PathEdit ( path ) { @ java.lang.Override public void apply ( org.eclipse.jgit.dircache.DirCacheEntry ent ) { ent . setFileMode ( FileMode.REGULAR_FILE ) ; ent . setObjectId ( oid ) ; } } ; }
private void assertHead ( java.lang.String projectName , java.lang.String expectedRef ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { com.google.common.truth.Truth . assertThat ( repo . getRef ( Constants.HEAD ) . getTarget () . getName () ) . isEqualTo ( expectedRef ) ; } finally { repo . close () ; } }
@ org.junit.Test public void testExactMatch ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.RegexFilePredicate p = com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; }
@ java.lang.Override public com.google.gerrit.server.group.GroupResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.lang.Exception { final com.google.gerrit.server.CurrentUser user = self . get () ; if ( user instanceof com.google.gerrit.server.AnonymousUser ) { throw new com.google.gerrit.extensions.restapi.AuthException ( STRING_CONSTANT ) ; } else if ( ! ( user instanceof com.google.gerrit.server.IdentifiedUser ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return parse ( id ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean preserveGitRepository ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { final org.eclipse.jgit.lib.Repository repository = repoManager . openRepository ( project . getNameKey () ) ; if ( repository == null ) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException ( STRING_CONSTANT ) ; } cleanCache ( repository ) ; if ( ! preserveGitRepository ) { deleteGitRepository ( project . getNameKey () , repository ) ; } }
private java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval > approvals ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.change.ReviewerResource rsrc ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id user = rsrc . getUser () . getAccountId () ; return com.google.common.collect.Iterables . filter ( db . patchSetApprovals () . byChange ( rsrc . getChange () . getId () ) , new com.google.common.base.Predicate < com.google.gerrit.reviewdb.client.PatchSetApproval > () { @ java.lang.Override public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return user . equals ( input . getAccountId () ) ; } } ) ; }
protected void setApiHeaders ( javax.servlet.http.HttpServletResponse res , com.google.gitiles.FormatType type ) { res . setContentType ( type . getMimeType () ) ; res . setCharacterEncoding ( com.google.common.base.Charsets.UTF_8 . name () ) ; res . setHeader ( com.google.common.net.HttpHeaders.CONTENT_DISPOSITION , STRING_CONSTANT ) ; res . setHeader ( com.google.common.net.HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN , STRING_CONSTANT ) ; setCacheHeaders ( res ) ; }
@ java.lang.Override public void onLoad () { if ( ( sbsTable ) == null ) { initUI () ; } super . onLoad () ; PatchUtil.DETAIL_SVC . sideBySidePatchDetail ( patchId , null , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.data.SideBySidePatchDetail > () { public void onSuccess ( final com.google.gerrit.client.data.SideBySidePatchDetail r ) { if ( isAttached () ) { display ( r ) ; } } } ) ; }
@ java.lang.Override public void start () { if ( ( executor ) != null ) { for ( final com.google.gerrit.server.cache.h2.H2CacheImpl < , > cache : caches ) { executor . execute ( cache : : start ) ; cleanup . schedule ( ( ) - > cache . prune ( cleanup ) , NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ; } } }
public void addFileOwners ( java.lang.String file , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > owners ) { if ( owners . isEmpty () ) { return; } java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > set = fileOwners . get ( file ) ; if ( set != null ) { set . addAll ( owners ) ; } else { fileOwners . put ( file , com.google.common.collect.Sets . newHashSet ( owners ) ) ; } }
protected void bccStarredBy () { if ( ( db ) != null ) { try { for ( com.google.gerrit.client.reviewdb.StarredChange w : db . starredChanges () . byChange ( change . getId () ) ) { add ( RecipientType.BCC , w . getAccountId () ) ; } } catch ( com.google.gwtorm.client.OrmException err ) {} } }
@ java.lang.Override public RefUpdate.Result call ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo . exactRef ( refName ) ; afterReadRef . run () ; org.eclipse.jgit.lib.ObjectId oldId ; if ( ref == null ) { oldId = org.eclipse.jgit.lib.ObjectId . zeroId () ; next = seed . get () ; } else { oldId = ref . getObjectId () ; next = parse ( oldId ) ; } return store ( repo , rw , oldId , ( ( next ) + ( count ) ) ) ; }
private boolean canRebase ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( isOwner () ) || ( refControl . canSubmit ( isOwner () ) ) ) || ( refControl . canRebase () ) ) && ( refControl . asForRef () . testOrFalse ( RefPermission.CREATE_CHANGE ) ) ) && ( ! ( isPatchSetLocked ( db ) ) ) ; }
protected void execResource ( final java.lang.String p ) { try ( java.io.InputStream in = com.google.gerrit.pgm.shell.JythonShell . class . getClassLoader () . getResourceAsStream ( p ) ) { if ( in != null ) { execStream ( in , ( STRING_CONSTANT + p ) ) ; } else { com.google.gerrit.pgm.shell.JythonShell.log . error ( ( STRING_CONSTANT + p ) ) ; } } catch ( java.io.IOException e ) { com.google.gerrit.pgm.shell.JythonShell.log . error ( e . getMessage () , e ) ; } }
public int length () { int count = NUMBER_CONSTANT ; com.googlecode.prolog_cafe.lang.Term t = this ; while ( t instanceof com.googlecode.prolog_cafe.lang.ListTerm ) { count ++ ; t = ( ( com.googlecode.prolog_cafe.lang.ListTerm ) ( t ) ) . cdr () . dereference () ; } return count ; }
private void enable ( boolean enabled ) { commitMessage . setEnabled ( enabled ) ; commit . setEnabled ( ( enabled && ( ! ( access . getOwnerOf () . isEmpty () ) ) ) ) ; review . setEnabled ( ( enabled && ( access . canUpload () ) ) ) ; cancel1 . setEnabled ( enabled ) ; cancel2 . setEnabled ( enabled ) ; }
@ org.junit.Test public void createNewChangeSignedOffByFooter ( ) throws java.lang.Exception { setSignedOffByFooter ( true ) ; try { com.google.gerrit.extensions.common.ChangeInfo info = assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; java.lang.String message = info.revisions . get ( info.currentRevision ) . commit . message ; com.google.common.truth.Truth . assertThat ( message ) . contains ( java.lang.String . format ( STRING_CONSTANT , org.eclipse.jgit.lib.Constants.SIGNED_OFF_BY_TAG , admin . getIdent () . getEmailAddress () ) ) ; } finally { setSignedOffByFooter ( false ) ; } }
@ java.lang.Override public void topic ( java.lang.String topic ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input () ; in.topic = topic ; try { putTopic . apply ( change , in ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData cData : index . getSource ( com.google.gerrit.server.query.Predicate . and ( new com.google.gerrit.server.query.change.LegacyChangeIdPredicate ( db , object . getId () ) , this ) , NUMBER_CONSTANT ) . read () ) { if ( cData . getId () . equals ( object . getId () ) ) { return true ; } } } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; }
private com.google.gerrit.server.project.ProjectControl user ( com.google.gerrit.server.git.ProjectConfig local , java.lang.String name , com.google.gerrit.reviewdb.client.AccountGroup . . . memberOf ) { return new com.google.gerrit.server.project.ProjectControl ( java.util.Collections . < com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet () , java.util.Collections . < com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet () , sectionSorter , null , changeControlFactory , permissionBackend , new com.google.gerrit.server.project.RefControlTest.MockUser ( name , memberOf ) , newProjectState ( local ) ) ; }
@ org.junit.Test public void createChangeWithoutAccessToParentCommitFails ( ) throws java.lang.Exception { java.util.Map < java.lang.String , com.google.gerrit.acceptance.PushOneCommit.Result > results = changeInTwoBranches ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; block ( project , STRING_CONSTANT , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; com.google.gerrit.extensions.common.ChangeInput in = newChangeInput ( ChangeStatus.NEW ) ; in.branch = STRING_CONSTANT ; in.baseChange = results . get ( STRING_CONSTANT ) . getChangeId () ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.UnprocessableEntityException . class , ( STRING_CONSTANT + ( in.baseChange ) ) ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > filterMatching ( java.util.Collection < com.google.gerrit.reviewdb.RefRight > rights ) { java.util.List < com.google.gerrit.reviewdb.RefRight > result = new java.util.ArrayList < com.google.gerrit.reviewdb.RefRight > () ; for ( com.google.gerrit.reviewdb.RefRight right : rights ) { if ( com.google.gerrit.server.project.RefControl . matches ( change . getDest () . get () , right . getRefPattern () ) ) { result . add ( right ) ; } } return result ; }
void testRelative ( java.lang.String a , java.lang.String b , java.lang.String want ) throws java.lang.Exception { java.lang.String got = com.googlesource.gerrit.plugins.supermanifest.JiriUpdater . relativize ( java.net.URI . create ( a ) , java.net.URI . create ( b ) ) . toString () ; if ( ! ( got . equals ( want ) ) ) { fail ( java.lang.String . format ( STRING_CONSTANT , a , b , got , want ) ) ; } }
@ org.junit.Test public void testListSequences ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { org.junit.Assert . assertTrue ( dialect . listSequences ( db ) . isEmpty () ) ; execute ( STRING_CONSTANT ) ; execute ( STRING_CONSTANT ) ; java.util.Set < java.lang.String > s = dialect . listSequences ( db ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , s . size () ) ; org.junit.Assert . assertTrue ( s . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertFalse ( s . contains ( STRING_CONSTANT ) ) ; }
private static com.google.gerrit.common.data.GroupReference accountToGroup ( com.google.gerrit.server.account.AccountState s ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ( s . getUserName () . isPresent () ) ? com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup . uuid ( s . getUserName () . get () ) : com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup . uuid ( s . getAccount () . getId () ) ; return new com.google.gerrit.common.data.GroupReference ( uuid , com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup . nameOf ( uuid , s ) ) ; }
private static java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > sort ( java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > that ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList <> ( that ) ; java.util.Collections . sort ( r , com.google.gerrit.server.query.change.AndSource.CMP ) ; return r ; }
@ java.lang.Override public boolean updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException { user = ctx . getUser () . asIdentifiedUser () ; notes = ctx . getNotes () ; ps = psUtil . get ( ctx . getDb () , ctx . getNotes () , psId ) ; boolean dirty = false ; dirty |= insertComments ( ctx ) ; dirty |= updateLabels ( ctx ) ; dirty |= insertMessage ( ctx ) ; return dirty ; }
private java.util.List < com.google.gerrit.extensions.common.ProjectInfo > getChildProjectsRecursively ( com.google.gerrit.server.project.ProjectNode p ) { java.util.List < com.google.gerrit.extensions.common.ProjectInfo > allChildren = new java.util.ArrayList <> () ; for ( com.google.gerrit.server.project.ProjectNode c : p . getChildren () ) { if ( c . isVisible () ) { allChildren . add ( json . format ( c . getProject () ) ) ; allChildren . addAll ( getChildProjectsRecursively ( c ) ) ; } } return allChildren ; }
@ java.lang.Override protected void onUnload () { super . onUnload () ; removeKeyHandlerRegs () ; if ( ( resizeHandler ) != null ) { resizeHandler . removeHandler () ; resizeHandler = null ; } cmA . getWrapperElement () . removeFromParent () ; cmB . getWrapperElement () . removeFromParent () ; com.google.gwt.user.client.Window . enableScrolling ( true ) ; com.google.gerrit.client.Gerrit . setHeaderVisible ( true ) ; }
@ org.junit.Test public void byProject ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo1 = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo2 = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( repo1 , newChange ( repo1 ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( repo2 , newChange ( repo2 ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change1 ) ; assertQuery ( STRING_CONSTANT , change2 ) ; }
@ org.junit.Test public void testUnblockForce () { com.google.gerrit.common.data.PermissionRule r = com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) ; r . setBlock () ; r . setForce ( true ) ; com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) . setForce ( true ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canForceUpdate () ) ; }
public boolean canRebase ( com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Branch.NameKey dest , org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk rw ) { try { findBaseRevision ( patchSet , dest , git , rw ) ; return true ; } catch ( com.google.gerrit.extensions.restapi.RestApiException e ) { return false ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { com.google.gerrit.server.change.RebaseUtil.log . warn ( java.lang.String . format ( STRING_CONSTANT , patchSet . getId () , dest ) , e ) ; return false ; } }
@ java.lang.Override public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId () . toString () ; try { if ( cd . change () . getStatus () . isOpen () ) { openIndex . deleteById ( id ) ; commit ( openIndex ) ; } else { closedIndex . deleteById ( id ) ; commit ( closedIndex ) ; } } catch ( com.google.gwtorm.server.OrmException | org.apache.solr.client.solrj.SolrServerException e ) { throw new java.io.IOException ( e ) ; } }
public com.google.gerrit.server.update.BatchUpdate getUpdate () { com.google.common.base.Preconditions . checkState ( ( ( db ) != null ) , STRING_CONSTANT ) ; if ( ( update ) == null ) { update = batchUpdateFactory . create ( db , getProjectName () , caller , ts ) . setRepository ( repo , rw , ins ) . setRequestId ( submissionId ) . setOnSubmitValidators ( onSubmitValidatorsFactory . create () ) ; } return update ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { save . setEnabled ( false ) ; final com.google.gerrit.client.reviewdb.Account me = com.google.gerrit.client.Gerrit . getUserAccount () ; me . setFullName ( newName ) ; me . setPreferredEmail ( newEmail ) ; me . setContactInformation ( info ) ; com.google.gerrit.client.Gerrit . refreshMenuBar () ; if ( ( parentScreen ) != null ) { parentScreen . display ( me ) ; } }
private java.lang.String extractWhat ( com.google.gerrit.sshd.DispatchCommand dcmd ) { java.lang.StringBuilder commandName = new java.lang.StringBuilder ( dcmd . getCommandName () ) ; java.lang.String [] args = dcmd . getArguments () ; for ( int i = NUMBER_CONSTANT ; i < ( args.length ) ; i ++ ) { commandName . append ( STRING_CONSTANT ) . append ( args [ i ] ) ; } return commandName . toString () ; }
@ org.junit.Test public void testSingleLineMessages ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; }
private void onSend ( final boolean submit ) { if ( commentEditors . isEmpty () ) { onSend2 ( submit ) ; } else { final com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > afterSaveDraft = new com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > () { private int done ; @ java.lang.Override public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { if ( ( ++ ( done ) ) == ( commentEditors . size () ) ) { onSend2 ( submit ) ; } } } ; for ( final com.google.gerrit.client.patches.CommentEditorPanel p : commentEditors ) { p . saveDraft ( afterSaveDraft ) ; } } }
@ java.lang.Override protected void configureServlets () { install ( new com.google.gerrit.extensions.config.FactoryModule () { @ java.lang.Override protected void configure () { factory ( AgreementInfoFactory.Factory . class ) ; factory ( DeleteExternalIds.Factory . class ) ; factory ( ExternalIdDetailFactory.Factory . class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.account.AccountSecurityImpl . class ) ; }
@ java.lang.Override protected com.google.gerrit.extensions.restapi.Response < > applyImpl ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.PublishDraftPatchSet.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return publish . apply ( updateFactory , rsrc . getUser () , rsrc . getChange () , rsrc . getChange () . currentPatchSetId () , null ) ; }
private org.eclipse.jgit.lib.Repository openRepository ( final com.google.gerrit.reviewdb.Project.NameKey name ) { try { return repoManager . openRepository ( name . get () ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException err ) { com.google.gerrit.common.ChangeHookRunner.log . warn ( ( STRING_CONSTANT + ( name . get () ) ) , err ) ; return null ; } }
public com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSetApproval > allApprovalsMap ( ) throws com.google.gwtorm.server.OrmException { if ( ( allApprovals ) == null ) { allApprovals = com.google.common.collect.ArrayListMultimap . create () ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval psa : com.google.gerrit.server.ApprovalsUtil . sortApprovals ( db . patchSetApprovals () . byChange ( legacyId ) ) ) { allApprovals . put ( psa . getPatchSetId () , psa ) ; } } return allApprovals ; }
private void colorLines ( net.codemirror.lib.CodeMirror cm , int line , int cnt ) { for ( int i = NUMBER_CONSTANT ; i < cnt ; i ++ ) { cm . addLineClass ( ( line + i ) , LineClassWhere.WRAP , diffTable.style . diff () ) ; } }
@ java.lang.Override public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.AccountCapabilities ac ) { boolean isAdmin = ac . canPerform ( STRING_CONSTANT ) ; display ( serviceUserInfo , ( ( configInfo . getAllowEmail () ) || isAdmin ) , ( ( configInfo . getAllowOwner () ) || isAdmin ) , ( ( configInfo . getAllowHttpPassword () ) || isAdmin ) ) ; }
@ java.lang.Override public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { com.google.gerrit.server.git.CodeReviewCommit c = composeGitlinksCommit ( branch ) ; if ( c != null ) { ctx . addRefUpdate ( c . getParent ( NUMBER_CONSTANT ) , c , branch . get () ) ; addBranchTip ( branch , c ) ; } }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onSave ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.account.AccountApi . putDiffPreferences ( prefs , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.account.DiffPreferences > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.account.DiffPreferences result ) { com.google.gerrit.extensions.client.DiffPreferencesInfo p = new com.google.gerrit.extensions.client.DiffPreferencesInfo () ; result . copyTo ( p ) ; com.google.gerrit.client.Gerrit . setDiffPreferences ( p ) ; } } ) ; if ( ( view ) != null ) { close () ; } }
@ org.junit.Test public void testGetPeopleAccess ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = open () ; org.junit.Assert . assertNotNull ( schema . people () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , schema . people () . getRelationName () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , schema . people () . getRelationID () ) ; }
protected PushOneCommit.Result amendChange ( java.lang.String changeId , java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Collections . shuffle ( com.google.gerrit.acceptance.AbstractDaemonTest.RANDOM ) ; com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , admin . getIdent () , PushOneCommit.SUBJECT , PushOneCommit.FILE_NAME , new java.lang.String ( com.google.common.primitives.Chars . toArray ( com.google.gerrit.acceptance.AbstractDaemonTest.RANDOM ) ) , changeId ) ; return push . to ( git , ref ) ; }
@ org.junit.Test public void testOneIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; org.junit.Assert . assertSame ( com.google.gerrit.server.query.change.AndSource . class , out . getClass () ) ; org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableList . of ( query ( in . getChild ( NUMBER_CONSTANT ) ) , in . getChild ( NUMBER_CONSTANT ) ) , out . getChildren () ) ; }
@ java.lang.Override protected void run ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { try { com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput () ; in.revision = revision ; gApi . projects () . name ( project . getName () ) . branch ( name ) . create ( in ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException e ) { throw die ( e ) ; } }
@ java.lang.Override protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { final com.google.gerrit.server.GerritServer gs = com.google.gerrit.server.GerritServer . getInstance () ; final com.google.gwtorm.client.SchemaFactory < com.google.gerrit.client.reviewdb.ReviewDb > rdf = gs . getDatabase () ; final com.google.gerrit.client.data.GroupCache groups = gs . getGroupCache () ; return new com.google.gerrit.client.changes.ChangeDetailServiceImpl ( rdf , groups ) ; }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { if ( e == null ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err ) ; } else { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err , e ) ; } return com.google.gerrit.server.project.SubmitRuleEvaluator . defaultTypeError () ; } return com.google.gerrit.common.data.SubmitTypeRecord . error ( err ) ; }
private com.google.inject.Injector createSshInjector () { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList <> () ; modules . add ( sysInjector . getInstance ( com.google.gerrit.sshd.SshModule . class ) ) ; modules . add ( new com.google.gerrit.sshd.SshHostKeyModule () ) ; modules . add ( new com.google.gerrit.sshd.commands.DefaultCommandModule ( false , sysInjector . getInstance ( com.google.gerrit.server.config.DownloadConfig . class ) , sysInjector . getInstance ( com.google.inject.Module . class ) ) ) ; modules . add ( new com.google.gerrit.sshd.commands.IndexCommandsModule () ) ; return sysInjector . createChildInjector ( modules ) ; }
private void setListBox ( final com.google.gwt.user.client.ui.ListBox f , final java.lang.String defaultValue , final java.lang.String currentValue ) { final int n = f . getItemCount () ; for ( int i = NUMBER_CONSTANT ; i < n ; i ++ ) { if ( f . getValue ( i ) . equals ( currentValue ) ) { f . setSelectedIndex ( i ) ; return; } } if ( currentValue != defaultValue ) { setListBox ( f , defaultValue , defaultValue ) ; } }
@ org.junit.Test public void testPreformat2 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + STRING_CONSTANT ) + STRING_CONSTANT ) , n . asString () ) ; }
protected void startThread ( final com.google.gerrit.sshd.BaseCommand.CommandRunnable thunk ) { final com.google.gerrit.sshd.BaseCommand.TaskThunk tt = new com.google.gerrit.sshd.BaseCommand.TaskThunk ( thunk ) ; if ( isAdminHighPriorityCommand () ) { new java.lang.Thread ( tt , tt . toString () ) . start () ; } else { task . set ( executor . submit ( tt ) ) ; } }
public com.google.gerrit.reviewdb.client.ChangeMessage getConflictMessage ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables . getFirst ( com.google.common.collect.Iterables . filter ( com.google.common.collect.Lists . reverse ( dbProvider . get () . changeMessages () . byChange ( rsrc . getChange () . getId () ) . toList () ) , new com.google.common.base.Predicate < com.google.gerrit.reviewdb.client.ChangeMessage > () { @ java.lang.Override public boolean apply ( com.google.gerrit.reviewdb.client.ChangeMessage input ) { return ( input . getAuthor () ) == null ; } } ) , null ) ; }
private static java.lang.String getVersion ( java.nio.file.Path plugin ) throws java.io.IOException { try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( plugin . toFile () ) ) { java.util.jar.Manifest manifest = jarFile . getManifest () ; java.util.jar.Attributes main = manifest . getMainAttributes () ; return main . getValue ( java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION ) ; } }
@ java.lang.Override public void start () { queue . start () ; if ( ( ( srvInfo . getState () ) == ( ServerInformation.State.STARTUP ) ) && ( queue.replicateAllOnPluginStart ) ) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState () ; pushAllFuture . set ( pushAll . create ( null , state ) . schedule ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Unmute.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.StarredChangesUtil.IllegalLabelException , com.google.gwtorm.server.OrmException { if ( ( rsrc . isUserOwner () ) || ( ! ( isMuted ( rsrc . getChange () ) ) ) ) { return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; } stars . unmute ( rsrc ) ; return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; }
@ java.lang.Override public java.lang.String [] getStringList ( java.lang.String section , java.lang.String subsection , java.lang.String name ) { java.lang.String [] secure = secureStore . getList ( section , subsection , name ) ; if ( ( secure != null ) && ( ( secure.length ) > NUMBER_CONSTANT ) ) { return secure ; } return super . getStringList ( section , subsection , name ) ; }
@ java.lang.Override protected void onLoad () { file . set ( id , content ) ; file . setText ( fileName ) ; file . setEnabled ( fileName . isEmpty () ) ; content . setText ( fileContent ) ; save . setEnabled ( false ) ; com.google.gwt.core.client.Scheduler . get () . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand () { @ java.lang.Override public void execute () { if ( fileName . isEmpty () ) { file . setFocus ( true ) ; } else { content . setFocus ( true ) ; } } } ) ; }
private boolean isMergeable ( com.google.gerrit.reviewdb.client.Change c ) { final com.google.gerrit.server.git.CodeReviewCommit commit = commits . get ( c . getId () ) ; final com.google.gerrit.server.git.CommitMergeStatus s = ( commit != null ) ? commit.statusCode : null ; boolean isMergeable = false ; if ( ( s != null ) && ( ( ( s . equals ( CommitMergeStatus.CLEAN_MERGE ) ) || ( s . equals ( CommitMergeStatus.CLEAN_PICK ) ) ) || ( s . equals ( CommitMergeStatus.ALREADY_MERGED ) ) ) ) { isMergeable = true ; } return isMergeable ; }
public void updateFastForward ( com.google.gerrit.reviewdb.client.Project.NameKey name , java.lang.String refName , org.eclipse.jgit.lib.ObjectId oldValue , org.eclipse.jgit.lib.ObjectId newValue ) { com.google.gerrit.server.git.TagCache.EntryVal val = cache . getIfPresent ( name . get () ) ; if ( val != null ) { com.google.gerrit.server.git.TagSetHolder holder = val.holder ; if ( holder != null ) { com.google.gerrit.server.git.TagSet tags = holder . getTagSet () ; if ( tags != null ) { if ( tags . updateFastForward ( refName , oldValue , newValue ) ) { cache . put ( name . get () , val ) ; } } } } }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.server.CurrentUser who , final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) throws com.google.gerrit.common.errors.NoSuchGroupException { final com.google.gerrit.common.data.GroupDescription.Basic group = groupBackend . get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.common.errors.NoSuchGroupException ( groupId ) ; } return new com.google.gerrit.server.account.GroupControl ( who , group , groupBackend ) ; }
private void status ( int sc ) { if ( sc == ( javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED ) ) { java.lang.StringBuilder v = new java.lang.StringBuilder () ; v . append ( com.google.gerrit.httpd.ProjectBasicAuthFilter.LIT_BASIC ) ; v . append ( STRING_CONSTANT ) . append ( com.google.gerrit.httpd.ProjectBasicAuthFilter.REALM_NAME ) . append ( STRING_CONSTANT ) ; setHeader ( com.google.gerrit.httpd.ProjectBasicAuthFilter.Response.WWW_AUTHENTICATE , v . toString () ) ; } else if ( containsHeader ( com.google.gerrit.httpd.ProjectBasicAuthFilter.Response.WWW_AUTHENTICATE ) ) { setHeader ( com.google.gerrit.httpd.ProjectBasicAuthFilter.Response.WWW_AUTHENTICATE , null ) ; } }
@ org.junit.Test public void wrongKeyId ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey k = com.google.gerrit.server.git.gpg.TestKey . key1 () ; long badId = ( k . getKeyId () ) + NUMBER_CONSTANT ; com.google.gerrit.server.git.gpg.CheckResult result = checker . check ( k . getPublicKey () , badId ) ; org.junit.Assert . assertEquals ( java.util.Arrays . asList ( STRING_CONSTANT ) , result . getProblems () ) ; }
public void load ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { this . rw = walk ; this . reader = walk . getObjectReader () ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; onLoad () ; } finally { walk = null ; reader = null ; } }
@ com.google.gerrit.common.Nullable com.google.gerrit.httpd.raw.ResourceServlet.Resource getResource ( java.lang.String name ) { try { java.nio.file.Path p = getResourcePath ( name ) ; return cache . get ( p , newLoader ( p ) ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.httpd.raw.ResourceServlet.log . warn ( java.lang.String . format ( STRING_CONSTANT , name ) , e ) ; return null ; } }
void setHeaderVisible ( boolean show ) { headerVisible = show ; com.google.gwt.user.client.ui.UIObject . setVisible ( patchSetNavRow , show ) ; if ( show ) { parent.header . removeStyleName ( com.google.gerrit.client.diff.DiffTable.style . fullscreen () ) ; } else { parent.header . addStyleName ( com.google.gerrit.client.diff.DiffTable.style . fullscreen () ) ; } parent . resizeCodeMirror () ; }
private com.google.gerrit.server.project.ProjectState getProject ( com.google.gerrit.reviewdb.client.Branch.NameKey branch ) throws com.google.gerrit.server.project.NoSuchProjectException { final com.google.gerrit.server.project.ProjectState p = projectCache . get ( branch . getParentKey () ) ; if ( p == null ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( branch . getParentKey () ) ; } return p ; }
private org.eclipse.jetty.server.Connector [] connectors () { org.eclipse.jetty.server.Connector c = new org.eclipse.jetty.server.nio.SelectChannelConnector () ; c . setHost ( null ) ; c . setPort ( cfg . getInt ( STRING_CONSTANT , null , STRING_CONSTANT , NUMBER_CONSTANT ) ) ; c . setStatsOn ( false ) ; return new org.eclipse.jetty.server.Connector [] { c } ; }
private void assertChangeSetMergeable ( com.google.gerrit.server.query.change.ChangeData change , boolean expected ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet . get () . completeChangeSet ( db , change . change () , user ( admin ) ) ; com.google.common.truth.Truth . assertThat ( submit . unmergeableChanges ( cs ) . isEmpty () ) . isEqualTo ( expected ) ; }
public static void doSignOut () { com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gwt.user.client.Cookies . removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; for ( final com.google.gerrit.client.SignedInListener l : com.google.gerrit.client.Gerrit.signedInListeners ) { l . onSignOut () ; } com.google.gerrit.client.Gerrit . refreshMenuBar () ; if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.currentScreen . onSignOut () ; } }
@ org.junit.Test public void testAccountResolve ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = resolver . resolve ( com.google.common.collect.ImmutableSet . of ( user.email , admin.email ) , project , change , gApi . accounts () . id ( admin.id . get () ) . get () ) ; com.google.common.truth.Truth . assertThat ( reviewers ) . containsExactly ( user.id ) ; }
@ org.junit.Test public void fooSubdirJson ( ) throws java.lang.Exception { java.util.Map < java.lang.String , com.google.gitiles.RepositoryDescription > res = buildJson ( STRING_CONSTANT , new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , com.google.gitiles.RepositoryDescription > > () {} . getType () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , res . size () ) ; com.google.gitiles.RepositoryDescription d = res . get ( STRING_CONSTANT ) ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , d ) ; org.junit.Assert . assertEquals ( repo . getRepository () . getDescription () . getRepositoryName () , d.name ) ; }
@ java.lang.Override protected void configure () { propertyExtractor = createMock ( com.googlesource.gerrit.plugins.hooks.util.PropertyExtractor . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.util.PropertyExtractor . class ) . toInstance ( propertyExtractor ) ; ruleBase = createMock ( com.googlesource.gerrit.plugins.hooks.workflow.RuleBase . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.workflow.RuleBase . class ) . toInstance ( ruleBase ) ; actionExecutor = createMock ( com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor . class ) ; bind ( com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor . class ) . toInstance ( actionExecutor ) ; bind ( com.googlesource.gerrit.plugins.hooks.its.ItsConfig . class ) . toInstance ( new com.googlesource.gerrit.plugins.hooks.its.ItsConfig ( null , null , null ) { @ java.lang.Override public boolean isEnabled ( com.google.gerrit.server.events.ChangeEvent event ) { return true ; } } ) ; }
private com.google.gerrit.server.account.AuthResult byPreferredEmail ( final java.lang.String email ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { java.util.List < com.google.gerrit.reviewdb.client.Account > matches = db . accounts () . byPreferredEmail ( email ) . toList () ; return ( matches . size () ) == NUMBER_CONSTANT ? auth ( matches . get ( NUMBER_CONSTANT ) ) : null ; } catch ( com.google.gwtorm.server.OrmException e ) { getServletContext () . log ( STRING_CONSTANT , e ) ; return null ; } }
private java.io.File copyToTempFile ( org.eclipse.jgit.lib.ObjectId blobId , java.io.File tempDir ) throws java.io.FileNotFoundException , java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { java.io.File tmp = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT , tempDir ) ; try ( java.io.FileOutputStream out = new java.io.FileOutputStream ( tmp ) ) { git . open ( blobId ) . copyTo ( out ) ; } return tmp ; }
private static void formatDiff ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree , org.eclipse.jgit.treewalk.AbstractTreeIterator newTree , java.lang.String path , org.eclipse.jgit.diff.DiffFormatter diff ) throws java.io.IOException { if ( ! ( path . isEmpty () ) ) { diff . setPathFilter ( org.eclipse.jgit.treewalk.filter.PathFilter . create ( path ) ) ; } diff . setRepository ( repo ) ; diff . setDetectRenames ( true ) ; diff . format ( oldTree , newTree ) ; }
@ org.junit.Test public void basicTextFormattingWorks ( ) throws java.io.IOException { java.lang.String raw = STRING_CONSTANT ; java.lang.String formatted = ( ( com.googlesource.gerrit.plugins.xdocs.formatter.MarkdownFormatterTest.PROLOG ) + STRING_CONSTANT ) + ( com.googlesource.gerrit.plugins.xdocs.formatter.MarkdownFormatterTest.EPILOG ) ; org.junit.Assert . assertEquals ( formatted , formatter . format ( null , null , null , null , cfg , raw ) ) ; }
@ org.junit.Test public void commentOnReviewableChangeByReviewer ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.reviewer , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.reviewer ) . to ( sc.owner ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
private com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo openRepo ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( p ) ; org.eclipse.jgit.lib.ObjectInserter ins = repo . newObjectInserter () ; return new com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo ( repo , new org.eclipse.jgit.revwalk.RevWalk ( ins . newReader () ) , ins , new com.google.gerrit.server.git.ChainedReceiveCommands () , true ) ; }
@ java.lang.Override public void onSuccess ( com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info ) { if ( info . showJobsSummaryPanel () ) { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory () ) ; } if ( info . showJobsPanel () ) { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory () ) ; } if ( info . showJobsDropDownPanel () ) { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS , new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory () ) ; } }
@ org.junit.Test public void testEmpty () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertTrue ( b . isEmpty () ) ; org.junit.Assert . assertFalse ( b . hasContent () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; b . append ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( b . hasContent () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
private void assertCreateFails ( com.google.gerrit.extensions.api.projects.ProjectInput in , java.lang.Class < ? extends com.google.gerrit.extensions.restapi.RestApiException > errType ) throws java.lang.Exception { try { gApi . projects () . create ( in ) ; org.junit.Assert . fail ( ( STRING_CONSTANT + ( errType . getSimpleName () ) ) ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException expected ) { com.google.common.truth.Truth . assertThat ( expected ) . isInstanceOf ( errType ) ; } }
private final void deleteFromPatchSets ( final com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSet > patchSets ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet patchSet : patchSets ) { db . patchSetAncestors () . delete ( db . patchSetAncestors () . byPatchSet ( patchSet . getId () ) ) ; db . accountPatchReviews () . delete ( db . accountPatchReviews () . byPatchSet ( patchSet . getId () ) ) ; db . patchSets () . delete ( java.util.Collections . singleton ( patchSet ) ) ; } }
private com.google.gerrit.acceptance.server.mail.StagedChange stageChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange () ; setApiUser ( sc.reviewer ) ; gApi . changes () . id ( sc.changeId ) . revision ( STRING_CONSTANT ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . approve () ) ; sender . clear () ; return sc ; }
private void streamFile ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { java.io.File f = configFile ( req ) ; res . setStatus ( HttpServletResponse.SC_OK ) ; res . setContentType ( STRING_CONSTANT ) ; res . setContentLength ( ( ( int ) ( f . length () ) ) ) ; java.io.OutputStream out = res . getOutputStream () ; try ( java.io.InputStream in = new java.io.FileInputStream ( f ) ) { com.google.common.io.ByteStreams . copy ( in , out ) ; } }
public com.google.gerrit.server.account.AccountSshKey addKey ( java.lang.String pub ) { com.google.common.base.Preconditions . checkState ( ( ( keys ) != null ) , STRING_CONSTANT ) ; int seq = ( keys . isEmpty () ) ? NUMBER_CONSTANT : ( keys . size () ) + NUMBER_CONSTANT ; com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.VersionedAuthorizedKeys.SimpleSshKeyCreator () . create ( accountId , seq , pub ) ; keys . add ( java.util.Optional . of ( key ) ) ; return key ; }
public void testInheritSubmit_OverridesAndDeniesOfRef () { grant ( parent , com.google.gerrit.common.data.Permission.SUBMIT , registered , STRING_CONSTANT ) ; grant ( local , com.google.gerrit.common.data.Permission.SUBMIT , registered , STRING_CONSTANT ) . setDeny () ; grant ( local , com.google.gerrit.common.data.Permission.SUBMIT , registered , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = user () ; assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canSubmit () ) ; assertFalse ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canSubmit () ) ; assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . canSubmit () ) ; }
@ org.junit.Test public void testOpenRepositoryCreatedDirectlyOnDisk ( ) throws java.lang.Exception { createRepository ( repoManager . getBasePath () , STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Project.NameKey projectA = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( projectA ) ) { com.google.common.truth.Truth . assertThat ( repo ) . isNotNull () ; } com.google.common.truth.Truth . assertThat ( repoManager . list () ) . containsExactly ( projectA ) ; }
@ org.junit.Test public void listBranchesSomeHidden ( ) throws java.lang.Exception { blockRead ( STRING_CONSTANT ) ; java.lang.String master = pushTo ( STRING_CONSTANT ) . getCommit () . name () ; pushTo ( STRING_CONSTANT ) ; setApiUser ( user ) ; com.google.gerrit.acceptance.rest.project.BranchAssert . assertBranches ( com.google.common.collect.ImmutableList . of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT . branch ( STRING_CONSTANT , STRING_CONSTANT , false ) , com.google.gerrit.acceptance.rest.project.ListBranchesIT . branch ( STRING_CONSTANT , master , false ) ) , list () . get () ) ; }
private void assertApproval ( com.google.gerrit.acceptance.PushOneCommit.Result r , int expected ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo c = get ( r . getChangeId () ) ; com.google.gerrit.extensions.common.LabelInfo cr = c.labels . get ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , cr.all . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , cr.all . get ( NUMBER_CONSTANT ) . name ) ; org.junit.Assert . assertEquals ( expected , cr.all . get ( NUMBER_CONSTANT ) . value . intValue () ) ; }
@ org.junit.Test public void testPreformat1 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest . pre ( STRING_CONSTANT ) ) ) + STRING_CONSTANT ) , n . asString () ) ; }
public void addPatchSetComments ( com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute , java.util.Collection < com.google.gerrit.reviewdb.client.Comment > comments ) { for ( com.google.gerrit.reviewdb.client.Comment comment : comments ) { if ( ( comment.key.patchSetId ) == ( patchSetAttribute.number ) ) { if ( ( patchSetAttribute.comments ) == null ) { patchSetAttribute.comments = new java.util.ArrayList <> () ; } patchSetAttribute.comments . add ( asPatchSetLineAttribute ( comment ) ) ; } } }
public void run () { int height = ( com.google.gwt.user.client.Window . getClientHeight () ) - ( ( com.google.gerrit.client.Gerrit . getHeaderFooterHeight () ) + NUMBER_CONSTANT ) ; cmA . setHeight ( height ) ; cmB . setHeight ( height ) ; render ( diff ) ; commentManager . render ( comments , prefs . expandAllComments () ) ; skipManager . render ( prefs . context () , diff ) ; }
private void assertProblems ( com.google.gerrit.server.notedb.ChangeNotes notes , @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix , com.google.gerrit.extensions.common.ProblemInfo first , com.google.gerrit.extensions.common.ProblemInfo . . . rest ) throws java.lang.Exception { java.util.List < com.google.gerrit.extensions.common.ProblemInfo > expected = new java.util.ArrayList ( ( NUMBER_CONSTANT + ( rest.length ) ) ) ; expected . add ( first ) ; expected . addAll ( java.util.Arrays . asList ( rest ) ) ; com.google.common.truth.Truth . assertThat ( checker . check ( notes , fix ) . problems () ) . containsExactlyElementsIn ( expected ) . inOrder () ; }
@ java.lang.Override public RefUpdate.Result call ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo . exactRef ( refName ) ; afterReadRef . run () ; org.eclipse.jgit.lib.ObjectId oldId ; if ( ref == null ) { oldId = org.eclipse.jgit.lib.ObjectId . zeroId () ; next = seed . get () ; } else { oldId = ref . getObjectId () ; next = parse ( rw , oldId ) ; } return store ( repo , rw , oldId , ( ( next ) + ( count ) ) ) ; }
@ java.lang.Override public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ; if ( ! ( org.eclipse.jgit.http.server.GitSmartHttpTools . isGitClient ( req ) ) ) { chain . doFilter ( request , response ) ; return; } com.google.gerrit.httpd.ProjectDigestFilter.Response rsp = new com.google.gerrit.httpd.ProjectDigestFilter.Response ( req , ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) ) ; if ( verify ( req , rsp ) ) { chain . doFilter ( req , rsp ) ; } }
@ java.lang.Override public com.google.gerrit.server.account.AccountInfo apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.AddMembers.PutMember.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input () ; in._oneMember = id ; java.util.List < com.google.gerrit.server.account.AccountInfo > list = put . apply ( resource , in ) ; if ( ( list . size () ) == NUMBER_CONSTANT ) { return list . get ( NUMBER_CONSTANT ) ; } throw new java.lang.IllegalStateException () ; }
@ org.junit.Test public void testHtmlInFind () { java.lang.String rawFind = STRING_CONSTANT ; com.google.gwtexpui.safehtml.client.LinkFindReplace a = new com.google.gwtexpui.safehtml.client.LinkFindReplace ( rawFind , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( rawFind , a . pattern () . getSource () ) ; org.junit.Assert . assertEquals ( ( ( STRING_CONSTANT + rawFind ) + STRING_CONSTANT ) , a . replace ( rawFind ) ) ; }
static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Change.Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , id ) ; cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; }
static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Change.Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ; cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { final java.util.Properties p = new java.util.Properties () ; p . setProperty ( STRING_CONSTANT , org.h2.Driver . class . getName () ) ; p . setProperty ( STRING_CONSTANT , ( STRING_CONSTANT + ( ( com.google.gwtorm.server.PhoneBookDbTestCase.runCount ) ++ ) ) ) ; db = new com.google.gwtorm.jdbc.Database ( new com.google.gwtorm.jdbc.SimpleDataSource ( p ) , com.google.gwtorm.data.PhoneBookDb . class ) ; openSchemas = new java.util.ArrayList <> () ; }
@ org.junit.Test public void getDiffPreferences ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . get ( ( ( STRING_CONSTANT + ( admin.email ) ) + STRING_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_OK ) ; com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo diffPreferences = newGson () . fromJson ( r . getReader () , com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo . class ) ; com.google.gerrit.acceptance.rest.account.GetDiffPreferencesIT . assertDiffPreferences ( new com.google.gerrit.reviewdb.client.AccountDiffPreference ( admin.id ) , diffPreferences ) ; }
private org.eclipse.jgit.lib.ObjectId getEditRev ( ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.NoSuchChangeException , java.io.IOException { edit = editReader . byChange ( change ) ; if ( edit . isPresent () ) { return edit . get () . getRef () . getObjectId () ; } throw new com.google.gerrit.server.project.NoSuchChangeException ( change . getId () ) ; }
public com.google.gerrit.server.git.MetaDataUpdate create ( com.google.gerrit.reviewdb.client.Project.NameKey name , org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.IdentifiedUser user , org.eclipse.jgit.lib.BatchRefUpdate batch ) { com.google.gerrit.server.git.MetaDataUpdate md = factory . create ( name , repository , batch ) ; md . getCommitBuilder () . setCommitter ( serverIdent ) ; md . setAuthor ( user ) ; return md ; }
private org.eclipse.jgit.revwalk.RevCommit makeCommitWithoutSymlink ( org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Map < java.io.File , byte [] > files = new java.util.HashMap <> () ; files . put ( new java.io.File ( repo . getDirectory () . getParent () , STRING_CONSTANT ) , null ) ; return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . makeCommit ( rw , repo , STRING_CONSTANT , files ) ; }
public void testCreateSchema_DefaultAccess_RegisteredUsers ( ) throws com.google.gwtorm.client.OrmException { db . create () ; final com.google.gerrit.reviewdb.SystemConfig config = db . getSystemConfig () ; assertDefaultRight ( config.registeredGroupId , ApprovalCategory.READ , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertDefaultRight ( config.registeredGroupId , codeReview , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void testSingleLineMessagesWithSignedOffBy ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) + ( SOB1 ) ) , call ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( SOB1 ) ) ) ) ; org.junit.Assert . assertEquals ( ( ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) + ( SOB1 ) ) + ( SOB2 ) ) , call ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + ( SOB1 ) ) + ( SOB2 ) ) ) ) ; }
private void logError ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.MergeOp.log . isErrorEnabled () ) { if ( t != null ) { com.google.gerrit.server.git.MergeOp.log . error ( ( ( submissionId ) + msg ) , t ) ; } else { com.google.gerrit.server.git.MergeOp.log . error ( ( ( submissionId ) + msg ) ) ; } } }
@ java.lang.Override public com.google.gwtorm.server.ResultSet < E > get ( final java.lang.Iterable < K > keys ) throws com.google.gwtorm.server.OrmException { final java.util.ArrayList < E > r = new java.util.ArrayList <> () ; for ( final K key : keys ) { final E o = get ( key ) ; if ( o != null ) { r . add ( o ) ; } } return new com.google.gwtorm.server.ListResultSet ( r ) ; }
private void setListBox ( final com.google.gwt.user.client.ui.ListBox f , final java.lang.String defaultValue , final java.lang.String currentValue ) { final int n = f . getItemCount () ; for ( int i = NUMBER_CONSTANT ; i < n ; i ++ ) { if ( f . getValue ( i ) . equals ( currentValue ) ) { f . setSelectedIndex ( i ) ; return; } } if ( ! ( currentValue . equals ( defaultValue ) ) ) { setListBox ( f , defaultValue , defaultValue ) ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ) ; parser = new com.google.gitiles.RevisionParser ( repo . getRepository () , new com.google.gitiles.TestGitilesAccess ( repo . getRepository () ) . forRequest ( null ) , new com.google.gitiles.VisibilityCache ( false , com.google.common.cache.CacheBuilder . newBuilder () . maximumSize ( NUMBER_CONSTANT ) ) ) ; }
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges . get ( id ) ; if ( c == null ) { c = db . changes () . get ( id ) ; } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory . createForNew ( c ) ; com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext ( changeControlFactory . controlFor ( notes , user ) , new com.google.gerrit.server.git.BatchUpdateReviewDb ( db ) ) ; return ctx ; }
public void onShowView () { if ( ( windowTitle ) != null ) { com.google.gerrit.client.Gerrit . setWindowTitle ( this , windowTitle ) ; } Gerrit.EVENT_BUS . fireEvent ( new com.google.gerrit.client.ui.ScreenLoadEvent ( this ) ) ; com.google.gerrit.client.Gerrit . setQueryString ( null ) ; registerKeys () ; if ( ( theme ) != null ) { Gerrit.THEMER . set ( theme ) ; setTheme = true ; } else { Gerrit.THEMER . clear () ; } }
@ java.lang.Override public java.util.List < java.lang.String > listPluginNames ( ) throws java.io.FileNotFoundException { java.util.List < java.lang.String > names = new java.util.ArrayList <> () ; java.lang.String [] list = getPluginsDir () . list () ; if ( list != null ) { for ( java.lang.String pluginJarName : list ) { java.lang.String pluginName = pluginJarName . substring ( NUMBER_CONSTANT , ( ( pluginJarName . length () ) - ( com.google.gerrit.pgm.init.InitPlugins.JAR . length () ) ) ) ; names . add ( pluginName ) ; } } return names ; }
public java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = com.google.gerrit.server.query.change.InternalChangeQuery . schema ( indexes ) ; if ( ( schema != null ) && ( schema . hasField ( ChangeField.EXACT_COMMIT ) ) ) { return query ( com.google.gerrit.server.query.change.InternalChangeQuery . commitsOnBranchNotMerged ( branch , com.google.gerrit.server.query.change.InternalChangeQuery . commits ( schema , hashes ) ) ) ; } else { return byCommitsOnBranchNotMerged ( schema , branch , hashes , indexConfig . maxPrefixTerms () ) ; } }
public final void scrollToLine ( int line ) { int height = getHeight () ; if ( ( lineAtHeight ( ( height - NUMBER_CONSTANT ) ) ) < line ) { scrollToY ( ( ( heightAtLine ( line , STRING_CONSTANT ) ) - ( NUMBER_CONSTANT * height ) ) ) ; } setCursor ( net.codemirror.lib.Pos . create ( line , NUMBER_CONSTANT ) ) ; }
public void update ( ) throws com.google.gerrit.server.git.SubmoduleException { try { schema = schemaFactory . open () ; updateSubmoduleSubscriptions () ; updateSuperProjects ( destBranch , rw , mergeTip . getId () . toObjectId () , null ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.server.git.SubmoduleException ( STRING_CONSTANT , e ) ; } finally { if ( ( schema ) != null ) { schema . close () ; schema = null ; } } }
public static java.lang.String toLongString ( final com.google.gerrit.reviewdb.client.Change.Status status ) { if ( status == null ) { return STRING_CONSTANT ; } switch ( status ) { case DRAFT : return com.google.gerrit.client.changes.Util.C . statusLongDraft () ; case NEW : return com.google.gerrit.client.changes.Util.C . statusLongNew () ; case MERGED : return com.google.gerrit.client.changes.Util.C . statusLongMerged () ; case ABANDONED : return com.google.gerrit.client.changes.Util.C . statusLongAbandoned () ; default: return status . name () ; } }
private void doGetFile ( com.google.gerrit.server.tools.ToolsCatalog.Entry ent , javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { byte [] tosend = ent . getBytes () ; rsp . setDateHeader ( org.eclipse.jgit.util.HttpSupport.HDR_EXPIRES , NUMBER_CONSTANT ) ; rsp . setHeader ( org.eclipse.jgit.util.HttpSupport.HDR_PRAGMA , STRING_CONSTANT ) ; rsp . setHeader ( org.eclipse.jgit.util.HttpSupport.HDR_CACHE_CONTROL , STRING_CONSTANT ) ; rsp . setContentType ( STRING_CONSTANT ) ; rsp . setContentLength ( tosend.length ) ; try ( java.io.OutputStream out = rsp . getOutputStream () ) { out . write ( tosend ) ; } }
private void uncacheSshKeys ( final com.google.gerrit.client.reviewdb.Account.Id me , final com.google.gerrit.client.reviewdb.ReviewDb db ) { final com.google.gerrit.client.reviewdb.Account a = com.google.gerrit.client.rpc.Common . getAccountCache () . get ( me , db ) ; if ( a != null ) { uncacheSshKeys ( a . getSshUserName () ) ; } }
@ org.junit.Test public void testUploaderSkippedAsReviewer ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = resolver . resolve ( java.util.Collections . singleton ( user.email ) , project , change , gApi . accounts () . id ( user.id . get () ) . get () ) ; com.google.common.truth.Truth . assertThat ( reviewers ) . isEmpty () ; }
@ org.junit.Test public void createProject ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( gApi . projects () . create ( name ) . get () . name ) . isEqualTo ( name ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead ( name , RefNames.REFS_CONFIG ) ; eventRecorder . assertRefUpdatedEvents ( name , RefNames.REFS_CONFIG , null , head ) ; eventRecorder . assertRefUpdatedEvents ( name , STRING_CONSTANT , new java.lang.String [] {} ) ; }
public void storeEvent ( java.lang.String projectName , java.sql.Timestamp timestamp , java.lang.String event ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds . getConnection () ; java.sql.Statement stat = conn . createStatement () ) { stat . execute ( ( ( java.lang.String . format ( STRING_CONSTANT , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.PROJECT_ENTRY , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.EVENT_ENTRY ) ) + ( java.lang.String . format ( STRING_CONSTANT , projectName , timestamp , event ) ) ) ) ; } }
private boolean canForceUpdate () { if ( canPushWithForce () ) { return true ; } switch ( getUser () . getAccessPath () ) { case GIT : return false ; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default: return ( ( isOwner () ) && ( ! ( isForceBlocked ( Permission.PUSH ) ) ) ) || ( projectControl . isAdmin () ) ; } }
private com.google.gerrit.client.ui.Screen createScreen () { switch ( status ) { case ABANDONED : return new com.google.gerrit.client.changes.ByProjectAbandonedChangesScreen ( project , STRING_CONSTANT ) ; case MERGED : return new com.google.gerrit.client.changes.ByProjectMergedChangesScreen ( project , STRING_CONSTANT ) ; case NEW : case SUBMITTED : default: return new com.google.gerrit.client.changes.ByProjectOpenChangesScreen ( project , STRING_CONSTANT ) ; } }
static com.google.gerrit.server.notedb.ChangeNotesState empty ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.AutoValue_ChangeNotesState ( null , change . getId () , null , com.google.common.collect.ImmutableSet . of () , com.google.common.collect.ImmutableSet . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.gerrit.server.ReviewerSet . empty () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableList . of () , com.google.common.collect.ImmutableListMultimap . of () , com.google.common.collect.ImmutableListMultimap . of () , null , null ) ; }
private boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( change == null ) { return false ; } com.google.gerrit.server.project.ProjectState pe = projectCache . get ( change . getProject () ) ; if ( pe == null ) { return false ; } com.google.gerrit.server.project.ProjectControl pc = pe . controlFor ( user ) ; return pc . controlFor ( db , change ) . isVisible ( db ) ; }
private void export ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) throws com.google.gerrit.server.git.CodeReviewNoteCreationException , com.google.gwtorm.server.OrmException , java.io.IOException , java.lang.InterruptedException { final org.eclipse.jgit.lib.Repository git ; try { git = gitManager . openRepository ( project ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException e ) { return; } try { com.google.gerrit.server.git.CreateCodeReviewNotes notes = codeReviewNotesFactory . create ( db , project , git ) ; notes . create ( changes , null , STRING_CONSTANT , monitor ) ; } finally { git . close () ; } }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Unmute.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.StarredChangesUtil.IllegalLabelException , com.google.gwtorm.server.OrmException { if ( ( rsrc . isUserOwner () ) || ( ! ( isMuted ( rsrc ) ) ) ) { return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; } stars . unmute ( rsrc ) ; return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.Abandon.Op op = new com.google.gerrit.server.change.Abandon.Op ( control . getUser () , msgTxt , notifyHandling ) ; try ( com.google.gerrit.server.git.BatchUpdate u = batchUpdateFactory . create ( dbProvider . get () , control . getProject () . getNameKey () , control . getUser () , com.google.gerrit.common.TimeUtil . nowTs () ) ) { u . addOp ( control . getId () , op ) . execute () ; } return op.change ; }
public boolean testRemoveReviewer ( com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.server.CurrentUser currentUser , com.google.gerrit.reviewdb.client.Account.Id reviewer , int value ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { if ( canRemoveReviewerWithoutPermissionCheck ( cd . change () , currentUser , reviewer , value ) ) { return true ; } return permissionBackend . user ( currentUser ) . change ( cd ) . database ( dbProvider ) . test ( ChangePermission.REMOVE_REVIEWER ) ; }
@ java.lang.Override public org.eclipse.jgit.transport.UploadPack create ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.lib.Repository repo ) throws org.eclipse.jgit.http.server.resolver.ServiceNotAuthorizedException , org.eclipse.jgit.http.server.resolver.ServiceNotEnabledException { com.google.gerrit.server.project.ProjectControl pc = com.google.gerrit.httpd.ProjectServlet . getProjectControl ( req ) ; if ( ! ( pc . canRunUploadPack () ) ) { throw new org.eclipse.jgit.http.server.resolver.ServiceNotAuthorizedException () ; } org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack ( repo ) ; up . setPackConfig ( packConfig ) ; if ( ! ( pc . allRefsAreVisible () ) ) { up . setRefFilter ( new com.google.gerrit.server.git.VisibleRefFilter ( repo , pc , db . get () , true ) ) ; } return up ; }
@ java.lang.Override public boolean retryRequest ( org.apache.http.HttpResponse response , int executionCount , org.apache.http.protocol.HttpContext context ) { if ( executionCount > ( cfg . getMaxTries () ) ) { return false ; } if ( ( response . getStatusLine () . getStatusCode () ) >= ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider.ERROR_CODES ) ) { logRetry ( response . getStatusLine () . getReasonPhrase () , context ) ; return true ; } return false ; }
public void bind ( com.googlecode.prolog_cafe.lang.Term t , com.googlecode.prolog_cafe.lang.Trail trail ) { if ( t instanceof com.googlecode.prolog_cafe.lang.VariableTerm ) { com.googlecode.prolog_cafe.lang.VariableTerm v = ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( t ) ) ; if ( ( v.timeStamp ) >= ( this . timeStamp ) ) { v.val = this ; if ( ( v.timeStamp ) < ( trail.timeStamp ) ) trail . push ( v ) ; return; } } val = t ; if ( ( timeStamp ) < ( trail.timeStamp ) ) trail . push ( this ) ; }
@ org.junit.Test public void testCreateProjectWithEmptyCommit ( ) throws java.lang.Exception { java.lang.String newProjectName = name ( STRING_CONSTANT ) ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = newProjectName ; in.createEmptyCommit = true ; gApi . projects () . create ( in ) ; assertEmptyCommit ( newProjectName , STRING_CONSTANT ) ; }
@ java.lang.Override public void start () { if ( ( timer ) == null ) { timer = new java.util.Timer () ; } else { timer . cancel () ; } timer . scheduleAtFixedRate ( new java.util.TimerTask () { @ java.lang.Override public void run () { com.google.gerrit.server.mail.receive.MailReceiver . this . handleEmails () ; } } , NUMBER_CONSTANT , mailSettings.fetchInterval ) ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Mute.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.StarredChangesUtil.IllegalLabelException , com.google.gwtorm.server.OrmException { if ( ( rsrc . isUserOwner () ) || ( isMuted ( rsrc . getChange () ) ) ) { return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; } stars . mute ( rsrc ) ; return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; }
private static com.google.gerrit.server.query.change.ChangeData change ( java.lang.String . . . files ) throws com.google.gwtorm.server.OrmException { java.util.Arrays . sort ( files ) ; com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData . createForTest ( new com.google.gerrit.reviewdb.client.Change.Id ( NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; cd . setCurrentFilePaths ( java.util.Arrays . asList ( files ) ) ; return cd ; }
@ java.lang.Override protected void configure () { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config () ; cfg . setInt ( STRING_CONSTANT , null , STRING_CONSTANT , NUMBER_CONSTANT ) ; cfg . setInt ( STRING_CONSTANT , null , STRING_CONSTANT , ( ( int ) ( NUMBER_CONSTANT ) ) ) ; bind ( PrologEnvironment.Args . class ) . toInstance ( new com.google.gerrit.rules.PrologEnvironment.Args ( null , null , null , null , null , null , null , cfg ) ) ; }
private java.util.List < com.google.gerrit.extensions.common.FixSuggestionInfo > toFixSuggestionInfos ( @ com.google.gerrit.common.Nullable java.util.List < com.google.gerrit.reviewdb.client.FixSuggestion > fixSuggestions ) { if ( ( fixSuggestions == null ) || ( fixSuggestions . isEmpty () ) ) { return null ; } return fixSuggestions . stream () . map ( this : : toFixSuggestionInfo ) . collect ( java.util.stream.Collectors . toList () ) ; }
@ org.junit.Test public void addReviewer ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput () ; in.reviewer = user.email ; gApi . changes () . id ( r . getChangeId () ) . addReviewer ( in ) ; com.google.common.truth.Truth . assertThat ( getReviewers ( r . getChangeId () ) ) . containsExactlyElementsIn ( com.google.common.collect.ImmutableSet . of ( user.id ) ) ; }
@ org.junit.Test public void namedAnchor ( ) throws java.lang.Exception { java.lang.String markdown = STRING_CONSTANT + STRING_CONSTANT ; repo . branch ( STRING_CONSTANT ) . commit () . add ( STRING_CONSTANT , markdown ) . create () ; java.lang.String html = buildHtml ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( html ) . contains ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; com.google.common.truth.Truth . assertThat ( html ) . contains ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.RequestCleanup . class ) . in ( com.google.inject.servlet.RequestScoped . class ) ; bind ( com.google.gerrit.client.reviewdb.ReviewDb . class ) . toProvider ( com.google.gerrit.server.config.RequestScopedReviewDbProvider . class ) . in ( com.google.inject.servlet.RequestScoped . class ) ; bind ( IdentifiedUser.RequestFactory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.account.AccountResolver . class ) ; bind ( ChangeControl.Factory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( GroupControl.Factory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( ProjectControl.Factory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
private com.google.gerrit.reviewdb.client.Change submitToDatabase ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId , final java.sql.Timestamp timestamp ) throws com.google.gwtorm.server.OrmException { return db . changes () . atomicUpdate ( changeId , new com.google.gwtorm.server.AtomicUpdate < com.google.gerrit.reviewdb.client.Change > () { @ java.lang.Override public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus () . isOpen () ) { change . setStatus ( Change.Status.SUBMITTED ) ; change . setLastUpdatedOn ( timestamp ) ; return change ; } return null ; } } ) ; }
javax.naming.directory.DirContext open ( ) throws javax.naming.NamingException , javax.security.auth.login.LoginException { final java.util.Properties env = createContextProperties () ; env . put ( javax.naming.Context.SECURITY_AUTHENTICATION , authentication ) ; env . put ( javax.naming.Context.REFERRAL , referral ) ; if ( STRING_CONSTANT . equals ( authentication ) ) { return kerberosOpen ( env ) ; } if ( ( username ) != null ) { env . put ( javax.naming.Context.SECURITY_PRINCIPAL , username ) ; env . put ( javax.naming.Context.SECURITY_CREDENTIALS , password ) ; } return new javax.naming.directory.InitialDirContext ( env ) ; }
private com.google.gerrit.server.notedb.ChangeNotes getNotes ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get () . changes () . get ( changeId ) ; if ( c == null ) { throw com.google.gerrit.sshd.commands.PatchSetParser . error ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) ) ; } return notesFactory . create ( db . get () , c . getProject () , changeId ) ; }
static void extract ( final java.io.File dst , final java.lang.Class < > sibling , final java.lang.String name ) throws java.io.IOException { try ( java.io.InputStream in = com.google.gerrit.pgm.init.InitUtil . open ( sibling , name ) ) { if ( in != null ) { java.nio.ByteBuffer buf = org.eclipse.jgit.util.IO . readWholeStream ( in , NUMBER_CONSTANT ) ; com.google.gerrit.pgm.init.InitUtil . copy ( dst , buf ) ; } } }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onSave ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.account.AccountApi . putEditPreferences ( prefs , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.account.EditPreferences > () { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.account.EditPreferences p ) { com.google.gerrit.client.Gerrit . setEditPreferences ( p . copyTo ( new com.google.gerrit.extensions.client.EditPreferencesInfo () ) ) ; } } ) ; if ( ( view ) != null ) { close () ; } }
private void goUpToChange ( boolean openReplyBox ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . valueOf ( base . get () ) : null ; java.lang.String rev = java.lang.String . valueOf ( revision . get () ) ; com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( changeId , rev ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , b , rev , openReplyBox ) ) ; }
@ org.junit.Test public void getRefsHeadsText ( ) throws java.lang.Exception { setUpSimpleRefs () ; com.google.gitiles.FakeHttpServletResponse res = buildText ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( res . getActualBodyString () ) . isEqualTo ( ( ( ( ( id ( STRING_CONSTANT ) ) + STRING_CONSTANT ) + ( id ( STRING_CONSTANT ) ) ) + STRING_CONSTANT ) ) ; }
public static java.lang.String formatValue ( short value ) { if ( value < NUMBER_CONSTANT ) { return java.lang.Short . toString ( value ) ; } else if ( value == NUMBER_CONSTANT ) { return STRING_CONSTANT ; } else { return STRING_CONSTANT + ( java.lang.Short . toString ( value ) ) ; } }
public static void applyUserPreferences () { if ( ( com.google.gerrit.client.Gerrit.myAccount ) != null ) { final com.google.gerrit.reviewdb.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount . getGeneralPreferences () ; com.google.gwtexpui.clippy.client.CopyableLabel . setFlashEnabled ( p . isUseFlashClipboard () ) ; com.google.gerrit.client.Gerrit.siteHeader . setVisible ( p . isShowSiteHeader () ) ; com.google.gerrit.client.Gerrit.siteFooter . setVisible ( p . isShowSiteHeader () ) ; } }
com.google.gerrit.common.data.PatchScript toPatchScript ( final com.google.gerrit.server.patch.PatchListEntry content , final com.google.gerrit.common.data.CommentDetail comments , final java.util.List < com.google.gerrit.reviewdb.Patch > history ) throws java.io.IOException { reader = db . newObjectReader () ; try { return build ( content , comments , history ) ; } finally { reader . release () ; } }
private int finish ( final java.util.Iterator < com.google.gerrit.reviewdb.client.PatchLineComment > i , int row , final int col ) { while ( i . hasNext () ) { final com.google.gerrit.reviewdb.client.PatchLineComment c = i . next () ; if ( ( c . getLine () ) == ( R_HEAD ) ) { insertFileCommentRow ( row ) ; } else { insertRow ( row ) ; } bindComment ( row , col , c , ( ! ( i . hasNext () ) ) ) ; row ++ ; } return row ; }
@ java.lang.Override public java.lang.String replace ( java.lang.String input ) { java.lang.String href = pat . replace ( input , link ) ; if ( ! ( com.google.gwtexpui.safehtml.client.LinkFindReplace . hasValidScheme ( href ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( STRING_CONSTANT + ( toString () ) ) + STRING_CONSTANT ) + href ) ) ; } return new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () . openAnchor () . setAttribute ( STRING_CONSTANT , href ) . append ( com.google.gwtexpui.safehtml.client.SafeHtml . asis ( input ) ) . closeAnchor () . asString () ; }
private com.google.gerrit.server.group.db.InternalGroupCreation getGroupCreation ( com.google.gerrit.server.Sequences seqs , com.google.gerrit.common.data.GroupReference groupReference ) throws com.google.gwtorm.server.OrmException { int next = seqs . nextGroupId () ; return com.google.gerrit.server.group.db.InternalGroupCreation . builder () . setNameKey ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( groupReference . getName () ) ) . setId ( new com.google.gerrit.reviewdb.client.AccountGroup.Id ( next ) ) . setGroupUUID ( groupReference . getUUID () ) . build () ; }
@ java.lang.Override public com.google.gerrit.server.query.Predicate < T > copy ( final java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > children ) { if ( ( children . size () ) != NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } return new com.google.gerrit.server.query.VariablePredicate ( getName () , children . iterator () . next () ) ; }
@ java.lang.Override public java.lang.String apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.avatar.AvatarProvider impl = avatarProvider . get () ; if ( impl == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } java.lang.String url = impl . getChangeAvatarUrl ( rsrc . getUser () ) ; if ( com.google.common.base.Strings . isNullOrEmpty ( url ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } return url ; }
@ java.lang.Override public com.google.common.util.concurrent.ListenableFuture < java.util.List < java.lang.Void > > apply ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.List < com.google.common.util.concurrent.ListenableFuture < java.lang.Void > > result = com.google.common.collect.Lists . newArrayListWithCapacity ( changes . size () ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { result . add ( executor . submit ( new com.google.gerrit.server.index.ReindexAfterUpdate.Index ( event , c . getId () ) ) ) ; } return com.google.common.util.concurrent.Futures . allAsList ( result ) ; }
public static void zipFile ( java.io.File file , java.lang.String name , java.util.zip.ZipOutputStream zip ) throws java.io.IOException { zip . putNextEntry ( new java.util.zip.ZipEntry ( name ) ) ; try ( java.io.FileInputStream input = new java.io.FileInputStream ( file ) ) { com.google.common.io.ByteStreams . copy ( input , zip ) ; } zip . closeEntry () ; }
private void computeAllowed () { final java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > am = user . getEffectiveGroups () ; final com.google.gerrit.server.project.ProjectState pe = projectCache . get ( change . getDest () . getParentKey () ) ; computeAllowed ( am , pe . getRights () ) ; computeAllowed ( am , projectCache . getWildcardRights () ) ; }
@ org.junit.Test public void byFileRegex ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . parseBody ( repo . commit () . message ( STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . add ( STRING_CONSTANT , STRING_CONSTANT ) . create () ) ; com.google.gerrit.reviewdb.client.Change change = insert ( newChange ( repo , commit , null , null , null ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( STRING_CONSTANT , change ) ; }
@ org.junit.Test public void setParent_Forbidden ( ) throws java.lang.Exception { java.lang.String parent = STRING_CONSTANT ; com.google.gerrit.acceptance.GitUtil . createProject ( sshSession , parent , null , true ) ; com.google.gerrit.acceptance.RestResponse r = userSession . put ( ( ( STRING_CONSTANT + ( project . get () ) ) + STRING_CONSTANT ) , newParentInput ( parent ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; r . consume () ; }
@ java.lang.Override public void onSuccess ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.change.RestReviewerSuggestOracle.SuggestReviewerInfo > result ) { final java.util.List < com.google.gerrit.client.change.RestReviewerSuggestOracle.RestReviewerSuggestion > r = new java.util.ArrayList ( result . length () ) ; for ( final com.google.gerrit.client.change.RestReviewerSuggestOracle.SuggestReviewerInfo reviewer : com.google.gerrit.client.rpc.Natives . asList ( result ) ) { r . add ( new com.google.gerrit.client.change.RestReviewerSuggestOracle.RestReviewerSuggestion ( reviewer ) ) ; } callback . onSuggestionsReady ( req , new com.google.gerrit.client.change.Response ( r ) ) ; }
private java.lang.String amendChange ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident , java.lang.String changeId ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , ident , git , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME2 , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2 ) , changeId ) ; return push . to ( STRING_CONSTANT ) . getChangeId () ; }
@ java.lang.Override public com.google.gerrit.server.account.GetPreferences.PreferenceInfo apply ( com.google.gerrit.server.config.ConfigResource rsrc ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = gitMgr . openRepository ( allUsersName ) ) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences . forDefault () ; p . load ( git ) ; return new com.google.gerrit.server.account.GetPreferences.PreferenceInfo ( null , p , git ) ; } }
public static void revert ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String msg , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput . create () ; input . message ( com.google.gerrit.client.changes.ChangeApi . emptyToNull ( msg ) ) ; com.google.gerrit.client.changes.ChangeApi . call ( project , id , STRING_CONSTANT ) . post ( input , cb ) ; }
void display ( java.util.List < java.util.List < java.lang.String > > values ) { for ( int row = NUMBER_CONSTANT ; row < ( table . getRowCount () ) ; row ++ ) { table . removeRow ( ( row -- ) ) ; } int row = NUMBER_CONSTANT ; for ( java.util.List < java.lang.String > v : values ) { populate ( row , v , ( row == ( ( values . size () ) + NUMBER_CONSTANT ) ) ) ; row ++ ; } }
public com.google.gerrit.client.data.ChangeDetail run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gerrit.client.changes.Failure , com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Change change = db . changes () . get ( id ) ; if ( change == null ) { throw new com.google.gerrit.client.changes.Failure ( new com.google.gerrit.client.rpc.NoSuchEntityException () ) ; } final com.google.gerrit.client.workflow.RightRule rules = new com.google.gerrit.client.workflow.RightRule () ; final com.google.gerrit.client.data.ChangeDetail d = new com.google.gerrit.client.data.ChangeDetail () ; d . load ( db , new com.google.gerrit.client.data.AccountInfoCacheFactory ( db ) , rules , change ) ; return d ; }
public boolean dbExists ( ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds . getConnection () ; java.sql.ResultSet tables = conn . getMetaData () . getTables ( null , null , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME . toUpperCase () , null ) ) { return tables . next () ; } }
public void onSuggestionsReady ( com.google.gerrit.client.ui.Request request , com.google.gerrit.client.ui.Response response ) { if ( ( exclude . size () ) > NUMBER_CONSTANT ) { java.util.Set < com.google.gerrit.client.ui.Suggestion > filteredSuggestions = new java.util.HashSet ( response . getSuggestions () ) ; for ( com.google.gerrit.client.ui.Suggestion s : response . getSuggestions () ) { if ( exclude . contains ( s . getReplacementString () ) ) { filteredSuggestions . remove ( s ) ; } } response . setSuggestions ( filteredSuggestions ) ; } callback . onSuggestionsReady ( request , response ) ; }
public java.util.List < com.google.gerrit.extensions.common.GroupInfo > get ( ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException { if ( ! ( com.google.common.base.Strings . isNullOrEmpty ( suggest ) ) ) { return suggestGroups () ; } if ( owned ) { return getGroupsOwnedBy ( ( ( user ) != null ? userFactory . create ( user ) : identifiedUser . get () ) ) ; } if ( ( user ) != null ) { return accountGetGroups . apply ( new com.google.gerrit.server.account.AccountResource ( userFactory . create ( user ) ) ) ; } return getAllGroups () ; }
@ java.lang.Override public java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountGroup > all () { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { return java.util.Collections . unmodifiableList ( db . accountGroups () . all () . toList () ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.account.GroupCacheImpl.log . warn ( STRING_CONSTANT , e ) ; return java.util.Collections . emptyList () ; } }
com.googlesource.gerrit.plugins.findowners.OwnersDb get ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.query.change.ChangeData changeData , int patchset ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData . change () . getProject () ; java.lang.String branch = changeData . change () . getDest () . get () ; java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache . makeKey ( changeData . getId () . get () , patchset , branch ) ; return get ( dbKey , repository , project , branch , changeData . currentFilePaths () ) ; }
public void testInheritRead_AppendWithDenyOfRef () { grant ( parent , com.google.gerrit.common.data.Permission.READ , registered , STRING_CONSTANT ) ; grant ( local , com.google.gerrit.common.data.Permission.READ , registered , STRING_CONSTANT ) . setDeny () ; com.google.gerrit.server.project.ProjectControl u = user () ; assertTrue ( STRING_CONSTANT , u . isVisible () ) ; assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; }
@ java.lang.Override public boolean equals ( final java.lang.Object obj ) { if ( ( ! ( super . equals ( obj ) ) ) || ( ! ( obj instanceof com.google.gerrit.common.data.AccessSection ) ) ) { return false ; } return new java.util.HashSet < com.google.gerrit.common.data.Permission > ( getPermissions () ) . equals ( new java.util.HashSet ( ( ( com.google.gerrit.common.data.AccessSection ) ( obj ) ) . getPermissions () ) ) ; }
private static final boolean computeWin32 () { final java.lang.String osDotName = java.security.AccessController . doPrivileged ( new java.security.PrivilegedAction < java.lang.String > () { public java.lang.String run () { return java.lang.System . getProperty ( STRING_CONSTANT ) ; } } ) ; return ( osDotName != null ) && ( osDotName . toLowerCase () . contains ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void testSqlFriendlyNames () { org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gwtorm.schema.Util . makeSqlFriendly ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gwtorm.schema.Util . makeSqlFriendly ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gwtorm.schema.Util . makeSqlFriendly ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gwtorm.schema.Util . makeSqlFriendly ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gwtorm.schema.Util . makeSqlFriendly ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gwtorm.schema.Util . makeSqlFriendly ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi revert ( com.google.gerrit.extensions.api.changes.RevertInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changeApi . id ( revert . apply ( change , in ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.common.errors.EmailException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMergedFromIndex ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate . and ( com.google.gerrit.server.query.change.InternalChangeQuery . ref ( branch ) , com.google.gerrit.server.query.change.InternalChangeQuery . project ( branch . getParentKey () ) , com.google.gerrit.server.query.Predicate . not ( com.google.gerrit.server.query.change.InternalChangeQuery . status ( Change.Status.MERGED ) ) , com.google.gerrit.server.query.Predicate . or ( com.google.gerrit.server.query.change.InternalChangeQuery . commits ( hashes ) ) ) ) ; }
public boolean isLoggedIn ( java.util.Set < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > scopes ) { boolean loggedIn = ( ( scopesSet . equals ( scopes ) ) && ( ( token ) != null ) ) && ( ( hub ) != null ) ; if ( loggedIn && ( ( myself ) == null ) ) { try { myself = hub . getMyself () ; } catch ( java.lang.Throwable e ) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log . error ( STRING_CONSTANT , e ) ; logout () ; loggedIn = false ; } } return loggedIn ; }
@ org.junit.Test public void testPrefixOnlyOptimization ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.RegexFilePredicate p = com.google.gerrit.server.query.change.RegexFilePredicateTest . predicate ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT , STRING_CONSTANT ) ) ) ; org.junit.Assert . assertFalse ( p . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest . change ( STRING_CONSTANT ) ) ) ; }
@ org.junit.Test public void testCreateProjectWithBranches ( ) throws java.lang.Exception { java.lang.String newProjectName = name ( STRING_CONSTANT ) ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = newProjectName ; in.createEmptyCommit = true ; in.branches = com.google.common.collect.Lists . newArrayListWithCapacity ( NUMBER_CONSTANT ) ; in.branches . add ( STRING_CONSTANT ) ; in.branches . add ( STRING_CONSTANT ) ; in.branches . add ( STRING_CONSTANT ) ; gApi . projects () . create ( in ) ; assertHead ( newProjectName , STRING_CONSTANT ) ; assertEmptyCommit ( newProjectName , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
@ org.junit.Test public void queryChangesStart ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange () ; createChange () ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = gApi . changes () . query () . withStart ( NUMBER_CONSTANT ) . get () ; com.google.common.truth.Truth . assertThat ( com.google.common.collect.Iterables . getOnlyElement ( results ) . changeId ) . isEqualTo ( r1 . getChangeId () ) ; }
@ org.junit.Test public void testBulletList3 () { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . html ( STRING_CONSTANT ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o . wikify () ; org.junit.Assert . assertNotSame ( o , n ) ; org.junit.Assert . assertEquals ( ( ( ( ( ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.BEGIN_LIST ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest . item ( STRING_CONSTANT ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.END_LIST ) ) + STRING_CONSTANT ) , n . asString () ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > submitRecords ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( cd . getSubmitRecords () ) != null ) { return cd . getSubmitRecords () ; } cd . setSubmitRecords ( new com.google.gerrit.server.project.SubmitRuleEvaluator ( cd ) . setFastEvalLabels ( true ) . setAllowDraft ( true ) . evaluate () ) ; return cd . getSubmitRecords () ; }
private void setMerged ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx , com.google.gerrit.reviewdb.client.ChangeMessage msg ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange () ; com.google.gerrit.reviewdb.server.ReviewDb db = ctx . getDb () ; logDebug ( STRING_CONSTANT , c . getId () ) ; c . setStatus ( Change.Status.MERGED ) ; c . setSubmissionId ( args.submissionId ) ; if ( msg != null ) { args.cmUtil . addChangeMessage ( db , ctx . getUpdate ( msg . getPatchSetId () ) , msg ) ; } }
@ java.lang.Override public java.lang.Void get ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { if ( ! ( isDone () ) ) { if ( reopenThread . waitForGeneration ( gen , ( ( int ) ( java.util.concurrent.TimeUnit.MILLISECONDS . convert ( timeout , unit ) ) ) ) ) { set ( null ) ; } else { throw new java.util.concurrent.TimeoutException () ; } } return super . get ( timeout , unit ) ; }
private java.lang.String getRedirectUrl ( java.lang.String pathAndQuery ) throws java.io.IOException , javax.servlet.ServletException { com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse () ; service ( pathAndQuery , com.google.common.util.concurrent.Atomics . < com.google.gitiles.GitilesView > newReference () , res ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , res . getStatus () ) ; return res . getHeader ( com.google.common.net.HttpHeaders.LOCATION ) ; }
@ org.junit.Test public void conflictingChanges ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( true ) ; com.google.gerrit.acceptance.PushOneCommit.Result conflictingChange1 = createChange ( true ) ; com.google.gerrit.acceptance.PushOneCommit.Result conflictingChange2 = createChange ( true ) ; createChange ( false ) ; java.util.Set < java.lang.String > changes = queryConflictingChanges ( change ) ; assertChanges ( changes , conflictingChange1 , conflictingChange2 ) ; }
protected void alias ( final com.google.gerrit.sshd.CommandName parent , final java.lang.String name , final java.lang.Class < ? extends com.google.gerrit.sshd.BaseCommand > clazz ) { com.google.gerrit.sshd.CommandMetaData meta = clazz . getAnnotation ( com.google.gerrit.sshd.CommandMetaData . class ) ; if ( meta == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } bind ( com.google.gerrit.sshd.Commands . key ( parent , name , meta . description () ) ) . to ( clazz ) ; }
@ java.lang.Override protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager ( this , getProject () , base , revision , path , result . getCommentLinkProcessor () , getChangeStatus () . isOpen () ) ; setTheme ( result . getTheme () ) ; display ( comments ) ; header . setupPrevNextFiles ( comments ) ; }
public com.google.common.util.concurrent.ListenableFuture < > rebuildAsync ( final com.google.gerrit.reviewdb.client.Change change , com.google.common.util.concurrent.ListeningExecutorService executor , final org.eclipse.jgit.lib.Repository changeRepo ) { return executor . submit ( new java.util.concurrent.Callable < java.lang.Void > () { @ java.lang.Override public java.lang.Void call ( ) throws java.lang.Exception { rebuild ( change , changeRepo ) ; return null ; } } ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.RequestCleanup . class ) . in ( com.google.inject.servlet.RequestScoped . class ) ; bind ( com.google.gerrit.server.config.RequestScopedReviewDbProvider . class ) ; bind ( IdentifiedUser.RequestFactory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.project.PerRequestProjectControlCache . class ) . in ( com.google.inject.servlet.RequestScoped . class ) ; bind ( ProjectControl.Factory . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; factory ( SubmoduleOp.Factory . class ) ; factory ( MergeOp.Factory . class ) ; }
protected static void renameColumn ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String from , java.lang.String to ) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.jdbc.JdbcSchema s = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) ; try ( com.google.gwtorm.jdbc.JdbcExecutor e = new com.google.gwtorm.jdbc.JdbcExecutor ( s ) ) { s . renameField ( e , table , from , to ) ; } }
@ java.lang.Override protected void run ( ) throws java.lang.Exception { com.google.gerrit.server.project.SetHead.Input input = new com.google.gerrit.server.project.SetHead.Input () ; input.ref = newHead ; try { setHead . apply ( new com.google.gerrit.server.project.ProjectResource ( project , user ) , input ) ; } catch ( com.google.gerrit.extensions.restapi.UnprocessableEntityException e ) { throw die ( e ) ; } }
private int insertRow ( final int beforeRow ) { for ( final com.google.gerrit.client.changes.ChangeTable.Section s : sections ) { boolean dirty = false ; if ( beforeRow <= ( s.titleRow ) ) { ( s.titleRow ) ++ ; } if ( beforeRow < ( s.dataBegin ) ) { ( s.dataBegin ) ++ ; } } return table . insertRow ( beforeRow ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void send ( final com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { com.google.gwt.http.client.RequestBuilder req = new com.google.gwt.http.client.RequestBuilder ( com.google.gwt.http.client.RequestBuilder.GET , url . toString () ) ; req . setHeader ( STRING_CONSTANT , JsonConstants.JSON_TYPE ) ; req . setCallback ( new com.google.gerrit.client.rpc.RestApi.MyRequestCallback < T > ( cb ) ) ; try { RpcStatus.INSTANCE . onRpcStart () ; req . send () ; } catch ( com.google.gwt.http.client.RequestException e ) { RpcStatus.INSTANCE . onRpcComplete () ; cb . onFailure ( e ) ; } }
@ org.junit.Test public void byId ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( newChange ( repo , null , null , null , null ) ) ; assertQuery ( STRING_CONSTANT ) ; assertQuery ( change1 . getId () . get () , change1 ) ; assertQuery ( change2 . getId () . get () , change2 ) ; }
@ java.lang.Override public GroupDescription.Basic get ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { final com.google.gerrit.common.data.GroupReference ref = com.google.gerrit.server.group.SystemGroupBackend . getGroup ( uuid ) ; return new com.google.gerrit.common.data.GroupDescription.Basic () { @ java.lang.Override public java.lang.String getName () { return ref . getName () ; } @ java.lang.Override public AccountGroup.UUID getGroupUUID () { return ref . getUUID () ; } @ java.lang.Override public java.lang.String getUrl () { return null ; } @ java.lang.Override public java.lang.String getEmailAddress () { return null ; } } ; }
private void appendFileLine ( java.lang.StringBuilder cmts , com.google.gerrit.server.patch.PatchFile fileData , short side , int line ) { java.lang.String lineStr = getLine ( fileData , side , line ) ; cmts . append ( STRING_CONSTANT ) . append ( line ) . append ( STRING_CONSTANT ) . append ( lineStr ) . append ( STRING_CONSTANT ) ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig . sshd ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . contactstore ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . user ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . auth ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . gitweb ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . repo ( config , rs ) ; }
private static void assertOutput ( final byte [] expect , final java.io.ByteArrayOutputStream out ) { final byte [] buf = out . toByteArray () ; for ( int i = NUMBER_CONSTANT ; i < ( expect.length ) ; i ++ ) org.junit.Assert . assertEquals ( expect [ i ] , buf [ i ] ) ; }
@ java.lang.Override public java.util.List < java.lang.String > lookup ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes () . get ( psId . getParentKey () ) ; if ( c == null ) { return null ; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory . create ( db , c ) ; com.google.gerrit.reviewdb.client.PatchSet ps = psUtil . get ( db , notes , psId ) ; return ps != null ? ps . getGroups () : null ; }
@ java.lang.Override public boolean hasNext () { while ( ( ( next ) == null ) && ( itr . hasNext () ) ) { com.google.inject.Provider < T > p = itr . next () . get () ; if ( p != null ) { try { next = p . get () ; } catch ( java.lang.RuntimeException e ) {} } } return ( next ) != null ; }
public boolean isVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( ( getChange () . getStatus () ) == ( Change.Status.DRAFT ) ) && ( ! ( isDraftVisible ( db , cd ) ) ) ) { return false ; } return isRefVisible () ; }
@ java.lang.Override public void onScreenLoad ( com.google.gerrit.client.ui.ScreenLoadEvent event ) { com.google.gerrit.client.ui.Screen screen = event . getScreen () ; com.google.gerrit.reviewdb.client.Project.NameKey projectKey ; if ( screen instanceof com.google.gerrit.client.admin.ProjectScreen ) { projectKey = ( ( com.google.gerrit.client.admin.ProjectScreen ) ( screen ) ) . getProjectKey () ; } else { projectKey = com.google.gerrit.client.admin.ProjectScreen . getSavedKey () ; } if ( projectKey != null ) { setVisible ( true ) ; onScreenLoad ( projectKey ) ; } else { setVisible ( false ) ; } super . onScreenLoad ( event ) ; }
@ org.junit.Test public void mergeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , sc.owner , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; }
@ java.lang.Override public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ; javax.servlet.http.HttpServletResponse rsp = ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) ; if ( verify ( req , rsp ) ) { chain . doFilter ( req , response ) ; } }
private java.util.List < com.google.gerrit.client.ui.InlineHyperlink > getUnifiedDiffLink () { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink () ; toUnifiedDiffLink . setHTML ( new com.google.gwt.user.client.ui.ImageResourceRenderer () . render ( Gerrit.RESOURCES . unifiedDiff () ) ) ; toUnifiedDiffLink . setTargetHistoryToken ( com.google.gerrit.client.Dispatcher . toUnified ( getProject () , base , revision , path ) ) ; toUnifiedDiffLink . setTitle ( PatchUtil.C . unifiedDiff () ) ; return java.util.Collections . singletonList ( toUnifiedDiffLink ) ; }
@ java.lang.Override public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Ignore.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { try { if ( rsrc . isUserOwner () ) { throw new com.google.gerrit.extensions.restapi.BadRequestException ( STRING_CONSTANT ) ; } if ( ! ( isIgnored ( rsrc ) ) ) { stars . ignore ( rsrc ) ; } return com.google.gerrit.extensions.restapi.Response . ok ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e . getMessage () ) ; } }
private static void validateRequestMethod ( javax.servlet.http.HttpServletRequest req ) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { if ( ! ( ( STRING_CONSTANT . equals ( req . getMethod () ) ) || ( STRING_CONSTANT . equals ( req . getMethod () ) ) ) ) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException () ; } }
@ org.junit.Test public void parseNoteDbPrimary () { com.google.gerrit.server.notedb.NoteDbChangeState state = com.google.gerrit.server.notedb.NoteDbChangeState . parse ( new com.google.gerrit.reviewdb.client.Change.Id ( NUMBER_CONSTANT ) , STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( state . getPrimaryStorage () ) . isEqualTo ( PrimaryStorage.NOTE_DB ) ; com.google.common.truth.Truth . assertThat ( state . getRefState () ) . isEmpty () ; com.google.common.truth.Truth . assertThat ( state . getReadOnlyUntil () ) . isEmpty () ; }
public com.google.gerrit.client.ui.InlineHyperlink getNextPatchLink ( int index , com.google.gerrit.client.patches.PatchScreen.Type patchType ) { int nextPatchIndex = getNextPatch ( index , false , PREFERENCE_VALIDATOR ) ; if ( nextPatchIndex < NUMBER_CONSTANT ) { return null ; } return createLink ( nextPatchIndex , patchType , null , com.google.gwtexpui.safehtml.client.SafeHtml . asis ( Util.C . nextPatchLinkIcon () ) ) ; }
@ java.lang.Override public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.server.project.ProjectState project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) { try { return new com.google.gerrit.server.change.ChangeKindCacheImpl.Loader () . load ( new com.google.gerrit.server.change.ChangeKindCacheImpl.Key ( repo , prior , next , useRecursiveMerge ) ) ; } catch ( java.io.IOException e ) { com.google.gerrit.server.change.ChangeKindCacheImpl.log . warn ( ( ( ( STRING_CONSTANT + ( next . name () ) ) + STRING_CONSTANT ) + ( project . getProject () . getName () ) ) , e ) ; return ChangeKind.REWORK ; } }
@ java.lang.Override public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException { validate ( ctx ) ; if ( ! ( updateRef ) ) { return; } ctx . addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . zeroId () , commit , patchSet . getRefName () ) ) ; }
void appendReplace ( int aLen , int bLen ) { appendCommon ( java.lang.Math . min ( aLen , bLen ) ) ; if ( aLen < bLen ) { appendInsert ( ( bLen - aLen ) ) ; } else if ( aLen > bLen ) { appendDelete ( ( aLen - bLen ) ) ; } }
private com.google.gerrit.server.change.PostReviewers.Addition addAssigneeAsCC ( com.google.gerrit.server.change.ChangeResource rsrc , java.lang.String assignee ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.extensions.api.changes.AddReviewerInput reviewerInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput () ; reviewerInput.reviewer = assignee ; reviewerInput.state = com.google.gerrit.extensions.client.ReviewerState.CC ; reviewerInput.confirmed = true ; reviewerInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ; return postReviewers . prepareApplication ( rsrc , reviewerInput , false ) ; }
static com.googlecode.prolog_cafe.lang.Term export ( com.google.gerrit.common.data.LabelType type ) { return new com.googlecode.prolog_cafe.lang.StructureTerm ( gerrit.PRED_get_legacy_label_types_1.symLabelType , com.googlecode.prolog_cafe.lang.SymbolTerm . intern ( type . getName () ) , com.googlecode.prolog_cafe.lang.SymbolTerm . intern ( type . getFunctionName () ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( type . getMin () . getValue () ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( type . getMax () . getValue () ) ) ; }
@ java.lang.Override public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { final com.google.gwt.user.client.ui.HTMLTable.Cell cell = table . getCellForEvent ( event ) ; if ( cell == null ) { return; } if ( ( cell . getCellIndex () ) == ( com.google.gerrit.client.changes.ChangeTable.C_STAR ) ) {} else if ( ( cell . getCellIndex () ) == ( com.google.gerrit.client.changes.ChangeTable.C_OWNER ) ) {} else if ( ( getRowItem ( cell . getRowIndex () ) ) != null ) { movePointerTo ( cell . getRowIndex () ) ; } }
@ java.lang.Override protected void doGetText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { java.lang.String name = describe ( org.eclipse.jgit.http.server.ServletUtils . getRepository ( req ) , com.google.gitiles.ViewFilter . getView ( req ) , req , res ) ; if ( name == null ) { return; } try ( java.io.Writer out = startRenderText ( req , res ) ) { out . write ( com.google.gitiles.RefServlet . sanitizeRefForText ( name ) ) ; } }
public void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.AccountInfo editor , java.util.Collection < java.lang.String > hashtags , java.util.Collection < java.lang.String > added , java.util.Collection < java.lang.String > removed ) { if ( ! ( listeners . iterator () . hasNext () ) ) { return; } com.google.gerrit.server.extensions.events.HashtagsEdited.Event e = new com.google.gerrit.server.extensions.events.HashtagsEdited.Event ( change , editor , hashtags , added , removed ) ; for ( com.google.gerrit.extensions.events.HashtagsEditedListener l : listeners ) { l . onHashtagsEdited ( e ) ; } }
private void approve ( com.google.gerrit.acceptance.RestSession s , java.lang.String changeId , int expected ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = s . post ( ( ( STRING_CONSTANT + changeId ) + STRING_CONSTANT ) , new com.google.gerrit.extensions.api.changes.ReviewInput () . label ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; com.google.common.truth.Truth . assertThat ( r . getStatusCode () ) . isEqualTo ( expected ) ; r . consume () ; }
static com.google.gerrit.server.permissions.PermissionCollection.SeenRule create ( com.google.gerrit.common.data.AccessSection section , @ com.google.gerrit.common.Nullable com.google.gerrit.common.data.PermissionRule rule ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID group = ( ( rule != null ) && ( ( rule . getGroup () ) != null ) ) ? rule . getGroup () . getUUID () : null ; return new com.google.gerrit.server.permissions.AutoValue_PermissionCollection_SeenRule ( section . getName () , group ) ; }
private void clearActiveLine ( net.codemirror.lib.CodeMirror cm ) { if ( cm . hasActiveLine () ) { net.codemirror.lib.CodeMirror.LineHandle activeLine = cm . activeLine () ; cm . removeLineClass ( activeLine , LineClassWhere.WRAP , DiffTable.style . activeLine () ) ; cm . activeLine ( null ) ; } }
private com.google.gerrit.sshd.SshSession newSession () { final java.net.SocketAddress peer ; if ( ( peerAddress ) == null ) { peer = session . get () . getRemoteAddress () ; } else { peer = peerAddress ; } return new com.google.gerrit.sshd.SshSession ( session . get () , peer , userFactory . create ( peer , accountId ) ) ; }
@ org.junit.Test public void skipWhenUserBelongsToGroupName ( ) throws java.lang.Exception { java.lang.String config = STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ; com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , config ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( new com.google.gerrit.reviewdb.client.AccountGroup ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( STRING_CONSTANT ) , new com.google.gerrit.reviewdb.client.AccountGroup.Id ( NUMBER_CONSTANT ) , new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( STRING_CONSTANT ) ) ) ) ; com.google.common.truth.Truth . assertThat ( validatorConfig . isEnabledForRef ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( STRING_CONSTANT ) . get () , projectName , STRING_CONSTANT , STRING_CONSTANT ) ) . isFalse () ; }
@ org.junit.Test public void mergeByReviewerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , sc.reviewer , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; }
@ org.junit.Test public void testNoChangeIndexUsesSqlRewrites ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( STRING_CONSTANT ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out ; out = rewrite ( in ) ; org.junit.Assert . assertTrue ( ( ( out instanceof com.google.gerrit.server.query.AndPredicate ) || ( out instanceof com.google.gerrit.server.index.IndexedChangeQuery ) ) ) ; indexes . setSearchIndex ( null ) ; out = rewrite ( in ) ; org.junit.Assert . assertTrue ( ( out instanceof com.google.gerrit.server.query.RewritePredicate ) ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { testRepo = new org.eclipse.jgit.junit.TestRepository ( ( ( org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ) ( repoManager . openRepository ( project ) ) ) ) ; tip = testRepo . getRevWalk () . parseCommit ( testRepo . getRepository () . exactRef ( STRING_CONSTANT ) . getObjectId () ) ; adminId = admin . getId () ; checker = checkerProvider . get () ; }
public boolean canReadCommit ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return isMergedIntoVisibleRef ( repo , db , rw , commit , repo . getAllRefs () . values () ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String . format ( STRING_CONSTANT , commit . name () , getProject () . getNameKey () ) ; com.google.gerrit.server.project.ProjectControl.log . error ( msg , e ) ; return false ; } }
private org.asciidoctor.OptionsBuilder createOptions ( com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String revision ) { return org.asciidoctor.OptionsBuilder . options () . backend ( com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.BACKEND ) . docType ( com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.DOCTYPE ) . eruby ( com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.ERUBY ) . safe ( SafeMode.SECURE ) . attributes ( getAttributes ( cfg , revision ) ) . mkDirs ( true ) ; }
private void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.RevisionInfo revision , com.google.gerrit.extensions.common.AccountInfo uploader , java.sql.Timestamp when , com.google.gerrit.extensions.api.changes.NotifyHandling notify ) { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event ( change , revision , uploader , when , notify ) ; for ( com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners ) { try { l . onRevisionCreated ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( com.google.gerrit.server.extensions.events.RevisionCreated.log , e ) ; } } }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine . setB0 () ; com.googlecode.prolog_cafe.builtin.Term a1 ; com.googlecode.prolog_cafe.builtin.Predicate code ; a1 = arg1 . dereference () ; if ( ! ( a1 instanceof com.googlecode.prolog_cafe.builtin.ClosureTerm ) ) return engine . fail () ; code = ( ( com.googlecode.prolog_cafe.builtin.ClosureTerm ) ( a1 ) ) . getCode () ; code.cont = this . cont ; return code ; }
@ org.junit.Test public void testDirCacheAltersId ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; final org.eclipse.jgit.dircache.DirCacheBuilder builder = repository . lockDirCache () . builder () ; builder . add ( file ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( builder . commit () ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) , call ( STRING_CONSTANT ) ) ; }
private void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.RevisionInfo revision , com.google.gerrit.extensions.common.AccountInfo restorer , java.lang.String reason , java.sql.Timestamp when ) { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event ( change , revision , restorer , reason , when ) ; for ( com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners ) { try { l . onChangeRestored ( event ) ; } catch ( java.lang.Exception e ) { util . logEventListenerError ( com.google.gerrit.server.extensions.events.ChangeRestored.log , e ) ; } } }
private double align ( double srcTop ) { int line = src . lineAtHeight ( srcTop , STRING_CONSTANT ) ; if ( line == NUMBER_CONSTANT ) { return srcTop ; } com.google.gerrit.client.diff.LineMapper.AlignedPair p = mapper . align ( srcSide , line ) ; double sy = src . heightAtLine ( p.src , STRING_CONSTANT ) ; double dy = dst . heightAtLine ( p.dst , STRING_CONSTANT ) ; return java.lang.Math . max ( NUMBER_CONSTANT , ( dy + ( srcTop - sy ) ) ) ; }
private int insert ( final java.util.List < com.google.gerrit.client.reviewdb.PatchLineComment > in , int row ) { for ( java.util.Iterator < com.google.gerrit.client.reviewdb.PatchLineComment > ci = in . iterator () ; ci . hasNext () ; ) { final com.google.gerrit.client.reviewdb.PatchLineComment c = ci . next () ; insertRow ( row ) ; bindComment ( row , com.google.gerrit.client.patches.UnifiedDiffTable.PC , c , ( ! ( ci . hasNext () ) ) ) ; row ++ ; } return row ; }
private boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( change == null ) { return false ; } com.google.gerrit.server.project.ProjectState pe = projectCache . get ( change . getProject () ) ; if ( pe == null ) { return false ; } com.google.gerrit.server.project.ProjectControl pc = pe . controlFor ( user ) ; return pc . controlFor ( db , change ) . isVisible ( db ) ; }
public void set ( com.google.gerrit.client.projects.ThemeInfo theme ) { if ( theme != null ) { set ( ( ( theme . css () ) != null ? theme . css () : cssText ) , ( ( theme . header () ) != null ? theme . header () : headerHtml ) , ( ( theme . footer () ) != null ? theme . footer () : footerHtml ) ) ; } else { set ( cssText , headerHtml , footerHtml ) ; } }
public static void writeVarInt32 ( final java.io.OutputStream output , int value ) throws java.io.IOException { while ( true ) { if ( ( value & ( ~ NUMBER_CONSTANT ) ) == NUMBER_CONSTANT ) { output . write ( value ) ; return; } output . write ( ( ( value & NUMBER_CONSTANT ) | NUMBER_CONSTANT ) ) ; value > > > = NUMBER_CONSTANT ; } }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , com.google.gerrit.extensions.restapi.CacheControl c ) throws java.io.IOException { res . setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet . configureCaching ( req , res , null , c ) ; com.google.gerrit.httpd.restapi.RestApiServlet . replyText ( null , res , msg ) ; }
@ org.junit.Test public void testMIXED_NoPreferredEmailUser () { setFrom ( STRING_CONSTANT ) ; final java.lang.String name = STRING_CONSTANT ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; org.easymock.EasyMock . replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create () . from ( user ) ; org.junit.Assert . assertNotNull ( r ) ; org.junit.Assert . assertEquals ( ( name + STRING_CONSTANT ) , r.name ) ; org.junit.Assert . assertEquals ( ident . getEmailAddress () , r.email ) ; org.easymock.EasyMock . verify ( accountCache ) ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gerrit.client.Gerrit.myConfig = result.config ; if ( ( result.account ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.account ; com.google.gerrit.client.Gerrit.xsrfToken = result.xsrfToken ; } if ( ( result.accountDiffPref ) != null ) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref ; } onModuleLoad2 () ; }
private static long getFileSize ( org.eclipse.jgit.lib.ObjectReader reader , org.eclipse.jgit.lib.FileMode mode , java.lang.String path , org.eclipse.jgit.revwalk.RevTree t ) throws java.io.IOException { if ( ! ( com.google.gerrit.server.patch.PatchListLoader . isBlob ( mode ) ) ) { return NUMBER_CONSTANT ; } try ( org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk . forPath ( reader , path , t ) ) { return tw != null ? reader . open ( tw . getObjectId ( NUMBER_CONSTANT ) , org.eclipse.jgit.lib.Constants.OBJ_BLOB ) . getSize () : NUMBER_CONSTANT ; } }
void appendDelete ( int numLines ) { int origLineA = lineA ; lineA += numLines ; int aAheadOfB = ( lineA ) - ( lineB ) ; lineMapAtoB . add ( new com.google.gerrit.client.diff.LineMapper.LineGap ( origLineA , ( ( lineA ) - NUMBER_CONSTANT ) , ( - aAheadOfB ) ) ) ; lineMapBtoA . add ( new com.google.gerrit.client.diff.LineMapper.LineGap ( lineB , ( - NUMBER_CONSTANT ) , aAheadOfB ) ) ; }
private void setDefaultBlameCache () { if ( ( blameCache ) == null ) { if ( config . getSubsections ( STRING_CONSTANT ) . contains ( STRING_CONSTANT ) ) { blameCache = new com.google.gitiles.blame.BlameCacheImpl ( com.google.gitiles.ConfigUtil . getCacheBuilder ( config , STRING_CONSTANT ) ) ; } else { blameCache = new com.google.gitiles.blame.BlameCacheImpl () ; } } }
protected void startThread ( com.google.gerrit.sshd.BaseCommand.CommandRunnable thunk ) { final com.google.gerrit.sshd.BaseCommand.TaskThunk tt = new com.google.gerrit.sshd.BaseCommand.TaskThunk ( thunk ) ; if ( isAdminHighPriorityCommand () ) { new java.lang.Thread ( tt , tt . toString () ) . start () ; } else { task . set ( executor . submit ( tt ) ) ; } }
public com.google.gerrit.reviewdb.client.Change reloadChange ( ) throws com.google.gwtorm.server.OrmException { notes = notesFactory . create ( db , project , legacyId ) ; change = notes . getChange () ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_CONSTANT + ( legacyId ) ) ) ; } setPatchSets ( null ) ; return change ; }
@ java.lang.Override protected void configure () { bindScope ( com.google.inject.servlet.SessionScoped . class , SshScopes.SESSION ) ; bindScope ( com.google.inject.servlet.RequestScoped . class , SshScopes.REQUEST ) ; configureSessionScope () ; configureRequestScope () ; bind ( com.google.gerrit.server.ssh.SshInfo . class ) . to ( com.google.gerrit.server.ssh.SshDaemon . class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.ssh.CommandFactoryProvider . class ) ; bind ( org.apache.sshd.server.CommandFactory . class ) . toProvider ( com.google.gerrit.server.ssh.CommandFactoryProvider . class ) ; bind ( org.apache.sshd.server.PublickeyAuthenticator . class ) . to ( com.google.gerrit.server.ssh.DatabasePubKeyAuth . class ) ; install ( new com.google.gerrit.server.ssh.commands.DefaultCommandModule () ) ; }
static java.util.SortedMap < java.lang.String , java.util.List < java.lang.String > > makeSortedMap ( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > map ) { java.util.SortedMap < java.lang.String , java.util.List < java.lang.String > > result = new java.util.TreeMap <> () ; for ( java.lang.String key : com.google.common.collect.Ordering . natural () . sortedCopy ( map . keySet () ) ) { result . put ( key , com.google.common.collect.Ordering . natural () . sortedCopy ( map . get ( key ) ) ) ; } return result ; }
@ org.junit.Test public void setAssigneeAllowedWithPermission ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; grant ( project , STRING_CONSTANT , Permission.EDIT_ASSIGNEE , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; com.google.common.truth.Truth . assertThat ( setAssignee ( r , user.email ) . _accountId ) . isEqualTo ( user . getId () . get () ) ; }
void doReply () { if ( ! ( com.google.gerrit.client.Gerrit . isSignedIn () ) ) { com.google.gerrit.client.Gerrit . doSignIn ( getCommentManager () . getSideBySide () . getToken () ) ; } else if ( ( replyBox ) == null ) { addReplyBox ( false ) ; } else { openReplyBox () ; } }
@ java.lang.Override public void onLoad () { super . onLoad () ; Util.PROJECT_SVC . ownedProjects ( new com.google.gerrit.client.rpc.ScreenLoadCallback < java.util.List < com.google.gerrit.client.reviewdb.Project > > ( this ) { @ java.lang.Override protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.Project > result ) { projects . display ( result ) ; projects . finishDisplay ( true ) ; } } ) ; }
@ org.junit.Test public void byCommit ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( STRING_CONSTANT ) ; com.google.gerrit.server.change.ChangeInserter ins = newChange ( repo ) ; insert ( repo , ins ) ; java.lang.String sha = ins . getPatchSet () . getRevision () . get () ; assertQuery ( STRING_CONSTANT ) ; for ( int i = NUMBER_CONSTANT ; i <= NUMBER_CONSTANT ; i ++ ) { java.lang.String q = sha . substring ( NUMBER_CONSTANT , ( NUMBER_CONSTANT - i ) ) ; assertQuery ( q , ins . getChange () ) ; } }
private void limitThreads () { boolean usePool = cfg . getBoolean ( STRING_CONSTANT , STRING_CONSTANT , dbInjector . getInstance ( com.google.gerrit.server.schema.DataSourceType . class ) . usePool () ) ; int poolLimit = cfg . getInt ( STRING_CONSTANT , STRING_CONSTANT , DataSourceProvider.DEFAULT_POOL_LIMIT ) ; if ( usePool && ( ( threads ) > poolLimit ) ) { com.google.gerrit.pgm.Reindex.log . warn ( ( ( STRING_CONSTANT + poolLimit ) + STRING_CONSTANT ) ) ; threads = poolLimit ; } }
public boolean canEditTopicName () { if ( getChange () . getStatus () . isOpen () ) { return ( ( ( ( isOwner () ) || ( getRefControl () . isOwner () ) ) || ( getProjectControl () . isOwner () ) ) || ( getUser () . getCapabilities () . canAdministrateServer () ) ) || ( getRefControl () . canEditTopicName () ) ; } return getRefControl () . canForceEditTopicName () ; }
private org.eclipse.jgit.dircache.DirCacheEntry file ( final java.lang.String name ) throws java.io.IOException { try ( org.eclipse.jgit.lib.ObjectInserter oi = repository . newObjectInserter () ) { final org.eclipse.jgit.dircache.DirCacheEntry e = new org.eclipse.jgit.dircache.DirCacheEntry ( name ) ; e . setFileMode ( FileMode.REGULAR_FILE ) ; e . setObjectId ( oi . insert ( Constants.OBJ_BLOB , org.eclipse.jgit.lib.Constants . encode ( name ) ) ) ; oi . flush () ; return e ; } }
private void save ( com.google.gerrit.server.git.ProjectConfig pc ) throws java.lang.Exception { try ( com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory . create ( pc . getProject () . getNameKey () , user ) ) { pc . commit ( md ) ; projectCache . evict ( pc . getProject () . getNameKey () ) ; } }
private void offer ( com.google.gerrit.server.events.Event event ) { synchronized ( taskLock ) { if ( ! ( queue . offer ( event ) ) ) { dropped = true ; } if ( ( ( task ) == null ) && ( ! ( done ) ) ) { task = pool . submit ( writer ) ; } } }
private com.google.gerrit.acceptance.server.mail.StagedChange stageChange ( com.google.gerrit.acceptance.server.mail.DeleteVoteSenderIT.Stager stager ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stager . stage () ; setApiUser ( voter ) ; gApi . changes () . id ( sc.changeId ) . revision ( STRING_CONSTANT ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput . recommend () ) ; return sc ; }
public void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.RevisionInfo revision , com.google.gerrit.extensions.common.AccountInfo restorer , java.lang.String reason ) { if ( ! ( listeners . iterator () . hasNext () ) ) { return; } com.google.gerrit.server.extensions.events.ChangeRestored.Event e = new com.google.gerrit.server.extensions.events.ChangeRestored.Event ( change , revision , restorer , reason ) ; for ( com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners ) { l . onChangeRestored ( e ) ; } }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( cd . fastIsVisibleTo ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.client.Change c = cd . change () ; if ( c == null ) { return false ; } com.google.gerrit.server.project.ChangeControl cc = changeControl . controlFor ( c , user ) ; if ( cc . isVisible ( db . get () ) ) { cd . cacheVisibleTo ( cc ) ; return true ; } } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) {} return false ; }
@ java.lang.Override protected void configure () { install ( new com.google.gerrit.server.index.IndexModule ( threads ) ) ; bind ( com.google.gerrit.server.index.ChangeIndex . class ) . to ( com.google.gerrit.solr.SolrChangeIndex . class ) ; listener () . to ( com.google.gerrit.solr.SolrChangeIndex . class ) ; if ( checkVersion ) { listener () . to ( com.google.gerrit.solr.IndexVersionCheck . class ) ; } }
public java.util.List < com.google.gerrit.reviewdb.client.Patch > toPatchList ( final com.google.gerrit.reviewdb.client.PatchSet.Id setId ) { final java.util.ArrayList < com.google.gerrit.reviewdb.client.Patch > r = new java.util.ArrayList ( patches.length ) ; for ( final com.google.gerrit.server.patch.PatchListEntry e : patches ) { r . add ( e . toPatch ( setId ) ) ; } return r ; }
private org.apache.lucene.search.Query exactQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) { if ( p instanceof com.google.gerrit.server.index.RegexPredicate < > ) { return regexQuery ( p ) ; } else { return new org.apache.lucene.search.TermQuery ( new org.apache.lucene.index.Term ( p . getField () . getName () , p . getValue () ) ) ; } }
@ org.junit.Test public void newPatchSetByOtherOnReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit . assume () . that ( notesMigration . readChanges () ) . isTrue () ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , STRING_CONSTANT , other ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . to ( sc.reviewer , other ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
public boolean unify ( com.googlecode.prolog_cafe.lang.Term t , com.googlecode.prolog_cafe.lang.Trail trail ) { if ( t instanceof com.googlecode.prolog_cafe.lang.VariableTerm ) return ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( t ) ) . unify ( this , trail ) ; if ( ! ( t instanceof com.googlecode.prolog_cafe.lang.JavaObjectTerm ) ) return false ; return obj . equals ( ( ( com.googlecode.prolog_cafe.lang.JavaObjectTerm ) ( t ) ) . obj ) ; }
public void setCommit ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id , java.lang.String pushCert ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; rw . parseBody ( commit ) ; this . commit = commit . name () ; subject = commit . getShortMessage () ; this . pushCert = pushCert ; }
boolean inCharacter ( com.googlecode.prolog_cafe.builtin.Term t ) { if ( ! ( t instanceof com.googlecode.prolog_cafe.builtin.SymbolTerm ) ) return false ; if ( t . equals ( com.googlecode.prolog_cafe.builtin.PRED_get_char_2.SYM_EOF ) ) return true ; return ( ( ( com.googlecode.prolog_cafe.builtin.SymbolTerm ) ( t ) ) . name () . length () ) == NUMBER_CONSTANT ; }
@ org.junit.Test public void listBranchesHeadHidden ( ) throws java.lang.Exception { blockRead ( STRING_CONSTANT ) ; pushTo ( STRING_CONSTANT ) ; java.lang.String dev = pushTo ( STRING_CONSTANT ) . getCommit () . name () ; setApiUser ( user ) ; com.google.gerrit.acceptance.rest.project.BranchAssert . assertBranches ( com.google.common.collect.ImmutableList . of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT . branch ( STRING_CONSTANT , dev , false ) ) , list () . get () ) ; }
@ java.lang.Override public com.google.gerrit.server.account.AccountState load ( com.google.gerrit.reviewdb.client.Account.Id key ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . open () ) { final com.google.gerrit.server.account.AccountState state = load ( db , key ) ; java.lang.String user = state . getUserName () ; if ( user != null ) { byName . put ( user , com.google.common.base.Optional . of ( state . getAccount () . getId () ) ) ; } return state ; } }
@ java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo get ( java.util.EnumSet < com.google.gerrit.extensions.client.ListChangesOption > s ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.CurrentUser u = user . get () ; if ( u . isIdentifiedUser () ) { ( ( com.google.gerrit.server.IdentifiedUser ) ( u ) ) . clearStarredChanges () ; } return changeJson . create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private com.google.gerrit.sshd.SshSession newSession () { final java.net.SocketAddress peer ; if ( ( peerAddress ) == null ) { peer = session . getRemoteAddress () ; } else { peer = peerAddress ; } if ( ( caller ) instanceof com.google.gerrit.server.PeerDaemonUser ) { caller = null ; } return new com.google.gerrit.sshd.SshSession ( session , peer , userFactory . runAs ( peer , accountId , caller ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > bySubmissionId ( java.lang.String cs ) throws com.google.gwtorm.server.OrmException { if ( ( com.google.common.base.Strings . isNullOrEmpty ( cs ) ) || ( ! ( com.google.gerrit.server.query.change.InternalChangeQuery . schema ( indexes ) . hasField ( com.google.gerrit.server.index.change.ChangeField.SUBMISSIONID ) ) ) ) { return java.util.Collections . emptyList () ; } return query ( new com.google.gerrit.server.query.change.SubmissionIdPredicate ( cs ) ) ; }
private org.apache.lucene.search.Query sortKeyQuery ( com.google.gerrit.server.query.change.SortKeyPredicate p ) { long min = p . getMinValue ( schema ) ; long max = p . getMaxValue ( schema ) ; return org.apache.lucene.search.NumericRangeQuery . newLongRange ( p . getField () . getName () , ( min != ( java.lang.Long.MIN_VALUE ) ? min : null ) , ( max != ( java.lang.Long.MAX_VALUE ) ? max : null ) , false , false ) ; }
private void appliedBy ( com.google.gerrit.common.data.SubmitRecord.Label label , com.googlecode.prolog_cafe.lang.Term status ) { if ( ( status . isStructure () ) && ( ( status . arity () ) == NUMBER_CONSTANT ) ) { com.googlecode.prolog_cafe.lang.Term who = status . arg ( NUMBER_CONSTANT ) ; if ( com.google.gerrit.server.project.ChangeControl . isUser ( who ) ) { label.appliedBy = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( com.googlecode.prolog_cafe.lang.IntegerTerm ) ( who . arg ( NUMBER_CONSTANT ) ) ) . intValue () ) ; } } }
com.googlesource.gerrit.plugins.findowners.OwnersDb get ( com.google.gerrit.server.account.AccountCache accountCache , com.google.gerrit.server.account.Emails emails , org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.query.change.ChangeData changeData , int patchset ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData . change () . getProject () ; java.lang.String branch = changeData . change () . getDest () . get () ; java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache . makeKey ( changeData . getId () . get () , patchset , branch ) ; return get ( accountCache , emails , dbKey , repository , changeData , project , branch , changeData . currentFilePaths () ) ; }
public boolean isValid () { return ( ( ( ( ( ( startLine ) > NUMBER_CONSTANT ) && ( ( startCharacter ) >= NUMBER_CONSTANT ) ) && ( ( endLine ) > NUMBER_CONSTANT ) ) && ( ( endCharacter ) >= NUMBER_CONSTANT ) ) && ( ( startLine ) <= ( endLine ) ) ) && ( ( ( startLine ) != ( endLine ) ) || ( ( startCharacter ) <= ( endCharacter ) ) ) ; }
public com.google.gerrit.server.git.WorkQueue.Task < > getTask ( final int id ) { com.google.gerrit.server.git.WorkQueue.Task < > result = null ; for ( final com.google.gerrit.server.git.WorkQueue.Executor e : queues ) { final com.google.gerrit.server.git.WorkQueue.Task < > t = e . getTask ( id ) ; if ( t != null ) { if ( result != null ) { return null ; } result = t ; } } return result ; }
@ org.junit.Test public void testAppend_Object () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; org.junit.Assert . assertSame ( b , b . append ( ( ( java.lang.Object ) ( null ) ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; org.junit.Assert . assertSame ( b , b . append ( new java.lang.Object () { @ java.lang.Override public java.lang.String toString () { return STRING_CONSTANT ; } } ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , b . asString () ) ; }
private static java.util.TreeMap < java.lang.Integer , com.google.gerrit.reviewdb.client.PatchSet > getPatchSets ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets () ; java.util.TreeMap < java.lang.Integer , com.google.gerrit.reviewdb.client.PatchSet > result = com.google.common.collect.Maps . newTreeMap () ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId () . get () , ps ) ; } return result ; }
@ java.lang.Override protected void onUnload () { super . onUnload () ; if ( ( resizeHandler ) != null ) { resizeHandler . removeHandler () ; resizeHandler = null ; } if ( ( cmA ) != null ) { cmA . getWrapperElement () . removeFromParent () ; cmA = null ; } if ( ( cmB ) != null ) { cmB . getWrapperElement () . removeFromParent () ; cmB = null ; } com.google.gwt.user.client.Window . enableScrolling ( true ) ; }
@ java.lang.Override public boolean updateChange ( com.google.gerrit.server.update.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx . getChange () ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx . getUpdate ( change . currentPatchSetId () ) ; change . setPrivate ( isPrivate ) ; change . setLastUpdatedOn ( ctx . getWhen () ) ; update . setPrivate ( isPrivate ) ; addMessage ( ctx , update ) ; return true ; }
@ java.lang.Override public org.eclipse.jgit.transport.ReceivePack create ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.lib.Repository db ) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { final com.google.gerrit.server.project.ProjectControl pc = ( ( com.google.gerrit.server.project.ProjectControl ) ( req . getAttribute ( com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL ) ) ) ; if ( ! ( pc . getUser () . isIdentifiedUser () ) ) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException () ; } com.google.gerrit.server.git.receive.AsyncReceiveCommits arc = factory . create ( pc , db , null , com.google.common.collect.ImmutableSetMultimap . of () ) ; org.eclipse.jgit.transport.ReceivePack rp = arc . getReceivePack () ; req . setAttribute ( com.google.gerrit.httpd.GitOverHttpServlet.ATT_ARC , arc ) ; return rp ; }
@ java.lang.Override public com.google.gerrit.extensions.api.accounts.GpgKeyApi gpgKey ( com.google.gerrit.server.account.AccountResource account , com.google.gerrit.extensions.restapi.IdString idStr ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.GpgException { try { return gpgKeyApiFactory . create ( gpgKeys . get () . parse ( account , idStr ) ) ; } catch ( org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.server.GpgException ( e ) ; } }
void loadChangeInfo ( boolean fg , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo > cb ) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi . detail ( changeId . get () ) ; com.google.gerrit.client.changes.ChangeList . addOptions ( call , java.util.EnumSet . of ( ListChangesOption.CURRENT_ACTIONS , ListChangesOption.ALL_REVISIONS ) ) ; if ( ! fg ) { call . background () ; } call . get ( cb ) ; }
public static int findApproval ( com.googlecode.prolog_cafe.lang.Prolog engine , int minVoteLevel ) { try { com.google.gerrit.server.account.AccountCache accountCache = StoredValues.ACCOUNT_CACHE . get ( engine ) ; com.google.gerrit.server.account.Emails emails = StoredValues.EMAILS . get ( engine ) ; com.google.gerrit.server.query.change.ChangeData changeData = StoredValues.CHANGE_DATA . get ( engine ) ; org.eclipse.jgit.lib.Repository repository = StoredValues.REPOSITORY . get ( engine ) ; return new com.googlesource.gerrit.plugins.findowners.Checker ( repository , changeData , minVoteLevel ) . findApproval ( accountCache , emails ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { com.googlesource.gerrit.plugins.findowners.Checker.log . error ( STRING_CONSTANT , e ) ; return NUMBER_CONSTANT ; } }
private java.lang.String getTaskName () { java.lang.StringBuilder m = new java.lang.StringBuilder () ; m . append ( getTaskDescription () ) ; if ( user . isIdentifiedUser () ) { com.google.gerrit.server.IdentifiedUser u = user . asIdentifiedUser () ; if ( u . getUserName () . isPresent () ) { m . append ( STRING_CONSTANT ) . append ( u . getUserName () . get () ) . append ( STRING_CONSTANT ) ; } } return m . toString () ; }
public com.google.gerrit.extensions.common.EditInfo toEditInfo ( com.google.gerrit.server.edit.ChangeEdit edit , boolean downloadCommands ) { com.google.gerrit.extensions.common.EditInfo out = new com.google.gerrit.extensions.common.EditInfo () ; out.commit = com.google.gerrit.server.edit.ChangeEditJson . fillCommit ( edit . getEditCommit () ) ; out.baseRevision = edit . getBasePatchSet () . getRevision () . get () ; if ( downloadCommands ) { out.fetch = fillFetchMap ( edit ) ; } return out ; }
@ org.kohsuke.args4j.Option ( name = STRING_CONSTANT , aliases = { STRING_CONSTANT } , metaVar = STRING_CONSTANT , usage = STRING_CONSTANT ) void addLabel ( java.lang.String token ) throws org.kohsuke.args4j.CmdLineException { com.google.gerrit.server.util.LabelVote v = com.google.gerrit.server.util.LabelVote . parse ( token ) ; try { com.google.gerrit.common.data.LabelType . checkName ( v . label () ) ; com.google.gerrit.server.ApprovalsUtil . checkLabel ( labelTypes , v . label () , v . value () ) ; } catch ( java.lang.IllegalArgumentException e ) { throw clp . reject ( e . getMessage () ) ; } labels . put ( v . label () , v . value () ) ; }
@ org.junit.Test public void addReviewer ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange () ; com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput () ; in.reviewer = user.email ; com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi . changes () . id ( r . getChangeId () ) ; cApi . addReviewer ( in ) ; org.junit.Assert . assertEquals ( com.google.common.collect.ImmutableSet . of ( user.id ) , com.google.gerrit.acceptance.api.change.ChangeIT . getReviewers ( cApi . get () ) ) ; }
@ java.lang.Override public void run () { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory . create ( change . getId () ) ; cm . setFrom ( change . getOwner () ) ; cm . setPatchSet ( patchSet , patchSetInfo ) ; cm . addReviewers ( reviewers ) ; cm . addExtraCC ( extraCC ) ; cm . send () ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.change.ChangeInserter.log . error ( ( STRING_CONSTANT + ( change . getId () ) ) , e ) ; } }
@ java.lang.Override public boolean equals ( final java.lang.Object other ) { if ( other == null ) return false ; if ( ( getClass () ) == ( other . getClass () ) ) { final com.google.gerrit.server.query.IntPredicate < > p = ( ( com.google.gerrit.server.query.IntPredicate < > ) ( other ) ) ; return ( com.google.gerrit.server.query.IntPredicate . getOperator () . equals ( p . getOperator () ) ) && ( ( intValue () ) == ( p . intValue () ) ) ; } return false ; }
private void assertReviewers ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.acceptance.TestAccount . . . expectedReviewers ) throws com.google.gwtorm.server.OrmException { java.lang.Iterable < com.google.gerrit.reviewdb.client.Account.Id > actualIds = approvalsUtil . getReviewers ( db , notesFactory . create ( db , c ) ) . values () ; com.google.common.truth.Truth . assertThat ( actualIds ) . containsExactlyElementsIn ( com.google.common.collect.Sets . newHashSet ( com.google.gerrit.acceptance.TestAccount . ids ( expectedReviewers ) ) ) ; }
private org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Set < java.io.File > files = new java.util.HashSet <> () ; for ( java.lang.String filenames : com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidatorTest . getInvalidFilenames () ) { files . add ( new java.io.File ( repo . getDirectory () . getParent () , filenames ) ) ; } files . add ( new java.io.File ( repo . getDirectory () . getParent () , STRING_CONSTANT ) ) ; return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . makeCommit ( rw , repo , STRING_CONSTANT , files ) ; }
@ org.junit.Test public void abandonReviewableChangeByOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner ) ; assertThat ( sender ) . sent ( STRING_CONSTANT , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . to ( sc.reviewerByEmail ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
@ org.junit.Test public void uploadPackSubsetOfBranchesVisibleNotIncludingHead ( ) throws java.lang.Exception { deny ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; allow ( STRING_CONSTANT , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; assertUploadPackRefs ( ( ( r2 ) + STRING_CONSTANT ) , ( ( r2 ) + STRING_CONSTANT ) , ( ( r4 ) + STRING_CONSTANT ) , ( ( r4 ) + STRING_CONSTANT ) , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
private void replace ( com.google.gerrit.server.git.ProjectConfig config , java.util.Set < java.lang.String > toDelete , com.google.gerrit.common.data.AccessSection section ) throws com.google.gerrit.common.errors.NoSuchGroupException { for ( com.google.gerrit.common.data.Permission permission : section . getPermissions () ) { for ( com.google.gerrit.common.data.PermissionRule rule : permission . getRules () ) { lookupGroup ( rule ) ; } } config . replace ( section ) ; toDelete . remove ( section . getName () ) ; }
@ java.lang.Override protected void configure () { factory ( AddBranch.Factory . class ) ; factory ( ChangeProjectAccess.Factory . class ) ; factory ( ReviewProjectAccess.Factory . class ) ; factory ( ChangeProjectSettings.Factory . class ) ; factory ( DeleteBranches.Factory . class ) ; factory ( ListBranches.Factory . class ) ; factory ( VisibleProjectDetails.Factory . class ) ; factory ( ProjectAccessFactory.Factory . class ) ; factory ( ProjectDetailFactory.Factory . class ) ; }
@ org.junit.Test public void testBlocked ( ) throws java.lang.Exception { java.lang.String [] patterns = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ; try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = validator . performValidation ( repo , makeCommit ( rw ) , rw , patterns , false ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils . transformMessages ( m ) ) . containsExactly ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : object . approvals () . values () ) { final com.google.gerrit.server.IdentifiedUser reviewer = userFactory . create ( dbProvider , p . getAccountId () ) ; if ( reviewer . getEffectiveGroups () . contains ( uuid ) ) { return true ; } } return false ; }
@ org.junit.Test public void repositoryIndex ( ) throws java.lang.Exception { assertGone ( com.google.gitiles.GitwebRedirectFilterTest . newRequest ( STRING_CONSTANT ) ) ; assertRedirectsTo ( com.google.gitiles.GitilesView . repositoryIndex () . setHostName ( com.google.gitiles.TestGitilesUrls.HOST_NAME ) . setServletPath ( com.google.gitiles.FakeHttpServletRequest.SERVLET_PATH ) . setRepositoryName ( STRING_CONSTANT ) . toUrl () , com.google.gitiles.GitwebRedirectFilterTest . newRequest ( STRING_CONSTANT ) ) ; }
private void updateSubscriptions () { if ( ( ( mergeTip ) != null ) && ( ( ( branchTip ) == null ) || ( ( branchTip ) != ( mergeTip ) ) ) ) { com.google.gerrit.server.git.SubmoduleOp subOp = subOpFactory . create ( destBranch , mergeTip , rw , repo , destProject , submitted , commits ) ; try { subOp . update () ; } catch ( com.google.gerrit.server.git.SubmoduleException e ) { com.google.gerrit.server.git.MergeOp.log . error ( ( STRING_CONSTANT + ( e . getMessage () ) ) ) ; } } }
public static < T > void itemOf ( com.google.inject.Binder binder , com.google.inject.TypeLiteral < T > member ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.inject.Key < com.google.gerrit.extensions.registration.DynamicItem < T > > key = ( ( com.google.inject.Key < com.google.gerrit.extensions.registration.DynamicItem < T > > ) ( com.google.inject.Key . get ( com.google.inject.util.Types . newParameterizedType ( com.google.gerrit.extensions.registration.DynamicItem . class , member . getType () ) ) ) ) ; binder . bind ( key ) . toProvider ( new com.google.gerrit.extensions.registration.DynamicItemProvider ( member , key ) ) . in ( Scopes.SINGLETON ) ; }
public static void assertGroups ( java.lang.Iterable < java.lang.String > expected , java.util.Set < java.lang.String > actual ) { for ( java.lang.String g : expected ) { com.google.common.truth.Truth . assert_ () . withFailureMessage ( ( STRING_CONSTANT + g ) ) . that ( actual . remove ( g ) ) . isTrue () ; } com.google.common.truth.Truth . assert_ () . withFailureMessage ( ( STRING_CONSTANT + actual ) ) . that ( actual ) . isEmpty () ; }
private void updateSchema ( java.util.List < com.google.gerrit.server.schema.SchemaVersion > pending , com.google.gerrit.server.schema.UpdateUI ui , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { for ( com.google.gerrit.server.schema.SchemaVersion v : pending ) { ui . message ( java.lang.String . format ( STRING_CONSTANT , v . getVersionNbr () ) ) ; v . preUpdateSchema ( db ) ; } com.google.gwtorm.jdbc.JdbcSchema s = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) ; try ( com.google.gwtorm.jdbc.JdbcExecutor e = new com.google.gwtorm.jdbc.JdbcExecutor ( s ) ) { s . updateSchema ( e ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > files ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return ( ( java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > ) ( listFiles . get () . apply ( revision ) . value () ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.Set < java.lang.String > reviewed ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return com.google.common.collect.ImmutableSet . copyOf ( ( ( java.lang.Iterable < java.lang.String > ) ( listFiles . get () . setReviewed ( true ) . apply ( revision ) . value () ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo get ( java.util.EnumSet < com.google.gerrit.extensions.client.ListChangesOption > s ) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ( user . isIdentifiedUser () ) { user . asIdentifiedUser () . clearStarredChanges () ; } return changeJson . create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ org.junit.Test public void testNoEscaping () { java.lang.String find = STRING_CONSTANT ; java.lang.String link = STRING_CONSTANT ; com.google.gwtexpui.safehtml.client.LinkFindReplace a = new com.google.gwtexpui.safehtml.client.LinkFindReplace ( find , link ) ; org.junit.Assert . assertEquals ( find , a . pattern () . getSource () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , a . replace ( find ) ) ; org.junit.Assert . assertEquals ( ( ( ( STRING_CONSTANT + find ) + STRING_CONSTANT ) + link ) , a . toString () ) ; }
private com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes () . get ( patchSetId . getParentKey () ) ; com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory . create ( c ) . load () ; return approvalsUtil . getSubmitter ( db , notes , patchSetId ) ; }
public boolean isReviewer ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( getUser () . isIdentifiedUser () ) { java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > results = changeData ( db , cd ) . reviewers () . values () ; return results . contains ( getUser () . getAccountId () ) ; } return false ; }
private void parseAll ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { walk . markStart ( walk . parseCommit ( tip ) ) ; for ( org.eclipse.jgit.revwalk.RevCommit commit : walk ) { parse ( commit ) ; } pruneReviewers () ; for ( java.util.Collection < com.google.gerrit.reviewdb.client.PatchSetApproval > v : approvals . asMap () . values () ) { java.util.Collections . sort ( ( ( java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > ) ( v ) ) , com.google.gerrit.server.notedb.ChangeNotes.PSA_BY_TIME ) ; } }
private boolean isVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange () . isPrivate () ) && ( ! ( isPrivateVisible ( db , cd ) ) ) ) { return false ; } return refControl . isVisible () ; }
@ java.lang.Override public boolean equals ( final java.lang.Object obj ) { if ( ! ( obj instanceof com.google.gerrit.common.data.Permission ) ) { return false ; } final com.google.gerrit.common.data.Permission other = ( ( com.google.gerrit.common.data.Permission ) ( obj ) ) ; if ( ( ! ( name . equals ( other.name ) ) ) || ( ( exclusiveGroup ) != ( other.exclusiveGroup ) ) ) { return false ; } return new java.util.HashSet ( getRules () ) . equals ( new java.util.HashSet ( other . getRules () ) ) ; }
public java.lang.String format () { if ( ( value ) == ( ( short ) ( NUMBER_CONSTANT ) ) ) { return CHAR_CONS + ( name ) ; } else if ( ( value ) < NUMBER_CONSTANT ) { return ( name ) + ( value ) ; } else { return ( ( name ) + CHAR_CONS ) + ( value ) ; } }
public static void getMeta ( @ com.google.gerrit.common.Nullable java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.editor.EditFileInfo > cb ) { if ( ( id . get () ) != NUMBER_CONSTANT ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } com.google.gerrit.client.changes.ChangeEditApi . editFile ( project , id . getParentKey () . get () , path ) . view ( STRING_CONSTANT ) . get ( cb ) ; }
@ java.lang.Override public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = object . change () ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id current = c . currentPatchSetId () ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : object . approvals () . values () ) { if ( ( p . getPatchSetId () . equals ( current ) ) && ( ( p . getValue () ) != NUMBER_CONSTANT ) ) { return true ; } } return false ; }
@ org.junit.Test public void testCreateGroup ( ) throws java.lang.Exception { java.lang.String newGroupName = name ( STRING_CONSTANT ) ; com.google.gerrit.acceptance.RestResponse r = adminSession . put ( ( STRING_CONSTANT + newGroupName ) ) ; com.google.gerrit.server.group.GroupJson.GroupInfo g = newGson () . fromJson ( r . getReader () , com.google.gerrit.server.group.GroupJson.GroupInfo . class ) ; com.google.common.truth.Truth . assertThat ( g.name ) . isEqualTo ( newGroupName ) ; com.google.gerrit.reviewdb.client.AccountGroup group = groupCache . get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( newGroupName ) ) ; com.google.common.truth.Truth . assertThat ( group ) . isNotNull () ; com.google.gerrit.acceptance.rest.group.GroupAssert . assertGroupInfo ( group , g ) ; }
@ org.junit.Test public void testSortWithRegex () { com.google.gerrit.server.project.Util . grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , STRING_CONSTANT ) ; com.google.gerrit.server.project.Util . grant ( util . getParentConfig () , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.ANONYMOUS , STRING_CONSTANT ) ; com.google.gerrit.server.project.ProjectControl u = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = util . user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , u . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , d . controlForRef ( STRING_CONSTANT ) . isVisible () ) ; }
private < T extends java.lang.Enum < > > void setListBox ( final com.google.gwt.user.client.ui.ListBox f , final T defaultValue , final T currentValue ) { setListBox ( f , ( defaultValue != null ? defaultValue . name () : STRING_CONSTANT ) , ( currentValue != null ? currentValue . name () : STRING_CONSTANT ) ) ; }
private < T extends com.google.gwt.core.client.JavaScriptObject > void send ( com.google.gwt.http.client.RequestBuilder.Method method , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { com.google.gerrit.client.rpc.RestApi.HttpCallback < T > httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback ( background , cb ) ; try { if ( ! ( background ) ) { RpcStatus.INSTANCE . onRpcStart () ; } request ( method ) . sendRequest ( null , httpCallback ) ; } catch ( com.google.gwt.http.client.RequestException e ) { httpCallback . onError ( null , e ) ; } }
private org.apache.lucene.document.Document toDocument ( com.google.gerrit.server.query.change.ChangeData cd ) { org.apache.lucene.document.Document result = new org.apache.lucene.document.Document () ; for ( com.google.gerrit.server.index.Schema.Values < com.google.gerrit.server.query.change.ChangeData > vs : schema . buildFields ( cd , fillArgs ) ) { if ( ( vs . getValues () ) != null ) { add ( result , vs ) ; } } return result ; }
private void insertDummyApproval ( final com.google.gerrit.sshd.commands.Receive.ReplaceResult result , final com.google.gerrit.reviewdb.Account.Id forAccount , final com.google.gerrit.reviewdb.ApprovalCategory.Id catId , final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { insertDummyApproval ( result.change , result.patchSet . getId () , forAccount , catId , db ) ; }
@ org.junit.Test public void testUrlEncoding () { com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.replication.Destination . encode ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.replication.Destination . encode ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.replication.Destination . encode ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( com.googlesource.gerrit.plugins.replication.Destination . encode ( STRING_CONSTANT ) ) . isEqualTo ( STRING_CONSTANT ) ; }
@ org.junit.Test public void createChangeOnInvisibleBranchFails ( ) throws java.lang.Exception { changeInTwoBranches ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; block ( project , STRING_CONSTANT , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; com.google.gerrit.extensions.common.ChangeInput in = newChangeInput ( ChangeStatus.NEW ) ; in.branch = STRING_CONSTANT ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.AuthException . class , STRING_CONSTANT ) ; }
@ java.lang.Override public void run () { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory . create ( change ) ; cm . setFrom ( me ) ; cm . setPatchSet ( ps , info ) ; cm . addReviewers ( reviewers ) ; cm . addExtraCC ( cc ) ; cm . send () ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.git.ReceiveCommits.log . error ( ( STRING_CONSTANT + ( change . getId () ) ) , e ) ; } }
@ org.junit.Test public void duplicateEventOfAQueuedEventShouldGetDiscarded () { org.easymock.EasyMock . reset ( poolMock ) ; poolMock . execute ( indexEventHandler . new com.ericsson.gerrit.plugins.syncindex.IndexEventHandler.SyncIndexTask ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID , false ) ) ; org.easymock.EasyMock . expectLastCall () . once () ; replayAll () ; indexEventHandler . onChangeIndexed ( id . get () ) ; indexEventHandler . onChangeIndexed ( id . get () ) ; verifyAll () ; }
java.lang.Runnable navigate ( com.google.gerrit.client.diff.Direction dir ) { switch ( dir ) { case PREV : return ( ) - > { ( hasPrev ? prev : up ) . go () ; } ; case NEXT : return ( ) - > { ( hasNext ? next : up ) . go () ; } ; default: return ( ) - > {} ; } }
private java.lang.String extractWhat ( com.google.gerrit.sshd.DispatchCommand dcmd ) { java.lang.String commandName = dcmd . getCommandName () ; java.lang.String [] args = dcmd . getArguments () ; if ( ( args.length ) > NUMBER_CONSTANT ) { return ( commandName + STRING_CONSTANT ) + ( args [ NUMBER_CONSTANT ] ) ; } return commandName ; }
private com.google.gerrit.server.account.AccountState makeUser ( java.lang.String name , java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id ( NUMBER_CONSTANT ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( userId , com.google.gerrit.common.TimeUtil . nowTs () ) ; account . setFullName ( name ) ; account . setPreferredEmail ( email ) ; return new com.google.gerrit.server.account.AccountState ( new com.google.gerrit.server.config.AllUsersName ( com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT ) , account , java.util.Collections . emptySet () , new java.util.HashMap <> () ) ; }
private void UpdateTotalDiskSize () { java.lang.Integer available = ( ( getStorageDynamicData () ) == null ) ? null : getStorageDynamicData () . getAvailableDiskSize () ; java.lang.Integer used = ( ( getStorageDynamicData () ) == null ) ? null : getStorageDynamicData () . getUsedDiskSize () ; if ( ( available != null ) && ( used != null ) ) { setTotalDiskSize ( ( available + used ) ) ; } else { setTotalDiskSize ( null ) ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.EngineBackupLogId ) ) { return false ; } org.ovirt.engine.core.common.businessentities.EngineBackupLogId other = ( ( org.ovirt.engine.core.common.businessentities.EngineBackupLogId ) ( obj ) ) ; return ( java.util.Objects . equals ( scope , other.scope ) ) && ( java.util.Objects . equals ( doneAt , other.doneAt ) ) ; }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
private void updateOps ( byte [] message ) { if ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG . isDebugEnabled () ) { try { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG . debug ( ( STRING_CONSTANT + ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message . parse ( message ) ) ) ) ; } catch ( org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ignored ) {} } final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = this ; scheduleTask ( ( ) - > { client . updateInterestedOps () ; return null ; } ) ; }
private void retryCall ( final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request , final org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking tracking = new org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking ( request , call , new org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryContext ( policy ) , org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils . getTimeout ( this . policy . getRetryTimeOut () , this . policy . getTimeUnit () ) , this . client ) ; this . tracker . registerTrackingRequest ( request , tracking ) ; }
private void saveLocalStorage () { if ( ( getWindow () . getProgress () ) != null ) { return; } getWindow () . startProgress () ; org.ovirt.engine.ui.uicompat.Task . create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays . asList ( new java.lang.Object [] { STRING_CONSTANT } ) ) ) . run () ; }
@ java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery ( org.ovirt.engine.core.common.queries.VdcQueryType search , org.ovirt.engine.core.common.queries.VdcQueryParametersBase searchParameters ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log . debug ( STRING_CONSTANT ) ; debugQuery ( search , searchParameters ) ; searchParameters . setSessionId ( getEngineSessionId () ) ; return getBackend () . runQuery ( search , searchParameters ) ; }
public void setHtml ( com.google.gwt.safehtml.shared.SafeHtml html ) { if ( html == null ) { return; } if ( ( ( tooltip ) == null ) || ( ! ( tooltip . asString () . equals ( html . asString () ) ) ) ) { tooltip = html ; scheduleTooltipUpdate () ; } }
protected boolean setAndValidateDiskProfiles () { java.util.Map < org.ovirt.engine.core.common.businessentities.storage.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap <> () ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getParameters () . getParametersList () ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageByImageId ( parameters . getImageId () ) ; map . put ( diskImage , diskImage . getStorageIds () . get ( NUMBER_CONSTANT ) ) ; } return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper . setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getCurrentUser () ) ) ; }
@ org.junit.Test public void testBootProtocolSetForRoleNetworkWhenIpConfigurationIsNull () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork () ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpv4Configuration ( Ipv4BootProtocol.NONE ) ; attachment . setNetworkId ( network . getId () ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( true , true , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils . createSetVariableString ( NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , network . getName () ) ) , network , attachment ) ; }
protected void onSaveMAC ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nicToSave ) { nicToSave . setMacAddress ( ( getMAC () . getIsChangable () ? ( getMAC () . getEntity () ) == null ? null : getMAC () . getEntity () . toLowerCase () : getDefaultMacAddress () ) ) ; }
@ org.junit.Before public void setUp () { clusterId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.mockito.Mockito . doReturn ( cluster ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . when ( glusterUtils . getUpServer ( clusterId ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification ( org.ovirt.engine.core.common.businessentities.network.Bond bond ) { org.ovirt.engine.core.compat.Guid nicId = bond . getId () ; java.lang.String nicName = bond . getName () ; org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY ; return validateCoherentIdentification ( bond . getName () , nicId , nicName , message , existingInterfacesMap ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.VDS value ) { if ( ( ( super . getEntity () ) != null ) && ( value != null ) ) { org.ovirt.engine.core.common.businessentities.VDS currentItem = super . getEntity () ; org.ovirt.engine.core.compat.Guid currentItemId = currentItem . getId () ; org.ovirt.engine.core.compat.Guid newItemId = value . getId () ; if ( currentItemId . equals ( newItemId ) ) { setEntity ( value , false ) ; updateActionAvailability () ; return; } } super . setEntity ( value ) ; }
private void alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String operation ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; alert . setVdsId ( org.ovirt.engine.core.bll.VdsCommand . getVds () . getId () ) ; java.lang.String op = ( operation == null ) ? org.ovirt.engine.core.bll.VdsCommand . getActionType () . name () : operation ; alert . addCustomValue ( STRING_CONSTANT , op ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector . alert ( alert , logType , auditLogDirector ) ; }
private java.io.File createTempPng ( ) throws java.io.IOException { java.io.File file = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; file . deleteOnExit () ; java.awt.image.BufferedImage img = new java.awt.image.BufferedImage ( NUMBER_CONSTANT , NUMBER_CONSTANT , java.awt.image.BufferedImage.TYPE_INT_RGB ) ; if ( ! ( javax.imageio.ImageIO . write ( img , STRING_CONSTANT , file ) ) ) { org.junit.Assert . fail ( STRING_CONSTANT ) ; } return file ; }
@ java.lang.Override protected void buildModel ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.BuilderExecutionFinished < org.ovirt.engine.core.common.businessentities.VmBase , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel > callback ) { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor ( callback , new org.ovirt.engine.ui.uicommonweb.builders.vm.NameAndDescriptionVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommentVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyVmBaseToUnitBuilder () . withEveryFeatureSupported () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CoreVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.KernelParamsVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.SerialNumberPolicyVmBaseToUnitBuilder () ) . withEveryFeatureSupported () ) ) . build ( vmBase , getModel () ) ; }
@ java.lang.Override protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks () { if ( ( ( getDisk () ) == null ) || ( ( getDisk () . getVmEntityType () ) == null ) ) { return null ; } switch ( getDisk () . getVmEntityType () ) { case VM : return createSharedLocksForVmDisk () ; case TEMPLATE : return createSharedLocksForTemplateDisk () ; default: log . warnFormat ( STRING_CONSTANT , getDisk () . getVmEntityType () ) ; return null ; } }
private org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters ( disk ) ; parameters . setStorageDomainId ( getStorageDomainId () ) ; parameters . setParentCommand ( org.ovirt.engine.core.bll.HibernateVmCommand . getActionType () ) ; parameters . setParentParameters ( org.ovirt.engine.core.bll.HibernateVmCommand . getParameters () ) ; parameters . setShouldBeLogged ( false ) ; return parameters ; }
@ java.lang.Override public void validateEnums ( org.ovirt.engine.api.model.OperatingSystem os ) { if ( os != null ) { if ( os . isSetType () ) { org.ovirt.engine.api.common.util.EnumValidator . validateEnum ( org.ovirt.engine.api.model.OsType . class , org.ovirt.engine.api.model.OsTypeUtils . getAllValues () , os . getType () , true ) ; } if ( os . isSetBoot () ) { bootValidator . validateEnums ( os . getBoot () ) ; } } }
public void getProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
@ org.junit.Before public void setup () { setUpVds () ; org.mockito.Mockito . doReturn ( proxyLocator ) . when ( executor ) . getProxyLocator () ; org.mockito.Mockito . doReturn ( realAgent ) . when ( executor ) . createRealAgent ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Test public void testGetByClusterId () { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > snapshots = dao . getAllByClusterId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.CLUSTER_ID ) ; org.junit.Assert . assertNotNull ( snapshots ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , snapshots . size () ) ; org.junit.Assert . assertTrue ( snapshots . contains ( existingSnapshot ) ) ; }
public java.lang.String getTemplate ( java.lang.String realUrlParamName , java.lang.String urlParamName , java.lang.String urlParamType ) { org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper templateWrapper = new org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper ( getTemplate () ) ; templateWrapper . set ( STRING_CONSTANT , realUrlParamName ) ; templateWrapper . set ( STRING_CONSTANT , urlParamName ) ; templateWrapper . set ( STRING_CONSTANT , urlParamType ) ; return templateWrapper . toString () ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllTags , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . setUpTags () , failure ) ; if ( failure == null ) { setUpEntityQueryExpectations ( VdcQueryType.GetRootTag , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . setUpRootTag () ) ; } control . replay () ; }
@ org.junit.Test public void testDiscoverGeoRepData () { org.mockito.Mockito . doReturn ( getSessionsVDSReturnVal ( NUMBER_CONSTANT ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.ArgumentMatchers . any () ) ; syncJob . discoverGeoRepData () ; org.mockito.Mockito . verify ( geoRepDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . save ( org.mockito.ArgumentMatchers . any () ) ; }
private void postDoUpdateManagedFieldsFrom ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( isNextRunConfigurationExists () ) { deactivate () ; getModel () . getIsSoundcardEnabled () . setEntity ( isVmDeviceExists ( vmBase . getManagedDeviceMap () , VmDeviceType.SOUND . getName () ) ) ; getModel () . getIsConsoleDeviceEnabled () . setEntity ( isVmDeviceExists ( vmBase . getManagedDeviceMap () , VmDeviceType.CONSOLE . getName () ) ) ; activate () ; } updateWatchdog ( vmBase , true ) ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = java.lang.String . class , to = org.ovirt.engine.core.common.businessentities.VdsStatic . class ) public static org.ovirt.engine.core.common.businessentities.VdsStatic map ( java.lang.String protocol , org.ovirt.engine.core.common.businessentities.VdsStatic template ) { org.ovirt.engine.core.common.businessentities.VdsStatic entity = ( template != null ) ? template : new org.ovirt.engine.core.common.businessentities.VdsStatic () ; org.ovirt.engine.api.model.HostProtocol hostProtocol = org.ovirt.engine.api.model.HostProtocol . fromValue ( protocol ) ; org.ovirt.engine.core.common.businessentities.VdsProtocol result = null ; switch ( hostProtocol ) { case STOMP : result = org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP ; break; case XML : default: result = org.ovirt.engine.core.common.businessentities.VdsProtocol.XML ; break; } entity . setProtocol ( result ) ; return entity ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils . createDiskDummies ( getVm () . getTotalMemorySizeInBytes () , MemoryUtils.META_DATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler . getInstance () . findStorageDomainForMemory ( getParameters () . getStoragePoolId () , memoryDisksList , getVmDisksDummies () , getVm () ) ; disksList . addAll ( memoryDisksList ) ; return storageDomain ; }
@ org.junit.Before public void setUp () { mockVm () ; org.ovirt.engine.core.bll.validator.VmValidator vmValidator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.VmValidator ( cmd . getVm () ) ) ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmNotHavingDeviceSnapshotsAttachedToOtherVms ( org.mockito.ArgumentMatchers . anyBoolean () ) ; org.mockito.Mockito . doReturn ( vmValidator ) . when ( cmd ) . createVmValidator ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommandTest.STORAGE_POOL_ID ) . when ( cmd ) . getStoragePoolId () ; mockSnapshot ( SnapshotType.REGULAR ) ; spySdValidator () ; }
@ java.lang.Override protected boolean allowedStorageDomain ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > sourceActiveStorageDomains , org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel templateDisk , org.ovirt.engine.core.common.businessentities.StorageDomain sd ) { if ( sourceActiveStorageDomains . contains ( sd ) ) { return false ; } return super . allowedStorageDomain ( sourceActiveStorageDomains , diskImage , templateDisk , sd ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createMemoryDevice () { java.util.Map < java.lang.String , java.lang.Object > specParams = new java.util.HashMap <> () ; specParams . put ( org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.DEVICE_SIZE_FIELD_KEY , memoryToConsume ) ; specParams . put ( org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.DEVICE_NODE_FIELD_KEY , org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand . getParameters () . getNumaNode () ) ; return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand . getVmId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY , VmDeviceType.MEMORY . getName () , STRING_CONSTANT , specParams , true , true , false , STRING_CONSTANT , null , null , null ) ; }
private boolean isOptionEnabledOnVolume ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , java.util.List < org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > > predicates ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > filteredOptions = new java.util.ArrayList ( volume . getOptions () ) ; for ( org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > predicate : predicates ) { filteredOptions = org.ovirt.engine.core.common.utils.ListUtils . filter ( filteredOptions , predicate ) ; } return ! ( filteredOptions . isEmpty () ) ; }
private org.ovirt.engine.core.bll.QueriesCommandBase < > mockQuery () { org.ovirt.engine.core.bll.QueriesCommandBase < > query = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.QueriesCommandBase . class , org.mockito.Mockito . withSettings () . useConstructor ( params , null ) . defaultAnswer ( Answers.CALLS_REAL_METHODS ) ) ; org.mockito.Mockito . doReturn ( mockSessionDataContainer ) . when ( query ) . getSessionDataContainer () ; query . postConstruct () ; return query ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAllStorageDomains , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , getStorageDomains () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetCinderVolumeTypesByStorageDomainId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getCinderVolumeTypes () , failure ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( createTestCommand ( volumeId2 ) ) ; prepareMocks ( cmd ) ; mockBackend ( false , EngineError.GlusterVolumeRemoveBricksStartFailed ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS_FAILED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.StorageDomain isoDomain ) { if ( isoDomain != null ) { org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters getIsoParams = new org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters ( vm . getStoragePoolId () , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.ISO ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetImagesListByStoragePoolId , getIsoParams , imagesListQuery ) ; } else { invokeClient ( null ) ; } }
@ java.lang.Override protected void executeVmCommand () { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand () ; if ( retValue . getSucceeded () ) { getVdsManager () . addV2VJobInfoForVm ( org.ovirt.engine.core.bll.ConvertVmCommand . getVmId () , JobStatus.WAIT_FOR_START ) ; org.ovirt.engine.core.bll.ConvertVmCommand . setSucceeded ( true ) ; } else { org.ovirt.engine.core.bll.ConvertVmCommand.log . error ( STRING_CONSTANT ) ; setCommandStatus ( CommandStatus.FAILED ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.ovirt.engine.core.bll.ConvertVmCommand.log . error ( STRING_CONSTANT , e ) ; setCommandStatus ( CommandStatus.FAILED ) ; } }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ) ; try { resource . update ( getNic ( false ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void setUpGetEntityExpectationsAllContent ( int times , boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( times , notFound ) ; java.util.List < java.lang.String > populateValue = new java.util.ArrayList <> () ; populateValue . add ( STRING_CONSTANT ) ; org.easymock.EasyMock . expect ( httpHeaders . getRequestHeader ( AbstractBackendResource.POPULATE ) ) . andReturn ( populateValue ) . anyTimes () ; setupParentPopulateExpectations () ; }
private int getResourceType ( org.ovirt.engine.core.compat.backendcompat.XmlNode node , java.lang.String resource ) { if ( ( ( node . SelectSingleNode ( resource , _xmlNS ) ) != null ) && ( ! ( org.apache.commons.lang.StringUtils . isEmpty ( node . SelectSingleNode ( resource , _xmlNS ) . InnerText ) ) ) ) { return java.lang.Integer . valueOf ( node . SelectSingleNode ( resource , _xmlNS ) . InnerText ) ; } return - NUMBER_CONSTANT ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.OpenStackSubnet subnet ) { org.ovirt.engine.core.common.action.AddExternalSubnetParameters parameters = new org.ovirt.engine.core.common.action.AddExternalSubnetParameters () ; parameters . setSubnet ( map ( subnet ) ) ; parameters . setProviderId ( asGuid ( providerId ) ) ; parameters . setNetworkId ( networkId ) ; return performCreate ( VdcActionType.AddSubnetToProvider , parameters , new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackSubnetsResource.SubnetNameResolver ( subnet . getName () ) ) ; }
@ org.junit.Test public void addPosixNonEmptyVFSType () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
@ org.junit.Test public void testPatternBasedNameFails () { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.VmManagementParametersBase > cmd = createCommand ( initializeMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; cmd . getParameters () . getVm () . setName ( STRING_CONSTANT ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , cmd . validateInputs () ) ; }
@ java.lang.Override public org.ovirt.optimizer.rest.dto.ScoreResult recomputeScore ( org.ovirt.optimizer.solver.problemspace.OptimalDistributionStepsSolution situation , org.ovirt.optimizer.rest.dto.Result result ) { org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore score = org.ovirt.optimizer.solver.util.SolverUtils . computeScore ( situation , result , java.util.Collections . < java.lang.String > emptySet () , configProvider . customRuleFiles () ) ; org.ovirt.optimizer.rest.dto.ScoreResult scoreResult = new org.ovirt.optimizer.rest.dto.ScoreResult () ; scoreResult . setHardScore ( score . getHardScore () ) ; scoreResult . setSoftScore ( score . getSoftScore () ) ; return scoreResult ; }
private void populateValueForConfigValue ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version , java.util.Map < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > , java.lang.Object > configValuesMap ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat ( configValue , version ) ; java.lang.Object value = org.ovirt.engine.core.common.config.Config . < java.lang.Object > getValue ( org.ovirt.engine.core.common.config.ConfigValues . valueOf ( configValue . toString () ) , version ) ; configValuesMap . put ( key , value ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUpGetCertuficateExpectations () ; control . replay () ; org.ovirt.engine.api.model.VM response = resource . get () ; verifyModel ( response , NUMBER_CONSTANT ) ; verifyCertificate ( response ) ; }
private static void addUsbSlots ( org.ovirt.engine.core.common.businessentities.VmBase vm , int numOfSlots ) { for ( int index = NUMBER_CONSTANT ; index <= numOfSlots ; index ++ ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vm . getId () ) , VmDeviceGeneralType.REDIR , VmDeviceType.SPICEVMC , org.ovirt.engine.core.bll.utils.VmDeviceUtils . getUsbSlotSpecParams () , true , false , null , false ) ; } }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.DiskImage entity = new org.ovirt.engine.core.common.businessentities.DiskImage () ; entity . setId ( GUIDS [ index ] ) ; entity . setvolume_format ( VolumeFormat.RAW ) ; entity . setDiskInterface ( DiskInterface.VirtIO ) ; entity . setimageStatus ( ImageStatus.OK ) ; entity . setvolume_type ( VolumeType.Sparse ) ; entity . setBoot ( false ) ; entity . setShareable ( false ) ; entity . setPropagateErrors ( PropagateErrors.On ) ; return org.ovirt.engine.api.restapi.resource.BackendDisksResourceTest . setUpStatisticalEntityExpectations ( entity ) ; }
private void updateCanSpecify () { boolean isChangable = ( bootProtocolsAvailable ) && ( getIsStaticAddress () ) ; getAddress () . setChangeProhibitionReason ( ( isChangable && ( ! ( staticIpChangeAllowed ) ) ? org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . staticIpAddressSameAsHostname () : null ) ) ; getAddress () . setIsChangable ( ( isChangable && ( staticIpChangeAllowed ) ) ) ; getSubnet () . setIsChangable ( isChangable ) ; getGateway () . setIsChangable ( isChangable ) ; }
public void updateStorageDomain ( org.ovirt.vdsmfake.domain.StorageDomain storageDomain ) { org.ovirt.vdsmfake.domain.VdsmManager.log . info ( STRING_CONSTANT , storageDomain . getId () ) ; if ( ! ( storageDomainMap . containsKey ( storageDomain . getId () ) ) ) { storageDomainMap . put ( storageDomain . getId () , storageDomain ) ; } storeObject ( storageDomain ) ; }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmDisk , org.ovirt.engine.core.common.action.UpdateVmDiskParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID , java.lang.Boolean.FALSE } , true , true ) ) ; org.ovirt.engine.api.model.Disk disk = resource . update ( getUpdate () ) ; assertNotNull ( disk ) ; }
@ org.junit.Test public void testRemove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations () ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations ( NUMBER_CONSTANT ) ; setUpActionExpectations ( VdcActionType.RemoveVm , org.ovirt.engine.core.common.action.RemoveVmParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.FALSE } , true , true ) ; verifyRemove ( collection . remove ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ) ; }
public static void getLocalStorageHost ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String dataCenterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) { return item ; } } return null ; } } ; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + dataCenterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , sp , aQuery ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusterList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredClusterList = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterClustersWithoutArchitecture ( clusterList ) ; model . setDataCentersAndClusters ( model , dataCenters , filteredClusterList , null ) ; initCdImage () ; }
public boolean validate () { boolean uploadImageIsValid ; if ( getImageSourceLocalEnabled () . getEntity () ) { getImagePath () . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () } ) ; uploadImageIsValid = getImagePath () . getIsValid () ; } else { uploadImageIsValid = false ; } return uploadImageIsValid && ( diskModel . validate () ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.PermissionSubject > getPermissionCheckSubjects () { return java.util.Collections . singletonList ( new org.ovirt.engine.core.common.PermissionSubject ( ( ( getStoragePoolId () ) == null ? null : getStoragePoolId () . getValue () ) , org.ovirt.engine.core.common.VdcObjectType.StoragePool , getActionType () . getActionGroup () ) ) ; }
@ java.lang.Override public void setAcceptableValues ( java.util.Collection < java.util.Date > values ) { if ( values instanceof java.util.List < > ) { java.util.List < java.util.Date > allowedDates = ( ( java.util.List < java.util.Date > ) ( values ) ) ; java.util.Collections . sort ( allowedDates ) ; setDateRange ( allowedDates . get ( NUMBER_CONSTANT ) , allowedDates . get ( ( ( allowedDates . size () ) - NUMBER_CONSTANT ) ) ) ; } }
public void getHostArchitecture ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < org.ovirt.engine.core.common.businessentities.ArchitectureType > () { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( org.ovirt.engine.core.common.businessentities.ArchitectureType ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetHostArchitecture , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
@ org.junit.Test public void testDoGetServeFaviconNotFound ( ) throws java.io.IOException , java.net.URISyntaxException , javax.servlet.ServletException { org.mockito.Mockito . when ( mockBrandingManager . getBrandingRootPath () ) . thenReturn ( new java.io.File ( this . getClass () . getClassLoader () . getResource ( STRING_CONSTANT ) . toURI () . getPath () ) ) ; testServlet . doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockResponse ) . sendError ( HttpServletResponse.SC_NOT_FOUND ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.job.StepSubjectEntity > getCommandStepSubjectEntities () { if ( ( ( org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand . getParameters () . getJobWeight () ) != null ) && ( ( org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand . getParameters () . getDstInfo () ) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo ) ) { return java.util.Collections . singletonList ( new org.ovirt.engine.core.common.job.StepSubjectEntity ( org.ovirt.engine.core.common.VdcObjectType.Disk , ( ( org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo ) ( org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand . getParameters () . getDstInfo () ) ) . getImageGroupId () , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand . getParameters () . getJobWeight () ) ) ; } return super . getCommandStepSubjectEntities () ; }
protected org.ovirt.engine.core.common.action.ImportVmTemplateParameters createParameters () { org.ovirt.engine.core.common.businessentities.VmTemplate t = new org.ovirt.engine.core.common.businessentities.VmTemplate () ; t . setName ( STRING_CONSTANT ) ; return new org.ovirt.engine.core.common.action.ImportVmTemplateParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.compat.Guid . newGuid () , t ) ; }
private void hostName_SelectedItemChanged () { org.ovirt.engine.core.common.businessentities.VDS host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getExternalHostName () . getSelectedItem () ) ) ; if ( host == null ) { host = new org.ovirt.engine.core.common.businessentities.VDS () ; } updateModelFromVds ( host , null , false , null ) ; }
public org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getNetworkAttachmentForNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { if ( networkId == null ) { return null ; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment updatedAttachment = new org.ovirt.engine.core.common.utils.MapNetworkAttachments ( hostSetupNetworksParametersData.newOrModifiedNetworkAttachments ) . byNetworkId () . get ( networkId ) ; if ( updatedAttachment != null ) { return updatedAttachment ; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment = getExistingAttachmentByNetworkId ( networkId ) ; if ( ( existingAttachment != null ) && ( ! ( shouldBeRemoved ( existingAttachment . getId () ) ) ) ) { return existingAttachment ; } throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + networkId ) ) ; }
@ org.junit.Test public void calculateNetworkImplementationDetailsNetworkVmNetworkOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice () ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , ( ! ( iface . isBridged () ) ) , iface . getMtu () , iface . getVlanId () , createQos () ) ; }
@ java.lang.Override @ org.junit.Before public void setUpBefore ( ) throws java.lang.Exception { super . setUpBefore () ; baseIface = createBaseInterface ( null , null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanIface = createVlanInterface ( baseIface , networkName , qosA ) ; setTestIface ( vlanIface ) ; org.mockito.Mockito . when ( calculateBaseNic . getBaseNic ( vlanIface ) ) . thenReturn ( baseIface ) ; }
@ org.junit.Test public void testUpdateWhenAbortedTasks () { org.mockito.Mockito . doReturn ( getTasks ( JobExecutionStatus.ABORTED ) ) . when ( provider ) . getTaskListForCluster ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.CLUSTER_GUIDS [ NUMBER_CONSTANT ] ) ; prepareMocks () ; tasksSyncJob . updateGlusterAsyncTasks () ; org.mockito.Mockito . verify ( taskUtils , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateSteps ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . anyList () ) ; }
public void setZeroValue () { percentageBarB . setVisible ( false ) ; percentageBarB . setWidth ( STRING_CONSTANT ) ; percentageBarA . setVisible ( true ) ; tooltip . setHtml ( tooltipText ) ; percentageBarA . setStyleName ( style . empty () ) ; percentageBarA . setWidth ( ( ( org.ovirt.engine.ui.userportal.widget.DoublePercentageProgressBar.FULL_WIDTH ) + STRING_CONSTANT ) ) ; percentageLabelA . setText ( org.ovirt.engine.ui.userportal.widget.DoublePercentageProgressBar.ZERO ) ; percentageLabelA . setStyleName ( style . percentageLabelBlack () ) ; }
private boolean isVmNumaPinned ( java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > nodes ) { if ( ( nodes == null ) || ( nodes . isEmpty () ) ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes ) { if ( ! ( vmNumaNode . getVdsNumaNodeList () . isEmpty () ) ) { return true ; } } return false ; }
private void updateVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { clearVms () ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > externalVms = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { externalVms . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( vm ) ) ; } externalVmModels . setItems ( externalVms ) ; stopProgress () ; }
@ java.lang.Override public boolean canConnect () { return ( ( ( getEntity () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( getEntity () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown ) ) ) && ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . isWindowsOsType ( getEntity () . getVmOsId () ) ) ; }
private void decreasePendingVms ( org.ovirt.engine.core.compat.Guid vdsId , int numOfCpus , int minAllocatedMem , java.lang.String vmName ) { getVdsDynamicDao () . updatePartialVdsDynamicCalc ( vdsId , NUMBER_CONSTANT , ( - numOfCpus ) , ( - minAllocatedMem ) , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; getBlockingQueue ( vdsId ) . offer ( java.lang.Boolean.TRUE ) ; org.ovirt.engine.core.bll.RunVmCommandBase.log . debugFormat ( STRING_CONSTANT , vdsId , numOfCpus , minAllocatedMem , vmName ) ; }
private void updateActionAvailability () { java.util.Collection < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > selectedItems = ( ( getSelectedItems () ) != null ) ? getSelectedItems () : new java.util.ArrayList () ; getSetupNetworksCommand () . setIsExecutionAllowed ( ( ( selectedItems . size () ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected void endWithFailure () { if ( ( getMoveOrCopyImageOperation () ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Copy ) ) { if ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getAddImageDomainMapping () ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getImageStorageDomainMapDao () . remove ( new org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getStorageDomainId () ) ) ; } revertTasks () ; } else { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . unLockImage () ; } org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . setSucceeded ( true ) ; }
@ java.lang.Override public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData selectedObject = ( ( com.google.gwt.view.client.SingleSelectionModel < org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData > ) ( event . getSource () ) ) . getSelectedObject () ; customSelectionCellFormatType . setEnabledWithToolTip ( selectedObject . getCollapseSnapshots () . getEntity () , constants . importAllocationModifiedCollapse () ) ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( ( ( STRING_CONSTANT . equals ( fieldName ) ) || ( STRING_CONSTANT . equals ( fieldName ) ) ) || ( STRING_CONSTANT . equals ( fieldName ) ) ) { return NumericConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
protected boolean validateNoDuplicateVm () { org.ovirt.engine.core.common.businessentities.VmStatic duplicateVm = org.ovirt.engine.core.bll.ImportVmCommandBase . getVmStaticDao () . get ( getVm () . getId () ) ; return duplicateVm == null ? true : failCanDoAction ( EngineMessage.VM_CANNOT_IMPORT_VM_EXISTS , java.lang.String . format ( STRING_CONSTANT , duplicateVm . getName () ) ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrash ( ) throws java.lang.Exception { java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpNetworkAttachmentsQueryExpectations ( t ) ; javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . setUpUriExpectations ( null ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
@ org.junit.Test public void storagePoolIdWithStorageDomain () { b . setStoragePoolId ( null ) ; b . setStoragePool ( null ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain s = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; s . setStoragePoolId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setStorageDomain ( s ) ; final org.ovirt.engine.core.compat.Guid n = b . getStoragePoolId () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , n ) ; }
@ java.lang.Override public void initTable () { initTableColumns () ; initTableOverhead () ; handleRadioButtonClick ( null ) ; org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable . getModel () . getItemsChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { disksViewRadioGroup . setDiskStorageType ( getModel () . getDiskViewType () . getEntity () ) ; } } ) ; }
@ java.lang.Override protected boolean validate () { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper . validate ( VdcActionType.AddDisk , getAddDiskParameters () , org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand . getContext () . clone () ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand . getReturnValue () . setValidationMessages ( returnValue . getValidationMessages () ) ; return returnValue . isValid () ; }
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > setUpExportTemplates () { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > ret = new java.util.LinkedHashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > () ; for ( int i = NUMBER_CONSTANT ; i < ( NAMES.length ) ; i ++ ) { ret . put ( getEntity ( i ) , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ) ; } return ret ; }
@ java.lang.Override public org.ovirt.engine.core.compat.NGuid getStorageDomainId () { return ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getParameters () ) != null ? ! ( Guid.Empty . equals ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getParameters () . getStorageDomainId () ) ) ? org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getParameters () . getStorageDomainId () : super . getStorageDomainId () : super . getStorageDomainId () ; }
@ org.junit.experimental.theories.Theory public void externalVMWhenMissingInDb ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { initMocks ( data , false ) ; org.junit.Assume . assumeTrue ( ( ( data . dbVm () ) == null ) ) ; org.junit.Assume . assumeTrue ( ( ( data . vdsmVm () ) != null ) ) ; vmAnalyzer . analyze () ; org.junit.Assert . assertTrue ( vmAnalyzer . isUnmanagedVm () ) ; }
private void initImportClonedTemplateDisks () { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : getImages () ) { if ( getParameters () . isImportAsNewEntity () ) { generateNewDiskId ( image ) ; updateManagedDeviceMap ( image , getVmTemplate () . getManagedDeviceMap () ) ; } else { newDiskIdForDisk . put ( image . getId () , image ) ; } } }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain addNewStorageDomainToDisk ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain storage = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storage . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; storage . setStorageType ( storageType ) ; diskImage . setStorageIds ( new java.util.ArrayList ( java.util.Arrays . asList ( storage . getId () ) ) ) ; return storage ; }
public void run () { try { org.ovirt.engine.core.notifier.NotificationService.log . debug ( STRING_CONSTANT ) ; processEvents () ; if ( shouldDeleteHistory ) { deleteObseleteHistoryData () ; } org.ovirt.engine.core.notifier.NotificationService.log . debug ( STRING_CONSTANT ) ; } catch ( java.lang.Throwable e ) { if ( ! ( java.lang.Thread . interrupted () ) ) { org.ovirt.engine.core.notifier.NotificationService.log . error ( java.lang.String . format ( STRING_CONSTANT , e . getMessage () ) , e ) ; } } }
public org.ovirt.engine.core.common.businessentities.VmDevice addDiskDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , java.lang.Boolean isPlugged , java.lang.Boolean isReadOnly , java.lang.String address , boolean isUsingScsiReservation ) { return addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( deviceId , vmId ) , VmDeviceGeneralType.DISK , VmDeviceType.DISK , org.ovirt.engine.core.bll.utils.VmDeviceUtils.EMPTY_SPEC_PARAMS , isPlugged , isReadOnly , address , null , isUsingScsiReservation ) ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( siblingVlanInterfaces . size () ) > NUMBER_CONSTANT ) { return true ; } return false ; }
@ org.junit.Test public void testRemoveById () { dao . remove ( new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID , FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap > entries = dao . getAllByStorageDomainId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) ; for ( org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entry : entries ) { org.junit.Assert . assertNotEquals ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 , entry . getStorageDomainId () ) ; } org.junit.Assert . assertNotNull ( entries ) ; org.junit.Assert . assertTrue ( entries . isEmpty () ) ; }
@ org.junit.Test public void testNonExistingSnapshotQuery ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.GetVmConfigurationBySnapshotQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = setupQueryBySnapshotId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = query . getQueryReturnValue () ; org.ovirt.engine.core.common.businessentities.VM returnedVm = returnValue . getReturnValue () ; org.junit.Assert . assertNull ( STRING_CONSTANT , returnedVm ) ; }
@ org.junit.Test public void validateFailsForDifferentStorageDevice () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice ( STRING_CONSTANT ) ; storageDevice2 . setDevType ( STRING_CONSTANT ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays . asList ( storageDevice1 , storageDevice2 ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void testBootProtocolSetForRoleNetworkWhenBootProtocolIsDhcp () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork () ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpv4Configuration ( Ipv4BootProtocol.DHCP ) ; attachment . setNetworkId ( network . getId () ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( true , false , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () , network , attachment ) ; }
private void doTestBadUpdate ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateTag , org.ovirt.engine.core.common.action.TagsOperationParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , canDo , success ) ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . getModel ( NUMBER_CONSTANT , false ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ( o == null ) || ( ( getClass () ) != ( o . getClass () ) ) ) { return false ; } org.ovirt.engine.core.bll.scheduling.pending.PendingCpuCores that = ( ( org.ovirt.engine.core.bll.scheduling.pending.PendingCpuCores ) ( o ) ) ; return getVm () . equals ( that . getVm () ) ; }
private static void updateDisksStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksList ) { disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( storageDomain . getId () ) ) ) ; } org.ovirt.engine.core.bll.VmHandler . updateDiskVolumeType ( storageDomain . getStorageType () , disksList . get ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.DbUser object ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; for ( java.lang.String name : object . getGroupNames () ) { if ( ( builder . length () ) > NUMBER_CONSTANT ) { builder . append ( STRING_CONSTANT ) ; } builder . append ( name ) ; } return builder . toString () ; }
private boolean isValueValid ( org.ovirt.engine.core.compat.Version version , java.lang.String key , java.lang.String value ) { java.lang.String userDefinedPattern = userdefinedProperties . get ( version ) . get ( key ) ; java.lang.String predefinedPattern = predefinedProperties . get ( version ) . get ( key ) ; return ( ( userDefinedPattern != null ) && ( value . matches ( userDefinedPattern ) ) ) || ( ( predefinedPattern != null ) && ( value . matches ( predefinedPattern ) ) ) ; }
private void newEntity () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel . createInstance ( getEntity () . getStaticData () , getEntity () . getStatus () , getEntity () . getStoragePoolId () , getEntity () . getVdsGroupCompatibilityVersion () , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems () ) ) , this ) ; setWindow ( model ) ; }
public void getSearchResultsLimit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue () : NUMBER_CONSTANT ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SearchResultsLimit , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ java.lang.Override protected void verifyModel ( org.ovirt.engine.api.model.File model , int index ) { assertEquals ( NAMES [ index ] , model . getId () ) ; assertEquals ( NAMES [ index ] , model . getName () ) ; assertNotNull ( model . getStorageDomain () ) ; assertEquals ( GUIDS [ NUMBER_CONSTANT ] . toString () , model . getStorageDomain () . getId () ) ; verifyLinks ( model ) ; }
@ org.junit.Test public void canRunVmDuringInit () { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; org.mockito.Mockito . doReturn ( true ) . when ( runVmValidator ) . isVmDuringInitiating ( org.mockito.ArgumentMatchers . any () ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . vmDuringInitialization ( vm ) , false , EngineMessage.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUpGetGraphicsExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
private void initSpyCommand () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand < org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters > ( new org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters ( new java.util.ArrayList < org.ovirt.engine.core.common.action.LiveMigrateDiskParameters > () , vmId ) , null ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isValidSpaceRequirements () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . checkImagesStatus () ; }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setAllContentHeaderExpectation () ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ NUMBER_CONSTANT ] } , true , true ) ) ; org.ovirt.engine.api.model.NIC nic = resource . update ( getNic ( false ) ) ; assertNotNull ( nic ) ; }
private void mockHostDevices ( java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > extraDevices ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > devices = new java.util.ArrayList <> () ; devices . add ( pciDevice ) ; devices . add ( netDevice ) ; devices . addAll ( extraDevices ) ; org.mockito.Mockito . when ( hostDeviceDao . getHostDevicesByHostId ( org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID ) ) . thenReturn ( devices ) ; }
private void retrieveMaxSpmPriority () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmMaxPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; retrieveDefaultSpmPriority () ; } } ) ) ; }
private static void shuffle ( java.lang.reflect.Method method , java.lang.Object model ) throws java.lang.Exception { java.lang.Class < ? extends java.lang.Enum > enumType = ( ( java.lang.Class < ? extends java.lang.Enum > ) ( method . getParameterTypes () [ NUMBER_CONSTANT ] ) ) ; method . invoke ( model , org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( enumType ) ) ; }
@ org.junit.Test public void testRpmRelease () { org.junit.Assert . assertEquals ( STRING_CONSTANT , new org.ovirt.engine.core.compat.RpmVersion ( STRING_CONSTANT ) . getRpmRelease () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , new org.ovirt.engine.core.compat.RpmVersion ( STRING_CONSTANT ) . getRpmRelease () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , new org.ovirt.engine.core.compat.RpmVersion ( STRING_CONSTANT ) . getRpmRelease () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , new org.ovirt.engine.core.compat.RpmVersion ( STRING_CONSTANT , STRING_CONSTANT , true ) . getRpmRelease () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , new org.ovirt.engine.core.compat.RpmVersion ( STRING_CONSTANT , STRING_CONSTANT , false ) . getRpmRelease () ) ; }
private java.util.List < java.lang.String > getAllHostNames ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > allHosts ) { java.util.List < java.lang.String > allHostNames = new java.util.ArrayList ( allHosts . size () ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : allHosts ) { allHostNames . add ( vds . getName () ) ; } return allHostNames ; }
@ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) org.ovirt.engine.ui.common.widget.editor.ListModelListBox < T > . ListItem item = ( ( org.ovirt.engine.ui.common.widget.editor.ListModelListBox < T > . ListItem ) ( event . getSource () ) ) ; this . setValue ( item . getValue () , true , true ) ; if ( this . isMultiSelect ) { event . stopPropagation () ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > convert ( java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; if ( ( quotaList != null ) && ( ! ( quotaList . isEmpty () ) ) ) { java.util.Comparator < org.ovirt.engine.core.common.businessentities.Quota > comparator = ( ( topId ) == null ) ? org.ovirt.engine.ui.uicommonweb.comparators.QuotaComparator.NAME : org.ovirt.engine.ui.uicommonweb.comparators.QuotaComparator . withTopId ( topId , QuotaComparator.NAME ) ; java.util.Collections . sort ( quotaList , comparator ) ; } return quotaList ; }
@ java.lang.Override public org.ovirt.engine.api.model.GraphicsConsole get () { for ( org.ovirt.engine.api.model.GraphicsConsole graphicsConsole : parent . list () . getGraphicsConsoles () ) { if ( consoleId . equals ( graphicsConsole . getId () ) ) { return graphicsConsole ; } } throw new javax.ws.rs.WebApplicationException ( javax.ws.rs.core.Response . status ( Response.Status.NOT_FOUND ) . build () ) ; }
protected boolean isVmNotInPreviewSnapshot () { return ( ( ( org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand . getVmId () ) != null ) && ( validate ( snapshotsValidator . vmNotDuringSnapshot ( org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand . getVmId () ) ) ) ) && ( validate ( snapshotsValidator . vmNotInPreview ( org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand . getVmId () ) ) ) ; }
@ org.junit.Test public void diskInterfaceSupportedByOs () { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest . createVM () ; initializeOsRepository ( DiskInterface.VirtIO ) ; org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement () ; dve . setDiskInterface ( DiskInterface.VirtIO ) ; org.junit.Assert . assertThat ( validator . isDiskInterfaceSupported ( vm , dve ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh () , aQuery ) ; }
private static void failureEventHandler ( java.lang.Throwable caught ) { java.lang.String errorMessage ; if ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) { errorMessage = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants () . requestToServerFailedWithCode () ) + STRING_CONSTANT ) + ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode () ) ; } else { errorMessage = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants () . requestToServerFailed () ) + STRING_CONSTANT ) + ( caught . getLocalizedMessage () ) ; } org.ovirt.engine.ui.frontend.Frontend . failureEventHandler ( errorMessage ) ; }
private void updateSuggestedDiskAlias () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNextAvailableDiskAliasNameByVMId ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String suggestedDiskAlias = ( ( java.lang.String ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( model ) ) ; diskModel . getAlias () . setEntity ( suggestedDiskAlias ) ; } } ) , getVm () . getId () ) ; }
@ org.junit.Test public void testUpdateUnregisteredDisksWithVMsWithEmptyUnregDisks ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( getXmlOvfData () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk > unregDisks = new java.util.ArrayList <> () ; org.ovirt.engine.core.utils.OvfUtils . updateUnregisteredDisksWithVMs ( unregDisks , org.ovirt.engine.core.compat.Guid . newGuid () , STRING_CONSTANT , xmlDocument ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , unregDisks . isEmpty () ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result . getReturnValue () ; if ( ( returnValue != null ) && ( returnValue . getSucceeded () ) ) { networkCreatingManager . updateVnics ( ( ( idToUpdate ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . getActionReturnValue () ) ) : idToUpdate ) , unitVmModel . getNicsWithLogicalNetworks () . getItems () ) ; } else { networkCreatingManager . getCallback () . queryFailed () ; } }
public void edit () { final org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = ( ( org.ovirt.engine.core.common.businessentities.network.NetworkQoS ) ( getSelectedItem () ) ) ; if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkQoSModel networkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkQoSModel ( networkQoS , this , getEntity () ) ; setWindow ( networkQoSModel ) ; networkQoSModel . getDataCenters () . setItems ( java.util.Arrays . asList ( getEntity () ) ) ; networkQoSModel . getDataCenters () . setSelectedItem ( getEntity () ) ; }
private org.ovirt.api.metamodel.tool.JavaTypeReference getListReference ( org.ovirt.api.metamodel.concepts.ListType type ) { org.ovirt.api.metamodel.concepts.Type elementType = type . getElementType () ; org.ovirt.api.metamodel.tool.JavaTypeReference reference = getTypeReference ( elementType , true ) ; reference . addImport ( java.util.List . class ) ; reference . setText ( ( ( STRING_CONSTANT + ( reference . getText () ) ) + STRING_CONSTANT ) ) ; return reference ; }
@ java.lang.Override public boolean isColumnVisible ( com.google.gwt.user.cellview.client.Column < T , > column ) { if ( ! ( isColumnPresent ( column ) ) ) { return false ; } boolean visible = true ; if ( columnVisibleMap . containsKey ( column ) ) { visible = columnVisibleMap . get ( column ) ; } if ( visible && ( columnVisibleMapOverride . containsKey ( column ) ) ) { visible = columnVisibleMapOverride . get ( column ) ; } return visible ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallBack ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParentParameters ( parentCommand ) ; org.ovirt.engine.core.bll.tasks.TaskManagerUtil . persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity . buildCommandEntity ( getCommandId () , parentParameters . getCommandId () , getActionType () , getParameters () , commandStatus , enableCallBack , getReturnValue () ) ) ; }
public static void UnLockVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( vm . getstatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.SetVmStatus , new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters ( vm . getId () , org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ; } else { org.ovirt.engine.core.bll.VmHandler.log . errorFormat ( STRING_CONSTANT , vm . getvm_name () , vm . getstatus () ) ; } }
@ java.lang.Override public int compare ( org.ovirt.engine.api.model.Network n1 , org.ovirt.engine.api.model.Network n2 ) { if ( n1 . getId () . equals ( n2 . getId () ) ) { return NUMBER_CONSTANT ; } else { return n1 . getId () . compareTo ( n2 . getId () ) ; } }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue getExistingStorageDomainList ( org.ovirt.engine.core.common.businessentities.StorageServerConnections storageServerConnection ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.storage.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery . getBackend () . runInternalQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( org.ovirt.engine.core.bll.storage.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery . getVdsId () , storageServerConnection . getstorage_type () , org.ovirt.engine.core.common.businessentities.StorageDomainType.Data , storageServerConnection . getconnection () ) ) ; return returnValue ; }
protected void setUpFactory ( org.ovirt.engine.core.bll.MultipleActionsRunnerBaseTest.TestCommand . . . commands ) { org.mockito.stubbing.OngoingStubbing stubbing = org.mockito.Mockito . when ( commandFactory . createWrappedCommand ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . anyBoolean () ) ) ; for ( org.ovirt.engine.core.bll.MultipleActionsRunnerBaseTest.TestCommand command : commands ) { stubbing = stubbing . thenReturn ( command ) ; } }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmApplicationResource resource = getNotFoundResource () ; setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations () ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages createPackagesManager ( final org.ovirt.engine.core.common.businessentities.VDS host , final boolean checkOnly ) throws java.security.KeyStoreException { final org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages hostPackagesManager = new org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages ( host , checkOnly ) ; java.lang.String correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker . getCorrelationId () ; if ( org.apache.commons.lang.StringUtils . isEmpty ( correlationId ) ) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils . getObjectId ( host ) ; } hostPackagesManager . setCorrelationId ( correlationId ) ; hostPackagesManager . useDefaultKeyPair () ; return hostPackagesManager ; }
@ org.junit.Test public void canDoActionSucceedsWithForceOption ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand < org.ovirt.engine.core.common.action.RemoveVdsParameters > ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . NewGuid () , true ) ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; runAndAssertCanDoActionSuccess () ; }
@ org.junit.Test public void diskInterfaceNotSupportedByOs () { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest . createVM () ; vm . setVmOs ( NUMBER_CONSTANT ) ; initializeOsRepository ( DiskInterface.VirtIO ) ; org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement () ; dve . setDiskInterface ( DiskInterface.VirtIO ) ; org.junit.Assert . assertThat ( validator . isDiskInterfaceSupported ( vm , dve ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ) ; }
protected void setUpLogExpectations ( boolean debug ) throws java.lang.Exception { java.lang.reflect.Field field = org.ovirt.engine.api.restapi.resource.BaseBackendResource . class . getDeclaredField ( STRING_CONSTANT ) ; org.slf4j.Logger logger = org.mockito.Mockito . mock ( org.slf4j.Logger . class ) ; org.mockito.Mockito . when ( logger . isDebugEnabled () ) . thenReturn ( debug ) ; setFinalStatic ( field , logger ) ; }
boolean areRequiredNetworksAvailable ( final java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > vmNetworkInterfaces , final java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > allInterfacesForVds ) { for ( final org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmIf : vmNetworkInterfaces ) { boolean found = false ; for ( final org.ovirt.engine.core.common.businessentities.VdsNetworkInterface vdsIf : allInterfacesForVds ) { if ( org.apache.commons.lang.StringUtils . equals ( vmIf . getNetworkName () , vdsIf . getNetworkName () ) ) { found = true ; break; } } if ( ! found ) { return false ; } } return true ; }
public void activate () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > pb = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : getSelectedItems () ) { pb . add ( new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( a . getId () , getEntity () . getId () ) ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.ActivateStorageDomain , pb ) ; }
private void addTableFirstRow () { java.util.List < org.gwtbootstrap3.client.ui.Label > values = new java.util.ArrayList < org.gwtbootstrap3.client.ui.Label > () { { add ( createLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkOutOfSyncPanel.constants . PropertyOutOfSyncPopUp () , true ) ) ; add ( createLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkOutOfSyncPanel.constants . hostOutOfSyncPopUp () , true ) ) ; add ( createLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkOutOfSyncPanel.constants . dcOutOfSyncPopUp () , true ) ) ; } } ; addOutOfSyncRow ( values , TextAlign.CENTER , true ) ; }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand == ( getModel () . getRemoveCommand () ) ) { return removeConfirmPopupProvider . get () ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
protected void postSaveAction ( org.ovirt.engine.core.compat.Guid networkGuid , boolean succeeded ) { if ( succeeded ) { if ( ( ( java.lang.Boolean ) ( getIsVmNetwork () . getEntity () ) ) ) { performProfilesActions ( networkGuid ) ; stopProgress () ; } else { stopProgress () ; cancel () ; } } }
private void localize () { bricks . setLabel ( constants . selectBrickToViewFopStats () ) ; nfsServers . setLabel ( constants . selectServerToViewFopStats () ) ; bricksTab . setLabel ( constants . volumeProfileBricksTab () ) ; nfsTab . setLabel ( constants . volumeProfileNfsTab () ) ; bricksErrorLabel . setText ( constants . brickProfileErrorMessage () ) ; nfsErrorLabel . setText ( constants . nfsProfileErrorMessage () ) ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > () ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.scheduling.ClusterPolicy > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.scheduling.ClusterPolicy > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; java.util.Collections . sort ( list , new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator () ) ; setItems ( list ) ; }
@ org.junit.Test public void testAllDomainsWithinThreshold () { org.mockito.Mockito . doReturn ( java.util.Collections . emptyList () ) . when ( cmd ) . getDisksList () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( multipleStorageDomainsValidator ) . allDomainsExistAndActive () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN . name () ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , java.util.List < java.lang.String > messages ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log . error ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; return hosts ; }
@ org.junit.Test public void getCustomValuesLeaksInternalStructure () { final java.lang.String key = STRING_CONSTANT ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; b . addCustomValue ( key , value ) ; final java.lang.String v = b . getCustomValue ( key ) ; org.junit.Assert . assertEquals ( value , v ) ; final java.util.Map < java.lang.String , java.lang.String > m = b . getCustomValues () ; m . clear () ; final java.lang.String s = b . getCustomValue ( key ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , s ) ; }
public static void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public boolean validate () { numOfVfs . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation ( NUMBER_CONSTANT , getMaxNumOfVfs () . getEntity () ) } ) ; labelsModel . validate () ; return ( labelsModel . getIsValid () ) && ( numOfVfs . getIsValid () ) ; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId ( org.ovirt.engine.core.compat.Guid storageDomainId ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade () . getStorageDomainStaticDao () . get ( storageDomainId ) ; if ( storageDomainStatic != null ) { org.ovirt.engine.core.common.businessentities.Provider < > provider = getDbFacade () . getProviderDao () . get ( new org.ovirt.engine.core.compat.Guid ( storageDomainStatic . getStorage () ) ) ; return org.ovirt.engine.core.bll.provider.ProviderProxyFactory . getInstance () . create ( provider ) ; } return null ; }
@ org.junit.Test public void getForExistingVds () { org.ovirt.engine.core.common.businessentities.VdsKdumpStatus expected = new org.ovirt.engine.core.common.businessentities.VdsKdumpStatus () ; expected . setVdsId ( FixturesTool.HOST_ID ) ; expected . setStatus ( KdumpFlowStatus.DUMPING ) ; expected . setAddress ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VdsKdumpStatus found = dao . get ( expected . getVdsId () ) ; org.junit.Assert . assertNotNull ( found ) ; org.junit.Assert . assertEquals ( expected , found ) ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.AuditLogSeverity . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.DateEnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.DateEnumForSearch . class ) ; } else { return null ; } }
@ java.lang.Override public java.lang.String getValue ( T value ) { if ( ( ( value != null ) && ( ( value . getComment () ) != null ) ) && ( ! ( value . getComment () . isEmpty () ) ) ) { return value . getComment () ; } return null ; }
private void initParentResource () { org.ovirt.engine.api.restapi.resource.AbstractBackendResource parent = resource . getParent () . getParent () . getParent () ; parent . setBackend ( backend ) ; parent . setMappingLocator ( mapperLocator ) ; parent . setValidatorLocator ( validatorLocator ) ; parent . setMessageBundle ( messageBundle ) ; parent . setHttpHeaders ( httpHeaders ) ; }
@ org.junit.Test public void testPersistNetworkAttachmentsForNotReportedNetworkAttachmentIsNotPersisted () { org.mockito.Mockito . when ( networkAttachmentDao . getAllForHost ( org.mockito.Matchers . eq ( hostId ) ) ) . thenReturn ( new java.util.ArrayList <> () ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface interfaceWithUnreportedNetwork = createVdsNetworkInterface () ; interfaceWithUnreportedNetwork . setNetworkName ( STRING_CONSTANT ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister = createPersister ( java.util.Collections . emptyList () , interfaceWithUnreportedNetwork ) ; persister . persistNetworkAttachments () ; org.mockito.Mockito . verify ( networkAttachmentDao ) . getAllForHost ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . verifyNoMoreInteractions ( networkAttachmentDao ) ; }
@ java.lang.Override protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . init () ; org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . getReportsInitEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability () ; } } ) ; performLogin ( loginModel ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValueObj ) { java.lang.Object returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) . getReturnValue () ; java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > allHostVfs = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > ) ( returnValue ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : allHostVfs ) { originalVfsConfigs . add ( vfsConfig ) ; nicToVfsConfig . put ( vfsConfig . getNicId () , new org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig ( vfsConfig ) ) ; } queryVfMap () ; }
private static java.security.KeyStore getTrustStore ( java.lang.String filePath , java.lang.String password ) throws java.io.IOException , java.security.KeyStoreException , java.security.NoSuchAlgorithmException , java.security.cert.CertificateException { java.security.KeyStore ks ; try ( java.io.InputStream in = new java.io.FileInputStream ( filePath ) ) { ks = java.security.KeyStore . getInstance ( STRING_CONSTANT ) ; ks . load ( in , password . toCharArray () ) ; } return ks ; }
protected void updateCustomPropertySheet () { if ( ( getModel () . getSelectedCluster () ) == null ) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel () . getSelectedCluster () ; if ( ( getModel () . getCustomPropertiesKeysList () ) != null ) { getModel () . getCustomPropertySheet () . setKeyValueString ( getModel () . getCustomPropertiesKeysList () . get ( cluster . getcompatibility_version () ) ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( STRING_CONSTANT . equals ( pcArgs.PropertyName ) ) { if ( ( modelProvider . getModel () . getProgress () ) != null ) { if ( ( getTable () ) != null ) { getTable () . setLoadingState ( LoadingState.LOADING ) ; } } } }
@ org.junit.Test public void isConnWithSameDetailsExistCheckSameConn () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( STRING_CONSTANT , StorageType.ISCSI , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList <> () ; connections . add ( newISCSIConnection ) ; org.mockito.Mockito . when ( storageConnDao . getAllForConnection ( newISCSIConnection ) ) . thenReturn ( connections ) ; boolean isExists = command . isConnWithSameDetailsExists ( newISCSIConnection , null ) ; org.junit.Assert . assertFalse ( isExists ) ; }
public static java.lang.String decrypt ( java.lang.String source ) throws java.security.GeneralSecurityException { if ( ( source == null ) || ( ( source . length () ) == NUMBER_CONSTANT ) ) { return source ; } else { javax.crypto.Cipher rsa = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; rsa . init ( javax.crypto.Cipher.DECRYPT_MODE , org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils . getPrivateKeyEntry () . getPrivateKey () ) ; return new java.lang.String ( rsa . doFinal ( new org.apache.commons.codec.binary.Base64 () . decode ( source ) ) , java.nio.charset.Charset . forName ( STRING_CONSTANT ) ) ; } }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
@ org.junit.Test public void isConnWithSameDetailsExistSameConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( STRING_CONSTANT , StorageType.NFS , NfsVersion.V4 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList <> () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection1 = newNFSConnection ; connections . add ( connection1 ) ; org.mockito.Mockito . when ( storageConnDao . getAllForStorage ( newNFSConnection . getconnection () ) ) . thenReturn ( connections ) ; boolean isExists = command . isConnWithSameDetailsExists ( newNFSConnection , null ) ; org.junit.Assert . assertFalse ( isExists ) ; }
public static void initUniqueOsNames () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.uniqueOsNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector . getInstance () . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.uniqueOsNames ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetUniqueOsNames ) , callback ) ; }
@ java.lang.Override public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { if ( ( object . getVmEntityType () ) == null ) { return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants . unattachedDisk () ; } else { java.lang.String status = org.ovirt.engine.ui.uicompat.EnumTranslator . getInstance () . translate ( object . getVmEntityType () ) ; return status ; } }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { org.ovirt.engine.api.resource.StorageResource subresource = collection . getStorageResource ( GUIDS [ org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.SINGLE_STORAGE_IDX ] . toString () ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setUpQueryExpectations ( STRING_CONSTANT , null ) ; verifyModel ( subresource . get () , org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.SINGLE_STORAGE_IDX ) ; }
@ java.lang.Override public boolean isWanOptionsAvailable ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model ) { boolean spiceAvailable = ( model . getDefaultConsoleModel () ) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ; boolean isWindowsVm = model . getVM () . getOs () . isWindows () ; boolean spiceGuestAgentInstalled = ( model . getVM () . getSpiceDriverVersion () ) != null ; return ( spiceAvailable && isWindowsVm ) && spiceGuestAgentInstalled ; }
protected void refreshVmStats () { if ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > GetValue ( ConfigValues.DebugTimerLogging ) ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log . debug ( STRING_CONSTANT ) ; } if ( fetchRunningVms () ) { refreshCommitedMemory () ; java.util.List < org.ovirt.engine.core.compat.Guid > staleRunningVms = checkVmsStatusChanged () ; proceedWatchdogEvents () ; proceedBalloonCheck () ; proceedDownVms () ; proceedGuaranteedMemoryCheck () ; processExternallyManagedVms () ; updateRepository ( staleRunningVms ) ; if ( ! ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils . isOldClusterVersion ( _vds . getVdsGroupCompatibilityVersion () ) ) ) { handleVmDeviceChange () ; } prepareGuestAgentNetworkDevicesForUpdate () ; } }
@ org.junit.Before public void setUp () { role = new org.ovirt.engine.core.common.businessentities.Role () ; role . setId ( params . getRoleId () ) ; org.mockito.Mockito . when ( roleDaoMock . get ( params . getRoleId () ) ) . thenReturn ( role ) ; org.mockito.Mockito . doReturn ( roleGroupMapDaoMock ) . when ( command ) . getRoleGroupMapDao () ; }
public void createCommand () { param = new org.ovirt.engine.core.common.action.UpdateHostNicVfsConfigParameters ( org.ovirt.engine.core.bll.network.host.UpdateHostNicVfsConfigCommandTest.NIC_ID , org.ovirt.engine.core.bll.network.host.UpdateHostNicVfsConfigCommandTest.NUM_OF_VFS , false ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.network.host.UpdateHostNicVfsConfigCommand ( param , null ) ) ; org.mockito.Mockito . doReturn ( validator ) . when ( command ) . getVfsConfigValidator () ; org.mockito.Mockito . doReturn ( vfsConfigDao ) . when ( command ) . getVfsConfigDao () ; }
public static < TSource > TSource firstOrDefault ( java.lang.Iterable < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super TSource > predicate , TSource defaultValue ) { if ( source != null ) { for ( TSource item : source ) { if ( predicate . match ( item ) ) { return item ; } } } return defaultValue ; }
protected org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice () { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , org.ovirt.engine.core.bll.AttachDiskToVmCommand . getVmId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , NUMBER_CONSTANT , null , true , org.ovirt.engine.core.bll.AttachDiskToVmCommand . getParameters () . isPlugUnPlug () , org.ovirt.engine.core.bll.AttachDiskToVmCommand . getParameters () . isReadOnly () , STRING_CONSTANT , null , org.ovirt.engine.core.bll.AttachDiskToVmCommand . getParameters () . getSnapshotId () , null ) ; }
@ org.junit.Test public void testExecuteQueryCommand () { org.ovirt.engine.core.common.queries.IdQueryParameters params = getQueryParameters () ; org.mockito.Mockito . when ( params . getId () ) . thenReturn ( storageDoaminId ) ; org.ovirt.engine.core.bll.snapshots.GetAllDiskSnapshotsByStorageDomainIdQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = getQuery () ; query . executeQueryCommand () ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages = query . getQueryReturnValue () . getReturnValue () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , diskImages . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.bll.snapshots.GetAllDiskSnapshotsByStorageDomainIdQueryTest.snapshotDescription , diskImages . get ( NUMBER_CONSTANT ) . getVmSnapshotDescription () ) ; }
private org.ovirt.engine.core.common.interfaces.IVdcUser getCurrentUser () { java.lang.String sessionId = org.ovirt.engine.core.bll.GetRolesForDelegationByUserQuery . getParameters () . getSessionId () ; org.ovirt.engine.core.common.interfaces.IVdcUser user = null ; if ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( sessionId ) ) ) { user = org.ovirt.engine.core.bll.session.SessionDataContainer . getInstance () . getUser ( sessionId , false ) ; } return user ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails getVolumeAdvancedDetails ( org.ovirt.engine.core.common.businessentities.VDS upServer , org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue result = runVdsCommand ( VDSCommandType.GetGlusterVolumeAdvancedDetails , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeAdvancedDetailsVDSParameters ( upServer . getId () , clusterId , volumeName , null , false , true ) ) ; return ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails ) ( result . getReturnValue () ) ) ; }
@ java.lang.Override public java.lang.Object runInTransaction () { getCompensationContext () . snapshotEntityStatus ( getVm () . getDynamicData () ) ; getVm () . setStatus ( VMStatus.PreparingForHibernate ) ; runVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( getVm () . getDynamicData () ) ) ; getCompensationContext () . stateChanged () ; return null ; }
@ java.lang.Override public java.lang.Void runInTransaction () { diskImage . setImageId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; diskImage . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; diskImage . setParentId ( Guid.Empty ) ; diskImage . setit_guid ( Guid.Empty ) ; org.ovirt.engine.core.bll.ImagesHandler . setDiskAlias ( diskImage , getVm () ) ; org.ovirt.engine.core.bll.ImagesHandler . addDiskImage ( diskImage , getVmId () ) ; return null ; }
@ java.lang.Override protected void executeIrsBrokerCommand () { result = org.ovirt.engine.core.vdsbroker.irsbroker.GetImagesListVDSCommand . getIrsProxy () . getImagesList ( org.ovirt.engine.core.vdsbroker.irsbroker.GetImagesListVDSCommand . getParameters () . getStorageDomainId () . toString () ) ; org.ovirt.engine.core.vdsbroker.irsbroker.GetImagesListVDSCommand . proceedProxyReturnValue () ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > tempRetValue = new java.util.ArrayList ( result . getImageList () . length ) ; for ( java.lang.String id : result . getImageList () ) { tempRetValue . add ( new org.ovirt.engine.core.compat.Guid ( id ) ) ; } setReturnValue ( tempRetValue ) ; }
@ org.junit.Test public void canDoActionFailedVirtIODisk ( ) throws java.lang.Exception { mockVmStatusUp () ; createNotVirtIODisk () ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.HOT_PLUG_DISK_IS_NOT_VIRTIO . toString () ) ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > map = returnValue . getReturnValue () ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = new java.util.ArrayList <> () ; templates . add ( map . get ( true ) ) ; setItems ( templates ) ; }
private static java.util.List < java.lang.String > trimElements ( java.lang.String . . . elements ) { java.util.List < java.lang.String > list = new java.util.ArrayList <> ( elements.length ) ; for ( java.lang.String e : elements ) { e = e . trim () ; if ( ( e . length () ) > NUMBER_CONSTANT ) { list . add ( e ) ; } } return list ; }
public void setDefaultNames4 () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDataCenterListByName ( new org.ovirt.engine.ui.frontend.AsyncQuery ( null , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { context.dataCenterList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; setDefaultNames5 () ; } } , frontendHash ) , ( ( getCommonName () ) + STRING_CONSTANT ) ) ; }
private java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > fileStatsFromVDSReturnValue ( org.ovirt.engine.core.common.vdscommands.VDSReturnValue fileStats ) { if ( ( fileStats == null ) || ( ! ( fileStats . getSucceeded () ) ) ) { return null ; } @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > result = ( ( java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ) ( fileStats . getReturnValue () ) ) ; return result ; }
@ org.junit.Test public void testGetAllDiskImageSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery . executeQueryCommand () ; org.junit.Assert . assertEquals ( diskImageResultList , searchQuery . getQueryReturnValue () . getReturnValue () ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addManagedDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , org.ovirt.engine.core.common.utils.VmDeviceType device , java.util.Map < java.lang.String , java.lang.Object > specParams , boolean plugged , java.lang.Boolean readOnly , java.lang.String address , java.util.Map < java.lang.String , java.lang.String > customProp ) { org.ovirt.engine.core.common.businessentities.VmDevice managedDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( id , type , device , specParams , plugged , readOnly , customProp , false ) ; if ( org.apache.commons.lang.StringUtils . isNotBlank ( address ) ) { managedDevice . setAddress ( address ) ; } return managedDevice ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
public java.lang.Boolean call ( ) throws java.lang.Exception { boolean reboot = ( _reboot ) && ( ! ( _isNode ) ) ; if ( reboot ) { _messages . post ( InstallerMessages.Severity.INFO , STRING_CONSTANT ) ; } _parser . cliEnvironmentSet ( org.ovirt.ovirt_host_deploy.constants.CoreEnv.FORCE_REBOOT , reboot ) ; return true ; }
@ java.lang.Override public java.lang.Boolean runInTransaction () { org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.CollectVdsNetworkData , new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters ( getVds () , getInterfaces () ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks () ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper . setStatus ( getVdsGroupId () , net ) ; } return java.lang.Boolean.TRUE ; }
private void acquireLockAndWait () { if ( ( context . getLock () ) == null ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > exclusiveLocks = getExclusiveLocks () ; if ( exclusiveLocks != null ) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock ( exclusiveLocks , null ) ; getLockManager () . acquireLockWait ( lock ) ; context . withLock ( lock ) ; } } }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.bll.GetDirectoryUserByPrincipalQuery . getQueryReturnValue () . setReturnValue ( org.ovirt.engine.core.bll.aaa.DirectoryUtils . mapPrincipalRecordToDirectoryUser ( org.ovirt.engine.core.bll.GetDirectoryUserByPrincipalQuery . getParameters () . getAuthz () , org.ovirt.engine.core.aaa.AuthzUtils . fetchPrincipalRecord ( org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager . getInstance () . getExtensionByName ( org.ovirt.engine.core.bll.GetDirectoryUserByPrincipalQuery . getParameters () . getAuthz () ) , org.ovirt.engine.core.bll.GetDirectoryUserByPrincipalQuery . getParameters () . getPrincnipal () , false , false ) ) ) ; }
private void mockVmValidator () { org.ovirt.engine.core.bll.validator.VmValidator vmValidator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.VmValidator ( vm ) ) ; org.mockito.Mockito . doReturn ( vmValidator ) . when ( command ) . createVmValidator ( vm ) ; org.mockito.Mockito . doReturn ( diskDao ) . when ( vmValidator ) . getDiskDao () ; org.mockito.Mockito . doReturn ( getNoVirtioScsiDiskElement () ) . when ( diskVmElementDao ) . get ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . doReturn ( diskVmElementDao ) . when ( vmValidator ) . getDiskVmElementDao () ; }
@ java.lang.Override protected boolean canDoAction () { boolean autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand . isUserCanBeAuthenticated () ; if ( autheticated ) { autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand . getCurrentUser () . isAdmin () ; if ( ! autheticated ) { addCanDoActionMessage ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; } else { autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand . attachUserToSession () ; } } return autheticated ; }
@ org.junit.Test public void updateStatusForIp () { org.ovirt.engine.core.common.businessentities.VdsKdumpStatus existing = new org.ovirt.engine.core.common.businessentities.VdsKdumpStatus () ; existing . setStatus ( KdumpFlowStatus.FINISHED ) ; existing . setAddress ( STRING_CONSTANT ) ; dao . updateForIp ( STRING_CONSTANT , existing ) ; existing . setVdsId ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.ovirt.engine.core.common.businessentities.VdsKdumpStatus found = dao . get ( existing . getVdsId () ) ; org.junit.Assert . assertNotNull ( found ) ; org.junit.Assert . assertEquals ( existing , found ) ; }
public void getVmList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String poolName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + poolName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
protected void runAddAndVerify ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface , boolean addMacResult , org.mockito.verification.VerificationMode addMacVerification ) { org.mockito.Mockito . when ( macPoolManager . AddMac ( iface . getMacAddress () ) ) . thenReturn ( addMacResult ) ; vmInterfaceManager . add ( iface , org.ovirt.engine.core.bll.context.NoOpCompensationContext . getInstance () , false ) ; verifyAddDelegatedCorrectly ( iface , addMacVerification ) ; }
@ org.junit.Test public void validateFailsWithArbiterWithClusterDoesNotArbiterVolume () { setVolume ( getVolume ( NUMBER_CONSTANT , false , GlusterVolumeType.REPLICATE , NUMBER_CONSTANT , true ) ) ; org.mockito.Mockito . doReturn ( getCluster ( true , Version.v4_0 ) ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers . any () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_NOT_SUPPORTED ) ; }
private void mockDependencies () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( glusterUtils ) . getUpServer ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQueryTest.CLUSTER_ID ) ; org.mockito.Mockito . doReturn ( STRING_CONSTANT ) . when ( getQuery () ) . getGlusterVolumeName ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQueryTest.VOLUME_ID ) ; org.mockito.Mockito . doReturn ( getBrick () ) . when ( brickDao ) . getById ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ java.lang.Override protected void onExportChanged () { boolean externalNetwork = ( ( java.lang.Boolean ) ( getExport () . getEntity () ) ) ; getExternalProviders () . setIsChangable ( externalNetwork ) ; getNetworkLabel () . setIsChangable ( externalNetwork ) ; getIsVmNetwork () . setIsChangable ( ( ! externalNetwork ) ) ; getHasMtu () . setIsChangable ( ( ! externalNetwork ) ) ; if ( externalNetwork ) { getIsVmNetwork () . setEntity ( true ) ; getHasMtu () . setEntity ( false ) ; } super . onExportChanged () ; }
@ org.junit.Test public void testUpdateByClusterIdAndName () { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig config = dao . getConfigByClusterIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_3 ) ; org.junit.Assert . assertNotNull ( config ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , config . getParamValue () ) ; dao . updateConfigByClusterIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_3 , STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig modifiedConfig = dao . getConfigByClusterIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_3 ) ; org.junit.Assert . assertNotNull ( modifiedConfig ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , modifiedConfig . getParamValue () ) ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
java.util.List < org.ovirt.engine.core.common.utils.Pair < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > filterNonNullPools ( java.util.List < org.ovirt.engine.core.common.utils.Pair < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > poolsWithRepresentatives ) { return java.util.Collections . unmodifiableList ( org.ovirt.engine.ui.uicommonweb.Linq . where ( poolsWithRepresentatives , new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < org.ovirt.engine.core.common.utils.Pair < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > () { @ java.lang.Override public boolean match ( Pair < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > poolAndVm ) { return ( poolAndVm . getSecond () ) != null ; } } ) ) ; }
@ java.lang.Override public void testListCrash ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection . setUriInfo ( uriInfo ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpHooksQueryExpectations ( t ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
@ java.lang.Override @ org.junit.jupiter.api.Test public void testListCrashClientLocale () { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest . setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpDiskProfilesQueryExpectations ( t ) ; collection . setUriInfo ( uriInfo ) ; try { org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest . getCollection () ; org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( STRING_CONSTANT . equals ( command . getName () ) ) { onSave () ; } if ( STRING_CONSTANT . equals ( command . getName () ) ) { onForceSave () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancelConfirm () ; } }
private void handlePasswordGrantType ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , java.lang.String scope ) throws java.lang.Exception { if ( org.ovirt.engine.core.sso.utils.SSOUtils . scopeAsList ( scope ) . contains ( STRING_CONSTANT ) ) { issueTokenForLoginOnBehalf ( request , response , scope ) ; } else { issueTokenForPasswd ( request , response , scope ) ; } }
public void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image ) { addDiskImageWithNoVmDevice ( image , image . getActive () , new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap ( image . getImageId () , image . getStorageIds () . get ( NUMBER_CONSTANT ) , image . getQuotaId () , image . getDiskProfileId () ) ) ; }
protected int getTotalCpuCores () { try { return ( getModel () . getTotalCPUCores () . getEntity () ) != null ? java.lang.Integer . parseInt ( getModel () . getTotalCPUCores () . getEntity () ) : NUMBER_CONSTANT ; } catch ( java.lang.NumberFormatException e ) { return NUMBER_CONSTANT ; } }
public static java.lang.String startPasswordDialog ( java.lang.String user , java.lang.String msg ) throws java.io.IOException { org.ovirt.engine.core.config.EngineConfigLogic.log . debug ( STRING_CONSTANT ) ; java.lang.String prompt = null ; if ( user != null ) { prompt = ( ( msg + STRING_CONSTANT ) + user ) + STRING_CONSTANT ; } else { prompt = msg + STRING_CONSTANT ; } return org.ovirt.engine.core.config.EngineConfigLogic.console . readPassword ( prompt ) ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VolumeFormat . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.ImageStatus . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType . class ) ; } return null ; }
public static void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
private void updateShareableDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.ShareableDiskEnabled , datacenter . getcompatibility_version () . getValue () ) ) ) ; getIsShareable () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS . shareableDiskNotSupported () ) ; getIsShareable () . setIsChangable ( ( isShareableDiskEnabled && ( isEditEnabled () ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmInitNetwork createVmInitNetwork () { final org.ovirt.engine.core.common.businessentities.VmInitNetwork vmInitNetwork = new org.ovirt.engine.core.common.businessentities.VmInitNetwork () ; vmInitNetwork . setName ( org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IFACE_NAME ) ; vmInitNetwork . setBootProtocol ( Ipv4BootProtocol.STATIC_IP ) ; vmInitNetwork . setIp ( org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IPV4_ADDRESS ) ; vmInitNetwork . setNetmask ( org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IPV4_NETMASK ) ; vmInitNetwork . setGateway ( org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IPV4_GATEWAY ) ; return vmInitNetwork ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getStorageServerConnectionLunMapDao () ; storageServerConnectionDao = dbFacade . getStorageServerConnectionDao () ; existingConnection = storageServerConnectionDao . get ( STRING_CONSTANT ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections () ; newServerConnection . setid ( STRING_CONSTANT ) ; newServerConnection . setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.EXISTING_DOMAIN_STORAGE_NAME ) ; existingLUNStorageMap = dao . get ( new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map_id ( STRING_CONSTANT , existingConnection . getid () ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.FREE_LUN_ID , existingConnection . getid () ) ; }
private void addScsiGenericIoOptions ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.ScsiGenericIO [] values ) { version . setSgioOptions ( new org.ovirt.engine.api.model.ScsiGenericIoOptions () ) ; for ( org.ovirt.engine.api.model.ScsiGenericIO mode : values ) { version . getSgioOptions () . getScsiGenericIoOptions () . add ( mode . value () ) ; } }
@ org.junit.Test public void testReadAllTextTonSOfTimes ( ) throws java.lang.Exception { java.io.File iFile = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; try ( java.io.FileWriter iFileWriter = new java.io.FileWriter ( iFile ) ) { iFileWriter . write ( STRING_CONSTANT ) ; } for ( int i = NUMBER_CONSTANT ; i < NUMBER_CONSTANT ; i ++ ) { java.lang.String data = org.ovirt.engine.core.utils.FileUtil . readAllText ( iFile . getAbsolutePath () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , data ) ; } }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmTemplatesDisks , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResourceTest.TEMPLATE_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > () ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void auditNetworkCompliance ( org.ovirt.engine.core.common.businessentities.VDS host , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > dbIfaces , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks ) { final java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworksByName = org.ovirt.engine.core.common.businessentities.Entities . entitiesByName ( clusterNetworks ) ; final java.util.Collection < org.ovirt.engine.core.common.businessentities.network.Network > dbHostNetworks = findNetworksOnInterfaces ( dbIfaces , clusterNetworksByName ) ; logChangedDisplayNetwork ( host , dbHostNetworks , dbIfaces ) ; logUnsynchronizedNetworks ( host , clusterNetworksByName ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd . executeCommand () ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getSucceeded () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_DISABLE , cmd . getAuditLogTypeValue () ) ; }
@ org.junit.Test public void testGet () { initResource ( resource.parent ) ; for ( org.ovirt.engine.core.common.businessentities.ActionGroup action : org.ovirt.engine.core.common.businessentities.ActionGroup . values () ) { resource.id = java.lang.Integer . toString ( action . getId () ) ; verifyPermit ( resource . get () , action ) ; } resource.id = STRING_CONSTANT ; }
protected org.ovirt.engine.core.common.businessentities.VM mapToVM ( org.ovirt.engine.api.model.VmPool model , org.ovirt.engine.core.common.businessentities.VmTemplate template ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = getMapper ( org.ovirt.engine.core.common.businessentities.VmTemplate . class , org.ovirt.engine.core.common.businessentities.VmStatic . class ) . map ( template , null ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( getMapper ( org.ovirt.engine.api.model.VmPool . class , org.ovirt.engine.core.common.businessentities.VmStatic . class ) . map ( model , vmStatic ) , new org.ovirt.engine.core.common.businessentities.VmDynamic () , new org.ovirt.engine.core.common.businessentities.VmStatistics () ) ; return vm ; }
@ java.lang.Override @ org.junit.Test public void testListCrash ( ) throws java.lang.Exception { java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpMacPoolsQueryExpectations ( t ) ; javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel ) ( sender ) ) ; if ( STRING_CONSTANT . equals ( ( ( org.ovirt.engine.core.compat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ) ) { bricksCountEditor . setText ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getMessages () . noOfBricksSelected ( ( ( model . getBricks () . getSelectedItems () ) == null ? NUMBER_CONSTANT : model . getBricks () . getSelectedItems () . size () ) ) ) ; } }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ScsiGenericIO . class ) ) ; model . setStatus ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ; model . setLunStorage ( null ) ; return model ; }
protected boolean validateMTUOverrideSupport () { boolean mtuSupported = true ; if ( ( getNetwork () . getMtu () ) != NUMBER_CONSTANT ) { mtuSupported = org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > GetValue ( ConfigValues.MTUOverrideSupported , org.ovirt.engine.core.bll.network.dc.NetworkCommon . getStoragePool () . getcompatibility_version () . getValue () ) ; if ( ! mtuSupported ) { addCanDoActionMessage ( VdcBllMessages.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED ) ; } } return mtuSupported ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertTrue ( model . isSparse () ) ; assertTrue ( ( ! ( model . isBootable () ) ) ) ; assertTrue ( model . isPropagateErrors () ) ; }
protected void initGraphicsConsoles () { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster () ; java.lang.Integer osType = getOSType () . getSelectedItem () ; if ( ( cluster == null ) || ( osType == null ) ) { return; } initGraphicsConsoles ( osType , getCompatibilityVersion () ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > generateDisksList ( int size ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = new java.util.ArrayList <> () ; for ( int i = NUMBER_CONSTANT ; i < size ; ++ i ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage () ; diskImage . setImageId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; disksList . add ( diskImage ) ; } return disksList ; }
@ java.lang.Override protected void executeVdsBrokerCommand () { result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . getBroker () . getStorageDomainInfo ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . getParameters () . getStorageDomainId () . toString () ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . proceedProxyReturnValue () ; org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.StorageDomainStatic , org.ovirt.engine.core.compat.Guid > pairSdStatic = buildStorageStaticFromStruct ( result.storageInfo ) ; pairSdStatic . getFirst () . setId ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . getParameters () . getStorageDomainId () ) ; setReturnValue ( pairSdStatic ) ; }
public static java.util.List < org.ovirt.engine.api.model.RngSource > mapRngSources ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VmRngDevice.Source > entity ) { java.util.List < org.ovirt.engine.api.model.RngSource > result = new java.util.ArrayList ( ( entity != null ? entity . size () : NUMBER_CONSTANT ) ) ; if ( entity != null ) { for ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source source : entity ) { org.ovirt.engine.api.model.RngSource restSource = org.ovirt.engine.api.restapi.types.RngDeviceMapper . map ( source , null ) ; result . add ( restSource ) ; } } return result ; }
@ java.lang.Override protected java.lang.String getProgressText ( T object ) { java.lang.Integer progressValue = org.ovirt.engine.ui.webadmin.widget.table.column.QuotaPercentColumn . getProgressValue ( object ) ; if ( ( progressValue != null ) && ( progressValue > NUMBER_CONSTANT ) ) { return getaApplicationConstants () . exceeded () ; } if ( ( progressValue != null ) && ( progressValue < NUMBER_CONSTANT ) ) { return getaApplicationConstants () . unlimited () ; } return progressValue != null ? progressValue + STRING_CONSTANT : STRING_CONSTANT ; }
@ org.junit.Test public void testRunQuery_GetUserBySessionId () { java.lang.String sessionId = STRING_CONSTANT ; org.ovirt.engine.core.common.queries.VdcQueryType queryType = org.ovirt.engine.core.common.queries.VdcQueryType.GetUserBySessionId ; java.lang.Object result = testServlet . runQuery ( queryType , mockQueryParams , sessionId ) ; org.junit.Assert . assertEquals ( result , mockUser ) ; org.mockito.Mockito . verify ( mockQueryParams ) . setSessionId ( sessionId ) ; org.mockito.Mockito . verify ( mockQueryParams ) . setFiltered ( testServlet . filterQueries () ) ; org.mockito.Mockito . verify ( mockBackend ) . runQuery ( queryType , mockQueryParams ) ; }
protected void RemoveVmNetwork () { java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > interfaces = getVmNetworkInterfaceDAO () . getAllForVm ( org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; if ( interfaces != null ) { for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces ) { org.ovirt.engine.core.bll.MacPoolManager . getInstance () . freeMac ( iface . getMacAddress () ) ; } } }
@ java.lang.Override protected void onEntityChanged () { super . onEntityChanged () ; if ( ( getEntity () ) != null ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolumeEntity = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( getEntity () ) ) ; setItems ( glusterVolumeEntity . getBricks () ) ; } else { setItems ( null ) ; } }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getAdGroupDao () ; newAdGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup () ; newAdGroup . setid ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; newAdGroup . setdomain ( STRING_CONSTANT ) ; newAdGroup . setname ( STRING_CONSTANT ) ; newAdGroup . setstatus ( LdapRefStatus.Active ) ; existingAdGroup = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; }
public static void addStatistics ( org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { model . setStatistics ( new org.ovirt.engine.api.model.Statistics () ) ; org.ovirt.engine.api.restapi.resource.NicStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.NicStatisticalQuery ( model ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query . getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( statistic , query . getParentType () ) ; } model . getStatistics () . getStatistics () . addAll ( statistics ) ; }
public boolean invokeAsNumber ( com.google.gwt.core.client.JsArray < > args , org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler ) { clearResultInformation () ; return function . invoke ( args , JsFunction.RESULT_TYPE_NUMBER , ( java.lang.Double result ) - > { this . resultValue = result ; this . resultType = JsFunction.RESULT_TYPE_NUMBER ; } , errorHandler ) ; }
@ org.junit.Test public void validatePass () { org.ovirt.engine.core.common.businessentities.StorageDomain sd = mockGetExistingDomain ( true ) ; int i = new java.util.Random () . nextInt ( SUPPORTED_DOMAIN_TYPES.length ) ; sd . setStorageType ( org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES [ i ] ) ; sd . setId ( org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HE_SD_ID ) ; cmd . init () ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
@ java.lang.Override protected void configure () { super . configure () ; bind ( org.ovirt.engine.ui.common.utils.ConsoleUtils . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemMessagesTranslator . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.userportal.section.login.presenter.ConnectAutomaticallyProvider . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.userportal.utils.ConnectAutomaticallyManager . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.common.utils.ConsoleManager . class ) . in ( com.google.inject.Singleton . class ) ; }
@ org.junit.Test public void testValue () { java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ! ( comps . contains ( STRING_CONSTANT ) ) ) ) ; }
private void Commit () { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity () ) ) ; if ( vm != null ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getInPreview () ; org.ovirt.engine.ui.frontend.Frontend . RunAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm . getId () , snapshot . getId () ) , null , null ) ; } }
@ org.junit.After public void tearDown () { if ( ( client ) != null ) { try { client . executeCommand ( java.lang.String . format ( STRING_CONSTANT , remote ) , null , null , null ) ; } catch ( java.lang.Exception e ) {} try { client . disconnect () ; } catch ( java.lang.Exception e ) {} client = null ; } if ( ( local2 ) != null ) { if ( ! ( local2 . delete () ) ) {} local2 = null ; } }
public void refreshDetails ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getGlusterRebalanceStatus ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue . getReturnValue () ; if ( rebalanceStatusEntity != null ) { showStatus ( rebalanceStatusEntity ) ; } } } ) , volumeEntity . getClusterId () , volumeEntity . getId () ) ; }
public void setType ( org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type type ) { this . type = type ; getWidget () . setType ( type.alertType ) ; for ( org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type t : type . getDeclaringClass () . getEnumConstants () ) { icon . removeStyleName ( t.iconStyleName ) ; } icon . addStyleName ( type.iconStyleName ) ; }
protected void prepareMocks ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.mockito.Mockito . when ( cmd . getCluster () ) . thenReturn ( cluster ) ; org.mockito.Mockito . doReturn ( vds ) . when ( cmd ) . getVds () ; org.mockito.Mockito . doReturn ( status ) . when ( vds ) . getStatus () ; mockIsGlusterEnabled ( true ) ; }
private void mockDiskImageDao () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskImageList = new java.util.ArrayList <> () ; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; diskImage . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) ) ; diskImageList . add ( diskImage ) ; org.mockito.Mockito . when ( diskDao . getAllForVm ( vmId ) ) . thenReturn ( diskImageList ) ; }
private void initVersion () { if ( ! ( isVersionInit ) ) { isVersionInit = true ; for ( org.ovirt.engine.core.compat.Version item : getVersion () . getItems () ) { if ( item . equals ( getEntity () . getcompatibility_version () ) ) { getVersion () . setSelectedItem ( item ) ; break; } } } }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Disk disk ) { validateEnums ( org.ovirt.engine.api.model.Disk . class , disk ) ; if ( disk . isSetId () ) { return javax.ws.rs.core.Response . fromResponse ( attachDiskToVm ( disk ) ) . entity ( map ( lookupEntity ( asGuid ( disk . getId () ) ) ) ) . build () ; } else { validateDiskForCreation ( disk ) ; return performCreation ( addAction , getAddParameters ( map ( disk ) , disk ) , getEntityIdResolver ( disk . getName () ) ) ; } }
@ java.lang.Override public com.google.gwt.resources.client.ImageResource getValue ( T item ) { java.lang.String osTypeName = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getOsUniqueOsNames () . get ( extractor . extractOsType ( item ) ) ; com.google.gwt.resources.client.ResourcePrototype resource = org.ovirt.engine.ui.userportal.widget.table.column.VmImageColumn . getApplicationResourcesWithLookup () . getResource ( ( osTypeName + STRING_CONSTANT ) ) ; if ( ! ( resource instanceof com.google.gwt.resources.client.ImageResource ) ) { resource = org.ovirt.engine.ui.userportal.widget.table.column.VmImageColumn . getApplicationResourcesWithLookup () . otherSmallImage () ; } return ( ( com.google.gwt.resources.client.ImageResource ) ( resource ) ) ; }
private void Preview () { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity () ) ) ; if ( vm != null ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ( ( org.ovirt.engine.core.common.businessentities.Snapshot ) ( getSelectedItem () ) ) ; org.ovirt.engine.ui.frontend.Frontend . RunAction ( VdcActionType.TryBackToAllSnapshotsOfVm , new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters ( vm . getId () , snapshot . getId () ) , null , null ) ; } }
protected void setUpGetPayloadExpectations ( int times ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload () ; for ( int i = NUMBER_CONSTANT ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ i ] } , payload ) ; } }
private java.lang.String determineSpiceProxy () { if ( org.apache.commons.lang.StringUtils . isNotBlank ( getCachedVm () . getVmPoolSpiceProxy () ) ) { return getCachedVm () . getVmPoolSpiceProxy () ; } if ( org.apache.commons.lang.StringUtils . isNotBlank ( getCachedVm () . getVdsGroupSpiceProxy () ) ) { return getCachedVm () . getVdsGroupSpiceProxy () ; } java.lang.String globalSpiceProxy = getConfigValue ( ConfigValues.SpiceProxyDefault ) ; if ( org.apache.commons.lang.StringUtils . isNotBlank ( globalSpiceProxy ) ) { return globalSpiceProxy ; } return null ; }
@ java.lang.Override protected void init () { if ( ( org.ovirt.engine.core.bll.RunVmCommand . getVm () ) == null ) { return; } super . init () ; setStoragePoolId ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getStoragePoolId () ) ; loadPayloadDevice () ; needsHostDevices = hostDeviceManager . checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.RunVmCommand . getVm () ) ; loadVmInit () ; fetchVmDisksFromDb () ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; entity . setId ( GUIDS [ index ] ) ; entity . setvolumeFormat ( VolumeFormat.RAW ) ; entity . setImageStatus ( ImageStatus.OK ) ; entity . setVolumeType ( VolumeType.Sparse ) ; entity . setShareable ( false ) ; entity . setPropagateErrors ( PropagateErrors.On ) ; return org.ovirt.engine.api.restapi.resource.BackendStorageDomainDisksResourceTest . setUpStatisticalEntityExpectations ( entity ) ; }
@ org.junit.Test public void testRemove () { dao . remove ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.EXISTING_VOL_DIST_ID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = dao . getByClusterId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , volumes . size () ) ; org.junit.Assert . assertFalse ( volumes . contains ( existingDistVol ) ) ; org.junit.Assert . assertTrue ( volumes . contains ( existingReplVol ) ) ; }
public java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.Disk disk ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.Object > description = new java.util.TreeMap <> () ; description . put ( org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.DISK_ALIAS , disk . getDiskAlias () ) ; description . put ( org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.DISK_DESCRIPTION , ( ( disk . getDiskDescription () ) != null ? disk . getDiskDescription () : STRING_CONSTANT ) ) ; return org.ovirt.engine.core.utils.JsonHelper . mapToJson ( description , false ) ; }
private void checkVmNetworkIsSoleAssignedInterface ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , org.ovirt.engine.core.common.businessentities.network.Network . . . networks ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure = new java.util.ArrayList ( networks.length ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : networks ) { attachmentsToConfigure . add ( createNetworkAttachment ( nic . getName () , network ) ) ; } org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator validator = new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator ( attachmentsToConfigure , networkMap ) ; org.junit.Assert . assertThat ( validator . validateNetworkExclusiveOnNics () , matcher ) ; }
private void networkNotUsedByVmsTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { org.mockito.Mockito . when ( vmDao . getAllForNetwork ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( vms ) ; org.junit.Assert . assertThat ( validator . networkNotUsedByVms () , matcher ) ; }
@ org.junit.Test public void onSuccessAudit () { mockExecutor ( true ) ; command . executeCommand () ; org.mockito.Mockito . verify ( auditLogDirector , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . log ( org.mockito.Matchers . any ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.AuditLogType . class ) ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Watchdog model , org.ovirt.engine.core.common.businessentities.VmWatchdog entity ) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters () ; parameters . setAction ( org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( model . getAction () ) ) ; parameters . setModel ( org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( model . getModel () ) ) ; parameters . setId ( templateId ) ; parameters . setVm ( false ) ; return parameters ; }
@ org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond () { org.mockito.Mockito . when ( getQueryParameters () . getId () ) . thenReturn ( iscsiBondId ) ; getQuery () . executeQueryCommand () ; org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery () . getQueryReturnValue () . getReturnValue () ; org.junit.Assert . assertNull ( result ) ; }
private void handleError ( org.ovirt.engine.core.common.businessentities.VDSStatus lastStatus , final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue ) { if ( ! ( ( ( org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue ) ( vdsReturnValue . getReturnValue () ) ) . getIsSkipped () ) ) { org.ovirt.engine.core.bll.FenceVdsBaseCommand . setSucceeded ( false ) ; org.ovirt.engine.core.bll.FenceVdsBaseCommand.log . errorFormat ( STRING_CONSTANT , org.ovirt.engine.core.bll.FenceVdsBaseCommand . getParameters () . getAction () . name () . toLowerCase () ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.VDS_FENCING_OPERATION_FAILED ) ; } else { setStatus ( lastStatus ) ; } }
protected void addVmPayload () { org.ovirt.engine.core.common.businessentities.VmPayload payload = org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getVmPayload () ; if ( payload != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getVmId () ) , VmDeviceGeneralType.DISK , payload . getDeviceType () , payload . getSpecParams () , true , true , null , false ) ; } }
@ org.junit.Test public void testNoStringSubstitutionWithList () { org.ovirt.engine.core.common.interfaces.ErrorTranslator et = new org.ovirt.engine.core.utils.ErrorTranslatorImpl ( org.ovirt.engine.core.utils.ErrorTranslatorTest.FILENAME ) ; java.util.List < java.lang.String > error = et . translateErrorText ( java.util.Arrays . asList ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_NO_REPLACEMENT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , error . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , error . get ( NUMBER_CONSTANT ) ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( int size ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; diskImage . setSizeInGigabytes ( size ) ; diskImage . setActualSize ( size ) ; diskImage . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; diskImage . setImageId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; diskImage . setStorageIds ( new java.util.ArrayList ( java.util.Arrays . asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return diskImage ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( java.util.Collections . emptyList () ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( T obj ) { return createIdParameterMapper ( obj . getId () ) . addValue ( STRING_CONSTANT , getQosType () ) . addValue ( STRING_CONSTANT , obj . getName () ) . addValue ( STRING_CONSTANT , obj . getDescription () ) . addValue ( STRING_CONSTANT , obj . getStoragePoolId () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase login ( org.ovirt.engine.core.common.action.LoginUserParameters parameters ) { switch ( parameters . getActionType () ) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase < > command = org.ovirt.engine.core.bll.CommandsFactory . createCommand ( parameters . getActionType () , parameters ) ; return command . executeAction () ; default: return getErrorCommandReturnValue ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; } }
@ org.junit.Test public void shouldHandleEmptyHostList () { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filteredHost = policyUnit . filter ( cluster , new java.util.ArrayList <> () , vm , null , org.mockito.Mockito . mock ( org.ovirt.engine.core.common.scheduling.PerHostMessages . class ) ) ; org.hamcrest.MatcherAssert . assertThat ( filteredHost , org.hamcrest.CoreMatchers . is ( org.hamcrest.Matchers . empty () ) ) ; org.hamcrest.MatcherAssert . assertThat ( messages () , org.hamcrest.CoreMatchers . is ( org.hamcrest.Matchers . empty () ) ) ; }
@ java.lang.Override protected void executeVDSCommand () { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData proxyData = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand . getCurrentIrsProxyData () ; proxyData . clearPoolTimers () ; proxyData . clearCache () ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log . error ( ( STRING_CONSTANT + ( org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand . getParameters () . getStoragePoolId () ) ) , e ) ; } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand . getVDSReturnValue () . setSucceeded ( true ) ; }
public static void initOsNames () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . initOsIds () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetOsNames ) , callback ) ; }
@ java.lang.Override public void oSType_SelectedItemChanged () { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel () . getTemplate () . getSelectedItem () ; java.lang.Integer osType = getModel () . getOSType () . getSelectedItem () ; if ( ( template != null ) && ( osType != null ) ) { updateVirtioScsiEnabled ( template . getId () , osType ) ; } }
private void fastForwardDisksToActiveSnapshot () { if ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getParameters () . getDisks () ) != null ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImagesToUpdate = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . imagesSubtract ( getDiskImagesForVm () , org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getParameters () . getDisks () ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImagesToUpdate ) { org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getImageDao () . updateImageVmSnapshotId ( diskImage . getImageId () , newActiveSnapshotId ) ; } } }
@ org.junit.Test public void testGetNetworkDevices ( ) throws java.lang.Exception { java.util.List < java.lang.String > networkDevices = OsRepositoryImpl.INSTANCE . getNetworkDevices ( NUMBER_CONSTANT , null ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , networkDevices . size () ) ; for ( java.lang.String device : org.ovirt.engine.core.utils.OsRepositoryImplTest.NETWORK_DEVICES . split ( STRING_CONSTANT ) ) { org.junit.Assert . assertTrue ( networkDevices . contains ( device ) ) ; } }
@ org.junit.Test public void testAddExistingBlockDomainWhenVgInfoReturnsEmptyLunList () { org.mockito.Mockito . doReturn ( java.util.Collections . emptyList () ) . when ( command ) . getLUNsFromVgInfo () ; org.junit.Assert . assertFalse ( STRING_CONSTANT , command . canAddDomain () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_PROBLEM_WITH_CANDIDATE_INFO . toString () ) ) ; }
private void updateActionAvailability () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = ( ( getSelectedItems () ) != null ) ? getSelectedItems () : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > () ; getRegisterCommand () . setIsExecutionAllowed ( ( ( ( disks . size () ) > NUMBER_CONSTANT ) && ( ( getEntity () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) ) ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertFalse ( model . isSetVm () ) ; assertTrue ( model . isSparse () ) ; assertTrue ( model . isPropagateErrors () ) ; assertEquals ( model . getStorageDomain () . getId () , org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.STORAGE_DOMAIN_ID . toString () ) ; }
public java.util.Map < java.lang.String , java.lang.String > convertToStatusList () { java.util.HashMap < java.lang.String , java.lang.String > result = new java.util.HashMap < java.lang.String , java.lang.String > () ; for ( java.util.Map < java.lang.String , java.lang.Object > st : this . mStatusList ) { java.lang.String status = st . get ( STRING_CONSTANT ) . toString () ; java.lang.String id = st . get ( STRING_CONSTANT ) . toString () ; result . put ( id , status ) ; } return result ; }
@ org.junit.Before public void setup () { org.mockito.Mockito . when ( tagDao . getAllForParent ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . emptyList () ) ; org.mockito.Mockito . doReturn ( tagDao ) . when ( tagsDirector ) . getTagDao () ; org.mockito.Mockito . doNothing () . when ( tagsDirector ) . updateTagInBackend ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.Tags . class ) ) ; tagsDirector . init () ; }
private void SleepOnReboot () { int sleepTimeInSec = org.ovirt.engine.core.common.config.Config . < java.lang.Integer > GetValue ( ConfigValues.ServerRebootTimeout ) ; log . infoFormat ( STRING_CONSTANT , sleepTimeInSec ) ; org.ovirt.engine.core.utils.ThreadUtils . sleep ( ( sleepTimeInSec * NUMBER_CONSTANT ) ) ; org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.SetVdsStatus , new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters ( org.ovirt.engine.core.bll.VdsCommand . getVdsId () , org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive ) ) ; }
private java.lang.String getSuggestedDiskName ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Set < java.lang.String > aliases = createDiskAliasesList ( vm ) ; java.lang.String suggestedDiskName ; int i = NUMBER_CONSTANT ; do { i ++ ; suggestedDiskName = org.ovirt.engine.core.bll.ImagesHandler . getDefaultDiskAlias ( vm . getName () , java.lang.Integer . toString ( i ) ) ; } while ( aliases . contains ( suggestedDiskName ) ) ; return suggestedDiskName ; }
void mockGetCaCertificate () { org.mockito.Mockito . doReturn ( caCertificateReturnValue ) . when ( backend ) . runInternalQuery ( org.mockito.Matchers . eq ( VdcQueryType.GetCACertificate ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( caCertificateReturnValue ) . getSucceeded () ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.CA_CERTIFICATE ) . when ( caCertificateReturnValue ) . getReturnValue () ; }
@ java.lang.Override protected void readOsSection ( org.ovirt.engine.core.compat.backendcompat.XmlNode section ) { _vmTemplate . setId ( new org.ovirt.engine.core.compat.Guid ( section.Attributes . get ( STRING_CONSTANT ) . getValue () ) ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = section . SelectSingleNode ( STRING_CONSTANT ) ; if ( node != null ) { _vmTemplate . setOsId ( osRepository . getOsIdByUniqueName ( node.InnerText ) ) ; } }
private org.ovirt.engine.core.compat.Guid getQuotaId () { if ( ( ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () ) != null ) && ( ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) == ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () . getDiskStorageType () ) ) ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () ) ) . getQuotaId () ; } return null ; }
@ org.junit.Test public void getSpecParams () { org.ovirt.engine.core.common.action.WatchdogParameters params = new org.ovirt.engine.core.common.action.WatchdogParameters () ; params . setAction ( VmWatchdogAction.RESET ) ; params . setModel ( vmWatchdogType ) ; org.ovirt.engine.core.bll.UpdateWatchdogCommand command = new org.ovirt.engine.core.bll.UpdateWatchdogCommand ( params , null ) ; java.util.HashMap < java.lang.String , java.lang.Object > specParams = command . getSpecParams () ; org.junit.Assert . assertNotNull ( specParams ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , specParams . get ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , specParams . get ( STRING_CONSTANT ) ) ; }
public void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList <> ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getDetachCommand () ) ) { detach () ; } if ( STRING_CONSTANT . equals ( command . getName () ) ) { onDetach () ; } if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } }
void initListBoxEditors () { storagePoolTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.BooleanRenderer ( org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.DataCenterPopupView.constants . storageTypeLocal () , org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.DataCenterPopupView.constants . storageTypeShared () ) ) ; versionEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.compat.Version > () { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.compat.Version object ) { return object . getValue () ; } } ) ; quotaEnforceTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer () ) ; macPoolListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.MacPool > () ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { addVmImagesAndSnapshots () ; updateSnapshotsFromExport () ; if ( useCopyImages ) { moveOrCopyAllImageGroups () ; } org.ovirt.engine.core.bll.utils.VmDeviceUtils . addImportedDevices ( getVm () . getStaticData () , getParameters () . isImportAsNewEntity () ) ; if ( getParameters () . isImportAsNewEntity () ) { getParameters () . setVm ( getVm () ) ; setVmId ( getVm () . getId () ) ; } return null ; }
@ org.junit.Test public void clusterWithVirtGlusterServicesNotAllowed () { createCommandWithVirtGlusterEnabled () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; mcr . mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; cpuExists () ; validateFailedWithReason ( EngineMessage.CLUSTER_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ; }
@ java.lang.Override public void dataCenterWithClusterSelectedItemChanged () { super . dataCenterWithClusterSelectedItemChanged () ; java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryType > queryTypeList = new java.util.ArrayList <> () ; queryTypeList . add ( VdcQueryType.GetVmTemplatesWithPermittedAction ) ; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters () ; getEntitiesWithPermittedActionParameters . setActionGroup ( actionGroup ) ; java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > parametersList = new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.queries.VdcQueryParametersBase [] { getEntitiesWithPermittedActionParameters } ) ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleQueries ( queryTypeList , parametersList , this , getModel () ) ; }
@ java.lang.Override public boolean isDisplayNetworkAffected ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < > op2 ) { if ( ( op1 != null ) && ( op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel ) ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel network : ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel ) ( op1 ) ) . getNetworks () ) { if ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK . isDisplayNetworkAffected ( network , null ) ) { return true ; } } } return false ; }
@ org.junit.Before public void setUp () { storagePool = cmd . getParameters () . getStoragePool () ; cmd . init () ; org.mockito.Mockito . when ( storagePoolDao . get ( storagePool . getId () ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito . doReturn ( storagePoolIsoMapDao ) . when ( cmd ) . getStoragePoolIsoMapDao () ; org.mockito.Mockito . when ( storagePoolIsoMapDao . getAllForStorage ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . emptyList () ) ; }
@ org.junit.Test public void testCheckGlusterQuorumWithVolumeDown () { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster ( true ) ; org.mockito.Mockito . doReturn ( getGlusterVolumes ( GlusterStatus.DOWN ) ) . when ( volumeDao ) . getByClusterId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.CLUSTER_ID ) ; java.lang.Iterable < org.ovirt.engine.core.compat.Guid > hostIds = java.util.Arrays . asList ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , hostValidator . checkGlusterQuorum ( cluster , hostIds ) . isEmpty () ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { getVmDisks () . clear () ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { if ( ( disk . getDiskStorageType () ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN ) ) { continue; } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; getVmDisks () . add ( diskImage ) ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > allClusters = returnValue . getReturnValue () ; clusterArchitecturesInDataCenters = new java.util.HashMap <> () ; for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : allClusters ) { if ( ( cluster . supportsVirtService () ) && ( ( cluster . getArchitecture () ) != null ) ) { addArchitecture ( cluster . getStoragePoolId () , cluster . getArchitecture () ) ; } } }
public void getGlusterHook ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , boolean includeServerHooks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( hookId , includeServerHooks ) , aQuery ) ; }
@ java.lang.Override public void updateInterestedOps ( ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ( outbox . isEmpty () ) && ( ( ( this . nioEngine ) == null ) || ( ! ( this . nioEngine . handshakeInProgress () ) ) ) ) { getSelectionKey () . interestOps ( java.nio.channels.SelectionKey.OP_READ ) ; } else { getSelectionKey () . interestOps ( ( ( java.nio.channels.SelectionKey.OP_READ ) | ( java.nio.channels.SelectionKey.OP_WRITE ) ) ) ; } }
public boolean getIsDiskHotPlugSupported () { org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; boolean isVmStatusApplicableForHotPlug = ( vm != null ) && ( ( ( ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ) || ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) || ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Suspended ) ) ) ; return ( privateIsDiskHotPlugSupported ) && isVmStatusApplicableForHotPlug ; }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand ( org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType , org.ovirt.engine.core.common.vdscommands.VDSParametersBase parameters ) throws org.ovirt.engine.core.common.errors.EngineException { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = super . runVdsCommand ( commandType , parameters ) ; if ( ! ( returnValue . getSucceeded () ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( returnValue . getVdsError () . getCode () , returnValue . getVdsError () . getMessage () ) ; } return returnValue ; }
@ org.junit.Test public void testBootFromNetworkNoNetwork () { org.ovirt.engine.core.dao.network.VmNicDao dao = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.network.VmNicDao . class ) ; org.mockito.Mockito . doReturn ( dao ) . when ( runVmValidator ) . getVmNicDao () ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setBootSequence ( BootSequence.N ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( vm , new java.util.ArrayList <> () ) , false , EngineMessage.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK ) ; }
private void addVmDeviceType ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.VmDeviceType [] values ) { version . setVmDeviceTypes ( new org.ovirt.engine.api.model.VmDeviceTypes () ) ; for ( org.ovirt.engine.api.model.VmDeviceType type : values ) { version . getVmDeviceTypes () . getVmDeviceTypes () . add ( type . value () ) ; } }
@ org.junit.Test public void testExecuteCommandFailsWithServerIdForStart () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START ) , null ) ) ; setUpMockUpForStart () ; mockBackend ( false , EngineError.GlusterServicesActionFailed , GlusterServiceStatus.STOPPED ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( serverServiceDao , org.mockito.Mockito . never () ) . updateByServerIdAndServiceType ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_SERVICE_START_FAILED , cmd . getAuditLogTypeValue () ) ; }
protected boolean isDomainAttached ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( storageDomain . getStoragePoolId () ) == null ) { return false ; } org.ovirt.engine.core.compat.Guid storageDomainId = storageDomain . getId () ; org.ovirt.engine.core.compat.Guid storagePoolId = storageDomain . getStoragePoolId () ; return ( org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand . getDbFacade () . getStoragePoolIsoMapDao () . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( storageDomainId , storagePoolId ) ) ) != null ; }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( NUMBER_CONSTANT , false , false , false , false ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , true , true , true , true ) ; setUpClusterExpectations ( GUIDS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateNetworkOnCluster , org.ovirt.engine.core.common.action.NetworkClusterParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , true , true ) ) ; verifyUpdate ( resource . update ( getModel ( NUMBER_CONSTANT ) ) ) ; }
@ org.junit.Test public void testDoChangeWhenMacPoolsChanged ( ) throws java.lang.Exception { java.lang.String macToMigrate = STRING_CONSTANT ; org.ovirt.engine.core.common.businessentities.Cluster oldCluster = createCluster () ; org.ovirt.engine.core.common.businessentities.Cluster newCluster = createCluster () ; initForMovingMacsBetweenClusters ( oldCluster , newCluster , macToMigrate ) ; underTest . moveMacsToAnotherMacPoolIfNeeded () ; org.mockito.Mockito . verify ( moveMacs ) . migrateMacsToAnotherMacPool ( oldCluster . getMacPoolId () , newCluster . getMacPoolId () , java.util.Collections . singletonList ( macToMigrate ) , underTest . getContext () ) ; }
private static org.ovirt.engine.core.common.businessentities.VM createVM () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setName ( STRING_CONSTANT ) ; vm . setOrigin ( OriginType.OVIRT ) ; vm . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; vm . setVmDescription ( STRING_CONSTANT ) ; vm . setTimeZone ( STRING_CONSTANT ) ; vm . setDbGeneration ( NUMBER_CONSTANT ) ; vm . setSingleQxlPci ( false ) ; vm . setClusterArch ( ArchitectureType.x86_64 ) ; org.ovirt.engine.core.utils.ovf.OvfManagerTest . initInterfaces ( vm ) ; return vm ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareLocalStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { final org.ovirt.engine.core.common.businessentities.StorageDomain localDomain = createDataStorageDomain ( status , STRING_CONSTANT , LOCAL_SD_ID ) ; localDomain . setStorageType ( StorageType.LOCALFS ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . singletonList ( localDomain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; return localDomain ; }
@ java.lang.Override public final java.lang.String [] getCompletion ( java.lang.String wordPart ) { java.lang.String [] retval = new java.lang.String [ NUMBER_CONSTANT ] ; if ( mVerbCompletion . containsKey ( wordPart . toUpperCase () ) ) { java.util.List < java.lang.String > curList = mVerbCompletion . get ( wordPart . toUpperCase () ) ; retval = curList . toArray ( new java.lang.String [ curList . size () ] ) ; } return retval ; }
@ org.junit.Test public void testValues () { java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ( comps . contains ( STRING_CONSTANT ) ) || ( comps . contains ( STRING_CONSTANT ) ) ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; }
private void removeVmStatelessImages () { if ( getSnapshotDAO () . exists ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getVmId () , SnapshotType.STATELESS ) ) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log . infoFormat ( STRING_CONSTANT , org.ovirt.engine.core.bll.ProcessDownVmCommand . getVmId () ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getVmId () ) , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContexForTasks ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getExecutionContext () , org.ovirt.engine.core.bll.ProcessDownVmCommand . getLock () ) ) ; } }
@ org.junit.After public void tearDown ( ) throws java.lang.Exception { org.mockito.Mockito . verify ( queryStartEvent , org.mockito.Mockito . atLeastOnce () ) . raise ( org.ovirt.engine.ui.frontend.Frontend . class , EventArgs.Empty ) ; org.mockito.Mockito . verify ( queryCompleteEvent , org.mockito.Mockito . atLeastOnce () ) . raise ( org.ovirt.engine.ui.frontend.Frontend . class , EventArgs.Empty ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , frontend . getCurrentContext () , STRING_CONSTANT ) ; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; image . setSize ( org.ovirt.engine.core.bll.utils.VmUtils . getSnapshotMemorySizeInBytes ( vm ) ) ; image . setVolumeType ( org.ovirt.engine.core.bll.memory.MemoryUtils . storageTypeToMemoryVolumeType ( storageType ) ) ; image . setvolumeFormat ( VolumeFormat.RAW ) ; return image ; }
protected java.util.Set < java.lang.String > getExcludeUsers () { java.util.Set < java.lang.String > excludeUsers = new java.util.HashSet < java.lang.String > () ; if ( ( getExcludeItems () ) != null ) { for ( org.ovirt.engine.core.common.businessentities.aaa.DbUser item : getExcludeItems () ) { excludeUsers . add ( item . getExternalId () ) ; } } return excludeUsers ; }
private void mockCluster () { cluster = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.Cluster . class ) ; org.mockito.Mockito . doReturn ( clusterId ) . when ( cluster ) . getId () ; org.mockito.Mockito . doReturn ( storagePoolId ) . when ( cluster ) . getStoragePoolId () ; org.mockito.Mockito . doReturn ( ArchitectureType.x86_64 ) . when ( cluster ) . getArchitecture () ; }
@ org.junit.Test public void validateVmShareableDisk () { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage ( diskImageGroupId , diskImageId ) ; diskImage . setShareable ( true ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED . toString () ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VM mockVmStatusUp () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setStatus ( VMStatus.Up ) ; vm . setVmOs ( NUMBER_CONSTANT ) ; vm . setId ( vmId ) ; vm . setRunOnVds ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . doReturn ( vmDao ) . when ( command ) . getVmDao () ; mockVMDao ( vm ) ; return vm ; }
@ org.junit.Test public void getVdsWithVm () { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b . setVds ( vds ) ; b . setVdsId ( vdsId ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 , v . getId () ) ; }
private boolean updateIsoListFromVDSM ( org.ovirt.engine.core.compat.Guid repoStoragePoolId , org.ovirt.engine.core.compat.Guid repoStorageDomainId , java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > fileStats ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed = new org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed () { @ java.lang.Override public void onFileListRefreshed ( org.ovirt.engine.core.compat.Guid poolId , java.util.Set < java.lang.String > isoList ) { org.ovirt.engine.core.bll.VmHandler . refreshVmsToolsVersion ( poolId , isoList ) ; } } ; return refreshVdsmFileList ( repoStoragePoolId , repoStorageDomainId , ImageFileType.ISO , fileStats , fileListRefreshed ) ; }
@ org.junit.Test public void testIncompleteImport ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; try { resource . doImport ( new org.ovirt.engine.api.model.Action () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
java.lang.String resolveMessage ( java.lang.String message , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ) { java.lang.String returnValue = message ; if ( logable != null ) { java.util.Map < java.lang.String , java.lang.String > map = getAvailableValues ( message , logable ) ; returnValue = resolveMessage ( message , map ) ; } return returnValue ; }
@ org.junit.Test public void nameIsAlreadyUsed () { org.mockito.Mockito . when ( clusterDao . getByName ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . anyBoolean () ) ) . thenReturn ( java.util.Collections . singletonList ( org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.Cluster . class ) ) ) ; org.junit.Assert . assertThat ( validator . nameNotUsed () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.CLUSTER_CANNOT_DO_ACTION_NAME_IN_USE ) ) ; }
private static void nonOperationalPoolTreatment ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { if ( ! ( org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler . getAllRunningVdssInPool ( pool ) . isEmpty () ) ) { org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler.log . info ( ( STRING_CONSTANT + STRING_CONSTANT ) , pool . getName () , pool . getId () ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( ActionType.SetStoragePoolStatus , new org.ovirt.engine.core.common.action.SetStoragePoolStatusParameters ( pool . getId () , org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NonResponsive , org.ovirt.engine.core.common.AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL ) ) ; org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler.nonOperationalPools . remove ( pool . getId () ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > scores = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { scores . add ( new org.ovirt.engine.core.common.utils.Pair ( vds . getId () , calcEvenGuestDistributionScore ( vds , parameters ) ) ) ; } return scores ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_ENABLE ) ; }
@ java.lang.Override public void compensate () { revertTask () ; org.ovirt.engine.core.common.vdscommands.VDSCommandType revertCommandType = getRevertVDSCommandType () ; if ( revertCommandType != null ) { addTask ( org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( getRevertVDSCommandType () , getRevertVDSParameters () ) , true ) ; } }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.List < > ) ( source ) ) ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetRoleActionGroupsByRoleId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , org.ovirt.engine.api.restapi.resource.BackendPermitsResourceTest . setUpActionGroups () , failure ) ; }
@ java.lang.Override protected boolean canDoAction () { if ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . isImagesAlreadyOnTarget () ) { if ( ! ( validateUnregisteredEntity ( vmFromConfiguration , ovfEntityData ) ) ) { return false ; } setImagesWithStoragePoolId ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . getStorageDomain () . getStoragePoolId () , org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . getVm () . getImages () ) ; } return super . canDoAction () ; }
@ org.junit.Test public void testAddStorageDomainNoHost ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.StorageDomain model = org.ovirt.engine.api.restapi.resource.BackendStorageDomainsResourceTest . getModel ( NUMBER_CONSTANT ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.VM_ID } , null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
public void updataMaxVmsInPool () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxVmsInPool ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase ) ( target ) ) ; behavior . setMaxVmsInPool ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; behavior . updateMaxNumOfVmCpus () ; } } ) ) ; }
@ org.junit.Test public void isConnWithSameDetailsExistNoConnections () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( STRING_CONSTANT , StorageType.NFS , NfsVersion.V4 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList <> () ; org.mockito.Mockito . when ( storageConnDao . getAllForStorage ( newNFSConnection . getconnection () ) ) . thenReturn ( connections ) ; boolean isExists = command . isConnWithSameDetailsExists ( newNFSConnection , null ) ; org.junit.Assert . assertFalse ( isExists ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrash ( ) throws java.lang.Exception { java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpVnicProfilesQueryExpectations ( t ) ; javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest . setUpUriExpectations ( null ) ; collection . setUriInfo ( uriInfo ) ; try { org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest . getCollection () ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
@ org.junit.Test public void validateVmInPreview () { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito . when ( snapshotsValidator . vmNotInPreview ( org.mockito.Matchers . any () ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
private void addVmStatistics () { org.ovirt.engine.core.common.businessentities.VmStatistics stats = new org.ovirt.engine.core.common.businessentities.VmStatistics () ; stats . setId ( getVmId () ) ; org.ovirt.engine.core.bll.ImportVmCommandBase . getVmStatisticsDao () . save ( stats ) ; org.ovirt.engine.core.bll.ImportVmCommandBase . getCompensationContext () . snapshotNewEntity ( stats ) ; org.ovirt.engine.core.bll.ImportVmCommandBase . getCompensationContext () . stateChanged () ; }
@ java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call () { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log . warnFormat ( logMessage ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( mCurrentVdsId ) ; logable . setStorageDomainId ( masterDomainId ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( logable , AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC ) ; return org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . getEventListener () . masterDomainNotOperational ( masterDomainId , storagePoolId , false ) ; }
private void queryNetworks () { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; asyncQuery . setModel ( this ) ; asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { allNetworks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; queryInterfaces () ; } } ; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getClusterNetworkList ( asyncQuery , vds . getVdsGroupId () ) ; }
protected org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice () { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand . getVmId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , null , true , org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand . getParameters () . isPlugUnPlug () , org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand . getParameters () . isReadOnly () , STRING_CONSTANT , null , org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand . getParameters () . getSnapshotId () , null ) ; }
private void setUpUdpateVm ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUpGetBallooningExpectations () ; setUpGetGraphicsExpectations ( NUMBER_CONSTANT ) ; setUpGetConsoleExpectations ( NUMBER_CONSTANT ) ; setUpGetVmOvfExpectations ( NUMBER_CONSTANT ) ; setUpGetVirtioScsiExpectations ( NUMBER_CONSTANT ) ; setUpGetSoundcardExpectations ( NUMBER_CONSTANT ) ; setUpGetRngDeviceExpectations ( NUMBER_CONSTANT ) ; setUpGetGraphicsExpectations ( NUMBER_CONSTANT ) ; }
private org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator initValidator () { org.ovirt.engine.core.common.businessentities.network.Network network = addNewNetworkToDaoMock () ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createNic ( HostSetupNetworksValidator.VAR_INTERFACE_NAME ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment ( network , vdsNetworkInterface , null ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder () . setParams ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder () . addNetworkAttachments ( networkAttachment ) ) . addNetworks ( network ) . addExistingInterfaces ( vdsNetworkInterface ) . build () ; return validator ; }
private void interfaceHasSiblingVlanInterfaces ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( siblingVlanInterfaces . isEmpty () ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllSiblingVlanInterfaces , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
public java.util.Map getVmStats ( java.lang.String uuid ) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost () ; java.util.Map resultMap = getDoneStatus () ; java.util.List statusList = new java.util.ArrayList () ; org.ovirt.vdsmfake.domain.VM vm = host . getRunningVMs () . get ( uuid ) ; if ( vm != null ) { statusList . add ( fillVmStatsMap ( vm ) ) ; } resultMap . put ( STRING_CONSTANT , statusList ) ; utils . getLatency () ; return resultMap ; }
@ org.junit.Test public void encodeWhenNonAsciiAliasIsTruncated ( ) throws java.io.IOException { java.lang.String nonAsciiDiskAlias = STRING_CONSTANT ; disk . setDiskAlias ( nonAsciiDiskAlias ) ; disk . setDiskDescription ( STRING_CONSTANT ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( nonAsciiDiskAlias . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ) , generateEncodingJsonEntry ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters ) { java.util.Collections . sort ( dataCenters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; getDataCenter () . setItems ( dataCenters ) ; getDataCenter () . setIsEmpty ( dataCenters . isEmpty () ) ; updateControlsAvailability () ; stopProgress () ; }
@ org.junit.Test public void testAddExistingBlockDomainSuccessfully () { org.mockito.Mockito . when ( command . getLUNsFromVgInfo ( parameters . getStorageDomain () . getStorage () ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest . getLUNs () ) ; command . executeCommand () ; org.junit.Assert . assertTrue ( command . getReturnValue () . getSucceeded () ) ; }
protected void initProviderList () { startProgress ( null ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllNetworkProviders ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { stopProgress () ; java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ; providers . add ( NUMBER_CONSTANT , null ) ; getProviders () . setItems ( providers ) ; } } ) ) ; }
protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) { super . setVmId ( parameters . getContainerId () ) ; if ( ( parameters . getStoragePoolId () ) != null ) { setStoragePoolId ( parameters . getStoragePoolId () ) ; } else if ( ( ( getDiskImage () ) != null ) && ( ( getDiskImage () . getStoragePoolId () ) != null ) ) { setStoragePoolId ( getDiskImage () . getStoragePoolId () ) ; } }
public org.ovirt.vdsmfake.domain.DataCenter getDataCenterById ( java.lang.String id ) { org.ovirt.vdsmfake.domain.DataCenter dataCenter = null ; if ( dataCenterMap . containsKey ( id ) ) { return dataCenterMap . get ( id ) ; } dataCenter = ( ( org.ovirt.vdsmfake.domain.DataCenter ) ( loadObject ( org.ovirt.vdsmfake.domain.DataCenter . class , id ) ) ) ; if ( dataCenter == null ) { dataCenter = new org.ovirt.vdsmfake.domain.DataCenter () ; dataCenter . setId ( id ) ; } else { org.ovirt.vdsmfake.domain.VdsmManager.log . info ( STRING_CONSTANT , id ) ; } dataCenterMap . put ( id , dataCenter ) ; return dataCenter ; }
@ java.lang.Override public org.ovirt.engine.ui.common.widget.HasUiCommandClickHandlers addFooterButton ( java.lang.String label , java.lang.String uniqueId ) { org.ovirt.engine.ui.common.widget.AbstractUiCommandButton button = createCommandButton ( label , uniqueId ) ; org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView . asWidget () . addFooterButton ( button ) ; button . asWidget () . getElement () . setId ( org.ovirt.engine.ui.common.utils.ElementIdUtils . createElementId ( elementId , uniqueId ) ) ; return button ; }
@ org.junit.Test public void validateFailsOnPassDiscardSupport () { createParameters () ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.ovirt.engine.core.common.businessentities.StorageDomain srcSd = initStorageDomain ( srcStorageId ) ; srcSd . setStatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstSd = initStorageDomain ( dstStorageId ) ; dstSd . setStatus ( StorageDomainStatus.Active ) ; org.mockito.Mockito . when ( diskVmElementValidator . isPassDiscardSupported ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.HostNic postPopulate ( org.ovirt.engine.api.model.HostNic model ) { org.ovirt.engine.api.model.HostNic hostNIC = super . postPopulate ( model ) ; org.ovirt.engine.api.model.Qos qos = hostNIC . getQos () ; qos . setType ( QosType.HOSTNETWORK ) ; qos . setName ( null ) ; qos . setDataCenter ( null ) ; return hostNIC ; }
private void assertNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment , org.ovirt.engine.core.compat.Guid attachmentId , org.ovirt.engine.core.compat.Guid networkId , org.ovirt.engine.core.compat.Guid nicId ) { org.junit.Assert . assertThat ( STRING_CONSTANT , networkAttachment . getId () , org.hamcrest.CoreMatchers . is ( attachmentId ) ) ; org.junit.Assert . assertThat ( STRING_CONSTANT , networkAttachment . getNetworkId () , org.hamcrest.CoreMatchers . equalTo ( networkId ) ) ; org.junit.Assert . assertThat ( STRING_CONSTANT , networkAttachment . getNicId () , org.hamcrest.CoreMatchers . equalTo ( nicId ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior behavior = this ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; behavior . postInitTemplate ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterTemplatesByArchitecture ( templates , dataCenterWithCluster . getCluster () . getArchitecture () ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StatsInfo > getStatsInfo () { org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statInfo = new org.ovirt.engine.core.common.businessentities.gluster.StatsInfo () ; statInfo . setDuration ( NUMBER_CONSTANT ) ; statInfo . setDurationFormatted ( new org.ovirt.engine.core.common.utils.Pair ( new java.lang.Integer ( NUMBER_CONSTANT ) , java.util.concurrent.TimeUnit.SECONDS . toString () ) ) ; statInfo . setTotalRead ( NUMBER_CONSTANT ) ; statInfo . setTotalWrite ( NUMBER_CONSTANT ) ; statInfo . setBlockStats ( getBlockStats () ) ; statInfo . setFopStats ( getFopStats () ) ; return java.util.Collections . singletonList ( statInfo ) ; }
private java.lang.String createSpiceInvocationInfo () { org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker rowMaker = new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants . auto () , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants . spiceInvokeAuto () ) ; rowMaker . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants . nativeClient () , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants . consoleInvokeNative () ) ; rowMaker . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants . spiceHtml5 () , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants . spiceInvokeHtml5 () ) ; return rowMaker . toString () ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNicSyncedWithNetwork ( java.lang.String nicName , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createVdsInterface ( org.ovirt.engine.core.compat.Guid . newGuid () , nicName , false , null , null , network . getVlanId () , network . getName () , network . isVmNetwork () , network . getAddr () , false , null ) ; return nic ; }
public static void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
@ org.junit.Test public void testAddIdSuppliedButNoName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setId ( STRING_CONSTANT ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , null ) ; setUpGetClusterExpectations ( NUMBER_CONSTANT ) ; setUpGetNetworksByDataCenterExpectations ( NUMBER_CONSTANT , null ) ; setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpActionExpectations ( VdcActionType.AttachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , true , true ) ; collection . add ( model ) ; }
public void numOfSocketChanged () { int numOfSockets = extractIntFromListModel ( getModel () . getNumOfSockets () ) ; int totalCpuCores = getTotalCpuCores () ; if ( numOfSockets == NUMBER_CONSTANT ) { return; } getModel () . getCoresPerSocket () . setSelectedItem ( ( totalCpuCores / numOfSockets ) ) ; }
@ org.junit.Before public void setUp () { initializeOsRepository ( DiskInterface.VirtIO ) ; disk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest . createDiskImage () ; disk . setDiskAlias ( STRING_CONSTANT ) ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk , vmDeviceUtils ) ) ; org.mockito.Mockito . doReturn ( vmDao ) . when ( validator ) . getVmDao () ; }
@ org.junit.Test public void removeAll () { java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > interfaces = java.util.Arrays . asList ( createNewInterface () , createNewInterface () ) ; org.mockito.Mockito . when ( vmNetworkInterfaceDAO . getAllForVm ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( interfaces ) ; vmInterfaceManager . removeAll ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces ) { verifyRemoveAllDelegatedCorrectly ( iface ) ; } }
public static org.ovirt.engine.core.compat.RpmVersion getOvirtHostOsVersion ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return new org.ovirt.engine.core.compat.RpmVersion ( vds . getHostOs () , STRING_CONSTANT , true ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.VdsHandler.log . error ( STRING_CONSTANT , vds . getId () , vds . getName () , vds . getHostOs () , e . getMessage () ) ; org.ovirt.engine.core.bll.VdsHandler.log . debug ( STRING_CONSTANT , e ) ; } return null ; }
@ org.junit.Test public void isCpuPinningValidWithoutPinnedHost () { org.ovirt.engine.core.bll.VmManagementCommandBase < org.ovirt.engine.core.common.action.VmManagementParametersBase > test = new org.ovirt.engine.core.bll.VmManagementCommandBase ( org.ovirt.engine.core.compat.Guid.Empty ) ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic () ; vmStatic . setNumOfSockets ( NUMBER_CONSTANT ) ; vmStatic . setCpuPerSocket ( NUMBER_CONSTANT ) ; vmStatic . setDedicatedVmForVdsList ( new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > () ) ; org.junit.Assert . assertFalse ( test . isCpuPinningValid ( STRING_CONSTANT , vmStatic ) ) ; org.junit.Assert . assertFalse ( test . getReturnValue () . getCanDoActionMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_BE_PINNED_TO_CPU_WITH_UNDEFINED_HOST ) ) ; }
@ org.junit.Test public void testVmInPreview () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) . when ( snapshotsValidator ) . vmNotInPreview ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest . getEmptyDiskList () ) . when ( cmd ) . getDisksList () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW . name () ) ) ; }
@ org.junit.Test public void testStoragePoolIsNotUp () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND ) ) . when ( storagePoolValidator ) . isUp () ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest . getEmptyDiskList () ) . when ( cmd ) . getDisksList () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND . name () ) ) ; }
private static void addEmptyCD ( org.ovirt.engine.core.compat.Guid dstId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . NewGuid () , dstId ) , VmDeviceGeneralType.DISK , VmDeviceType.CDROM , java.util.Collections . < java.lang.String , java.lang.Object > singletonMap ( VdsProperties.Path , STRING_CONSTANT ) , true , true , null ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice createVirtioSerialDeviceForVm ( org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmId ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CONTROLLER , VmDeviceType.VIRTIOSERIAL . getName () , STRING_CONSTANT , NUMBER_CONSTANT , new java.util.HashMap < java.lang.String , java.lang.Object > () , true , true , false , STRING_CONSTANT , null , null , null ) ; }
@ org.junit.Test public void testParamsUpdated () { org.ovirt.engine.core.common.businessentities.storage.DiskImage readyImage = initReadyImageForUpload () ; transferImageCommand . handleImageIsReadyForTransfer () ; org.junit.Assert . assertEquals ( transferImageCommand . getParameters () . getStorageDomainId () , readyImage . getStorageIds () . get ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( transferImageCommand . getParameters () . getTransferSize () , readyImage . getSize () ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.aaa.DbUser getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser entity = new org.ovirt.engine.core.common.businessentities.aaa.DbUser () ; entity . setId ( GUIDS [ index ] ) ; entity . setExternalId ( EXTERNAL_IDS [ index ] ) ; entity . setFirstName ( NAMES [ index ] ) ; entity . setGroupNames ( new java.util.LinkedList ( java.util.Arrays . asList ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResourceTest.GROUPS . split ( STRING_CONSTANT ) ) ) ) ; entity . setDomain ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN ) ; return entity ; }
@ java.lang.Override protected boolean allowedStorageDomain ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > sourceActiveStorageDomains , org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel templateDisk , org.ovirt.engine.core.common.businessentities.StorageDomain sd ) { boolean isTemplate = isTemplateDisk ( diskImage ) ; if ( isTemplate && ( sourceActiveStorageDomains . contains ( sd ) ) ) { return false ; } return super . allowedStorageDomain ( sourceActiveStorageDomains , diskImage , templateDisk , sd ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { if ( ! ( returnValue . getSucceeded () ) ) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ( ( org.ovirt.engine.ui.uicommonweb.ErrorPopupManager ) ( org.ovirt.engine.ui.uicommonweb.TypeResolver . getInstance () . resolve ( org.ovirt.engine.ui.uicommonweb.ErrorPopupManager . class ) ) ) ; popupManager . show ( returnValue . getExceptionMessage () ) ; return; } onRealSuccessCallback . onSuccess ( returnValue ) ; }
private org.ovirt.engine.core.common.businessentities.VM getVmForNonShareableDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage disk ) { if ( ! ( disk . isShareable () ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.core.bll.RemoveImageCommand . getVmDAO () . getVmsListForDisk ( disk . getId () , false ) ; if ( ! ( vms . isEmpty () ) ) { return vms . get ( NUMBER_CONSTANT ) ; } } return null ; }
com.google.gwt.http.client.RequestBuilder createRequest () { com.google.gwt.http.client.RequestBuilder builder = new com.google.gwt.http.client.RequestBuilder ( com.google.gwt.http.client.RequestBuilder.GET , restApiBaseUrl ) ; builder . setHeader ( STRING_CONSTANT , java.lang.String . valueOf ( restApiSessionTimeout ) ) ; builder . setHeader ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.PREFER_HEADER , STRING_CONSTANT ) ; if ( ( restApiSessionId ) != null ) { builder . setHeader ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.CSRF_HEADER , restApiSessionId ) ; } return builder ; }
private void doDataCenterSearch () { final org.ovirt.engine.ui.frontend.AsyncQuery dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; dcQuery . setModel ( this ) ; dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel ) ( model ) ) ; systemTreeModel . setDataCenters ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; doNetworksSearch () ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDataCenterList ( dcQuery , false ) ; }
private void expectGetConnections () { for ( int i = NUMBER_CONSTANT ; i < ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS.length ) ; i ++ ) { org.mockito.Mockito . when ( storageServerConnectionDao . get ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS [ i ] ) ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest . setUpConnection ( i ) ) ; } }
@ java.lang.Override public int compare ( org.ovirt.engine.core.common.businessentities.MacPool o1 , org.ovirt.engine.core.common.businessentities.MacPool o2 ) { int retVal = ( - NUMBER_CONSTANT ) * ( java.lang.Boolean . compare ( o1 . isDefaultPool () , o2 . isDefaultPool () ) ) ; if ( retVal != NUMBER_CONSTANT ) { return retVal ; } return lexoNumeric . compare ( o1 , o2 ) ; }
public static void addFileHandler ( java.lang.String fileName ) { try { java.util.logging.FileHandler fh = new java.util.logging.FileHandler ( fileName , true ) ; fh . setFormatter ( new java.util.logging.SimpleFormatter () ) ; java.util.logging.Logger . getLogger ( STRING_CONSTANT ) . addHandler ( fh ) ; } catch ( java.lang.SecurityException | java.io.IOException ex ) { throw new java.lang.IllegalArgumentException ( java.lang.String . format ( STRING_CONSTANT , fileName , ex . getMessage () ) , ex ) ; } }
@ org.junit.Test public void provisioningValidated ( ) throws java.lang.Exception { setupVirtMock () ; org.junit.Assert . assertTrue ( command . validate () ) ; org.mockito.Mockito . verify ( validator , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . provisioningComputeResourceValid ( org.mockito.Matchers . any ( java.lang.Boolean . class ) , org.mockito.Matchers . any () ) ; org.mockito.Mockito . verify ( validator , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . provisioningHostGroupValid ( org.mockito.Matchers . any ( java.lang.Boolean . class ) , org.mockito.Matchers . any () ) ; }
public void updateMaxNumOfVmCpus () { java.lang.String version = getClusterCompatibilityVersion () . toString () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxNumOfVmCpus ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase ) ( target ) ) ; behavior.maxCpus = ( ( java.lang.Integer ) ( returnValue ) ) ; behavior . postUpdateNumOfSockets2 () ; } } , getModel () . getHash () ) , version ) ; }
public void newNetworkQoS () { if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkQoSModel newNetworkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkQoSModel ( this , getEntity () ) ; setWindow ( newNetworkQoSModel ) ; newNetworkQoSModel . getDataCenters () . setItems ( java.util.Arrays . asList ( getEntity () ) , getEntity () ) ; }
protected void updateCpuSharesAvailability () { if ( ( getModel () . getSelectedCluster () ) != null ) { boolean availableCpuShares = ( getModel () . getCompatibilityVersion () . compareTo ( Version.v3_3 ) ) >= NUMBER_CONSTANT ; getModel () . getCpuSharesAmountSelection () . setIsAvailable ( availableCpuShares ) ; getModel () . getCpuSharesAmount () . setIsAvailable ( availableCpuShares ) ; } }
public boolean validate () { int nameLength = ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . isWindowsOsType ( vm . getOs () ) ) ? org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxVmNameLengthWin () : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxVmNameLengthNonWin () ; getCloneName () . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation ( nameLength ) , new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation () } ) ; return getCloneName () . getIsValid () ; }
private org.ovirt.engine.core.common.businessentities.storage.Disk findBoot ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks , org.ovirt.engine.core.common.businessentities.VM vm ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk . getDiskVmElementForVm ( vm . getId () ) ; if ( ( dve != null ) && ( dve . isBoot () ) ) { return disk ; } } return null ; }
@ org.junit.Test public void testGuestFQDN () { org.ovirt.engine.api.model.VM vm = new org.ovirt.engine.api.model.VM () ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; vmDynamic . setStatus ( VMStatus.Up ) ; vmDynamic . setVmFQDN ( STRING_CONSTANT ) ; vm . setDynamicData ( vmDynamic ) ; org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper . map ( vm , null ) ; assertNotNull ( map . getGuestInfo () . getFqdn () ) ; assertEquals ( map . getGuestInfo () . getFqdn () , STRING_CONSTANT ) ; }
private void queryLabels () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNetworkLabelsByDataCenterId ( getEntity () . getStoragePoolId () , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { dcLabels = ( ( java.util.SortedSet < java.lang.String > ) ( returnValue ) ) ; initNicModels () ; stopProgress () ; } } ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > () { @ java.lang.Override public org.ovirt.engine.api.model.Disk lookupEntity ( org.ovirt.engine.core.compat.Guid guid ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection . lookupEntity ( guid ) ; } } ; org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
@ org.junit.Test public void testValidCustomProerties () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setVdsGroupCompatibilityVersion ( Version.v3_3 ) ; java.util.List < java.lang.String > messages = new java.util.ArrayList < java.lang.String > () ; org.junit.Assert . assertTrue ( runVmValidator . validateVmProperties ( vm , STRING_CONSTANT , messages ) ) ; org.junit.Assert . assertTrue ( messages . isEmpty () ) ; }
private void handleActionWithKey ( java.lang.String action , java.lang.String key ) { engineConfigMap . setConfigAction ( org.ovirt.engine.core.config.validation.ConfigActionType . getActionType ( action ) ) ; if ( ( action . equals ( STRING_CONSTANT ) ) || ( action . equals ( STRING_CONSTANT ) ) ) { engineConfigMap . setKey ( key ) ; } else { throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_CONSTANT + action ) + CHAR_CONS ) + key ) + STRING_CONSTANT ) ) ; } }
private org.ovirt.engine.core.dao.ClusterDao mockCluster () { org.ovirt.engine.core.dao.ClusterDao mock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.ClusterDao . class ) ; cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setEmulatedMachine ( STRING_CONSTANT ) ; cluster . getRequiredRngSources () . add ( VmRngDevice.Source.RANDOM ) ; cluster . setCompatibilityVersion ( Version.v3_5 ) ; org.mockito.Mockito . when ( mock . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( cluster ) ; return mock ; }
private void runOnce () { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem () ) ) ; org.ovirt.engine.ui.frontend.AsyncQuery getVmInitQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; getVmInitQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel runOnceModel = new org.ovirt.engine.ui.uicommonweb.models.vms.WebadminRunOnceModel ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel . this ) ; setWindow ( runOnceModel ) ; runOnceModel . init () ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getVmById ( getVmInitQuery , vm . getId () ) ; }
@ org.junit.Test public void testCheckVmOnlyOnClusterUpgrade () { prepareVmToPassValidate () ; mockVmValidator () ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; org.mockito.Mockito . verify ( inClusterUpgradeValidator , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . isVmReadyForUpgrade ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.VM . class ) ) ; }
@ java.lang.Override protected void ExecuteVdsBrokerCommand () { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . getBroker () . getStorageDomainInfo ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . getParameters () . getStorageDomainId () . toString () ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . ProceedProxyReturnValue () ; org.ovirt.engine.core.utils.Pair < org.ovirt.engine.core.common.businessentities.storage_domain_static , org.ovirt.engine.core.common.businessentities.SANState > pairSdStatic = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . BuildStorageStaticFromXmlRpcStruct ( _result.mStorageInfo ) ; pairSdStatic . getFirst () . setId ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainInfoVDSCommand . getParameters () . getStorageDomainId () ) ; setReturnValue ( pairSdStatic ) ; }
@ org.junit.Test public void testFetchVmDisks ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( getXmlOvfData () ) ; java.util.Set < org.ovirt.engine.core.compat.Guid > disks = org.ovirt.engine.core.utils.OvfUtils . fetchVmDisks ( xmlDocument ) ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , disks ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ! ( disks . isEmpty () ) ) ) ; }
private static void addBootOrder ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { java.lang.String s = java.lang.String . valueOf ( vmDevice . getBootOrder () ) ; if ( ( ! ( org.apache.commons.lang.StringUtils . isEmpty ( s ) ) ) && ( ! ( s . equals ( STRING_CONSTANT ) ) ) ) { struct . put ( VdsProperties.BootOrder , s ) ; } }
public void freeMacs ( java.util.List < java.lang.String > macs ) { lockObj . writeLock () . lock () ; try { if ( ! ( initialized ) ) { logInitializationError ( STRING_CONSTANT ) ; } for ( java.lang.String mac : macs ) { internalFreeMac ( mac ) ; } } finally { lockObj . writeLock () . unlock () ; } }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VmOsType . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VMStatus . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VmType . class ) ; } return null ; }
protected void updateMemoryBalloon () { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel () . getSelectedCluster () ; java.lang.Integer osType = getModel () . getOSType () . getSelectedItem () ; if ( ( cluster != null ) && ( osType != null ) ) { updateMemoryBalloon ( getModel () . getCompatibilityVersion () , osType ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetProviderById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getProvider () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiscoveredHostListFromExternalProvider , org.ovirt.engine.core.common.queries.ProviderQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getHosts () , failure ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDeviceList , org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.HOST_GUID } , setUpLuns () , failure ) ; }
@ org.junit.Test public void executeCommand () { setUpMocksForUpdate () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATED , cmd . getAuditLogTypeValue () ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) , null ) ) ; setupMocks () ; org.mockito.Mockito . doNothing () . when ( hookSyncJob ) . refreshHooksInCluster ( getCluster () , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_REFRESH ) ; }
private void performGeoRepAction ( java.lang.String commandName , java.lang.String confirmTitle , org.ovirt.engine.ui.uicommonweb.help.HelpTag helpTag , java.lang.String hashName , java.lang.String action , org.ovirt.engine.core.common.action.VdcActionType actionType , java.lang.String actionProgressText ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession selectedSession = getSelectedItem () ; if ( selectedSession == null ) { return; } initializeGeoRepActionConfirmation ( confirmTitle , helpTag , hashName , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants . geoRepForceHelp () , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.messages . geoRepForceTitle ( action ) , commandName , selectedSession . getMasterVolumeName () , selectedSession . getSlaveVolumeName () , selectedSession . getSlaveHostName () , null ) ; onGeoRepSessionAction ( actionType ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object result = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; model . postDiscoverTargetsInternal ( ( result != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ) ( result ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > () ) ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getImages ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.Collection < org.ovirt.engine.core.common.businessentities.Disk > diskImageList ) { if ( diskImageList == null ) { return org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskDao () . getAllForVm ( vm . getId () ) , true , false ) ; } return org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( diskImageList , true , false ) ; }
@ org.junit.Test public void nameIsUsed () { org.mockito.Mockito . when ( hostDao . getByName ( org.mockito.Matchers . any () ) ) . thenReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.VDS . class ) ) ; org.junit.Assert . assertThat ( validator . nameNotUsed () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ) ; }
public static void isPoolNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.IsVmPoolWithSameNameExists , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
protected void createVirtIODisk () { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = getDiskImage () ; disk . setDiskInterface ( DiskInterface.VirtIO ) ; disk . setActive ( true ) ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( disk ) ; org.mockito.Mockito . when ( osRepository . getDiskHotpluggableInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ) . thenReturn ( new java.util.HashSet <> ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.DISK_HOTPLUGGABLE_INTERFACES ) ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVm ( org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > spyVmCommand ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setstatus ( VMStatus.Down ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseMockUtils . mockVmDao ( spyVmCommand , vmDAO ) ; org.mockito.Mockito . when ( vmDAO . get ( command . getParameters () . getVmId () ) ) . thenReturn ( vm ) ; return vm ; }
public void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
@ java.lang.Override public void endSuccessfully () { endCreateAllSnapshots () ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : enclosingCommand . getParameters () . getParametersList () ) { updateDestinationImageId ( parameters ) ; } org.ovirt.engine.core.bll.job.ExecutionHandler . endJob ( enclosingCommand . getExecutionContext () , true ) ; enclosingCommand . setExecutionContext ( null ) ; }
public float nextFloat ( float f , boolean inclusive ) { if ( f <= NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } float rand = nextFloat () ; if ( ! inclusive ) { while ( rand == NUMBER_CONSTANT ) { rand = nextFloat () ; } } return rand * f ; }
@ java.lang.Override protected void executeQueryCommand () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageDomainDao () . getAllForStorageDomain ( org.ovirt.engine.core.bll.storage.GetStorageDomainListByIdQuery . getParameters () . getId () ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > temp = new java.util.ArrayList ( result ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : temp ) { if ( ( domain . getStorageDomainSharedStatus () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached ) ) { result . remove ( domain ) ; } } org.ovirt.engine.core.bll.storage.GetStorageDomainListByIdQuery . getQueryReturnValue () . setReturnValue ( result ) ; }
public static java.lang.String generateRandomMessage ( int length ) { java.util.Random random = new java.util.Random () ; java.lang.StringBuffer randStr = new java.lang.StringBuffer () ; for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { int number = random . nextInt ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.CHAR_LIST . length () ) ; char ch = org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.CHAR_LIST . charAt ( number ) ; randStr . append ( ch ) ; } return randStr . toString () ; }
private void containerChanged () { if ( ( getContainer () ) == null ) { return; } org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenter = getContainer () . getDataCenter () ; dataCenter . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { containerDataCenterChanged () ; } } ) ; if ( ( dataCenter . getSelectedItem () ) != null ) { containerDataCenterChanged () ; } }
@ org.junit.Test ( expected = java.util.concurrent.TimeoutException . class ) public void testGetRootDSENoReachableLdapServers ( ) throws java.lang.Exception { java.util.List < java.net.URI > urls = new java.util.ArrayList < java.net.URI > () ; urls . add ( new java.net.URI ( org.ovirt.engine.core.bll.adbroker.DirectorySearcherTest.BAD_URL ) ) ; org.ovirt.engine.core.bll.adbroker.DirectorySearcher dirSearcher = mockDirectorySearcher ( urls ) ; org.ovirt.engine.core.bll.adbroker.DirectorySearcherTest . execute ( new org.ovirt.engine.core.bll.adbroker.GetRootDSETask ( dirSearcher , STRING_CONSTANT , urls . get ( NUMBER_CONSTANT ) ) ) ; }
@ org.junit.Test public void executeCommandTest () { addClusterCommand . executeCommand () ; org.mockito.Mockito . verify ( clusterDao ) . save ( cluster ) ; org.mockito.Mockito . verify ( backend ) . runAction ( org.mockito.ArgumentMatchers . eq ( ActionType.AddCpuProfile ) , org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertTrue ( addClusterCommand . getReturnValue () . getSucceeded () ) ; }
private void mockDependencies () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( glusterUtils ) . getUpServer ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQueryTest.CLUSTER_ID ) ; org.mockito.Mockito . doReturn ( STRING_CONSTANT ) . when ( getQuery () ) . getGlusterVolumeName ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQueryTest.VOLUME_ID ) ; org.mockito.Mockito . doReturn ( getBrick () ) . when ( brickDao ) . getById ( org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Before public void setUp () { tested = org.mockito.Mockito . spy ( new org.ovirt.engine.ui.common.system.ClientStorageImpl () { @ java.lang.Override void initStorage () {} } ) ; org.mockito.Mockito . doNothing () . when ( tested ) . setLocalItemImpl ( org.mockito.ArgumentMatchers . anyString () , org.mockito.ArgumentMatchers . anyString () ) ; org.mockito.Mockito . doNothing () . when ( tested ) . setSessionItemImpl ( org.mockito.ArgumentMatchers . anyString () , org.mockito.ArgumentMatchers . anyString () ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { deactivate () ; getModel () . getMemoryBalloonDeviceEnabled () . setEntity ( ( ( java.lang.Boolean ) ( returnValue . getReturnValue () ) ) ) ; activate () ; if ( continueWithNext ) { updateRngDevice ( vmBase ) ; } }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getDistributedVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito . doReturn ( getDistributedVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; }
@ org.junit.Test public void validateFailsForDeviceAlreadyInUse () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice ( STRING_CONSTANT ) ; storageDevice . setCanCreateBrick ( false ) ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . singletonList ( storageDevice ) ) ) . when ( cmd ) . getParameters () ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
public void processResponse ( org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response ) { org.codehaus.jackson.JsonNode id = response . getId () ; if ( ( org.codehaus.jackson.node.NullNode . class . isInstance ( id ) ) || ( id == null ) ) { this . tracker . processIssue ( response ) ; return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this . tracker . removeCall ( response . getId () ) ; if ( call == null ) { this . log . error ( STRING_CONSTANT , response . getId () ) ; return; } call . addResponse ( response ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( model . getItems () ) == null ) { return; } java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > iterator = model . getItems () . iterator () ; if ( iterator . hasNext () ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel root = model . cloneTagModel ( iterator . next () ) ; updateDataProvider ( java.util.Arrays . asList ( root ) ) ; } }
private void performGeoRepAction ( java.lang.String commandName , java.lang.String confirmTitle , org.ovirt.engine.ui.uicommonweb.help.HelpTag helpTag , java.lang.String hashName , java.lang.String action , org.ovirt.engine.core.common.action.VdcActionType actionType ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession selectedSession = getSelectedItem () ; if ( selectedSession == null ) { return; } initializeGeoRepActionConfirmation ( confirmTitle , helpTag , hashName , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants . geoRepForceHelp () , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.messages . geoRepForceTitle ( action ) , commandName , selectedSession . getMasterVolumeName () , selectedSession . getSlaveVolumeName () , selectedSession . getSlaveHostName () , null ) ; onGeoRepSessionAction ( actionType ) ; }
private static void convertAAAProfilesResult ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , final boolean passwordBasedOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > results = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.aaa.ProfileEntry profileEntry : ( ( java.util.Collection < org.ovirt.engine.core.aaa.ProfileEntry > ) ( source ) ) ) { if ( ( ! passwordBasedOnly ) || ( profileEntry . getSupportsPasswordAuthenication () ) ) { results . add ( profileEntry . getProfile () ) ; } } return results ; } } ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public void testListCrashClientLocale ( ) throws java.lang.Exception { collection . setUriInfo ( setUpUriExpectations ( null ) ) ; locales . add ( org.ovirt.engine.api.restapi.resource.gluster.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpHooksQueryExpectations ( t ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
private < T > T readJsonString ( java.lang.Object source , java.lang.Class < T > type , org.codehaus.jackson.map.ObjectMapper mapper ) { try { return mapper . readValue ( source . toString () , type ) ; } catch ( java.io.IOException e ) { throw new org.apache.commons.lang.SerializationException ( e ) ; } }
public org.ovirt.engine.core.common.businessentities.storage.ImageStatus getImageStatusByClassificationType ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderVolumeType = cinderDisk . getVolumeClassification () ; if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { return getDiskStatus ( cinderDisk . getImageId () ) ; } else if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { return getSnapshotStatus ( cinderDisk . getImageId () ) ; } org.ovirt.engine.core.bll.storage.CinderBroker.log . error ( STRING_CONSTANT , cinderDisk . getDiskAlias () , cinderDisk . getImageId () ) ; return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ; }
protected void verifyModel ( org.ovirt.engine.api.model.Creation model ) throws java.lang.Exception { assertNotNull ( model ) ; assertEquals ( java.net.URLEncoder . encode ( org.ovirt.engine.api.restapi.resource.BackendCreationResourceTest.CREATION_ID , STRING_CONSTANT ) , model . getId () ) ; assertEquals ( CreationStatus.COMPLETE . value () , model . getStatus () ) ; verifyLinks ( model ) ; }
@ org.junit.Test public void testGuestFQDN () { org.ovirt.engine.api.model.VM vm = new org.ovirt.engine.api.model.VM () ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; vmDynamic . setStatus ( VMStatus.Up ) ; vmDynamic . setVmFQDN ( STRING_CONSTANT ) ; vm . setDynamicData ( vmDynamic ) ; org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper . map ( vm , ( ( org.ovirt.engine.api.model.VM ) ( null ) ) ) ; assertNotNull ( map . getFqdn () ) ; assertEquals ( map . getFqdn () , STRING_CONSTANT ) ; }
public void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : NUMBER_CONSTANT ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , getDefaultConfigurationVersion () ) , aQuery ) ; }
protected void loadPayloadDevice () { org.ovirt.engine.core.common.businessentities.VmPayload payload = getVmPayloadByDeviceType ( VmDeviceType.CDROM ) ; if ( payload != null ) { org.ovirt.engine.core.bll.RunVmCommand . getVm () . setVmPayload ( payload ) ; } else { org.ovirt.engine.core.bll.RunVmCommand . getVm () . setVmPayload ( getVmPayloadByDeviceType ( VmDeviceType.FLOPPY ) ) ; } }
private void cleanConnection ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection , org.ovirt.engine.core.compat.Guid hostId ) { if ( ( ( connection . getId () ) != null ) && ( ! ( connection . getId () . equals ( STRING_CONSTANT ) ) ) ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.RemoveStorageServerConnection , new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId , false ) , null , this ) ; } }
public static org.ovirt.engine.api.model.Link createLink ( java.lang.String url , java.lang.String rel , java.util.List < org.ovirt.engine.api.model.ParametersSet > params ) { org.ovirt.engine.api.model.Link link = new org.ovirt.engine.api.model.Link () ; link . setRel ( ( rel + ( org.ovirt.engine.api.common.util.LinkHelper.SEARCH_RELATION ) ) ) ; link . setHref ( ( ( org.ovirt.engine.api.common.util.LinkHelper . combine ( url , params ) ) + ( org.ovirt.engine.api.common.util.LinkHelper.SEARCH_TEMPLATE ) ) ) ; return link ; }
private void mockFenceVdsResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result1 , org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result2 ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal1 = createVdsReturnValue ( result1 ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal2 = ( result2 == null ) ? null : createVdsReturnValue ( result2 ) ; org.mockito.Mockito . when ( resourceManager . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.FenceVds ) , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( retVal1 ) . thenReturn ( retVal2 ) ; }
@ org.junit.Test public void testGetAllMultiVdsSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery . executeQueryCommand () ; org.junit.Assert . assertEquals ( vdsResultList , searchQuery . getQueryReturnValue () . getReturnValue () ) ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getDbGroupDao () ; newGroup = new org.ovirt.engine.core.common.businessentities.aaa.DbGroup () ; newGroup . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; newGroup . setExternalId ( STRING_CONSTANT ) ; newGroup . setDomain ( STRING_CONSTANT ) ; newGroup . setName ( STRING_CONSTANT ) ; newGroup . setNamespace ( STRING_CONSTANT ) ; existingGroup = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public void edit ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object ) { priorityEditor . setRowData ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > () ) ; priorityEditor . edit ( object . getPriority () ) ; org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.Driver.driver . edit ( object ) ; initTabAvailabilityListeners ( object ) ; initListeners ( object ) ; initCustomPropertySheet ( object ) ; numOfVmsLabel . setVisible ( false ) ; }
@ java.lang.Override public org.ovirt.engine.core.aaa.DirectoryUser findUser ( java.lang.String name ) { org.ovirt.engine.core.common.utils.ExternalId id = null ; try { id = new org.ovirt.engine.core.common.utils.ExternalId ( name . getBytes ( STRING_CONSTANT ) ) ; } catch ( java.io.UnsupportedEncodingException e ) { return null ; } return new org.ovirt.engine.core.aaa.DirectoryUser ( this . getName () , id , name ) ; }
private org.ovirt.engine.core.compat.Guid createVmDiskOnSd ( boolean wipeAfterDelete , boolean passDiscard ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid . newGuid () ; disk . setId ( diskId ) ; disk . setWipeAfterDelete ( wipeAfterDelete ) ; storageDomainDisks . add ( disk ) ; storageDomainVmDisks . add ( createVmDisk ( diskId , passDiscard ) ) ; return diskId ; }
private void reportNonOperationReason ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.lang.String compatibleVersions , java.lang.String vdsSupportedVersions ) { java.util.Map < java.lang.String , java.lang.String > customLogValues = new java.util.HashMap <> () ; customLogValues . put ( STRING_CONSTANT , compatibleVersions ) ; customLogValues . put ( STRING_CONSTANT , vdsSupportedVersions ) ; org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( org.ovirt.engine.core.bll.HandleVdsVersionCommand . getVdsId () , reason , customLogValues ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
@ org.junit.Test public void testUpdateAll ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmDynamic existingVm2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; existingVm . setStatus ( VMStatus.Down ) ; existingVm2 . setVmIp ( STRING_CONSTANT ) ; existingVm2 . setVmFQDN ( STRING_CONSTANT ) ; dao . updateAll ( java.util.Arrays . asList ( existingVm , existingVm2 ) ) ; org.junit.Assert . assertEquals ( existingVm , dao . get ( existingVm . getId () ) ) ; org.junit.Assert . assertEquals ( existingVm2 , dao . get ( existingVm2 . getId () ) ) ; }
private void buildDictionaries () { for ( org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.AutoCompletionField field : org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.fields ) { mVerbs . add ( field.fieldName ) ; } buildCompletions () ; for ( org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.AutoCompletionField field : org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.fields ) { getTypeDictionary () . put ( field.fieldName , field.fieldType ) ; } for ( org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.AutoCompletionField field : org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.fields ) { columnNameDict . put ( field.fieldName , field.columnName ) ; } buildBasicValidationTable () ; }
public void isAnyHostUpInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ! ( ( ( java.util.List < > ) ( source ) ) . isEmpty () ) ) ) { return true ; } return false ; } } ; getUpHostListByCluster ( aQuery , clusterName , NUMBER_CONSTANT ) ; }
public void getVnicProfilesByNetworkId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid networkId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVnicProfilesByNetworkId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( networkId ) , aQuery ) ; }
@ java.lang.Override protected boolean canDoAction () { if ( ( getNic () ) == null ) { return failCanDoAction ( VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST ) ; } if ( ( ( getNic () . getLabels () ) == null ) || ( ! ( getNic () . getLabels () . contains ( getLabel () ) ) ) ) { return failCanDoAction ( VdcBllMessages.INTERFACE_NOT_LABELED ) ; } return true ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getBaseInterface ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > hostNics = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.UpdateNetworkValidator . getDbFacade () . getInterfaceDao () . getAllInterfacesForVds ( vlan . getVdsId () ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface hostNic : hostNics ) { if ( org.ovirt.engine.core.utils.NetworkUtils . interfaceBasedOn ( vlan , hostNic . getName () ) ) { return hostNic ; } } throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND ) ; }
private void mockStoragePool () { final org.ovirt.engine.core.dao.StoragePoolDao dao = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.StoragePoolDao . class ) ; final org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; pool . setId ( command . getParameters () . getStoragePoolId () ) ; org.mockito.Mockito . when ( dao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito . doReturn ( dao ) . when ( command ) . getStoragePoolDao () ; }
private void initSupportedArchitectures () { java.util.Collection < org.ovirt.engine.core.common.businessentities.ArchitectureType > archsWithSupportingCpus = new java.util.HashSet <> () ; archsWithSupportingCpus . add ( ArchitectureType.undefined ) ; for ( org.ovirt.engine.core.common.businessentities.ServerCpu cpu : getCPU () . getItems () ) { archsWithSupportingCpus . add ( cpu . getArchitecture () ) ; } getArchitecture () . setItems ( archsWithSupportingCpus ) ; }
@ org.junit.Before public void setUp () { org.mockito.Mockito . doNothing () . when ( command ) . addStorageDomainInDb () ; org.mockito.Mockito . doNothing () . when ( command ) . updateStorageDomainDynamicFromIrs () ; org.mockito.Mockito . doNothing () . when ( command ) . saveLUNsInDB ( org.mockito.Matchers . anyListOf ( org.ovirt.engine.core.common.businessentities.storage.LUNs . class ) ) ; }
@ org.junit.Test public void canDoActionFailsWhenGlusterHostHasVolumes ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , false ) ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
private org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters buildCinderChildCommandParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderDisk > cinderDisks ) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters () ; createParams . setCinderDisks ( cinderDisks ) ; createParams . setParentCommand ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getActionType () ) ; createParams . setParentParameters ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getParameters () ) ; return createParams ; }
protected boolean isVmRunningOnNonDefaultVds () { return ( ! ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getDedicatedVmForVdsList () . isEmpty () ) ) && ( ! ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getDedicatedVmForVdsList () . contains ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getRunOnVds () ) ) ) ; }
@ org.junit.Test public void testUpdateStoragePoolIsoMap () { existingStoragePoolIsoMap . setstatus ( StorageDomainStatus.Active ) ; dao . update ( existingStoragePoolIsoMap ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap result = dao . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap . getstorage_id () , existingStoragePoolIsoMap . getstorage_pool_id () ) ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( existingStoragePoolIsoMap , result ) ; }
public static void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result ) { java.util.List < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > returnValueList = result . getReturnValues () ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValueList . get ( NUMBER_CONSTANT ) . getReturnValue () ) ) ; initTemplates ( templates ) ; initCdImage () ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getQuotaClusterParameterMap ( org.ovirt.engine.core.compat.Guid quotaId , org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster ) { return createQuotaIdParameterMapper ( quotaCluster . getQuotaClusterId () ) . addValue ( STRING_CONSTANT , quotaId ) . addValue ( STRING_CONSTANT , quotaCluster . getClusterId () ) . addValue ( STRING_CONSTANT , null ) . addValue ( STRING_CONSTANT , null ) . addValue ( STRING_CONSTANT , quotaCluster . getVirtualCpu () ) . addValue ( STRING_CONSTANT , quotaCluster . getMemSizeMB () ) ; }
private java.util.List < org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter > getUpdatedStorageQuotaListParameters () { java.util.List < org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter > () ; list . add ( new org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter ( getQuotaId () , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getParameters () . getDiskInfo () ) ) . getstorage_ids () . get ( NUMBER_CONSTANT ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getParameters () . getDiskInfo () ) ) . getSizeInGigabytes () ) ) ; return list ; }
@ org.junit.Test public void canDoActionFailsWhenGlusterMultipleHostHasVolumesWithForce ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , true ) ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockHasMultipleClusters ( true ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
public void copyDetailsFrom ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volumeAdvancedDetails ) { for ( org.ovirt.engine.core.common.businessentities.gluster.BrickDetails newBrickDetails : volumeAdvancedDetails . getBrickDetails () ) { org.ovirt.engine.core.compat.Guid newBrickId = newBrickDetails . getBrickProperties () . getBrickId () ; if ( newBrickId != null ) { for ( org.ovirt.engine.core.common.businessentities.gluster.BrickDetails brickDetails : getBrickDetails () ) { if ( newBrickId . equals ( brickDetails . getBrickProperties () . getBrickId () ) ) { copyBrickProperties ( newBrickDetails . getBrickProperties () , brickDetails . getBrickProperties () ) ; break; } } } } }
protected java.io.File determineActualFile ( final javax.servlet.http.HttpServletRequest request , java.util.Locale locale ) { java.io.File file = org.ovirt.engine.core.utils.ServletUtils . makeFileFromSanePath ( request . getPathInfo () , base ) ; if ( ( file != null ) && ( ! ( org.ovirt.engine.core.utils.ServletUtils . canReadFile ( file ) ) ) ) { file = org.ovirt.engine.core.utils.ServletUtils . makeFileFromSanePath ( replaceLocaleWithUSLocale ( request . getPathInfo () , locale ) , base ) ; } return file ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.VDS value ) { if ( ( super . getEntity () ) != null ) { org.ovirt.engine.core.common.businessentities.VDS currentItem = super . getEntity () ; org.ovirt.engine.core.compat.Guid currentItemId = currentItem . getId () ; org.ovirt.engine.core.compat.Guid newItemId = value . getId () ; if ( currentItemId . equals ( newItemId ) ) { setEntity ( value , false ) ; updateActionAvailability () ; return; } } super . setEntity ( value ) ; }
private static org.ovirt.engine.core.common.businessentities.Cluster createCluster () { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setName ( org.ovirt.engine.core.bll.AddClusterCommandTest.CLUSTER_NAME ) ; cluster . setDescription ( org.ovirt.engine.core.bll.AddClusterCommandTest.CLUSTER_DESCRIPTION ) ; cluster . setStoragePoolId ( org.ovirt.engine.core.bll.AddClusterCommandTest.DATA_CENTER_ID ) ; cluster . setCpuName ( org.ovirt.engine.core.bll.AddClusterCommandTest.CPU_NAME ) ; cluster . setMaxVdsMemoryOverCommit ( org.ovirt.engine.core.bll.AddClusterCommandTest.MAX_VDS_MEMORY_OVER_COMMIT ) ; cluster . setCountThreadsAsCores ( org.ovirt.engine.core.bll.AddClusterCommandTest.COUNT_THREADS_AS_CORES ) ; cluster . setTransparentHugepages ( org.ovirt.engine.core.bll.AddClusterCommandTest.SET_TRANSPARENT_HUGE_PAGES ) ; cluster . setCompatibilityVersion ( org.ovirt.engine.core.bll.AddClusterCommandTest.SET_COMPATIBILITY_VERSION ) ; cluster . setMigrateOnError ( org.ovirt.engine.core.bll.AddClusterCommandTest.MIGRATE_ON_ERROR ) ; cluster . setArchitecture ( org.ovirt.engine.core.bll.AddClusterCommandTest.ARCHITECTURE_TYPE ) ; return cluster ; }
private org.ovirt.engine.core.common.queries.VmIconIdSizePair ensureIconsInDatabase ( java.lang.String osName ) { final org.ovirt.engine.core.compat.Guid smallIconId = ensureIconInDatabase ( org.ovirt.engine.core.bll.IconLoader.SMALL_ICON_DIR , osName ) ; final org.ovirt.engine.core.compat.Guid largeIconId = ensureIconInDatabase ( org.ovirt.engine.core.bll.IconLoader.LARGE_ICON_DIR , osName ) ; if ( ( smallIconId != null ) && ( largeIconId != null ) ) { return new org.ovirt.engine.core.common.queries.VmIconIdSizePair ( smallIconId , largeIconId ) ; } return null ; }
@ java.lang.Override public javax.ws.rs.core.Response resetOption ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.api.model.Option option = action . getOption () ; validateParameters ( option , STRING_CONSTANT ) ; return resetOption ( action , option . getName () , option . getValue () , ( action . isSetForce () ? action . isForce () : false ) ) ; }
@ org.junit.Test public void testGetPermittedStorageDomains () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONFIGURE_VM_STORAGE , FixturesTool.DATA_CENTER ) ; org.junit.Assert . assertFalse ( result . isEmpty () ) ; org.junit.Assert . assertEquals ( result . get ( NUMBER_CONSTANT ) . getId () , existingDomain . getId () ) ; }
@ java.lang.Override public void testListCrashClientLocale ( ) throws java.lang.Exception { collection . setUriInfo ( setUpUriExpectations ( null ) ) ; locales . add ( org.ovirt.engine.api.restapi.resource.gluster.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.defaultQuery , t ) ; collection . setParent ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.parentMock ) ; try { getCollection () ; org.junit.jupiter.api.Assertions . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
public void edit () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel model = new org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel ( this , getEntity () . getCompatibilityVersion () , getSelectedItem () , getEntity () . getDataCenterId () ) ; setWindow ( model ) ; initProfileNetwork ( model ) ; }
@ org.junit.Test public void testExecuteQueryCommand () { org.mockito.Mockito . when ( params . getId () ) . thenReturn ( networkId ) ; setupVdsDao () ; setupVdsNetworkInterfaceDao () ; setupNetworkDao () ; org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > vdsInterfaceVdsPair = new org.ovirt.engine.core.common.utils.PairQueryable ( vdsNetworkInterface , vds ) ; java.util.List < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > expected = java.util.Collections . singletonList ( vdsInterfaceVdsPair ) ; getQuery () . executeQueryCommand () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , expected , getQuery () . getQueryReturnValue () . getReturnValue () ) ; }
public static boolean haveSameElements ( java.util.Collection < > c1 , java.util.Collection < > c2 ) { if ( ( c1 == null ) && ( c2 == null ) ) { return true ; } if ( ( ( c1 == null ) || ( c2 == null ) ) || ( ( c1 . size () ) != ( c2 . size () ) ) ) { return false ; } return c1 . containsAll ( c2 ) ; }
private boolean addMacToMap ( java.util.Map < java.lang.String , java.lang.Integer > macMap , java.lang.String mac ) { if ( ! ( macMap . containsKey ( mac ) ) ) { macMap . put ( mac , NUMBER_CONSTANT ) ; return true ; } else if ( allowDuplicate () ) { incrementMacInMap ( macMap , mac ) ; return true ; } return false ; }
public void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue () : NUMBER_CONSTANT ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , getDefaultConfigurationVersion () ) , aQuery ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsFromExportDomain () { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters p = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getParameters () . getStoragePoolId () , getParameters () . getSourceDomainId () ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetVal = runInternalQuery ( VdcQueryType.GetVmsFromExportDomain , p ) ; return qRetVal . getSucceeded () ? qRetVal . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue () : null ; }
@ org.junit.Test public void testErrorHandling () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue value = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; value . setSucceeded ( false ) ; value . setExceptionObject ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ( STRING_CONSTANT ) ) ; org.mockito.Mockito . when ( resourceManager . runVdsCommand ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( value ) ; updater . refreshVdsStats ( true ) ; }
private void updateConsoleAddressPartiallyOverridden ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { boolean isConsistent = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; setConsoleAddressPartiallyOverridden ( ( ! isConsistent ) ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.IsDisplayAddressConsistentInCluster , new org.ovirt.engine.core.common.queries.IdQueryParameters ( cluster . getId () ) , query ) ; }
protected void synchronizeNics ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > nics , org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager () ; vmInterfaceManager . removeAll ( true , vmId ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmInterface : nics ) { if ( ( vmInterface . getId () ) == null ) { vmInterface . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; } vmInterface . setVmId ( vmId ) ; vmInterfaceManager . add ( vmInterface , compensationContext ) ; } }
protected void synchronizeNics ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > nics , org.ovirt.engine.core.bll.context.CompensationContext compensationContext , org.ovirt.engine.core.compat.Version version ) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager () ; vmInterfaceManager . removeAll ( vmId ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : nics ) { if ( ( vmInterface . getId () ) == null ) { vmInterface . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; } vmInterface . setVmId ( vmId ) ; vmInterfaceManager . add ( vmInterface , compensationContext , false , version ) ; } }
public static org.ovirt.engine.core.common.businessentities.VmDevice createVirtioSerialDeviceForVm ( org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmId ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CONTROLLER , VmDeviceType.VIRTIOSERIAL . getName () , STRING_CONSTANT , new java.util.HashMap < java.lang.String , java.lang.Object > () , true , true , false , STRING_CONSTANT , null , null , null ) ; }
private boolean registerLibvirtSecretsImpl ( org.ovirt.engine.core.common.businessentities.VDS vds , java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = backend . getResourceManager () . runVdsCommand ( VDSCommandType.RegisterLibvirtSecrets , new org.ovirt.engine.core.common.vdscommands.RegisterLibvirtSecretsVDSParameters ( vds . getId () , libvirtSecrets , false ) ) ; return returnValue . getSucceeded () ; }
private void initCommand () { org.mockito.Mockito . when ( diskDao . get ( diskId ) ) . thenReturn ( createDiskImage () ) ; org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = createParameters () ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand < org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters > ( parameters , null ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public org.ovirt.engine.core.dao.DiskDao getDiskDao () { return diskDao ; } } ) ; }
void initEntityModelCellTables () { externalVms . addColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > () { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > externalVmModel ) { return externalVmModel . getEntity () . getName () ; } } , org.ovirt.engine.ui.webadmin.section.main.view.popup.ImportVmsPopupView.constants . name () ) ; importedVms . addColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > () { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > externalVmModel ) { return externalVmModel . getEntity () . getName () ; } } , org.ovirt.engine.ui.webadmin.section.main.view.popup.ImportVmsPopupView.constants . name () ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.DiskProfile model = createIncompleteDiskProfile () ; setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest . setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , getIncompleteFields () ) ; } }
public boolean isStartupTimeoutPassed () { java.util.Date waitTo = getBackend () . getStartedAt () . addSeconds ( org.ovirt.engine.core.common.config.Config . getValue ( ConfigValues.DisableFenceAtStartupInSec ) ) ; java.util.Date now = new java.util.Date () ; return ( waitTo . before ( now ) ) || ( waitTo . equals ( now ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > getQuotaClusterByClusterGuid ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid quotaId , boolean allowEmpty ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createQuotaIdParameterMapper ( quotaId ) . addValue ( STRING_CONSTANT , clusterId ) . addValue ( STRING_CONSTANT , allowEmpty ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , getClusterQuotaResultSet () , parameterSource ) ; }
@ org.junit.Test public void testCreateTasksStartedFromCLI () { org.mockito.Mockito . doReturn ( getTasks ( JobExecutionStatus.STARTED ) ) . when ( provider ) . getTaskListForCluster ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.CLUSTER_GUIDS [ NUMBER_CONSTANT ] ) ; tasksSyncJob . updateGlusterAsyncTasks () ; org.mockito.Mockito . verify ( taskUtils , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . endStepJob ( org.mockito.ArgumentMatchers . any () ) ; }
public static void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage () { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; disk . setId ( diskImageGuid ) ; disk . setSize ( NUMBER_CONSTANT ) ; disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singleton ( sdId ) ) ) ; disk . setStoragePoolId ( spId ) ; disk . setDescription ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) ) ; return disk ; }
private static java.lang.String decrypt ( java.lang.String source , java.security.Key key ) throws java.io.UnsupportedEncodingException , java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException , javax.crypto.NoSuchPaddingException { javax.crypto.Cipher rsa = javax.crypto.Cipher . getInstance ( org.ovirt.engine.core.engineencryptutils.EncryptionUtils.algo ) ; rsa . init ( javax.crypto.Cipher.DECRYPT_MODE , key ) ; return new java.lang.String ( rsa . doFinal ( org.apache.commons.codec.binary.Base64 . decodeBase64 ( source ) ) , STRING_CONSTANT ) ; }
@ org.junit.Test public void multiQueryValid () { java.util.ArrayList < org.ovirt.engine.core.common.queries.QueryType > queryTypeList = new java.util.ArrayList ( java.util.Arrays . asList ( QueryType.Search , QueryType.Search ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.queries.QueryParametersBase > queryParamsList = new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.queries.QueryParametersBase () , new org.ovirt.engine.core.common.queries.QueryParametersBase () ) ) ; underTest . runMultipleQueries ( queryTypeList , queryParamsList ) ; org.mockito.Mockito . verify ( backendLocal , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . runQuery ( org.mockito.Matchers . any () , org.mockito.Matchers . any () ) ; }
private static java.lang.Double computeInterfaceUsage ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { java.lang.Double receiveRate = iface . getStatistics () . getReceiveRate () ; java.lang.Double transmitRate = iface . getStatistics () . getTransmitRate () ; if ( receiveRate == null ) { return transmitRate ; } else if ( transmitRate == null ) { return receiveRate ; } else { return java.lang.Math . max ( receiveRate , transmitRate ) ; } }
protected org.ovirt.engine.core.common.businessentities.VM mockVmStatusUp () { vm . setStatus ( VMStatus.Up ) ; vm . setVmOs ( NUMBER_CONSTANT ) ; vm . setId ( vmId ) ; vm . setRunOnVds ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . doReturn ( vmDao ) . when ( command ) . getVmDao () ; mockVMDao ( vm ) ; return vm ; }
private static org.ovirt.engine.core.common.businessentities.RepoImage getNewIsoRepoFile () { org.ovirt.engine.core.common.businessentities.RepoImage newRepoFileMap = new org.ovirt.engine.core.common.businessentities.RepoImage () ; newRepoFileMap . setFileType ( ImageFileType.ISO ) ; newRepoFileMap . setRepoImageId ( STRING_CONSTANT ) ; newRepoFileMap . setLastRefreshed ( java.lang.System . currentTimeMillis () ) ; newRepoFileMap . setSize ( null ) ; newRepoFileMap . setDateCreated ( null ) ; newRepoFileMap . setRepoDomainId ( FixturesTool.STORAGE_DOAMIN_NFS_ISO ) ; return newRepoFileMap ; }
private void initSpyCommand () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand ( new org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters ( new java.util.ArrayList <> () , vmId ) , null ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . validateSpaceRequirements () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . checkImagesStatus () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles () ; }
protected void performLogin ( T loginModel ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedUser = loginModel . getLoggedUser () ; java.lang.String loginPassword = loginModel . getPassword () . getEntity () ; beforeLogin ( loginModel ) ; frontend . initLoggedInUser ( loggedUser , loginPassword ) ; user . onUserLogin () ; loginModel . getPassword () . setEntity ( null ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVdsStaticDao () ; dynamicDao = dbFacade . getVdsDynamicDao () ; statisticsDao = dbFacade . getVdsStatisticsDao () ; existingVds = dao . get ( FixturesTool.VDS_GLUSTER_SERVER2 ) ; newStaticVds = new org.ovirt.engine.core.common.businessentities.VdsStatic () ; newStaticVds . sethost_name ( STRING_CONSTANT ) ; newStaticVds . setvds_group_id ( existingVds . getvds_group_id () ) ; newStaticVds . setSSHKeyFingerprint ( STRING_CONSTANT ) ; newStaticVds . setPmSecondaryOptionsMap ( new org.ovirt.engine.core.common.queries.ValueObjectMap () ) ; }
protected java.util.Set < java.lang.String > getExcludeUsers () { java.util.Set < java.lang.String > excludeUsers = new java.util.HashSet < java.lang.String > () ; if ( ( getExcludeItems () ) != null ) { for ( org.ovirt.engine.core.common.businessentities.aaa.DbUser item : getExcludeItems () ) { excludeUsers . add ( item . getExternalId () ) ; } } return excludeUsers ; }
@ org.junit.Test public void testRemoveNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > () ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties getVmwareVmProviderProperties ( org.ovirt.engine.core.compat.Guid dataCenterId ) { return new org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties ( getvCenter () . getEntity () , getEsx () . getEntity () , org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel . mergeDcAndCluster ( getVmwareDatacenter () . getEntity () , getVmwareCluster () . getEntity () , false ) , getVerifySSL () . getEntity () , dataCenterId , ( ( getProxyHost () . getSelectedItem () ) != null ? getProxyHost () . getSelectedItem () . getId () : null ) ) ; }
private void addSupportedQosTypes ( org.ovirt.engine.api.model.VersionCaps version ) { version . setQosTypes ( new org.ovirt.engine.api.model.QosTypes () ) ; addQosTypes ( version , QosType.NETWORK ) ; if ( org.ovirt.engine.api.restapi.utils.VersionUtils . greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5 ) ) { addQosTypes ( version , QosType.STORAGE , QosType.CPU ) ; } if ( org.ovirt.engine.api.restapi.utils.VersionUtils . greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_6 ) ) { addQosTypes ( version , QosType.HOSTNETWORK ) ; } }
private static boolean vmAssignedToUser ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > messages ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDbUserDao () . getAllForVm ( vmId ) . size () ) > NUMBER_CONSTANT ) { messages . add ( VdcBllMessages.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL . toString () ) ; return true ; } return false ; }
public boolean shouldVdsBeFenced () { boolean result = false ; if ( ( vds ) == null ) { return false ; } switch ( vds . getStatus () ) { case Down : case InstallFailed : case Maintenance : case NonOperational : case NonResponsive : result = true ; break; default: break; } return result ; }
public boolean isValidVmNetwork ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.Network > networksByName ) { java.lang.String networkName = iface . getNetworkName () ; return ( networkName == null ) || ( ( networksByName . containsKey ( networkName ) ) && ( networksByName . get ( networkName ) . isVmNetwork () ) ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > setUpLuns ( boolean withDummyLun ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > () ; for ( org.ovirt.engine.core.compat.Guid GUID : org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs () ; lun . setLUN_id ( GUID . toString () ) ; luns . add ( lun ) ; } if ( withDummyLun ) { org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs () ; dummyLun . setLUN_id ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.DUMMY_LUN_ID ) ; luns . add ( dummyLun ) ; } return luns ; }
public static void isAnyHostUpInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ! ( ( ( java.util.List < > ) ( source ) ) . isEmpty () ) ) ) { return true ; } return false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getUpHostListByCluster ( aQuery , clusterName , NUMBER_CONSTANT ) ; }
private void getVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVlanParent , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand == ( getModel () . getRemoveCommand () ) ) { return removeConfirmPopupProvider . get () ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
@ org.junit.Test public void testGetVmssIdsForOvfUpdateOneVm () { vmAndTemplatesGenerationsDao . updateOvfGenerations ( java.util.Collections . singletonList ( FixturesTool.VM_RHEL5_POOL_50 ) , java.util.Collections . singletonList ( java.lang.Long . valueOf ( NUMBER_CONSTANT ) ) , java.util.Arrays . asList ( STRING_CONSTANT ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > guids = vmAndTemplatesGenerationsDao . getVmsIdsForOvfUpdate ( FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , guids . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , FixturesTool.VM_RHEL5_POOL_50 , guids . get ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > convert ( java.lang.Object source ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = getClusterByServiceList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) , supportsVirtService , supportsGlusterService ) ; java.util.Collections . sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return list ; } return new java.util.ArrayList <> () ; }
private boolean validateNetworkProviderConfiguration () { return ( ! ( org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand . getParameters () . isInstallHost () ) ) || ( super . validateNetworkProviderConfiguration ( org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand . getParameters () . getVdsStaticData () . getOpenstackNetworkProviderId () , org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand . getParameters () . getNetworkMappings () ) ) ; }
@ org.junit.Test public void testExecuteQueryWithoutDirectOnly () { org.ovirt.engine.core.common.VdcObjectType type = org.ovirt.engine.core.utils.RandomUtils . instance () . pickRandom ( org.ovirt.engine.core.common.VdcObjectType . values () ) ; org.mockito.Mockito . when ( getQueryParameters () . getVdcObjectType () ) . thenReturn ( type ) ; org.mockito.Mockito . when ( permissionDaoMock . getTreeForEntity ( objectID , type , org.ovirt.engine.core.bll.UNPRIVILEGED_USER_SESSION_ID , getQueryParameters () . isFiltered () ) ) . thenReturn ( mockedPermissions ) ; assertQueryDaoCall ( false ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage () { if ( ( diskImage ) == null ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = org.ovirt.engine.core.bll.ExportRepoImageCommand . getDiskDao () . get ( org.ovirt.engine.core.bll.ExportRepoImageCommand . getParameters () . getImageGroupID () ) ; if ( ( disk != null ) && ( ( disk . getDiskStorageType () ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) ) { diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; } } return diskImage ; }
public void testBasicConstructors () { org.ovirt.engine.core.compat.TimeSpan span = new org.ovirt.engine.core.compat.TimeSpan ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Hours ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Minutes ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Seconds ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Days ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Milliseconds ) ; }
@ org.junit.Test public void testRemoveByRemoveIsoDomain () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > listOfRepoFiles = repoFileMetaDataDao . getRepoListForStorageDomain ( FixturesTool.SHARED_ISO_STORAGE_DOMAIN_FOR_SP2_AND_SP3 , ImageFileType.ISO ) ; org.junit.Assert . assertNotNull ( listOfRepoFiles ) ; org.junit.Assert . assertFalse ( listOfRepoFiles . isEmpty () ) ; storageDomainDao . remove ( FixturesTool.SHARED_ISO_STORAGE_DOMAIN_FOR_SP2_AND_SP3 ) ; listOfRepoFiles = getActiveIsoDomain () ; org.junit.Assert . assertNotNull ( listOfRepoFiles ) ; org.junit.Assert . assertTrue ( listOfRepoFiles . isEmpty () ) ; }
@ java.lang.Override protected void endSuccessfully () { org.ovirt.engine.core.bll.ExportVmCommand . endActionOnAllImageGroups () ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ExportVmCommand . getVm () ; populateVmData ( vm ) ; if ( org.ovirt.engine.core.bll.ExportVmCommand . getParameters () . getCopyCollapse () ) { endCopyCollapseOperations ( vm ) ; } else { updateSnapshotOvf ( vm ) ; } org.ovirt.engine.core.bll.VmHandler . unLockVm ( vm ) ; org.ovirt.engine.core.bll.ExportVmCommand . setSucceeded ( true ) ; }
public java.util.List < org.ovirt.api.metamodel.concepts.Attribute > getAttributes () { java.util.List < org.ovirt.api.metamodel.concepts.Attribute > result = new java.util.ArrayList ( attributes ) ; if ( ( ( base ) != null ) && ( ( base ) instanceof org.ovirt.api.metamodel.concepts.StructType ) ) { result . addAll ( ( ( org.ovirt.api.metamodel.concepts.StructType ) ( base ) ) . getAttributes () ) ; } return result ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.compat.Guid networkId = attachment . getNetworkId () ; java.lang.String networkName = attachment . getNetworkName () ; org.ovirt.engine.core.compat.Guid violatingEntityId = attachment . getId () ; return validateCoherentIdentification ( java.lang.String . valueOf ( violatingEntityId ) , networkId , networkName , EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY , networkBusinessEntityMap ) ; }
private void VolumeType_SelectedItemChanged () { org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ( ( org.ovirt.engine.core.common.businessentities.VolumeType ) ( getVolumeType () . getSelectedItem () ) ) ; org.ovirt.engine.core.common.businessentities.StorageType storageType = ( ( getStorageDomain () . getSelectedItem () ) == null ) ? org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN : ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getStorageDomain () . getSelectedItem () ) ) . getStorageType () ; updateVolumeFormat ( volumeType , storageType ) ; updateShareable ( volumeType , storageType ) ; }
private void listenToDetachableFields ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.Model > models ) { for ( org.ovirt.engine.ui.uicommonweb.models.Model model : models ) { if ( model instanceof org.ovirt.engine.ui.uicommonweb.models.ListModel ) { ( ( org.ovirt.engine.ui.uicommonweb.models.ListModel < > ) ( model ) ) . getSelectedItemChangedEvent () . addListener ( this ) ; } else if ( model instanceof org.ovirt.engine.ui.uicommonweb.models.EntityModel ) { ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < > ) ( model ) ) . getEntityChangedEvent () . addListener ( this ) ; } } }
@ java.lang.Override public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VDS , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue ; returnValue = runVdsCommand ( VDSCommandType.RemoveGlusterHook , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters ( server . getId () , entity . getGlusterCommand () , entity . getStage () , entity . getName () ) ) ; return new org.ovirt.engine.core.common.utils.Pair ( server , returnValue ) ; }
@ java.lang.Override public void template_SelectedItemChanged () { super . template_SelectedItemChanged () ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel () . getTemplate () . getSelectedItem () ) ) ; if ( template == null ) { return; } setupWindowModelFrom ( template ) ; updateHostPinning ( template . getMigrationSupport () ) ; doChangeDefautlHost ( template . getDedicatedVmForVds () ) ; }
private org.ovirt.engine.core.common.businessentities.network.VnicProfile findVnicProfileForUser ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > networkProfiles = getVnicProfileDao () . getAllForNetwork ( network . getId () ) ; for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : networkProfiles ) { if ( isVnicProfilePermitted ( userId , profile , false ) ) { return profile ; } } return null ; }
@ java.lang.Override protected void doChangeDefautlHost ( org.ovirt.engine.core.compat.Guid hostGuid ) { if ( hostGuid != null ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setId ( hostGuid ) ; getModel () . getDefaultHost () . setItems ( java.util.Arrays . asList ( vds ) ) ; } super . doChangeDefautlHost ( hostGuid ) ; }
@ org.junit.Test public void canDoActionThinProvisioningSpaceCheckSucceeds ( ) throws java.lang.Exception { final int availableSize = NUMBER_CONSTANT ; final int usedSize = NUMBER_CONSTANT ; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( sdid , VolumeType.Sparse ) ; mockVm () ; mockStorageDomain ( sdid , availableSize , usedSize ) ; mockStoragePoolIsoMap () ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; }
public void edit () { final org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = getSelectedItem () ; if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkQoSModel networkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkQoSModel ( networkQoS , this , getEntity () ) ; setWindow ( networkQoSModel ) ; networkQoSModel . getDataCenters () . setItems ( java.util.Arrays . asList ( getEntity () ) , getEntity () ) ; }
@ org.junit.Test public void getVdsWithVds () { final org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; final org.ovirt.engine.core.common.businessentities.VM vm = null ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b . setVds ( vds ) ; b . setVdsId ( vdsId ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertEquals ( vds , v ) ; }
private java.lang.String getLocalStoragesFormattedString () { java.lang.StringBuilder localStorages = new java.lang.StringBuilder () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : getSelectedItems () ) { if ( ( a . getStorageType () ) == ( org.ovirt.engine.core.common.businessentities.storage.StorageType.LOCALFS ) ) { localStorages . append ( a . getStorageName () ) . append ( STRING_CONSTANT ) ; } } return localStorages . substring ( NUMBER_CONSTANT , ( ( localStorages . length () ) - NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > filteredStorageDomains = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : storageDomains ) { if ( ( a . getStorageDomainType () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { filteredStorageDomains . add ( a ) ; } } postExportGetStorageDomainList ( filteredStorageDomains ) ; }
@ java.lang.Override protected boolean validateSuffix ( java.lang.String suffix , org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel ) { for ( java.lang.Object object : objectsInSetupMap . values () ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) ; if ( ! ( validateName ( ( ( template . getname () ) + suffix ) , template , entityModel ) ) ) { return false ; } } return true ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > getGlusterVolumes ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumesList = new java.util.ArrayList <> () ; java.lang.String volumeOptions = STRING_CONSTANT ; volumesList . add ( getGlusterVolume ( STRING_CONSTANT , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.VOL_ID_1 , GlusterVolumeType.REPLICATE , volumeOptions , getBricksForVolume ( NUMBER_CONSTANT ) , status ) ) ; volumesList . add ( getGlusterVolume ( STRING_CONSTANT , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.VOL_ID_2 , GlusterVolumeType.DISTRIBUTED_REPLICATE , STRING_CONSTANT , getBricksForVolume ( NUMBER_CONSTANT ) , status ) ) ; return volumesList ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.InitVdsOnUpCommand . getVdsGroup () ; if ( vdsGroup . supportsVirtService () ) { org.ovirt.engine.core.bll.InitVdsOnUpCommand . setSucceeded ( initVirtResources () ) ; } if ( vdsGroup . supportsGlusterService () ) { org.ovirt.engine.core.bll.InitVdsOnUpCommand . setSucceeded ( initGlusterPeerProcess () ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkLabelsByHostNicId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostNicLabelsResourceTest.nicId } , getEntityList () , failure ) ; control . replay () ; }
public static void getVmList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String poolName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + poolName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.GetGlusterHookContent , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters ( server . getId () , hook . getGlusterCommand () , hook . getStage () , hook . getName () ) ) ; return new org.ovirt.engine.core.common.utils.Pair ( hook , returnValue ) ; }
public static void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getQuotaStorageParameterMap ( org.ovirt.engine.core.compat.Guid quotaId , org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage ) { return createQuotaIdParameterMapper ( quotaStorage . getQuotaStorageId () ) . addValue ( STRING_CONSTANT , quotaId ) . addValue ( STRING_CONSTANT , quotaStorage . getStorageId () ) . addValue ( STRING_CONSTANT , null ) . addValue ( STRING_CONSTANT , quotaStorage . getStorageSizeGB () ) . addValue ( STRING_CONSTANT , null ) . addValue ( STRING_CONSTANT , null ) ; }
private void resetIrs () { if ( ( org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand . getStoragePool () . getspm_vds_id () ) != null ) { org.ovirt.engine.core.common.vdscommands.ResetIrsVDSCommandParameters tempVar = new org.ovirt.engine.core.common.vdscommands.ResetIrsVDSCommandParameters ( org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand . getStoragePool () . getId () , org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand . getStoragePool () . getspm_vds_id () ) ; tempVar . setIgnoreStopFailed ( true ) ; org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.ResetIrs , tempVar ) ; } }
public static void copySerialNumber ( org.ovirt.engine.api.model.SerialNumber serialNumber , org.ovirt.engine.core.common.businessentities.HasSerialNumberPolicy entity ) { if ( serialNumber . isSetPolicy () ) { entity . setSerialNumberPolicy ( org.ovirt.engine.api.restapi.types.SerialNumberMapper . map ( serialNumber . getPolicy () , null ) ) ; } if ( serialNumber . isSetValue () ) { java.lang.String customSerialNumber = ( STRING_CONSTANT . equals ( serialNumber . getValue () ) ) ? null : serialNumber . getValue () ; entity . setCustomSerialNumber ( customSerialNumber ) ; } }
public org.ovirt.engine.core.bll.ValidationResult hotUpdatePossible () { if ( ( getRequiredAction () ) == ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.UPDATE_VM_DEVICE ) ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported . networkLinking ( version ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.HOT_VM_INTERFACE_UPDATE_IS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator . clusterVersion () ) ; } else if ( ( ( getVnicProfile () ) != null ) && ( getVnicProfile () . isPortMirroring () ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_PERFORM_HOT_UPDATE_WITH_PORT_MIRRORING ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void handleAutoLogin ( org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData ) { final org.ovirt.engine.core.common.users.VdcUser vdcUser = autoLoginData . getVdcUser () ; com.google.gwt.core.client.Scheduler . get () . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand () { @ java.lang.Override public void execute () { lockInteractionManager . showLoadingIndicator () ; getLoginModel () . AutoLogin ( vdcUser ) ; } } ) ; user . setAutoLogin ( true ) ; }
public void getExternalNetworkMap ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllExternalNetworksOnProvider , new org.ovirt.engine.core.common.queries.IdQueryParameters ( providerId ) , aQuery ) ; }
@ org.junit.Test @ java.lang.Override public void testListCrashClientLocale ( ) throws java.lang.Exception { locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; collection . setUriInfo ( setUpUriExpectations ( null ) ) ; setUpEntityQueryExpectations ( org.ovirt.engine.api.restapi.resource.FAILURE ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , new java.lang.RuntimeException ( FAILURE ) ) ; } finally { locales . clear () ; } }
private void initListBoxEditors () { profileSelection = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.aaa.ProfileEntry > () { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.aaa.ProfileEntry object ) { return object . toString () ; } } ) ; roleSelection = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.Role > () ) ; namespaceSelection = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < java.lang.String > () { @ java.lang.Override protected java.lang.String renderNullSafe ( java.lang.String object ) { return object ; } } ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . getNetworkClusterDAO () . update ( getNetworkCluster () ) ; if ( getNetworkCluster () . getis_display () ) { org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . getNetworkClusterDAO () . setNetworkExclusivelyAsDisplay ( org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . getVdsGroupId () , getNetwork () . getId () ) ; } org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand . SetNetworkStatus ( org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . getVdsGroupId () , getNetwork () ) ; org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . setSucceeded ( true ) ; }
private boolean networkExists () { java.util.List < org.ovirt.engine.core.common.businessentities.network_cluster > networks = org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand . getNetworkClusterDAO () . getAllForCluster ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand . getVdsGroupId () ) ; for ( org.ovirt.engine.core.common.businessentities.network_cluster network_cluster : networks ) { if ( network_cluster . getnetwork_id () . equals ( getNetworkCluster () . getnetwork_id () ) ) { return true ; } } return false ; }
protected org.ovirt.engine.core.bll.ValidationResult validateDisplayType () { if ( ! ( org.ovirt.engine.core.bll.validator.VmValidationUtils . isDisplayTypeSupported ( vm . getOs () , vm . getVdsGroupCompatibilityVersion () , vm . getDefaultDisplayType () ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static java.lang.String startPasswordDialog ( java.lang.String user , java.lang.String msg ) throws java.io.IOException { org.ovirt.engine.core.config.EngineConfigLogic.log . debug ( STRING_CONSTANT ) ; java.lang.String prompt = null ; if ( user != null ) { prompt = ( ( msg + STRING_CONSTANT ) + user ) + STRING_CONSTANT ; } else { prompt = msg + STRING_CONSTANT ; } return org.ovirt.engine.core.config.EngineConfigLogic.console . readPassword ( prompt ) ; }
public org.ovirt.engine.core.bll.ValidationResult disksInStatus ( org.ovirt.engine.core.common.businessentities.ImageStatus applicableStatus ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages ) { if ( ( diskImage . getImageStatus () ) != applicableStatus ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_IN_APPLICABLE_STATUS , java.lang.String . format ( STRING_CONSTANT , applicableStatus . name () ) ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void setUpGetEntityExpectations ( boolean filter , boolean getCertInfo ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , filter } , getEntity ( NUMBER_CONSTANT ) ) ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void refreshHeavyWeightData () { log . debug ( STRING_CONSTANT ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusterDao () . getAll () ) { try { refreshClusterHeavyWeightData ( cluster ) ; } catch ( java.lang.Exception e ) { log . errorFormat ( STRING_CONSTANT , cluster . getname () , e ) ; } } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { setIsFingerprintVerified ( false ) ; if ( ( ( getGlusterHostAddress () . getEntity () ) == null ) || ( ( getGlusterHostAddress () . getEntity () . trim () . length () ) == NUMBER_CONSTANT ) ) { getGlusterHostFingerprint () . setEntity ( STRING_CONSTANT ) ; return; } fetchFingerprint ( getGlusterHostAddress () . getEntity () ) ; }
private void startRebalance () { if ( ( getSelectedItems () ) == null ) { return; } java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > () ; for ( java.lang.Object item : getSelectedItems () ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( item ) ) ; list . add ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRebalanceParameters ( volume . getId () , false , false ) ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.StartRebalanceGlusterVolume , list , null , true , true ) ; }
private boolean isLimitExceeded ( com.woorea.openstack.cinder.model.Limits limits , org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderType , int diskCount ) { if ( cinderType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { return ( ( limits . getAbsolute () . getTotalSnapshotsUsed () ) + diskCount ) > ( limits . getAbsolute () . getMaxTotalSnapshots () ) ; } if ( cinderType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { return ( ( limits . getAbsolute () . getTotalVolumesUsed () ) + diskCount ) > ( limits . getAbsolute () . getMaxTotalVolumes () ) ; } return false ; }
@ org.junit.Test public void testUpdateVdsGroupsProps () { org.junit.Assert . assertNotSame ( STRING_CONSTANT , existingVdsGroup . getEmulatedMachine () ) ; existingVdsGroup . setEmulatedMachine ( STRING_CONSTANT ) ; dao . update ( existingVdsGroup ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , existingVdsGroup . getEmulatedMachine () ) ; existingVdsGroup . setDetectEmulatedMachine ( true ) ; dao . update ( existingVdsGroup ) ; org.junit.Assert . assertEquals ( true , existingVdsGroup . isDetectEmulatedMachine () ) ; }
@ org.junit.Test public void testQueryWithFilter ( ) throws java.lang.Exception { java.util.List < java.lang.String > filterValue = new java.util.ArrayList <> () ; filterValue . add ( STRING_CONSTANT ) ; org.mockito.Mockito . reset ( httpHeaders ) ; org.mockito.Mockito . when ( httpHeaders . getRequestHeader ( org.ovirt.engine.api.restapi.resource.USER_FILTER_HEADER ) ) . thenReturn ( filterValue ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; java.util.List < org.ovirt.engine.api.model.Network > networks = getCollection () ; networks . sort ( java.util.Comparator . comparing ( Network : : getId ) ) ; verifyCollection ( networks ) ; }
@ org.junit.Test public void testListExport ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetDataCenterByStorageDomainExpectations ( GUIDS [ NUMBER_CONSTANT ] , NUMBER_CONSTANT ) ; setUpQueryExpectations ( STRING_CONSTANT , null , StorageDomainType.ImportExport ) ; collection . setUriInfo ( uriInfo ) ; verifyCollection ( getCollection () ) ; }
private java.lang.Object getSessionsVDSReturnVal ( boolean ret , int count ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; vdsRetValue . setSucceeded ( ret ) ; if ( ret ) { vdsRetValue . setReturnValue ( getSessions ( count , false ) ) ; } else { vdsRetValue . setReturnValue ( null ) ; } return vdsRetValue ; }
@ org.junit.Test public void testOtherFieldsNotValidatedInImportNotNewEntity () { command . getParameters () . setImportAsNewEntity ( false ) ; java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.action.ImportVmTemplateParameters > > validate = org.ovirt.engine.core.common.utils.ValidationUtils . getValidator () . validate ( command . getParameters () , command . getValidationGroups () . toArray ( new java.lang.Class < > [ NUMBER_CONSTANT ] ) ) ; org.junit.Assert . assertTrue ( validate . isEmpty () ) ; }
public void showCounts ( org.ovirt.engine.core.common.businessentities.ErrataCounts errataCounts ) { clearErrorMessage () ; progressDotsImage . setVisible ( false ) ; getTotalSecurity () . setLabel ( buildSecurityString ( errataCounts ) ) ; getTotalBugFix () . setLabel ( java.lang.String . valueOf ( errataCounts . getCountByType ( ErrataType.BUGFIX ) ) ) ; getTotalEnhancement () . setLabel ( java.lang.String . valueOf ( errataCounts . getCountByType ( ErrataType.ENHANCEMENT ) ) ) ; formPanel . setVisible ( true ) ; }
private org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters buildRemoveAllVmImagesParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters ( org.ovirt.engine.core.bll.RemoveVmCommand . getVmId () , images ) ; params . setParentCommand ( getActionType () ) ; params . setEntityInfo ( getParameters () . getEntityInfo () ) ; params . setParentParameters ( getParameters () ) ; return params ; }
@ org.junit.Before public void setup () { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap () ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainCommand ( params ) ) ; org.mockito.Mockito . doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao () ; org.mockito.Mockito . doReturn ( eventQueue ) . when ( cmd ) . getEventQueue () ; }
private org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > setupCanAddVmTests ( final int domainSizeGB ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB ) ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = createCommand ( vm ) ; org.ovirt.engine.core.bll.AddVmCommandTest . initCommandMethods ( cmd ) ; org.mockito.Mockito . doReturn ( createVmTemplate () ) . when ( cmd ) . getVmTemplate () ; org.mockito.Mockito . doReturn ( createStoragePool () ) . when ( cmd ) . getStoragePool () ; return cmd ; }
@ org.junit.Test public void validateSucceedsWithForceOption ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , true ) , null ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; importDiskId = org.ovirt.engine.core.compat.Guid . newGuid () ; existingDiskId = org.ovirt.engine.core.compat.Guid . newGuid () ; storageDomainId = org.ovirt.engine.core.compat.Guid . newGuid () ; storagePoolId = org.ovirt.engine.core.compat.Guid . newGuid () ; importDiskIds = new java.util.ArrayList ( java.util.Arrays . asList ( importDiskId , existingDiskId ) ) ; prepareMocks () ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > getSortedDisks () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskImages = new java.util.ArrayList ( vm . getDiskMap () . values () ) ; java.util.Collections . sort ( diskImages , new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator () ) ; java.util.Collections . sort ( diskImages , java.util.Collections . reverseOrder ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.DiskImageByBootAndSnapshotComparator ( vm . getId () ) ) ) ; return diskImages ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImageTemplate () { org.ovirt.engine.core.common.businessentities.storage.DiskImage i = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; i . setSizeInGigabytes ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.USED_SPACE_GB ) + ( org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB ) ) ) ; i . setActualSizeInBytes ( ( ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.REQUIRED_DISK_SIZE_GB ) * NUMBER_CONSTANT ) * NUMBER_CONSTANT ) * NUMBER_CONSTANT ) ) ; i . setImageId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; i . setStorageIds ( new java.util.ArrayList ( java.util.Arrays . asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return i ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsInterfacesByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest . setUpInterfaces () , failure ) ; control . replay () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; clusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterClustersWithoutArchitecture ( clusters ) ; model . setDataCentersAndClusters ( model , dataCenters , clusters , null ) ; }
@ java.lang.Override protected void addVmNetwork () { org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVdsGroupId () , getStoragePoolId () , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVdsGroup () . getcompatibility_version () , org.ovirt.engine.core.common.AuditLogType.ADD_VM_FROM_SNAPSHOT_INVALID_INTERFACES ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : vmFromConfiguration . getInterfaces () ) { vnicProfileHelper . updateNicWithVnicProfileForUser ( iface , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getCurrentUser () ) ; } vnicProfileHelper . auditInvalidInterfaces ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVmName () ) ; super . addVmNetwork () ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < Q > qosList = ( ( java.util.ArrayList < Q > ) ( returnValue . getReturnValue () ) ) ; qosMap = new java.util.HashMap <> () ; if ( qosList != null ) { for ( Q qos : qosList ) { qosMap . put ( qos . getId () , qos ) ; } } fetchProfiles () ; }
private boolean isTunnelMigrationUsed () { if ( ! ( org.ovirt.engine.core.common.FeatureSupported . tunnelMigration ( org.ovirt.engine.core.bll.MigrateVmCommand . getVm () . getVdsGroupCompatibilityVersion () ) ) ) { return false ; } return ( org.ovirt.engine.core.bll.MigrateVmCommand . getVm () . getTunnelMigration () ) != null ? org.ovirt.engine.core.bll.MigrateVmCommand . getVm () . getTunnelMigration () : org.ovirt.engine.core.bll.MigrateVmCommand . getVdsGroup () . isTunnelMigration () ; }
@ org.junit.Test public void testDiskAttachedToVMValid () { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest . createVM () ; org.mockito.Mockito . when ( vmDao . getVmsListForDisk ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . anyBoolean () ) ) . thenReturn ( java.util.Collections . singletonList ( vm ) ) ; org.junit.Assert . assertThat ( validator . isDiskAttachedToVm ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( NUMBER_CONSTANT , false , false ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , true , true ) ; setUpVDSGroupExpectations ( GUIDS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateNetworkOnCluster , org.ovirt.engine.core.common.action.NetworkClusterParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , true , true ) ) ; verifyUpdate ( resource . update ( getModel ( NUMBER_CONSTANT ) ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_ENABLE_FAILED ) ; }
@ java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper ( networkAttachment . getId () ) . addValue ( STRING_CONSTANT , networkAttachment . getNetworkId () ) . addValue ( STRING_CONSTANT , networkAttachment . getNicId () ) . addValue ( STRING_CONSTANT , org.ovirt.engine.core.utils.SerializationFactory . getSerializer () . serialize ( networkAttachment . getProperties () ) ) ; mapIpConfiguration ( networkAttachment , mapper ) ; return mapper ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getIsoStorageModels () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > models = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > () ; org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel nfsIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel () ; models . add ( nfsIsoModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel posixIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel () ; models . add ( posixIsoModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel localIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel () ; models . add ( localIsoModel ) ; addTypeToStorageModels ( StorageDomainType.ISO , models ) ; return models ; }
@ java.lang.Override public void Template_SelectedItemChanged () { super . Template_SelectedItemChanged () ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel () . getTemplate () . getSelectedItem () ) ) ; if ( template == null ) { return; } setupWindowModelFrom ( template ) ; updateHostPinning ( template . getMigrationSupport () ) ; doChangeDefautlHost ( template . getdedicated_vm_for_vds () ) ; }
@ org.junit.Test public void testGetByClusterIdAndServiceType () { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > services = dao . getByClusterIdAndServiceType ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_TYPE ) ; org.junit.Assert . assertNotNull ( services ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , services . size () ) ; verifyServiceOnServer1 ( services . get ( NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testRemoveForced ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations () ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations ( NUMBER_CONSTANT ) ; setUpActionExpectations ( VdcActionType.RemoveVm , org.ovirt.engine.core.common.action.RemoveVmParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.TRUE } , true , true ) ; verifyRemove ( collection . remove ( GUIDS [ NUMBER_CONSTANT ] . toString () , new org.ovirt.engine.api.model.Action () { { setForce ( true ) ; } } ) ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getNewCommand () ) ) { newProfile () ; } else if ( command == ( getEditCommand () ) ) { edit () ; } else if ( command == ( getRemoveCommand () ) ) { remove () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } }
@ java.lang.Override protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object . getEntity () ) ) ; org.ovirt.engine.core.common.businessentities.storage.Disk disk = diskModel . getDisk () ; boolean isScsiPassthrough = disk . isScsiPassthrough () ; boolean ideLimitation = ( diskModel . getDiskInterface () . getSelectedItem () ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE ) ; return ( ! isScsiPassthrough ) && ( ! ideLimitation ) ; }
private void initEditorsWithIcon () { windowsHostnameEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxOnlyEditor () ; org.ovirt.engine.ui.common.widget.label.EnableableFormLabel label = new org.ovirt.engine.ui.common.widget.label.EnableableFormLabel () ; label . setText ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants . cloudInitHostnameLabel () ) ; windowsHostnameEditorWithInfo = new org.ovirt.engine.ui.common.widget.EntityModelWidgetWithInfo ( label , windowsHostnameEditor ) ; windowsHostnameEditorWithInfo . setExplanation ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants . windowsHostNameInfo () ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { deactivate () ; java.util.List < java.lang.String > consoleDevices = returnValue . getReturnValue () ; getModel () . getIsConsoleDeviceEnabled () . setEntity ( ( ! ( consoleDevices . isEmpty () ) ) ) ; activate () ; postDoUpdateManagedFieldsFrom ( vmBase ) ; }
protected boolean validateImagesAndVMStates () { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () . getStoragePoolId () , Guid.Empty , hasImages () , hasImages () , hasImages () , hasImages () , true , true , null ) ; }
@ java.lang.Override public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { int selectedIndex = bootSequenceBox . getSelectedIndex () ; bootSequenceModel . setSelectedItem ( bootSequenceModel . getItems () . get ( selectedIndex ) ) ; bootSequenceUpButton . setEnabled ( bootSequenceModel . getMoveItemUpCommand () . getIsExecutionAllowed () ) ; bootSequenceDownButton . setEnabled ( bootSequenceModel . getMoveItemDownCommand () . getIsExecutionAllowed () ) ; }
private void updateReportsAvailability () { if ( org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . isReportsEnabled () ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.VDS > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper . getInstance () . getResourceSubActions ( STRING_CONSTANT , getModelProvider () ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions . size () ) > NUMBER_CONSTANT ) ) { getTable () . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView.constants . showReportHost () , resourceSubActions ) ) ; } } }
@ java.lang.Override public boolean canBeSelected () { org.ovirt.engine.core.common.businessentities.DisplayType displayType = ( ( getEntity () . getDisplayType () ) != null ) ? getEntity () . getDisplayType () : getEntity () . getDefaultDisplayType () ; boolean hasVmSpiceSupport = java.lang.Boolean.TRUE . equals ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . hasSpiceSupport ( getEntity () . getOs () , getEntity () . getVdsGroupCompatibilityVersion () ) ) ; return ( displayType == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) && hasVmSpiceSupport ; }
@ org.junit.Test public void testGetNetworkDiskTypeForV41ClusterEnabled () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setClusterCompatibilityVersion ( Version.v4_1 ) ; vm . setClusterId ( org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildUtilsTest.CLUSTER_ID ) ; org.mockito.Mockito . doReturn ( getSupportedAdditionalClusterFeatures ( true ) ) . when ( clusterFeatureDao ) . getSupportedFeaturesByClusterId ( org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildUtilsTest.CLUSTER_ID ) ; org.junit.Assert . assertEquals ( VdsProperties.NETWORK , underTest . getNetworkDiskType ( vm , StorageType.GLUSTERFS ) . get () ) ; }
@ org.junit.Before public void prepareParams () { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase () ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand < org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase > ( parameters ) ) ; org.mockito.Mockito . doReturn ( storageConnDao ) . when ( command ) . getStorageConnDao () ; }
@ org.junit.Test public void testRemoveAllByVolumeId () { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = volumeDao . getById ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.VOLUME_ID ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , volume . getSnapshotsCount () . intValue () ) ; dao . removeAllByVolumeId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.VOLUME_ID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > snapshots = dao . getAllByVolumeId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.VOLUME_ID ) ; org.junit.Assert . assertTrue ( snapshots . isEmpty () ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume1 = volumeDao . getById ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.VOLUME_ID ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , volume1 . getSnapshotsCount () . intValue () ) ; }
private void setupMock () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; returnValue . setSucceeded ( true ) ; returnValue . setReturnValue ( expected ) ; org.mockito.Mockito . doReturn ( returnValue ) . when ( getQuery () ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeOptionsInfo ) , org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . when ( glusterUtils . getUpServer ( CLUSTER_ID ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
@ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { if ( ignoreFailure ( caught ) ) { return; } org.ovirt.engine.ui.frontend.Frontend.logger . log ( java.util.logging.Level.SEVERE , ( STRING_CONSTANT + caught ) , caught ) ; getEventsHandler () . runQueryFailed ( null ) ; failureEventHandler ( caught ) ; callback . getDel () . onSuccess ( null ) ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertFalse ( model . isSetVm () ) ; assertTrue ( model . isSparse () ) ; assertTrue ( model . isPropagateErrors () ) ; }
@ org.junit.Test public void testAddIncompleteParametersNoName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setDescription ( DESCRIPTIONS [ NUMBER_CONSTANT ] ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Network incoming , org.ovirt.engine.api.model.Network entity ) { org.ovirt.engine.api.model.Network updated = getMapper ( modelType , org.ovirt.engine.api.model.Network . class ) . map ( incoming , entity ) ; return new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( entity . getDataCenterId () , updated ) ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void poll () { if ( isMonitoringNeeded ( vdsManager . getStatus () ) ) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher ( vdsManager ) ; long fetchTime = java.lang.System . nanoTime () ; if ( fetcher . fetch () ) { getVmsMonitoring () . perform ( fetcher . getChangedVms () , fetchTime , vdsManager , true ) ; processDevices ( fetcher . getVdsmVms () . stream () , fetchTime ) ; } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log . info ( STRING_CONSTANT , vdsManager . getVdsName () ) ; } } }
private void addConfigurationTypes ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.ConfigurationType [] types ) { version . setConfigurationTypes ( new org.ovirt.engine.api.model.ConfigurationTypes () ) ; for ( org.ovirt.engine.api.model.ConfigurationType type : types ) { version . getConfigurationTypes () . getConfigurationTypes () . add ( type . value () ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap runInTransaction () { org.ovirt.engine.core.bll.context.CompensationContext context = getCompensationContext () ; context . snapshotEntityStatus ( map ) ; map . setStatus ( status ) ; getStoragePoolIsoMapDAO () . updateStatus ( map . getId () , map . getStatus () ) ; getCompensationContext () . stateChanged () ; return null ; }
@ java.lang.SuppressWarnings ( value = { STRING_CONSTANT , STRING_CONSTANT } ) private void initManualWidgets () { nicTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer () ) ; pluggedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( STRING_CONSTANT ) ; unpluggedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( STRING_CONSTANT ) ; linkedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( STRING_CONSTANT ) ; unlinkedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( STRING_CONSTANT ) ; enableManualMacCheckbox = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; try { new org.ovirt.engine.ui.uicompat.MailAddress ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.RuntimeException e ) { result . setSuccess ( false ) ; result . getReasons () . add ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . invalidEmailAddressInvalidReason () ) ; } return result ; }
@ java.lang.Override public org.ovirt.engine.api.model.GlusterHook get () { org.ovirt.engine.api.model.GlusterHook hook = performGet ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( guid , true ) ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery ( VdcQueryType.GetGlusterHookContent , new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( guid ) ) ; if ( ( ( result != null ) && ( result . getSucceeded () ) ) && ( ( result . getReturnValue () ) != null ) ) { hook . setContent ( result . getReturnValue () ) ; } return hook ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createDiskImage () { return new org.ovirt.engine.core.common.businessentities.DiskImage ( true , new java.util.Date () , new java.util.Date () , NUMBER_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , STRING_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , NUMBER_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.common.businessentities.ImageStatus.OK , new java.util.Date () , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.VmEntityType.VM , NUMBER_CONSTANT , null , null , org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED , false ) ; }
private void managePrestartedVmsInPool ( org.ovirt.engine.core.common.businessentities.VmPool vmPool ) { org.ovirt.engine.core.compat.Guid vmPoolId = vmPool . getVmPoolId () ; int prestartedVms = org.ovirt.engine.core.bll.VmPoolCommandBase . getNumOfPrestartedVmsInPool ( vmPoolId , new java.util.ArrayList < java.lang.String > () ) ; int missingPrestartedVms = ( vmPool . getPrestartedVms () ) - prestartedVms ; if ( missingPrestartedVms > NUMBER_CONSTANT ) { int numOfVmsToPrestart = java.lang.Math . min ( missingPrestartedVms , org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.VmPoolMonitorBatchSize ) ) ; org.ovirt.engine.core.bll.VmPoolMonitor.log . info ( STRING_CONSTANT , vmPoolId , missingPrestartedVms , numOfVmsToPrestart ) ; prestartVms ( vmPoolId , numOfVmsToPrestart ) ; } }
private boolean isRequiresDescription ( java.lang.reflect.Method m ) { boolean pathRelevant = ! ( ( m . isAnnotationPresent ( javax.ws.rs.Path . class ) ) && ( m . getAnnotation ( javax.ws.rs.Path . class ) . value () . contains ( STRING_CONSTANT ) ) ) ; boolean returnValueRelevant = ! ( m . getReturnType () . equals ( org.ovirt.engine.api.resource.CreationResource . class ) ) ; return pathRelevant && returnValueRelevant ; }
public void setDefaultInterface () { org.ovirt.engine.core.compat.Guid vmId = getVmId () ; if ( ( org.ovirt.engine.core.compat.Guid . isNullOrEmpty ( vmId ) ) || ( ( getDisk () ) == null ) ) { getDiskInterface () . setSelectedItem ( DiskInterface.VirtIO ) ; } else { getDiskInterface () . setSelectedItem ( getDisk () . getDiskVmElementForVm ( vmId ) . getDiskInterface () ) ; } }
@ org.junit.Test public void commandSucceeds () { java.util.List < java.lang.String > pubKeys = new java.util.ArrayList <> () ; pubKeys . add ( STRING_CONSTANT ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHostPubKeyToSlaveInternalCommand ( new org.ovirt.engine.core.common.action.gluster.UpdateGlusterHostPubKeyToSlaveParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , pubKeys ) , null ) ) ; org.mockito.Mockito . doReturn ( vds ) . when ( command ) . getUpServer () ; org.junit.Assert . assertTrue ( command . validate () ) ; }
@ java.lang.Override protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { java.lang.Boolean migrationNetworkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.MigrationNetworkEnabled , clusterNetworkModel . getCluster () . getcompatibility_version () . toString () ) ) ) ; return ( migrationNetworkEnabled && ( clusterNetworkModel . isAttached () ) ) && ( ! ( clusterNetworkModel . isExternal () ) ) ; }
private void fetchCpuProfiles ( org.ovirt.engine.core.compat.Guid clusterId ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetCpuProfilesByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > () { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > cpuProfiles = returnValue . getReturnValue () ; getCpuProfiles () . setItems ( cpuProfiles ) ; } } ) ) ; }
protected boolean parentHasCallback () { if ( ( ( getParameters () . getParentCommand () ) != ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ) && ( ( getParameters () . getParentParameters () ) != null ) ) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil . getCommandEntity ( getParameters () . getParentParameters () . getCommandId () ) ; return ( commandEntity != null ) && ( commandEntity . isCallbackEnabled () ) ; } return false ; }
private void addCollectionAction ( java.lang.String rel , java.lang.String [] periods , int i , java.lang.String period , org.ovirt.engine.sdk.codegen.holders.ResourceHolder resourceHolder , org.ovirt.engine.sdk.entities.DetailedLink detailedLink ) { java.lang.String methodName = getActionMethodName ( period , periods [ ( i - NUMBER_CONSTANT ) ] ) ; if ( ! ( resourceHolder . hasMethod ( period ) ) ) { java.lang.String docParams = org.ovirt.engine.sdk.codegen.documentation.DocsGen . generate ( detailedLink ) ; resourceHolder . addMethod ( period , this . resourceActionMethodTemplate . getTemplate ( methodName , rel , docParams , detailedLink ) ) ; } }
private void setNewIdInImportedCollections ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice managedDevice : vmBase . getManagedDeviceMap () . values () ) { if ( ! ( isDiskOrInterface ( managedDevice ) ) ) { managedDevice . setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmBase . getId () ) ) ; } } for ( org.ovirt.engine.core.common.businessentities.VmDevice unmanagedDevice : vmBase . getUnmanagedDeviceList () ) { unmanagedDevice . setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmBase . getId () ) ) ; } }
private void mockGetForDisk ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > vmsMap = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > () ; vmsMap . put ( java.lang.Boolean.TRUE , vms ) ; org.mockito.Mockito . when ( vmDAO . getForDisk ( diskImageGuid , true ) ) . thenReturn ( vmsMap ) ; }
private org.ovirt.engine.core.common.businessentities.AuditLog saveToDb ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = createAuditLog ( auditLogable , logType , loggerString ) ; if ( auditLog == null ) { return null ; } auditLogable . setPropertiesForAuditLog ( auditLog ) ; auditLog . setUserName ( org.apache.commons.lang.StringUtils . abbreviate ( auditLog . getUserName () , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.USERNAME_LENGTH ) ) ; getDbFacadeInstance () . getAuditLogDao () . save ( auditLog ) ; return auditLog ; }
@ java.lang.Override public java.lang.Object runInTransaction () { vm . setRunOnVds ( getVdsId () ) ; if ( getParameters () . isClearHibernationVolumes () ) { vm . setHibernationVolHandle ( StringUtils.EMPTY ) ; } org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmDynamicDao () . update ( vm . getDynamicData () ) ; return null ; }
public static void getVnicProfilesByNetworkId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid networkId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVnicProfilesByNetworkId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( networkId ) , aQuery ) ; }
@ org.junit.Test public void validateFailsOnNoHook () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate ( false ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST . toString () ) ) ; }
private void mockStoragePool () { final org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; pool . setId ( command . getParameters () . getStoragePoolId () ) ; org.mockito.Mockito . when ( storagePoolDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( pool ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.ArchitectureType architecture ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > filteredClusters = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters ) { if ( ( ( architecture == ( org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ) ) || ( ( cluster . getArchitecture () ) == ( org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ) ) ) || ( ( cluster . getArchitecture () ) == architecture ) ) { filteredClusters . add ( cluster ) ; } } updateClusterList ( this , filteredClusters ) ; }
@ java.lang.Override public void endWithFailure () { if ( ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getParameters () . getStage () ) == ( org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT ) ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( getMovedDiskIds () , ImageStatus.OK , ImageStatus.OK , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getCompensationContext () ) ; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . setSucceeded ( true ) ; }
public org.ovirt.engine.core.utils.ovf.xml.XmlNode selectSingleNode ( java.lang.String string ) { try { javax.xml.xpath.XPathFactory factory = javax.xml.xpath.XPathFactory . newInstance () ; javax.xml.xpath.XPath xPath = factory . newXPath () ; java.lang.Object o = xPath . evaluate ( string , doc , javax.xml.xpath.XPathConstants.NODE ) ; return o != null ? new org.ovirt.engine.core.utils.ovf.xml.XmlNode ( ( ( org.w3c.dom.Node ) ( o ) ) ) : null ; } catch ( javax.xml.xpath.XPathExpressionException e ) { throw new java.lang.RuntimeException ( ( STRING_CONSTANT + string ) , e ) ; } }
private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions () { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct () ; options . add ( VdsProperties.connectivityCheck , java.lang.Boolean . toString ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . isCheckConnectivity () ) ) ; if ( ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . getConectivityTimeout () ) >= NUMBER_CONSTANT ) { options . add ( VdsProperties.connectivityTimeout , org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . getConectivityTimeout () ) ; } return options ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVnicProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , null ) ; try { resource . remove () ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfileResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ java.lang.Override protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel model ) { driver . edit ( model ) ; monitorCount . setValue ( java.lang.Integer . toString ( getModel () . getMonitorCount () ) ) ; oS . setValue ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getOsName ( getModel () . getOS () ) ) ; }
protected boolean performImagesChecks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( vm . getId () , org.ovirt.engine.core.bll.AddDiskCommand . getReturnValue () . getCanDoActionMessages () , vm . getStoragePoolId () , getStorageDomainId () . getValue () , false , true , false , false , false , true , java.util.Collections . < org.ovirt.engine.core.common.businessentities.Disk > emptyList () ) ; }
public static void initOsArchitecture () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osArchitectures = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetOsArchitectures ) , callback ) ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot () ; java.lang.String memoryVolume = ( ( activeSnapshot != null ) && ( ! ( org.ovirt.engine.core.bll.ImportVmCommand . getParameters () . isImportAsNewEntity () ) ) ) ? activeSnapshot . getMemoryVolume () : org.apache.commons.lang.StringUtils.EMPTY ; return snapshotsManager . addActiveSnapshot ( snapshotId , org.ovirt.engine.core.bll.ImportVmCommand . getVm () , memoryVolume , org.ovirt.engine.core.bll.ImportVmCommand . getCompensationContext () ) ; }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; } } ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
static org.ovirt.engine.api.model.Network setUpEntityExpectations ( org.ovirt.engine.api.model.Network entity , boolean isDisplay , boolean isMigration , boolean isRequired , int index ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster () ; networkCluster . setDisplay ( isDisplay ) ; networkCluster . setMigration ( isMigration ) ; networkCluster . setRequired ( isRequired ) ; org.mockito.Mockito . when ( entity . getCluster () ) . thenReturn ( networkCluster ) ; return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest . setUpEntityExpectations ( entity , index ) ; }
private void UpdateTotalDiskSize () { java.lang.Integer available = getStorageDynamicData () . getAvailableDiskSize () ; java.lang.Integer used = getStorageDynamicData () . getUsedDiskSize () ; if ( ( available != null ) && ( used != null ) ) { setTotalDiskSize ( ( available + used ) ) ; } else { setTotalDiskSize ( null ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > convert ( java.lang.Object source ) { if ( source == null ) { return new java.util.ArrayList <> () ; } final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; return getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; }
@ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( ( p . getUsageCpuPercent () ) + ( calcSpmCpuConsumption ( p ) ) ) < lowUtilization ) && ( ( p . getVmCount () ) >= minVmCount ) ) && ( ( ( p . getCpuOverCommitTimestamp () ) == null ) || ( ( ( getTime () . getTime () ) - ( p . getCpuOverCommitTimestamp () . getTime () ) ) < ( java.util.concurrent.TimeUnit.MINUTES . toMillis ( cpuOverCommitDurationMinutes ) ) ) ) ; }
private void updateIncomingId ( org.ovirt.engine.api.model.QuotaStorageLimit incoming , org.ovirt.engine.core.common.businessentities.Quota entity ) { if ( ( incoming . isSetStorageDomain () ) && ( incoming . getStorageDomain () . isSetId () ) ) { incoming . setId ( incoming . getStorageDomain () . getId () ) ; } else { incoming . setId ( entity . getId () . toString () ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetImagesList , org.ovirt.engine.core.common.queries.GetImagesListParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , org.ovirt.engine.core.common.businessentities.ImageFileType.All } , setUpFiles () , failure ) ; control . replay () ; }
@ java.lang.Override protected boolean verifySourceDomains () { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > poolDomainsMap = org.ovirt.engine.core.common.businessentities.Entities . businessEntitiesById ( org.ovirt.engine.core.bll.AddVmFromTemplateCommand . getPoolDomains () ) ; java.util.EnumSet < org.ovirt.engine.core.common.businessentities.StorageDomainStatus > validDomainStatuses = java.util.EnumSet . of ( StorageDomainStatus.Active ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter . filterImageDisks ( getImagesToCheckDestinationStorageDomains () , org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ONLY_NOT_SHAREABLE ) ; validDisksDomains = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . findDomainsInApplicableStatusForDisks ( templateDiskImages , poolDomainsMap , validDomainStatuses ) ; return validate ( diskImagesOnAnyApplicableDomains ( templateDiskImages , validDisksDomains , poolDomainsMap , validDomainStatuses ) ) ; }
protected void updateIsDiskHotPlugAvailable () { org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = vm . getVdsGroupCompatibilityVersion () ; if ( clusterCompatibilityVersion == null ) { setIsDiskHotPlugSupported ( false ) ; } else { setIsDiskHotPlugSupported ( ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDiskHotpluggableInterfaces ( getEntity () . getOs () , clusterCompatibilityVersion ) . isEmpty () ) ) ) ; } }
@ java.lang.Override public void run () { try { backend . RunAction ( task , sp ) ; } finally { if ( ( user ) != null ) { backend . Logoff ( sh . sessionize ( new org.ovirt.engine.core.common.action.LogoutUserParameters ( user . getUserId () ) ) ) ; } sh . clean () ; } }
@ java.lang.Override public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { getView () . rdpSelected ( event . getValue () ) ; getView () . spiceSelected ( ( ! ( event . getValue () ) ) ) ; getView () . setWanOptionsVisible ( ( ( wanOptionsAvailable ) && ( ! ( event . getValue () ) ) ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Throwable { java.lang.Object [] args = invocation . getArguments () ; org.ovirt.engine.core.common.businessentities.storage.DiskImage arg = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( args [ NUMBER_CONSTANT ] ) ) ; return createDiskSnapshot ( arg . getId () , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void getVmTemplateWithVm () { b . setVmTemplate ( null ) ; b . setVmTemplateId ( null ) ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setVmtGuid ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VmTemplate t = b . getVmTemplate () ; org.junit.Assert . assertNotNull ( t ) ; }
public void updateClusterAndMoveMacs ( org.ovirt.engine.core.common.businessentities.Cluster cluster , org.ovirt.engine.core.compat.Guid newMacPoolId , org.ovirt.engine.core.bll.context.CommandContext commandContext ) { org.ovirt.engine.core.compat.Guid oldMacPoolId = cluster . getMacPoolId () ; moveMacsOfUpdatedCluster ( cluster , newMacPoolId , commandContext ) ; if ( needToMigrateMacs ( oldMacPoolId , newMacPoolId ) ) { cluster . setMacPoolId ( newMacPoolId ) ; clusterDao . update ( cluster ) ; } }
@ org.junit.Test public void successVmInPreviewForAttachedSnapshot () { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice . setSnapshotId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
private static void addSoundCard ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion ) { java.lang.String soundDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase . getSoundDevice ( vmBase , vdsGroupCompatibilityVersion ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . NewGuid () , vmBase . getId () ) , VmDeviceGeneralType.SOUND , org.ovirt.engine.core.common.utils.VmDeviceType . getSoundDeviceType ( soundDevice ) , new java.util.HashMap < java.lang.String , java.lang.Object > () , true , true , null ) ; }
public void getAllowClusterWithVirtGlusterEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ java.lang.Override public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.VmPool selectedItem ) { driver . edit ( getDetailModel () ) ; monitorCount . setValue ( java.lang.String . valueOf ( getDetailModel () . getMonitorCount () ) ) ; isStateless . setValue ( java.lang.Boolean . toString ( getDetailModel () . getIsStateless () ) ) ; oS . setValue ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getOsName ( getDetailModel () . getOS () ) ) ; formBuilder . update ( getDetailModel () ) ; }
private void InitSpmPriorities1 () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDefaultSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView view = ( ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView ) ( target ) ) ; view.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; InitSpmPriorities2 () ; } } ) ) ; }
@ org.junit.Test public void diskImagesDontExist () { org.mockito.Mockito . doReturn ( false ) . when ( validator ) . isDiskExists ( disk1 . getId () ) ; org.mockito.Mockito . doReturn ( false ) . when ( validator ) . isDiskExists ( disk2 . getId () ) ; org.junit.Assert . assertThat ( validator . diskImagesNotExist () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_DISKS_NOT_EXIST ) ) ; }
private void initDiskStorageDomain ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.Boolean sdSupportsDiscard ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setStorageName ( org.ovirt.engine.core.bll.validator.storage.DiskVmElementDiscardSupportValidatorTest.storageDomainName ) ; storageDomain . setStorageType ( storageType ) ; storageDomain . setSupportsDiscard ( sdSupportsDiscard ) ; storageDomainId = org.ovirt.engine.core.compat.Guid . newGuid () ; storageDomain . setId ( storageDomainId ) ; org.mockito.MockitoAnnotations . initMocks ( this ) ; org.ovirt.engine.core.bll.validator.storage.DiskVmElementDiscardSupportValidatorTest.injectorRule . bind ( org.ovirt.engine.core.dao.StorageDomainDao . class , storageDomainDao ) ; org.mockito.Mockito . when ( storageDomainDao . get ( storageDomainId ) ) . thenReturn ( storageDomain ) ; }
@ java.lang.Override protected void onActionSucceeded ( org.ovirt.engine.core.compat.Guid macPoolId ) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getEntity () ; macPool . setId ( macPoolId ) ; java.util.Collection < org.ovirt.engine.core.common.businessentities.MacPool > macPools = new java.util.ArrayList ( dcModel . getMacPoolListModel () . getItems () ) ; macPools . add ( macPool ) ; dcModel . getMacPoolListModel () . setItems ( macPools ) ; dcModel . getMacPoolListModel () . setSelectedItem ( macPool ) ; this . setConfirmWindow ( null ) ; }
private org.ovirt.engine.ui.common.widget.editor.generic.EntityModelLabelEditor < java.util.Date > getInstanceOfDateEditor () { return new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelLabelEditor ( new com.google.gwt.text.shared.AbstractRenderer < java.util.Date > () { @ java.lang.Override public java.lang.String render ( java.util.Date entity ) { if ( entity == null ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeRebalanceStatusPopupView.constants . unAvailablePropertyLabel () ; } return renderer . render ( entity ) ; } } ) ; }
public static void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) , aQuery ) ; }
private void doTestBadAddNic ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.AddVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { PARENT_ID } , canDo , success ) ) ; org.ovirt.engine.api.model.NIC model = getModel ( NUMBER_CONSTANT ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void freeMac ( java.lang.String mac ) { lockObj . writeLock () . lock () ; try { if ( ! ( initialized ) ) { logInitializationError ( ( ( STRING_CONSTANT + mac ) + STRING_CONSTANT ) ) ; } else { internalFreeMac ( mac ) ; } } finally { lockObj . writeLock () . unlock () ; } }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.action.VdcActionType actionType ) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID ; if ( ! ( vm . isManagedVm () ) ) { if ( ! ( org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_NON_MANAGED_VMS . contains ( actionType ) ) ) { validationResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM ) ; } } return validationResult ; }
@ java.lang.Override public void doFilter ( final javax.servlet.ServletRequest request , final javax.servlet.ServletResponse response , final javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { java.util.Locale locale = determineLocale ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ) ; request . setAttribute ( org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE , locale ) ; setCookie ( ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) , request . getServletContext () , locale ) ; chain . doFilter ( request , response ) ; }
private void onRepin () { final org.ovirt.engine.ui.uicommonweb.models.vms.hostdev.RepinHostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.hostdev.RepinHostModel ) ( getWindow () ) ) ; model . startProgress () ; pinVmToHost ( model . getPinnedHost () . getSelectedItem () . getId () , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { model . stopProgress () ; setWindow ( null ) ; } } ) ; }
public void setup () { try { org.quartz.SchedulerFactory sf = new org.quartz.impl.StdSchedulerFactory () ; sched = sf . getScheduler () ; sched . start () ; sched . getListenerManager () . addJobListener ( new org.ovirt.engine.core.utils.timer.FixedDelayJobListener ( this ) , org.quartz.impl.matchers.GroupMatcher . jobGroupEquals ( Scheduler.DEFAULT_GROUP ) ) ; } catch ( org.quartz.SchedulerException se ) { log . error ( STRING_CONSTANT , se . getMessage () ) ; log . debug ( STRING_CONSTANT , se ) ; } }
@ org.junit.Test public void appendCustomValueUsesNullSeparator () { final java.lang.String key = STRING_CONSTANT ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String newVal = STRING_CONSTANT ; final java.lang.String sep = null ; b . addCustomValue ( key , value ) ; b . appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b . getCustomValue ( key ) ; org.junit.Assert . assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
@ java.lang.Override public javax.ws.rs.core.Response remove ( org.ovirt.engine.api.model.Action action ) { get () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections () ; connection . setId ( id ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty ; if ( ( action != null ) && ( action . isSetHost () ) ) { hostId = getHostId ( action . getHost () ) ; } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId , false ) ; return performAction ( VdcActionType.RemoveStorageServerConnection , parameters ) ; }
protected void unlockVm () { if ( ( org.ovirt.engine.core.bll.VmCommand . getVm () ) != null ) { if ( ( org.ovirt.engine.core.bll.VmCommand . getVm () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { org.ovirt.engine.core.bll.VmHandler . unlockVm ( org.ovirt.engine.core.bll.VmCommand . getVm () , org.ovirt.engine.core.bll.VmCommand . getCompensationContext () ) ; } } else { org.ovirt.engine.core.bll.VmCommand . setCommandShouldBeLogged ( false ) ; log . warn ( STRING_CONSTANT ) ; } }
@ com.google.inject.Provides @ com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Erratum , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.VmErrataListModel > getVmErrataListProvider ( com.google.gwt.event.shared.EventBus eventBus , com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > defaultConfirmPopupProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > > mainModelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.VmErrataListModel > modelProvider ) { org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider < org.ovirt.engine.core.common.businessentities.Erratum , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.VmErrataListModel > result = new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider ( eventBus , defaultConfirmPopupProvider ) ; result . setMainModelProvider ( mainModelProvider ) ; result . setModelProvider ( modelProvider ) ; return result ; }
@ org.junit.Test public void testGetEntityNameByIdAndTypeForDataCenter () { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = storagePoolDao . get ( org.ovirt.engine.core.dao.EntityDaoImplTest.STORAGE_POOL_ID ) ; org.junit.Assert . assertNotNull ( storagePool ) ; java.lang.String name = storagePool . getName () ; org.junit.Assert . assertEquals ( name , underTest . getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.STORAGE_POOL_ID , VdcObjectType.StoragePool ) ) ; }
public static void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters () , aQuery ) ; }
void initLists ( org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object ) { iscsiTargetToLunView = new org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiTargetToLunView ( treeCollapsedHeight , treeExpandedHeight , false , multiSelection ) ; iscsiLunToTargetView = new org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiLunToTargetView ( lunsTreeHeight , multiSelection ) ; dialogTabPanel . getElement () . getStyle () . setHeight ( tabContentHeight , Unit.PX ) ; lunsListPanel . setWidget ( iscsiLunToTargetView ) ; targetsToLunsPanel . setWidget ( iscsiTargetToLunView ) ; }
public void putList ( java.lang.String key , java.util.List < java.lang.String > values ) { if ( values == null ) { values = java.util.Collections . emptyList () ; } java.lang.String value = java.lang.String . join ( STRING_CONSTANT , values ) ; put ( key , value ) ; }
@ org.junit.Test public void testShouldCheckVmOnClusterUpgrade () { prepareVmToPassValidate () ; mockVmValidator () ; group . setClusterPolicyId ( ClusterPolicy.UPGRADE_POLICY_GUID ) ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; org.mockito.Mockito . verify ( inClusterUpgradeValidator , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . isVmReadyForUpgrade ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.VM . class ) ) ; }
@ java.lang.Override protected void initTable () { super . initTable () ; org.ovirt.engine.ui.webadmin.section.main.view.AbstractSubTabEventView . getTable () . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition < org.ovirt.engine.core.common.businessentities.AuditLog > ( org.ovirt.engine.ui.webadmin.section.main.view.AbstractSubTabEventView.constants . details () , org.ovirt.engine.ui.common.widget.action.CommandLocation.OnlyFromContext ) { @ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand () { return getModelBoundTableWidget () . getModel () . getDetailsCommand () ; } } ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity getBrick ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity ( volumeId , new org.ovirt.engine.core.common.businessentities.VdsStatic ( serverName , STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT , org.ovirt.engine.core.compat.Guid . newGuid () , serverId , serverName , true , org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode ) , org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.BRICK_DIRECTORY , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP ) ; return brick ; }
public void updateSoundDevice ( org.ovirt.engine.core.common.businessentities.VmBase oldVmBase , org.ovirt.engine.core.common.businessentities.VmBase newVmBase , org.ovirt.engine.core.compat.Version compatibilityVersion , java.lang.Boolean isSoundDeviceEnabled ) { boolean osChanged = ( oldVmBase . getOsId () ) != ( newVmBase . getOsId () ) ; updateSoundDevice ( newVmBase . getId () , newVmBase . getOsId () , compatibilityVersion , isSoundDeviceEnabled , osChanged ) ; }
@ java.lang.Override public java.lang.Object lookupEntity ( java.lang.Object id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.businessentities.VM vm = doGetEntity ( org.ovirt.engine.core.common.businessentities.VM . class , query , getQueryParams ( queryParamsClass , id ) , id . toString () ) ; org.ovirt.engine.core.common.businessentities.VM model = new org.ovirt.engine.core.common.businessentities.VM () ; model . setId ( vm . getId () . toString () ) ; return org.ovirt.engine.api.common.util.LinkHelper . addLinks ( getUriInfo () , model ) ; }
private void addAuthenticationMethods ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.restapi.model.AuthenticationMethod [] values ) { version . setAuthenticationMethods ( new org.ovirt.engine.api.restapi.model.AuthenticationMethod () ) ; for ( org.ovirt.engine.api.restapi.model.AuthenticationMethod authType : values ) { version . getAuthenticationMethods () . getAuthenticationMethod () . add ( authType . value () ) ; } }
@ org.junit.Before public void setup () { command . setCluster ( new org.ovirt.engine.core.common.businessentities.Cluster () ) ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic () ; vmStatic . setClusterId ( clusterId ) ; org.mockito.Mockito . doReturn ( vmStatic ) . when ( vmStaticDao ) . get ( org.mockito.ArgumentMatchers . any () ) ; }
private void updateBond () { org.ovirt.engine.core.common.businessentities.IscsiBond newIscsiBond = createIscsiBond () ; newIscsiBond . setId ( getIscsiBond () . getId () ) ; org.ovirt.engine.core.common.action.EditIscsiBondParameters params = new org.ovirt.engine.core.common.action.EditIscsiBondParameters ( newIscsiBond ) ; startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.EditIscsiBond , params , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.IscsiBondModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.IscsiBondModel ) ( result . getState () ) ) ; model . stopProgress () ; model . cancel () ; } } , this ) ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true , getEntity ( NUMBER_CONSTANT ) ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
@ org.junit.Test public void appendCustomValue () { final java.lang.String key = STRING_CONSTANT ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String sep = STRING_CONSTANT ; b . appendCustomValue ( key , value , sep ) ; final java.lang.String s = b . getCustomValue ( key ) ; org.junit.Assert . assertEquals ( value , s ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ) ) { return false ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } return org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( getId () , ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ( obj ) ) . getId () ) ; }
@ java.lang.Override protected org.ovirt.engine.core.compat.Guid ConcreteCreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters ( asyncTaskCreationInfo , new org.ovirt.engine.core.common.businessentities.async_tasks ( parentCommand , org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success , org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running , asyncTaskCreationInfo . getTaskID () , getParametersForTask ( parentCommand , org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () ) , asyncTaskCreationInfo . getStepId () , org.ovirt.engine.core.bll.RemoveImageCommand . getCommandId () ) ) ; p . setEntityId ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getEntityId () ) ; org.ovirt.engine.core.compat.Guid ret = org.ovirt.engine.core.bll.AsyncTaskManager . getInstance () . CreateTask ( AsyncTaskType.deleteImage , p ) ; return ret ; }
@ org.junit.Test public void qosNotSupported () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNic ( STRING_CONSTANT , null , null , network . getName () ) ; org.mockito.Mockito . when ( qosDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( createQos () ) ; qos ( network , iface , null ) ; }
@ java.lang.Override public void setMessage ( java.lang.String message ) { if ( ( ( getHashName () ) != null ) && ( getHashName () . startsWith ( STRING_CONSTANT ) ) ) { super . setMessage ( constants . removeConfirmationPopupMessage () ) ; } else { super . setMessage ( message ) ; } }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > () , null ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setGetVdsQueryExpectations ( NUMBER_CONSTANT ) ; setGetNetworksQueryExpectations ( NUMBER_CONSTANT ) ; setUpEntityQueryExpectations () ; org.ovirt.engine.api.model.HostNic nic = resource . get () ; assertTrue ( nic . isSetStatistics () ) ; hostNicsResource . verifyModelSpecific ( nic , org.ovirt.engine.api.restapi.resource.BackendHostNicResourceTest.NIC_IDX ) ; } finally { accepts . clear () ; } }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > mapHosts ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost > foremanHosts ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList ( foremanHosts . size () ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost host : foremanHosts ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setVdsName ( host . getName () ) ; vds . setHostName ( host . getName () ) ; hosts . add ( vds ) ; } return hosts ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters () { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList <> () ; list . add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand . getParameters () . getDiskImage () . getQuotaId () , null , QuotaConsumptionParameter.QuotaAction.CONSUME , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand . getStorageDomainId () , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand . getDiskImage () . getActualSize () ) ) ; return list ; }
private void rollback5 () { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment ; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext ) ( enlistment . getContext () ) ) ; if ( ( enlistmentContext . getDataCenterId () ) != null ) { org.ovirt.engine.ui.frontend.Frontend . RunAction ( VdcActionType.RemoveStoragePool , new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( enlistmentContext . getDataCenterId () ) ) ; } context.enlistment = null ; enlistment . Done () ; }
@ org.junit.Test public void canDoActionFailedUpdateReadOnly () { org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( createDiskImage () ) ; org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters () ; parameters . getDiskInfo () . setReadOnly ( true ) ; initializeCommand ( parameters , java.util.Collections . singletonList ( createVm ( VMStatus.Up ) ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData < E > > entities = ( ( org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData < E > > ) ( sender ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData < E > importEntityData = entities . getSelectedItem () ; if ( importEntityData != null ) { registerEntityInfoPanel . updateTabsData ( importEntityData ) ; } }
public void moveMacsOfUpdatedCluster ( org.ovirt.engine.core.common.businessentities.Cluster sourceCluster , org.ovirt.engine.core.compat.Guid targetMacPoolId , org.ovirt.engine.core.bll.context.CommandContext commandContext ) { java.util.Objects . requireNonNull ( sourceCluster ) ; java.util.Objects . requireNonNull ( targetMacPoolId ) ; org.ovirt.engine.core.compat.Guid sourceMacPoolId = sourceCluster . getMacPoolId () ; org.ovirt.engine.core.compat.Guid clusterId = sourceCluster . getId () ; java.util.Objects . requireNonNull ( sourceMacPoolId ) ; java.util.Objects . requireNonNull ( clusterId ) ; if ( needToMigrateMacs ( sourceMacPoolId , targetMacPoolId ) ) { java.util.List < java.lang.String > macsToMigrate = vmNicDao . getAllMacsByClusterId ( clusterId ) ; migrateMacsToAnotherMacPool ( sourceMacPoolId , targetMacPoolId , macsToMigrate , false , commandContext ) ; } }
public org.ovirt.engine.sdk.entities.Response delete ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref () ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder () ; java.util.List < org.apache.http.Header > headers = headersBuilder . build () ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder . build () ; return getProxy () . delete ( url , org.ovirt.engine.sdk.entities.Response . class , headers ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Group model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertEquals ( NAMES [ index ] , model . getName () ) ; assertNotNull ( model . getDomain () ) ; verifyLinks ( model ) ; }
public static < TSource > TSource firstOrDefault ( java.lang.Iterable < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super TSource > predicate ) { if ( source != null ) { for ( TSource item : source ) { if ( predicate . match ( item ) ) { return item ; } } } return null ; }
private boolean validateNetworkProviderConfiguration () { return ( ( ! ( org.ovirt.engine.core.bll.UpdateVdsCommand . getParameters () . isInstallHost () ) ) || ( ( org.ovirt.engine.core.bll.UpdateVdsCommand . getParameters () . getNetworkProviderId () ) == null ) ) || ( validateNetworkProviderProperties ( org.ovirt.engine.core.bll.UpdateVdsCommand . getParameters () . getNetworkProviderId () , org.ovirt.engine.core.bll.UpdateVdsCommand . getParameters () . getNetworkMappings () ) ) ; }
public boolean isBackedByHudepages ( org.ovirt.engine.core.common.businessentities.VmBase vm ) { if ( ( ( vm . getCustomProperties () ) == null ) || ( vm . getCustomProperties () . isEmpty () ) ) { return false ; } java.lang.String hugePage = getHugePageSize ( vm ) ; if ( hugePage == null ) { return false ; } try { return ( java.lang.Integer . parseInt ( hugePage ) ) > NUMBER_CONSTANT ; } catch ( java.lang.NumberFormatException e ) { return false ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public < T > T get ( org.ovirt.engine.api.extensions.ExtKey key , java.lang.Object defaultValue ) { if ( ( defaultValue != null ) && ( ! ( key . getType () . isAssignableFrom ( defaultValue . getClass () ) ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . format ( STRING_CONSTANT , defaultValue . getClass () , key ) ) ; } java.lang.Object value = get ( key ) ; if ( value == null ) { value = defaultValue ; } return ( ( T ) ( value ) ) ; }
@ java.lang.Override protected void executeCommand () { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand . getConnection () . getid () ; org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand . getStorageServerConnectionDao () . remove ( connectionId ) ; log . info ( STRING_CONSTANT , connectionId ) ; if ( org.ovirt.engine.core.compat.Guid . isNullOrEmpty ( org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand . getParameters () . getVdsId () ) ) { log . info ( STRING_CONSTANT ) ; } else { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand . disconnectStorage () ; } org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand . setSucceeded ( true ) ; }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsFromExportDomain () { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters p = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getParameters () . getStoragePoolId () , getParameters () . getSourceDomainId () ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetVal = getBackend () . runInternalQuery ( VdcQueryType.GetVmsFromExportDomain , p ) ; return qRetVal . getSucceeded () ? ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( qRetVal . getReturnValue () ) ) : null ; }
private void initDumpXmls ( java.util.Map < java.lang.String , java.lang.Object > . . . deviceInfos ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; returnValue . setReturnValue ( new java.util.Map [] { getDumpXmls ( org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID , deviceInfos ) } ) ; returnValue . setSucceeded ( true ) ; org.mockito.Mockito . doReturn ( returnValue ) . when ( resourceManager ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.DumpXmls ) , org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = getClusterByServiceList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) , supportsVirtService , supportsGlusterService ) ; java.util.Collections . sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; }
@ java.lang.Override protected org.ovirt.engine.api.model.HostStorage postPopulate ( org.ovirt.engine.api.model.HostStorage from ) { from . setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.StorageType . class ) ) ; org.ovirt.engine.api.model.LogicalUnit unit = new org.ovirt.engine.api.model.LogicalUnit () ; unit . setId ( from . getId () ) ; from . getLogicalUnits () . unsetLogicalUnits () ; from . getLogicalUnits () . getLogicalUnits () . add ( unit ) ; return from ; }
@ org.junit.Test public void testFailInterfaceCanUpdateReadOnly () { initializeCommand ( new org.ovirt.engine.core.common.action.UpdateVmDiskParameters ( vmId , createDiskImage () ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . updateReadOnlyRequested () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ) . when ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface () ; org.junit.Assert . assertFalse ( command . validateCanUpdateReadOnly ( diskValidator ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getAllRelevantQuotasForCluster ( org.ovirt.engine.core.compat.Guid clusterId , long engineSessionSeqId , boolean isFiltered ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource quotaParameterSource = getCustomMapSqlParameterSource () ; quotaParameterSource . addValue ( STRING_CONSTANT , clusterId ) . addValue ( STRING_CONSTANT , engineSessionSeqId ) . addValue ( STRING_CONSTANT , isFiltered ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , getQuotaMetaDataFromResultSet () , quotaParameterSource ) ; }
private void updateEntityForRemove ( org.ovirt.engine.core.common.scheduling.ClusterPolicy entity , org.ovirt.engine.core.compat.Guid id ) { if ( ( ( entity . getBalance () ) == null ) || ( ! ( entity . getBalance () . equals ( id ) ) ) ) { return; } entity . setBalance ( null ) ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getFileDataStorageModels () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > models = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > () ; org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel nfsDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel () ; models . add ( nfsDataModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel posixDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel () ; models . add ( posixDataModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel GlusterDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel () ; models . add ( GlusterDataModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel localDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel () ; models . add ( localDataModel ) ; addTypeToStorageModels ( StorageDomainType.Data , models ) ; return models ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . getModel ( NUMBER_CONSTANT , false ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void removeVmUsers () { java.util.List < org.ovirt.engine.core.common.businessentities.TagsVmMap > all = org.ovirt.engine.core.bll.VmCommand . getTagDao () . getTagVmMapByVmIdAndDefaultTag ( org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; for ( org.ovirt.engine.core.common.businessentities.TagsVmMap tagVm : all ) { org.ovirt.engine.core.bll.VmCommand . getTagDao () . detachVmFromTag ( tagVm . gettag_id () , org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; } }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = super . validate ( value ) ; if ( ! ( ipValidation . getSuccess () ) ) { return ipValidation ; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; if ( value instanceof java.lang.String ) { result . setSuccess ( validateNetMask ( ( ( java.lang.String ) ( value ) ) ) ) ; result . setReasons ( org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons ) ; } return result ; }
private void updateItems ( java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots ) { super . setItems ( snapshots ) ; if ( ( ( getSelectedItem () ) == null ) && ( ! ( snapshots . isEmpty () ) ) ) { setSelectedItem ( ( ( snapshots . size () ) > NUMBER_CONSTANT ? snapshots . get ( NUMBER_CONSTANT ) : snapshots . get ( NUMBER_CONSTANT ) ) ) ; } updateActionAvailability () ; }
@ org.junit.Test public void testValidateVmUpLiveMergeSupported () { prepareForVmValidatorTests () ; cmd . getVm () . setStatus ( VMStatus.Up ) ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . isDiskPlugged () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmQualifiedForSnapshotMerge () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . validateStorageDomainAvailableSpace () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void addPermission ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.compat.Guid entityId , org.ovirt.engine.core.bll.PredefinedRoles role , org.ovirt.engine.core.common.VdcObjectType objectType ) { org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission () ; perms . setAdElementId ( userId ) ; perms . setObjectType ( objectType ) ; perms . setObjectId ( entityId ) ; perms . setRoleId ( role . getId () ) ; addPermission ( perms ) ; }
@ java.lang.Override protected void onAction () { if ( item . isManaged () ) { item . edit () ; } else { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperationFactory.OperationMap operationMap = item . getSetupModel () . commandsFor ( item ) ; final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand detach = operationMap . get ( NetworkOperation.REMOVE_UNMANAGED_NETWORK ) . get ( NUMBER_CONSTANT ) ; item . getSetupModel () . onOperation ( NetworkOperation.REMOVE_UNMANAGED_NETWORK , detach ) ; } }
@ org.junit.Test public void testPositiveValidateWithNoDisks () { org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest . getEmptyDiskList () ) . when ( cmd ) . getDisksList () ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.compat.Guid . newGuid () ) . when ( cmd ) . getStorageDomainId () ; org.junit.Assert . assertTrue ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . isEmpty () ) ; }
private static org.ovirt.engine.api.model.Tag parent ( org.ovirt.engine.core.common.businessentities.Tags entity ) { if ( ( entity . getparent_id () ) != null ) { org.ovirt.engine.api.model.Tag parent = new org.ovirt.engine.api.model.Tag () ; parent . setId ( entity . getparent_id () . toString () ) ; return parent ; } else { return null ; } }
@ java.lang.Override public java.lang.Void runInTransaction () { if ( ( ( asyncTask . getChildCmdEntity () . getRootCommandId () ) != null ) && ( ! ( asyncTask . getChildCmdEntity () . getRootCommandId () . equals ( asyncTask . getChildCmdEntity () . getId () ) ) ) ) { coco . persistCommand ( asyncTask . getRootCmdEntity () ) ; } coco . persistCommand ( asyncTask . getChildCmdEntity () ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getAsyncTaskDao () . saveOrUpdate ( asyncTask ) ; return null ; }
@ org.junit.Test public void testGetNetworkNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , getIscsiBondContainingNetwork () ) ; java.util.List < org.ovirt.engine.api.restapi.resource.Network > entities = new java.util.ArrayList <> () ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.NETWORK_ID } , entities ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void executeValidatedCommand ( org.ovirt.engine.core.bll.CommandBase < > command ) { if ( ( ( ( commandContext ) == null ) || ( ( commandContext . getExecutionContext () ) == null ) ) || ( commandContext . getExecutionContext () . isMonitored () ) ) { org.ovirt.engine.core.bll.job.ExecutionHandler . prepareCommandForMonitoring ( command , command . getActionType () , command . isInternalExecution () ) ; } org.ovirt.engine.core.utils.CorrelationIdTracker . setCorrelationId ( command . getCorrelationId () ) ; command . executeAction () ; }
public static void initDefaultOSes () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.defaultOSes = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetDefaultOSes ) , callback ) ; }
@ org.junit.Test public void testCleanNotExpiredUsersSessionsWithUsers () { initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER ) ; container . cleanExpiredUsersSessions () ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , false ) ) ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , container . getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; }
protected void initProviderList () { startProgress () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllNetworkProviders ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { stopProgress () ; java.util.List < org.ovirt.engine.core.common.businessentities.Provider < > > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider < > > ) ( returnValue ) ) ; providers . add ( NUMBER_CONSTANT , null ) ; getProviders () . setItems ( providers ) ; } } ) ) ; }
@ java.lang.Override protected void updateModelDataCenterFromVds ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( dataCenters != null ) { getDataCenter () . setItems ( dataCenters ) ; getDataCenter () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( dataCenters , new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate <> ( vds . getStoragePoolId () ) ) ) ; if ( ( getDataCenter () . getSelectedItem () ) == null ) { getDataCenter () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( dataCenters ) ) ; } } }
@ org.junit.Test public void updateExistingVariable () { java.lang.String name = STRING_CONSTANT ; org.ovirt.engine.core.common.ExternalVariable existing = dao . get ( name ) ; existing . setValue ( STRING_CONSTANT ) ; existing . setUpdateDate ( new java.util.Date () ) ; dao . update ( existing ) ; org.ovirt.engine.core.common.ExternalVariable found = dao . get ( name ) ; org.junit.Assert . assertNotNull ( found ) ; org.junit.Assert . assertEquals ( existing , found ) ; }
@ org.junit.Test public void nameNotUsed () { org.mockito.Mockito . when ( dbFacade . getClusterDao () ) . thenReturn ( clusterDao ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert . assertThat ( validator . nameNotUsed () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain model = new org.ovirt.engine.api.model.StorageDomain () ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public void cancelRecoveryJob () { java.lang.String jobId = org.ovirt.engine.core.vdsbroker.VdsManager.recoveringJobIdMap . remove ( vdsId ) ; if ( jobId != null ) { org.ovirt.engine.core.vdsbroker.VdsManager.log . info ( STRING_CONSTANT , vdsId ) ; try { org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl . getInstance () . deleteJob ( jobId ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.VdsManager.log . warn ( STRING_CONSTANT , jobId , e . getMessage () ) ; org.ovirt.engine.core.vdsbroker.VdsManager.log . debug ( STRING_CONSTANT , e ) ; } } }
private void updateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getRunOnVds () ) != null ) { org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getRunOnVds () , vmDynamicData ) ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase . getVmDynamicDao () . update ( vmDynamicData ) ; } }
@ java.lang.Override public void template_SelectedItemChanged () { super . template_SelectedItemChanged () ; org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel () . getTemplate () . getSelectedItem () ; if ( template == null ) { return; } setupWindowModelFrom ( template ) ; doChangeDefautlHost ( template . getDedicatedVmForVds () ) ; }
private java.util.List < org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback > verifyRunAction ( int exepectedNumOfRunActionExecutions , boolean waitForResult ) { org.mockito.Mockito . verify ( frontend , org.mockito.Mockito . times ( exepectedNumOfRunActionExecutions ) ) . runMultipleAction ( org.mockito.Matchers . eq ( org.ovirt.engine.ui.uicommonweb.action.ACTION_TYPE ) , org.mockito.Matchers . anyListOf ( org.ovirt.engine.core.common.action.VdcActionParametersBase . class ) , callbackCaptor . capture () , org.mockito.Matchers . eq ( false ) , org.mockito.Matchers . eq ( waitForResult ) ) ; return callbackCaptor . getAllValues () ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StorageDomainListReturnForXmlRpc getStorageDomainsList ( java.lang.String spUUID , int domainType , java.lang.String poolType , java.lang.String path ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( STRING_CONSTANT ) . withParameter ( STRING_CONSTANT , spUUID ) . withParameter ( STRING_CONSTANT , domainType ) . withParameter ( STRING_CONSTANT , poolType ) . withParameter ( STRING_CONSTANT , path ) . build () ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( STRING_CONSTANT ) . withResponseType ( java.lang.Object [] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StorageDomainListReturnForXmlRpc ( response ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > newItems = returnValue . getReturnValue () ; java.util.Collections . sort ( newItems , new org.ovirt.engine.ui.uicommonweb.Linq.NetworkInClusterComparator () ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : newItems ) { network . getCluster () . setId ( new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId ( getEntity () . getId () , network . getId () ) ) ; } setItems ( newItems ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.scheduling.PolicyUnit > list = returnValue . getReturnValue () ; setPolicyUnits ( list ) ; fetchClusterPolicies () ; if ( ( policyUnitModel ) != null ) { policyUnitModel . getPolicyUnits () . setItems ( sort ( policyUnits ) ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( object . getVersion () . getSelectedItem () ) != null ) { java.lang.String clusterVersion = object . getVersion () . getSelectedItem () . getValue () ; serialNumberPolicyEditor . setVisible ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . isSerialNumberPolicySupported ( clusterVersion ) ) ; } }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot ) { org.ovirt.engine.core.bll.BaseImagesCommand . getImageStorageDomainMapDao () . remove ( snapshot . getImageId () ) ; org.ovirt.engine.core.bll.BaseImagesCommand . getImageDao () . remove ( snapshot . getImageId () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesForDisk = org.ovirt.engine.core.bll.BaseImagesCommand . getDiskImageDao () . getAllSnapshotsForImageGroup ( snapshot . getId () ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk . isEmpty () ) ) { org.ovirt.engine.core.bll.BaseImagesCommand . getBaseDiskDao () . remove ( snapshot . getId () ) ; } }
protected org.ovirt.engine.core.common.businessentities.StorageDomain findStorageDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain currDomain : domainsInPool ) { updateDisksStorage ( currDomain , disksList ) ; if ( ( ( currDomain . getStorageDomainType () . isDataDomain () ) && ( ( currDomain . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) && ( validateSpaceRequirements ( currDomain , disksList ) ) ) { return currDomain ; } } return null ; }
protected boolean validateImagesAndVMStates () { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () . getStoragePoolId () , Guid.Empty , hasImages () , hasImages () , hasImages () , hasImages () , true , true , true , null ) ; }
@ org.junit.Test public void testFetchSpecificQuotaUsageForSpecificCluster ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > quotaClusterList = dao . getQuotaClusterByClusterGuid ( FixturesTool.CLUSTER_RHEL6_ISCSI , FixturesTool.QUOTA_SPECIFIC ) ; org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster = quotaClusterList . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertNotNull ( quotaCluster ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , quotaClusterList . size () ) ; org.junit.Assert . assertEquals ( java.lang.Integer . valueOf ( NUMBER_CONSTANT ) , quotaCluster . getVirtualCpu () ) ; }
private void edit () { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem () ; if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getTemplateById ( new org.ovirt.engine.ui.uicommonweb.models.templates.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.VmTemplate > () { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.VmTemplate result ) { vmInitLoaded ( result ) ; } } ) , template . getId () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model1 , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ) ) ; java.util.Collections . sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer () ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model1 ) ) ; searchableListModel . setItems ( disks ) ; }
private void clearAsyncTasksWithOutVdsmId () { for ( org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue () . getTaskPlaceHolderIdList () ) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = org.ovirt.engine.core.bll.CommandBase . getAsyncTaskDao () . get ( asyncTaskId ) ; if ( ( task != null ) && ( org.ovirt.engine.core.compat.Guid . isNullOrEmpty ( task . getVdsmTaskId () ) ) ) { org.ovirt.engine.core.bll.AsyncTaskManager . removeTaskFromDbByTaskId ( task . getTaskId () ) ; } } }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskInterface . class ) ) ; model . setStatus ( org.ovirt.engine.api.common.util.StatusUtils . create ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ) ; model . setLunStorage ( new org.ovirt.engine.api.model.HostStorage () ) ; return model ; }
private void initSpyCommand () { org.mockito.Mockito . doReturn ( true ) . when ( spyCommand ) . performImagesChecks () ; org.mockito.Mockito . doReturn ( storageValidator ) . when ( spyCommand ) . createStorageDomainValidator () ; org.mockito.Mockito . doReturn ( vmValidator ) . when ( spyCommand ) . createVmValidator ( org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override protected boolean canDoAction () { boolean returnValue = true ; if ( ( org.ovirt.engine.core.bll.ActivateVdsCommand . getVds () ) == null ) { addCanDoActionMessage ( VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_NOT_EXIST ) ; returnValue = false ; } if ( returnValue && ( ( org.ovirt.engine.core.bll.ActivateVdsCommand . getVds () . getstatus () ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) { addCanDoActionMessage ( VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_ALREADY_UP ) ; returnValue = false ; } return returnValue ; }
@ org.junit.Test public void clusterWithNoServiceEnabled () { createCommandWithNoService () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; cpuExists () ; allQueriesForVms () ; validateFailedWithReason ( EngineMessage.CLUSTER_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED ) ; }
private void updateSnapshotsFromExport () { if ( ( org.ovirt.engine.core.bll.ImportVmCommand . getVm () . getSnapshots () ) == null ) { return; } for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : org.ovirt.engine.core.bll.ImportVmCommand . getVm () . getSnapshots () ) { if ( org.ovirt.engine.core.bll.ImportVmCommand . getSnapshotDao () . exists ( org.ovirt.engine.core.bll.ImportVmCommand . getVm () . getId () , snapshot . getId () ) ) { org.ovirt.engine.core.bll.ImportVmCommand . getSnapshotDao () . update ( snapshot ) ; } else { org.ovirt.engine.core.bll.ImportVmCommand . getSnapshotDao () . save ( snapshot ) ; } } }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > () ; getStorageQuota () . setItems ( quotas ) ; getStorageQuota () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( quotas ) ) ; }
private static void testParseLunFromXmlRpcForDevtypeField ( org.ovirt.engine.core.common.businessentities.StorageType expectedStorageType , java.lang.String mockDevtype ) { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < java.lang.String , java.lang.Object > () ; xlun . put ( GetDeviceListVDSCommand.DEVTYPE_FIELD , mockDevtype ) ; org.ovirt.engine.core.common.businessentities.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . ParseLunFromXmlRpc ( xlun ) ; org.junit.Assert . assertEquals ( expectedStorageType , lun . getLunType () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object result ) { stopProgress () ; java.util.List < org.ovirt.engine.core.common.businessentities.Provider < org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties > > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider < org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties > > ) ( result ) ) ; providers . add ( NUMBER_CONSTANT , null ) ; getNetworkProviders () . setItems ( providers ) ; getNetworkProviders () . setSelectedItem ( null ) ; }
@ org.junit.Test public void validateFailsOnCompatVersion () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithRemoveBricksTask , getBricks ( volumeWithRemoveBricksTask ) ) , null ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.gluster.UNSUPPORTED_VERSION ) . when ( cluster ) . getCompatibilityVersion () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.GLUSTER_TASKS_NOT_SUPPORTED_FOR_CLUSTER_LEVEL . toString () ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > getSortedDisks () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskImages = new java.util.ArrayList ( vm . getDiskMap () . values () ) ; java.util.Collections . sort ( diskImages , new org.ovirt.engine.core.common.businessentities.comparators.DiskImageByDiskAliasComparator () ) ; java.util.Collections . sort ( diskImages , java.util.Collections . reverseOrder ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.DiskImageByBootAndSnapshotComparator () ) ) ; return diskImages ; }
private void initTabAvailabilityListeners ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel pool ) { pool . getPropertyChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( STRING_CONSTANT . equals ( propName ) ) { poolTab . markAsInvalid ( null ) ; } } } ) ; }
@ org.junit.Test public void testUpdateConsoleUserWithOptimisticLockingFailure ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmDynamic vmWithoutConsoleUser = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; vmWithoutConsoleUser . setConsoleUserId ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; boolean result = dao . updateConsoleUserWithOptimisticLocking ( vmWithoutConsoleUser ) ; org.junit.Assert . assertFalse ( result ) ; }
@ org.junit.Test public void getPermissionCheckSubjectsTest () { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissions = org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.addCpuProfileCommand . getPermissionCheckSubjects () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , permissions . size () ) ; org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject = permissions . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CLUSTER_ID , permissionSubject . getObjectId () ) ; org.junit.Assert . assertEquals ( VdcObjectType.Cluster , permissionSubject . getObjectType () ) ; }
@ java.lang.Override public boolean prepareConnectHostToStoragePoolServers ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { if ( isActiveGlusterfsDomainAvailable ( parameters . getStoragePoolId () ) ) { if ( ! ( canVDSConnectToGlusterfs ( parameters . getVds () ) ) ) { org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper.log . error ( STRING_CONSTANT , parameters . getVds () . getName () ) ; setNonOperational ( cmdContext , parameters . getVds () . getId () , NonOperationalReason.VDS_CANNOT_CONNECT_TO_GLUSTERFS ) ; return false ; } } return true ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runAction ( org.ovirt.engine.core.bll.CommandBase < > command , boolean runAsInternal ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = evaluateCorrelationId ( command ) ; if ( returnValue != null ) { return returnValue ; } command . setInternalExecution ( runAsInternal ) ; org.ovirt.engine.core.bll.job.ExecutionHandler . prepareCommandForMonitoring ( command , command . getActionType () , runAsInternal ) ; returnValue = command . executeAction () ; returnValue . setCorrelationId ( command . getParameters () . getCorrelationId () ) ; returnValue . setJobId ( command . getJobId () ) ; return returnValue ; }
public static org.ovirt.engine.core.compat.Guid generateGuidUsingMd5 ( java.lang.String . . . args ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; for ( java.lang.String arg : args ) { builder . append ( arg ) ; } byte [] hash ; try { hash = java.security.MessageDigest . getInstance ( org.ovirt.engine.api.restapi.utils.GuidUtils.MD5_SECURITY_ALGORITHM ) . digest ( builder . toString () . getBytes () ) ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new java.lang.IllegalStateException ( e ) ; } return new org.ovirt.engine.core.compat.Guid ( hash ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters : org.ovirt.engine.core.bll.MoveDisksCommand . getParameters () . getParametersList () ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.MoveDisksCommand . getDiskImageDao () . get ( parameters . getImageId () ) ; org.ovirt.engine.core.compat.Guid diskId = ( diskImage == null ) ? org.ovirt.engine.core.compat.Guid.Empty : diskImage . getId () ; permissionList . add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( diskId , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE ) ) ; } return permissionList ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Network model = org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity ) ) { return false ; } org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity other = ( ( org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity ) ( obj ) ) ; return ( super . equals ( obj ) ) && ( java.util.Objects . equals ( commandId , other.commandId ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > pools = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; if ( ( pools != null ) && ( ! ( pools . isEmpty () ) ) ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = pools . get ( NUMBER_CONSTANT ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getClusterList ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId () ) ; } }
@ org.junit.Test public void canDoActionSucceeds ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand < org.ovirt.engine.core.common.action.RemoveVdsParameters > ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . NewGuid () , false ) ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( false ) ; mockHasVolumeOnServer ( false ) ; runAndAssertCanDoActionSuccess () ; }
public java.util.Collection < org.ovirt.engine.api.model.DetailedLink > getLinks ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.util.List < org.ovirt.engine.api.model.DetailedLink > results = new java.util.ArrayList <> () ; for ( java.lang.String path : rels ) { java.lang.Class < > resource = findResource ( path ) ; results . addAll ( describe ( resource , path , new java.util.HashMap <> () ) ) ; } return results ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ) ) ) ; setIsEmpty ( ( ( ( ( java.util.List ) ( getItems () ) ) . size () ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getNetworkDao () . update ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getNetwork () ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper . setStatus ( cluster . getId () , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getNetwork () ) ; } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testBootProtocolSetForRoleNetworkWhenBootProtocolIsNone () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork () ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpv4Configuration ( Ipv4BootProtocol.NONE ) ; attachment . setNetworkId ( network . getId () ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( false , true , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils . createSetVariableString ( NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , network . getName () ) ) , network , attachment ) ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage cretaeVirtIODisk () { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage () ; disk . setImageId ( diskImageGuid ) ; disk . setDiskInterface ( DiskInterface.VirtIO ) ; disk . setPlugged ( false ) ; disk . setactive ( true ) ; disk . setId ( diskImageGuid ) ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( disk ) ; return disk ; }
public boolean isHotPlugAvailable () { org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; return ( vm != null ) && ( ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) ; }
private void mockGraphicsDevice () { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDevice = new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ; graphicsDevice . setDeviceId ( Guid.Empty ) ; graphicsDevice . setVmId ( vm . getId () ) ; org.mockito.Mockito . when ( vmDeviceDAO . getVmDeviceByVmIdAndType ( vm . getId () , VmDeviceGeneralType.GRAPHICS ) ) . thenReturn ( java.util.Arrays . asList ( graphicsDevice ) ) ; org.mockito.Mockito . doReturn ( vmDeviceDAO ) . when ( dbFacade ) . getVmDeviceDao () ; }
public void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.List < > ) ( source ) ) ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
private void fillEngineConfigMap () { engineConfigMap . setVersion ( parseOptionKey ( OptionKey.OPTION_VERSION ) ) ; engineConfigMap . setAlternateConfigFile ( parseOptionKey ( OptionKey.OPTION_CONFIG ) ) ; engineConfigMap . setAlternatePropertiesFile ( parseOptionKey ( OptionKey.OPTION_PROPERTIES ) ) ; engineConfigMap . setUser ( parseOptionKey ( OptionKey.OPTION_USER ) ) ; engineConfigMap . setAdminPassFile ( parseOptionKey ( OptionKey.OPTION_ADMINPASSFILE ) ) ; engineConfigMap . setOnlyReloadable ( parseOptionKey ( OptionKey.OPTION_ONLY_RELOADABLE ) ) ; engineConfigMap . setLogFile ( parseOptionKey ( OptionKey.OPTION_LOG_FILE ) ) ; engineConfigMap . setLogLevel ( parseOptionKey ( OptionKey.OPTION_LOG_LEVEL ) ) ; }
private void prepareCommand () { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase () ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand ( parameters , null ) ) ; org.mockito.Mockito . doReturn ( lunDao ) . when ( command ) . getLunDao () ; org.mockito.Mockito . doReturn ( storageServerConnectionDao ) . when ( command ) . getStorageServerConnectionDao () ; }
@ java.lang.Override @ org.junit.Test public void testListCrash ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , t ) ; control . replay () ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.permissions > getAllForAdElement ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { int appMode = org.ovirt.engine.core.common.config.Config . < java.lang.Integer > GetValue ( ConfigValues.ApplicationMode ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , id ) . addValue ( STRING_CONSTANT , userID ) . addValue ( STRING_CONSTANT , isFiltered ) . addValue ( STRING_CONSTANT , appMode ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance , parameterSource ) ; }
@ org.junit.Test public void testBootFromNetworkNoNetwork () { org.ovirt.engine.core.dao.network.VmNicDao dao = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.network.VmNicDao . class ) ; org.mockito.Mockito . doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNic > () ) . when ( dao ) . getAllForVm ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( dao ) . when ( runVmValidator ) . getVmNicDao () ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , BootSequence.N , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > () , null ) , false , VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue ; returnValue = runVdsCommand ( VDSCommandType.AddGlusterHook , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters ( serverHook . getServerId () , entity . getGlusterCommand () , entity . getStage () , entity . getName () , entity . getContent () , entity . getChecksum () , hookEnabled ) ) ; return new org.ovirt.engine.core.common.utils.Pair ( serverHook , returnValue ) ; }
public org.ovirt.engine.core.bll.ValidationResult passthroughProfileContainsSupportedProperties () { boolean conditionOccurs = ( vnicProfile . isPassthrough () ) && ( ( ( vnicProfile . isPortMirroring () ) || ( ( vnicProfile . getNetworkQosId () ) != null ) ) || ( ( vnicProfile . getNetworkFilterId () ) != null ) ) ; return org.ovirt.engine.core.bll.ValidationResult . failWith ( EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES ) . when ( conditionOccurs ) ; }
@ java.lang.Override public < T > org.ovirt.engine.ui.webadmin.uicommon.model.NodeInfo < > getNodeInfo ( T parent ) { if ( parent != null ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel parentModel = ( ( org.ovirt.engine.ui.uicommonweb.models.tags.TagModel ) ( parent ) ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > children = parentModel . getChildren () ; return new org.ovirt.engine.ui.webadmin.uicommon.model.DefaultNodeInfo ( new com.google.gwt.view.client.ListDataProvider ( children ) , cell , selectionModel , selectionManager , null ) ; } else { return new org.ovirt.engine.ui.webadmin.uicommon.model.DefaultNodeInfo ( getDataProvider () , cell , selectionModel , selectionManager , null ) ; } }
protected void addVmPayload () { org.ovirt.engine.core.common.businessentities.VmPayload payload = org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getVmPayload () ; if ( payload != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getVmId () ) , VmDeviceGeneralType.DISK , payload . getDeviceType () , payload . getSpecParams () , true , true ) ; } }
protected void executeValidatedCommand ( org.ovirt.engine.core.bll.CommandBase < > command ) { if ( ( ( executionContext ) == null ) || ( executionContext . isMonitored () ) ) { org.ovirt.engine.core.bll.job.ExecutionHandler . prepareCommandForMonitoring ( command , command . getActionType () , command . isInternalExecution () , hasCorrelationIdMap . get ( command . getCommandId () ) ) ; } org.ovirt.engine.core.utils.ThreadLocalParamsContainer . setCorrelationId ( command . getCorrelationId () ) ; command . executeAction () ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public org.ovirt.engine.ui.uicommonweb.builders.BuilderList < S , D > append ( org.ovirt.engine.ui.uicommonweb.builders.Builder < S , D > builder ) { java.util.List < org.ovirt.engine.ui.uicommonweb.builders.Builder < S , D > > enriched = new org.ovirt.engine.ui.uicommonweb.builders.BuilderList ( subList ( NUMBER_CONSTANT , size () ) ) . subList ( NUMBER_CONSTANT , size () ) ; java.util.Collections . addAll ( enriched , builder ) ; return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList ( enriched ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { if ( ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue . getReturnValue () ) ) . size () ) == NUMBER_CONSTANT ) { promptNoQuotaInDCMessage () ; } else { onSaveInternal () ; } }
private org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters getFirstParam () { java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = getParameters () ; if ( ( parameters != null ) && ( ( parameters . size () ) != NUMBER_CONSTANT ) ) { org.ovirt.engine.core.common.action.VdcActionParametersBase param = parameters . get ( NUMBER_CONSTANT ) ; if ( param instanceof org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters ) { return ( ( org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters ) ( param ) ) ; } } return null ; }
@ org.junit.Test public void testAddIdSuppliedButNoName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setId ( STRING_CONSTANT ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , null ) ; setUpGetNetworksByDataCenterExpectations ( NUMBER_CONSTANT , null ) ; setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpActionExpectations ( VdcActionType.AttachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , true , true ) ; collection . add ( model ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public static < TSource > java.util.Collection < TSource > where ( java.util.Collection < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < TSource > predicate ) { java.util.ArrayList < TSource > list = new java.util.ArrayList < TSource > () ; for ( TSource item : source ) { if ( predicate . match ( item ) ) { list . add ( item ) ; } } return list ; }
@ java.lang.Override public java.util.List < java.lang.String > convert ( java.lang.Object source ) { java.util.List < java.lang.String > results = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.aaa.ProfileEntry profileEntry : ( ( java.util.Collection < org.ovirt.engine.core.aaa.ProfileEntry > ) ( source ) ) ) { if ( ( ! passwordBasedOnly ) || ( profileEntry . getSupportsPasswordAuthenication () ) ) { results . add ( profileEntry . getProfile () ) ; } } return results ; }
private void addDiskAllocation ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { if ( ! ( model . getIsDisksAvailable () ) ) { return; } disksAllocationView . edit ( model . getDisksAllocationModel () ) ; model . getDisksAllocationModel () . setDisks ( model . getDisks () ) ; }
@ org.junit.Test public void commandFailsSlaveNotOvirtMonitored () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.SetupGlusterGeoRepMountBrokerInternalCommand ( new org.ovirt.engine.core.common.action.gluster.SetUpMountBrokerParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , new java.util.HashSet ( java.util.Collections . singletonList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) , null , null ) , null ) ) ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . getSlaveVolume () ; org.junit.Assert . assertFalse ( command . validate () ) ; }
private void endCommand () { if ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getRemoveFromDB () ) { if ( ! ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . isRemoveDuringExecution () ) ) { removeImageFromDB ( true ) ; } } else { org.ovirt.engine.core.bll.RemoveImageCommand . getImageStorageDomainMapDao () . remove ( new org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getStorageDomainId () ) ) ; org.ovirt.engine.core.bll.RemoveImageCommand . unLockImage () ; } org.ovirt.engine.core.bll.RemoveImageCommand . setSucceeded ( true ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterClustersWithoutArchitecture ( returnValue ) ; getCluster () . setItems ( clusters ) ; getCluster () . setIsEmpty ( clusters . isEmpty () ) ; updateControlsAvailability () ; stopProgress () ; }
@ org.junit.Test public void validateFailsOnNoConflictServers () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity () ; setUpMocksForAdd ( true , hook ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS . toString () ) ) ; }
private void onSaveSanStorage () { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow () ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel . validate () ) ) ) { return; } cancelConfirm () ; getWindow () . startProgress () ; org.ovirt.engine.ui.uicompat.Task . create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays . asList ( new java.lang.Object [] { STRING_CONSTANT } ) ) ) . run () ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ; org.ovirt.engine.api.restapi.resource.VmStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.VmStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
private static org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface createNewViewableInterface ( boolean plugged ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface () ; iface . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; iface . setMacAddress ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) ) ; iface . setPlugged ( plugged ) ; return iface ; }
@ org.junit.Test public void isVirtioScsiEnabledDefaultedToTrue () { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.VmManagementParametersBase > cmd = setupCanAddVmTests ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.mockito.Mockito . doReturn ( createVdsGroup () ) . when ( cmd ) . getVdsGroup () ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ) . thenReturn ( new java.util.ArrayList <> ( java.util.Arrays . asList ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , cmd . isVirtioScsiEnabled () ) ; }
@ org.junit.Test public void testProcessingHardwareVirt () { org.mockito.Mockito . doThrow ( new java.lang.RuntimeException () ) . when ( virtStrategy ) . processHardwareCapabilities ( org.mockito.ArgumentMatchers . any () ) ; exception . expect ( java.lang.RuntimeException . class ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; strategy . processHardwareCapabilities ( vds ) ; }
public void initBalloonSupportMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { balloonSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetBalloonSupportMap ) , callback ) ; }
@ java.lang.Override public boolean canOpenRDPConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { if ( ( item . isPool () ) || ( ! ( isRDPAvailable () ) ) ) return false ; if ( ( ( ( item . getAdditionalConsoleModel () ) != null ) && ( item . getAdditionalConsoleModel () . getConnectCommand () . getIsAvailable () ) ) && ( item . getAdditionalConsoleModel () . getConnectCommand () . getIsExecutionAllowed () ) ) { return true ; } return false ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters ) { org.ovirt.engine.core.common.businessentities.StoragePool noneStoragePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; noneStoragePool . setId ( Guid.Empty ) ; noneStoragePool . setName ( STRING_CONSTANT ) ; dataCenters . add ( noneStoragePool ) ; getDataCenter () . setItems ( dataCenters ) ; }
protected boolean checkImagesStatus () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksToCheck = org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand . getDiskDao () . getAllForVm ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand . getVmId () ) , true , false , true ) ; org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( disksToCheck ) ; return validate ( diskImagesValidator . diskImagesNotLocked () ) ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { java.lang.String value = STRING_CONSTANT ; if ( ( object . getDiskStorageType () ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( object ) ) ; java.util.ArrayList < java.lang.String > quotaNamesArr = diskImage . getQuotaNames () ; if ( quotaNamesArr != null ) { value = java.lang.String . join ( STRING_CONSTANT , quotaNamesArr ) ; } } return value ; }
@ java.lang.Override protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel > createActionTable () { return new org.ovirt.engine.ui.userportal.widget.table.UserPortalSimpleActionTable ( modelProvider , getTableResources () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getEventBus () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getClientStorage () , new org.ovirt.engine.ui.userportal.widget.refresh.UserPortalRefreshManager ( modelProvider , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getEventBus () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getClientStorage () ) ) ; }
protected void updateVirtioScsiAvailability () { boolean isVirtioScsiEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.VirtIoScsiEnabled , getModel () . getCompatibilityVersion () . getValue () ) ) ) ; getModel () . getIsVirtioScsiEnabled () . setIsAvailable ( isVirtioScsiEnabled ) ; }
private boolean updateImageParametersRequiringVmDownRequested () { if ( ( getOldDisk () . getDiskStorageType () ) != ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { return false ; } org.ovirt.engine.core.compat.Guid oldQuotaId = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getOldDisk () ) ) . getQuotaId () ; if ( oldQuotaId == null ) { return false ; } return ! ( java.util.Objects . equals ( oldQuotaId , getQuotaId () ) ) ; }
@ org.junit.Test public void caluculateNetworkImplementationDetailsNetworkInSyncWithoutQos ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice () ; iface . setQos ( null ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , true , iface . isBridged () , iface . getMtu () , iface . getVlanId () , null ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.SubjectEntity ) ) { return false ; } org.ovirt.engine.core.common.businessentities.SubjectEntity other = ( ( org.ovirt.engine.core.common.businessentities.SubjectEntity ) ( obj ) ) ; return ( java.util.Objects . equals ( entityId , other.entityId ) ) && ( java.util.Objects . equals ( entityType , other.entityType ) ) ; }
public void clearVdsFromCache ( org.ovirt.engine.core.compat.Guid vdsId , java.lang.String vdsName ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log . infoFormat ( STRING_CONSTANT , _storagePoolId , vdsName ) ; synchronized ( _lockObject ) { if ( _vdssInProblem . containsKey ( vdsId ) ) { for ( org.ovirt.engine.core.compat.Guid domainId : _vdssInProblem . get ( vdsId ) ) { DomainRecoveredFromProblem ( domainId , vdsId , vdsName ) ; } } } }
@ org.junit.Before public void init () { org.mockito.Mockito . doReturn ( getClusters () ) . when ( clusterDao ) . getAll () ; org.mockito.Mockito . doReturn ( provider ) . when ( tasksSyncJob ) . getProvider () ; org.mockito.Mockito . doReturn ( taskUtils ) . when ( tasksSyncJob ) . getGlusterTaskUtils () ; }
@ org.junit.Before public void setup () { storagePool = new org.ovirt.engine.core.common.businessentities.storage_pool ( STRING_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , STRING_CONSTANT , StorageType.UNKNOWN . getValue () , StoragePoolStatus.Up . getValue () ) ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( storagePool , new java.util.ArrayList < java.lang.String > () ) ) ; }
@ org.junit.Test public void validateDiskIsLocked ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk () ; command . getImage () . setImageStatus ( ImageStatus.LOCKED ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED . toString () ) ) ; }
private void setupMock ( ) throws java.lang.Exception { commandMock = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.ClearExternalJobCommand ( parameters ) ) ; org.mockito.Mockito . when ( commandMock . getParameters () ) . thenReturn ( parameters ) ; org.mockito.Mockito . doReturn ( jobDaoMock ) . when ( commandMock ) . getJobDao () ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) . thenReturn ( makeTestJob ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.nonExistingJobId ) ) . thenReturn ( null ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue createGetStorageDomainInfoReturnValue () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; returnValue . setSucceeded ( true ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setId ( storageDomainId ) ; org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.StorageDomainStatic , java.lang.Object > pair = new org.ovirt.engine.core.common.utils.Pair ( storageDomain . getStorageStaticData () , null ) ; returnValue . setReturnValue ( pair ) ; return returnValue ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . update ( getRestModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void canDoActionSucceeds () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) ) ; setupMocks () ; org.mockito.Mockito . doReturn ( getServer () ) . when ( cmd ) . getUpServer () ; org.junit.Assert . assertTrue ( cmd . canDoAction () ) ; }
@ org.junit.Test public void testGetDiskAttachedToVm () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk > unregisteredDisk = dao . getByDiskIdAndStorageDomainId ( FixturesTool.UNREGISTERED_DISK2 , FixturesTool.STORAGE_DOAMIN_NFS2_1 ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ! ( unregisteredDisk . isEmpty () ) ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , unregisteredDisk . get ( NUMBER_CONSTANT ) . getVms () . size () ) ; }
private void setUpMock () { org.mockito.Mockito . doReturn ( masterVolumeId ) . when ( getQueryParameters () ) . getId () ; org.mockito.Mockito . doReturn ( getMockGeoRepSessions () ) . when ( geoRepDao ) . getGeoRepSessions ( masterVolumeId ) ; org.mockito.Mockito . doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails > () ) . when ( geoRepDao ) . getGeoRepSessionDetails ( sessionId ) ; }
@ org.junit.Before public void setUp () { quota = setUpQuota ( org.ovirt.engine.core.bll.UpdateQuotaCommandTest.QUOTA_ID ) ; org.mockito.Mockito . when ( quotaDao . getById ( org.ovirt.engine.core.bll.UpdateQuotaCommandTest.QUOTA_ID ) ) . thenReturn ( quota ) ; org.mockito.Mockito . doNothing () . when ( command ) . removeQuotaFromCache () ; org.mockito.Mockito . doNothing () . when ( command ) . afterUpdate () ; }
@ org.junit.Test public void nGuidGuidCtorNullNGuid () { b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( null , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; final org.ovirt.engine.core.compat.Guid g = b . getVdsId () ; org.junit.Assert . assertEquals ( Guid.Empty , g ) ; final org.ovirt.engine.core.compat.Guid gu = b . getVmId () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 , gu ) ; }
@ java.lang.Override protected boolean validate () { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume () ; if ( ! ( super . validate () ) ) { return false ; } boolean isVolumeDistributed = glusterVolume . getVolumeType () . isDistributedType () ; if ( ! isVolumeDistributed ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NOT_DISTRIBUTED ) ; } else if ( ( glusterVolume . getBricks () . size () ) == NUMBER_CONSTANT ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_DISTRIBUTED_AND_HAS_SINGLE_BRICK ) ; } return validate ( brickValidator . canRebalance ( glusterVolume ) ) ; }
@ java.lang.Override protected void EndWithFailure () { if ( ( getMoveOrCopyImageOperation () ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Copy ) ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . UnLockImage () ; if ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getAddImageDomainMapping () ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getImageStorageDomainMapDao () . remove ( new org.ovirt.engine.core.common.businessentities.image_storage_domain_map_id ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getStorageDomainId () ) ) ; } RevertTasks () ; } else { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . MarkImageAsIllegal () ; } org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . setSucceeded ( true ) ; }
@ java.lang.Override protected boolean validate () { if ( ( hostedEngineHelper . getStorageDomain () ) != null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; } if ( ( heStorageDomain ) == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; } if ( ! ( java.util.Arrays . asList ( org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES ) . contains ( heStorageDomain . getStorageType () ) ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED ) ; } return true ; }
public static void initDiskHotpluggableInterfacesMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.diskHotpluggableInterfacesMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetDiskHotpluggableInterfacesMap ) , callback ) ; }
public void updateAuditLogEventProcessed ( long auditLogId ) throws java.sql.SQLException { try ( java.sql.Connection connection = ds . getConnection () ; java.sql.PreparedStatement ps = connection . prepareStatement ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ) { ps . setLong ( NUMBER_CONSTANT , auditLogId ) ; int updated = ps . executeUpdate () ; if ( updated != NUMBER_CONSTANT ) { org.ovirt.engine.core.notifier.dao.EventsManager.log . error ( STRING_CONSTANT , auditLogId ) ; } } }
public void getMaxVmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return NUMBER_CONSTANT ; } return source ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.VmPriorityMaxValue , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ org.junit.Test public void validateVmIsNotDown ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmDiskImage ( false ) ; mockGetVmsListForDisk () ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN . toString () ) ) ; }
private void addGlusterTypesAndStates ( org.ovirt.engine.api.model.VersionCaps version ) { if ( org.ovirt.engine.api.restapi.utils.VersionUtils . greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_1 ) ) { addGlusterVolumeTypes ( version , org.ovirt.engine.api.model.GlusterVolumeType . values () ) ; addTransportTypes ( version , org.ovirt.engine.api.model.TransportType . values () ) ; addGlusterVolumeStates ( version , org.ovirt.engine.api.model.GlusterState . values () ) ; addGlusterBrickStates ( version , org.ovirt.engine.api.model.GlusterState . values () ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; vfMap = returnValue . getReturnValue () ; if ( ( vfMap ) == null ) { vfMap = java.util.Collections . emptyMap () ; } queryFreeBonds () ; }
@ java.lang.Override protected void ProceedProxyReturnValue () { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand . getReturnStatus () ) ; switch ( returnStatus ) { case UnknownTask : log . error ( java.lang.String . format ( STRING_CONSTANT , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand . getParameters () . getTaskId () ) ) ; return; } super . ProceedProxyReturnValue () ; }
public static void initUniqueOsNames () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.uniqueOsNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector . getInstance () . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.uniqueOsNames ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetUniqueOsNames ) , callback ) ; }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.DeleteGlusterVolumeCommand command ) { org.mockito.Mockito . doReturn ( volumeDao ) . when ( command ) . getGlusterVolumeDao () ; org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( command ) . getUpServer () ; org.mockito.Mockito . doReturn ( getGlusterVolume ( stoppedVolumeId ) ) . when ( volumeDao ) . getById ( stoppedVolumeId ) ; org.mockito.Mockito . doReturn ( getGlusterVolume ( startedVolumeId ) ) . when ( volumeDao ) . getById ( startedVolumeId ) ; }
private static void clearNetworks ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > attachedNetworks = nic . getItems () ; if ( ( attachedNetworks . size () ) > NUMBER_CONSTANT ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList ( attachedNetworks ) ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK . getCommand ( networkModel , null , allNics ) . execute () ; } } }
public void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
@ org.junit.Test public void testVirtIsMonitoringNeeded () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setStatus ( VDSStatus.NonOperational ) ; org.junit.Assert . assertTrue ( virtStrategy . isMonitoringNeeded ( vds ) ) ; vds . setStatus ( VDSStatus.Up ) ; org.junit.Assert . assertTrue ( virtStrategy . isMonitoringNeeded ( vds ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters () { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > () ; if ( ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () . getDiskStorageType () ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { list . add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( getQuotaId () , null , QuotaConsumptionParameter.QuotaAction.CONSUME , getStorageDomainId () , getRequestDiskSpace () ) ) ; } return list ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel ) ( sender ) ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel > interfaceLineModels = ( ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel > ) ( model . getItems () ) ) ; showModels ( interfaceLineModels , vds ) ; }
public static java.lang.String getDiskLabelList ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { if ( disks . isEmpty () ) { return null ; } final java.util.List < java.lang.String > labels = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { labels . add ( disk . getDiskAlias () ) ; } return java.lang.String . join ( STRING_CONSTANT , labels ) ; }
private void initEditors () { volumeTypeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelLabelEditor < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType > ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType > () ) ; forceEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; serverEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.common.businessentities.VDS > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.common.businessentities.VDS > () { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds . getHostName () ; } } ) ; }
@ org.junit.Test public void qosNotSupported () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( STRING_CONSTANT , network ) ; mockExistingIfaces ( iface ) ; iface . setQosOverridden ( true ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; }
@ org.junit.Test public void testGetDefaultSortbyPhrase () { org.junit.Assert . assertTrue ( STRING_CONSTANT , comp . getDefaultSort ( STRING_CONSTANT ) . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , comp . getDefaultSort ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , comp . getDefaultSort ( null ) ) ; }
public void onSaveNetworkConfig () { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow () ) ) ; if ( ( model . getProgress () ) != null ) { return; } model . startProgress () ; new org.ovirt.engine.ui.uicommonweb.models.hosts.SaveNetworkConfigAction ( this , model , getEntity () ) . execute () ; }
@ org.junit.Test public void validateFailsForVdsNonUp () { prepareMocks ( VDSStatus.Down ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.mockito.Mockito . doReturn ( VDSStatus.Error ) . when ( vds ) . getStatus () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.mockito.Mockito . doReturn ( VDSStatus.Maintenance ) . when ( vds ) . getStatus () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest . getModel () ; model . setProvisionedSize ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [] names , java.lang.Object [] values , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses ) { java.lang.String uri = ( STRING_CONSTANT + ( GUIDS [ NUMBER_CONSTANT ] ) ) + STRING_CONSTANT ; return setUpActionExpectations ( task , clz , names , values , true , true , null , asyncTasks , asyncStatuses , null , null , uri , true ) ; }
private void undo () { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity () ) ) ; if ( vm != null ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm . getId () , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO ) , null , null ) ; } }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < > ) ( source ) ) . isEmpty () ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.CLOSE . equals ( command . getName () ) ) { cancel () ; } else if ( ( ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.SHOW_SECURITY_COMMAND . equals ( command . getName () ) ) || ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.SHOW_BUGS_COMMAND . equals ( command . getName () ) ) ) || ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.SHOW_ENHANCEMENTS_COMMAND . equals ( command . getName () ) ) ) { showErrataListWithDetailsPopup ( command . getName () ) ; } else { super . executeCommand ( command ) ; } }
public static org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel findAncestor ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType type , org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel root ) { if ( ( root != null ) && ( ( root . getType () ) != type ) ) { if ( ( root . getParent () ) != null ) { return org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel . findAncestor ( type , root . getParent () ) ; } return null ; } return root ; }
private boolean updateImageParametersRequiringVmDownRequested () { if ( ! ( getOldDisk () . getDiskStorageType () . isInternal () ) ) { return false ; } org.ovirt.engine.core.compat.Guid oldQuotaId = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getOldDisk () ) ) . getQuotaId () ; if ( oldQuotaId == null ) { return false ; } return ! ( java.util.Objects . equals ( oldQuotaId , getQuotaId () ) ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createDiskSnapshot ( org.ovirt.engine.core.compat.Guid diskId ) { return new org.ovirt.engine.core.common.businessentities.DiskImage ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextBoolean () , new java.util.Date () , new java.util.Date () , NUMBER_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , STRING_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , NUMBER_CONSTANT , diskId , org.ovirt.engine.core.common.businessentities.ImageStatus.OK , new java.util.Date () , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.VmEntityType.VM , NUMBER_CONSTANT , null , null , org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED , false ) ; }
@ java.lang.Override protected void executeCommand () { AddCustomValue ( STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.VmInterfaceType . forValue ( org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand . getParameters () . getInterface () . getType () ) . getDescription () . toString () ) ; org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand . getVmNetworkInterfaceDao () . update ( org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand . getParameters () . getInterface () ) ; org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand . setSucceeded ( true ) ; }
@ org.junit.Test ( expected = org.ovirt.engine.api.restapi.resource.BaseBackendResource.WebFaultException . class ) public void testListLimitResultsBadFormat ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectationsWithMax ( true ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllTags , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . setUpTags () , null ) ; collection . setUriInfo ( uriInfo ) ; getCollection () ; fail ( STRING_CONSTANT ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( propName . equals ( STRING_CONSTANT ) ) { onIsValidPropertyChange ( object ) ; } else if ( propName . equals ( STRING_CONSTANT ) ) { message . setText ( object . getMessage () ) ; } }
@ org.junit.Test public void testVmWithDisks () { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > disks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > () ; disks . add ( new org.ovirt.engine.core.common.businessentities.DiskImage () ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , null , disks ) , true , null ) ; }
private void verifyVersionEqual ( java.lang.Object returnValue , int major , int minor , int build ) { org.ovirt.engine.core.compat.Version version = ( ( org.ovirt.engine.core.compat.Version ) ( returnValue ) ) ; org.junit.Assert . assertEquals ( version . getMajor () , major ) ; org.junit.Assert . assertEquals ( version . getMinor () , minor ) ; org.junit.Assert . assertEquals ( version . getBuild () , build ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , version . getRevision () ) ; }
@ org.junit.Test public void testValues () { java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network net ) { return createVdsInterface ( ( ( ( iface . getName () ) + STRING_CONSTANT ) + ( net . getVlanId () ) ) , false , null , null , NetworkBootProtocol.NONE , net . getName () , iface . getName () , net . getVlanId () ) ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( interfaceDao ) . when ( cmd ) . getInterfaceDao () ; org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getVdsStatic () ) . when ( vdsStaticDao ) . get ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverId ) ; org.mockito.Mockito . doReturn ( getCluster ( true ) ) . when ( clusterDao ) . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ org.junit.Test public void validateFailsWhenCreateAllSnapshotFromVmValidationFails () { initStorageDomain ( srcStorageId ) ; initStorageDomain ( dstStorageId ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand () ; org.junit.Assert . assertFalse ( command . validate () ) ; }
private java.util.Map < java.lang.String , java.lang.String > getAvailableValues ( java.lang.String message , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ) { java.util.Map < java.lang.String , java.lang.String > returnValue = new java.util.HashMap ( logable . getCustomValues () ) ; java.util.Set < java.lang.String > attributes = resolvePlaceHolders ( message ) ; if ( ( attributes != null ) && ( ( attributes . size () ) > NUMBER_CONSTANT ) ) { org.ovirt.engine.core.compat.backendcompat.TypeCompat . getPropertyValues ( logable , attributes , returnValue ) ; } return returnValue ; }
public static void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
@ java.lang.Override public void edit ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel transferObj ) { errataTableView . getErrataTable () . setLoadingState ( LoadingState.LOADING ) ; model . setGuid ( transferObj . getGuid () ) ; errataTableView . init ( model ) ; org.ovirt.engine.core.common.businessentities.HasErrata entity = transferObj . getEntity () ; model . setEntity ( entity ) ; model . search () ; setErrataDetailPanelVisibilty ( false ) ; }
@ org.junit.Test public void testGetSysprepFileName ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( org.ovirt.engine.core.utils.OsRepositoryImplTest.SYSPREP_INF , OsRepositoryImpl.INSTANCE . getSysprepFileName ( NUMBER_CONSTANT , null ) ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.utils.OsRepositoryImplTest.UNATTEND_XML , OsRepositoryImpl.INSTANCE . getSysprepFileName ( NUMBER_CONSTANT , null ) ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.utils.OsRepositoryImplTest.UNATTEND_XML , OsRepositoryImpl.INSTANCE . getSysprepFileName ( NUMBER_CONSTANT , null ) ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.MacPool model = createIncompleteMacPool () ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , getIncompleteFields () ) ; } }
@ org.junit.Test public void testGetForDisk () { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > result = dao . getForDisk ( FixturesTool.IMAGE_GROUP_ID , true ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , result . get ( java.lang.Boolean.TRUE ) . size () ) ; }
protected < B extends org.ovirt.engine.api.model.BaseResource > void removeIfExist ( B model , java.lang.String relation ) { java.util.List < org.ovirt.engine.api.model.Link > linksCopy = new java.util.ArrayList ( model . getLinks () ) ; for ( org.ovirt.engine.api.model.Link link : model . getLinks () ) { if ( link . getRel () . equals ( relation ) ) { linksCopy . remove ( link ) ; break; } } model . getLinks () . retainAll ( linksCopy ) ; }
@ org.junit.Test public void validateVmInPreview () { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito . when ( snapshotsValidator . vmNotInPreview ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
private void unplug () { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow () ) ) ; model . startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.HotUnPlugDiskFromVm , createHotPlugDiskToVmParameters ( false ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { model . stopProgress () ; setWindow ( null ) ; } } , this ) ; }
public void setModel ( org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel nodeModel , java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > numaNodeList ) { numaPanel . setModel ( nodeModel ) ; this . nodeModel = nodeModel ; if ( nodeModel . isLocked () ) { enableDrag ( false ) ; } else { createMenu ( numaNodeList , nodeModel . getIndex () ) ; } }
private void addVmToPool ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmToPoolParameters parameters = new org.ovirt.engine.core.common.action.AddVmToPoolParameters ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand . getParameters () . getPoolId () , vmStatic . getId () ) ; parameters . setShouldBeLogged ( false ) ; setSucceeded ( runInternalAction ( VdcActionType.AddVmToPool , parameters ) . getSucceeded () ) ; org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand . addVmPermission () ; }
@ org.junit.Test public void testListGlobalLimit ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quota = getQuota () ; quota . setGlobalQuotaCluster ( getClusterGlobalCpuLimit () ) ; setUpGetEntityExpectations ( quota ) ; org.ovirt.engine.api.model.QuotaClusterLimits clusterLimits = collection . list () ; assertClusterLimitsFound ( clusterLimits , NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.QuotaClusterLimit clusterLimit = clusterLimits . getQuotaClusterLimits () . get ( NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , clusterLimit . getVcpuLimit () . intValue () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public < T > java.util.List < T > executeReadList ( final java.lang.String procedureName , final org.springframework.jdbc.core.RowMapper < T > mapper , final org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource ) { java.util.Map < java.lang.String , java.lang.Object > resultsMap = executeReadAndReturnMap ( procedureName , mapper , parameterSource ) ; return ( ( java.util.List < T > ) ( resultsMap . get ( BaseDAODbFacade.RETURN_VALUE_PARAMETER ) ) ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { if ( ! ( getParameters () . isShouldRemainIllegalOnFailedExecution () ) ) { addDiskImageToDb ( newDiskImage , getCompensationContext () , java.lang.Boolean.TRUE ) ; } else { addDiskImageToDb ( newDiskImage , null , java.lang.Boolean.TRUE ) ; getCompensationContext () . snapshotEntityStatus ( newDiskImage . getImage () , ImageStatus.ILLEGAL ) ; } return null ; }
private void commonTestFlow ( boolean withDummyLun ) { org.mockito.Mockito . when ( getQueryParameters () . getVgId () ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VG_ID ) ; org.mockito.Mockito . when ( getQueryParameters () . getId () ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VDS_ID ) ; expectGetLunsForVg ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VG_ID , withDummyLun ) ; expectGetDeviceList () ; expectGetLunsMap () ; expectGetConnections () ; getQuery () . setInternalExecution ( true ) ; getQuery () . executeCommand () ; org.ovirt.engine.core.bll.CommandAssertUtils . checkSucceeded ( getQuery () , true ) ; checkReturnValue () ; }
void addSelectedItemChangeHandler () { selectedItemChangeListener = new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ! ( sameEntity ( listModel . getSelectedItem () , model ) ) ) { getView () . setNotSelected ( model . isVmUp () ) ; } else { getView () . setSelected () ; } } } ; listModel . getSelectedItemChangedEvent () . addListener ( selectedItemChangeListener ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getAllForConnection ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { return getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.mapper , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , connection . getiqn () ) . addValue ( STRING_CONSTANT , connection . getconnection () ) . addValue ( STRING_CONSTANT , connection . getport () ) . addValue ( STRING_CONSTANT , connection . getportal () ) . addValue ( STRING_CONSTANT , connection . getuser_name () ) ) ; }
private void buidSharedLockMap ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > listVms ) { if ( ( listVms != null ) && ( ! ( listVms . isEmpty () ) ) ) { sharedLockMap = new java.util.HashMap < java.lang.String , java.lang.String > () ; for ( org.ovirt.engine.core.common.businessentities.VM vm : listVms ) { sharedLockMap . put ( vm . getId () . toString () , LockingGroup.VM . name () ) ; } } }
public static java.lang.Long determineImageInitialSize ( org.ovirt.engine.core.common.businessentities.storage.Image sourceImage , org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid srcDomain , org.ovirt.engine.core.compat.Guid dstDomain , org.ovirt.engine.core.compat.Guid imageGroupID ) { if ( org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . isInitialSizeSupportedForFormat ( destFormat , dstDomain ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . getVolumeInfoFromVdsm ( storagePoolId , srcDomain , imageGroupID , sourceImage . getId () ) ; return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . computeCowImageNeededSize ( sourceImage . getVolumeFormat () , imageInfoFromStorage . getActualSizeInBytes () ) ; } return null ; }
public static void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters () ; param . setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param . setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsType > getGraphicsTypesOfEntity ( org.ovirt.engine.core.compat.Guid entityId ) { java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsType > result = new java.util.ArrayList <> () ; if ( entityId != null ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = getGraphicsDevices ( entityId ) ; if ( devices != null ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { result . add ( org.ovirt.engine.core.common.businessentities.GraphicsType . fromString ( device . getDevice () ) ) ; } } } return result ; }
public static void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName , java.lang.Integer maxCount ) { org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( STRING_CONSTANT + clusterName ) + STRING_CONSTANT ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; if ( maxCount != null ) { searchParameters . setMaxCount ( maxCount ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , searchParameters , aQuery ) ; }
public void getMaxNumOfThreadsPerCpu ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : NUMBER_CONSTANT ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfThreadsPerCpu ) ; tempVar . setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
@ java.lang.Override protected void onPreviewNativeEvent ( com.google.gwt.user.client.Event.NativePreviewEvent event ) { super . onPreviewNativeEvent ( event ) ; if ( ( ( keyPressHandler ) != null ) && ( ( event . getTypeInt () ) == ( com.google.gwt.user.client.Event.ONKEYDOWN ) ) ) { keyPressHandler . onKeyPress ( event . getNativeEvent () ) ; } }
private void updateWanColorDepthOptions ( final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getWANColorDepth ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice . setWANColorDepth ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth ) ( returnValue ) ) ) ; } } ) ) ; }
@ java.lang.Override public void setUp () { super . setUp () ; org.mockito.Mockito . doNothing () . when ( cmd ) . initTemplateDisks () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . checkNumberOfMonitors () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . validateCustomProperties ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . anyList () ) ; initCommandMethods () ; initDestSDs () ; generateStorageToDisksMap () ; cmd . init () ; }
protected void setUpCommand () { org.mockito.Mockito . doNothing () . when ( command ) . initTemplate () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . verifyAddVm () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateCpuProfile () ; }
public org.ovirt.engine.core.bll.ValidationResult changeProtocolAllowed () { return org.ovirt.engine.core.bll.ValidationResult . failWith ( EngineMessage.VDS_STATUS_NOT_VALID_FOR_UPDATE ) . when ( ( ( ( oldHost . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance ) ) && ( ( oldHost . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS ) ) ) ) ; }
private void assertCorrectSlaveCountInValidBonds ( int numberOfSlaves , java.lang.String reason , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.lang.String bondName ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( bondName , true ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > slaves = createGivenCountOfSlavesForBond ( bondName , numberOfSlaves ) ; org.junit.Assert . assertThat ( reason , new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . validBond ( slaves ) , matcher ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isBootableMarked = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity () ) ) ; getIsBootable () . setIsChangeable ( ( ! isBootableMarked ) ) ; }
protected final void endVmTemplateRelatedOps () { if ( ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . getVmTemplate () ) != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . setVmDevices ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . getVmTemplate () ) ; incrementDbGeneration () ; org.ovirt.engine.core.bll.VmTemplateHandler . UnLockVmTemplate ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . getVmTemplateId () ) ; } else { org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . setCommandShouldBeLogged ( false ) ; log . warn ( STRING_CONSTANT ) ; } }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( STRING_CONSTANT , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams . setMaxCount ( NUMBER_CONSTANT ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
private java.util.List < org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback > verfifyRunAction ( int exepectedNumOfRunActionExecutions , boolean showErrorDialog ) { org.mockito.Mockito . verify ( frontend , org.mockito.Mockito . times ( exepectedNumOfRunActionExecutions ) ) . runAction ( org.mockito.ArgumentMatchers . eq ( org.ovirt.engine.ui.uicommonweb.action.ACTION_TYPE ) , org.mockito.ArgumentMatchers . any () , callbackCaptor . capture () , org.mockito.ArgumentMatchers . eq ( showErrorDialog ) ) ; java.util.List < org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback > callbacks = callbackCaptor . getAllValues () ; return callbacks ; }
@ org.junit.Test public void testAlreadyExistStorageDomain () { org.mockito.Mockito . when ( storageDomainStaticDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommandTest . getStorageDomain () ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , command . canAddDomain () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST . toString () ) ) ; }
private static void addVideoDevice ( org.ovirt.engine.core.common.businessentities.VmBase vm ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vm . getId () ) , VmDeviceGeneralType.VIDEO , vm . getDefaultDisplayType () . getDefaultVmDeviceType () , org.ovirt.engine.core.bll.utils.VmDeviceUtils . getMemExpr ( vm . getNumOfMonitors () , vm . getSingleQxlPci () ) , true , true , null , false ) ; }
private void createUpStoragePool () { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; pool . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; pool . setStatus ( StoragePoolStatus.Up ) ; org.mockito.Mockito . when ( storagePoolDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( pool ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { boolean returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue () ; if ( returnValue ) { command . execute () ; } else { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.HasAdElementReconnectPermission , portalUserReconnectPermParams , portalUserReconnectPermissionQuery ) ; } }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel object ) { super . edit ( object ) ; labelsWidget . edit ( object . getLabelsModel () ) ; bondSuggestEditor . setVisible ( true ) ; bondEditor . setVisible ( false ) ; labelsWidget . setVisible ( true ) ; info . setVisible ( false ) ; message . setVisible ( false ) ; layoutPanel . remove ( infoPanel ) ; asPopupPanel () . setPixelSize ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
@ java.lang.Override protected boolean canDoAction () { if ( ! ( super . canDoAction () ) ) { return false ; } if ( ! ( org.ovirt.engine.core.common.gluster.GlusterFeatureSupported . glusterSnapshot ( org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase . getVdsGroup () . getCompatibilityVersion () ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED ) ; } return true ; }
protected boolean updateVnicForBackwardCompatibility () { if ( ! ( validate ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper . updateNicForBackwardCompatibility ( org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getParameters () . getInterface () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getParameters () . getNetworkName () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getParameters () . isPortMirroring () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getVmTemplate () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getCurrentUser () ) ) ) ) { return false ; } return true ; }
private boolean isStorageDomainValid ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.ImageFileType imageType , boolean forceRefresh ) { if ( storageDomainId == null ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log . error ( STRING_CONSTANT ) ; return false ; } if ( forceRefresh ) { return refreshRepos ( storageDomainId , imageType ) ; } return true ; }
@ org.junit.Before public void setUp () { storagePool = cmd . getParameters () . getStoragePool () ; cmd . init () ; org.mockito.Mockito . when ( storagePoolDao . get ( storagePool . getId () ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito . when ( storagePoolIsoMapDao . getAllForStorage ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . emptyList () ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ! ( o instanceof org.ovirt.engine.core.common.businessentities.network.IpConfiguration ) ) return false ; org.ovirt.engine.core.common.businessentities.network.IpConfiguration that = ( ( org.ovirt.engine.core.common.businessentities.network.IpConfiguration ) ( o ) ) ; return java.util.Objects . equals ( getIPv4Addresses () , that . getIPv4Addresses () ) ; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createHibernationMemoryDisk ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , org.ovirt.engine.core.bll.utils.VmOverheadCalculator vmOverheadCalculator ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.memory.MemoryUtils . createMemoryDisk ( vm , storageType , vmOverheadCalculator , null ) ; image . setDiskAlias ( org.ovirt.engine.core.bll.memory.MemoryUtils . generateHibernationMemoryDiskAlias ( vm . getName () ) ) ; image . setDescription ( org.ovirt.engine.core.bll.memory.MemoryUtils.VM_HIBERNATION_MEMORY_DISK_DESCRIPTION ) ; return image ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > () ; getQuota () . setItems ( quotas ) ; getQuota () . setIsEmpty ( quotas . isEmpty () ) ; updateControlsAvailability () ; stopProgress () ; }
private org.ovirt.engine.core.common.action.ImagesContainterParametersBase buildChildCommandParameters ( org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk ) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase createParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase ( cinderDisk . getId () ) ; createParams . setVmSnapshotId ( newActiveSnapshotId ) ; createParams . setParentHasTasks ( ( ( ! ( cachedImagesDisks . isEmpty () ) ) || ( getMemoryImageBuilder () . isCreateTasks () ) ) ) ; createParams . setDescription ( getParameters () . getDescription () ) ; return withRootCommandInfo ( createParams ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice () { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.Empty , vm . getId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT , new java.util.HashMap <> () , true , true , true , STRING_CONSTANT , new java.util.HashMap <> () , org.ovirt.engine.core.compat.Guid . newGuid () , STRING_CONSTANT ) ; }
private static java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > queryPrincipals ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final org.ovirt.engine.api.extensions.ExtMap filter , boolean recursiveGroupsResolving ) { return org.ovirt.engine.core.aaa.AuthzUtils . populatePrincipals ( extension , new org.ovirt.engine.api.extensions.ExtMap () . mput ( Authz.InvokeKeys.QUERY_ENTITY , Authz.QueryEntity.PRINCIPAL ) . mput ( Authz.InvokeKeys.RESOLVE_GROUPS_RECURSIVE , recursiveGroupsResolving ) . mput ( Authz.InvokeKeys.QUERY_FILTER , filter ) ) ; }
protected void openDocumentation ( T model ) { java.lang.String helpTag = model . getHelpTag () . name () ; java.lang.String docPath = org.ovirt.engine.ui.common.uicommon.ContextSensitiveHelpManager . getPath ( helpTag ) ; java.lang.String docBase = model . getConfigurator () . getDocsBaseUrl () ; org.ovirt.engine.ui.common.utils.WebUtils . openUrlInNewWindow ( STRING_CONSTANT , ( docBase + docPath ) , WebUtils.OPTION_SCROLLBARS ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { try ( java.io.InputStream fixturesStream = org.ovirt.engine.core.FixturesTest . class . getResourceAsStream ( STRING_CONSTANT ) ) { javax.xml.parsers.DocumentBuilder documentBuilder = javax.xml.parsers.DocumentBuilderFactory . newInstance () . newDocumentBuilder () ; fixturesDocument = documentBuilder . parse ( fixturesStream ) ; javax.xml.xpath.XPath xPath = javax.xml.xpath.XPathFactory . newInstance () . newXPath () ; tablesOfDatasetExpression = xPath . compile ( STRING_CONSTANT ) ; columnsExpression = xPath . compile ( STRING_CONSTANT ) ; rowExpression = xPath . compile ( STRING_CONSTANT ) ; } }
@ org.junit.Test public void exampleToMapDefaultMapper () { java.util.Map < java.lang.String , java.lang.String > map = org.ovirt.engine.core.utils.linq.LinqUtils . toMap ( list , new org.ovirt.engine.core.utils.linq.DefaultMapper < java.lang.String , java.lang.String > () { @ java.lang.Override public java.lang.String createKey ( java.lang.String s ) { return s . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } } ) ; java.util.Map < java.lang.String , java.lang.String > example = new java.util.HashMap < java.lang.String , java.lang.String > () ; example . put ( STRING_CONSTANT , STRING_CONSTANT ) ; example . put ( STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( map , example ) ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getSingleBrickVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito . doReturn ( getMultiBrickVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; }
@ java.lang.Override public void onRemoval () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy . getDbFacade () . getStorageDomainDao () . getAllByConnectionId ( provider . getId () ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainEntry = storageDomains . get ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy . getDbFacade () . getStorageDomainDynamicDao () . remove ( storageDomainEntry . getId () ) ; org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy . getDbFacade () . getStorageDomainStaticDao () . remove ( storageDomainEntry . getId () ) ; }
public void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue () : NUMBER_CONSTANT ; } } ; aQuery.asyncCallback . onSuccess ( aQuery . getModel () , NUMBER_CONSTANT ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( STRING_CONSTANT , isRollbackOnFailure () ) . append ( STRING_CONSTANT , getConnectivityTimeout () ) . append ( STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.Entities . collectionToString ( getNetworks () , STRING_CONSTANT ) ) . append ( STRING_CONSTANT , getRemovedNetworks () ) . append ( STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.Entities . collectionToString ( getCreateOrUpdateBonds () , STRING_CONSTANT ) ) . append ( STRING_CONSTANT , getRemovedBonds () ) ; }
@ java.lang.Override protected void updateTemplate () { java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryType > queryTypeList = new java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryType > () ; queryTypeList . add ( VdcQueryType.GetVmTemplatesWithPermittedAction ) ; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters () ; getEntitiesWithPermittedActionParameters . setActionGroup ( org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalNewTemplateVmModelBehavior.CREATE_VM ) ; java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > parametersList = new java.util.ArrayList < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.queries.VdcQueryParametersBase [] { getEntitiesWithPermittedActionParameters } ) ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleQueries ( queryTypeList , parametersList , this , getModel () ) ; }
@ java.lang.Override protected void onEntityChanged () { super . onEntityChanged () ; if ( ( getEntity () ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity () ) ) ; setItems ( template . getInterfaces () ) ; } else { setItems ( null ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object model1 , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > vdsList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; if ( ( vdsList . size () ) > NUMBER_CONSTANT ) { clusterModel . getEnableTrustedService () . setIsChangable ( false ) ; clusterModel . getEnableTrustedService () . setInfo ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . trustedServiceDisabled () ) ; } }
public static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getDisksDummiesForStorageAllocations ( java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > originalDisks ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskDummies = new java.util.ArrayList ( originalDisks . size () ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : originalDisks ) { org.ovirt.engine.core.common.businessentities.DiskImage clone = org.ovirt.engine.core.common.businessentities.DiskImage . copyOf ( diskImage ) ; clone . setVolumeType ( VolumeType.Sparse ) ; clone . setvolumeFormat ( VolumeFormat.COW ) ; diskDummies . add ( clone ) ; } return diskDummies ; }
@ org.junit.Test public void hostAttachedToLocalStorageWithoutDataCenter () { org.mockito.Mockito . when ( dbFacade . getStoragePoolDao () ) . thenReturn ( storagePoolDao ) ; validator = new org.ovirt.engine.core.bll.validator.HostValidator ( dbFacade , host , hostedEngineHelper ) ; org.junit.Assert . assertThat ( validator . validateSingleHostAttachedToLocalStorage () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override public java.lang.String getTooltip () { java.lang.String tooltip = null ; if ( ( getModel () . isHotPlugAvailable () ) && ( ! ( getModel () . getIsDiskHotPlugSupported () ) ) ) { tooltip = org.ovirt.engine.ui.common.widget.uicommon.vm.VmDiskListModelTable.constants . diskHotPlugNotSupported () ; } return tooltip ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap ) ) { return false ; } org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap other = ( ( org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap ) ( obj ) ) ; return ( ( java.util.Objects . equals ( id , other.id ) ) && ( java.util.Objects . equals ( quotaId , other.quotaId ) ) ) && ( java.util.Objects . equals ( diskProfileId , other.diskProfileId ) ) ; }
@ org.junit.Test public void testUpdateAll ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmDynamic existingVm2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; existingVm . setStatus ( VMStatus.Down ) ; existingVm2 . setVmIp ( STRING_CONSTANT ) ; dao . updateAll ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.businessentities.VmDynamic [] { existingVm , existingVm2 } ) ) ; org.junit.Assert . assertEquals ( existingVm , dao . get ( existingVm . getId () ) ) ; org.junit.Assert . assertEquals ( existingVm2 , dao . get ( existingVm2 . getId () ) ) ; }
@ org.junit.Before @ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; actionGroup = org.ovirt.engine.core.utils.RandomUtils . instance () . pickRandom ( org.ovirt.engine.core.common.businessentities.ActionGroup . values () ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest . getQueryParameters () . getActionGroup () ) . thenReturn ( actionGroup ) ; sessionID = org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest . getQueryParameters () . getSessionId () ) . thenReturn ( sessionID ) ; org.ovirt.engine.core.bll.session.SessionDataContainer . getInstance () . setUser ( sessionID , org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest . getUser () ) ; }
@ org.junit.Test public void testCannotUpdateOSNotSupportVirtioScsi () { prepareVmToPassValidate () ; group . setCompatibilityVersion ( Version.v3_6 ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isVirtioScsiEnabledForVm ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.UpdateVmCommandTest.osRepository . getDiskInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( STRING_CONSTANT ) ) ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StatsInfo > getStatsInfo () { org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statInfo = new org.ovirt.engine.core.common.businessentities.gluster.StatsInfo () ; statInfo . setDuration ( NUMBER_CONSTANT ) ; statInfo . setDurationFormatted ( new org.ovirt.engine.core.common.utils.Pair ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS . toString () ) ) ; statInfo . setTotalRead ( NUMBER_CONSTANT ) ; statInfo . setTotalWrite ( NUMBER_CONSTANT ) ; statInfo . setBlockStats ( getBlockStats () ) ; statInfo . setFopStats ( getFopStats () ) ; return java.util.Collections . singletonList ( statInfo ) ; }
public void PostOnSaveInternal ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel ) ( getWindow () ) ) ; model . StopProgress () ; Cancel () ; if ( model . getIsNew () ) { setGuideContext ( returnValue . getActionReturnValue () ) ; UpdateActionAvailability () ; getGuideCommand () . Execute () ; } }
@ org.junit.Test public void validateFailedDiskInterfaceUnsupported () { mockVmStatusUp () ; createVirtIODisk () ; initStorageDomain () ; org.mockito.Mockito . when ( diskVmElementValidator . isDiskInterfaceSupported ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ; }
private void updateTimeoutLogableObject ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { int eventFloodRate = ( ( auditLogable . isExternal () ) && ( ( auditLogable . getEventFloodInSec () ) == NUMBER_CONSTANT ) ) ? NUMBER_CONSTANT : logType . getEventFloodRate () ; if ( eventFloodRate > NUMBER_CONSTANT ) { auditLogable . setEndTime ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( eventFloodRate ) ) ; auditLogable . setTimeoutObjectId ( composeObjectId ( auditLogable , logType ) ) ; } }
private boolean propertiesRequiringUnplugPlugWereUpdated () { return ( ! ( oldIface . getType () . equals ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator . getInterface () . getType () ) ) ) || ( ! ( oldIface . getMacAddress () . equals ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator . getMacAddress () ) ) ) ; }
@ org.junit.Test public void testAddOperationAction () { org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.ActionType , org.ovirt.engine.core.common.action.ActionParametersBase > testOperation = new org.ovirt.engine.ui.frontend.communication.VdcOperation ( org.ovirt.engine.core.common.action.ActionType.AddNetworkOnProvider , new org.ovirt.engine.core.common.action.ActionParametersBase () , null ) ; testManager . addOperation ( testOperation ) ; org.mockito.Mockito . verify ( mockOperationProcessor ) . processOperation ( testManager ) ; org.mockito.Mockito . verify ( mockEventBus ) . fireEvent ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , testOperation , testManager . pollOperation () ) ; }
public void testCannotUpdateOSNotSupportVirtioScsi () { prepareVmToPassValidate () ; group . setCompatibilityVersion ( Version.v4_0 ) ; org.mockito.Mockito . when ( command . isVirtioScsiEnabledForVm ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( true ) ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( STRING_CONSTANT ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI ) ; }
private void updateShareableDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.ShareableDiskEnabled , datacenter . getcompatibility_version () . getValue () ) ) ) ; getIsShareable () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS . shareableDiskNotSupported () ) ; getIsShareable () . setIsChangable ( ( isShareableDiskEnabled && ( isEditEnabled () ) ) ) ; }
@ java.lang.Override public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { if ( user . isAdmin () ) { return org.ovirt.engine.ui.webadmin.widget.table.column.UserStatusColumn.constants . admin () ; } if ( user . isGroup () ) { return org.ovirt.engine.ui.webadmin.widget.table.column.UserStatusColumn.constants . group () ; } return org.ovirt.engine.ui.webadmin.widget.table.column.UserStatusColumn.constants . user () ; }
@ org.junit.Test public void testBasicConstructors () { org.ovirt.engine.core.compat.TimeSpan span = new org.ovirt.engine.core.compat.TimeSpan ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Hours ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Minutes ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Seconds ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Days ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Milliseconds ) ; }
private void removeCinderDisk ( org.ovirt.engine.core.compat.Guid cinderDiskId ) { java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil . executeAsyncCommand ( VdcActionType.RemoveCinderDisk , buildRevertParameters ( cinderDiskId ) , null ) ; try { future . get () ; } catch ( java.lang.InterruptedException | java.util.concurrent.ExecutionException e ) { log . error ( STRING_CONSTANT , cinderDiskId ) ; log . error ( STRING_CONSTANT , e ) ; } }
public void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > () ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
@ java.lang.Override public void onBrowserEvent ( com.google.gwt.cell.client.Cell.Context context , final com.google.gwt.dom.client.Element elem , T object , com.google.gwt.dom.client.NativeEvent event ) { super . onBrowserEvent ( context , elem , object , event ) ; if ( BrowserEvents.MOUSEOVER . equals ( event . getType () ) ) { com.google.gwt.safehtml.shared.SafeHtml tooltipHtml = getTooltip ( object ) ; if ( ( tooltipHtml != null ) && ( ! ( tooltipHtml . asString () . isEmpty () ) ) ) { tooltipPanel . setText ( getTooltip ( object ) ) ; } } tooltipPanel . handleNativeBrowserEvent ( elem , event ) ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.api.model.Permit . class , to = org.ovirt.engine.core.common.businessentities.ActionGroup . class ) public static org.ovirt.engine.core.common.businessentities.ActionGroup map ( org.ovirt.engine.api.model.Permit model , org.ovirt.engine.core.common.businessentities.ActionGroup template ) { org.ovirt.engine.core.common.businessentities.ActionGroup entity = template ; if ( model . isSetId () ) { entity = org.ovirt.engine.core.common.businessentities.ActionGroup . forValue ( java.lang.Integer . parseInt ( model . getId () ) ) ; } if ( model . isSetName () ) { entity = org.ovirt.engine.core.common.businessentities.ActionGroup . valueOf ( model . getName () . toUpperCase () ) ; } return entity ; }
@ org.junit.Test public void testRemove () { org.ovirt.engine.core.common.businessentities.EngineSession result = dao . get ( existingEngineSession . getId () ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , dao . remove ( existingEngineSession . getId () ) ) ; result = dao . get ( existingEngineSession . getId () ) ; org.junit.Assert . assertNull ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , dao . remove ( existingEngineSession . getId () ) ) ; }
@ org.junit.Test public void onlyOneSlaveForBonding () { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.SetupNetworksHelperTest.BOND_NAME , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > slaves = java.util.Arrays . asList ( createNic ( STRING_CONSTANT , null ) ) ; mockExistingIfacesWithBond ( bond , slaves ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForBond ( bond , slaves ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond . getName () ) ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void poll () { if ( vdsManager . isMonitoringNeeded () ) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher () ; long fetchTime = java.lang.System . nanoTime () ; if ( fetcher . fetch () ) { getVmsMonitoring () . perform ( fetcher . getChangedVms () , fetchTime , vdsManager ) ; processDevices ( fetcher . getVdsmVms () . stream () . map ( VmInternalData : : getVmDynamic ) , fetchTime ) ; } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log . info ( STRING_CONSTANT , vdsManager . getVdsName () ) ; } } }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( new org.ovirt.engine.api.model.Tag () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void testRemove ( ) throws java.lang.Exception { setUpQueryExpectations ( STRING_CONSTANT , null , StorageDomainType.ImportExport ) ; setUpGetDataCenterByStorageDomainExpectations ( GUIDS [ NUMBER_CONSTANT ] , NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmTemplateFromImportExport , org.ovirt.engine.core.common.action.VmTemplateImportExportParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , GUIDS [ NUMBER_CONSTANT ] , GUIDS [ NUMBER_CONSTANT ] } , true , true ) ) ; verifyRemove ( resource . remove () ) ; }
@ java.lang.Override public javax.ws.rs.core.Response remove () { get () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections () ; connection . setId ( id ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty ; org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId , false ) ; return performAction ( VdcActionType.RemoveStorageServerConnection , parameters ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > createDiskImageList () { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; disk . setImageId ( diskImageId ) ; disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( storageDomainId ) ) ) ; return java.util.Collections . singletonList ( disk ) ; }
@ org.junit.Test public void testGetVmsCountByClusterId () { org.junit.Assert . assertEquals ( STRING_CONSTANT , FixturesTool.NUMBER_OF_VMS_IN_CLUSTER_RHEL6_NFS_CLUSTER , dao . getVmsCountByClusterId ( FixturesTool.CLUSTER_RHEL6_NFS ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , FixturesTool.NUMBER_OF_VMS_IN_CLUSTER_RHEL6_ISCSI , dao . getVmsCountByClusterId ( FixturesTool.CLUSTER_RHEL6_ISCSI ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , dao . getVmsCountByClusterId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) ; }
@ java.lang.Override public java.lang.Boolean getValue () { boolean allEntriesDisabled = ! ( isEnabled () ) ; for ( org.ovirt.engine.ui.uicommonweb.models.hosts.VfsConfigNetwork vfsConfigNetwork : getNetworksTableItems () ) { if ( ( allEntriesDisabled || ( canEditAssign ( vfsConfigNetwork ) ) ) && ( ! ( vfsConfigNetwork . isAttached () ) ) ) { return false ; } } return true ; }
public void setScope ( java.lang.String scope ) { if ( ( ( scopeAsList ) == null ) && ( ! ( org.ovirt.engine.core.sso.utils.SsoUtils . strippedScopeAsList ( org.ovirt.engine.core.sso.utils.SsoUtils . scopeAsList ( scope ) ) . isEmpty () ) ) ) { this . scope = scope ; this . scopeAsList = org.ovirt.engine.core.sso.utils.SsoUtils . scopeAsList ( scope ) ; } }
private static void SetVmTemplateStatus ( org.ovirt.engine.core.compat.Guid vmTemplateGuid , org.ovirt.engine.core.common.businessentities.VmTemplateStatus status , org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmTemplateDao () . get ( vmTemplateGuid ) ; if ( vmTemplate != null ) { if ( compensationContext != null ) { compensationContext . snapshotEntityStatus ( vmTemplate ) ; } vmTemplate . setStatus ( status ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmTemplateDao () . update ( vmTemplate ) ; } else { org.ovirt.engine.core.bll.VmTemplateHandler.log . warnFormat ( STRING_CONSTANT , status ) ; } }
private org.ovirt.engine.core.common.businessentities.VM createVmForTesting ( java.lang.String initrd , java.lang.String kernel ) { mockVm ( command ) ; command . getVm () . setinitrd_url ( initrd ) ; command . getVm () . setkernel_url ( kernel ) ; command . createVm () ; org.ovirt.engine.core.common.businessentities.VM vm = vmDAO . get ( command . getParameters () . getVmId () ) ; return vm ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( STRING_CONSTANT . equals ( command . getName () ) ) { addDisk () ; } if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.webadmin.uicommon.FileFetchEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.webadmin.uicommon.FileFetchEventArgs args ) { if ( ev . matchesDefinition ( spiceVersionFileFetchedEvent_Definition ) ) { org.ovirt.engine.core.compat.Version spiceVersion = parseVersion ( args . getFileContent () ) ; setSpiceVersion ( spiceVersion ) ; } else if ( ev . matchesDefinition ( documentationFileFetchedEvent_Definition ) ) { java.lang.String documentationPathFileContent = args . getFileContent () ; org.ovirt.engine.ui.common.uicommon.DocumentationPathTranslator . init ( documentationPathFileContent ) ; } }
@ java.lang.Override public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties () { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties () ; jobProperties . put ( VdcObjectType.Snapshot . name () . toLowerCase () , getParameters () . getDescription () ) ; } return jobProperties ; }
private void checkTemplateName ( boolean isImportAsNewEntity , java.lang.String name ) { command . getParameters () . getVmTemplate () . setName ( name ) ; command . getParameters () . setImportAsNewEntity ( isImportAsNewEntity ) ; java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.action.ImportVmTemplateParameters > > validate = org.ovirt.engine.core.common.utils.ValidationUtils . getValidator () . validate ( command . getParameters () , command . getValidationGroups () . toArray ( new java.lang.Class < > [ NUMBER_CONSTANT ] ) ) ; org.junit.Assert . assertNotEquals ( validate . isEmpty () , isImportAsNewEntity ) ; }
private void createNotVirtIODisk () { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = getDiskImage () ; disk . setActive ( true ) ; disk . setDiskInterface ( DiskInterface.IDE ) ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( disk ) ; org.mockito.Mockito . when ( osRepository . getDiskHotpluggableInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ) . thenReturn ( new java.util.HashSet <> ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.DISK_HOTPLUGGABLE_INTERFACES ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { org.ovirt.engine.core.common.businessentities.VDS prevHost = getPreviousHost ( hosts ) ; hosts . add ( NUMBER_CONSTANT , null ) ; proxyHostPropertiesModel . getProxyHost () . setItems ( hosts ) ; proxyHostPropertiesModel . getProxyHost () . setSelectedItem ( prevHost ) ; }
protected javax.ws.rs.core.Response performNonBlockingAction ( org.ovirt.engine.core.common.action.VdcActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.api.model.Action action ) { try { doNonBlockingAction ( task , params ) ; if ( action != null ) { action . setStatus ( CreationStatus.IN_PROGRESS . value () ) ; return javax.ws.rs.core.Response . status ( Response.Status.ACCEPTED ) . entity ( action ) . build () ; } else { return javax.ws.rs.core.Response . status ( Response.Status.ACCEPTED ) . build () ; } } catch ( java.lang.Exception e ) { return handleError ( javax.ws.rs.core.Response . class , e , false ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.String fingerprint ) { if ( ( fingerprint != null ) && ( ( fingerprint . length () ) > NUMBER_CONSTANT ) ) { getFetchSshFingerprint () . setEntity ( fingerprint ) ; getFetchResult () . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . successLoadingFingerprint () ) ; } else { getFetchResult () . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . errorLoadingFingerprint () ) ; } }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { validateParameters ( cluster , getMandatoryParameters () ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter ( cluster ) ; return performCreate ( VdcActionType.AddCluster , createAddCommandParams ( cluster , dataCenter ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ) ; }
protected boolean canAddVm ( java.util.List < java.lang.String > reasons , java.lang.String name , org.ovirt.engine.core.compat.Guid storagePoolId , int vmPriority ) { if ( isVmWithSameNameExists ( name , storagePoolId ) ) { reasons . add ( VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED . name () ) ; return false ; } if ( ! ( verifyAddVM ( reasons , vmPriority ) ) ) { return false ; } if ( ! ( checkTemplateImages ( reasons ) ) ) { return false ; } return true ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.DestroyImageCheckCommand . getParameters () . setEntityInfo ( new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.bll.DestroyImageCheckCommand . getParameters () . getImageGroupId () ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > failedGuids = getFailedVolumeIds () ; if ( failedGuids . isEmpty () ) { log . info ( STRING_CONSTANT ) ; org.ovirt.engine.core.bll.DestroyImageCheckCommand . setSucceeded ( true ) ; persistCommand ( org.ovirt.engine.core.bll.DestroyImageCheckCommand . getParameters () . getParentCommand () ) ; } else { log . error ( STRING_CONSTANT , failedGuids ) ; } }
public static void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
@ org.junit.Test public void validateFailsForCluster () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters () , null ) ) ; prepareMocks ( VDSStatus.Up ) ; mockIsGlusterEnabled ( false ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; mockIsGlusterEnabled ( true ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { setUpMocksForRemove () ; mockBackend ( false , EngineError.GlusterHookRemoveFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . remove ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_REMOVE_FAILED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override public void setMessage ( java.lang.String message ) { super . setMessage ( message ) ; messagePanel . setVisible ( ( ( message != null ) && ( ! ( message . isEmpty () ) ) ) ) ; messagePanel . clear () ; if ( message != null ) { messagePanel . add ( new com.google.gwt.user.client.ui.Label ( message ) ) ; } }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object ) { updateKeyTitle ( object ) ; object . getKeys () . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { com.google.gwt.event.logical.shared.ValueChangeEvent . fire ( org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget . this , object ) ; updateKeyTitle ( object ) ; } } ) ; driver . edit ( object ) ; }
private static void setActions ( org.ovirt.engine.api.model.BaseResource model , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParentType ) { org.ovirt.engine.api.restapi.util.LinkHelper.Collection collection = org.ovirt.engine.api.restapi.util.LinkHelper . getCollection ( model ) ; if ( collection != null ) { java.lang.String path = org.ovirt.engine.api.restapi.util.LinkHelper . getPath ( model , suggestedParentType ) ; if ( path != null ) { org.ovirt.engine.api.restapi.util.ActionsBuilder actionsBuilder = new org.ovirt.engine.api.restapi.util.ActionsBuilder ( path , collection . getResourceType () ) ; model . setActions ( actionsBuilder . build () ) ; } } }
void addReportedDevices ( org.ovirt.engine.api.model.NIC model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { java.util.List < org.ovirt.engine.api.model.ReportedDevice > devices = getDevices ( entity . getVmId () , entity . getMacAddress () ) ; if ( ! ( devices . isEmpty () ) ) { org.ovirt.engine.api.model.ReportedDevices reportedDevices = new org.ovirt.engine.api.model.ReportedDevices () ; reportedDevices . getReportedDevices () . addAll ( devices ) ; model . setReportedDevices ( reportedDevices ) ; } }
@ org.junit.Test public void getVdsSwallowsException () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase () ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; b . setVds ( vds ) ; b . setVdsId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID3 ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertNull ( v ) ; }
@ java.lang.Override protected void executeVdsBrokerCommand () { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand . getBroker () . discoverSendTargets ( org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelper . getInstance () . createStructFromConnection ( org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand . getParameters () . getConnection () , org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand . getParameters () . getVdsId () ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand . proceedProxyReturnValue () ; setReturnValue ( ( _result . isFullTargets () ? parseFullTargets ( _result . getIqnList () ) : parseTargets ( _result . getIqnList () ) ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredClusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterByArchitecture ( clusters , vm . getClusterArch () ) ; model . setDataCentersAndClusters ( model , java.util.Arrays . asList ( dataCenter ) , filteredClusters , vm . getVdsGroupId () ) ; initTemplate () ; }
@ java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult submitEventSync ( org.ovirt.engine.core.common.eventqueue.Event event , java.util.concurrent.Callable < org.ovirt.engine.core.common.eventqueue.EventResult > callable ) { java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > task = submitTaskInternal ( event , callable ) ; if ( task != null ) { try { return task . get () ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.eventqueue.EventQueueMonitor.log . errorFormat ( STRING_CONSTANT , event . getStoragePoolId () , e ) ; } } return null ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain initStorageDomain ( org.ovirt.engine.core.compat.Guid storageDomainId ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setId ( storageDomainId ) ; storageDomain . setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito . when ( storageDomainDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito . when ( storageDomainDao . getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; return storageDomain ; }
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > getClustersToAttach () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > clusterToAttach = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > () ; for ( java.lang.Object item : getNetworkClusterList () . getItems () ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel ) ( item ) ) ; if ( networkClusterModel . isAttached () ) { clusterToAttach . add ( networkClusterModel ) ; } } return clusterToAttach ; }
@ java.lang.Override public org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper clone ( ) throws java.lang.CloneNotSupportedException { org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper cloneWrapper = new org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper ( getAuditLogable () , canDoActionMessages ) ; if ( ( getParameters () ) != null ) { cloneWrapper . setParameters ( new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > () ) ; for ( org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter parameter : getParameters () ) { cloneWrapper . getParameters () . add ( parameter . clone () ) ; } } return cloneWrapper ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.EngineBackupLogId ) ) { return false ; } org.ovirt.engine.core.common.businessentities.EngineBackupLogId other = ( ( org.ovirt.engine.core.common.businessentities.EngineBackupLogId ) ( obj ) ) ; return ( java.util.Objects . equals ( scope , other.scope ) ) && ( java.util.Objects . equals ( doneAt , other.doneAt ) ) ; }
@ org.junit.Test public void moveUnpluggedDiskVmUp () { command . getParameters () . setParametersList ( createMoveDisksParameters () ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageId , false ) ; command . updateParameters () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , command . getMoveDiskParametersList () . size () ) ; }
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > getDisksModels () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > diskModels = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : getDisks () ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel () ; diskModel . setDisk ( diskImage ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomain = new org.ovirt.engine.ui.uicommonweb.models.ListModel () ; storageDomain . setSelectedItem ( getStorageDomain () ) ; diskModel . setStorageDomain ( storageDomain ) ; diskModels . add ( diskModel ) ; } return diskModels ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getBookmarkDao () ; new_bookmark = new org.ovirt.engine.core.common.businessentities.Bookmark () ; java.util.Random r = new java.util.Random ( java.lang.System . currentTimeMillis () ) ; new_bookmark . setbookmark_name ( ( STRING_CONSTANT + ( ( r . nextInt () ) % ( org.ovirt.engine.core.dao.BookmarkDAOTest.BOOKMARK_MAX_RANDOM_NUMBER ) ) ) ) ; new_bookmark . setbookmark_value ( STRING_CONSTANT ) ; existing_bookmark = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters ) { if ( ( dataCenters != null ) && ( ! ( dataCenters . isEmpty () ) ) ) { getDataCenter () . setSelectedItem ( dataCenters . get ( NUMBER_CONSTANT ) ) ; } else { org.ovirt.engine.core.common.businessentities.StoragePool noneStoragePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; noneStoragePool . setId ( Guid.Empty ) ; noneStoragePool . setName ( STRING_CONSTANT ) ; getDataCenter () . setSelectedItem ( noneStoragePool ) ; } }
public org.ovirt.engine.core.common.businessentities.BootSequence getSequence () { java.lang.StringBuilder str = new java.lang.StringBuilder () ; for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel a : getItems () ) { if ( a . getIsChangable () ) { org.ovirt.engine.core.common.businessentities.BootSequence bs = ( ( org.ovirt.engine.core.common.businessentities.BootSequence ) ( a . getEntity () ) ) ; str . append ( bs . toString () ) ; } } return ! ( str . toString () . equals ( STRING_CONSTANT ) ) ? org.ovirt.engine.core.common.businessentities.BootSequence . valueOf ( str . toString () ) : null ; }
@ java.lang.Override public void freeMacs ( java.util.List < java.lang.String > macs ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock ( lockObj . writeLock () ) ) { for ( java.lang.String mac : macs ) { macsStorage . freeMac ( org.ovirt.engine.core.utils.MacAddressRangeUtils . macToLong ( mac ) ) ; } } }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > () ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
@ org.junit.Test public void testRemoveNotExisting ( ) throws java.lang.Exception { setUpGetNotExistingEntityExpectations () ; javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendStorageServerConnectionResource.HOST , GUIDS [ NUMBER_CONSTANT ] . toString () ) ; setUriInfo ( uriInfo ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
private static org.ovirt.engine.core.common.businessentities.network.NetworkCluster cloneNetworkCluster ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster instance ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster obj = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster () ; obj . setId ( instance . getId () ) ; obj . setStatus ( instance . getStatus () ) ; obj . setDisplay ( instance . isDisplay () ) ; obj . setRequired ( instance . isRequired () ) ; obj . setMigration ( instance . isMigration () ) ; return obj ; }
@ java.lang.Override @ org.junit.Before public void setUp () { super . setUp () ; vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setStatus ( VMStatus.Down ) ; org.mockito.Mockito . when ( vmDao . getVmsListForDisk ( getDiskImageId () , java.lang.Boolean.FALSE ) ) . thenReturn ( java.util.Collections . singletonList ( vm ) ) ; org.mockito.Mockito . doReturn ( vmDao ) . when ( cmd ) . getVmDao () ; }
private void templateValidate () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . countAllTemplates ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel () , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { int count = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( count <= NUMBER_CONSTANT ) { getModel () . disableEditing ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . notAvailableWithNoTemplates () ) ; } } } ) ) ; }
@ java.lang.Override public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . ExecuteCommand ( command ) ; if ( command == ( getNewCommand () ) ) { newNetwork () ; } else if ( command == ( getEditCommand () ) ) { edit () ; } else if ( command == ( getRemoveCommand () ) ) { remove () ; } }
@ org.junit.Test public void vdsIdRefVds () { b . setVdsIdRef ( null ) ; final org.ovirt.engine.core.common.businessentities.VDS v = new org.ovirt.engine.core.common.businessentities.VDS () ; v . setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVds ( v ) ; final org.ovirt.engine.core.compat.Guid g = b . getVdsIdRef () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { addVmImagesAndSnapshots () ; updateSnapshotsFromExport () ; MoveOrCopyAllImageGroups () ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . addImportedDevices ( getVm () . getStaticData () , getParameters () . isImportAsNewEntity () ) ; org.ovirt.engine.core.bll.VmHandler . LockVm ( getVm () . getId () ) ; if ( getParameters () . isImportAsNewEntity () ) { getParameters () . setVm ( getVm () ) ; setVmId ( getVm () . getId () ) ; } return null ; }
public static boolean supportedInConfig ( org.ovirt.engine.core.common.config.ConfigValues feature , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.ArchitectureType arch ) { java.util.Map < java.lang.String , java.lang.String > archOptions = org.ovirt.engine.core.common.config.Config . < java.util.Map > getValue ( feature , version . getValue () ) ; java.lang.String value = archOptions . get ( arch . name () ) ; if ( value == null ) { value = archOptions . get ( arch . getFamily () . name () ) ; } return java.lang.Boolean . parseBoolean ( value ) ; }
private void initVncKeyboardLayout () { java.util.List < java.lang.String > layouts = ( ( java.util.List < java.lang.String > ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.VncKeyboardLayoutValidValues ) ) ) ; java.util.List < java.lang.String > vncKeyboardLayoutItems = new java.util.ArrayList < java.lang.String > () ; vncKeyboardLayoutItems . add ( null ) ; vncKeyboardLayoutItems . addAll ( layouts ) ; getVncKeyboardLayout () . setItems ( vncKeyboardLayoutItems ) ; getVncKeyboardLayout () . setIsChangable ( false ) ; }
public void removeFunction ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { unusedFunctions . add ( policyUnit ) ; for ( int i = NUMBER_CONSTANT ; i < ( usedFunctions . size () ) ; i ++ ) { if ( usedFunctions . get ( i ) . getFirst () . getId () . equals ( policyUnit . getId () ) ) { usedFunctions . remove ( i ) ; break; } } refreshCustomProperties ( policyUnit , false ) ; getFunctionsChangedEvent () . raise ( this , EventArgs.Empty ) ; }
@ org.junit.Before public void setUp () { org.mockito.Mockito . when ( spDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest . createStoragePool () ) ; org.mockito.Mockito . when ( clusterDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest . createClusterList () ) ; org.mockito.Mockito . doReturn ( poolValidator ) . when ( cmd ) . createStoragePoolValidator () ; }
@ org.junit.Test public void ovfConfigurationMap () { java.lang.String ovfConfig = STRING_CONSTANT ; org.ovirt.engine.api.model.ConfigurationType configurationType = org.ovirt.engine.api.model.ConfigurationType.OVF ; org.ovirt.engine.api.model.Vm model = new org.ovirt.engine.api.model.Vm () ; org.ovirt.engine.api.restapi.types.VmMapper . map ( ovfConfig , ConfigurationType.OVF , model ) ; assertNotNull ( model . getInitialization () ) ; assertNotNull ( model . getInitialization () . getConfiguration () ) ; assertEquals ( ovfConfig , model . getInitialization () . getConfiguration () . getData () ) ; assertEquals ( model . getInitialization () . getConfiguration () . getType () , configurationType ) ; }
private static void setupLogger ( java.util.Map < java.lang.String , java.lang.Object > args ) throws java.io.IOException { java.util.logging.Logger log = java.util.logging.Logger . getLogger ( STRING_CONSTANT ) ; java.lang.String logfile = ( ( java.lang.String ) ( args . get ( STRING_CONSTANT ) ) ) ; if ( logfile != null ) { java.util.logging.FileHandler fh = new java.util.logging.FileHandler ( logfile , true ) ; fh . setFormatter ( new java.util.logging.SimpleFormatter () ) ; log . addHandler ( fh ) ; } org.ovirt.engine.exttool.core.ExtensionsToolExecutor.OVIRT_LOGGER . setLevel ( ( ( java.util.logging.Level ) ( args . get ( STRING_CONSTANT ) ) ) ) ; }
@ java.lang.Override protected boolean canDoAction () { boolean autheticated = super . canDoAction () ; if ( autheticated ) { autheticated = org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand . getCurrentUser () . isAdmin () ; if ( ! autheticated ) { addCanDoActionMessage ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand . logAutheticationFailure () ; } } return autheticated ; }
@ java.lang.Override public void onSuccess ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > clusterFeatures ) { stopProgress () ; java.util.Set < org.ovirt.engine.core.common.businessentities.AdditionalFeature > featuresEnabled = new java.util.HashSet <> () ; for ( org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : clusterFeatures ) { if ( feature . isEnabled () ) { featuresEnabled . add ( feature . getFeature () ) ; } } updateAddtionClusterFeatureList ( features , featuresEnabled ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsDevice > graphicsDevices = returnValue . getReturnValue () ; java.util.Set < org.ovirt.engine.core.common.businessentities.GraphicsType > graphicsTypesCollection = new java.util.HashSet <> () ; for ( org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices ) { graphicsTypesCollection . add ( graphicsDevice . getGraphicsType () ) ; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = UnitVmModel.GraphicsTypes . fromGraphicsTypes ( graphicsTypesCollection ) ; org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator . getInstance () ; setGraphicsType ( translator . translate ( graphicsTypes ) ) ; }
private java.util.Set < java.lang.String > getRemovedBondsUsedByNetworks () { java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure = getAttachmentsToConfigure () ; java.util.Set < java.lang.String > requiredNicsNames = new java.util.HashSet <> () ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure ) { requiredNicsNames . add ( attachment . getNicName () ) ; } return requiredNicsNames ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.DiskImage getImage () { switch ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getActionState () ) { case END_SUCCESS : case END_FAILURE : if ( ( _diskImage ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getDiskImageDAO () . getAllSnapshotsForImageGroup ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getImageGroupID () ) ; _diskImage = ( diskImages . isEmpty () ) ? null : diskImages . get ( NUMBER_CONSTANT ) ; } return _diskImage ; default: return super . getImage () ; } }
@ java.lang.Override protected boolean canDoAction () { if ( ! ( super . canDoAction () ) ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions ) { if ( ( ( session . getSlaveVolumeId () ) == null ) || ( ( session . getSlaveNodeUuid () ) == null ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE ) ; } } return true ; }
@ org.junit.Test public void validateVmIsNotDown ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmDiskImage ( false ) ; mockGetVmsListForDisk () ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito . doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDao () ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN . toString () ) ) ; }
private void updateDcLabels () { startProgress ( null ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNetworkLabelsByDataCenterId ( getSelectedDc () . getId () , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { dcLabels = ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ; stopProgress () ; onExportChanged () ; } } ) ) ; }
@ org.junit.Test public void migrationNotSupported () { validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ) ; org.mockito.Mockito . doReturn ( false ) . when ( validator ) . migrationSupportedForArch ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertThat ( validator . migrationSupported ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextEnum ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.MIGRATION_ON_ERROR_IS_NOT_SUPPORTED ) ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUpGetStorageDomainExpectations ( StorageDomainType.ImportExport ) ; setUpGetEntityExpectations ( StorageDomainType.ImportExport , org.ovirt.engine.api.restapi.resource.BackendExportDomainDiskResourceTest.STORAGE_DOMAIN_ID ) ; setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Disk disk = resource . get () ; assertNotNull ( disk ) ; assertEquals ( disk . getId () , org.ovirt.engine.api.restapi.resource.BackendExportDomainDiskResourceTest.DISK_ID . toString () ) ; }
@ java.lang.Override protected void executeQueryCommand () { setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskDao () . getAllAttachableDisksByPoolId ( org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery . getParameters () . getStoragePoolId () , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery . getParameters () . getVmId () , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery . getUserID () , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery . getParameters () . isFiltered () ) ) ; }
@ org.junit.Test public void testListGlobalLimit ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quota = getQuota () ; quota . setGlobalQuotaCluster ( getClusterGlobalCpuLimit () ) ; setUpGetEntityExpectations ( quota ) ; control . replay () ; org.ovirt.engine.api.model.QuotaClusterLimits clusterLimits = collection . list () ; assertClusterLimitsFound ( clusterLimits , NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.QuotaClusterLimit clusterLimit = clusterLimits . getQuotaClusterLimits () . get ( NUMBER_CONSTANT ) ; assertEquals ( NUMBER_CONSTANT , clusterLimit . getVcpuLimit () . intValue () ) ; }
public org.ovirt.engine.core.bll.ValidationResult consistentDataCenter () { return ( ( qos ) != null ) && ( ( ( getOldQos () ) == null ) || ( ! ( qos . getStoragePoolId () . equals ( getOldQos () . getStoragePoolId () ) ) ) ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_QOS_STORAGE_POOL_NOT_CONSISTENT ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { org.ovirt.engine.core.common.businessentities.Network network = getNetwork () ; org.ovirt.engine.core.compat.Guid networkId = ( network == null ) ? null : network . getId () ; return java.util.Collections . singletonList ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( networkId , org.ovirt.engine.core.common.VdcObjectType.Network , org.ovirt.engine.core.bll.network.dc.NetworkCommon . getActionType () . getActionGroup () ) ) ; }
private void createObjects ( org.ovirt.engine.core.compat.Version version ) { existingServer1 = createServer ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_NAME_1 , version ) ; existingServer2 = createServer ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_ID_2 , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_NAME_2 , version ) ; existingServers . add ( existingServer1 ) ; existingServers . add ( existingServer2 ) ; existingServers . add ( createServer ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_ID_3 , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_NAME_3 , version ) ) ; existingDistVol = createDistVol ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.DIST_VOL_NAME , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.EXISTING_VOL_DIST_ID ) ; existingReplVol = createReplVol () ; }
protected void EndMoveVmCommand () { org.ovirt.engine.core.bll.MoveVmCommand . EndActionOnAllImageGroups () ; if ( ( org.ovirt.engine.core.bll.MoveVmCommand . getVm () ) != null ) { org.ovirt.engine.core.bll.VmHandler . UnLockVm ( org.ovirt.engine.core.bll.MoveVmCommand . getVm () ) ; org.ovirt.engine.core.bll.VmHandler . updateDisksFromDb ( org.ovirt.engine.core.bll.MoveVmCommand . getVm () ) ; UpdateVmImSpm () ; } else { org.ovirt.engine.core.bll.MoveVmCommand . setCommandShouldBeLogged ( false ) ; log . warn ( STRING_CONSTANT ) ; } org.ovirt.engine.core.bll.MoveVmCommand . setSucceeded ( true ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetExternalSubnetsOnProviderByExternalNetwork , org.ovirt.engine.core.common.queries.GetExternalSubnetsOnProviderByExternalNetworkQueryParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , org.ovirt.engine.api.restapi.utils.HexUtils . string2hex ( NAMES [ NUMBER_CONSTANT ] ) } , getSubnets () , failure ) ; }
private void nfsStorageModel_PathChanged ( java.lang.Object sender ) { org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel senderModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) ( sender ) ) ; for ( java.lang.Object item : getStorageModels () ) { if ( ( item instanceof org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) && ( item != sender ) ) { org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) ( item ) ) ; model . getPath () . setEntity ( senderModel . getPath () . getEntity () ) ; } } }
public java.util.List < org.ovirt.engine.core.compat.Guid > getOrderedVmGuidsForRunMultipleActions ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { java.lang.StringBuilder guidsSb = new java.lang.StringBuilder () ; guidsSb . append ( STRING_CONSTANT ) . append ( org.apache.commons.lang.StringUtils . join ( guids , STRING_CONSTANT ) ) . append ( STRING_CONSTANT ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , createGuidMapper () , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , guidsSb . toString () ) ) ; }
public java.lang.Object getConfigValue ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version , org.ovirt.engine.ui.frontend.IAsyncConverter converter ) { if ( converter == null ) { return null ; } org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat ( configValue , version ) ; return converter . Convert ( cachedConfigValuesPreConvert . get ( key ) , null ) ; }
@ java.lang.Override public java.lang.String retrieveFromHttpSession ( java.lang.String key ) { javax.servlet.http.HttpServletRequest request = this . getThreadLocalRequest () ; javax.servlet.http.HttpSession session = request . getSession () ; java.lang.Object value = session . getAttribute ( ( ( org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.UI_PREFIX ) + key ) ) ; java.lang.String result = null ; if ( value instanceof java.lang.String ) { result = ( ( java.lang.String ) ( value ) ) ; } else if ( value != null ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log . error ( STRING_CONSTANT ) ; } return result ; }
@ org.junit.Test public void testDoFilterFromCookieNull ( ) throws java.io.IOException , javax.servlet.ServletException { testFilter . doFilter ( mockRequest , mockResponse , mockChain ) ; org.mockito.Mockito . verify ( mockChain ) . doFilter ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( LocaleFilter.LOCALE , java.util.Locale.US ) ; org.mockito.Mockito . verify ( mockResponse , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . addCookie ( org.mockito.Mockito . any () ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetPermissionsByAdElementId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpPermissions () , failure ) ; control . replay () ; }
private org.ovirt.engine.core.common.businessentities.network.Network getGlusterNetwork () { if ( ( glusterNetwork ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allNetworksInCluster = org.ovirt.engine.core.bll.gluster.GlusterCommandBase . getNetworkDao () . getAllForCluster ( org.ovirt.engine.core.bll.gluster.GlusterCommandBase . getClusterId () ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : allNetworksInCluster ) { if ( network . getCluster () . isGluster () ) { glusterNetwork = network ; return glusterNetwork ; } } } return glusterNetwork ; }
@ java.lang.Override protected boolean canDoAction () { boolean returnValue = ( ( ( ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand . checkStoragePool () ) && ( CheckStoragePoolStatusNotEqual ( StoragePoolStatus.Uninitialized , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL ) ) ) && ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand . CheckStorageDomain () ) ) && ( storageDomainStatusIsValid () ) ) && ( ( ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand . getStorageDomain () . getstorage_domain_type () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) || ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand . CheckMasterDomainIsUp () ) ) ; return returnValue ; }
@ java.lang.Override public void onAsyncOperationStarted ( org.ovirt.engine.ui.frontend.communication.AsyncOperationStartedEvent event ) { if ( ( ( event . getTarget () ) != ( getModel () ) ) || ( ( getModel () . getProgress () ) != null ) ) { return; } if ( ( asyncOperationCounter ) == NUMBER_CONSTANT ) { startProgress ( null ) ; } ( asyncOperationCounter ) ++ ; }
@ org.junit.Test public void validateFailsDiscardFunctionalityBreaks () { passAllValidations () ; org.ovirt.engine.core.common.errors.EngineMessage lunsBreakStorageDomainDiscardSupportMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_LUN_BREAKS_STORAGE_DOMAIN_PASS_DISCARD_SUPPORT ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( lunsBreakStorageDomainDiscardSupportMessage ) ) . when ( discardHelper ) . isExistingDiscardFunctionalityPreserved ( org.mockito.ArgumentMatchers . anyList () , org.mockito.ArgumentMatchers . any () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , lunsBreakStorageDomainDiscardSupportMessage ) ; }
private void executeCallbacks ( boolean success , org.ovirt.engine.ui.uicommonweb.action.UiAction.ActionFlowState flowState , java.util.List < org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback > callbacks , boolean waitForResult ) { java.util.Collections . shuffle ( callbacks ) ; for ( org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback : callbacks ) { assertNotAllDone ( flowState ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = new org.ovirt.engine.core.common.action.VdcReturnValueBase () ; result . setValid ( ( waitForResult || success ) ) ; result . setSucceeded ( ( waitForResult && success ) ) ; callback . executed ( new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult ( ACTION_TYPE , null , java.util.Collections . singletonList ( result ) ) ) ; } }
public static < T > java.util.ArrayList < T > Intersection ( java.util.ArrayList < java.util.ArrayList < T > > lists ) { java.util.ArrayList < T > result = new java.util.ArrayList < T > () ; if ( ( lists != null ) && ( ! ( lists . isEmpty () ) ) ) { result . addAll ( lists . get ( NUMBER_CONSTANT ) ) ; for ( java.util.ArrayList < T > list : lists ) { result . retainAll ( list ) ; } } return result ; }
@ org.junit.Test public void testStringSubstitutionWithList () { org.ovirt.engine.core.common.interfaces.ErrorTranslator et = new org.ovirt.engine.core.utils.ErrorTranslatorImpl ( org.ovirt.engine.core.utils.ErrorTranslatorTest.FILENAME ) ; java.util.List < java.lang.String > error = et . translateErrorText ( java.util.Arrays . asList ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_WITH_REPLACEMENT , STRING_CONSTANT , STRING_CONSTANT ) ) ; java.lang.String result = STRING_CONSTANT ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , error . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , result , error . get ( NUMBER_CONSTANT ) ) ; }
protected boolean validateVdsCluster () { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroupDao () . get ( org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroupId () ) ; return vdsGroup == null ? failCanDoAction ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID ) : ( vdsGroup . getArchitecture () ) != ( getVm () . getClusterArch () ) ? failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER ) : true ; }
private org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand < org.ovirt.engine.core.common.vdscommands.SetupNetworksVdsCommandParameters > createCommand ( org.ovirt.engine.core.common.vdscommands.SetupNetworksVdsCommandParameters parameters ) { final org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = org.mockito.Mockito . mock ( org.ovirt.engine.core.dal.dbbroker.DbFacade . class ) ; final org.ovirt.engine.core.dao.VdsDAO vdsDao = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.VdsDAO . class ) ; org.mockito.Mockito . when ( dbFacade . getVdsDAO () ) . thenReturn ( vdsDao ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand < org.ovirt.engine.core.common.vdscommands.SetupNetworksVdsCommandParameters > ( parameters ) { @ java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker ( org.ovirt.engine.core.compat.Guid vdsId ) { return server ; } @ java.lang.Override protected org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade () { return dbFacade ; } } ; }
private void setUpGetCertuficateExpectations ( int times ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVdsCertificateSubjectByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ i ] } , org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.CERTIFICATE ) ; } }
private boolean deviceCanBeRemoved ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { if ( ! ( vmDevice . getDevice () . equals ( VmDeviceType.DISK . getName () ) ) ) { return true ; } if ( ( vmDevice . getSnapshotId () ) == null ) { org.ovirt.engine.core.common.businessentities.Disk disk = getDiskDao () . get ( vmDevice . getDeviceId () ) ; return ( disk != null ) && ( disk . isAllowSnapshot () ) ; } return false ; }
@ org.junit.Test public void testGetUserByName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( VdcQueryType.GetDbUserByUserNameAndDomain , org.ovirt.engine.core.common.queries.GetDbUserByUserNameAndDomainQueryParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { STRING_CONSTANT , STRING_CONSTANT } , getEntity ( NUMBER_CONSTANT ) ) ; verifyModel ( resource . getUserByNameAndDomain ( STRING_CONSTANT , STRING_CONSTANT ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void validateSucceeds () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) , null ) ) ; setupMocks () ; org.mockito.Mockito . doReturn ( getServer () ) . when ( cmd ) . getUpServer () ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
@ org.junit.Test @ java.lang.Override public void testList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetEntityExpectations ( VdcQueryType.GetDbUserByUserId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getUserByIdx ( NUMBER_CONSTANT ) , true ) ; setUpQueryExpectations ( STRING_CONSTANT ) ; collection . setUriInfo ( uriInfo ) ; verifyCollection ( getCollection () ) ; }
@ java.lang.Override protected void updateMoveOrCopySingleDiskParameters ( java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel ) { org.ovirt.engine.core.common.businessentities.storage_domains selectedStorageDomain = ( ( org.ovirt.engine.core.common.businessentities.storage_domains ) ( diskModel . getStorageDomain () . getSelectedItem () ) ) ; addMoveOrCopyParameters ( parameters , Guid.Empty , selectedStorageDomain . getId () , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskModel . getDisk () ) ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( getClusterPolicyModel () . getSelectionAlgorithm () . equals ( VdsSelectionAlgorithm.PowerSave ) ) { policyRadioButton_powerSave . setValue ( true ) ; } else if ( getClusterPolicyModel () . getSelectionAlgorithm () . equals ( VdsSelectionAlgorithm.EvenlyDistribute ) ) { policyRadioButton_evenDist . setValue ( true ) ; } else { policyRadioButton_none . setValue ( true ) ; } setSelectionAlgorithm () ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.EventNotificationEntity > getModeSpecificEventNotificationTypeList () { java.util.ArrayList < org.ovirt.engine.core.common.EventNotificationEntity > subList = new java.util.ArrayList < org.ovirt.engine.core.common.EventNotificationEntity > () ; for ( org.ovirt.engine.core.common.EventNotificationEntity entity : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getEventNotificationTypeList () ) { if ( ( ( entity . getAvailableInModes () ) & ( org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.UI_MODE . getValue () ) ) > NUMBER_CONSTANT ) { subList . add ( entity ) ; } } return subList ; }
@ java.lang.Override protected org.ovirt.engine.core.bll.AddVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolParameters > createCommand () { org.ovirt.engine.core.common.action.AddVmPoolParameters param = new org.ovirt.engine.core.common.action.AddVmPoolParameters ( vmPools , testVm , VM_COUNT ) ; param . setStorageDomainId ( firstStorageDomainId ) ; return org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.AddVmPoolCommand ( param , org.ovirt.engine.core.bll.context.CommandContext . createContext ( param . getSessionId () ) ) ) ; }
protected void changeStorageDomainStatusInTransaction ( final org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map , final org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , final org.ovirt.engine.core.bll.context.CompensationContext context ) { executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap > () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap runInTransaction () { context . snapshotEntityStatus ( map ) ; map . setStatus ( status ) ; getStoragePoolIsoMapDAO () . updateStatus ( map . getId () , map . getStatus () ) ; context . stateChanged () ; return null ; } } ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { map . setstatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStoragePoolIsoMapDAO () . updateStatus ( map . getId () , map . getstatus () ) ; if ( ( getStorageDomain () . getstorage_domain_type () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) { calcStoragePoolStatusByDomainsStatus () ; } return null ; }
@ java.lang.Override public void render ( org.ovirt.engine.ui.common.widget.table.column.Context context , com.google.gwt.resources.client.ImageResource value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( value != null ) { sb . append ( org.ovirt.engine.ui.common.widget.table.column.StyledImageResourceCell.template . imageContainer ( style , com.google.gwt.safehtml.shared.SafeHtmlUtils . fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype . create ( value ) . getHTML () ) ) ) ; } }
@ java.lang.Override protected void executeCommand () { final org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.bll.provider.RemoveProviderCommand . getParameters () . getProvider () . getId () ; org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = org.ovirt.engine.core.bll.provider.ProviderProxyFactory . getInstance () . create ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand . getParameters () . getProvider () ) ; if ( providerProxy != null ) { providerProxy . onRemoval () ; } org.ovirt.engine.core.bll.provider.RemoveProviderCommand . getProviderDao () . remove ( providerId ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand . setSucceeded ( true ) ; }
private boolean updateDiskProfileForBackwardCompatibility ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , java.util.List < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > diskProfilesList , java.util.Set < org.ovirt.engine.core.compat.Guid > permittedDiskProfilesIds , org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { for ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : diskProfilesList ) { if ( isDiskProfilePermitted ( diskProfile , permittedDiskProfilesIds , user ) ) { permittedDiskProfilesIds . add ( diskProfile . getId () ) ; diskImage . setDiskProfileId ( diskProfile . getId () ) ; return true ; } } return false ; }
protected java.util.Map < java.lang.String , java.lang.Object > createClusterPolicyParameters ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Object > parameters = new java.util.HashMap < java.lang.String , java.lang.Object > () ; if ( vm != null ) { parameters . put ( PolicyUnitImpl.VM , vm ) ; } if ( ( cluster . getClusterPolicyProperties () ) != null ) { parameters . putAll ( cluster . getClusterPolicyProperties () ) ; } return parameters ; }
public double getDiskSize () { if ( ( diskSize ) == NUMBER_CONSTANT ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : getDiskMap () . values () ) { if ( ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) == ( disk . getDiskStorageType () ) ) { diskSize += ( disk . getSize () ) / ( java.lang.Double . valueOf ( ( ( NUMBER_CONSTANT * NUMBER_CONSTANT ) * NUMBER_CONSTANT ) ) ) ; } } } return diskSize ; }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void editMacPool () { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel ( this , org.ovirt.engine.core.common.action.VdcActionType.UpdateMacPool ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . editSharedMacPoolTitle () ) ; model . setHashName ( STRING_CONSTANT ) ; model . setHelpTag ( HelpTag.edit_shared_mac_pool ) ; model . setEntity ( getSelectedItem () ) ; setWindow ( model ) ; }
@ org.junit.Test public void testMapHostId () { org.ovirt.engine.api.model.VM entity = new org.ovirt.engine.api.model.VM () ; entity . setStatus ( VMStatus.Up ) ; org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.core.compat.Guid . newGuid () ; entity . setRunOnVds ( guid ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.types.VmMapper . map ( entity , ( ( org.ovirt.engine.api.model.VM ) ( null ) ) ) ; assertEquals ( guid . toString () , model . getHost () . getId () ) ; }
@ org.junit.Test public void testGetVmssIdsForOvfUpdateOneVm () { vmAndTemplatesGenerationsDAO . updateOvfGenerations ( java.util.Collections . singletonList ( FixturesTool.VM_RHEL5_POOL_50 ) , java.util.Collections . singletonList ( java.lang.Long . valueOf ( NUMBER_CONSTANT ) ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > guids = vmAndTemplatesGenerationsDAO . getVmsIdsForOvfUpdate ( FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , guids . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , guids . get ( NUMBER_CONSTANT ) , FixturesTool.VM_RHEL5_POOL_50 ) ; }
private java.nio.channels.ServerSocketChannel setupChannel ( java.net.InetSocketAddress address ) throws java.io.IOException { final java.nio.channels.ServerSocketChannel serverSocketChannel = java.nio.channels.ServerSocketChannel . open () ; serverSocketChannel . configureBlocking ( false ) ; try { serverSocketChannel . register ( this . selector , java.nio.channels.SelectionKey.OP_ACCEPT , this ) ; serverSocketChannel . bind ( address ) ; } catch ( java.nio.channels.ClosedChannelException e ) { throw new java.lang.RuntimeException ( STRING_CONSTANT ) ; } catch ( java.io.IOException e ) { try { serverSocketChannel . close () ; } catch ( java.io.IOException e1 ) {} throw e ; } return serverSocketChannel ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.lang.Object result = returnValue . getReturnValue () ; model . postDiscoverTargetsInternal ( ( result != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ) ( result ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > () ) ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; control . replay () ; org.ovirt.engine.api.model.Disk disk = resource . get () ; verifyModelSpecific ( disk , NUMBER_CONSTANT ) ; verifyLinks ( disk ) ; }
@ org.junit.Test public void canDoActionSucceedsWithForceOption ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , true ) ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
protected javax.ws.rs.core.Response createDisk ( org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource , org.ovirt.engine.api.model.DiskAttachment attachment , org.ovirt.engine.api.restapi.resource.IResolver entityResolver ) { org.ovirt.engine.api.model.Disk disk = attachment . getDisk () ; validateDiskForCreation ( disk ) ; updateStorageTypeForDisk ( disk ) ; return resource . performCreate ( VdcActionType.AddDisk , getAddParameters ( attachment , org.ovirt.engine.api.restapi.types.DiskMapper . map ( disk , null ) , disk ) , entityResolver ) ; }
@ org.junit.Test @ java.lang.Override public void testList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetSnapshotVmConfiguration ( org.ovirt.engine.api.restapi.resource.BackendSnapshotsResourceTest.SNAPSHOT_IDS [ NUMBER_CONSTANT ] ) ; setUpGetSnapshotVmConfiguration ( org.ovirt.engine.api.restapi.resource.BackendSnapshotsResourceTest.SNAPSHOT_IDS [ NUMBER_CONSTANT ] ) ; collection . setUriInfo ( uriInfo ) ; verifyCollection ( getCollection () ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Cdrom model = new org.ovirt.engine.api.model.Cdrom () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; model . setFile ( new org.ovirt.engine.api.model.File () ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public static org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult ( org.ovirt.engine.core.common.vdscommands.VDSReturnValue result ) { if ( org.apache.commons.lang.StringUtils . isNotEmpty ( result . getExceptionString () ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( ( ( result . getVdsError () ) != null ? result . getVdsError () . getCode () : org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE ) , result . getExceptionString () ) ; } return result ; }
private void onAdItemsLoaded ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.aaa.DbUser > > userOrGroups ) { getSearchInProgress () . setEntity ( false ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.aaa.DbUser > > items = new java.util.ArrayList <> () ; items . addAll ( userOrGroups ) ; getSelectAll () . setEntity ( false ) ; setItems ( items ) ; setIsEmpty ( items . isEmpty () ) ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc vmUpdateDevice ( java.lang.String vmId , java.util.Map device ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . vmUpdateDevice ( vmId , device ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
@ java.lang.Override protected boolean canDoAction () { boolean returnValue = true ; if ( ( org.ovirt.engine.core.bll.ActivateVdsCommand . getVds () ) == null ) { addCanDoActionMessage ( VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_NOT_EXIST ) ; returnValue = false ; } if ( returnValue && ( ( org.ovirt.engine.core.bll.ActivateVdsCommand . getVds () . getstatus () ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) { addCanDoActionMessage ( VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_ALREADY_UP ) ; returnValue = false ; } return returnValue ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentModel model ) { driver . edit ( model ) ; mappings . setExplanation ( model . getInterfaceMappingsExplanation () . getEntity () ) ; model . getInterfaceMappingsExplanation () . getEntityChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { mappings . setExplanation ( model . getInterfaceMappingsExplanation () . getEntity () ) ; } } ) ; }
private boolean devicePluggable ( org.ovirt.engine.core.common.businessentities.VmDevice device ) { return ( ( VmDeviceType.DISK . getName () . equals ( device . getDevice () ) ) && ( VmDeviceType.DISK . getName () . equals ( device . getType () ) ) ) || ( ( VmDeviceType.BRIDGE . getName () . equals ( device . getDevice () ) ) && ( VmDeviceType.INTERFACE . getName () . equals ( device . getType () ) ) ) ; }
@ java.lang.Override public void onBrowserEvent ( com.google.gwt.cell.client.Cell.Context context , com.google.gwt.dom.client.Element elem , com.google.gwt.dom.client.NativeEvent event ) { getCell () . onBrowserEvent ( context , elem , org.ovirt.engine.ui.common.widget.table.header.AbstractHeader . getValue () , event , updater ) ; if ( ( BrowserEvents.CONTEXTMENU . equals ( event . getType () ) ) && ( ( contextMenuHandler ) != null ) ) { contextMenuHandler . onContextMenu ( event ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call () { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( getParameters () . getNewMasterDomainId () , getParameters () . getStoragePoolId () , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStoragePoolIsoMapDao () . save ( domainPoolMap ) ; executeReconstruct () ; return new org.ovirt.engine.core.common.eventqueue.EventResult ( reconstructOpSucceeded , org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT ) ; }
@ org.junit.Test public void canAddCloneVmFromSnapshotSnapshotDoesNotExist () { final int domainSizeGB = NUMBER_CONSTANT ; final org.ovirt.engine.core.compat.Guid sourceSnapshotId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = setupCanAddVmFromSnapshotTests ( domainSizeGB , sourceSnapshotId ) ; cmd . getVm () . setName ( STRING_CONSTANT ) ; mockNonInterestingMethodsForCloneVmFromSnapshot ( cmd ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > convert ( java.lang.Object source ) { if ( source == null ) { return new java.util.ArrayList <> () ; } final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; return getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; }
protected boolean setAndValidateCpuProfile () { getVm () . getStaticData () . setVdsGroupId ( org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroupId () ) ; getVm () . getStaticData () . setCpuProfileId ( org.ovirt.engine.core.bll.ImportVmCommandBase . getParameters () . getCpuProfileId () ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper . setAndValidateCpuProfile ( getVm () . getStaticData () , getEffectiveCompatibilityVersion () ) ) ; }
@ org.junit.Test public void testRemove ( ) throws java.lang.Exception { setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , false , false , false , false ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.DetachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , true , true ) ) ; verifyRemove ( resource . remove () ) ; }
protected void addVmPayload () { org.ovirt.engine.core.common.businessentities.VmPayload payload = org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getVmPayload () ; if ( payload != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getVmId () ) , VmDeviceGeneralType.DISK , payload . getType () , payload . getSpecParams () , true , true , null ) ; } }
@ org.junit.Test public void validateFailedDiscardNotSupported () { mockVmStatusUp () ; mockInterfaceList () ; createVirtIODisk () ; initStorageDomain () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ) . when ( diskVmElementValidator ) . isPassDiscardSupported ( org.mockito.ArgumentMatchers . any () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ; }
private boolean isRngSupportedForClusterVersion ( org.ovirt.engine.core.compat.Version version ) { if ( version == null ) { return false ; } java.lang.Boolean supported = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.VirtIoRngDeviceSupported , version . toString () ) ) ) ; return supported == null ? false : supported ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; if ( queryReturnValue . getSucceeded () ) { org.ovirt.engine.core.common.businessentities.VM vm = queryReturnValue . getReturnValue () ; updateVms ( java.util.Collections . singletonList ( vm ) ) ; } else { setError ( messages . failedToLoadOva ( getOvaPath () . getEntity () ) ) ; } stopProgress () ; }
public java.util.Set < java.lang.String > getPeers ( java.lang.String server , java.lang.String username , java.lang.String password ) throws java.io.IOException , javax.naming.AuthenticationException { try ( final org.ovirt.engine.core.uutils.ssh.SSHClient client = getSSHClient () ) { connect ( client , server , username , password ) ; authenticate ( client ) ; java.lang.String serversXml = executePeerStatusCommand ( client ) ; return extractServers ( serversXml ) ; } }
@ org.junit.Test public void executeCommandFailedWhenServerIdPresent () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID , org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID ) , null ) ) ; setUpMocksForUpdate () ; mockForReadContent ( false , EngineError.GlusterHookNotFound ) ; try { cmd . executeCommand () ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.junit.Assert . assertEquals ( e . getErrorCode () , EngineError.GlusterHookNotFound ) ; } org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; }
public boolean isWebSocketProxyDefined () { java.lang.String wsConfig = ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.WebSocketProxy ) ) ) ; return ( ( wsConfig != null ) && ( ! ( STRING_CONSTANT . equals ( wsConfig ) ) ) ) && ( ! ( STRING_CONSTANT . equalsIgnoreCase ( wsConfig ) ) ) ; }
@ org.junit.Test public void encodeWhenDescriptionIsTruncated ( ) throws java.io.IOException { disk . setDiskAlias ( STRING_CONSTANT ) ; java.lang.String diskDescription = org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . generateRandomString ( NUMBER_CONSTANT ) ; disk . setDiskDescription ( diskDescription ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( STRING_CONSTANT ) , generateDiskDescriptionJsonEntry ( diskDescription . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ) ; }
private void createStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; domain . setStatus ( status ) ; domain . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . when ( storageDomainDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( domain ) ; org.mockito.Mockito . when ( storageDomainDao . getForStoragePool ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( domain ) ; }
@ org.junit.Test public void canSetNumaConfigurationWithVmFromDb () { mockCommandWithVmFromDb () ; command . executeCommand () ; org.mockito.Mockito . verify ( vmNumaNodeDao ) . massRemoveNumaNodeByNumaNodeId ( org.mockito.ArgumentMatchers . eq ( existingNumaNodeIds ) ) ; org.mockito.Mockito . verify ( vmNumaNodeDao ) . massSaveNumaNode ( org.mockito.ArgumentMatchers . eq ( paramNumaNodes ) , org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Test public void testRemoveForcedIncomplete ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpVersionExpectations () ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveStoragePool , org.ovirt.engine.core.common.action.StoragePoolParametersBase . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.FALSE } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendDataCenterResource.FORCE , java.lang.Boolean.FALSE . toString () ) ; setUriInfo ( uriInfo ) ; resource . remove () ; }
private org.ovirt.engine.core.common.businessentities.DisplayType getDefaultDisplayType ( int osId , org.ovirt.engine.core.compat.Version clusterVersion ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > > pairs = osRepository . getGraphicsAndDisplays ( osId , clusterVersion ) ; if ( ! ( pairs . isEmpty () ) ) { org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > graphicsDisplayPair = pairs . get ( NUMBER_CONSTANT ) ; return graphicsDisplayPair . getSecond () ; } return org.ovirt.engine.core.common.businessentities.DisplayType.qxl ; }
public long nextLong ( long l ) { if ( l <= NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } long rand = nextLong () ; if ( rand == ( java.lang.Long.MIN_VALUE ) ) { rand ++ ; } return ( java.lang.Math . abs ( rand ) ) % l ; }
public void updateCommandStatus ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.compat.CommandStatus status ) { final org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get ( commandId ) ; if ( cmdEntity != null ) { cmdEntity . setCommandStatus ( status ) ; if ( ( taskType . equals ( AsyncTaskType.notSupported ) ) || ( cmdEntity . isCallBackEnabled () ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getCommandEntityDao () . saveOrUpdate ( cmdEntity ) ; } } }
protected boolean canRunVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { return getVmRunHandler () . canRunVm ( vm , org.ovirt.engine.core.bll.RunVmCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RunVmCommand . getParameters () , org.ovirt.engine.core.bll.RunVmCommand . getVdsSelector () , org.ovirt.engine.core.bll.RunVmCommand . getSnapshotsValidator () , getVmPropertiesUtils () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel providersListModel = getProviders () ; providersListModel . setItems ( providers ) ; providersListModel . setIsChangable ( true ) ; }
public void getUnknownImageList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < java.lang.String > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean forceRefresh ) { getIrsImageList ( aQuery , storagePoolId , forceRefresh , ImageFileType.All , new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.RepoImageToImageFileNameAsyncConverter () { @ java.lang.Override protected java.lang.String transform ( java.util.ArrayList < java.lang.String > fileNameList , org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage ) { return ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ISO_PREFIX ) + ( super . transform ( fileNameList , repoImage ) ) ; } @ java.lang.Override protected boolean desiredImage ( org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage ) { return ( org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown ) == ( repoImage . getFileType () ) ; } } ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice ( org.ovirt.engine.core.compat.Guid diskId , org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskId , vmId ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , NUMBER_CONSTANT , null , true , true , false , STRING_CONSTANT , null , null , null ) ; }
private void fillVolumeInformation ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ancestor = org.ovirt.engine.core.bll.CreateImageTemplateCommand . getDiskImageDao () . getAncestor ( org.ovirt.engine.core.bll.CreateImageTemplateCommand . getDiskImage () . getImageId () ) ; disk . setvolumeFormat ( ancestor . getVolumeFormat () ) ; disk . setVolumeType ( ancestor . getVolumeType () ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { hostsModel . stopProgress () ; boolean isAllValidatePassed = true ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result . getReturnValue () ) { isAllValidatePassed = returnValueBase . isValid () ; if ( ! isAllValidatePassed ) { break; } } if ( isAllValidatePassed ) { cancel () ; } }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public void updateHost ( org.ovirt.vdsmfake.domain.Host host ) { if ( ! ( hostMap . containsKey ( host . getId () ) ) ) { hostMap . put ( host . getId () , host ) ; } org.ovirt.vdsmfake.domain.VdsmManager.log . info ( STRING_CONSTANT , host . getName () ) ; storeObject ( host ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , org.ovirt.engine.core.common.errors.EngineFault > runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper . getVdsDao () . get ( vdsId ) ; if ( ! ( org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper . canVDSConnectToGlusterfs ( vds ) ) ) { org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper.log . error ( STRING_CONSTANT , vds . getName () , storageDomain . getName () ) ; addMessageToAuditLog ( AuditLogType.VDS_CANNOT_CONNECT_TO_GLUSTERFS , null , vds ) ; return new org.ovirt.engine.core.common.utils.Pair ( false , null ) ; } return super . runConnectionStorageToDomain ( storageDomain , vdsId , type ) ; }
@ org.junit.Test public void validateFailedGuestOsIsNotSupported () { mockInterfaceList () ; org.ovirt.engine.core.common.businessentities.VM vm = mockVmStatusUp () ; vm . setVmOs ( NUMBER_CONSTANT ) ; createVirtIODisk () ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.osRepository . getOsName ( NUMBER_CONSTANT ) ) . thenReturn ( STRING_CONSTANT ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.osRepository . getDiskHotpluggableInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any () ) ) . thenReturn ( java.util.Collections . emptySet () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED ) ; }
private void initializeOsRepository ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface ) { java.util.ArrayList < java.lang.String > supportedDiskInterfaces = new java.util.ArrayList <> () ; supportedDiskInterfaces . add ( diskInterface . name () ) ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidatorTest.OS_WITH_SUPPORTED_INTERFACES , null ) ) . thenReturn ( supportedDiskInterfaces ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . bind ( org.ovirt.engine.core.common.osinfo.OsRepository . class , osRepository ) ; }
@ java.lang.Override protected boolean validate () { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper . canDoAction ( VdcActionType.AddDisk , getAddDiskParameters () , org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand . getContext () . clone () ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand . getReturnValue () . setValidationMessages ( returnValue . getValidationMessages () ) ; return returnValue . isValid () ; }
private void showSessionOptions () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession selectedGeoRepSession = getSelectedItem () ; org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoReplicationSessionConfigModel configModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoReplicationSessionConfigModel ( selectedGeoRepSession ) ; configModel . setTitle ( org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants . geoReplicationOptions () ) ; configModel . setHashName ( STRING_CONSTANT ) ; configModel . setHelpTag ( HelpTag.volume_geo_rep_configuration_display ) ; configModel . startProgress () ; fetchConfigForSession ( selectedGeoRepSession ) ; setWindow ( configModel ) ; addUICommandsToConfigWindow ( configModel ) ; }
@ org.junit.Test public void addISCSINonEmptyIqn () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( STRING_CONSTANT , StorageType.ISCSI , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newISCSIConnection ) ; parameters . setVdsId ( Guid.Empty ) ; parameters . setStoragePoolId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . initializeVds () ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isConnWithSameDetailsExists ( newISCSIConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
public static void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
private static org.ovirt.engine.core.common.job.Job getJob ( org.ovirt.engine.core.bll.CommandBase < > command , org.ovirt.engine.core.common.action.VdcActionType actionType ) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = command . getParameters () ; org.ovirt.engine.core.common.job.Job job ; if ( ( params . getJobId () ) != null ) { job = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getJobDao () . get ( params . getJobId () ) ; } else { job = org.ovirt.engine.core.bll.job.ExecutionHandler . createJob ( actionType , command ) ; org.ovirt.engine.core.bll.job.JobRepositoryFactory . getJobRepository () . saveJob ( job ) ; } return job ; }
@ org.junit.Test public void hostNameIsUsed () { org.mockito.Mockito . when ( hostDao . getAllForHostname ( org.mockito.Matchers . any () ) ) . thenReturn ( java.util.Collections . singletonList ( org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.VDS . class ) ) ) ; org.junit.Assert . assertThat ( validator . hostNameNotUsed () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST ) ) ; }
private static void addVideoDevice ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . NewGuid () , vm . getId () ) , VmDeviceType.VIDEO , vm . getDefaultDisplayType () . getVmDeviceType () , org.ovirt.engine.core.bll.utils.VmDeviceUtils . getMemExpr ( vm . getNumOfMonitors () ) , true , true ) ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentModel model ) { driver . edit ( model ) ; mappings . setExplanation ( org.ovirt.engine.ui.webadmin.widget.provider.NeutronAgentWidget.templates . italicText ( model . getInterfaceMappingsExplanation () . getEntity () ) ) ; model . getInterfaceMappingsExplanation () . getEntityChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { mappings . setExplanation ( org.ovirt.engine.ui.webadmin.widget.provider.NeutronAgentWidget.templates . italicText ( model . getInterfaceMappingsExplanation () . getEntity () ) ) ; } } ) ; }
protected boolean performImagesChecks () { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getVm () . getStoragePoolId () , Guid.Empty , true , true , false , false , true , true , getImagesList () ) ; }
@ java.lang.Override public void onBrowserEvent ( com.google.gwt.cell.client.Cell.Context context , com.google.gwt.dom.client.Element elem , com.google.gwt.dom.client.NativeEvent event ) { super . onBrowserEvent ( context , elem , event ) ; if ( ( BrowserEvents.CONTEXTMENU . equals ( event . getType () ) ) && ( ( contextMenuHandler ) != null ) ) { contextMenuHandler . onContextMenu ( event ) ; } }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue addStoragePoolInIrs () { return runVdsCommand ( VDSCommandType.CreateStoragePool , new org.ovirt.engine.core.common.vdscommands.CreateStoragePoolVDSCommandParameters ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand . getVds () . getId () , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand . getStoragePool () . getId () , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand . getStoragePool () . getName () , masterStorageDomain . getId () , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand . getParameters () . getStorages () , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand . getStoragePool () . getmaster_domain_version () ) ) ; }
protected boolean performImagesChecks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( vm , org.ovirt.engine.core.bll.AddDiskCommand . getReturnValue () . getCanDoActionMessages () , vm . getStoragePoolId () , getStorageDomainId () . getValue () , false , true , false , false , true , false , true , java.util.Collections . < org.ovirt.engine.core.common.businessentities.Disk > emptyList () ) ; }
@ org.junit.Test public void testProxyCompatibilityWithFencingPolicy () { org.ovirt.engine.core.common.businessentities.VDS host = createHost () ; host . setSupportedClusterLevels ( STRING_CONSTANT ) ; org.ovirt.engine.core.bll.pm.FenceProxyLocator locator = setupLocator () ; org.junit.Assert . assertTrue ( locator . isFencingPolicySupported ( host , Version.v3_5 ) ) ; org.junit.Assert . assertFalse ( locator . isFencingPolicySupported ( host , Version.v3_6 ) ) ; }
@ org.junit.Test public void testValidateVmUpLiveMergeSupported () { prepareForVmValidatorTests () ; cmd . getVm () . setStatus ( VMStatus.Up ) ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . isDiskPlugged () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmQualifiedForSnapshotMerge () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmHostCanLiveMerge () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . validateStorageDomainAvailableSpace () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
public static void getStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public boolean validateBrickCount ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType , boolean isCreateVolume ) { int brickCount = NUMBER_CONSTANT ; if ( ( bricks . getItems () ) != null ) { brickCount = getBricks () . getItems () . size () ; } int replicaCount = getReplicaCountValue () ; int stripeCount = getStripeCountValue () ; return org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel . validateBrickCount ( selectedVolumeType , brickCount , replicaCount , stripeCount , isCreateVolume ) ; }
@ java.lang.Override protected int getNeededDiskSize ( org.ovirt.engine.core.compat.Guid storageDomainId ) { int result = NUMBER_CONSTANT ; for ( org.ovirt.engine.core.common.businessentities.DiskImage img : getDiskImagesFromConfiguration () ) { if ( ( img . getImageStatus () ) != ( org.ovirt.engine.core.common.businessentities.ImageStatus.ILLEGAL ) ) { if ( img . getStorageIds () . get ( NUMBER_CONSTANT ) . equals ( storageDomainId ) ) { result = result + ( ( int ) ( java.lang.Math . ceil ( img . getActualSize () ) ) ) ; } } } return result ; }
@ java.lang.Override public int hashCode () { final int prime = NUMBER_CONSTANT ; int result = NUMBER_CONSTANT ; result = ( prime * result ) + ( ( key ) == null ? NUMBER_CONSTANT : key . hashCode () ) ; result = ( prime * result ) + ( ( defaultValue ) == null ? NUMBER_CONSTANT : defaultValue . hashCode () ) ; return result ; }
private void addBond () { org.ovirt.engine.core.common.action.AddIscsiBondParameters params = new org.ovirt.engine.core.common.action.AddIscsiBondParameters ( createIscsiBond () ) ; startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.AddIscsiBond , params , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.IscsiBondModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.IscsiBondModel ) ( result . getState () ) ) ; model . stopProgress () ; model . cancel () ; } } , this ) ; }
private boolean performStorageDomainsChecks ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters ) { org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain = getImageSourceDomain ( parameters . getImageId () ) ; org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = getStorageDomainById ( parameters . getTargetStorageDomainId () , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getStoragePoolId () ) ; return ( validateSourceStorageDomain ( sourceDomain ) ) && ( validateDestStorage ( destDomain ) ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVdsDynamicDao () ; staticDao = dbFacade . getVdsStaticDao () ; statisticsDao = dbFacade . getVdsStatisticsDao () ; existingVds = staticDao . get ( FixturesTool.VDS_GLUSTER_SERVER2 ) ; newStaticVds = new org.ovirt.engine.core.common.businessentities.VdsStatic () ; newStaticVds . sethost_name ( STRING_CONSTANT ) ; newStaticVds . setvds_group_id ( existingVds . getvds_group_id () ) ; newDynamicVds = new org.ovirt.engine.core.common.businessentities.VdsDynamic () ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertTrue ( model . isSparse () ) ; assertTrue ( model . isPropagateErrors () ) ; }
public java.nio.channels.SelectionKey connect ( int port ) throws java.io.IOException { final java.net.InetSocketAddress addr = new java.net.InetSocketAddress ( java.net.InetAddress . getByName ( this . host ) , port ) ; java.nio.channels.SocketChannel socketChannel = java.nio.channels.SocketChannel . open () ; socketChannel . connect ( addr ) ; socketChannel . configureBlocking ( false ) ; int interestedOps = java.nio.channels.SelectionKey.OP_READ ; java.nio.channels.SelectionKey key = socketChannel . register ( this . selector , interestedOps , new java.util.concurrent.ConcurrentLinkedDeque <> () ) ; setDaemon ( true ) ; start () ; return key ; }
private void registerListeners ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ManagedFieldsManager managedFieldsManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ManagedFieldsManager () ; model . getInstanceTypes () . getSelectedItemChangedEvent () . addListener ( managedFieldsManager ) ; model . getTemplate () . getSelectedItemChangedEvent () . addListener ( managedFieldsManager ) ; model . getOSType () . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) {} } ) ; }
@ org.junit.Test public void onFailureAlertShown () { mockExecutor ( false ) ; try { command . executeCommand () ; org.junit.Assert . fail () ; } catch ( org.ovirt.engine.core.common.errors.EngineException ex ) { org.mockito.Mockito . verify ( auditLogDirector , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . log ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; } }
protected void initialize ( com.google.gwt.user.client.ui.UIObject decoratedWidget , com.google.gwt.user.client.ui.Image attachedSeparatedImage , org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.BaseStyle style ) { this . decoratedWidget = decoratedWidget ; this . attachedSeparatedImage = attachedSeparatedImage ; this . tooltip . setWidget ( attachedSeparatedImage ) ; this . style = style ; setAttached ( true ) ; setDetachableIconVisible ( false ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.DiskSnapshot postPopulate ( org.ovirt.engine.api.model.DiskSnapshot model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskInterface . class ) ) ; model . setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ScsiGenericIO . class ) ) ; model . setStatus ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ; model . setLunStorage ( null ) ; return model ; }
@ java.lang.Override public void setUsePatternFly ( final boolean use ) { super . setUsePatternFly ( use ) ; if ( use ) { getCheckboxWidgetLabel () . getStyle () . setPaddingLeft ( NUMBER_CONSTANT , Unit.PX ) ; getCheckboxWidgetLabel () . getStyle () . setPaddingRight ( NUMBER_CONSTANT , Unit.PX ) ; getCheckboxWidgetLabel () . getStyle () . setPosition ( Position.RELATIVE ) ; getCheckboxWidgetLabel () . getStyle () . setProperty ( org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.MAX_WIDTH , STRING_CONSTANT ) ; noPaddingNoFixes () ; } }
private static void interfaceHasSiblingVlanInterfaces ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( siblingVlanInterfaces . isEmpty () ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllSiblingVlanInterfaces , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
private boolean isVmInterfacesConfigured () { for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand . getVm () . getInterfaces () ) { if ( ( nic . getNetworkName () ) == null ) { if ( ! ( org.ovirt.engine.core.bll.validator.VmNicValidator . networkLinkingSupported ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getVdsGroupCompatibilityVersion () ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED ) ; return false ; } else { return true ; } } } return true ; }
protected void updateExtendImageSizeSupported () { org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel ) ( target ) ) ; model . setExtendImageSizeSupported ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . isCommandCompatible ( query , VdcActionType.ExtendImageSize , vm . getVdsGroupCompatibilityVersion () , dataCenterVersion ) ; }
protected void updateStorageTypeForDisk ( org.ovirt.engine.api.model.Disk disk ) { org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId ( disk ) ; if ( storageDomainId != null ) { org.ovirt.engine.api.model.StorageDomain storageDomain = getStorageDomainById ( storageDomainId ) ; if ( storageDomain != null ) { disk . setStorageType ( org.ovirt.engine.api.restapi.types.DiskMapper . map ( storageDomain . getStorageDomainType () ) ) ; } } }
@ java.lang.Override public void execute () { if ( getEnclosingCommand () . getParameters () . getTaskGroupSuccess () ) { getReturnValue () . setSucceeded ( false ) ; beforeTask () ; addTask ( org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( getVDSCommandType () , getVDSParameters () ) , false ) ; } org.ovirt.engine.core.bll.job.ExecutionHandler . setAsyncJob ( getEnclosingCommand () . getExecutionContext () , true ) ; getReturnValue () . setSucceeded ( true ) ; }
@ org.junit.Test public void updateStatusForVds () { org.ovirt.engine.core.common.businessentities.VdsKdumpStatus existing = new org.ovirt.engine.core.common.businessentities.VdsKdumpStatus () ; existing . setVdsId ( FixturesTool.HOST_ID ) ; existing . setStatus ( KdumpFlowStatus.FINISHED ) ; existing . setAddress ( STRING_CONSTANT ) ; dao . update ( existing ) ; org.ovirt.engine.core.common.businessentities.VdsKdumpStatus found = dao . get ( existing . getVdsId () ) ; org.junit.Assert . assertNotNull ( found ) ; org.junit.Assert . assertEquals ( existing , found ) ; }
@ org.junit.Test public void testRefreshStatus () { org.mockito.Mockito . doReturn ( getSessionDetailsVDSReturnVal ( true ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionStatus ) , org.mockito.ArgumentMatchers . any () ) ; syncJob . refreshGeoRepSessionStatus () ; org.mockito.Mockito . verify ( geoRepDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . saveOrUpdateDetailsInBatch ( org.mockito.ArgumentMatchers . anyList () ) ; }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( NUMBER_CONSTANT , false , false , false ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , true , true , true ) ; setUpVDSGroupExpectations ( GUIDS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateNetworkOnCluster , org.ovirt.engine.core.common.action.NetworkClusterParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , true , true ) ) ; verifyUpdate ( resource . update ( getModel ( NUMBER_CONSTANT ) ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void validateSucceedsWhenHasPeersThrowsException ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS () , true ) ; org.mockito.Mockito . when ( glusterUtil . getPeers ( org.mockito.ArgumentMatchers . any () ) ) . thenThrow ( new java.lang.RuntimeException () ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage () { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; disk . setId ( diskId ) ; java.util.Collections . singletonList ( storageId ) ; disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( storageId ) ) ) ; return disk ; }
protected void actualSave () { flush () ; org.ovirt.engine.ui.frontend.Frontend . RunAction ( action , new org.ovirt.engine.core.common.action.ProviderParameters ( provider ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ( ( result . getReturnValue () ) == null ) || ( ! ( result . getReturnValue () . getSucceeded () ) ) ) { return; } sourceListModel . getSearchCommand () . execute () ; cancel () ; } } ) ; }
protected void mockInterfaceList () { java.util.ArrayList < java.lang.String > diskInterfaces = new java.util.ArrayList <> ( java.util.Arrays . asList ( new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ) ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.osRepository . getDiskInterfaces ( org.mockito.Matchers . anyInt () , org.mockito.Matchers . any () ) ) . thenReturn ( diskInterfaces ) ; }
@ java.lang.Override protected java.security.MessageDigest getMd5Digest ( javax.servlet.http.HttpServletRequest request ) throws java.io.UnsupportedEncodingException , java.security.NoSuchAlgorithmException { java.security.MessageDigest digest = super . getMd5Digest ( request ) ; digest . update ( request . getAttribute ( org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_APPLICATION_MODE ) . toString () . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ; digest . update ( request . getAttribute ( org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_PLUGIN_DEFS ) . toString () . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ; return digest ; }
@ java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue () { switch ( org.ovirt.engine.core.bll.AddVmCommand . getActionState () ) { case EXECUTE : return org.ovirt.engine.core.bll.AddVmCommand . getSucceeded () ? ! ( org.ovirt.engine.core.bll.AddVmCommand . getReturnValue () . getVdsmTaskIdList () . isEmpty () ) ? org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_STARTED : org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_ADD_VM ; case END_SUCCESS : return org.ovirt.engine.core.bll.AddVmCommand . getSucceeded () ? org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_FINISHED_SUCCESS : org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_FINISHED_FAILURE ; default: return org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_FINISHED_FAILURE ; } }
@ org.junit.Test public void validateNotEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommandTest . mockStorageDomainValidatorWithoutSpace () ) . when ( command ) . createStorageDomainValidator () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
@ org.junit.Test public void testAddIscsiLunDisk_IncompleteParameters_ConnectionTarget () { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk () ; model . getLunStorage () . getLogicalUnits () . getLogicalUnits () . get ( NUMBER_CONSTANT ) . setTarget ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void executeCommandWhenFailed () { setUpMocksForAdd () ; mockBackend ( false , EngineError.GlusterHookAddFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . removeGlusterServerHook ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_ADD_FAILED , cmd . getAuditLogTypeValue () ) ; }
void bindConfiguration () { bindConstant () . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultMainSectionPlace . class ) . to ( WebAdminApplicationPlaces.DEFAULT_MAIN_SECTION_PLACE ) ; bindConstant () . annotatedWith ( org.ovirt.engine.ui.common.system.ClientStorageKeyPrefix . class ) . to ( org.ovirt.engine.ui.webadmin.gin.SystemModule.CLIENT_STORAGE_KEY_PREFIX ) ; bindResourceConfiguration ( org.ovirt.engine.ui.webadmin.ApplicationConstants . class , org.ovirt.engine.ui.webadmin.ApplicationMessages . class , org.ovirt.engine.ui.webadmin.ApplicationResources . class , org.ovirt.engine.ui.webadmin.ApplicationTemplates . class , org.ovirt.engine.ui.webadmin.ApplicationDynamicMessages . class ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public < T > java.util.List < T > executeReadList ( final java.lang.String procedureName , final org.springframework.jdbc.core.RowMapper < T > mapper , final org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource ) { java.util.Map < java.lang.String , java.lang.Object > resultsMap = executeImpl ( procedureName , parameterSource , createCallForRead ( procedureName , mapper , parameterSource ) , mapper ) ; return ( ( java.util.List < T > ) ( resultsMap . get ( BaseDAODbFacade.RETURN_VALUE_PARAMETER ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage mockDisk () { org.ovirt.engine.core.compat.Guid diskGuid = org.ovirt.engine.core.compat.Guid . NewGuid () ; org.ovirt.engine.core.compat.Guid itGuid = org.ovirt.engine.core.compat.Guid . NewGuid () ; final org.ovirt.engine.core.common.businessentities.DiskImage expectedDisk = new org.ovirt.engine.core.common.businessentities.DiskImage () ; expectedDisk . setImageId ( diskGuid ) ; expectedDisk . setit_guid ( itGuid ) ; return expectedDisk ; }
@ org.junit.Test public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm model = createModel ( null ) ; model . setTemplate ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void validRunningVmsOrVmLeasesForBackupDomain () { org.ovirt.engine.core.common.queries.QueryReturnValue ret = new org.ovirt.engine.core.common.queries.QueryReturnValue () ; ret . setReturnValue ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmBase > () ) ; ret . setSucceeded ( true ) ; org.mockito.Mockito . doReturn ( ret ) . when ( validator ) . getEntitiesWithLeaseIdForStorageDomain ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertThat ( validator . isRunningVmsOrVmLeasesForBackupDomain ( vmHandler ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private void addOperationImpl ( final org.ovirt.engine.ui.frontend.communication.VdcOperation < , > operation ) { final boolean operationCanBeAdded = ( ! ( operationQueue . contains ( operation ) ) ) || ( operation . allowDuplicates () ) ; if ( operationCanBeAdded && ( operationQueue . add ( operation ) ) ) { processor . processOperation ( this ) ; if ( engineSessionRefreshed ( operation ) ) { org.ovirt.engine.ui.frontend.communication.EngineSessionRefreshedEvent . fire ( eventBus ) ; } } }
@ javax.annotation.PostConstruct public void initOvfDataUpdater () { updateTimerJobId = scheduler . scheduleAFixedDelayJob ( this , STRING_CONSTANT , new java.lang.Class [] {} , new java.lang.Object [] {} , org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.OvfUpdateIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.OvfUpdateIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log . info ( STRING_CONSTANT ) ; }
public void tJDBCInput_8_error ( java.lang.Exception exception , java.lang.String errorComponent , final java.util.Map < java.lang.String , java.lang.Object > globalMap ) throws ovirt_engine_dwh.historydelete_3_6.HistoryDelete.TalendException { end_Hash . put ( errorComponent , java.lang.System . currentTimeMillis () ) ; ( ( java.util.Map ) ( threadLocal . get () ) ) . put ( STRING_CONSTANT , STRING_CONSTANT ) ; tJDBCInput_8_onSubJobError ( exception , errorComponent , globalMap ) ; }
protected boolean validateSuffix ( java.lang.String suffix , org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel ) { for ( java.lang.Object object : objectsToClone ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData ) ( object ) ) . getTemplate () ; if ( ! ( validateName ( ( ( template . getName () ) + suffix ) , entityModel , getClonedAppendedNameValidators () ) ) ) { return false ; } } return true ; }
@ org.junit.Test public void testGetPagPhrase () { mcr . mockConfigValue ( ConfigValues.DBPagingType , STRING_CONSTANT ) ; mcr . mockConfigValue ( ConfigValues.DBPagingSyntax , STRING_CONSTANT ) ; org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker () ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = new org.ovirt.engine.core.searchbackend.SyntaxContainer ( STRING_CONSTANT ) ; res . setMaxCount ( NUMBER_CONSTANT ) ; org.junit.Assert . assertNotEquals ( STRING_CONSTANT , chkr . getPagePhrase ( res , STRING_CONSTANT ) ) ; }
@ org.junit.Test public void validateSucceeds () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . singletonList ( getStorageDevice ( STRING_CONSTANT ) ) ) ) . when ( cmd ) . getParameters () ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
private static org.ovirt.engine.core.common.action.CpuProfileParameters createParameters () { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper . createCpuProfile ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CLUSTER_ID , org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.PROFILE_NAME ) ; org.ovirt.engine.core.common.action.CpuProfileParameters parameters = new org.ovirt.engine.core.common.action.CpuProfileParameters ( cpuProfile ) ; parameters . setCorrelationId ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CORRELATION_ID ) ; parameters . setAddPermissions ( true ) ; parameters . setSessionId ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.SESSION_ID ) ; return parameters ; }
@ org.junit.Test public void addISCSINonEmptyIqn () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( STRING_CONSTANT , StorageType.ISCSI , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newISCSIConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isConnWithSameDetailsExists ( newISCSIConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
@ org.junit.Test public void executeCommand () { setUpMocksForAdd () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.Matchers . any () ) ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . removeGlusterServerHook ( org.mockito.Matchers . any () , org.mockito.Matchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_ADDED , cmd . getAuditLogTypeValue () ) ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getVdsStatic () ) . when ( vdsStaticDao ) . get ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverId ) ; org.mockito.Mockito . doReturn ( getCluster ( true , Version.v4_1 ) ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers . any () ) ; }
public java.lang.String load ( java.io.File file ) { try ( java.io.FileInputStream inputStream = new java.io.FileInputStream ( file ) ) { java.util.Properties props = new java.util.Properties () ; props . load ( inputStream ) ; return loadImpl ( props , file ) ; } catch ( java.io.IOException exception ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( java.lang.String . format ( STRING_CONSTANT , file . getAbsolutePath () ) , exception ) ; } }
@ org.junit.Test public void testRemoveForced ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpVersionExpectations () ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveStoragePool , org.ovirt.engine.core.common.action.StoragePoolParametersBase . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.TRUE } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendDataCenterResource.FORCE , java.lang.Boolean.TRUE . toString () ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource . remove () ) ; }
private static java.lang.Double AssignDoubleValue ( java.util.Map < java.lang.String , java.lang.Object > input , java.lang.String name ) { java.lang.Object value = input . get ( name ) ; if ( value instanceof java.lang.Double ) { return ( ( java.lang.Double ) ( value ) ) ; } else if ( value instanceof java.lang.String ) { return java.lang.Double . parseDouble ( ( ( java.lang.String ) ( value ) ) ) ; } return null ; }
@ org.junit.Test public void testNonExistingQuota () { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.compat.Guid . newGuid () ; cmd . getParameters () . getVm () . setQuotaId ( quotaId ) ; org.junit.Assert . assertFalse ( cmd . validateQuota ( quotaId ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . assertValidationMessages ( STRING_CONSTANT , cmd , EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; }
@ org.junit.Test public void validateFailsWhenGlusterMultipleHostHasVolumesWithForce ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , true ) , null ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockHasMultipleClusters ( true ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
@ java.lang.Override protected void syncSearch () { if ( ( getEntity () ) == null ) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getGlusterBricksForServer ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > glusterBricks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ) ( returnValue ) ) ; java.util.Collections . sort ( glusterBricks , new org.ovirt.engine.ui.uicommonweb.Linq.ServerBricksComparer () ) ; setItems ( glusterBricks ) ; } } ) , getEntity () . getId () ) ; }
@ org.junit.Test public void testSave () { dao . save ( vnicProfile ) ; org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao . get ( vnicProfile . getId () ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( vnicProfile . getId () , result . getId () ) ; org.junit.Assert . assertFalse ( result . isPortMirroring () ) ; org.junit.Assert . assertFalse ( result . isPassthrough () ) ; }
@ org.junit.Test ( expected = org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException . class ) public void testErrorHandling () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue value = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; value . setSucceeded ( false ) ; value . setExceptionObject ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ( STRING_CONSTANT ) ) ; org.mockito.Mockito . when ( updater . getVdsEventListener () ) . thenReturn ( vdsEventlistener ) ; org.mockito.Mockito . when ( resourceManager . runVdsCommand ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.vdscommands.VDSCommandType . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase . class ) ) ) . thenReturn ( value ) ; updater . refreshVdsStats () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > consoleDevices = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; getModel () . getIsConsoleDeviceEnabled () . setEntity ( ( ! ( consoleDevices . isEmpty () ) ) ) ; }
public boolean isSearchUsingTags () { return ( ( mOrigText . contains ( STRING_CONSTANT ) ) || ( ( ( getSearchObjectStr () ) != null ) && ( getSearchObjectStr () . equals ( SearchObjects.VDC_USER_OBJ_NAME ) ) ) ) || ( getCrossRefObjList () . contains ( SearchObjects.VDC_STORAGE_DOMAIN_OBJ_NAME ) ) ; }
@ org.junit.Test public void testPassword ( ) throws java.lang.Exception { try ( final java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.utils.ssh.ConstraintByteArrayOutputStream ( NUMBER_CONSTANT ) ) { client . setPassword ( TestCommon.password ) ; client . connect () ; client . authenticate () ; client . executeCommand ( org.ovirt.engine.core.utils.ssh.BasicTest.hello_command , null , out , null ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.utils.ssh.BasicTest.hello_result , new java.lang.String ( out . toByteArray () , STRING_CONSTANT ) ) ; } }
public java.util.List < java.io.File > getExtensionsDirectories () { java.lang.String path = getProperty ( STRING_CONSTANT , true ) ; if ( path == null ) { return java.util.Collections . emptyList () ; } java.util.List < java.io.File > results = new java.util.ArrayList < java.io.File > () ; for ( java.lang.String currentPath : path . split ( STRING_CONSTANT ) ) { if ( org.apache.commons.lang.StringUtils . isNotBlank ( currentPath ) ) { results . add ( new java.io.File ( currentPath ) ) ; } } return results ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes ) { if ( ( volumes . size () ) > NUMBER_CONSTANT ) { clusterModel . getEnableGlusterService () . setIsChangeable ( false ) ; if ( ! isVirtGlusterAllowed ) { clusterModel . getEnableOvirtService () . setIsChangeable ( false ) ; } } }
@ org.junit.Test public void testGetNotFound1 ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( new java.util.ArrayList <> () ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice ( org.ovirt.engine.core.compat.Guid diskId , org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskId , vmId ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , NUMBER_CONSTANT , null , true , true , null , STRING_CONSTANT , null , null , null ) ; }
private void addDiskAllocation ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { if ( ! ( model . getIsDisksAvailable () ) ) { return; } disksAllocationView . edit ( model . getDisksAllocationModel () ) ; model . getDisksAllocationModel () . getStorageDomain () . setItems ( model . getStorageDomain () . getItems () ) ; model . getDisksAllocationModel () . setDisks ( model . getDisks () ) ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworks , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.core.compat.Guid.Empty } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > () ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
@ org.junit.Test public void vdsGroupWithNoServiceEnabled () { createCommandWithNoService () ; org.mockito.Mockito . when ( vdsGroupDAO . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . createVdsGroupWithNoCpuName () ) ; org.mockito.Mockito . when ( vdsGroupDAO . getByName ( org.mockito.Matchers . anyString () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . createVdsGroupWithNoCpuName () ) ; cpuExists () ; allQueriesEmpty () ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED ) ; }
@ java.lang.Override protected void init () { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getNicType () . setItems ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ) ( returnValue ) ) ) ; postNicInit () ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNicTypeList ( getVm () . getOsId () , getClusterCompatibilityVersion () , asyncQuery ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.gluster.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterVolumeById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ; org.ovirt.engine.api.restapi.resource.VolumeStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.VolumeStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
@ java.lang.Override public void render ( org.ovirt.engine.ui.webadmin.widget.table.column.Context context , org.ovirt.engine.core.common.businessentities.gluster.StorageDevice device , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( device . getCanCreateBrick () ) { return; } com.google.gwt.resources.client.ImageResource statusImage = null ; java.lang.String tooltip ; statusImage = resources . lockImage () ; tooltip = constants . deviceIsAlreadyUsed () ; com.google.gwt.safehtml.shared.SafeHtml statusImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils . fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype . create ( statusImage ) . getHTML () ) ; sb . append ( applicationTemplates . statusTemplate ( statusImageHtml , tooltip , id ) ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.NetworkLabel model = new org.ovirt.engine.api.model.NetworkLabel () ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public void onSucceeded () { updateEntityPhase ( ImageTransferPhase.FINISHED_SUCCESS ) ; log . debug ( STRING_CONSTANT , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getCommandId () ) ; imageTransferDao . remove ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getCommandId () ) ; endSuccessfully () ; log . info ( STRING_CONSTANT , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getCommandId () ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setAllContentHeaderExpectation () ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; control . replay () ; org.ovirt.engine.api.model.Nic nic = resource . get () ; verifyModelSpecific ( nic , NUMBER_CONSTANT ) ; verifyLinks ( nic ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.VmTemplateHandler . lockVmTemplateInTransaction ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getVmTemplateId () , org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getCompensationContext () ) ; final boolean hasImages = ( imageTemplates . size () ) > NUMBER_CONSTANT ; if ( hasImages ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { if ( RemoveVmTemplateImages () ) { setSucceeded ( true ) ; } return null ; } } ) ; } else { HandleEndAction () ; } }
public java.lang.String generateId ( org.ovirt.engine.api.model.Version v ) { org.ovirt.engine.core.compat.NGuid guid = new org.ovirt.engine.core.compat.NGuid ( ( ( ( v . getMajor () ) + STRING_CONSTANT ) + ( v . getMinor () ) ) . getBytes () , true ) ; return guid . toString () ; }
private void createParameters () { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper . createCpuProfile ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CLUSTER_ID , org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.PROFILE_NAME ) ; org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.parameters = new org.ovirt.engine.core.common.action.CpuProfileParameters ( cpuProfile ) ; org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.parameters . setCorrelationId ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CORRELATION_ID ) ; org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.parameters . setAddPermissions ( true ) ; org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.parameters . setSessionId ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.SESSION_ID ) ; }
@ org.junit.Test public void executeCommandWhenServerIdPresent () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID , org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID ) , null ) ) ; setUpMocksForUpdate () ; mockForReadContent ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATED , cmd . getAuditLogTypeValue () ) ; }
@ org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown () { initStorageDomain ( srcStorageId ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) . when ( diskValidator ) . isDiskPluggedToAnyNonDownVm ( org.mockito.ArgumentMatchers . anyBoolean () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot ) { org.ovirt.engine.core.bll.BaseImagesCommand . getImageStorageDomainMapDao () . remove ( snapshot . getImageId () ) ; getImageDao () . remove ( snapshot . getImageId () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesForDisk = org.ovirt.engine.core.bll.BaseImagesCommand . getDiskImageDao () . getAllSnapshotsForImageGroup ( snapshot . getId () ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk . isEmpty () ) ) { org.ovirt.engine.core.bll.BaseImagesCommand . getBaseDiskDao () . remove ( snapshot . getId () ) ; } }
@ org.junit.Test public void unsyncedNetworkModified () { org.ovirt.engine.core.common.businessentities.Network net = createNetwork ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicSyncedWithNetwork ( STRING_CONSTANT , net ) ; nic . setBridged ( ( ! ( net . isVmNetwork () ) ) ) ; nic . setBootProtocol ( NetworkBootProtocol.None ) ; mockExistingNetworks ( net ) ; mockExistingIfaces ( nic ) ; nic . setBootProtocol ( NetworkBootProtocol.Dhcp ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORKS_NOT_IN_SYNC , net . getName () ) ; }
@ org.junit.Test public void addPosixNonEmptyVFSType () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; parameters . setStoragePoolId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . initializeVds () ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Disk disk ) { if ( disk . isSetId () ) { return attachDiskToVm ( disk ) ; } else { validateDiskForCreation ( disk ) ; updateStorageTypeForDisk ( disk ) ; return performCreate ( VdcActionType.AddDisk , getAddParameters ( map ( disk ) , disk ) , new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.AddDiskResolver () ) ; } }
public java.io.File writeConf ( java.lang.String . . . lines ) throws java.io.IOException { java.io.File file = tmp . newFile ( STRING_CONSTANT ) ; try ( java.io.PrintWriter writer = new java.io.PrintWriter ( file , STRING_CONSTANT ) ) { for ( java.lang.String line : lines ) { writer . println ( line ) ; } } return file ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getGlusterVolume ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ) . when ( volumeDao ) . getById ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ; org.mockito.Mockito . doReturn ( getGlusterVolume ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID ) ) . when ( volumeDao ) . getById ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID ) ; }
public java.lang.String getDisplayValue () { if ( isDefault () ) { java.lang.String defaultTimeZoneKey = ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( timeZoneType . getDefaultTimeZoneConfigurationKey () ) ) ) ; if ( ! ( timeZoneType . getTimeZoneList () . containsKey ( defaultTimeZoneKey ) ) ) { defaultTimeZoneKey = timeZoneType . getUltimateFallback () ; } return timeZoneType . getTimeZoneList () . get ( defaultTimeZoneKey ) ; } else { return timeZoneType . getTimeZoneList () . get ( timeZoneKey ) ; } }
@ org.junit.Test public void testAddStoragePoolIsoMap () { dao . save ( newStoragePoolIsoMap ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap result = dao . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( newStoragePoolIsoMap . getstorage_id () , newStoragePoolIsoMap . getstorage_pool_id () ) ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( newStoragePoolIsoMap , result ) ; }
@ org.junit.Test public void canDoActionVmIsNotDown ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage () ; initVm () ; initSrcStorageDomain () ; initDestStorageDomain () ; org.mockito.Mockito . doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDAO () ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN . toString () ) ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [] names , java.lang.Object [] values , boolean canDo , boolean success , java.lang.Object taskReturn , java.lang.String baseUri , boolean replay ) { return setUpActionExpectations ( task , clz , names , values , canDo , success , taskReturn , null , null , null , null , baseUri , replay ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.TagsVmPoolMap ) ) { return false ; } org.ovirt.engine.core.common.businessentities.TagsVmPoolMap other = ( ( org.ovirt.engine.core.common.businessentities.TagsVmPoolMap ) ( obj ) ) ; return ( java.util.Objects . equals ( id , other.id ) ) && ( java.util.Objects . equals ( created , other.created ) ) ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , org.ovirt.engine.core.common.businessentities.VDS vds , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( vds . getId () , reason , customLogValues ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
public boolean isStartupTimeoutPassed () { java.util.Date waitTo = getBackend () . getStartedAt () . addSeconds ( org.ovirt.engine.core.common.config.Config . getValue ( ConfigValues.DisableFenceAtStartupInSec ) ) ; java.util.Date now = new java.util.Date () ; if ( ! ( ( waitTo . before ( now ) ) || ( waitTo . equals ( now ) ) ) ) { return false ; } else { return true ; } }
@ org.junit.Test public void testEmptyFilter ( ) throws java.lang.Exception { filter . clearFilterEntries () ; filter . processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( STRING_CONSTANT ) ) ; filter . processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( snmp . getEvents () . isEmpty () ) ; }
@ org.junit.Test public void testGetPagPhrase () { mcr . mockConfigValue ( ConfigValues.DBPagingType , STRING_CONSTANT ) ; mcr . mockConfigValue ( ConfigValues.DBPagingSyntax , STRING_CONSTANT ) ; org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker () ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = new org.ovirt.engine.core.searchbackend.SyntaxContainer ( STRING_CONSTANT ) ; res . setMaxCount ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , chkr . getPagePhrase ( res , STRING_CONSTANT ) ) ; mcr . mockConfigValue ( ConfigValues.DBPagingType , STRING_CONSTANT ) ; mcr . mockConfigValue ( ConfigValues.DBPagingSyntax , STRING_CONSTANT ) ; org.junit.Assert . assertNotEquals ( STRING_CONSTANT , chkr . getPagePhrase ( res , STRING_CONSTANT ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.Template update ( org.ovirt.engine.api.model.Template incoming ) { validateEnums ( org.ovirt.engine.api.model.Template . class , incoming ) ; validateIconParams ( incoming ) ; org.ovirt.engine.api.model.Template result = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters . class ) , VdcActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendTemplateResource.UpdateParametersProvider () ) ; if ( result != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper . adjustDisplayData ( this , result ) ; } return result ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object ) { super . edit ( object ) ; initTabAvailabilityListeners ( object ) ; if ( object . getIsNew () ) { object . getNumOfDesktops () . setEntity ( NUMBER_CONSTANT ) ; prestartedVmsEditor . setEnabled ( false ) ; } }
private void mockWithChanges () { mockStatusForAllServicesOfServer ( org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJobTest.SERVER1_ID , GlusterServiceStatus.RUNNING ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > server2Services = createServerServicesWithMixedStatus ( org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJobTest.SERVER2_ID ) ; org.mockito.Mockito . doReturn ( createVDSReturnValue ( server2Services ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.Matchers . eq ( VDSCommandType.GlusterServicesList ) , org.mockito.Matchers . argThat ( isServer ( org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJobTest.SERVER2_ID ) ) ) ; mockStatusForAllServicesOfServer ( org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJobTest.SERVER3_ID , GlusterServiceStatus.STOPPED ) ; }
@ org.junit.Test public void testExecuteCommandFailsWithServerIdForStop () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) , null ) ) ; setUpMockUpForStart () ; mockBackend ( false , EngineError.GlusterServicesActionFailed , GlusterServiceStatus.RUNNING ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( serverServiceDao , org.mockito.Mockito . never () ) . updateByServerIdAndServiceType ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_SERVICE_STOP_FAILED ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap () ; changeDomainStatusWithCompensation ( map , StorageDomainStatus.Unknown , StorageDomainStatus.Locked , org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand . getCompensationContext () ) ; if ( shouldPerformOvfUpdate () ) { runInternalAction ( ActionType.UpdateOvfStoreForStorageDomain , createUpdateOvfStoreParams () , org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand . getContext () ) ; } if ( org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand . noAsyncOperations () ) { executeDeactivateCommand () ; } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testReadLatency () { java.lang.String doubleValue = STRING_CONSTANT ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . getVmDynamic () ; java.util.Map < java.lang.String , java.lang.Object > diskData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDiskData () ; diskData . put ( VdsProperties.vm_disk_read_latency , doubleValue ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setMockForTesting ( diskData ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . updateVMDynamicData ( vmDynamic , xml , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . getVds () ) ; org.junit.Assert . assertEquals ( new java.lang.Double ( STRING_CONSTANT ) , vmDynamic . getDisks () . get ( NUMBER_CONSTANT ) . getReadLatency () ) ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageDomainStaticDao () . get ( org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery . getParameters () . getStorageDomainId () ) ; if ( ( storage . getstorage_domain_type () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null ; retVal = executeVerb ( storage ) ; buildOvfReturnValue ( retVal . getReturnValue () ) ; } else { org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery . getQueryReturnValue () . setReturnValue ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > () ) ; } }
@ java.lang.Override protected boolean canDoAction () { boolean retValue = super . canDoAction () ; if ( ( ( org.ovirt.engine.core.bll.StopVdsCommand . getVds () ) != null ) && ( ( org.ovirt.engine.core.bll.StopVdsCommand . getVds () . getstatus () ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance ) ) ) { addCanDoActionMessage ( VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_STOP ) ; retValue = false ; } return retValue ; }
public void edit () { final org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = getSelectedItem () ; if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkQoSModel networkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkQoSModel ( networkQoS , this , getEntity () ) ; setWindow ( networkQoSModel ) ; networkQoSModel . getDataCenters () . setItems ( java.util.Arrays . asList ( getEntity () ) ) ; networkQoSModel . getDataCenters () . setSelectedItem ( getEntity () ) ; }
private void setCommandExecutionAllowedForProvider ( org.ovirt.engine.core.common.businessentities.Provider provider ) { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = ( ( org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties ) ( provider . getAdditionalProperties () ) ) ; if ( ( properties != null ) && ( properties . getReadOnly () ) ) { setCommandExecutionAllowed ( false ) ; return; } setCommandExecutionAllowed ( true ) ; }
@ java.lang.Override public void runMultipleActionFailed ( org.ovirt.engine.core.common.action.VdcActionType action , java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValues ) { java.util.List < org.ovirt.engine.core.common.action.VdcActionType > actions = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionType > () ; for ( int i = NUMBER_CONSTANT ; i < ( returnValues . size () ) ; i ++ ) { actions . add ( action ) ; } runMultipleActionsFailed ( actions , returnValues ) ; }
@ org.junit.Test public void testUpdateIncompleteParameters ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Cdrom cdrom = new org.ovirt.engine.api.model.Cdrom () ; cdrom . setFile ( null ) ; try { resource . update ( cdrom ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void canDoActionPreallocatedSpaceCheckSucceeds () { final int availableSize = NUMBER_CONSTANT ; final int usedSize = NUMBER_CONSTANT ; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( sdid , VolumeType.Preallocated ) ; mockVm () ; org.ovirt.engine.core.common.businessentities.storage_domains domains = mockStorageDomain ( sdid , availableSize , usedSize ) ; mockStoragePoolIsoMap () ; mockStorageDomainSpaceCheckerRequest ( domains , true ) ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
@ org.junit.Test public void validateFailsForNoStorageDevice () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . emptyList () ) ) . when ( cmd ) . getParameters () ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void getSpecParams () { command . getParameters () . setAction ( VmWatchdogAction.RESET ) ; command . getParameters () . setModel ( vmWatchdogType ) ; java.util.HashMap < java.lang.String , java.lang.Object > specParams = command . getSpecParams () ; org.junit.Assert . assertNotNull ( specParams ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , specParams . get ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , specParams . get ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey authenticationKey ) { validateParameters ( authenticationKey , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; return performCreate ( VdcActionType.AddLibvirtSecret , new org.ovirt.engine.core.common.action.LibvirtSecretParameters ( map ( addProvider ( authenticationKey ) ) ) , new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetLibvirtSecretById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ) ; }
@ java.lang.Override public javax.ws.rs.core.Response remove () { get () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections () ; connection . setId ( id ) ; java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper . getParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResource.HOST ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty ; if ( host != null ) { hostId = getHostId ( host ) ; } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId , false ) ; return performAction ( VdcActionType.RemoveStorageServerConnection , parameters ) ; }
@ org.junit.Test public void testStorageDomainVmLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm () ; vm . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; vm . setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain () ) ; vm . getStorageDomain () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; vm = org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( vm ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_VM_HREF , vm . getHref () ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , vm . getStorageDomain () . getHref () ) ; }
@ java.lang.Override protected void InitDetailModels () { super . InitDetailModels () ; org.ovirt.engine.core.compat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.core.compat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > () ; list . add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel () ) ; list . add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateVmListModel () ) ; list . add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel () ) ; list . add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateStorageListModel () ) ; addCustomModelsDetailModelList ( list ) ; setDetailModels ( list ) ; }
@ org.junit.Test public void testOtherFieldsNotValidatedInImport () { org.junit.Assert . assertFalse ( ( ( org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_DOMAIN_SIZE ) > ( string100 . length () ) ) ) ; command . getParameters () . setImportAsNewEntity ( true ) ; java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.action.ImportVmTemplateParameters > > validate = org.ovirt.engine.core.common.utils.ValidationUtils . getValidator () . validate ( command . getParameters () , command . getValidationGroups () . toArray ( new java.lang.Class < > [ NUMBER_CONSTANT ] ) ) ; org.junit.Assert . assertTrue ( validate . isEmpty () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.junit.Test public void hostProviderExists () { org.mockito.Mockito . when ( host . getHostProviderId () ) . thenReturn ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . when ( providerDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.Provider . class ) ) ; org.junit.Assert . assertThat ( validator . hostProviderExists () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
void loadPlugin ( org.ovirt.engine.ui.webadmin.plugin.Plugin plugin ) { if ( plugin . isInState ( PluginState.DEFINED ) ) { org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger . info ( ( ( STRING_CONSTANT + ( plugin . getName () ) ) + STRING_CONSTANT ) ) ; com.google.gwt.dom.client.Document . get () . getBody () . appendChild ( plugin . getIFrameElement () ) ; plugin . markAsLoading () ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetStepsByJobId , org.ovirt.engine.core.common.queries.GetStepsByJobIdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpSteps () , failure ) ; control . replay () ; }
@ org.junit.Test public void testDeactivateNic ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmNicResource backendVmNicResource = ( ( org.ovirt.engine.api.restapi.resource.BackendVmNicResource ) ( resource ) ) ; setAllContentHeaderExpectation () ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ NUMBER_CONSTANT ] } ) ) ; verifyActionResponse ( backendVmNicResource . deactivate ( new org.ovirt.engine.api.model.Action () ) ) ; }
@ org.junit.Test public void testAllowRhel6InRhel7 () { org.ovirt.engine.core.common.businessentities.VDS vds = createBaseVds () ; vdsFromDb . setHostOs ( STRING_CONSTANT ) ; vds . setHostOs ( STRING_CONSTANT ) ; cluster . setClusterPolicyId ( ClusterPolicy.UPGRADE_POLICY_GUID ) ; virtStrategy . processSoftwareCapabilities ( vds ) ; org.junit.Assert . assertNotEquals ( VDSStatus.NonOperational , vds . getStatus () ) ; }
@ org.junit.Test public void validateFailsOnNoHook () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd , false ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST . toString () ) ) ; }
@ org.junit.Before public void setupMock ( ) throws java.lang.Exception { org.mockito.Mockito . doReturn ( stepDaoMock ) . when ( command ) . getStepDao () ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.jobId ) ) . thenReturn ( makeExternalTestJob ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.jobId ) ) ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.nonExternalJobId ) ) . thenReturn ( makeNonExternalTestJob ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.nonExternalJobId ) ) ; }
private boolean prepareStorageServer ( org.ovirt.engine.core.common.action.HostStoragePoolParametersBase parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > res = org.ovirt.engine.core.bll.storage.ISCSIStorageHelper . updateIfaces ( connections , parameters . getVds () . getId () ) ; connections . clear () ; connections . addAll ( res ) ; return true ; }
@ org.junit.Test public void getFreeVfMoreThanOneFreeVf () { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , freeVfs . size () ) ; org.junit.Assert . assertTrue ( freeVfs . contains ( networkDeviceHelper . getFreeVf ( nic , null ) ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( STRING_CONSTANT . equals ( propName ) ) { if ( ( listModel . getItems () ) != null ) { showModels ( ( ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel > ) ( listModel . getItems () ) ) , vds ) ; } } }
public void refreshHost ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { refreshCapabilities ( new java.util.concurrent.atomic.AtomicBoolean () , vds ) ; } finally { if ( vds != null ) { updateDynamicData ( vds . getDynamicData () ) ; monitoringStrategy . processHardwareCapabilities ( vds ) ; org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . getEventListener () . handleVdsVersion ( vds . getId () ) ; } } }
@ java.lang.Override protected void postSaveAction ( boolean succeeded ) { if ( succeeded ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qosItems = new java.util.ArrayList ( this . getQos () . getItems () ) ; qosItems . add ( NUMBER_CONSTANT , getQos () ) ; this . getQos () . setItems ( qosItems ) ; this . getQos () . setSelectedItem ( getQos () ) ; } super . postSaveAction ( succeeded ) ; }
protected void setUpGetGraphicsExpectations ( int times ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetGraphicsDevices , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , java.util.Arrays . asList ( new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ) ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel dataCenterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel ) ( target ) ) ; if ( returnValue != null ) { dataCenterGuideModel.localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; } else { noLocalStorageHost = true ; } dataCenterGuideModel . updateOptionsLocalFS () ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.NIC model = new org.ovirt.engine.api.model.NIC () ; model . setName ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
private void flatGroups ( org.ovirt.engine.api.extensions.ExtMap entity , org.ovirt.engine.api.extensions.ExtKey key , java.util.Map < java.lang.String , org.ovirt.engine.api.extensions.ExtMap > accumulator ) { for ( org.ovirt.engine.api.extensions.ExtMap group : entity . < java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > > get ( key , java.util.Collections . < org.ovirt.engine.api.extensions.ExtMap > emptyList () ) ) { if ( ! ( accumulator . containsKey ( group . < java.lang.String > get ( GroupRecord.ID ) ) ) ) { accumulator . put ( group . get ( GroupRecord.ID ) , group ) ; flatGroups ( group , GroupRecord.GROUPS , accumulator ) ; } } }
@ org.junit.Test public void addExistingConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS ) ; }
@ java.lang.Override protected void EndVmCommand () { try { if ( org.ovirt.engine.core.bll.RemoveVmCommand . acquireLock () ) { setVm ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmDAO () . get ( org.ovirt.engine.core.bll.RemoveVmCommand . getVmId () ) ) ; if ( ( org.ovirt.engine.core.bll.RemoveVmCommand . getVm () ) != null ) { RemoveVmFromDb () ; } } org.ovirt.engine.core.bll.RemoveVmCommand . setSucceeded ( true ) ; } finally { org.ovirt.engine.core.bll.RemoveVmCommand . freeLock () ; } }
public static void initLinuxOsTypes () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsIds = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetLinuxOss ) , callback ) ; }
@ org.junit.Before public void setup () { validator = new org.ovirt.engine.core.bll.validator.FenceValidator () ; validator = org.mockito.Mockito . spy ( validator ) ; org.mockito.Mockito . stub ( validator . getProxyLocator ( org.mockito.Mockito . any ( org.ovirt.engine.core.common.businessentities.VDS . class ) ) ) . toReturn ( proxyLocator ) ; org.mockito.Mockito . doReturn ( backend ) . when ( validator ) . getBackend () ; org.ovirt.engine.core.common.config.Config . setConfigUtils ( configUtils ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAffinityGroupsByClusterId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] {} , new java.lang.Object [] {} , setUpAffinityGroups () , failure ) ; control . replay () ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( disk . getVm () ) == null ) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE . equals ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity () ) ; interfaceInfoIcon . setVisible ( ( ! isVirtioScsiEnabled ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { return getVideoDeviceSettings ( vmBase ) . entrySet () . stream () . collect ( java.util.stream.Collectors . toMap ( java.util.Map.Entry : : getKey , ( e ) - > java.lang.String . valueOf ( e . getValue () ) ) ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( STRING_CONSTANT . equals ( command . getName () ) ) { onRemove () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { onRestore () ; } else { super . executeCommand ( command ) ; } }
private void endCommand () { if ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getRemoveFromDB () ) { removeImageFromDB () ; } else { org.ovirt.engine.core.bll.RemoveImageCommand . getImageStorageDomainMapDao () . remove ( new org.ovirt.engine.core.common.businessentities.image_storage_domain_map_id ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getStorageDomainId () ) ) ; org.ovirt.engine.core.bll.RemoveImageCommand . UnLockImage () ; } org.ovirt.engine.core.bll.RemoveImageCommand . setSucceeded ( true ) ; }
@ org.junit.Test ( expected = java.lang.IllegalArgumentException . class ) public void testGetSuffixedProperty ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.uutils.config.ShellLikeConfdTest.config . getProperty ( STRING_CONSTANT , STRING_CONSTANT , false ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.uutils.config.ShellLikeConfdTest.config . getProperty ( STRING_CONSTANT , STRING_CONSTANT , false ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.uutils.config.ShellLikeConfdTest.config . getProperty ( STRING_CONSTANT , STRING_CONSTANT , false ) ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , t ) ; control . replay () ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
@ java.lang.Override public void setColumnVisible ( com.google.gwt.user.cellview.client.Column < T , > column , boolean visible ) { if ( isColumnPresent ( column ) ) { columnVisibleMapOverride . put ( column , visible ) ; java.lang.String columnWidth = ( ( getHiddenPersistedColumnWidth ( column ) ) != null ) ? getHiddenPersistedColumnWidth ( column ) : columnWidthMap . get ( column ) ; persistColumnVisibility ( column , visible ) ; ensureColumnVisible ( column , null , visible , columnWidth , false ) ; } }
public void setDefaultNames3 () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getClusterList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { context.clusterList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; setDefaultNames4 () ; } } , frontendHash ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > dcNetworks ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel networkToManage = createNetworkList ( dcNetworks ) ; setWindow ( networkToManage ) ; networkToManage . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . assignDetachNetworksTitle () ) ; networkToManage . setHelpTag ( HelpTag.assign_networks ) ; networkToManage . setHashName ( STRING_CONSTANT ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getCopyCommand () ) ) { copy () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } else if ( command == ( getChangeQuotaCommand () ) ) { changeQuota () ; } else if ( command . getName () . equals ( STRING_CONSTANT ) ) { onChangeQuota () ; } }
protected org.ovirt.engine.core.common.businessentities.VmDynamic createVmDynamic () { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; vmDynamic . setId ( getVmId () ) ; vmDynamic . setStatus ( VMStatus.ImageLocked ) ; vmDynamic . setVmHost ( STRING_CONSTANT ) ; vmDynamic . setVmIp ( STRING_CONSTANT ) ; vmDynamic . setVmFQDN ( STRING_CONSTANT ) ; vmDynamic . setLastStopTime ( new java.util.Date () ) ; vmDynamic . setAppList ( org.ovirt.engine.core.bll.ImportVmCommandBase . getParameters () . getVm () . getAppList () ) ; return vmDynamic ; }
@ org.junit.Test public void testAddIncompleteParametersNoName ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; model . setDescription ( DESCRIPTIONS [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
private void addContentToWestPanel ( org.ovirt.engine.ui.webadmin.uicommon.model.SystemTreeModelProvider treeModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.BookmarkModelProvider bookmarkModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.TagModelProvider tagModelProvider , final com.google.gwt.user.client.ui.StackLayoutPanel panel ) { panel . insert ( new org.ovirt.engine.ui.webadmin.widget.tree.SystemTree ( treeModelProvider ) , treeHeader , org.ovirt.engine.ui.webadmin.section.main.view.MainSectionView.SECTION_HEADER_HEIGHT , panel . getWidgetCount () ) ; panel . insert ( new org.ovirt.engine.ui.webadmin.widget.bookmark.BookmarkList ( bookmarkModelProvider ) , bookmarksHeader , org.ovirt.engine.ui.webadmin.section.main.view.MainSectionView.SECTION_HEADER_HEIGHT , panel . getWidgetCount () ) ; panel . insert ( new org.ovirt.engine.ui.webadmin.widget.tags.TagList ( tagModelProvider ) , tagsHeader , org.ovirt.engine.ui.webadmin.section.main.view.MainSectionView.SECTION_HEADER_HEIGHT , panel . getWidgetCount () ) ; }
public java.util.Set < org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType > getDeviceTypesWithProperties ( org.ovirt.engine.core.compat.Version version ) { java.util.EnumMap < org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType , java.util.Map < java.lang.String , java.lang.String > > map = deviceProperties . get ( version ) ; if ( map . isEmpty () ) { return java.util.Collections . emptySet () ; } else { return java.util.Collections . unmodifiableSet ( map . keySet () ) ; } }
public boolean getIsQxlSupported () { boolean isLinux = getIsLinuxOS () ; boolean isQxl = ( getDisplayType () . getSelectedItem () ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ; boolean isSpice = ( getGraphicsType () . getSelectedItem () ) == ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes.SPICE ) ; return ( isLinux && isQxl ) && isSpice ; }
@ org.junit.Test public void testPatternBasedNameFails () { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = createCommand ( initializeMock ( NUMBER_CONSTANT ) ) ; cmd . getParameters () . getVm () . setName ( STRING_CONSTANT ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , cmd . validateInputs () ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , setUpClusters () , null ) ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void nonMixedClusterServiceSupported () { mockConfigRule . mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , false ) ; org.mockito.Mockito . when ( cluster . supportsGlusterService () ) . thenReturn ( true ) ; org.mockito.Mockito . when ( cluster . supportsVirtService () ) . thenReturn ( false ) ; org.junit.Assert . assertThat ( validator . mixedClusterServicesSupported () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ org.junit.Test public void calculateNetworkImplementationDetailsInterfaceQosMissing ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice () ; iface . setQos ( null ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface . isBridged () , iface . getMtu () , iface . getVlanId () , createQos () ) ; }
@ java.lang.Override protected void init () { super . init () ; resource . getParent () . backend = backend ; resource . getParent () . mappingLocator = resource.mappingLocator ; resource . getParent () . httpHeaders = httpHeaders ; resource . getParent () . messageBundle = messageBundle ; org.ovirt.engine.api.restapi.utils.OsTypeMockUtils . mockOsTypes () ; }
public void saveNICsConfig () { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.CommitNetworkChanges , new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.core.common.action.VdcActionParametersBase [] { new org.ovirt.engine.core.common.action.VdsActionParameters ( getEntity () . getId () ) } ) ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) {} } , null ) ; }
public void init ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > externalVms , final org.ovirt.engine.core.compat.Guid dataCenterId ) { setCloseCommand ( new org.ovirt.engine.ui.uicommonweb.UICommand ( null , this ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . close () ) . setIsDefault ( true ) . setIsCancel ( true ) ) ; setTargetArchitecture ( externalVms ) ; super . setItems ( new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { doInit ( dataCenterId ) ; } } , externalVms ) ; }
@ org.junit.Test public void calculateNetworkImplementationDetailsNetworkVlanOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice () ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface . isBridged () , iface . getMtu () , ( ( iface . getVlanId () ) + NUMBER_CONSTANT ) , createQos () ) ; }
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > getNetworksInCluster () { if ( ( networksInClusterByName ) == null ) { if ( ( clusterId ) != null ) { networksInClusterByName = org.ovirt.engine.core.common.businessentities.Entities . entitiesByName ( getNetworkDao () . getAllForCluster ( clusterId ) ) ; } else { networksInClusterByName = new java.util.HashMap <> () ; } } return networksInClusterByName ; }
private org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > getBondOption ( org.ovirt.engine.core.common.businessentities.network.BondMode mode ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel () ; entityModel . setEntity ( mode . getDescription () ) ; return new org.ovirt.engine.core.compat.KeyValuePairCompat ( mode . getConfigurationValue () , entityModel ) ; }
@ org.junit.Test public void testAttachedStorageDomainLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain () ; storageDomain . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; storageDomain . setDataCenter ( new org.ovirt.engine.api.model.DataCenter () ) ; storageDomain . getDataCenter () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DATA_CENTER_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( storageDomain ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.ATTACHED_STORAGE_DOMAIN_HREF , storageDomain . getHref () ) ; }
protected void setVirtioScsiController ( org.ovirt.engine.api.model.VM model ) { if ( ! ( model . isSetVirtioScsi () ) ) { model . setVirtioScsi ( new org.ovirt.engine.api.model.VirtIOSCSI () ) ; } model . getVirtioScsi () . setEnabled ( ( ! ( org.ovirt.engine.api.restapi.util.VmHelper . getVirtioScsiControllersForEntity ( this , new org.ovirt.engine.core.compat.Guid ( model . getId () ) ) . isEmpty () ) ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { defaultType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDefaultNicType ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ) ( returnValue ) ) ) ; supportedInterfaceTypes = ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getVmNicList ( getNicsQuery , vmId ) ; }
public static boolean qosConfiguredOnInterface ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( iface . isQosOverridden () ) { return ( ( iface . getQos () ) != null ) && ( ! ( iface . getQos () . isEmpty () ) ) ; } else { return ( network != null ) && ( ( network . getQosId () ) != null ) ; } }
public boolean hasTaskCompleted ( org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask task ) { return ( ( ( org.ovirt.engine.core.common.job.JobExecutionStatus.ABORTED ) == ( task . getStatus () ) ) || ( ( ( org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED ) == ( task . getStatus () ) ) && ( ( task . getType () ) != ( org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK ) ) ) ) || ( ( org.ovirt.engine.core.common.job.JobExecutionStatus.FAILED ) == ( task . getStatus () ) ) ; }
@ org.junit.Test public void executeCommandWhenServerIdPresent () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID , org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID ) , null ) ) ; setUpMocksForUpdate () ; mockForReadContent ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_UPDATED ) ; }
private void buidExclusiveLockMap ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > listVms ) { if ( ( ( org.ovirt.engine.core.bll.UpdateVmDiskCommand . getParameters () . getDiskInfo () . isBoot () ) && ( listVms != null ) ) && ( ! ( listVms . isEmpty () ) ) ) { exclusiveLockMap = new java.util.HashMap < java.lang.String , java.lang.String > () ; for ( org.ovirt.engine.core.common.businessentities.VM vm : listVms ) { exclusiveLockMap . put ( vm . getId () . toString () , LockingGroup.VM_DISK_BOOT . name () ) ; } } }
@ java.lang.Override public void setVmsWithvNumaNodeList ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsWithvNumaNodeList ) { super . setVmsWithvNumaNodeList ( vmsWithvNumaNodeList ) ; if ( org.ovirt.engine.core.compat.Guid . isNullOrEmpty ( vm . getId () ) ) { vmsWithvNumaNodeList . add ( vm ) ; } else { org.ovirt.engine.core.common.businessentities.VM removeVm = null ; for ( org.ovirt.engine.core.common.businessentities.VM iterVm : vmsWithvNumaNodeList ) { if ( iterVm . getId () . equals ( vm . getId () ) ) { removeVm = iterVm ; break; } } vmsWithvNumaNodeList . remove ( removeVm ) ; vmsWithvNumaNodeList . add ( vm ) ; } }
public void postOnSetupNetworks () { org.ovirt.engine.ui.uicommonweb.action.SimpleAction closeAction = getCloseAction () ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters hostSetupNetworksParameters = createHostSetupNetworksParameters () ; org.ovirt.engine.ui.uicommonweb.action.UiAction setupNetworksAction = new org.ovirt.engine.ui.uicommonweb.action.UiVdcAction ( org.ovirt.engine.core.common.action.VdcActionType.HostSetupNetworks , hostSetupNetworksParameters , this , true ) ; setupNetworksAction . then ( getVfsConfigAction () ) . then ( getCommitNetworkChangesAction () ) . onAllExecutionsFinish ( closeAction ) ; setupNetworksAction . runAction () ; }
@ java.lang.Override protected void build ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.businessentities.VM vm ) { vm . setVmtGuid ( model . getTemplate () . getSelectedItem () . getId () ) ; vm . setInstanceTypeId ( model . getInstanceTypes () . getSelectedItem () . getId () ) ; }
private void logNoProxyAvailable ( org.ovirt.engine.core.compat.Guid dataCenterId ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; java.lang.String dcName = org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery . getDbFacade () . getStoragePoolDao () . get ( dataCenterId ) . getName () ; logable . addCustomValue ( STRING_CONSTANT , dcName ) ; auditLogDirector . log ( logable , AuditLogType.IMPORTEXPORT_NO_PROXY_HOST_AVAILABLE_IN_DC ) ; }
@ java.lang.Override protected void UpdateActionAvailability () { super . UpdateActionAvailability () ; getConnectCommand () . setIsExecutionAllowed ( ( ( ( ( getEntity () ) != null ) && ( ( ( getEntity () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( getEntity () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown ) ) ) ) && ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . IsWindowsOsType ( getEntity () . getVmOs () ) ) ) ) ; }
private org.ovirt.engine.api.model.GlusterVolume createModel () { org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume () ; volume . setName ( STRING_CONSTANT ) ; volume . setCluster ( new org.ovirt.engine.api.model.Cluster () ) ; volume . getCluster () . setId ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.clusterId . toString () ) ; volume . setVolumeType ( org.ovirt.engine.api.model.GlusterVolumeType.DISTRIBUTE ) ; volume . setBricks ( new org.ovirt.engine.api.model.GlusterBricks () ) ; volume . getBricks () . getGlusterBricks () . add ( createBrick ( STRING_CONSTANT ) ) ; return volume ; }
private static void computeSmallByLargeIconId ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( ( vmBase . getLargeIconId () ) == null ) { return; } final java.util.List < org.ovirt.engine.core.common.businessentities.VmIconDefault > iconDefaultsByLargeIconId = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmIconsDefaultDao () . getByLargeIconId ( vmBase . getLargeIconId () ) ; if ( ! ( iconDefaultsByLargeIconId . isEmpty () ) ) { vmBase . setSmallIconId ( iconDefaultsByLargeIconId . get ( NUMBER_CONSTANT ) . getSmallIconId () ) ; } else { vmBase . setSmallIconId ( org.ovirt.engine.core.bll.utils.IconUtils . ensureSmallIconInDatabase ( vmBase . getLargeIconId () ) ) ; } }
@ org.junit.Test public void vmIdRefNullVm () { b . setVmId ( null ) ; final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM () ; v . setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVm ( v ) ; final org.ovirt.engine.core.compat.Guid g = b . getVmIdRef () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; }
private void onCreateSnapshot () { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel ) ( getWindow () ) ) ; if ( ! ( snapshotModel . validate ( false ) ) ) { return; } if ( ( ! ( snapshotModel . isScheduleTabVisible () ) ) || ( ( snapshotModel . getRecurrence () . getSelectedItem () ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN ) ) ) { createNewSnapshot ( snapshotModel ) ; } else { scheduleSnapshot ( snapshotModel , false ) ; } }
private void calculateNetworkImplementationDetailsAndAssertManaged ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , boolean expectManaged , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils . calculateNetworkImplementationDetails ( network , null , iface ) ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , networkImplementationDetails ) ; org.junit.Assert . assertEquals ( ( ( STRING_CONSTANT + ( expectManaged ? STRING_CONSTANT : STRING_CONSTANT ) ) + STRING_CONSTANT ) , expectManaged , networkImplementationDetails . isManaged () ) ; }
@ org.junit.Test public void testCompareToVmIdsAreNotEqual () { org.ovirt.engine.core.compat.Guid vmId1 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid vmId2 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid deviceId1 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid deviceId2 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VmDevice device1 = createVmDevice ( deviceId1 , vmId1 ) ; org.ovirt.engine.core.common.businessentities.VmDevice device2 = createVmDevice ( deviceId2 , vmId2 ) ; assertCompareTo ( device1 , device2 ) ; device1 = createVmDevice ( deviceId1 , vmId1 ) ; device2 = createVmDevice ( deviceId1 , vmId2 ) ; assertCompareTo ( device1 , device2 ) ; }
private void mockDaoForQuery () { returnedQuotas = new java.util.ArrayList <> () ; org.mockito.Mockito . when ( getQueryParameters () . getAdElementId () ) . thenReturn ( adElementId ) ; org.mockito.Mockito . when ( getQueryParameters () . getStoragePoolId () ) . thenReturn ( storagePoolId ) ; org.mockito.Mockito . when ( quotaDao . getQuotaByAdElementId ( adElementId , storagePoolId , false ) ) . thenReturn ( returnedQuotas ) ; }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.IP_VALIDATOR . validate ( value ) ; if ( ! ( ipValidation . getSuccess () ) ) { return ipValidation ; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { result . setSuccess ( validateNetMask ( ( ( java.lang.String ) ( value ) ) ) ) ; result . setReasons ( org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons ) ; } return result ; }
protected java.lang.Object [] getSelectedKeys () { if ( ( getSelectedItems () ) == null ) { return new java.lang.Object [ NUMBER_CONSTANT ] ; } else { java.util.ArrayList < java.lang.Object > objL = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.StoragePool a : getSelectedItems () ) { objL . add ( a . getId () ) ; } return objL . toArray ( new java.lang.Object [] {} ) ; } }
protected void setUpCommand () { org.mockito.Mockito . doNothing () . when ( command ) . initTemplate () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateCpuProfile () ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getImagesList () { if ( ( ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getParameters () . getImagesList () ) == null ) && ( ! ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getParameters () . getDstSnapshotId () . equals ( Guid.Empty ) ) ) ) { org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getParameters () . setImagesList ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getDiskImageDAO () . getAllSnapshotsForVmSnapshot ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getParameters () . getDstSnapshotId () ) ) ; } return org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getParameters () . getImagesList () ; }
@ java.lang.Override protected void endVmCommand () { org.ovirt.engine.core.bll.StopVmCommandBase . setCommandShouldBeLogged ( false ) ; if ( ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () ) != null ) { org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . setStatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . setHibernationVolHandle ( null ) ; org.ovirt.engine.core.bll.StopVmCommandBase . getVmDynamicDao () . update ( org.ovirt.engine.core.bll.StopVmCommandBase . getVm () . getDynamicData () ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase.log . warn ( STRING_CONSTANT ) ; } org.ovirt.engine.core.bll.StopVmCommandBase . setSucceeded ( true ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getVolumeInfo ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid newStorageDomainID , org.ovirt.engine.core.compat.Guid newImageGroupId , org.ovirt.engine.core.compat.Guid newImageId ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( runVdsCommand ( VDSCommandType.GetImageInfo , new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters ( storagePoolId , newStorageDomainID , newImageGroupId , newImageId ) ) . getReturnValue () ) ) ; }
@ org.junit.Test public void testGetAllStaticByStoragePool () { org.ovirt.engine.core.compat.Guid spID = dbFacade . getVdsGroupDao () . get ( newVmStatic . getVdsGroupId () ) . getStoragePoolId () ; org.junit.Assert . assertNotNull ( spID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > result = dao . getAllByStoragePoolId ( spID ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertFalse ( result . isEmpty () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > pmOptions = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; if ( pmOptions != null ) { getPmSecondaryPort () . setIsAvailable ( pmOptions . contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey ) ) ; getPmSecondarySlot () . setIsAvailable ( pmOptions . contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey ) ) ; getPmSecondarySecure () . setIsAvailable ( pmOptions . contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey ) ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validateWithHostSetupNetworksValidator ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand . getParameters () , getExistingNics () , getExistingAttachments () , getNetworkBusinessEntityMap () , managementNetworkUtil , networkClusterDao , networkDao , vdsDao , hostSetupNetworksValidatorHelper , vmDao ) ; return validator . validate () ; }
public static void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > () ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
@ org.junit.Test public void testShouldCheckVmOnClusterUpgrade () { prepareVmToPassValidate () ; mockVmValidator () ; group . setClusterPolicyId ( ClusterPolicy.UPGRADE_POLICY_GUID ) ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; org.mockito.Mockito . verify ( inClusterUpgradeValidator , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . isVmReadyForUpgrade ( org.mockito.ArgumentMatchers . any () ) ; }
private void setVmWatchdogToParams ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.action.UpdateVmTemplateParameters updateVmParams ) { org.ovirt.engine.core.common.businessentities.VmWatchdogType wdModel = model . getWatchdogModel () . getSelectedItem () ; updateVmParams . setUpdateWatchdog ( true ) ; if ( wdModel != null ) { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = new org.ovirt.engine.core.common.businessentities.VmWatchdog () ; vmWatchdog . setAction ( model . getWatchdogAction () . getSelectedItem () ) ; vmWatchdog . setModel ( wdModel ) ; updateVmParams . setWatchdog ( vmWatchdog ) ; } }
@ java.lang.Override protected void loadPayload () { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > disks = vmDeviceDao . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.RunVmOnceCommand . getParameters () . getVmId () , VmDeviceGeneralType.DISK ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice disk : disks ) { if ( org.ovirt.engine.core.common.businessentities.VmPayload . isPayload ( disk . getSpecParams () ) ) { org.ovirt.engine.core.bll.RunVmOnceCommand . getVm () . setVmPayload ( new org.ovirt.engine.core.common.businessentities.VmPayload ( disk ) ) ; break; } } }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( STRING_CONSTANT . equals ( fieldName ) ) { return TimeConditionRelationAutoCompleter.INSTANCE ; } else if ( ( STRING_CONSTANT . equals ( fieldName ) ) || ( STRING_CONSTANT . equals ( fieldName ) ) ) { return NumericConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
public static void getNumberOfActiveVmsInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( NUMBER_CONSTANT ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNumberOfActiveVmsInVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
private org.ovirt.engine.api.model.API addSystemVersion ( org.ovirt.engine.api.model.API api ) { api . setProductInfo ( new org.ovirt.engine.api.model.ProductInfo () ) ; api . getProductInfo () . setName ( STRING_CONSTANT ) ; api . getProductInfo () . setVendor ( STRING_CONSTANT ) ; api . getProductInfo () . setVersion ( org.ovirt.engine.api.restapi.util.VersionHelper . parseVersion ( getConfigurationValueDefault ( java.lang.String . class , ConfigurationValues.VdcVersion ) ) ) ; return api ; }
@ org.junit.Test public void testValues () { java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , comp . getCompletion ( STRING_CONSTANT ) . length ) ; }
public java.lang.String getTimezoneIndexByKey ( java.lang.String key ) { for ( java.util.Map.Entry < java.lang.String , java.lang.Integer > timeZoneEntry : org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.timeZoneIndex . entrySet () ) { if ( getTimezoneKey ( timeZoneEntry . getKey () ) . equals ( key ) ) { return timeZoneEntry . getValue () . toString () ; } } org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log . error ( STRING_CONSTANT , key ) ; return key ; }
@ org.junit.Test public void addPosixNonEmptyVFSType () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection , null ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildRemoveDiskChildCommandParameters ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters ( cinderDisk . getId () ) ; removeDiskParams . setShouldBeLogged ( false ) ; removeDiskParams . setParentCommand ( org.ovirt.engine.core.bll.storage.RestoreFromCinderSnapshotCommand . getActionType () ) ; removeDiskParams . setParentParameters ( org.ovirt.engine.core.bll.storage.RestoreFromCinderSnapshotCommand . getParameters () ) ; return removeDiskParams ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.storage.BaseDisk generateNewEntity () { org.ovirt.engine.core.common.businessentities.storage.BaseDisk d = new org.ovirt.engine.core.common.businessentities.storage.BaseDisk () ; d . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; d . setWipeAfterDelete ( true ) ; d . setPropagateErrors ( PropagateErrors.Off ) ; d . setDiskAlias ( STRING_CONSTANT ) ; d . setSgio ( ScsiGenericIO.FILTERED ) ; return d ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ! ( o instanceof org.ovirt.engine.core.common.businessentities.VmIcon ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VmIcon vmIcon = ( ( org.ovirt.engine.core.common.businessentities.VmIcon ) ( o ) ) ; return ( java.util.Objects . equals ( id , vmIcon.id ) ) && ( java.util.Objects . equals ( dataUrl , vmIcon.dataUrl ) ) ; }
private void updateVfsConfigWithNumOfVfsData ( org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig hostNicVfsConfig , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > deviceList ) { if ( nic == null ) { nic = getNicById ( hostNicVfsConfig . getNicId () ) ; } org.ovirt.engine.core.common.businessentities.HostDevice pciDevice = getPciDeviceByNic ( nic , deviceList ) ; hostNicVfsConfig . setMaxNumOfVfs ( getMaxNumOfVfs ( pciDevice ) ) ; hostNicVfsConfig . setNumOfVfs ( getNumOfVfs ( pciDevice , deviceList ) ) ; }
@ org.junit.Test public void testCompleteWhenUnsetIdAndName ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleter.NicNameAndNicIdAccessors withoutNameOrIdSet = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleter.NicNameAndNicIdAccessors . class ) ; completer . complete ( withoutNameOrIdSet ) ; org.mockito.Mockito . verify ( withoutNameOrIdSet , org.mockito.Mockito . never () ) . setName ( org.mockito.ArgumentMatchers . anyString () ) ; org.mockito.Mockito . verify ( withoutNameOrIdSet , org.mockito.Mockito . never () ) . setId ( org.mockito.ArgumentMatchers . any () ) ; }
private void removeVmStatlessImages () { runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.IdParameters ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getId () ) , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContexForTasks ( org.ovirt.engine.core.bll.RunVmCommand . getExecutionContext () , org.ovirt.engine.core.bll.RunVmCommand . getLock () ) ) ; org.ovirt.engine.core.bll.RunVmCommand . setLock ( null ) ; org.ovirt.engine.core.bll.RunVmCommand . setSucceeded ( true ) ; }
private void movePoolToProblematicInDB ( org.ovirt.engine.core.common.businessentities.storage_pool storagePool ) { org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . getEventListener () . storagePoolStatusChange ( storagePool . getId () , StoragePoolStatus.Problematic , AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC , VdcBllErrors.ENGINE ) ; storagePool . setspm_vds_id ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStoragePoolDao () . update ( storagePool ) ; }
public static boolean urandomRandomUpdateRequired ( org.ovirt.engine.core.compat.Version oldVersion , org.ovirt.engine.core.compat.Version newVersion ) { if ( java.util.Objects . equals ( oldVersion , newVersion ) ) { return false ; } if ( ( oldVersion == null ) || ( newVersion == null ) ) { return false ; } return ( ( newVersion . greaterOrEquals ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) && ( oldVersion . less ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) ) || ( ( oldVersion . greaterOrEquals ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) && ( newVersion . less ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > filteredClusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterByArchitecture ( clusters , selectedTemplate . getClusterArch () ) ; getModel () . setDataCentersAndClusters ( getModel () , dataCenters , filteredClusters , selectedTemplate . getClusterId () ) ; initCdImage () ; }
@ org.junit.Test public void cleanOrphanTasksWhenNoVolume () { org.mockito.Mockito . doReturn ( java.util.Collections . singletonList ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.TASK_GUIDS [ NUMBER_CONSTANT ] ) ) . when ( provider ) . getMonitoredTaskIDsInDB () ; org.mockito.Mockito . doReturn ( getSteps ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.TASK_GUIDS [ NUMBER_CONSTANT ] ) ) . when ( stepDao ) . getStepsByExternalId ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.TASK_GUIDS [ NUMBER_CONSTANT ] ) ; tasksSyncJob . updateGlusterAsyncTasks () ; org.mockito.Mockito . verify ( taskUtils , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . endStepJob ( org.mockito.ArgumentMatchers . any () ) ; }
protected boolean setAndValidateDiskProfiles () { java.util.Map < org.ovirt.engine.core.common.businessentities.storage.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap <> () ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getParameters () . getParametersList () ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageByImageId ( parameters . getImageId () ) ; map . put ( diskImage , diskImage . getStorageIds () . get ( NUMBER_CONSTANT ) ) ; } return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper . setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getStoragePool () . getCompatibilityVersion () , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand . getCurrentUser () ) ) ; }
protected static int getNumOfPrestartedVmsInPool ( org.ovirt.engine.core.compat.Guid poolId , java.util.ArrayList < java.lang.String > messages ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsInPool = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmDao () . getAllForVmPool ( poolId ) ; int numOfPrestartedVmsInPool = NUMBER_CONSTANT ; if ( vmsInPool != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vmsInPool ) { if ( ( vm . isStartingOrUp () ) && ( org.ovirt.engine.core.bll.VmPoolCommandBase . canAttachPrestartedVmToUser ( vm . getId () , messages ) ) ) { ++ numOfPrestartedVmsInPool ; } } } return numOfPrestartedVmsInPool ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAllStorageDomains , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , getStorageDomains () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetImagesList , org.ovirt.engine.core.common.queries.GetImagesListParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getImages () , failure ) ; }
private void setUpMocksForUpdate ( boolean hookFound , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { setupMocks ( hookFound , hook ) ; org.mockito.Mockito . when ( vdsDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( getServer ( org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID , STRING_CONSTANT , org.ovirt.engine.core.bll.gluster.CLUSTER_ID , status ) ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllJobs , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , setUpJobs () , failure ) ; control . replay () ; }
@ org.junit.Test public void testFetchGlobalQuotaUsageForGlobalVdsGroup ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaVdsGroup > quotaVdsGroupList = dao . getQuotaVdsGroupByVdsGroupGuid ( null , FixturesTool.QUOTA_GENERAL ) ; org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaVdsGroup = quotaVdsGroupList . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( true , ( ( quotaVdsGroupList . size () ) == NUMBER_CONSTANT ) ) ; org.junit.Assert . assertNotNull ( quotaVdsGroup ) ; org.junit.Assert . assertEquals ( true , ( ( quotaVdsGroup . getMemSizeMBUsage () ) > NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( java.lang.Integer . valueOf ( NUMBER_CONSTANT ) , quotaVdsGroup . getVirtualCpu () ) ; }
@ org.junit.Test public void testSave () { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity newHook = getGlusterHook () ; newHook . setId ( FixturesTool.NEW_HOOK_ID ) ; dao . save ( newHook ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = dao . getById ( newHook . getId () ) ; org.junit.Assert . assertEquals ( newHook , hook ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getMigratableVmsRunningOnVds ( final org.ovirt.engine.core.dao.VmDao vmDao , final org.ovirt.engine.core.compat.Guid hostId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsFromDB = vmDao . getAllRunningForVds ( hostId ) ; return org.ovirt.engine.core.utils.linq.LinqUtils . filter ( vmsFromDB , new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.VM > () { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.VM v ) { return ( v . getMigrationSupport () ) == ( org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE ) ; } } ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateAttachStorageDomain () { org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator spValidator = new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator ( getStoragePool () ) ; org.ovirt.engine.core.bll.ValidationResult result ; result = spValidator . isAnyDomainInProcess () ; if ( ! ( result . isValid () ) ) { return result ; } result = spValidator . checkStoragePoolNotInStatus ( StoragePoolStatus.Up ) ; if ( ! ( result . isValid () ) ) { return result ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ org.junit.Test public void findNoneOfActiveVmsUsingNetworks () { mockDaos ( true ) ; java.util.List < java.lang.String > vmNames = vmInterfaceManager . findActiveVmsUsingNetworks ( org.ovirt.engine.core.compat.Guid . newGuid () , java.util.Collections . singletonList ( ( ( NETWORK_NAME ) + STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( vmNames . isEmpty () ) ; }
@ org.junit.Test public void mixedClusterServicesSupported () { mockConfigRule . mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , true ) ; org.mockito.Mockito . when ( cluster . supportsGlusterService () ) . thenReturn ( true ) ; org.mockito.Mockito . when ( cluster . supportsVirtService () ) . thenReturn ( true ) ; org.junit.Assert . assertThat ( validator . mixedClusterServicesSupported () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override public void executeCommand () { super . executeCommand () ; if ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . getSucceeded () ) { if ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . isImagesAlreadyOnTarget () ) { org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . getUnregisteredOVFDataDao () . removeEntity ( ovfEntityData . getEntityId () , null ) ; } else if ( ! ( vmDisksToAttach . isEmpty () ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( this , attemptToAttachDisksToImportedVm ( vmDisksToAttach ) ) ; } } setActionReturnValue ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand . getVm () . getId () ) ; }
@ java.lang.Override protected void onExportChanged () { if ( ( ( java.lang.Boolean ) ( getExport () . getEntity () ) ) ) { getHasVLanTag () . setIsChangable ( false ) ; getVLanTag () . setIsChangable ( false ) ; getIsVmNetwork () . setIsChangable ( false ) ; getHasMtu () . setIsChangable ( false ) ; getMtu () . setIsChangable ( false ) ; } super . onExportChanged () ; }
private void verifyServiceOnServer2 ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service ) { org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE2_ID , service . getServiceId () ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE2_NAME , service . getServiceName () ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE2_TYPE , service . getServiceType () ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.PID_2 , service . getPid () ) ; org.junit.Assert . assertEquals ( GlusterServiceStatus.STOPPED , service . getStatus () ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.VDS_NAME2 , service . getHostName () ) ; }
private void initStorageDomain () { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setId ( storageDomainId ) ; storageDomain . setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito . when ( storageDomainDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito . when ( storageDomainDao . getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; }
@ java.lang.Override public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { getView () . spiceSelected ( event . getValue () ) ; getView () . setWanOptionsVisible ( ( ( wanOptionsAvailable ) && ( event . getValue () ) ) ) ; getView () . rdpSelected ( ( ! ( event . getValue () ) ) ) ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel object ) { driver . edit ( object ) ; object . getLatch () . setIsAvailable ( true ) ; object . getItemsChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateDescription ( object ) ; } } ) ; }
public void getNetworkLabelsByDataCenterId ( org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.ui.frontend.AsyncQuery query ) { query.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.util.SortedSet < java.lang.String > > () { @ java.lang.Override public java.util.SortedSet < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.SortedSet < java.lang.String > sortedSet = new java.util.TreeSet ( new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ) ; sortedSet . addAll ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; return sortedSet ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNetworkLabelsByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , query ) ; }
org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties getVmwareVmProviderProperties ( org.ovirt.engine.core.compat.Guid dataCenterId ) { return new org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties ( getvCenter () . getEntity () , getEsx () . getEntity () , getVmwareDatacenter () . getEntity () , getVerifySSL () . getEntity () , dataCenterId , ( ( getProxyHost () . getSelectedItem () ) != null ? getProxyHost () . getSelectedItem () . getId () : null ) ) ; }
@ java.lang.Override protected void executeQueryCommand () { java.lang.String password = org.ovirt.engine.core.aaa.SsoUtils . getPassword ( sessionDataContainer . getSsoAccessToken ( org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery . getParameters () . getSessionId () ) ) ; org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery . getQueryReturnValue () . setReturnValue ( ( password != null ) ) ; org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery . getQueryReturnValue () . setSucceeded ( true ) ; }
private void plugToExternalNetwork () { java.util.Map < java.lang.String , java.lang.String > runtimeProperties = getProviderProxy () . allocate ( getNetwork () , vnicProfile , org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand . getParameters () . getNic () , org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand . getVds () , false ) ; if ( runtimeProperties != null ) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand . getVm () . getRuntimeDeviceCustomProperties () . put ( vmDevice . getId () , runtimeProperties ) ; } }
private void handleLogout ( java.lang.String accessToken , javax.servlet.http.HttpServletResponse response ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = backend . runInternalAction ( VdcActionType.TerminateSessionsForToken , new org.ovirt.engine.core.common.action.TerminateSessionsForTokenParameters ( accessToken ) ) ; if ( returnValue . getSucceeded () ) { response . setStatus ( java.net.HttpURLConnection.HTTP_OK ) ; org.ovirt.engine.core.services.SsoCallbackServlet.log . debug ( STRING_CONSTANT , accessToken ) ; } else { response . setStatus ( java.net.HttpURLConnection.HTTP_INTERNAL_ERROR ) ; org.ovirt.engine.core.services.SsoCallbackServlet.log . debug ( STRING_CONSTANT , accessToken ) ; } }
@ org.junit.Test public void isVirtioScsiEnabledDefaultedToTrue () { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = setupCanAddVmTests ( NUMBER_CONSTANT ) ; org.mockito.Mockito . doReturn ( createVdsGroup () ) . when ( cmd ) . getVdsGroup () ; org.mockito.Mockito . when ( osRepository . getDiskInterfaces ( org.mockito.Matchers . any ( java.lang.Integer . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Version . class ) ) ) . thenReturn ( new java.util.ArrayList <> ( java.util.Collections . singletonList ( STRING_CONSTANT ) ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , cmd . isVirtioScsiEnabled () ) ; }
@ java.lang.Override public void onAcccept ( final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client ) { client . addEventListener ( new org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener () { @ java.lang.Override public void onMessageReceived ( byte [] message ) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.MessageHandler handler = new org.ovirt.vdsmfake.rpc.json.JsonRpcServer.MessageHandler ( client , message ) ; service . submit ( handler ) ; } } ) ; }
@ org.junit.runners.Parameterized.Parameters public static java.lang.Object [] [] namesParams () { return new java.lang.Object [] [] { new java.lang.Object [] { org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.compat.Guid . newGuid () , false } , new java.lang.Object [] { org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.compat.Guid . newGuid () , true } } ; }
@ org.junit.Test public void testGetUserInfoObject () { org.codehaus.jackson.node.ObjectNode result = testServlet . getUserInfoObject ( mockUser , STRING_CONSTANT ) ; org.junit.Assert . assertNotNull ( result . get ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , result . get ( STRING_CONSTANT ) . asText () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , result . get ( STRING_CONSTANT ) . asText () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , result . get ( STRING_CONSTANT ) . asText () ) ; }
public void modifyPool ( org.ovirt.engine.core.common.businessentities.MacPool macPool ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource () ) { if ( ! ( macPools . containsKey ( macPool . getId () ) ) ) { throw new java.lang.IllegalStateException ( org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.INEXISTENT_POOL_EXCEPTION_MESSAGE ) ; } removeWithoutLocking ( macPool . getId () ) ; initializeMacPool ( macPool ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkLabelsByHostNicId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostNicLabelsResourceTest.nicId } , getEntityList () , failure ) ; }
public java.lang.String createSnapshot ( final org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { return execute ( new java.util.concurrent.Callable < java.lang.String > () { @ java.lang.Override public java.lang.String call () { com.woorea.openstack.cinder.model.SnapshotForCreate snapshotForCreate = new com.woorea.openstack.cinder.model.SnapshotForCreate () ; snapshotForCreate . setVolumeId ( cinderDisk . getId () . toString () ) ; return proxy . createSnapshot ( snapshotForCreate ) ; } } ) ; }
private void updateVmStaticTable () { for ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic : vmStaticDao . getAllWithoutIcon () ) { setIconsByOs ( vmStatic ) ; vmStaticDao . update ( vmStatic ) ; } for ( org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplateDao . getAllWithoutIcon () ) { setIconsByOs ( vmTemplate ) ; vmTemplateDao . update ( vmTemplate ) ; } }
public void endTaskStep ( org.ovirt.engine.core.compat.Guid stepId , org.ovirt.engine.core.common.job.JobExecutionStatus exitStatus ) { try { if ( stepId != null ) { org.ovirt.engine.core.common.job.Step step = jobRepository . getStep ( stepId , false ) ; if ( step != null ) { step . markStepEnded ( exitStatus ) ; jobRepository . updateStep ( step ) ; } } } catch ( java.lang.Exception e ) { log . error ( STRING_CONSTANT , stepId , exitStatus , e . getMessage () ) ; log . debug ( STRING_CONSTANT , e ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public void createCommand () { param = new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter ( getExistingVdsGroupId () , getNetwork () ) ; command = new org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand < org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter > ( param ) { @ java.lang.Override public org.ovirt.engine.core.dao.VdsGroupDAO getVdsGroupDAO () { return vdsGroupDAO ; } @ java.lang.Override protected org.ovirt.engine.core.dao.network.NetworkClusterDao getNetworkClusterDAO () { return networkClusterDAO ; } @ java.lang.Override protected org.ovirt.engine.core.dao.network.NetworkDao getNetworkDAO () { return networkDao ; } } ; }
private void testStatusMapping ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus backendStatus , org.ovirt.engine.api.model.GlusterState restStatus ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity () ; brick . setStatus ( backendStatus ) ; org.ovirt.engine.api.model.GlusterBrick restVolume = org.ovirt.engine.api.restapi.types.GlusterBrickMapper . map ( brick , null ) ; assertEquals ( restVolume . getStatus () . getState () , restStatus . value () ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > upHosts = filterUpHosts ( hosts ) ; proxyHosts . setItems ( addAnyHostInCluster ( upHosts ) ) ; xenProxyHosts . setItems ( addAnyHostInCluster ( upHosts ) ) ; kvmProxyHosts . setItems ( addAnyHostInCluster ( upHosts ) ) ; this . hosts . setItems ( upHosts ) ; stopProgress () ; }
private org.ovirt.engine.core.common.businessentities.Snapshot getSnapshot ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk lastCinderVolume ) { org.ovirt.engine.core.compat.Guid vmSnapshotId = lastCinderVolume . getVmSnapshotId () ; org.ovirt.engine.core.common.businessentities.Snapshot updated = null ; if ( ( vmSnapshotId != null ) && ( ! ( Guid.Empty . equals ( vmSnapshotId ) ) ) ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommand . getSnapshotDao () . get ( vmSnapshotId ) ; if ( snapshot != null ) { updated = org.ovirt.engine.core.bll.ImagesHandler . prepareSnapshotConfigWithoutImageSingleImage ( snapshot , lastCinderVolume . getImageId () ) ; } } return updated ; }
public void init ( org.ovirt.engine.core.common.businessentities.StorageDomain sourceStorageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > repoImages ) { this . sourceStorageDomain = sourceStorageDomain ; setRepoImages ( repoImages ) ; updateDataCenters () ; org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > importAsTemplateListener = new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateClusterEnabled () ; } } ; getImportAsTemplate () . getEntityChangedEvent () . addListener ( importAsTemplateListener ) ; }
protected void writeManagedDeviceInfo ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.compat.Guid deviceId ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = vmBase . getManagedDeviceMap () . get ( deviceId ) ; if ( ( ( deviceId != null ) && ( vmDevice != null ) ) && ( ( vmDevice . getAddress () ) != null ) ) { writeVmDeviceInfo ( vmDevice ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( ( ev . matchesDefinition ( HasEntity.entityChangedEventDefinition ) ) && ( sender == ( getPath () ) ) ) { getPathChangedEvent () . raise ( this , EventArgs.EMPTY ) ; } }
@ org.junit.Test public void testFileLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.File file = new org.ovirt.engine.api.model.File () ; file . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.FILE_ID ) ; file . setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain () ) ; file . getStorageDomain () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( file ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.FILE_HREF , file . getHref () ) ; }
@ org.junit.Test public void nullifiedSnapshotOnUpdateDiskToShareable () { org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters () ; parameters . setDiskInfo ( createShareableDisk ( VolumeFormat.RAW ) ) ; org.ovirt.engine.core.common.businessentities.DiskImage oldDisk = createDiskImage () ; oldDisk . setVmSnapshotId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( oldDisk ) ; initializeCommand ( parameters ) ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; command . executeVmCommand () ; org.junit.Assert . assertTrue ( ( ( oldDisk . getVmSnapshotId () ) == null ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > () { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.VmNetworkInterface lookupEntity ( org.ovirt.engine.core.compat.Guid guid ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection . lookupEntity ( guid ) ; } } ; org.ovirt.engine.api.restapi.resource.NicStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.NicStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.NIC , org.ovirt.engine.core.common.businessentities.VmNetworkInterface > ( entityType , guid , query ) ) ; }
@ org.junit.Test public void testChanges () { org.ovirt.engine.core.utils.Jedi jedi1 = new org.ovirt.engine.core.utils.Jedi () ; org.ovirt.engine.core.utils.Jedi jedi2 = new org.ovirt.engine.core.utils.Jedi () ; jedi2.saberColor = STRING_CONSTANT ; java.util.List < java.lang.String > changes = org.ovirt.engine.core.utils.ObjectIdentityChecker . getChangedFields ( jedi1 , jedi2 ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , changes . size () ) ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; return getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; }
@ java.lang.Override protected void updateDetailsAvailability () { super . updateDetailsAvailability () ; org.ovirt.engine.core.common.businessentities.Provider provider = getSelectedItem () ; if ( provider != null ) { providerNetworkListModel . setIsAvailable ( provider . getType () . getProvidedTypes () . contains ( VdcObjectType.Network ) ) ; } }
private java.util.Map getDynamicValues ( org.ovirt.vdsmfake.domain.VM vm ) { java.util.Map values = map () ; values . put ( STRING_CONSTANT , ( STRING_CONSTANT + ( getRandomNumber ( vm , STRING_CONSTANT , NUMBER_CONSTANT ) ) ) ) ; values . put ( STRING_CONSTANT , ( STRING_CONSTANT + ( getRandomNumber ( vm , STRING_CONSTANT , NUMBER_CONSTANT ) ) ) ) ; values . put ( STRING_CONSTANT , getRandomNumber ( vm , STRING_CONSTANT , NUMBER_CONSTANT ) ) ; return values ; }
public static void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
@ org.junit.Test public void storagePoolIdWithStoragePool () { b . setStoragePoolId ( null ) ; final org.ovirt.engine.core.common.businessentities.StoragePool p = new org.ovirt.engine.core.common.businessentities.StoragePool () ; p . setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setStoragePool ( p ) ; final org.ovirt.engine.core.compat.Guid n = b . getStoragePoolId () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , n ) ; }
@ org.junit.Test public void clusterWithVirtGlusterServicesNotAllowed () { createCommandWithVirtGlusterEnabled () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; org.mockito.Mockito . when ( clusterDao . getByName ( org.mockito.Matchers . anyString () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; mcr . mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; cpuExists () ; allQueriesForVms () ; validateFailedWithReason ( EngineMessage.CLUSTER_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ; }
@ java.lang.Override public void init ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > disksImages ) { setDiskImages ( disksImages ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel copyDiskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; copyDiskModel . onInitAllDisks ( disks ) ; copyDiskModel . onInitDisks () ; } } ) ) ; }
public static void removeDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage , org.ovirt.engine.core.compat.Guid vmId ) { try { org.ovirt.engine.core.bll.ImagesHandler . removeDiskFromVm ( vmId , diskImage . getId () ) ; org.ovirt.engine.core.bll.ImagesHandler . removeImage ( diskImage ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log . error ( STRING_CONSTANT , ex ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.DB , ex ) ; } }
@ java.lang.Override protected void cretaeVirtIODisk () { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage () ; disk . setImageId ( diskImageGuid ) ; disk . setDiskInterface ( DiskInterface.VirtIO ) ; disk . setactive ( true ) ; org.mockito.Mockito . doReturn ( diskDao ) . when ( command ) . getDiskDao () ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( disk ) ; mockVmDevice ( true ) ; }
@ org.junit.Test public void nGuidGuidCtorNullGuid () { b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , null ) ; final org.ovirt.engine.core.compat.Guid g = b . getVdsId () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; final org.ovirt.engine.core.compat.Guid gu = b . getVmId () ; org.junit.Assert . assertEquals ( Guid.Empty , gu ) ; }
@ org.junit.Test public void testGetBrickByServerIdAndDirectory () { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = dao . getBrickByServerIdAndDirectory ( FixturesTool.GLUSTER_BRICK_SERVER1 , FixturesTool.GLUSTER_BRICK_DIR1 ) ; org.junit.Assert . assertNotNull ( brick ) ; org.junit.Assert . assertEquals ( FixturesTool.GLUSTER_BRICK_SERVER1 , brick . getServerId () ) ; org.junit.Assert . assertEquals ( FixturesTool.GLUSTER_BRICK_DIR1 , brick . getBrickDirectory () ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
static org.ovirt.engine.api.model.Disk getModel ( int index ) { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk () ; model . setFormat ( DiskFormat.COW . toString () ) ; model . setInterface ( DiskInterface.VirtIO . toString () ) ; model . setSparse ( true ) ; model . setBootable ( false ) ; model . setShareable ( false ) ; model . setPropagateErrors ( true ) ; return model ; }
private void updateSnapshotsFromExport () { if ( ( getVm () . getSnapshots () ) == null ) { return; } for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getVm () . getSnapshots () ) { if ( getSnapshotDao () . exists ( getVm () . getId () , snapshot . getId () ) ) { getSnapshotDao () . update ( snapshot ) ; } else { getSnapshotDao () . save ( snapshot ) ; } } }
@ org.junit.Test public void testRefreshStatusNoSessions () { org.mockito.Mockito . doReturn ( getSessionDetailsVDSReturnVal ( false ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionStatus ) , org.mockito.ArgumentMatchers . any () ) ; syncJob . refreshGeoRepSessionStatus () ; org.mockito.Mockito . verify ( geoRepDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . saveOrUpdateDetailsInBatch ( org.mockito.ArgumentMatchers . anyList () ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetImagesList , org.ovirt.engine.core.common.queries.GetImagesListParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All } , setUpFiles () , failure ) ; }
@ org.junit.Test public void canDoActionPreallocatedSpaceCheckSucceeds () { final int availableSize = NUMBER_CONSTANT ; final int usedSize = NUMBER_CONSTANT ; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( sdid , VolumeType.Preallocated ) ; mockVm () ; org.ovirt.engine.core.common.businessentities.storage_domains domains = mockStorageDomain ( sdid , availableSize , usedSize ) ; mockStoragePoolIsoMap () ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; }
protected boolean validate () { getUserName () . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () } ) ; getProfile () . validateSelectedItem ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () } ) ; return ( getUserName () . getIsValid () ) && ( getProfile () . getIsValid () ) ; }
@ java.lang.Override protected void createNumOfDesktopEditors () { incraseNumOfVmsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.IntegerEntityModelTextBoxOnlyEditor () ; numOfVmsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelTextBoxEditor ( new org.ovirt.engine.ui.common.widget.editor.generic.ToStringEntityModelRenderer < java.lang.Integer > () , new com.google.gwt.text.shared.Parser < java.lang.Integer > () { @ java.lang.Override public java.lang.Integer parse ( java.lang.CharSequence text ) throws java.text.ParseException { return incraseNumOfVmsEditor . asEditor () . getValue () ; } } ) ; }
private void executeFenceVdsManuallyAction ( final org.ovirt.engine.core.compat.Guid vdsId , java.lang.String sessionId ) { org.ovirt.engine.core.common.action.FenceVdsManualyParameters fenceVdsManuallyParams = new org.ovirt.engine.core.common.action.FenceVdsManualyParameters ( false ) ; fenceVdsManuallyParams . setStoragePoolId ( org.ovirt.engine.core.bll.RestartVdsCommand . getVds () . getStoragePoolId () ) ; fenceVdsManuallyParams . setVdsId ( vdsId ) ; fenceVdsManuallyParams . setSessionId ( sessionId ) ; fenceVdsManuallyParams . setParentCommand ( VdcActionType.RestartVds ) ; runInternalAction ( VdcActionType.FenceVdsManualy , fenceVdsManuallyParams , getContext () ) ; }
@ java.lang.Override protected void executeVdsIdCommand () { org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.log . info ( STRING_CONSTANT , org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand . getVdsId () ) ; org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVdsDao () . get ( org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand . getVdsId () ) ; org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.log . info ( STRING_CONSTANT , org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand . getVdsId () ) ; resourceManager . addVds ( vds , false , true ) ; }
protected boolean updateVnicForBackwardCompatibility () { if ( ! ( validate ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper . updateNicForBackwardCompatibility ( org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getParameters () . getInterface () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getParameters () . getNetworkName () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getParameters () . isPortMirroring () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getVmTemplate () , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase . getCurrentUser () ) ) ) ) { return false ; } return true ; }
public java.lang.Boolean getNicHotplugSupport ( java.lang.Integer osId , org.ovirt.engine.core.compat.Version version ) { org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > pair = new org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > ( osId , version ) ; if ( getNicHotplugSupportMap () . containsKey ( pair ) ) { return getNicHotplugSupportMap () . get ( pair ) ; } return false ; }
@ java.lang.Override public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue ; returnValue = runVdsCommand ( VDSCommandType.UpdateGlusterHook , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters ( serverId , entity . getGlusterCommand () , entity . getStage () , entity . getName () , hookContent , hookChecksum ) ) ; return new org.ovirt.engine.core.common.utils.Pair ( serverId , returnValue ) ; }
@ org.junit.Test public void testVmsWithNoIsoAttached () { mockDomain () ; org.mockito.Mockito . doReturn ( domain ) . when ( cmd ) . getStorageDomain () ; org.mockito.Mockito . when ( vmStaticDao . getAllByStoragePoolId ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . emptyList () ) ; org.junit.Assert . assertTrue ( cmd . isRunningVmsWithIsoAttached () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . isEmpty () ) ; }
public static < T > com.google.gwt.core.client.JsArray < org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject > arrayFrom ( java.util.List < T > businessEntityList ) { com.google.gwt.core.client.JsArray < org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject > result = com.google.gwt.core.client.JavaScriptObject . createArray () . cast () ; for ( T businessEntity : businessEntityList ) { result . push ( org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject . from ( businessEntity ) ) ; } return result ; }
public static java.lang.String removeBrackets ( java.lang.String txt ) { if ( ( ( ( txt != null ) && ( ( txt . length () ) >= NUMBER_CONSTANT ) ) && ( txt . startsWith ( STRING_CONSTANT ) ) ) && ( txt . endsWith ( STRING_CONSTANT ) ) ) { return txt . substring ( NUMBER_CONSTANT , ( ( txt . length () ) - NUMBER_CONSTANT ) ) ; } return txt ; }
@ org.junit.Test public void testObjectsEqual () { java.lang.Integer ten = java.lang.Integer . valueOf ( NUMBER_CONSTANT ) ; junit.framework.Assert . assertFalse ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( ten , java.lang.Integer . valueOf ( NUMBER_CONSTANT ) ) ) ; junit.framework.Assert . assertTrue ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( ten , java.lang.Integer . valueOf ( NUMBER_CONSTANT ) ) ) ; junit.framework.Assert . assertTrue ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( null , null ) ) ; junit.framework.Assert . assertFalse ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( ten , null ) ) ; junit.framework.Assert . assertFalse ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( null , ten ) ) ; }
private void createCommand () { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase () ; params . setStorageDomainId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; params . setStoragePoolId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.domain.ActivateStorageDomainCommand ( params , null ) ) ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao () ; org.mockito.Mockito . doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( vdsDao ) . when ( cmd ) . getVdsDao () ; }
@ java.lang.Override public void onSuccess ( java.lang.Boolean returnValue ) { if ( returnValue ) { postCloneVmNameUnique ( targetModel , makeCreatorExplicitOwner ) ; } else { stopProgress () ; getCloneName () . getInvalidityReasons () . add ( uiConstants . nameMustBeUniqueInvalidReason () ) ; getCloneName () . setIsValid ( false ) ; } }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getLoginCommand () ) ) { login () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( volumeDao ) . when ( cmd ) . getGlusterVolumeDao () ; org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getGlusterVolume ( stoppedVolumeId ) ) . when ( volumeDao ) . getById ( stoppedVolumeId ) ; org.mockito.Mockito . doReturn ( getGlusterVolume ( startedVolumeId ) ) . when ( volumeDao ) . getById ( startedVolumeId ) ; }
public static void initOsArchitecture () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osArchitectures = ( ( java.util.HashMap < java.lang.Integer , org.ovirt.engine.core.common.businessentities.ArchitectureType > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetOsArchitectures ) , callback ) ; }
private boolean canRunOnDestinationVds ( java.util.List < java.lang.String > messages , boolean isMigrate ) { boolean returnValue = false ; if ( ( getDestinationVdsId () ) != null ) { org.ovirt.engine.core.common.businessentities.VDS target_vds = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVdsDao () . get ( getDestinationVdsId () ) ; org.ovirt.engine.core.bll.VdsSelector.log . infoFormat ( STRING_CONSTANT , getDestinationVdsId () , target_vds . getName () , target_vds . getHostName () ) ; returnValue = canFindVdsToRun ( messages , isMigrate , java.util.Arrays . asList ( target_vds ) ) ; } return returnValue ; }
protected void setImageStatus ( org.ovirt.engine.core.common.businessentities.ImageStatus imageStatus , org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { if ( ( diskImage != null ) && ( ( diskImage . getImageStatus () ) != imageStatus ) ) { diskImage . setImageStatus ( imageStatus ) ; org.ovirt.engine.core.bll.ImagesHandler . updateImageStatus ( diskImage . getImage () . getId () , imageStatus ) ; } }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.quota.QuotaModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { java.lang.String lastExecutedCommandName = lastExecutedCommand . getName () ; if ( STRING_CONSTANT . equals ( lastExecutedCommandName ) ) { return clusterPopupProvider . get () ; } else if ( STRING_CONSTANT . equals ( lastExecutedCommandName ) ) { return storagePopupProvider . get () ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.DbGroup mapRow ( final java.sql.ResultSet rs , final int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.DbGroup entity = new org.ovirt.engine.core.common.businessentities.DbGroup () ; entity . setId ( getGuidDefaultEmpty ( rs , STRING_CONSTANT ) ) ; entity . setName ( rs . getString ( STRING_CONSTANT ) ) ; entity . setActive ( rs . getBoolean ( STRING_CONSTANT ) ) ; entity . setDomain ( rs . getString ( STRING_CONSTANT ) ) ; entity . setDistinguishedName ( rs . getString ( STRING_CONSTANT ) ) ; entity . setExternalId ( rs . getString ( STRING_CONSTANT ) ) ; return entity ; }
@ org.junit.Test public void testGetAllGlusterVolumesSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery . executeQueryCommand () ; org.junit.Assert . assertEquals ( glusterVolumeList , searchQuery . getQueryReturnValue () . getReturnValue () ) ; }
void addDiskList ( org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model ) { diskListPanel . clear () ; int diskIndex = NUMBER_CONSTANT ; for ( final org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : model . getDisks () ) { org.ovirt.engine.ui.common.widget.uicommon.storage.DisksAllocationItemView disksAllocationItemView = new org.ovirt.engine.ui.common.widget.uicommon.storage.DisksAllocationItemView () ; disksAllocationItemView . edit ( diskModel ) ; disksAllocationItemView . updateStyles ( showQuota ) ; disksAllocationItemView . setIsAliasChangeable ( model . getIsAliasChangable () ) ; disksAllocationItemView . setElementId ( org.ovirt.engine.ui.common.utils.ElementIdUtils . createElementId ( elementId , ( STRING_CONSTANT + ( diskIndex ++ ) ) ) ) ; diskListPanel . add ( disksAllocationItemView ) ; } }
private org.apache.http.conn.ClientConnectionManager createPoolingClientConnectionManager ( java.lang.String url , int port ) { org.apache.http.conn.scheme.SchemeRegistry schemeRegistry = createSchemeRegistry ( url , port ) ; org.apache.http.impl.conn.PoolingClientConnectionManager cm = new org.apache.http.impl.conn.PoolingClientConnectionManager ( schemeRegistry ) ; cm . setMaxTotal ( org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS ) ; cm . setDefaultMaxPerRoute ( org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS_PER_ROUTE ) ; cm . setMaxPerRoute ( new org.apache.http.conn.routing.HttpRoute ( new org.apache.http.HttpHost ( getHost ( url ) , getPort ( url , port ) ) ) , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS_PER_HOST ) ; new org.ovirt.engine.sdk.web.IdleConnectionMonitorThread ( cm , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.WAIT_IDLE_CHECK_TTL , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.WAIT_IDLE_CLOSE_TTL ) . start () ; return cm ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.lang.StringBuilder configBuilder = new java.lang.StringBuilder ( ( ( java.lang.String ) ( returnValue . getReturnValue () ) ) ) ; writeOVirtSection ( configBuilder , getOptions () ) ; org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel . makeConsoleConfigRequest ( STRING_CONSTANT , STRING_CONSTANT , configBuilder . toString () ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getEditConsoleCommand () ) ) { editConsole () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { onEditConsoleSave () ; } else if ( Model.CANCEL_COMMAND . equals ( command . getName () ) ) { cancel () ; } }
@ java.lang.Override public void render ( com.google.gwt.cell.client.Cell.Context context , T object , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( showMask . showMask ( object ) ) { sb . appendHtmlConstant ( STRING_CONSTANT ) ; sb . append ( com.google.gwt.safehtml.shared.SafeHtmlUtils . fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype . create ( mask ) . getHTML () ) ) ; sb . appendHtmlConstant ( STRING_CONSTANT ) ; } super . render ( context , object , sb ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getStorageDomainDynamicDao () ; staticDao = dbFacade . getStorageDomainStaticDao () ; existingDynamic = dao . get ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.EXISTING_DOMAIN_ID ) ; newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic () ; newStaticDomain . setstorage ( STRING_CONSTANT ) ; newDynamicDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic () ; newDynamicDomain . setavailable_disk_size ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.USED_DISK_SIZE ) ; }
private void updateHaMaintenanceAvailability ( java.util.List items ) { if ( ( items == null ) || ( ( items . size () ) != NUMBER_CONSTANT ) ) { setHaMaintenanceAvailability ( false ) ; return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel . getSelectedItem () ; if ( ( vm == null ) || ( ! ( vm . isHostedEngine () ) ) ) { setHaMaintenanceAvailability ( false ) ; } else { setHaMaintenanceAvailability ( true ) ; } }
protected void analyze () { proceedDownVms () ; proceedWatchdogEvents () ; proceedBalloonCheck () ; proceedGuaranteedMemoryCheck () ; updateRepository () ; prepareGuestAgentNetworkDevicesForUpdate () ; updateLunDisks () ; updateVmJobs () ; analyzeExternalVms () ; analyzeHostedEngineVm () ; if ( ( vmDynamicToSave ) != null ) { vmsMonitoring . addVmDynamicToList ( vmDynamicToSave ) ; } if ( saveVmInterfaces ) { vmsMonitoring . addVmInterfaceStatisticsToList ( dbVm . getInterfaces () ) ; } }
@ org.junit.Test public void testLogMtuDiffs () { for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : org.ovirt.engine.core.vdsbroker.vdsbroker.VdsUpdateRunTimeInfoTest . getInterfaces () ) { updater . logMTUDifferences ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsUpdateRunTimeInfoTest . getClustersMap () , iface ) ; } junit.framework.Assert . assertEquals ( NUMBER_CONSTANT , mockAuditLogDao . getAll () . size () ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUpGetGraphicsExpectations ( NUMBER_CONSTANT ) ; setUpGetCertuficateExpectations () ; org.ovirt.engine.api.model.Vm response = resource . get () ; verifyModel ( response , NUMBER_CONSTANT ) ; verifyCertificate ( response ) ; }
public static java.util.List < java.lang.String > getValueFromMapRecord ( org.ovirt.engineextensions.aaa.ldap.MapProperties props , java.lang.String key ) { java.util.List < java.lang.String > ret = new java.util.ArrayList <> () ; for ( org.ovirt.engineextensions.aaa.ldap.MapProperties entry : props . getMap () . values () ) { java.lang.String v = entry . getString ( null , key ) ; if ( v != null ) { ret . add ( v ) ; } } return ret ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { return ( ( ( obj != null ) && ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ) && ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( getId () , ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ( obj ) ) . getId () ) ) ) && ( super . equals ( obj ) ) ; }
public boolean validate () { getSlaveVolumes () . validateSelectedItem ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation ( NUMBER_CONSTANT ) } ) ; getSlaveHosts () . validateSelectedItem ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation ( NUMBER_CONSTANT ) } ) ; return ( getSlaveVolumes () . getIsValid () ) && ( getSlaveHosts () . getIsValid () ) ; }
private void setUpGetEntityExpectations ( int times , boolean notFound ) throws java.lang.Exception { while ( ( times -- ) > NUMBER_CONSTANT ) { setUpGetEntityExpectations ( VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , ( notFound ? null : getEntity ( NUMBER_CONSTANT ) ) ) ; } }
private void initImportSources () { importSources . setItems ( java.util.Arrays . asList ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource . values () ) ) ; importSources . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { validateSource () ; clearVms () ; clearValidations () ; loadProviders () ; } } ) ; importSources . setSelectedItem ( ImportSource.EXPORT_DOMAIN ) ; }
@ org.junit.Test public void testNoDiskStatsDataForDisks () { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap <> () ; java.util.Map < java.lang.String , java.lang.Object > disk = new java.util.HashMap <> () ; disksStats . put ( STRING_CONSTANT , disk ) ; disksStats . put ( STRING_CONSTANT , disk ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . setDisksStats ( disksStats ) ; validateDisksStatsList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . getVds () , xml , true ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > idToIconMap = returnValue . getReturnValue () ; this . cache . putAll ( idToIconMap ) ; final java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > result = this . getIcons ( iconIds ) ; callback . onSuccess ( result ) ; }
@ org.junit.Test public void nGuidGuidCtorNull () { b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( null , null ) ; final org.ovirt.engine.core.compat.Guid g = b . getVdsId () ; org.junit.Assert . assertEquals ( Guid.Empty , g ) ; final org.ovirt.engine.core.compat.Guid gu = b . getVmId () ; org.junit.Assert . assertEquals ( Guid.Empty , gu ) ; }
@ java.lang.Override public java.lang.String getTooltip ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object . getEntity () ) ) . getDisk () ; if ( disk . isBoot () ) { return org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.constants . bootableDisk () ; } return null ; }
public void updateReportsAvailability () { if ( org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . isReportsEnabled () ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.VDSGroup > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper . getInstance () . getResourceSubActions ( STRING_CONSTANT , getModelProvider () ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions . size () ) > NUMBER_CONSTANT ) ) { getTable () . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabClusterView.constants . showReportCluster () , resourceSubActions ) ) ; } } }
@ java.lang.Override @ org.junit.Before public void setUpBefore ( ) throws java.lang.Exception { super . setUpBefore () ; baseIface = createBaseInterface ( null , null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanIface = createVlanInterface ( baseIface , networkName , qosA ) ; setTestIface ( vlanIface ) ; org.mockito.Mockito . when ( calculateBaseNic . getBaseNic ( vlanIface ) ) . thenReturn ( baseIface ) ; }
private void initImportClonedTemplate () { getParameters () . getVmTemplate () . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getParameters () . getVmTemplate () . getInterfaces () ) { iface . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; } }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan ( java.lang.String baseIfaceName , int vlanId , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid . newGuid () , ( ( baseIfaceName + STRING_CONSTANT ) + vlanId ) , false , null , baseIfaceName , vlanId , networkName , true , null , false , null ) ; }
public void getMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue () : NUMBER_CONSTANT ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar . setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { dataCenters . addAll ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) ; java.util.Collections . sort ( dataCenters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getExternalNetworkMap ( networkQuery , provider . getId () ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVdcOptionDao () ; existingOption = dao . getByNameAndVersion ( STRING_CONSTANT , STRING_CONSTANT ) ; newOption = new org.ovirt.engine.core.common.businessentities.VdcOption () ; newOption . setoption_name ( STRING_CONSTANT ) ; newOption . setoption_value ( STRING_CONSTANT ) ; newOption . setversion ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testNetworksOnNicMatchMtuWhenNoNetworksAreProvided ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > networksOnNics = java.util.Collections . singletonMap ( STRING_CONSTANT , java.util.Collections . emptyList () ) ; org.ovirt.engine.core.bll.network.host.NetworkMtuValidator networkMtuValidator = new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator ( new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( java.util.Collections . emptyList () ) ) ; org.junit.Assert . assertThat ( networkMtuValidator . validateMtu ( networksOnNics ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ org.junit.Test public void testInstall ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations () ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVds , org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { NAMES [ NUMBER_CONSTANT ] } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action () ; action . setRootPassword ( NAMES [ NUMBER_CONSTANT ] ) ; verifyActionResponse ( resource . install ( action ) ) ; }
protected org.ovirt.engine.ui.uicommonweb.validation.IValidation [] getClonedNameValidators () { final int maxClonedNameLength = getMaxClonedNameLength () ; return new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation ( maxClonedNameLength ) , new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation () { @ java.lang.Override protected java.lang.String composeMessage () { return org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getMessages () . nameMustConataionOnlyAlphanumericChars ( maxClonedNameLength ) ; } } , new org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.UniqueClonedNameValidator ( assignedVmNames ) } ; }
@ org.junit.Test public void testDedicatedHostNotExistOrNotSameCluster () { prepareVmToPassValidate () ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isDedicatedVdsExistOnSameCluster ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VmBase . class ) , org.mockito.Matchers . any ( java.util.ArrayList . class ) ) ; vmStatic . setDedicatedVmForVdsList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , command . validate () ) ; }
private void initComparators () { java.util.List < ? extends java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > > comparators = java.util.Arrays . asList ( new org.ovirt.engine.core.bll.memory.MemoryStorageHandlerTest.SmallestStorageDomainComparator ( validStorageDomain2 ) , new org.ovirt.engine.core.bll.memory.MemoryStorageHandlerTest.BiggestStorageDomainComparator ( validStorageDomain3 ) ) ; org.mockito.Mockito . doReturn ( comparators ) . when ( memoryStorageHandler ) . getStorageDomainComparators ( org.mockito.Matchers . anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage . class ) ) ; }
@ java.lang.Override protected java.util.Map < java.lang.String , java.lang.String > getExclusiveLocks () { if ( ( ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () . isBoot () ) && ( ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getVmId () ) != null ) ) && ( ! ( Guid.Empty . equals ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getVmId () ) ) ) ) { return java.util.Collections . singletonMap ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getVmId () . toString () , LockingGroup.VM_DISK_BOOT . name () ) ; } return null ; }
@ org.junit.Test public void vmNameNullVm () { b . setVmName ( null ) ; final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM () ; v . setName ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; b . setVm ( v ) ; final java.lang.String n = b . getVmName () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , n ) ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.GetVdsByVdsIdQuery . getDbFacade () . getVdsDao () . get ( org.ovirt.engine.core.bll.GetVdsByVdsIdQuery . getParameters () . getId () ) ; if ( vds != null ) { vds . setCpuName ( getCpuFlagsManagerHandler () . findMaxServerCpuByFlags ( vds . getCpuFlags () , vds . getVdsGroupCompatibilityVersion () ) ) ; } org.ovirt.engine.core.bll.GetVdsByVdsIdQuery . getQueryReturnValue () . setReturnValue ( vds ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; networkModel . getExternalProviders () . setItems ( providers ) ; networkModel . getExternalProviders () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrDefault ( providers ) ) ; networkModel . stopProgress () ; }
@ org.junit.Test public void testExecuteCommandByClusterIdForRestart () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_RESTART ) , null ) ) ; setUpMockUpForRestart () ; mockBackend ( true , null , GlusterServiceStatus.RUNNING ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( serverServiceDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_SERVICE_RESTARTED ) ; }
@ java.lang.Override public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , C value , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < C > valueUpdater ) { com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip ( value ) ; if ( tooltip == null ) { tooltip = getTooltip ( value , parent , event ) ; } org.ovirt.engine.ui.common.utils.ElementTooltipUtils . handleCellEvent ( event , parent , tooltip ) ; super . onBrowserEvent ( context , parent , value , event , valueUpdater ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue response ) { if ( response . getSucceeded () ) { model . applyData ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( response . getReturnValue () ) ) , false , prevSelected ) ; model . setGetLUNsFailure ( STRING_CONSTANT ) ; } else { model . setGetLUNsFailure ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . couldNotRetrieveLUNsLunsFailure () ) ; } }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareSharedStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { final org.ovirt.engine.core.common.businessentities.StorageDomain sharedDomain = createDataStorageDomain ( status , STRING_CONSTANT , SHARED_SD_ID ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . singletonList ( sharedDomain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; return sharedDomain ; }
public void getWANColorDepth ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth . fromInt ( ( ( java.lang.Integer ) ( source ) ) ) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth , getDefaultConfigurationVersion () ) , aQuery ) ; }
public static void getAllProviders ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > () ; } java.util.Collections . sort ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( source ) ) , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters () , aQuery ) ; }
private org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters ( disk ) ; parameters . setStorageDomainId ( storageDomainId ) ; parameters . setParentCommand ( enclosingCommand . getActionType () ) ; parameters . setParentParameters ( enclosingCommand . getParameters () ) ; parameters . setShouldBeLogged ( false ) ; return parameters ; }
@ java.lang.Override public void addExternallyManagedVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > externalVmList ) { for ( org.ovirt.engine.core.common.businessentities.VmStatic currVm : externalVmList ) { org.ovirt.engine.core.common.action.AddVmParameters params = new org.ovirt.engine.core.common.action.AddVmParameters ( currVm ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.AddVmFromScratch , params , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; if ( ! ( returnValue . getSucceeded () ) ) { org.ovirt.engine.core.bll.VdsEventListener.log . debugFormat ( STRING_CONSTANT , currVm . getName () ) ; } } }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( auditLogDao ) . when ( command ) . getAuditLogDao () ; org.mockito.Mockito . doReturn ( getEventWithOvirtOrigin () ) . when ( auditLogDao ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_2 ) ; org.mockito.Mockito . doReturn ( getEventWithExternalOrigin () ) . when ( auditLogDao ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object ) { driver . edit ( object ) ; updateMessages ( object ) ; object . getPropertyChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { updateMessages ( object ) ; } } ) ; }
@ java.lang.Override public int compare ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain2 ) { java.lang.Long numOfVmDisksInStorageDomain = numOfVmDisksInStorageDomains . getOrDefault ( storageDomain . getId () , NUMBER_CONSTANT ) ; java.lang.Long numOfVmDisksInStorageDomain2 = numOfVmDisksInStorageDomains . getOrDefault ( storageDomain2 . getId () , NUMBER_CONSTANT ) ; return ( - NUMBER_CONSTANT ) * ( numOfVmDisksInStorageDomain . compareTo ( numOfVmDisksInStorageDomain2 ) ) ; }
@ org.junit.Test public void testIncompleteMove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; try { resource . move ( new org.ovirt.engine.api.model.Action () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public static java.util.Set < org.ovirt.engine.core.common.businessentities.storage.BaseDisk > getDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.BaseDisk > diskMap = new java.util.HashMap <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk diskImage : diskImages ) { diskMap . put ( diskImage . getId () , diskImage ) ; } return new java.util.HashSet ( diskMap . values () ) ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( getVds () . getId () , reason , customLogValues ) ; tempVar . setSaveToDb ( true ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
public static org.ovirt.engine.core.authentication.Configuration loadFile ( java.io.File file ) throws java.io.IOException { java.util.Properties properties = new java.util.Properties () ; java.io.InputStream in = null ; try { in = new java.io.FileInputStream ( file ) ; properties . load ( in ) ; } finally { if ( in != null ) { in . close () ; } } return new org.ovirt.engine.core.authentication.Configuration.Root ( file , properties ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters initCreateVmParams () { org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters createVmParams = super . initCreateVmParams () ; createVmParams . getVm () . setRunOnce ( true ) ; org.ovirt.engine.core.common.action.RunVmOnceParams runOnceParams = org.ovirt.engine.core.bll.RunVmOnceCommand . getParameters () ; org.ovirt.engine.core.common.action.SysPrepParams sysPrepParams = new org.ovirt.engine.core.common.action.SysPrepParams () ; sysPrepParams . setSysPrepDomainName ( runOnceParams . getSysPrepDomainName () ) ; sysPrepParams . setSysPrepUserName ( runOnceParams . getSysPrepUserName () ) ; sysPrepParams . setSysPrepPassword ( runOnceParams . getSysPrepPassword () ) ; createVmParams . setSysPrepParams ( sysPrepParams ) ; createVmParams . setCloudInitParameters ( runOnceParams . getCloudInitParameters () ) ; return createVmParams ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > mockVfsOnNetDevice ( int numOfVfs ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > vfs = new java.util.ArrayList <> () ; for ( int i = NUMBER_CONSTANT ; i < numOfVfs ; ++ i ) { org.ovirt.engine.core.common.businessentities.HostDevice vfPciDevice = new org.ovirt.engine.core.common.businessentities.HostDevice () ; vfPciDevice . setParentPhysicalFunction ( pciDevice . getDeviceName () ) ; vfPciDevice . setDeviceName ( java.lang.String . valueOf ( i ) ) ; vfPciDevice . setHostId ( org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID ) ; vfs . add ( vfPciDevice ) ; } return vfs ; }
public boolean isRunning () { return ( ( ( ( ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PoweringUp ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.RebootInProgress ) ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpNetworkAttachmentsQueryExpectations ( t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
@ java.lang.Override protected void updateDetailsAvailability () { super . updateDetailsAvailability () ; if ( ( getSelectedItem () ) != null ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = getSelectedItem () ; quotaListModel . setIsAvailable ( ( ( storagePool . getQuotaEnforcementType () ) != ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) ) ; updateIscsiBondListAvailability ( storagePool ) ; } }
@ org.junit.Test public void validateFailsForCluster () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters () , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; mockIsGlusterEnabled ( false ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; mockIsGlusterEnabled ( true ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void testListGlobalLimit ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quota = getQuota () ; quota . setGlobalQuotaStorage ( getStorageGlobalCpuLimit () ) ; setUpGetEntityExpectations ( quota ) ; org.ovirt.engine.api.model.QuotaStorageLimits storageLimits = collection . list () ; assertStorageLimitsFound ( storageLimits , NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.QuotaStorageLimit storageLimit = storageLimits . getQuotaStorageLimits () . get ( NUMBER_CONSTANT ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendQuotaStorageLimitsResourceTest.STORAGE_SIZE_GB , storageLimit . getLimit () ) ; }
private org.ovirt.engine.core.common.businessentities.network.VnicProfile findVnicProfileForUser ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > networkProfiles = getVnicProfileDao () . getAllForNetwork ( network . getId () ) ; for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : networkProfiles ) { if ( isVnicProfilePermitted ( userId , profile , profile . isPortMirroring () ) ) { return profile ; } } return null ; }
@ org.junit.Test public void mixedClusterServicesNotSupported () { mockConfigRule . mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , false ) ; org.mockito.Mockito . when ( cluster . supportsGlusterService () ) . thenReturn ( true ) ; org.mockito.Mockito . when ( cluster . supportsVirtService () ) . thenReturn ( true ) ; org.junit.Assert . assertThat ( validator . mixedClusterServicesSupported () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.CLUSTER_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.HostStorage postPopulate ( org.ovirt.engine.api.model.HostStorage from ) { from . setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.StorageType . class ) ) ; from . setVolumeGroup ( new org.ovirt.engine.api.model.VolumeGroup () ) ; from . getVolumeGroup () . setId ( from . getId () ) ; return from ; }
@ java.lang.Override public void onSuccess ( java.util.List < java.lang.String > domains ) { getSysprepDomain () . setItems ( domains ) ; if ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( currentDomain ) ) ) { if ( ! ( domains . contains ( currentDomain ) ) ) { domains . add ( currentDomain ) ; } getSysprepDomain () . setSelectedItem ( currentDomain ) ; } }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; control . replay () ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public org.ovirt.engine.core.compat.Guid getStorageDomainIdForVmMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList ) { if ( ( cachedStorageDomainId . equals ( Guid.Empty ) ) && ( ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVm () ) != null ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler . getInstance () . findStorageDomainForMemory ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVm () . getStoragePoolId () , memoryDisksList ) ; if ( storageDomain != null ) { cachedStorageDomainId = storageDomain . getId () ; } } return cachedStorageDomainId ; }
@ java.lang.Override protected void initWidget ( com.google.gwt.user.client.ui.Widget wrapperWidget ) { super . initWidget ( wrapperWidget ) ; contentWidgetContainer . setWidget ( contentWidget ) ; contentWidget . asWidget () . setWidth ( STRING_CONSTANT ) ; com.google.gwt.dom.client.Element contentWidgetElement = getContentWidgetElement () ; if ( ( ( contentWidgetElement . getId () ) == null ) || ( contentWidgetElement . getId () . isEmpty () ) ) { contentWidgetElement . setId ( com.google.gwt.user.client.DOM . createUniqueId () ) ; } updateLabelElementId ( getContentWidgetElement () . getId () ) ; }
@ org.junit.Test public void validateFailsOnServerNotUp () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForRemove ( true , getHookEntity () , VDSStatus.Down ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP . toString () ) ) ; }
@ java.lang.Override public void render ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.resources.client.ImageResource value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( value != null ) { sb . append ( template . imageContainerWithStyleClass ( id , style , styleClass , com.google.gwt.safehtml.shared.SafeHtmlUtils . fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype . create ( value ) . getHTML () ) ) ) ; } }
@ org.junit.Test public void testUpdateWhenNoTasks () { tasksSyncJob . updateGlusterAsyncTasks () ; org.mockito.Mockito . verify ( volumeDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateVolumeTask ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.VOL_GUIDS [ NUMBER_CONSTANT ] , null ) ; org.mockito.Mockito . verify ( volumeDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateVolumeTask ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.VOL_GUIDS [ NUMBER_CONSTANT ] , null ) ; org.mockito.Mockito . verify ( taskUtils , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . endStepJob ( org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override protected void EndSuccessfully () { org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . EndActionOnDisks () ; if ( ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . getVm () ) != null ) { org.ovirt.engine.core.bll.VmHandler . unlockVm ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . getVm () , org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . getCompensationContext () ) ; restoreVmConfigFromSnapshot () ; } else { org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . setCommandShouldBeLogged ( false ) ; log . warn ( STRING_CONSTANT ) ; } org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . setSucceeded ( true ) ; }
@ java.lang.Override protected void createNumOfDesktopEditors () { incraseNumOfVmsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.IntegerEntityModelTextBoxOnlyEditor () ; numOfVmsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelTextBoxEditor < java.lang.Integer > ( new org.ovirt.engine.ui.common.widget.editor.generic.ToStringEntityModelRenderer < java.lang.Integer > () , new com.google.gwt.text.shared.Parser < java.lang.Integer > () { @ java.lang.Override public java.lang.Integer parse ( java.lang.CharSequence text ) throws java.text.ParseException { return incraseNumOfVmsEditor . asEditor () . getValue () ; } } ) ; }
@ org.junit.Test public void testGet () { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskSnapshotByImageId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotResourceTest.IMAGE_ID } , getEntity ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.DiskSnapshot diskSnapshot = resource . get () ; org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotResourceTest . verifyModelSpecific ( diskSnapshot , NUMBER_CONSTANT ) ; }
@ java.lang.Override public void onResponseReceived ( com.google.gwt.http.client.Request request , com.google.gwt.http.client.Response response ) { if ( ( response . getStatusCode () ) == ( com.google.gwt.http.client.Response.SC_OK ) ) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.reportsWebappDeployed = true ; getView () . updateReportsPanel ( url , params ) ; } else { errorPopupManager . show ( applicationConstants . reportsWebAppNotDeployedMsg () ) ; } }
@ org.junit.Test public void testListNonIso ( ) throws java.lang.Exception { try { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setupGetStorageDomainExpectations ( StorageDomainType.Data ) ; collection . setUriInfo ( uriInfo ) ; verifyCollection ( getCollection () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void diskImagesAlreadyExistBothExist () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) . when ( validator ) . getExistingDisk ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertThat ( validator . diskImagesAlreadyExist () , org.hamcrest.CoreMatchers . both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers . replacements ( org.hamcrest.CoreMatchers . hasItem ( org.ovirt.engine.core.bll.validator.storage.DiskImagesValidatorTest . createAliasReplacements ( disk1 , disk2 ) ) ) ) ) ; }
@ java.lang.Override protected void ExecuteVdsBrokerCommand () { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand . getBroker () . connectStorageServer ( org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand . getParameters () . getStorageType () . getValue () , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand . getParameters () . getStoragePoolId () . toString () , BuildStructFromConnectionListObject () ) ; ProceedProxyReturnValue () ; java.util.Map < java.lang.String , java.lang.String > returnValue = _result . convertToStatusList () ; org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand . setReturnValue ( returnValue ) ; logFailedStorageConnections ( returnValue ) ; }
private org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand createTestCommand1 ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters ( volumeId , getBricks ( volumeId , STRING_CONSTANT , NUMBER_CONSTANT ) . get ( NUMBER_CONSTANT ) , getBricks ( volumeId , STRING_CONSTANT , NUMBER_CONSTANT ) . get ( NUMBER_CONSTANT ) ) , null ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { getDbFacade () . getIscsiBondDao () . save ( iscsiBond ) ; for ( org.ovirt.engine.core.compat.Guid networkId : iscsiBond . getNetworkIds () ) { getDbFacade () . getIscsiBondDao () . addNetworkToIscsiBond ( iscsiBond . getId () , networkId ) ; } for ( java.lang.String connectionId : iscsiBond . getStorageConnectionIds () ) { getDbFacade () . getIscsiBondDao () . addStorageConnectionToIscsiBond ( iscsiBond . getId () , connectionId ) ; } return null ; }
public static org.ovirt.engine.api.model.Snapshot map ( java.lang.String configuration , org.ovirt.engine.api.model.ConfigurationType type , org.ovirt.engine.api.model.Snapshot snapshot ) { snapshot . setInitialization ( new org.ovirt.engine.api.model.Initialization () ) ; snapshot . getInitialization () . setConfiguration ( new org.ovirt.engine.api.model.Configuration () ) ; snapshot . getInitialization () . getConfiguration () . setData ( configuration ) ; snapshot . getInitialization () . getConfiguration () . setType ( type ) ; return snapshot ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllDbUsers , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { true , false } , getUsers () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; control . replay () ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
@ java.lang.Override protected boolean validate () { if ( ( getQuota () ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; return false ; } if ( getQuota () . isDefault () ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED ) ; return false ; } return super . validate () ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage () { disk . setImageId ( diskImageGuid ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > storageIdList = new java.util.ArrayList <> () ; storageIdList . add ( storageDomainId ) ; disk . setStorageIds ( storageIdList ) ; disk . setStoragePoolId ( storagePoolId ) ; return disk ; }
@ org.junit.Test public void testStorageLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.HostStorage storage = new org.ovirt.engine.api.model.HostStorage () ; storage . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_ID ) ; storage . setHost ( new org.ovirt.engine.api.model.Host () ) ; storage . getHost () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.HOST_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( storage ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_HREF , storage . getHref () ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.HOST_HREF , storage . getHost () . getHref () ) ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.GetVdsByVdsIdQuery . getDbFacade () . getVdsDao () . get ( org.ovirt.engine.core.bll.GetVdsByVdsIdQuery . getParameters () . getVdsId () ) ; if ( vds != null ) { vds . setCpuName ( org.ovirt.engine.core.bll.CpuFlagsManagerHandler . FindMaxServerCpuByFlags ( vds . getCpuFlags () , vds . getVdsGroupCompatibilityVersion () ) ) ; } org.ovirt.engine.core.bll.GetVdsByVdsIdQuery . getQueryReturnValue () . setReturnValue ( vds ) ; }
@ org.junit.Test public void testGuestFQDN () { org.ovirt.engine.api.restapi.types.VM vm = new org.ovirt.engine.api.restapi.types.VM () ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; vmDynamic . setStatus ( VMStatus.Up ) ; vmDynamic . setVmFQDN ( STRING_CONSTANT ) ; vm . setDynamicData ( vmDynamic ) ; org.ovirt.engine.api.model.Vm map = org.ovirt.engine.api.restapi.types.VmMapper . map ( vm , ( ( org.ovirt.engine.api.model.Vm ) ( null ) ) ) ; assertNotNull ( map . getFqdn () ) ; assertEquals ( STRING_CONSTANT , map . getFqdn () ) ; }
@ java.lang.Override public java.lang.String encodedId ( org.ovirt.engine.core.compat.Guid id ) { byte [] bytes = id . toByteArray () ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for ( int idx = NUMBER_CONSTANT ; idx < ( bytes.length ) ; idx ++ ) { sb . append ( ( STRING_CONSTANT + ( java.lang.String . format ( STRING_CONSTANT , bytes [ idx ] ) ) ) ) ; } return sb . toString () ; }
@ java.lang.Override public void init () { super . init () ; setVmTemplateId ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand . getParameters () . getContainerId () ) ; org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand . getParameters () . setEntityInfo ( new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.VmTemplate , org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand . getVmTemplateId () ) ) ; imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand . getParameters () . getImageToDestinationDomainMap () ; imageFromSourceDomainMap = new java.util.HashMap <> () ; }
@ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend . ignoreFailure ( caught ) ) { return; } org.ovirt.engine.ui.frontend.Frontend.logger . log ( java.util.logging.Level.SEVERE , ( STRING_CONSTANT + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend . failureEventHandler ( caught ) ; org.ovirt.engine.ui.frontend.Frontend . failureEventHandler ( caught ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ; org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
@ java.lang.Override protected java.lang.String imageName ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { if ( value == null ) { return defaultImageName ( null ) ; } if ( value . isPool () ) { return STRING_CONSTANT ; } else if ( value . getIsServer () ) { return STRING_CONSTANT ; } return STRING_CONSTANT ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) protected < T > T getConfigurationValue ( java.lang.Class < T > clz , org.ovirt.engine.core.common.queries.ConfigurationValues config , final org.ovirt.engine.api.model.Version version ) { return getEntity ( clz , VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( config , org.ovirt.engine.api.restapi.resource.BackendResource . asString ( version ) ) , config . toString () ) ; }
@ java.lang.Override protected org.quartz.JobDetail createJobWithBasicMapValues ( java.lang.Object instance , java.lang.String methodName , java.lang.Class < > [] inputTypes , java.lang.Object [] inputParams ) { java.lang.String jobName = generateUniqueNameForInstance ( instance , methodName ) ; org.quartz.JobDetail job = org.quartz.JobBuilder . newJob () . withIdentity ( jobName , Scheduler.DEFAULT_GROUP ) . ofType ( org.ovirt.engine.core.utils.timer.JobWrapper . class ) . build () ; setBasicMapValues ( job . getJobDataMap () , instance , methodName , inputTypes , inputParams ) ; return job ; }
@ org.junit.Test public void getVdsWithVdsId () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase () ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ; b . setVdsId ( vdsId ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , v . getId () ) ; }
protected void saveSnapshotIfNotExists ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { if ( ! ( org.ovirt.engine.core.bll.ImportVmCommand . getSnapshotDao () . exists ( org.ovirt.engine.core.bll.ImportVmCommand . getVm () . getId () , snapshotId ) ) ) { org.ovirt.engine.core.bll.ImportVmCommand . getSnapshotDao () . save ( new org.ovirt.engine.core.common.businessentities.Snapshot ( snapshotId , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus.OK , org.ovirt.engine.core.bll.ImportVmCommand . getVm () . getId () , null , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.REGULAR , disk . getDescription () , disk . getLastModifiedDate () , disk . getAppList () ) ) ; } }
@ java.lang.Override protected org.ovirt.engine.api.model.DiskSnapshot postPopulate ( org.ovirt.engine.api.model.DiskSnapshot model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskInterface . class ) ) ; model . setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ScsiGenericIO . class ) ) ; model . setStatus ( org.ovirt.engine.api.common.util.StatusUtils . create ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ) ; model . setLunStorage ( null ) ; return model ; }
protected boolean ValidConnection ( org.ovirt.engine.core.common.businessentities.StorageType type , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { return ( connections != null ) && ( ( connections . isEmpty () ) || ( org.ovirt.engine.core.bll.storage.StorageHelperDirector . getInstance () . getItem ( type ) . validateStoragePoolConnectionsInHost ( getVds () , connections , getStoragePool () . getId () ) ) ) ; }
@ org.junit.Test public void testListGlobalLimit ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quota = getQuota () ; quota . setGlobalQuotaStorage ( getStorageGlobalCpuLimit () ) ; setUpGetEntityExpectations ( quota ) ; control . replay () ; org.ovirt.engine.api.model.QuotaStorageLimits storageLimits = collection . list () ; assertStorageLimitsFound ( storageLimits , NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.QuotaStorageLimit storageLimit = storageLimits . getQuotaStorageLimits () . get ( NUMBER_CONSTANT ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendQuotaStorageLimitsResourceTest.STORAGE_SIZE_GB , storageLimit . getLimit () ) ; }
private boolean consumeForStorageQuota ( org.ovirt.engine.core.compat.Guid quotaId ) throws java.lang.CloneNotSupportedException { org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters = parametersWrapper . clone () ; parameters . getParameters () . add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( quotaId , null , QuotaConsumptionParameter.QuotaAction.CONSUME , org.ovirt.engine.core.bll.quota.QuotaManagerTest.DESTINATION_GUID , NUMBER_CONSTANT ) ) ; return quotaManager . consume ( parameters ) ; }
private org.ovirt.sdk.python.PythonClassName buildClassName ( org.ovirt.api.metamodel.concepts.Name base , org.ovirt.api.metamodel.concepts.Name suffix , java.lang.String module ) { java.util.List < java.lang.String > words = base . getWords () ; if ( suffix != null ) { words . addAll ( suffix . getWords () ) ; } org.ovirt.api.metamodel.concepts.Name name = new org.ovirt.api.metamodel.concepts.Name ( words ) ; org.ovirt.sdk.python.PythonClassName result = new org.ovirt.sdk.python.PythonClassName () ; result . setClassName ( getClassStyleName ( name ) ) ; result . setModuleName ( getModuleName ( module ) ) ; return result ; }
@ java.lang.Override protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . init () ; org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . getReportsInitEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability () ; } } ) ; performLogin ( loginModel ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.Tags returnValue ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel rootTag = tagToModel ( returnValue ) ; rootTag . getName () . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . rootTag () ) ; rootTag . setType ( TagModelType.Root ) ; rootTag . setIsChangeable ( false ) ; setItems ( new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel [] { rootTag } ) ) ) ; }
private void setUpMocksForUpdate ( boolean hookFound , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { setupMocks ( hookFound , hook ) ; org.mockito.Mockito . when ( vdsDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( getServer ( org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID , STRING_CONSTANT , org.ovirt.engine.core.bll.gluster.CLUSTER_ID , status ) ) ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito . when ( hostedEngineHelperInstance . get () ) . thenReturn ( hostedEngineHelper ) ; org.mockito.Mockito . when ( hostedEngineHelper . getStorageDomainId () ) . thenReturn ( org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcherTest.DOMAIN_ID ) ; org.mockito.Mockito . when ( hostedEngineHelper . getStoragePoolId () ) . thenReturn ( org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcherTest.POOL_ID ) ; org.mockito.Mockito . when ( hostedEngineHelper . getRunningHostId () ) . thenReturn ( org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcherTest.HOST_ID ) ; }
@ org.junit.Before public void setUp () { vdsFromDb = new org.ovirt.engine.core.common.businessentities.VDS () ; vdsFromDb . setId ( vdsId ) ; vdsFromDb . setClusterId ( clusterId ) ; virtStrategy = org.mockito.Mockito . spy ( new org.ovirt.engine.core.vdsbroker.monitoring.VirtMonitoringStrategy ( mockCluster () , mockVdsDao () , null ) ) ; org.mockito.Mockito . doNothing () . when ( virtStrategy ) . vdsNonOperational ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VDS . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.NonOperationalReason . class ) , org.mockito.Matchers . any () ) ; }
@ org.junit.Test public void testGetEntityNameByIdAndTypeForHost () { org.ovirt.engine.core.common.businessentities.VdsStatic vds = vdsStaticDao . get ( org.ovirt.engine.core.dao.EntityDaoImplTest.VDS_ID ) ; org.junit.Assert . assertNotNull ( vds ) ; java.lang.String name = vds . getName () ; org.junit.Assert . assertEquals ( name , underTest . getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.VDS_ID , VdcObjectType.VDS ) ) ; }
@ org.junit.Before public void setUpDefaultEnvironment () { java.lang.System . setProperty ( STRING_CONSTANT , STRING_CONSTANT ) ; defaultCluster = clusterBuilder . persist () ; defaultHost = vdsBuilder . cluster ( defaultCluster ) . persist () ; defaultVM = vmBuilder . host ( defaultHost ) . up () . persist () ; }
@ org.junit.Test public void shouldNotMigrateVmOnClusterTwoWhenEnforced () { org.mockito.Mockito . when ( rulesEnforcer . chooseNextVmToMigrate ( org.mockito.ArgumentMatchers . eq ( cluster2 ) ) ) . thenReturn ( null ) ; arem . refresh () ; org.mockito.Mockito . verify ( arem ) . migrateVM ( vm1 ) ; org.mockito.Mockito . verify ( arem , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . migrateVM ( org.mockito.ArgumentMatchers . any () ) ; }
private org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolWithoutLocking ( org.ovirt.engine.core.compat.Guid macPoolId , java.util.List < org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator > decorators ) { final org.ovirt.engine.core.bll.network.macpool.MacPool poolById = macPools . get ( macPoolId ) ; if ( poolById == null ) { throw new java.lang.IllegalStateException ( org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE ) ; } return decoratedMacPoolFactory . createDecoratedPool ( poolById , decorators ) ; }
@ org.junit.Test public void validateFailsIfStopped () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.StopGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( stoppedVolumeId , geoRepSessionId ) , null ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito . doReturn ( getGeoRepSession ( geoRepSessionId , GeoRepSessionStatus.STOPPED ) ) . when ( geoRepDao ) . getById ( geoRepSessionId ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain createStorageDomainForDisk ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; domain . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; domain . setStorageType ( storageType ) ; disk . setStorageIds ( new java.util.ArrayList ( java.util.Collections . singletonList ( domain . getId () ) ) ) ; org.mockito.Mockito . when ( storageDomainDao . get ( domain . getId () ) ) . thenReturn ( domain ) ; return domain ; }
@ java.lang.Override public void endWithFailure () { for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : enclosingCommand . getParameters () . getParametersList () ) { updateDestinationImageId ( parameters ) ; } endCreateAllSnapshots () ; unlockAllDiskSnapshots () ; org.ovirt.engine.core.bll.job.ExecutionHandler . endJob ( enclosingCommand . getExecutionContext () , false ) ; enclosingCommand . getReturnValue () . setSucceeded ( true ) ; }
@ java.lang.Override public void onSuccess ( java.lang.String fingerprint ) { if ( ( fingerprint != null ) && ( ( fingerprint . length () ) > NUMBER_CONSTANT ) ) { getGlusterHostFingerprint () . setEntity ( fingerprint ) ; setIsFingerprintVerified ( true ) ; } else { getGlusterHostFingerprint () . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . errorLoadingFingerprint () ) ; setIsFingerprintVerified ( false ) ; } }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . update ( getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void init ( final com.google.gwt.event.shared.EventBus eventBus ) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel = org.ovirt.engine.ui.uicommonweb.models.CommonModel . newInstance () ; org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.common.uicommon.model.MainModelSelectionChangeEvent . fire ( eventBus , org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel . getSelectedItem () ) ; } } ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetHostDeviceByHostIdAndDeviceName , org.ovirt.engine.core.common.queries.HostDeviceParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { HOST_ID , DEVICE_NAME } , getEntity ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.HostDevice device = resource . get () ; verifyHostDevice ( device ) ; }
public static void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params . setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public static void getAllVnicProfiles ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVnicProfiles , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
private void reportNonOperationReason ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.lang.String compatibleVersions , java.lang.String vdsSupportedVersions ) { java.util.Map < java.lang.String , java.lang.String > customLogValues = new java.util.HashMap <> () ; customLogValues . put ( STRING_CONSTANT , compatibleVersions ) ; customLogValues . put ( STRING_CONSTANT , vdsSupportedVersions ) ; reportNonOperationReason ( reason , customLogValues ) ; }
private void notifyAsyncTasks () { final java.util.List < org.ovirt.engine.core.compat.Guid > asyncTasks = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand . getAsyncTaskDao () . getAsyncTaskIdsByEntity ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand . getParameters () . getStorageDomainId () ) ; if ( ! ( asyncTasks . isEmpty () ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; auditLogableBase . setStorageDomain ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand . getStorageDomain () ) ; auditLogDirector . log ( auditLogableBase , AuditLogType.STORAGE_DOMAIN_TASKS_ERROR ) ; } }
private void updateDisplayAndGraphics () { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster () ; java.lang.Integer osType = getOSType () . getSelectedItem () ; if ( ( cluster == null ) || ( osType == null ) ) { return; } java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > > graphicsAndDisplays = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getGraphicsAndDisplays ( osType , getCompatibilityVersion () ) ; initDisplayModels ( graphicsAndDisplays ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > convert ( java.lang.Object source ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > list = new java.util.ArrayList <> () ; if ( source != null ) { java.lang.Iterable listEnumerable = ( ( java.lang.Iterable ) ( source ) ) ; java.util.Iterator listIterator = listEnumerable . iterator () ; while ( listIterator . hasNext () ) { list . add ( ( ( org.ovirt.engine.core.common.businessentities.storage.Disk ) ( listIterator . next () ) ) ) ; } } return list ; }
@ org.junit.Test public void validateFailsWhenGlusterHostHasVolumes ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , false ) , null ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( cModel == null ) { return; } else { cModel . stopProgress () ; if ( ! ( result . getReturnValue () . getSucceeded () ) ) { cModel . setActionConfirmationMessage ( result . getReturnValue () . getFault () . getMessage () ) ; } else { setWindow ( null ) ; } } }
private void mockCommand () { org.mockito.Mockito . doReturn ( asyncTaskDaoMock ) . when ( command ) . getAsyncTaskDao () ; org.mockito.Mockito . doReturn ( storagePool ) . when ( storagePoolDaoMock ) . getForVds ( vdsId ) ; org.mockito.Mockito . doReturn ( vds ) . when ( vdsDaoMock ) . get ( vdsId ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase removeVmImages ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalAction ( VdcActionType.RemoveAllVmImages , buildRemoveAllVmImagesParameters ( images ) , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContexForTasks ( getExecutionContext () ) ) ; if ( vdcRetValue . getSucceeded () ) { getReturnValue () . getVdsmTaskIdList () . addAll ( vdcRetValue . getInternalVdsmTaskIdList () ) ; } return vdcRetValue ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate () ; mockBackend ( false , EngineError.GlusterHookUpdateFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_UPDATE_FAILED ) ; }
@ java.lang.Override public void init ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { super . init ( model ) ; model . getDataCenterWithClustersList () . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( model . getSelectedCluster () ) != null ) { setSpiceProxyOverrideExplanation ( model . getSelectedCluster () ) ; } } } ) ; }
protected void setUpCommand () { command = createCommand () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . verifyAddVM () ; }
private static org.ovirt.engine.core.common.businessentities.VmRngDevice getDevice ( org.ovirt.engine.core.compat.Guid deviceId , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VmRngDevice device = new org.ovirt.engine.core.common.businessentities.VmRngDevice () ; device . setVmId ( vmId ) ; device . setDeviceId ( deviceId ) ; device . setBytes ( NUMBER_CONSTANT ) ; device . setPeriod ( NUMBER_CONSTANT ) ; device . setSource ( VmRngDevice.Source.RANDOM ) ; return device ; }
public static void GetAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.Collections . sort ( templates , new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateComparator () ) ; setItems ( templates ) ; setIsEmpty ( ( ( templates . size () ) == NUMBER_CONSTANT ) ) ; }
private void initSpmPriorities1 () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDefaultSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( postponedSpmPriority ) != null ) { updateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; } } ) ) ; }
@ org.junit.Test public void testNoChanges () { org.ovirt.engine.core.utils.Jedi jedi1 = new org.ovirt.engine.core.utils.Jedi () ; org.ovirt.engine.core.utils.Jedi jedi2 = new org.ovirt.engine.core.utils.Jedi () ; java.util.List < java.lang.String > changes = org.ovirt.engine.core.utils.ObjectIdentityChecker . getChangedFields ( jedi1 , jedi2 ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , changes . size () ) ; }
protected void endVmCommand () { endActionOnDisks () ; if ( ( org.ovirt.engine.core.bll.VmCommand . getVm () ) != null ) { vmStaticDao . incrementDbGeneration ( org.ovirt.engine.core.bll.VmCommand . getVm () . getId () ) ; } unlockVm () ; org.ovirt.engine.core.bll.VmCommand . setSucceeded ( true ) ; }
private void initProfiles () { for ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profile : ( ( java.lang.Iterable < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > ) ( getProfiles () . getItems () ) ) ) { profile . updateDc ( getSelectedDc () . getcompatibility_version () , getSelectedDc () . getId () ) ; } }
@ java.lang.Override public void onAddition () { org.ovirt.engine.core.compat.Guid storageDomainId = addStorageDomain ( StorageType.CINDER , StorageDomainType.Volume ) ; org.ovirt.engine.core.compat.Guid storagePoolId = provider . getAdditionalProperties () . getStoragePoolId () ; if ( ( storagePoolId != null ) && ( ! ( storagePoolId . equals ( Guid.Empty ) ) ) ) { attachStorageDomainToDataCenter ( storageDomainId , storagePoolId ) ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.storage.DiskLunMap ) ) { return false ; } org.ovirt.engine.core.common.businessentities.storage.DiskLunMap other = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskLunMap ) ( obj ) ) ; return java.util.Objects . equals ( id , other.id ) ; }
public static void addLink ( java.lang.String url , org.ovirt.engine.api.model.BaseResource resource , java.lang.String rel , org.ovirt.engine.api.model.ParametersSet params ) { org.ovirt.engine.api.model.Link link = new org.ovirt.engine.api.model.Link () ; link . setRel ( ( rel + ( org.ovirt.engine.api.common.util.LinkHelper.SEARCH_RELATION ) ) ) ; link . setHref ( ( ( org.ovirt.engine.api.common.util.LinkHelper . combine ( org.ovirt.engine.api.common.util.LinkHelper . combine ( url , rel ) , params ) ) + ( org.ovirt.engine.api.common.util.LinkHelper.SEARCH_TEMPLATE ) ) ) ; resource . getLinks () . add ( link ) ; }
public void flush () { subnet = new org.ovirt.engine.core.common.businessentities.network.ExternalSubnet () ; subnet . setName ( getName () . getEntity () ) ; org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork () . getEntity () ; subnet . setExternalNetwork ( network . getProvidedBy () ) ; subnet . setCidr ( getCidr () . getEntity () ) ; subnet . setIpVersion ( getIpVersion () . getSelectedItem () ) ; }
protected boolean validateSuffix ( java.lang.String suffix , org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel ) { for ( java.lang.Object object : objectsInSetupMap . values () ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) ; if ( ! ( validateName ( ( ( vm . getvm_name () ) + suffix ) , vm , entityModel ) ) ) { return false ; } } return true ; }
@ java.lang.Override public javax.ws.rs.core.Response get () { java.net.URI uri = java.net.URI . create ( org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( newModel ( id ) ) . getHref () ) ; javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY ; return javax.ws.rs.core.Response . status ( status ) . location ( uri ) . build () ; }
public final void runAction () { if ( ( actionFlowState ) == null ) { actionFlowState = new org.ovirt.engine.ui.uicommonweb.action.UiAction.ActionFlowState ( NUMBER_CONSTANT , finalAction ) ; } if ( ( model . getProgress () ) == null ) { model . startProgress () ; actionFlowState . setStartedProgress ( true ) ; } if ( ( parallelAction ) != null ) { parallelAction . runParallelAction ( actionFlowState ) ; } if ( shouldExecute () ) { internalRunAction () ; } else { runNextAction () ; } }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd . executeCommand () ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getSucceeded () ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_DISABLE ) ; }
@ org.junit.Test public void test () { getQuery () . executeQueryCommand () ; org.junit.Assert . assertTrue ( STRING_CONSTANT , org.apache.commons.collections.CollectionUtils . isEqualCollection ( getQuery () . getQueryReturnValue () . getReturnValue () , java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Provider > convert ( java.lang.Object returnValue ) { if ( returnValue == null ) { return new java.util.ArrayList <> () ; } java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = org.ovirt.engine.ui.uicommonweb.Linq . toList ( org.ovirt.engine.ui.uicommonweb.Linq . filterProvidersByProvidedType ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) , providedEntity ) ) ; java.util.Collections . sort ( providers , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return providers ; }
@ org.junit.Test public void testNetworkNotAttachedToHost () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork () ; org.mockito.Mockito . when ( networkDaoMock . get ( network . getId () ) ) . thenReturn ( network ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment () ; attachment . setNetworkId ( network . getId () ) ; org.junit.Assert . assertThat ( createNetworkAttachmentValidator ( attachment ) . networkNotAttachedToHost () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ org.junit.Test public void testHostTagLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Tag tag = new org.ovirt.engine.api.model.Tag () ; tag . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.TAG_ID ) ; tag . setHost ( new org.ovirt.engine.api.model.Host () ) ; tag . getHost () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.HOST_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( tag ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.HOST_TAG_HREF , tag . getHref () ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk > unregisteredDisks = returnValue . getReturnValue () ; java.util.Collections . sort ( unregisteredDisks , new org.ovirt.engine.core.common.businessentities.comparators.UnregisteredDiskByDiskAliasComparator () ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > diskItems = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk unregisteredDisk : unregisteredDisks ) { diskItems . add ( unregisteredDisk . getDiskImage () ) ; } setItems ( diskItems ) ; }
private static java.lang.Boolean AssignBoolValue ( java.util.Map < java.lang.String , java.lang.Object > input , java.lang.String name ) { if ( input . containsKey ( name ) ) { if ( ( input . get ( name ) ) instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( input . get ( name ) ) ) ; } return java.lang.Boolean . parseBoolean ( input . get ( name ) . toString () ) ; } return null ; }
@ org.junit.Test public void doTestBadAddFromConfigurationMissingParameters ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Vm model = createModel ( null ) ; model . setInitialization ( new org.ovirt.engine.api.model.Initialization () ) ; model . getInitialization () . setConfiguration ( new org.ovirt.engine.api.model.Configuration () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch () { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter () ; return org.ovirt.engine.core.bll.ValidationResult . failWith ( EngineMessage.CLUSTER_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL ) . when ( ( ( ( dataCenter != null ) && ( cluster . supportsVirtService () ) ) && ( ( dataCenter . getCompatibilityVersion () . compareTo ( cluster . getCompatibilityVersion () ) ) > NUMBER_CONSTANT ) ) ) ; }
public boolean isVmStatusQuotaCountable ( org.ovirt.engine.core.common.businessentities.VMStatus status ) { if ( ( nonCountableQutoaVmStatusesList . size () ) == NUMBER_CONSTANT ) { synchronized ( nonCountableQutoaVmStatusesList ) { nonCountableQutoaVmStatusesList . addAll ( getQuotaDao () . getNonCountableQutoaVmStatuses () ) ; } } return ! ( nonCountableQutoaVmStatusesList . contains ( status . getValue () ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice () { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , org.ovirt.engine.core.bll.AttachDiskToVmCommand . getVmId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , NUMBER_CONSTANT , null , true , org.ovirt.engine.core.bll.AttachDiskToVmCommand . getParameters () . isPlugUnPlug () , false , STRING_CONSTANT , null ) ; }
protected void onGetClusterList ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > clusterList ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > items = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > () ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusterList ) { items . add ( createNetworkClusterModel ( cluster ) ) ; } getNetworkClusterList () . setItems ( items ) ; }
@ org.junit.Test public void geoRepResumeSucceeds () { org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters () ; param . setForce ( false ) ; param . setVolumeId ( startedVolumeId ) ; param . setGeoRepSessionId ( geoRepSessionId ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ResumeGeoRepSessionCommand ( param , null ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito . doReturn ( getGeoRepSession ( geoRepSessionId , GeoRepSessionStatus.PASSIVE , startedVolumeId ) ) . when ( geoRepDao ) . getById ( geoRepSessionId ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
private void executeNotRespondingTreatment ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { final org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( host . getId () ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil . execute ( new java.lang.Runnable () { @ java.lang.Override public void run () { org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.VdsNotRespondingTreatment , params , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; } } ) ; } }
private boolean containsDeviceWithType ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType , org.ovirt.engine.core.common.utils.VmDeviceType deviceType ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( ( device . getType () ) == generalType ) { if ( ( deviceType == null ) || ( ( ( deviceType . getName () ) != null ) && ( deviceType . getName () . equals ( device . getDevice () ) ) ) ) { return true ; } } } return false ; }
private void endVmTemplateRelatedOps () { if ( ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . getVmTemplate () ) != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . setVmDevices ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . getVmTemplate () ) ; incrementDbGeneration () ; org.ovirt.engine.core.bll.VmTemplateHandler . UnLockVmTemplate ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . getVmTemplateId () ) ; } else { org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand . setCommandShouldBeLogged ( false ) ; log . warn ( STRING_CONSTANT ) ; } }
public static void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > () ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
protected java.lang.String getClientTitle () { java.lang.String releaseCursorKeys = getReleaseCursorKeys () ; java.lang.String releaseCursorKeysTranslated = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getComplexValueFromSpiceRedKeysResource ( ( releaseCursorKeys != null ? releaseCursorKeys : STRING_CONSTANT ) ) ; java.lang.String releaseCursorMsg = STRING_CONSTANT ; if ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( releaseCursorKeysTranslated ) ) ) { releaseCursorMsg = STRING_CONSTANT + ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getMessages () . pressKeyToReleaseCursor ( releaseCursorKeysTranslated ) ) ; } return ( ( getEntity () . getName () ) + STRING_CONSTANT ) + releaseCursorMsg ; }
private void initIntervals () { java.util.List < java.lang.String > intervals = new java.util.ArrayList <> () ; int mins = NUMBER_CONSTANT ; for ( int nThMin = NUMBER_CONSTANT ; mins < NUMBER_CONSTANT ; nThMin ++ ) { mins = nThMin * NUMBER_CONSTANT ; intervals . add ( java.lang.String . valueOf ( mins ) ) ; } getInterval () . setItems ( intervals ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Host model = new org.ovirt.engine.api.model.Host () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
private static java.util.Map < java.lang.String , java.lang.Object > getUsbControllerSpecParams ( java.lang.String model , int controllerNumber , int index ) { java.util.Map < java.lang.String , java.lang.Object > specParams = new java.util.HashMap <> () ; specParams . put ( VdsProperties.Model , ( model + controllerNumber ) ) ; specParams . put ( VdsProperties.Index , java.lang.Integer . toString ( index ) ) ; return specParams ; }
@ org.junit.Test public void testGetByIdAll () { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = dao . getById ( FixturesTool.HOOK_ID , true ) ; org.junit.Assert . assertNotNull ( hook ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , hook . getServerHooks () . size () ) ; org.junit.Assert . assertEquals ( FixturesTool.HOOK_ID , hook . getId () ) ; }
private void processSingleClusterChanges ( org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param ) { final org.ovirt.engine.core.bll.network.cluster.transformer.NetworkClustersToSetupNetworksParametersTransformer networkClustersToSetupNetworksParametersTransformer = networkClustersToSetupNetworksParametersTransformerFactory . createNetworkClustersToSetupNetworksParametersTransformer ( getContext () ) ; final java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > setupNetworksParams = new java.util.ArrayList <> () ; setupNetworksParams . addAll ( networkClustersToSetupNetworksParametersTransformer . transform ( param . getAttachments () , param . getDetachments () ) ) ; org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder . updateParametersSequencing ( setupNetworksParams ) ; runInternalMultipleActions ( VdcActionType.PersistentHostSetupNetworks , setupNetworksParams ) ; }
@ org.junit.Test public void executeCommand () { cmd . setGlusterVolumeId ( volumeId1 ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_VOLUME_DETAILS_REFRESH , cmd . getAuditLogTypeValue () ) ; org.mockito.Mockito . verify ( syncJob , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . refreshVolumeDetails ( org.mockito.Matchers . any () , org.mockito.Matchers . any () ) ; }
private void initInterface ( org.ovirt.engine.core.common.businessentities.network.VmNic iface ) { if ( ( iface . getId () ) == null ) { iface . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; } fillMacAddressIfMissing ( iface ) ; iface . setVmTemplateId ( null ) ; iface . setVmId ( getVmId () ) ; }
@ java.lang.Override protected java.util.Map < java.lang.String , java.lang.String > getSharedLocks () { if ( ( ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getVmId () ) != null ) && ( ! ( Guid.Empty . equals ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getVmId () ) ) ) ) { return java.util.Collections . singletonMap ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getVmId () . toString () , LockingGroup.VM . name () ) ; } return null ; }
@ org.junit.Test public void testGuestAgentStatus ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = dao . get ( vmId ) ; vmDynamic . setGuestAgentStatus ( GuestAgentStatus.UpdateNeeded ) ; dao . update ( vmDynamic ) ; vmDynamic = dao . get ( vmId ) ; org.junit.Assert . assertEquals ( vmDynamic . getGuestAgentStatus () . getValue () , GuestAgentStatus.UpdateNeeded . getValue () ) ; }
@ org.junit.Test public void getClusterWithVds () { final org.ovirt.engine.core.common.businessentities.VDS v = new org.ovirt.engine.core.common.businessentities.VDS () ; v . setClusterId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVds ( v ) ; final org.ovirt.engine.core.common.businessentities.Cluster g = b . getCluster () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g . getId () ) ; }
public static java.lang.String getRequestParameter ( javax.servlet.http.HttpServletRequest request , java.lang.String paramName ) throws java.lang.Exception { java.lang.String value = org.ovirt.engine.core.sso.utils.SSOUtils . getParameter ( request , paramName ) ; if ( value == null ) { throw new org.ovirt.engine.core.sso.utils.OAuthException ( SSOConstants.ERR_CODE_INVALID_REQUEST , java.lang.String . format ( SSOConstants.ERR_CODE_INVALID_REQUEST_MSG , paramName ) ) ; } return value ; }
@ org.junit.Test public void canDoActionThinProvisioningSpaceCheckFailsSize () { final int availableSize = NUMBER_CONSTANT ; final int usedSize = NUMBER_CONSTANT ; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( sdid , VolumeType.Sparse ) ; mockVm () ; mockStorageDomain ( sdid , availableSize , usedSize ) ; mockStoragePoolIsoMap () ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN . toString () ) ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ) { returnValue = ( ( ( getid () ) != null ) && ( ! ( getid () . isEmpty () ) ) ) && ( getid () . equals ( ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( obj ) ) . getid () ) ) ; } return returnValue ; }
private void configureLocalStorage2 ( org.ovirt.engine.ui.uicommonweb.models.hosts.ConfigureLocalStorageModel model ) { java.lang.String prefix = ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.RhevhLocalFSPath ) ) ) ; if ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( prefix ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel pathModel = model . getStorage () . getPath () ; pathModel . setEntity ( prefix ) ; pathModel . setIsChangable ( false ) ; } configureLocalStorage3 ( model ) ; }
@ java.lang.Override protected void onReveal () { super . onReveal () ; org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; _asyncQuery . setModel ( this ) ; _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String version = ( ( java.lang.String ) ( result ) ) ; getView () . setVersion ( version ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getRpmVersion ( _asyncQuery ) ; }
private void addSoundDeviceToVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.compat.Guid deviceId = org.ovirt.engine.core.compat.Guid . newGuid () ; java.util.Map < java.lang.String , java.lang.Object > specParams = new java.util.HashMap <> () ; org.ovirt.engine.core.common.businessentities.VmDevice sound = new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( deviceId , vm . getId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SOUND , STRING_CONSTANT , null , specParams , true , true , true , null , null , null , null ) ; vm . getManagedVmDeviceMap () . put ( deviceId , sound ) ; }
protected void updateVirtioScsiAvailability () { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel () . getSelectedCluster () ; boolean isVirtioScsiEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.VirtIoScsiEnabled , cluster . getcompatibility_version () . getValue () ) ) ) ; getModel () . getIsVirtioScsiEnabled () . setIsAvailable ( isVirtioScsiEnabled ) ; }
protected boolean setAndValidateDiskProfiles () { getImage () . setDiskProfileId ( org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand . getParameters () . getDiskProfileId () ) ; return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper . setAndValidateDiskProfiles ( java.util.Collections . singletonMap ( getImage () , org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand . getParameters () . getStorageDomainId () ) , org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand . getCurrentUser () ) ) ; }
@ java.lang.Override protected javax.ws.rs.core.Response performRemove ( java.lang.String id ) { org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup = getEntity () ; if ( ! ( affinityGroup . getEntityIds () . remove ( asGuid ( id ) ) ) ) { throw new javax.ws.rs.WebApplicationException ( Response.Status.NOT_FOUND ) ; } return performAction ( VdcActionType.EditAffinityGroup , new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters ( affinityGroup . getId () , affinityGroup ) ) ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , null ) ; try { resource . update ( getUpdate () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void create10GBVmWith11GbAvailableAndA5GbBuffer ( ) throws java.lang.Exception { mockMaxPciSlots () ; mockStorageDomainDaoGetAllForStoragePool () ; mockUninterestingMethods () ; mockGetAllSnapshots () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( storageDomainValidator ) . isDomainWithinThresholds () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( storageDomainValidator ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers . anyList () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
protected void buildFilesForOvfs ( java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.String > > ovfs , org.ovirt.engine.core.utils.archivers.tar.InMemoryTar inMemoryTar ) throws java.lang.Exception { for ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.String > pair : ovfs ) { if ( ( pair . getSecond () ) != null ) { inMemoryTar . addTarEntry ( pair . getSecond () . getBytes () , ( ( pair . getFirst () ) + STRING_CONSTANT ) ) ; } } }
@ java.lang.Override public boolean isValid ( org.ovirt.engine.core.common.businessentities.VmBase value , javax.validation.ConstraintValidatorContext context ) { if ( ( value . getTimeZone () ) == null ) { return true ; } org.ovirt.engine.core.common.TimeZoneType timeZoneType = ( osRepository . isWindows ( value . getOsId () ) ) ? org.ovirt.engine.core.common.TimeZoneType.WINDOWS_TIMEZONE : org.ovirt.engine.core.common.TimeZoneType.GENERAL_TIMEZONE ; return timeZoneType . getTimeZoneList () . containsKey ( value . getTimeZone () ) ; }
public static org.ovirt.engine.api.restapi.DeprecatedVersionInfo parse ( java.lang.String specification ) { java.util.regex.Matcher matcher = org.ovirt.engine.api.restapi.DeprecatedVersionInfo.VERSION_RE . matcher ( specification ) ; if ( ! ( matcher . matches () ) ) { org.ovirt.engine.api.restapi.DeprecatedVersionInfo.log . error ( ( STRING_CONSTANT + STRING_CONSTANT ) , specification , org.ovirt.engine.api.restapi.DeprecatedVersionInfo.VERSION_RE ) ; return null ; } java.lang.String version = matcher . group ( org.ovirt.engine.api.restapi.DeprecatedVersionInfo.VERSION_GROUP ) ; java.lang.String deprecating = matcher . group ( org.ovirt.engine.api.restapi.DeprecatedVersionInfo.DEPRECATING_GROUP ) ; java.lang.String removing = matcher . group ( org.ovirt.engine.api.restapi.DeprecatedVersionInfo.REMOVING_GROUP ) ; return new org.ovirt.engine.api.restapi.DeprecatedVersionInfo ( version , deprecating , removing ) ; }
private void addVnicProfile ( org.ovirt.engine.core.common.businessentities.network.Network network , boolean publicUse ) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile () ; vnicProfile . setName ( network . getName () ) ; vnicProfile . setNetworkId ( network . getId () ) ; org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters ( vnicProfile , true ) ; parameters . setPublicUse ( publicUse ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.AddVnicProfile , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { sourceListModel . getSearchCommand () . execute () ; } } ) ; }
private void registerModelPropertyChangeListener () { model . getPropertyChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isSelected = model . getIsSelected () ; org.ovirt.engine.ui.common.widget.ModelBoundCheckBox . super . setValue ( isSelected , true ) ; } } ) ; }
@ java.lang.Override public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.VmPool selectedItem ) { driver . edit ( getDetailModel () ) ; monitorCount . setText ( java.lang.String . valueOf ( getDetailModel () . getMonitorCount () ) ) ; isStateless . setText ( java.lang.Boolean . toString ( getDetailModel () . getIsStateless () ) ) ; oS . setText ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getOsName ( getDetailModel () . getOS () ) ) ; formBuilder . update ( getDetailModel () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ org.junit.Test public void testExecuteQueryCommand ( ) throws java.io.IOException { getQuery () . executeQueryCommand () ; java.util.Map < java.lang.String , java.lang.String > servers = getQuery () . getQueryReturnValue () . getReturnValue () ; org.junit.Assert . assertNotNull ( servers ) ; org.junit.Assert . assertEquals ( getAddedServers () , servers ) ; }
private void mockGraphicsDevices ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDevice = new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ; graphicsDevice . setDeviceId ( Guid.Empty ) ; graphicsDevice . setVmId ( vmId ) ; org.mockito.Mockito . when ( deviceDao . getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.GRAPHICS ) ) . thenReturn ( java.util.Arrays . asList ( graphicsDevice ) ) ; org.mockito.Mockito . doReturn ( deviceDao ) . when ( dbFacade ) . getVmDeviceDao () ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareLocalStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain localDomain = createDataStorageDomain ( status , name , LOCAL_SD_ID ) ; localDomain . setStorageType ( StorageType.LOCALFS ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( localDomain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; return localDomain ; }
protected boolean isLiveSnapshotApplicable () { return ( ( ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getParameters () . getParentCommand () ) != ( org.ovirt.engine.core.common.action.VdcActionType.RunVm ) ) && ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getVm () ) != null ) ) && ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getVm () . isRunning () ) || ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getVm () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) ) && ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getVm () . getRunOnVds () ) != null ) ; }
@ org.junit.Test @ java.lang.Override public void testList ( ) throws java.lang.Exception { int numOfEntitiesInList = NUMBER_CONSTANT ; setUpGetEntityExpectations ( VdcQueryType.GetStorageServerConnectionExtensionsByHostId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionsResourceTest.hostID } , getEntityList ( numOfEntitiesInList ) ) ; javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection . setUriInfo ( uriInfo ) ; control . replay () ; java.util.List < org.ovirt.engine.api.model.StorageConnectionExtension > retCollection = getCollection () ; assertNotNull ( retCollection ) ; assertEquals ( numOfEntitiesInList , retCollection . size () ) ; }
@ org.junit.Before public void prepareParams () { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase () ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand < org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase > ( parameters , null ) ) ; org.mockito.Mockito . doReturn ( storageConnDao ) . when ( command ) . getStorageConnDao () ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( command ) . getStorageDomainDao () ; }
private void mockStorageDomainDAO ( java.util.List < org.ovirt.engine.core.common.businessentities.storage_domains > storageDomains ) { org.mockito.Mockito . doReturn ( storageDomainDAO ) . when ( command ) . getStorageDomainDAO () ; for ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain : storageDomains ) { org.mockito.Mockito . when ( storageDomainDAO . getForStoragePool ( storageDomain . getId () , storagePoolId ) ) . thenReturn ( storageDomain ) ; } }
@ java.lang.Override public javax.ws.rs.core.Response remove ( java.lang.String id , org.ovirt.engine.api.model.Action action ) { getEntity ( id ) ; if ( ( action . isSetDetach () ) && ( action . isDetach () ) ) { return performAction ( VdcActionType.DetachDiskFromVm , new org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters ( parentId , org.ovirt.engine.core.compat.Guid . createGuidFromStringDefaultEmpty ( id ) , true , false ) ) ; } else { return remove ( id ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; java.util.Collections . sort ( storageDomains , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; setStorageDomains ( storageDomains ) ; setDisks ( value ) ; }
@ java.lang.Override public org.ovirt.engine.api.v3.types.V3RngDevice adapt ( org.ovirt.engine.api.model.RngDevice from ) { org.ovirt.engine.api.v3.types.V3RngDevice to = new org.ovirt.engine.api.v3.types.V3RngDevice () ; if ( from . isSetRate () ) { to . setRate ( org.ovirt.engine.api.v3.adapters.V3OutAdapters . adaptOut ( from . getRate () ) ) ; } if ( from . isSetSource () ) { to . setSource ( from . getSource () . value () ) ; } return to ; }
public void fillTagsRecursive ( org.ovirt.engine.core.common.businessentities.Tags tagToFill , java.util.List < org.ovirt.engine.core.common.businessentities.Tags > children ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > () ; for ( org.ovirt.engine.core.common.businessentities.Tags tag : children ) { if ( ( tag . gettype () ) == ( org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag ) ) { list . add ( tag ) ; if ( ( tag . getChildren () ) != null ) { fillTagsRecursive ( tag , tag . getChildren () ) ; } } } tagToFill . setChildren ( list ) ; }
@ org.junit.Test public void testUpdateReadOnly ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmDisk , org.ovirt.engine.core.common.action.UpdateVmDiskParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID , java.lang.Boolean.TRUE } , true , true ) ) ; org.ovirt.engine.api.model.Disk disk = resource . update ( getUpdate () ) ; assertNotNull ( disk ) ; }
private void bindFrontendInfrastructure () { bind ( org.ovirt.engine.ui.frontend.Frontend . class ) . in ( com.google.inject.Singleton . class ) ; requestStaticInjection ( Frontend.InstanceHolder . class ) ; bind ( org.ovirt.engine.ui.frontend.communication.VdcOperationManager . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.frontend.communication.OperationProcessor . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.frontend.communication.CommunicationProvider . class ) . to ( org.ovirt.engine.ui.frontend.communication.GWTRPCCommunicationProvider . class ) . in ( com.google.inject.Singleton . class ) ; }
@ org.junit.Test public void getFreeVfOneFreeVf () { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , freeVfs . size () ) ; org.junit.Assert . assertTrue ( freeVfs . contains ( networkDeviceHelper . getFreeVf ( nic , null ) ) ) ; }
private void rollback () { org.ovirt.engine.ui.uicompat.Enlistment enlistment = new org.ovirt.engine.ui.uicompat.Enlistment ( context ) ; enlistment . getDoneEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { doneOnRollbackHandler () ; } } ) ; org.ovirt.engine.ui.uicompat.IEnlistmentNotification notification = notifications . get ( rollbackIndex ) ; notification . rollback ( enlistment ) ; }
protected org.ovirt.engine.core.bll.MultipleActionsRunnerBaseTest.TestCommand createCommand ( boolean validationSucceeds , boolean executionSucceeds ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = new org.ovirt.engine.core.common.action.VdcReturnValueBase () ; returnValueBase . setValid ( validationSucceeds ) ; returnValueBase . setSucceeded ( executionSucceeds ) ; org.ovirt.engine.core.bll.MultipleActionsRunnerBaseTest.TestCommand command = new org.ovirt.engine.core.bll.MultipleActionsRunnerBaseTest.TestCommand ( returnValueBase ) ; return org.mockito.Mockito . spy ( command ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendFileResource resource = new org.ovirt.engine.api.restapi.resource.BackendFileResource ( NAMES [ NUMBER_CONSTANT ] , collection ) ; collection . setUriInfo ( setUpUriExpectations ( null ) ) ; setUpQueryExpectations ( STRING_CONSTANT , null ) ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
static void addAddress ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { java.util.Map < java.lang.String , java.lang.String > addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils . string2Map ( vmDevice . getAddress () ) ; if ( ! ( addressMap . isEmpty () ) ) { struct . put ( VdsProperties.Address , addressMap ) ; } }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.Cluster postPopulate ( org.ovirt.engine.core.common.businessentities.Cluster model ) { org.ovirt.engine.api.model.ErrorHandling errorHandling = new org.ovirt.engine.api.model.ErrorHandling () ; errorHandling . setOnError ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.MigrateOnError . class ) ) ; model . setErrorHandling ( errorHandling ) ; model . getSerialNumber () . setPolicy ( SerialNumberPolicy.CUSTOM ) ; model . getRequiredRngSources () . getRequiredRngSources () . clear () ; model . getRequiredRngSources () . getRequiredRngSources () . add ( RngSource.RANDOM ) ; return model ; }
@ java.lang.Override public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ! ( o instanceof org.ovirt.engine.core.common.businessentities.HostDeviceId ) ) { return false ; } org.ovirt.engine.core.common.businessentities.HostDeviceId other = ( ( org.ovirt.engine.core.common.businessentities.HostDeviceId ) ( o ) ) ; return ( java.util.Objects . equals ( hostId , other.hostId ) ) && ( java.util.Objects . equals ( deviceName , other.deviceName ) ) ; }
@ org.junit.Before public void mockVdsDao () { org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter search = new org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter () ; org.mockito.Mockito . when ( vdsDao . getAllWithQuery ( org.mockito.Matchers . matches ( org.ovirt.engine.core.bll.SearchQueryTest . getVdsRegexString ( search ) ) ) ) . thenReturn ( vdsResultList ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setCpuFlags ( STRING_CONSTANT ) ; vds . setClusterCompatibilityVersion ( org.ovirt.engine.core.compat.Version . getLast () ) ; vdsResultList . add ( vds ) ; }
@ com.google.inject.Provides @ com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel , org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel > getNetworkGeneralProvider ( com.google.gwt.event.shared.EventBus eventBus , com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > defaultConfirmPopupProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel > mainModelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel > modelProvider ) { org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel , org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel > result = new org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider ( eventBus , defaultConfirmPopupProvider ) ; result . setMainModelProvider ( mainModelProvider ) ; result . setModelProvider ( modelProvider ) ; return result ; }
@ org.junit.Test public void validateFailsOnNullHookId () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( null ) , null ) ) ; setUpMocksForUpdate () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED . toString () ) ) ; }
@ org.junit.Test public void executeCommandFailedWhenServerIdPresent () { setUpMocksForUpdate () ; mockForReadContent ( false , EngineError.GlusterHookNotFound ) ; try { cmd . executeCommand () ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.junit.Assert . assertEquals ( EngineError.GlusterHookNotFound , e . getErrorCode () ) ; } org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.ArgumentMatchers . any () ) ; }
private java.lang.String getIpTableConfig () { java.lang.String ipTablesConfig = org.ovirt.engine.core.common.config.Config . < java.lang.String > GetValue ( ConfigValues.IPTablesConfig ) ; java.lang.String serviceIPTablesConfig = STRING_CONSTANT ; if ( supportVirt ) { serviceIPTablesConfig += org.ovirt.engine.core.common.config.Config . < java.lang.String > GetValue ( ConfigValues.IPTablesConfigForVirt ) ; } if ( supportGluster ) { serviceIPTablesConfig += org.ovirt.engine.core.common.config.Config . < java.lang.String > GetValue ( ConfigValues.IPTablesConfigForGluster ) ; } ipTablesConfig = ipTablesConfig . replace ( org.ovirt.engine.core.bll.VdsInstaller.IP_TABLE_CUSTOM_RULES_PLACE_HOLDER , serviceIPTablesConfig ) ; return ipTablesConfig ; }
@ org.junit.Test public void testGetEntityNameByIdAndTypeForNetwork () { org.ovirt.engine.core.common.businessentities.network.Network network = networkDao . get ( org.ovirt.engine.core.dao.EntityDaoImplTest.NETWORK_ID ) ; org.junit.Assert . assertNotNull ( network ) ; java.lang.String name = network . getName () ; org.junit.Assert . assertEquals ( name , underTest . getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.NETWORK_ID , VdcObjectType.Network ) ) ; }
public static void getGlusterRemoveBricksStatus ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks ) { aQuery . setHandleFailure ( true ) ; org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters ( clusterId , volumeId , bricks ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterVolumeRemoveBricksStatus , parameters , aQuery ) ; }
protected void sortStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > vmDisks ) { java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comp = null ; for ( java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comparator : getStorageDomainComparators ( vmDisks ) ) { comp = ( comp == null ) ? comparator . reversed () : comp . thenComparing ( comparator . reversed () ) ; } java.util.Collections . sort ( domainsInPool , comp ) ; }
@ java.lang.Override public void rollback () { log . errorFormat ( STRING_CONSTANT , this . getClass () . getName () ) ; try { if ( isQuotaDependant () ) { rollbackQuota () ; } } catch ( java.lang.NullPointerException e ) { log . error ( STRING_CONSTANT , e ) ; } cancelTasks () ; }
@ java.lang.Override @ org.junit.Before public void setUp () { super . setUp () ; vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setStatus ( VMStatus.Down ) ; org.mockito.Mockito . when ( vmDao . getVmsListForDisk ( getDiskImageId () , java.lang.Boolean.FALSE ) ) . thenReturn ( java.util.Collections . singletonList ( vm ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; behavior . postInitTemplate ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterTemplatesByArchitecture ( templates , dataCenterWithCluster . getCluster () . getArchitecture () ) ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , getIscsiBondContainingNetwork () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.NETWORK_ID } , getEntityList () ) ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void testAddOperationAction () { org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > testOperation = new org.ovirt.engine.ui.frontend.communication.VdcOperation ( org.ovirt.engine.core.common.action.VdcActionType.AddNetworkOnProvider , new org.ovirt.engine.core.common.action.VdcActionParametersBase () , null ) ; testManager . addOperation ( testOperation ) ; org.mockito.Mockito . verify ( mockOperationProcessor ) . processOperation ( testManager ) ; org.mockito.Mockito . verify ( mockEventBus ) . fireEvent ( org.mockito.Matchers . any ( org.ovirt.engine.ui.frontend.communication.EngineSessionRefreshedEvent . class ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , testOperation , testManager . pollOperation () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.VmNumaNode mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmNumaNode entity = org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeRowMapper . mapRow ( rs , rowNum ) ; entity . setCpuIds ( new java.util.ArrayList < java.lang.Integer > ( java.util.Arrays . asList ( ( ( java.lang.Integer [] ) ( rs . getArray ( STRING_CONSTANT ) . getArray () ) ) ) ) ) ; return entity ; }
public org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface add ( java.lang.String name , java.util.Map < java.lang.String , java.lang.String > customProperties ) { java.util.Objects . requireNonNull ( name ) ; if ( customProperties == null ) { customProperties = new java.util.HashMap <> () ; } this . customProperties . put ( name , customProperties ) ; return this ; }
@ java.lang.Override protected void service ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { try { org.ovirt.engine.core.sso.utils.SsoUtils . sendJsonData ( response , org.ovirt.engine.core.sso.servlets.OpenIdUtils . getJson ( buildResponse ( request ) ) ) ; } catch ( java.lang.Exception ex ) { org.ovirt.engine.core.sso.utils.SsoUtils . sendJsonDataWithMessage ( request , response , SsoConstants.ERR_CODE_SERVER_ERROR , ex ) ; } }
@ org.junit.Test public void validateImageNotFound ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST . toString () ) ) ; }
protected < T extends org.ovirt.engine.core.dao.DAO > T getDao ( java.lang.Class < T > daoType ) { T dao = org.ovirt.engine.core.dao.DaoFactory . get ( daoType ) ; if ( dao instanceof org.ovirt.engine.core.dao.BaseDAODbFacade ) { org.ovirt.engine.core.dao.BaseDAODbFacade dbFacadeDAO = ( ( org.ovirt.engine.core.dao.BaseDAODbFacade ) ( dao ) ) ; dbFacadeDAO . setTemplate ( jdbcTemplate ) ; dbFacadeDAO . setDialect ( dbEngineDialect ) ; dbFacadeDAO . setDbFacade ( this ) ; } return dao ; }
@ org.junit.Test public void testUpdate () { org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnitToUpdate = dao . get ( FixturesTool.POLICY_UNIT_MIGRATION ) ; java.util.Map < java.lang.String , java.lang.String > map = new java.util.LinkedHashMap <> () ; map . put ( STRING_CONSTANT , STRING_CONSTANT ) ; policyUnitToUpdate . setParameterRegExMap ( map ) ; policyUnitToUpdate . setDescription ( STRING_CONSTANT ) ; dao . update ( policyUnitToUpdate ) ; org.ovirt.engine.core.common.scheduling.PolicyUnit result = dao . get ( policyUnitToUpdate . getId () ) ; org.junit.Assert . assertEquals ( result , policyUnitToUpdate ) ; }
@ org.junit.Test public void testGetByServerId () { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > services = dao . getByServerId ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVER1_ID ) ; org.junit.Assert . assertNotNull ( services ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , services . size () ) ; verifyServiceOnServer1 ( services . get ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest . setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpVnicProfilesQueryExpectations ( t ) ; collection . setUriInfo ( uriInfo ) ; try { org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest . getCollection () ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
@ java.lang.Override protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { super . onLogin ( loginModel ) ; org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . init () ; org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . getReportsInitEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { commonModelProvider . get () . updateReportsAvailability () ; } } ) ; performLogin ( loginModel ) ; }
@ java.lang.Override protected void teardown () { if ( ! ( org.ovirt.engine.core.bll.pm.StopVdsCommand . getParameters () . getKeepPolicyPMEnabled () ) ) { org.ovirt.engine.core.bll.pm.StopVdsCommand . getVds () . setPowerManagementControlledByPolicy ( false ) ; vdsDynamicDao . updateVdsDynamicPowerManagementPolicyFlag ( org.ovirt.engine.core.bll.pm.StopVdsCommand . getVdsId () , org.ovirt.engine.core.bll.pm.StopVdsCommand . getVds () . getDynamicData () . isPowerManagementControlledByPolicy () ) ; } }
@ org.junit.Test public void testStatisticalQuery ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = setUpStatisticalExpectations () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.Disk , org.ovirt.engine.core.common.businessentities.storage.DiskImage > statisticsResource = ( ( org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.Disk , org.ovirt.engine.core.common.businessentities.storage.DiskImage > ) ( resource . getStatisticsResource () ) ) ; assertNotNull ( statisticsResource ) ; verifyQuery ( statisticsResource . getQuery () , entity ) ; }
public static void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < > ) ( source ) ) . isEmpty () ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void runActionExecutionFailed ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.errors.VdcFault fault ) { if ( ( getEventsHandler () ) != null ) { java.lang.String translatedMessage = translateVdcFault ( fault ) ; fault . setMessage ( translatedMessage ) ; getEventsHandler () . runActionExecutionFailed ( actionType , fault ) ; } }
@ java.lang.Override public org.ovirt.engine.api.model.Network update ( org.ovirt.engine.api.model.Network incoming ) { org.ovirt.engine.api.model.Network network = map ( incoming , map ( get () ) ) ; network . getCluster () . setNetworkId ( network . getId () ) ; network . getCluster () . setClusterId ( cluster . getCluster () . getId () ) ; performAction ( VdcActionType.UpdateNetworkOnCluster , new org.ovirt.engine.core.common.action.NetworkClusterParameters ( network . getCluster () ) ) ; return get () ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getParametersForTask ( org.ovirt.engine.core.common.action.VdcActionType parentCommandType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = parameters . getParentParameters () ; if ( ( parentCommandType == ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ) || ( parentParameters == null ) ) { return parameters ; } parentParameters . setExecutionReason ( parameters . getExecutionReason () ) ; return parentParameters ; }
private void updateShareableDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.ShareableDiskEnabled , datacenter . getcompatibility_version () . getValue () ) ) ) ; getIsShareable () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS . shareableDiskNotSupported () ) ; getIsShareable () . setIsChangable ( ( isShareableDiskEnabled && ( isEditEnabled () ) ) ) ; }
@ org.junit.Test public void addISCSINonEmptyIqn () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( STRING_CONSTANT , StorageType.ISCSI , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newISCSIConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isConnWithSameDetailsExists ( newISCSIConnection , null ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
@ org.junit.Test public void addNotEmptyIdConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; newPosixConnection . setid ( org.ovirt.engine.core.compat.Guid . newGuid () . toString () ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection , null ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY ) ; }
@ java.lang.Override @ org.junit.jupiter.api.Test public void testListCrashClientLocale () { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpMacPoolsQueryExpectations ( t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; org.junit.jupiter.api.Assertions . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
@ org.junit.Test public void testDiscoverGeoRepDataWhenNoSessions () { org.mockito.Mockito . doReturn ( getSessionsVDSReturnVal ( NUMBER_CONSTANT ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.ArgumentMatchers . any () ) ; syncJob . discoverGeoRepData () ; org.mockito.Mockito . verify ( geoRepDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . save ( org.mockito.ArgumentMatchers . any () ) ; }
public static org.ovirt.engine.core.aaa.DirectoryGroup instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader reader ) throws com.google.gwt.user.client.rpc.SerializationException { java.lang.String directoryName = reader . readString () ; java.lang.String id = reader . readString () ; java.lang.String name = reader . readString () ; return new org.ovirt.engine.core.aaa.DirectoryGroup ( directoryName , id , name ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getEnableTrustedService () . getEntity () ) != null ) && ( ( java.lang.Boolean ) ( getEnableTrustedService () . getEntity () ) ) ) { getEnableGlusterService () . setEntity ( false ) ; getEnableGlusterService () . setIsChangable ( false ) ; } else { getEnableGlusterService () . setIsChangable ( true ) ; } }
@ org.junit.Test public void testValues () { org.ovirt.engine.core.searchbackend.DateEnumValueAutoCompleter comp = new org.ovirt.engine.core.searchbackend.DateEnumValueAutoCompleter ( org.ovirt.engine.core.searchbackend.Jedi . class ) ; java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , ( ( comps . contains ( STRING_CONSTANT ) ) || ( comps . contains ( STRING_CONSTANT ) ) ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; }
@ java.lang.Override protected void executeCommand () { int missingDiskCount = getMissingDiskCount () ; if ( missingDiskCount <= NUMBER_CONSTANT ) { setOvfUpdateStep ( OvfUpdateStep.OVF_UPLOAD ) ; updateOvfStoreContent () ; org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . setSucceeded ( true ) ; } else { setOvfUpdateStep ( OvfUpdateStep.OVF_STORES_CREATION ) ; org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . setSucceeded ( createOvfStoreDisks ( getMissingDiskCount () ) ) ; } }
@ org.junit.Test public void testGuestOs3 () { org.ovirt.engine.api.model.VM vm = new org.ovirt.engine.api.model.VM () ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; vmDynamic . setStatus ( VMStatus.Up ) ; vm . setDynamicData ( vmDynamic ) ; org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper . map ( vm , ( ( org.ovirt.engine.api.model.VM ) ( null ) ) ) ; }
@ java.lang.Override public void template_SelectedItemChanged () { super . template_SelectedItemChanged () ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel () . getTemplate () . getSelectedItem () ) ) ; if ( template == null ) { return; } setupWindowModelFrom ( template , template . getStoragePoolId () ) ; updateHostPinning ( template . getMigrationSupport () ) ; doChangeDefautlHost ( template . getDedicatedVmForVds () ) ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB , final int sizeRequired ) { mockVmTemplateDAOReturnVmTemplate () ; mockDiskImageDAOGetSnapshotById () ; mockStorageDomainDAOGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDAOGet ( domainSizeGB ) ; mockGetImageDomainsListVdsCommand () ; mockConfig () ; mockConfigSizeRequirements ( sizeRequired ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest . createVm () ; return vm ; }
@ java.lang.Override public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.IsWidget content ) { if ( slot == ( org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel ) ) { if ( content != null ) { container . insert ( content , NUMBER_CONSTANT ) ; this . actionPanel = content ; } else if ( ( this . actionPanel ) != null ) { container . remove ( this . actionPanel ) ; } } else { super . setInSlot ( slot , content ) ; } }
public void run () { try { org.ovirt.engine.core.notifier.NotificationService.log . debug ( STRING_CONSTANT ) ; startup () ; processEvents () ; if ( shouldDeleteHistory ) { deleteObseleteHistoryData () ; } org.ovirt.engine.core.notifier.NotificationService.log . debug ( STRING_CONSTANT ) ; } catch ( java.lang.Throwable e ) { if ( ! ( java.lang.Thread . interrupted () ) ) { org.ovirt.engine.core.notifier.NotificationService.log . error ( java.lang.String . format ( STRING_CONSTANT , e . getMessage () ) , e ) ; } } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > networkFilters = new java.util.ArrayList ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > ) ( returnValue . getReturnValue () ) ) ) ; networkFilters . add ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER ) ; getNetworkFilter () . setItems ( networkFilters ) ; initSelectedNetworkFilter () ; }
@ java.lang.Override public java.lang.Void runInTransaction () { copyVmDevices () ; addDiskPermissions () ; addVmPayload () ; updateSmartCardDevices () ; addVmWatchdog () ; addGraphicsDevice () ; setActionReturnValue ( getVm () . getId () ) ; setSucceeded ( true ) ; return null ; }
@ org.junit.Test public void testGetDataAndSetDataWithFullSession () { org.ovirt.engine.core.utils.ThreadLocalParamsContainer . setHttpSessionId ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , container . SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
private static void updateTimeoutLogableObject ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { int eventFloodRate = ( ( auditLogable . isExternal () ) && ( ( auditLogable . getEventFloodInSec () ) == NUMBER_CONSTANT ) ) ? NUMBER_CONSTANT : logType . getEventFloodRate () ; if ( eventFloodRate > NUMBER_CONSTANT ) { auditLogable . setEndTime ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( eventFloodRate ) ) ; auditLogable . setTimeoutObjectId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . composeObjectId ( auditLogable , logType ) ) ; } }
protected boolean validateNames () { boolean valid = true ; for ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData : ( ( java.lang.Iterable < org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData > ) ( getItems () ) ) ) { if ( ! ( validateName ( importVmData ) ) ) { valid = false ; } } if ( ! valid ) { onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } return valid ; }
private void populateCummulativeStatistics ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.FopStats > fopStats , org.ovirt.engine.ui.uicommonweb.models.ListModel profileStats ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.gluster.FopStats > > fopStatsEntities = new java.util.ArrayList <> () ; for ( int i = NUMBER_CONSTANT ; i < ( fopStats . size () ) ; i ++ ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.gluster.FopStats > fopStatEntity = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( fopStats . get ( i ) ) ; fopStatsEntities . add ( fopStatEntity ) ; } profileStats . setItems ( fopStatsEntities ) ; }
@ java.lang.Override protected java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > getParametersForChildCommand () { java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > sortedList = getParameters () . getImagesParameters () ; java.util.Collections . sort ( sortedList , new java.util.Comparator < org.ovirt.engine.core.common.action.VdcActionParametersBase > () { @ java.lang.Override public int compare ( org.ovirt.engine.core.common.action.VdcActionParametersBase o1 , org.ovirt.engine.core.common.action.VdcActionParametersBase o2 ) { return ( ( org.ovirt.engine.core.common.action.ImagesActionsParametersBase ) ( o1 ) ) . getDestinationImageId () . compareTo ( ( ( org.ovirt.engine.core.common.action.ImagesActionsParametersBase ) ( o2 ) ) . getDestinationImageId () ) ; } } ) ; return sortedList ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterClustersWithoutArchitecture ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) ; model . getCluster () . setItems ( clusters ) ; model . getCluster () . setIsEmpty ( clusters . isEmpty () ) ; model . updateControlsAvailability () ; stopProgress () ; }
@ java.lang.Override public void initTable ( org.ovirt.engine.ui.common.CommonApplicationConstants constants ) { this . constants = constants ; initTableColumns () ; initTableOverhead () ; handleRadioButtonClick ( null ) ; org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable . getModel () . getItemsChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { disksViewRadioGroup . setDiskStorageType ( getModel () . getDiskViewType () . getEntity () ) ; } } ) ; }
@ org.junit.Test public void testMemoryMapping () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setId ( Guid.Empty ) ; vds . setPhysicalMemMb ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper . map ( vds , ( ( org.ovirt.engine.api.model.Host ) ( null ) ) ) ; assertNotNull ( host . getMemory () ) ; assertEquals ( java.lang.Long . valueOf ( NUMBER_CONSTANT ) , host . getMemory () ) ; }
@ java.lang.Override public void setEntity ( org.ovirt.engine.core.common.businessentities.VmTemplate value ) { cluster = null ; super . setEntity ( value ) ; if ( ( getEntity () ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getClusterById ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object listModel , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; updateActionAvailability () ; } } ) , getEntity () . getVdsGroupId () ) ; } }
private void translateVolumeType ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity ) { org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator . getInstance () ; if ( translator . containsKey ( volumeEntity . getVolumeType () ) ) { getDetailModel () . setVolumeTypeSilently ( translator . get ( volumeEntity . getVolumeType () ) ) ; } }
private static void addSoundCard ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion ) { java.lang.String soundDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository . getSoundDevice ( vmBase . getOsId () , vdsGroupCompatibilityVersion ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmBase . getId () ) , VmDeviceGeneralType.SOUND , org.ovirt.engine.core.common.utils.VmDeviceType . getSoundDeviceType ( soundDevice ) , new java.util.HashMap < java.lang.String , java.lang.Object > () , true , true , null , false ) ; }
protected void doTestBadRemove ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmTemplate , org.ovirt.engine.core.common.action.VmTemplateParametersBase . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , canDo , success ) ) ; try { collection . remove ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
@ org.junit.Test public void testActivateNic ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmNicResource backendVmNicResource = ( ( org.ovirt.engine.api.restapi.resource.BackendVmNicResource ) ( resource ) ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setAllContentHeaderExpectation () ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ NUMBER_CONSTANT ] } ) ) ; verifyActionResponse ( backendVmNicResource . activate ( new org.ovirt.engine.api.model.Action () ) ) ; }
private void initGeneralForm () { org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel > modelProvider = new org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel > () { @ java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel getModel () { return getVmGeneralModel () ; } @ java.lang.Override public void onSubTabSelected () {} @ java.lang.Override public void onSubTabDeselected () {} } ; generalView = new org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmGeneralSubTabView ( modelProvider ) ; }
@ org.junit.Test public void testList () { resource . setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetHostDevicesByHostId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { HOST_ID } , getHostDeviceCollection () ) ; verifyHostDevices ( resource . list () . getHostDevices () ) ; }
private void waitForConnect ( ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { this . connected . await ( policy . getRetryTimeOut () , policy . getTimeUnit () ) ; } catch ( java.lang.InterruptedException e ) { disconnect ( STRING_CONSTANT ) ; throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } }
private static int setCDBootOrder ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices , int bootOrder ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils . isCD ( device ) ) && ( device . getIsPlugged () ) ) { device . setBootOrder ( ( ++ bootOrder ) ) ; } } return bootOrder ; }
@ org.junit.Test public void failsInNotImportedAndNotExists ( ) throws java.lang.Exception { mockGetExistingDomain ( false ) ; cmd . init () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( STRING_CONSTANT , cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; org.mockito.Mockito . verify ( backend , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . runInternalQuery ( org.mockito.ArgumentMatchers . eq ( QueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . verify ( cmd , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . executeCommand () ; }
@ org.junit.Test public void validateFailsForDifferentStorageDevice () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice ( STRING_CONSTANT , null ) ; org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice ( STRING_CONSTANT , null ) ; storageDevice2 . setDevType ( STRING_CONSTANT ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays . asList ( storageDevice1 , storageDevice2 ) ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
private static boolean addDeviceUpdateOnNextRun ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.EditableDeviceOnVmStatusField annotation , java.lang.Object key , java.lang.Object value , java.util.List < org.ovirt.engine.core.common.utils.VmDeviceUpdate > updates ) { return org.ovirt.engine.core.bll.VmHandler . addDeviceUpdateOnNextRun ( vmId , annotation . generalType () , annotation . type () , annotation . isReadOnly () , annotation . name () , key , value , updates ) ; }
public org.ovirt.engine.core.common.businessentities.network.VnicProfile createVnicProfile ( org.ovirt.engine.core.common.businessentities.network.Network net ) { org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile () ; profile . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; profile . setName ( net . getName () ) ; profile . setNetworkId ( net . getId () ) ; profile . setPortMirroring ( false ) ; org.ovirt.engine.core.common.businessentities.network.NetworkFilter defaultNetworkFilter = resolveVnicProfileDefaultNetworkFilter () ; profile . setNetworkFilterId ( ( defaultNetworkFilter == null ? null : defaultNetworkFilter . getId () ) ) ; return profile ; }
protected void postInitDisks () { onDataLoad () ; checkDestFormatCompatibility () ; stopProgress () ; getStorage () . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { onDataLoad () ; } } ) ; }
private void verifyCertificate ( org.ovirt.engine.api.model.Vm model ) { assertNotNull ( model . getDisplay () ) ; assertNotNull ( model . getDisplay () . getCertificate () ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmResourceTest.CERTIFICATE , model . getDisplay () . getCertificate () . getSubject () ) ; }
static org.ovirt.engine.api.model.VM getModel ( int index ) { org.ovirt.engine.api.model.VM model = new org.ovirt.engine.api.model.VM () ; model . setName ( NAMES [ index ] ) ; model . setDescription ( DESCRIPTIONS [ index ] ) ; model . setId ( GUIDS [ index ] . toString () ) ; model . setCluster ( new org.ovirt.engine.api.model.Cluster () ) ; model . getCluster () . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; return model ; }
@ org.junit.Test ( expected = org.apache.commons.lang.SerializationException . class ) public void testDeserializeVdcActionParameters () { org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer () . deserialize ( getVdcActionParamsJson () , org.ovirt.engine.core.common.action.VdcActionParametersBase . class ) ; org.junit.Assert . assertNotNull ( params . getLockProperties () ) ; org.junit.Assert . assertTrue ( params . getLockProperties () . isWait () ) ; org.junit.Assert . assertEquals ( Scope.None , params . getLockProperties () . getScope () ) ; }
private java.lang.String extractRpmVersion ( java.lang.String rpmName ) { if ( ( rpmName == null ) || ( rpmName . isEmpty () ) ) { return rpmName ; } java.util.regex.Matcher matchToolPattern = org.ovirt.engine.core.compat.RpmVersion.rpmCompiled . matcher ( rpmName ) ; java.lang.String rawString = null ; if ( ( matchToolPattern . find () ) && ( ( matchToolPattern . groupCount () ) > NUMBER_CONSTANT ) ) { rawString = matchToolPattern . group ( NUMBER_CONSTANT ) ; return extractRpmVersion ( rawString . toCharArray () ) ; } return null ; }
private void mockFencedHost () { fencedHost = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.VDS . class ) ; org.mockito.Mockito . when ( fencedHost . getId () ) . thenReturn ( org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCECD_HOST_ID ) ; org.mockito.Mockito . when ( fencedHost . getVdsGroupId () ) . thenReturn ( org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCED_HOST_CLUSTER_ID ) ; org.mockito.Mockito . when ( fencedHost . getStoragePoolId () ) . thenReturn ( org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCED_HOST_DATACENTER_ID ) ; org.mockito.Mockito . when ( fencedHost . getHostName () ) . thenReturn ( STRING_CONSTANT ) ; org.mockito.Mockito . when ( fencedHost . getFenceAgents () ) . thenReturn ( java.util.Arrays . asList ( createFenceAgent ( org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCECD_HOST_ID , STRING_CONSTANT ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNicSyncedWithNetwork ( java.lang.String nicName , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createVdsInterface ( org.ovirt.engine.core.compat.Guid . newGuid () , nicName , false , null , network . getVlanId () , network . getName () , network . isVmNetwork () , network . getAddr () , null ) ; return nic ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.StorageDomain object ) { if ( ( object . getStorageDomainType () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { return org.ovirt.engine.ui.uicompat.EnumTranslator . getInstance () . get ( object . getStorageDomainSharedStatus () ) ; } else { return org.ovirt.engine.ui.uicompat.EnumTranslator . getInstance () . get ( object . getStatus () ) ; } }
private void failureEventHandler ( final java.lang.Throwable caught ) { java.lang.String errorMessage ; if ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) { errorMessage = ( ( getConstants () . requestToServerFailedWithCode () ) + STRING_CONSTANT ) + ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode () ) ; } else { errorMessage = ( ( getConstants () . requestToServerFailed () ) + STRING_CONSTANT ) + ( caught . getLocalizedMessage () ) ; } failureEventHandler ( errorMessage ) ; }
@ org.junit.Test public void test32BitMemoryExceedsLimit () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setClusterCompatibilityVersion ( Version.v4_0 ) ; vm . setVmMemSizeMb ( ( ( org.ovirt.engine.core.bll.validator.RunVmValidatorTest.MEMORY_LIMIT_32_BIT ) + NUMBER_CONSTANT ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateMemorySize ( vm ) , false , EngineMessage.ACTION_TYPE_FAILED_MEMORY_EXCEEDS_SUPPORTED_LIMIT ) ; }
private void newVm () { if ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel . getWindow () ) != null ) { return; } java.util.List < org.ovirt.engine.ui.uicommonweb.UICommand > commands = new java.util.ArrayList <> () ; commands . add ( org.ovirt.engine.ui.uicommonweb.UICommand . createDefaultOkUiCommand ( STRING_CONSTANT , this ) ) ; commands . add ( org.ovirt.engine.ui.uicommonweb.UICommand . createCancelUiCommand ( STRING_CONSTANT , this ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ( new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior () , this ) ; setupNewVmModel ( model , VmType.Server , getSystemTreeSelectedItem () , commands ) ; }
@ java.lang.Override public void run () { for ( org.ovirt.engine.core.compat.Guid vdsId : getRunVdssList () ) { if ( ! ( vdsId . equals ( getCurrentVdsId () ) ) ) { org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.FailedToRunVm , new org.ovirt.engine.core.common.vdscommands.FailedToRunVmVDSCommandParameters ( vdsId ) ) ; } } }
public org.ovirt.engine.core.utils.ovf.xml.XmlNode selectSingleNode ( java.lang.String string ) { try { javax.xml.xpath.XPathFactory factory = javax.xml.xpath.XPathFactory . newInstance () ; javax.xml.xpath.XPath xPath = factory . newXPath () ; java.lang.Object o = xPath . evaluate ( string , node , javax.xml.xpath.XPathConstants.NODE ) ; return o != null ? new org.ovirt.engine.core.utils.ovf.xml.XmlNode ( ( ( org.w3c.dom.Node ) ( o ) ) ) : null ; } catch ( javax.xml.xpath.XPathExpressionException e ) { throw new java.lang.RuntimeException ( ( STRING_CONSTANT + string ) , e ) ; } }
static org.ovirt.engine.api.model.MacPool setUpEntityExpectations ( org.ovirt.engine.api.model.MacPool entity , int index ) { org.mockito.Mockito . when ( entity . getId () ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito . when ( entity . getName () ) . thenReturn ( NAMES [ index ] ) ; org.mockito.Mockito . when ( entity . getDescription () ) . thenReturn ( DESCRIPTIONS [ index ] ) ; return entity ; }
private boolean stopVms () { for ( org.ovirt.engine.core.common.businessentities.VM vm : getCachedVmsInPool () ) { if ( ! ( vm . isDown () ) ) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction ( VdcActionType.StopVm , org.ovirt.engine.core.bll.RemoveVmPoolCommand . withRootCommandInfo ( new org.ovirt.engine.core.common.action.StopVmParameters ( vm . getId () , org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL ) ) , org.ovirt.engine.core.bll.RemoveVmPoolCommand . cloneContextAndDetachFromParent () ) ; if ( ! ( result . getSucceeded () ) ) { return false ; } } } return true ; }
public boolean getIsQxlSupported () { boolean isLinux = getIsLinuxOS () ; boolean isQxl = ( getDisplayType () . getSelectedItem () ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ; boolean isSpice = ( getGraphicsType () . getSelectedItem () ) == ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes.SPICE ) ; boolean clusterSupportsSinglePci = ( Version.v3_3 . compareTo ( getCompatibilityVersion () ) ) <= NUMBER_CONSTANT ; return ( ( isLinux && isQxl ) && isSpice ) && clusterSupportsSinglePci ; }
@ org.junit.Test public void testImport ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain () ; storageDomain . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster () ; cluster . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; doTestImport ( storageDomain , cluster , false ) ; }
@ java.lang.Override protected boolean canDoAction () { if ( ( ( org.ovirt.engine.core.bll.AddVmFromScratchCommand . getVdsGroup () ) == null ) && ( Guid.Empty . equals ( super . getStorageDomainId () ) ) ) { return failCanDoAction ( VdcBllMessages.VM_CLUSTER_IS_NOT_VALID ) ; } if ( ! ( org.ovirt.engine.core.bll.ImagesHandler . CheckImagesConfiguration ( getStorageDomainId () , org.ovirt.engine.core.bll.AddVmFromScratchCommand . getParameters () . getDiskInfoList () , org.ovirt.engine.core.bll.AddVmFromScratchCommand . getReturnValue () . getCanDoActionMessages () ) ) ) { return false ; } return super . canDoAction () ; }
@ org.junit.Test public void testRemove () { org.ovirt.engine.core.common.businessentities.network.Network result = dao . getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME2 , FixturesTool.DATA_CENTER ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( result . getDnsResolverConfiguration () . getId () , FixturesTool.EXISTING_DNS_RESOLVER_CONFIGURATION_TO_REMOVE ) ; dao . remove ( result . getId () ) ; org.junit.Assert . assertNull ( dao . getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME2 , FixturesTool.DATA_CENTER ) ) ; org.junit.Assert . assertNull ( dnsResolverConfigurationDao . get ( FixturesTool.EXISTING_DNS_RESOLVER_CONFIGURATION_TO_REMOVE ) ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetDiskProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , null ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void succeedWhenStartupTimeoutHasPassed () { java.util.List < java.lang.String > messages = new java.util.LinkedList <> () ; org.mockito.Mockito . when ( backend . getStartedAt () ) . thenReturn ( new org.ovirt.engine.core.compat.DateTime ( ( ( new java.util.Date () . getTime () ) - NUMBER_CONSTANT ) ) ) ; boolean result = validator . isStartupTimeoutPassed ( messages ) ; org.junit.Assert . assertTrue ( result ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > getAllForStorageDomainByEntityType ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.VmEntityType entityType ) { return getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.UnregisteredOVFDataDAODbFacadeImpl.OvfEntityDataRowMapper.instance , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , storageDomainId ) . addValue ( STRING_CONSTANT , ( entityType != null ? entityType . name () : null ) ) ) ; }
protected org.ovirt.engine.core.common.action.ImportVmParameters createParameters () { final org.ovirt.engine.core.common.businessentities.VM v = createVM () ; v . setVmName ( STRING_CONSTANT ) ; return new org.ovirt.engine.core.common.action.ImportVmParameters ( v , org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.compat.Guid . NewGuid () ) ; }
@ java.lang.Override protected void configure () { bind ( org.ovirt.engine.ui.webadmin.plugin.PluginManager . class ) . asEagerSingleton () ; bind ( org.ovirt.engine.ui.webadmin.plugin.PluginEventHandler . class ) . asEagerSingleton () ; bind ( org.ovirt.engine.ui.webadmin.plugin.api.PluginUiFunctions . class ) . in ( com.google.inject.Singleton . class ) ; bind ( DynamicUrlContentTabPresenter.ViewDef . class ) . to ( org.ovirt.engine.ui.webadmin.section.main.view.DynamicUrlContentTabView . class ) ; bind ( org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxyFactory . class ) . in ( com.google.inject.Singleton . class ) ; bindPresenterWidget ( org.ovirt.engine.ui.webadmin.section.main.presenter.popup.DynamicUrlContentPopupPresenterWidget . class , DynamicUrlContentPopupPresenterWidget.ViewDef . class , org.ovirt.engine.ui.webadmin.section.main.view.popup.DynamicUrlContentPopupView . class ) ; }
protected boolean validateName ( java.lang.String newVmName , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > entity , org.ovirt.engine.ui.uicommonweb.validation.IValidation [] validators ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > temp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel () ; temp . setIsValid ( true ) ; temp . setEntity ( newVmName ) ; temp . validateEntity ( validators ) ; if ( ! ( temp . getIsValid () ) ) { entity . setInvalidityReasons ( temp . getInvalidityReasons () ) ; entity . setIsValid ( false ) ; } return temp . getIsValid () ; }
public static void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
@ org.junit.Before public void mockQuotaDao () { quota = mockStorageQuota ( quotaGuid ) ; org.mockito.Mockito . when ( quotaDao . getById ( quotaGuid ) ) . thenReturn ( quota ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = new java.util.ArrayList <> () ; quotaList . add ( new org.ovirt.engine.core.common.businessentities.Quota () ) ; quotaList . add ( new org.ovirt.engine.core.common.businessentities.Quota () ) ; org.mockito.Mockito . when ( quotaDao . getQuotaByStoragePoolGuid ( storagePoolUUID ) ) . thenReturn ( quotaList ) ; org.mockito.Mockito . when ( quotaDao . isQuotaInUse ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( false ) ; }
@ java.lang.Override protected void executeCommand () { if ( shouldSkipCommandExecutionCached () ) { org.ovirt.engine.core.bll.VmCommand . setSucceeded ( true ) ; return; } executeVmCommand () ; if ( ( ( ( shouldUpdateHostedEngineOvf () ) && ( ( org.ovirt.engine.core.bll.VmCommand . getVm () ) != null ) ) && ( org.ovirt.engine.core.bll.VmCommand . getVm () . isHostedEngine () ) ) && ( org.ovirt.engine.core.bll.VmCommand . getSucceeded () ) ) { updateHeOvf () ; } }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; setUpGetGraphicsExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Vm vm = resource . get () ; assertTrue ( vm . isSetStatistics () ) ; verifyModel ( vm , NUMBER_CONSTANT ) ; } finally { accepts . clear () ; } }
@ org.junit.Test public void nameNotUsed () { org.mockito.Mockito . when ( dbFacade . getVdsDao () ) . thenReturn ( hostDao ) ; validator = new org.ovirt.engine.core.bll.validator.HostValidator ( dbFacade , host , hostedEngineHelper ) ; org.junit.Assert . assertThat ( validator . nameNotUsed () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private static void testParseLunFromXmlRpcForDevtypeField ( org.ovirt.engine.core.common.businessentities.StorageType expectedStorageType , java.lang.String mockDevtype ) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xlun = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct () ; xlun . add ( GetDeviceListVDSCommand.DEVTYPE_FIELD , mockDevtype ) ; org.ovirt.engine.core.common.businessentities.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . ParseLunFromXmlRpc ( xlun ) ; org.junit.Assert . assertEquals ( expectedStorageType , lun . getLunType () ) ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.profiles.NetworkProfilesModel model ) { super . edit ( model ) ; model . getDcId () . getEntityChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { dcId = model . getDcId () . getEntity () ; } } ) ; }
@ java.lang.Override public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { java.util.List < java.lang.String > items = ( ( java.util.List < java.lang.String > ) ( object . getPmProxyPreferencesList () . getItems () ) ) ; java.lang.String selectedItem = ( ( proxyListBox . getSelectedIndex () ) >= NUMBER_CONSTANT ) ? items . get ( proxyListBox . getSelectedIndex () ) : null ; object . getPmProxyPreferencesList () . setSelectedItem ( selectedItem ) ; }
@ org.junit.Test public void testGetNotFound2 ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( asList ( getEntity ( NUMBER_CONSTANT ) ) ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Before public void setUp () { hostWithCpus = new org.ovirt.engine.core.common.businessentities.VDS () ; hostWithCpus . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; hostWithCpus . setOnlineCpus ( STRING_CONSTANT ) ; hostWithoutCpus = new org.ovirt.engine.core.common.businessentities.VDS () ; hostWithoutCpus . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; hostWithoutCpus . setOnlineCpus ( null ) ; perHostMessages = new org.ovirt.engine.core.common.scheduling.PerHostMessages () ; vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup () ; }
@ org.junit.Test public void iscsiBondWithTheSameNameDoesNotExistInDataCenter () { java.util.List < org.ovirt.engine.core.common.businessentities.IscsiBond > iscsiBonds = new java.util.ArrayList <> () ; org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.compat.Guid . newGuid () ; iscsiBonds . add ( createIscsiBond ( STRING_CONSTANT , dataCenterId ) ) ; iscsiBonds . add ( createIscsiBond ( STRING_CONSTANT , dataCenterId ) ) ; org.mockito.Mockito . doReturn ( iscsiBonds ) . when ( iscsiBondDao ) . getAllByStoragePoolId ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( ValidationResult.VALID , validator . iscsiBondWithTheSameNameExistInDataCenter ( createIscsiBond ( STRING_CONSTANT , dataCenterId ) ) ) ; }
public static org.ovirt.engine.core.bll.ValidationResult isCinderHasNoImages ( org.ovirt.engine.core.compat.Guid storageDomainId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > cinderDisks = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper . getDiskImageDao () . getAllForStorageDomain ( storageDomainId ) ; if ( ! ( cinderDisks . isEmpty () ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ERROR_CANNOT_DETACH_CINDER_PROVIDER_WITH_IMAGES ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand ( VDSCommandType.StopRebalanceGlusterVolume , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters ( upServer . getId () , getGlusterVolumeName () ) ) ; if ( ! ( vdsReturnaValue . getSucceeded () ) ) { handleVdsError ( AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED , vdsReturnaValue . getVdsError () . getMessage () ) ; setSucceeded ( false ) ; return; } endStepJob () ; releaseVolumeLock () ; setSucceeded ( vdsReturnaValue . getSucceeded () ) ; }
@ java.lang.Override protected void init () { resource = new org.ovirt.engine.api.restapi.resource.BackendHostResource ( GUIDS [ NUMBER_CONSTANT ] . toString () , new org.ovirt.engine.api.restapi.resource.BackendHostsResource () ) ; resource . setBackend ( backend ) ; resource . setMappingLocator ( mapperLocator ) ; resource . setMessageBundle ( messageBundle ) ; resource . setHttpHeaders ( httpHeaders ) ; }
private void initGeneralForm () { org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel , org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel > modelProvider = new org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel , org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel > () { @ java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel getModel () { return getTemplateGeneralModel () ; } @ java.lang.Override public void onSubTabSelected () {} @ java.lang.Override public void onSubTabDeselected () {} } ; generalView = new org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportTemplateGeneralSubTabView ( modelProvider ) ; }
@ org.junit.Test public void canDoActionFailsOnNullHookId () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( null ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert . assertFalse ( cmd . canDoAction () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getCanDoActionMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED . toString () ) ) ; }
private static org.ovirt.engine.core.common.businessentities.VM createVm () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; org.ovirt.engine.core.common.businessentities.VmDynamic dynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; org.ovirt.engine.core.common.businessentities.VmStatic stat = new org.ovirt.engine.core.common.businessentities.VmStatic () ; stat . setvmt_guid ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; stat . setvm_name ( STRING_CONSTANT ) ; stat . setpriority ( NUMBER_CONSTANT ) ; vm . setStaticData ( stat ) ; vm . setDynamicData ( dynamic ) ; return vm ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createNetworkAttachmentWithIpv4Configuration ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol bootProtocol ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration () ; org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address () ; primaryAddress . setAddress ( null ) ; primaryAddress . setNetmask ( null ) ; primaryAddress . setBootProtocol ( bootProtocol ) ; ipConfiguration . getIPv4Addresses () . add ( primaryAddress ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment () ; attachment . setIpConfiguration ( ipConfiguration ) ; return attachment ; }
@ java.lang.Override public void edit ( org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object ) { driver . edit ( object ) ; cpuPanel . setVisible ( object . isCpuPluggable () ) ; com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder () ; for ( java.lang.String field : object . getChangedFields () ) { java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils . htmlEscape ( field ) ; changedFieldsBuilder . append ( listItem ( escapedField ) ) ; } changedFields . setHTML ( changedFieldsBuilder . toSafeHtml () ) ; }
@ java.lang.Override public void onGridTimerStateChange ( org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent event ) { int newInterval = event . getRefreshRate () ; if ( timer . isActive () ) { if ( newInterval != ( timer . getRefreshRate () ) ) { timer . stop () ; timer . setRefreshRate ( newInterval , false ) ; timer . start () ; } } else { timer . setRefreshRate ( newInterval , false ) ; } }
private void endCommand () { if ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getRemoveFromDB () ) { removeImageFromDB ( true ) ; } else { org.ovirt.engine.core.bll.RemoveImageCommand . getImageStorageDomainMapDao () . remove ( new org.ovirt.engine.core.common.businessentities.image_storage_domain_map_id ( org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.RemoveImageCommand . getParameters () . getStorageDomainId () ) ) ; org.ovirt.engine.core.bll.RemoveImageCommand . UnLockImage () ; } org.ovirt.engine.core.bll.RemoveImageCommand . setSucceeded ( true ) ; }
private boolean isRemoveCommandAvailable () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = ( ( getSelectedItems () ) != null ) ? getSelectedItems () : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > () ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { if ( ( isDiskLocked ( disk ) ) || ( ( ! ( isVmDown () ) ) && ( disk . getPlugged () ) ) ) { return false ; } } return true ; }
@ java.lang.Override public void setSelectedItem ( java.lang.Integer value ) { if ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . osNameExists ( value ) ) ) { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList () . getSelectedItem () ; org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( dataCenterWithCluster == null ) ? null : dataCenterWithCluster . getCluster () ; if ( cluster == null ) { return; } super . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDefaultOs ( cluster . getArchitecture () ) ) ; } else { super . setSelectedItem ( value ) ; } }
protected java.lang.String getHiddenColumnWidthKey ( com.google.gwt.user.cellview.client.Column < T , > column ) { if ( columnResizePersistenceEnabled ) { return ( ( ( ( ( ( org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.GRID_HIDDEN ) + STRING_CONSTANT ) + ( org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.GRID_COLUMN_WIDTH_PREFIX ) ) + STRING_CONSTANT ) + ( getGridElementId () ) ) + STRING_CONSTANT ) + ( getColumnIndex ( column ) ) ; } return null ; }
@ java.lang.Override public int hashCode () { final int prime = NUMBER_CONSTANT ; int result = NUMBER_CONSTANT ; result = ( prime * result ) + ( ( id.tagId ) == null ? NUMBER_CONSTANT : id.tagId . hashCode () ) ; result = ( prime * result ) + ( ( id.vmId ) == null ? NUMBER_CONSTANT : id.vmId . hashCode () ) ; result = ( prime * result ) + ( ( defaultDisplayType ) == null ? NUMBER_CONSTANT : defaultDisplayType . hashCode () ) ; return result ; }
@ org.junit.Test public void customPropertiesNotSupported () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( STRING_CONSTANT , network ) ; mockExistingIfaces ( iface ) ; iface . setCustomProperties ( createCustomProperties () ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED , network . getName () ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) , null ) ) ; setupMocks () ; org.mockito.Mockito . doNothing () . when ( hookSyncJob ) . refreshHooksInCluster ( getCluster () , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_REFRESH , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.HostStorage > collection ) throws java.lang.Exception { assertNotNull ( collection ) ; assertEquals ( NAMES.length , collection . size () ) ; for ( int i = NUMBER_CONSTANT ; i < ( NAMES.length ) ; i ++ ) { verifyModel ( collection . get ( i ) , ( i % ( NAMES.length ) ) ) ; } }
private void spice_Disconnected ( java.lang.Object sender , org.ovirt.engine.ui.uicommonweb.models.vms.ErrorCodeEventArgs e ) { getspice () . getDisconnectedEvent () . removeListener ( this ) ; setIsConnected ( false ) ; if ( ( e . getErrorCode () ) > NUMBER_CONSTANT ) { getErrorEvent () . raise ( this , e ) ; } }
@ org.junit.Test public void cpuTypeDoesNotSupportVirtServiceForVirtCluster () { org.mockito.Mockito . when ( cluster . supportsVirtService () ) . thenReturn ( true ) ; org.mockito.Mockito . doReturn ( false ) . when ( validator ) . cpuExists () ; org.junit.Assert . assertThat ( validator . cpuTypeSupportsVirtService () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND ) ) ; }
@ java.lang.Override protected boolean canDoAction () { if ( ( ( getParameters () ) == null ) || ( ( getParameters () . getQuotaId () ) == null ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; return false ; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota () ; if ( quota == null ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; return false ; } if ( getQuotaDAO () . isQuotaInUse ( quota ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK ) ; return false ; } return true ; }
public void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue () : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar . setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
private java.lang.String parseBalanceResults ( java.lang.Object result ) { if ( ( result == null ) || ( ! ( result instanceof java.lang.Object [] ) ) ) { java.lang.System.out . println ( STRING_CONSTANT ) ; } java.lang.Object [] castedResult = ( ( java.lang.Object [] ) ( result ) ) ; if ( ( castedResult.length ) != NUMBER_CONSTANT ) { java.lang.System.out . println ( STRING_CONSTANT ) ; } return castedResult [ NUMBER_CONSTANT ] . toString () ; }
protected boolean registerLibvirtSecrets ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets , boolean clearUnusedSecrets ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.RegisterLibvirtSecrets , new org.ovirt.engine.core.common.vdscommands.RegisterLibvirtSecretsVDSParameters ( org.ovirt.engine.core.bll.storage.pool.ConnectHostToStoragePoolServerCommandBase . getVdsId () , libvirtSecrets , clearUnusedSecrets ) ) ; if ( ! ( returnValue . getSucceeded () ) ) { auditLogDirector . log ( this , AuditLogType.FAILED_TO_REGISTER_LIBVIRT_SECRET_ON_VDS ) ; log . error ( STRING_CONSTANT , org.ovirt.engine.core.bll.storage.pool.ConnectHostToStoragePoolServerCommandBase . getVds () . getName () ) ; return false ; } return true ; }
public boolean checkQuotaNameExisting ( org.ovirt.engine.core.common.businessentities.Quota quota , java.util.List < java.lang.String > messages ) { org.ovirt.engine.core.common.businessentities.Quota quotaByName = getQuotaDao () . getQuotaByQuotaName ( quota . getQuotaName () , quota . getStoragePoolId () ) ; if ( ( quotaByName != null ) && ( ! ( quotaByName . getId () . equals ( quota . getId () ) ) ) ) { messages . add ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED . toString () ) ; return false ; } return true ; }
private void setupMock ( ) throws java.lang.Exception { org.mockito.Mockito . doReturn ( getBricksFromServer ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 , GlusterStatus.UP ) ) . when ( brickDao ) . getGlusterVolumeBricksByServerId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 ) ; org.mockito.Mockito . doReturn ( getBricksFromServer ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 , GlusterStatus.UP ) ) . when ( brickDao ) . getGlusterVolumeBricksByServerId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 ) ; org.mockito.Mockito . doReturn ( getBricksFromServer ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_3 , GlusterStatus.UP ) ) . when ( brickDao ) . getGlusterVolumeBricksByServerId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_3 ) ; org.mockito.Mockito . doReturn ( getGlusterVolumes ( GlusterStatus.UP ) ) . when ( volumeDao ) . getByClusterId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.CLUSTER_ID ) ; }
@ java.lang.Override protected void toggleGhost ( org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType value , org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor item , boolean becomingGhost ) { item.profileEditor . setEnabled ( ( ! becomingGhost ) ) ; item.profileEditor . asWidget () . setEnabled ( true ) ; realEntryCount += ( becomingGhost ) ? - NUMBER_CONSTANT : NUMBER_CONSTANT ; updateHeaderLabel () ; }
public < T > T get ( org.ovirt.engine.api.extensions.ExtKey key , T defaultValue ) { if ( ( defaultValue != null ) && ( ! ( key . getType () . isAssignableFrom ( defaultValue . getClass () ) ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . format ( STRING_CONSTANT , defaultValue . getClass () , key ) ) ; } T value = get ( key ) ; if ( value == null ) { value = defaultValue ; } return value ; }
@ org.junit.Test public void testVmTagLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Tag tag = new org.ovirt.engine.api.model.Tag () ; tag . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.TAG_ID ) ; tag . setVm ( new org.ovirt.engine.api.model.Vm () ) ; tag . getVm () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( tag ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_TAG_HREF , tag . getHref () ) ; }
public void onSaveNetworkConfig () { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow () ) ) ; if ( ( model . getProgress () ) != null ) { return; } model . startProgress () ; setcurrentModel ( model ) ; new org.ovirt.engine.ui.uicommonweb.models.hosts.SaveNetworkConfigAction ( this , model , getEntity () ) . execute () ; }
@ java.lang.Override protected void postConnect ( org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback callback ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { this . nioEngine = new org.ovirt.vdsm.jsonrpc.client.reactors.SSLEngineNioHelper ( channel , createSSLEngine ( this . client ) , callback , this ) ; this . nioEngine . beginHandshake () ; int interestedOps = java.nio.channels.SelectionKey.OP_READ ; reactor . wakeup () ; key = this . channel . register ( selector , ( interestedOps |= java.nio.channels.SelectionKey.OP_WRITE ) , this ) ; } catch ( java.nio.channels.ClosedChannelException | javax.net.ssl.SSLException e ) { org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient.log . error ( STRING_CONSTANT , e ) ; throw new org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ( e ) ; } }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_ENABLE , cmd . getAuditLogTypeValue () ) ; }
@ org.junit.Test public void testExecuteQueryWithDirectOnly () { org.ovirt.engine.core.dao.PermissionDAO permissionDAOMock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.PermissionDAO . class ) ; org.mockito.Mockito . when ( permissionDAOMock . getAllForEntity ( objectID , getUser () . getId () , getQueryParameters () . isFiltered () , false ) ) . thenReturn ( mockedPermissions ) ; org.mockito.Mockito . when ( getDbFacadeMockInstance () . getPermissionDao () ) . thenReturn ( permissionDAOMock ) ; assertQueryDAOCall ( true ) ; }
public void addFunction ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { usedFunctions . add ( new org.ovirt.engine.core.common.utils.Pair ( policyUnit , NUMBER_CONSTANT ) ) ; for ( int i = NUMBER_CONSTANT ; i < ( unusedFunctions . size () ) ; i ++ ) { if ( unusedFunctions . get ( i ) . getId () . equals ( policyUnit . getId () ) ) { unusedFunctions . remove ( policyUnit ) ; break; } } refreshCustomProperties ( null , false ) ; getFunctionsChangedEvent () . raise ( this , EventArgs.EMPTY ) ; }
public static org.ovirt.engine.core.common.utils.Pair < java.lang.Long , java.util.concurrent.TimeUnit > autoConvert ( long interval , java.util.concurrent.TimeUnit fromUnit ) { org.ovirt.engine.core.common.utils.Pair < java.lang.Long , java.util.concurrent.TimeUnit > result = new org.ovirt.engine.core.common.utils.Pair () ; for ( java.util.concurrent.TimeUnit timeUnit : org.ovirt.engine.core.common.utils.TimeConverter.orderedTimeUnits ) { long tInterval = interval ; interval = org.ovirt.engine.core.common.utils.TimeConverter . convert ( interval , fromUnit , timeUnit ) ; if ( interval >= NUMBER_CONSTANT ) { result . setFirst ( interval ) ; result . setSecond ( timeUnit ) ; break; } interval = tInterval ; } return result ; }
private static org.ovirt.engine.core.common.businessentities.VmDevice createVMDevice ( org.ovirt.engine.core.compat.Guid vmID , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getImageId () , vmID ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , NUMBER_CONSTANT , null , true , true , true , STRING_CONSTANT , null ) ; }
private void addNetwork () { if ( ! ( networkMap . containsKey ( org.ovirt.engine.ui.uicommonweb.models.vms.VmInitModel.newNetworkText ) ) ) { networkMap . put ( org.ovirt.engine.ui.uicommonweb.models.vms.VmInitModel.newNetworkText , new org.ovirt.engine.core.common.businessentities.VmInitNetwork () ) ; getNetworkList () . setItems ( new java.util.ArrayList ( networkMap . keySet () ) ) ; } getNetworkList () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.models.vms.VmInitModel.newNetworkText ) ; }
public static < T > java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > toEntityModelList ( java.util.ArrayList < T > list ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > entityModelList = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > () ; if ( list != null ) { for ( T item : list ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > model = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > () ; model . setEntity ( item ) ; entityModelList . add ( model ) ; } } return entityModelList ; }
private void prepareMocksForTasksFromCLI () { org.mockito.Mockito . doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.job.Step > () ) . when ( stepDao ) . getStepsByExternalId ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.TASK_GUIDS [ NUMBER_CONSTANT ] ) ; org.mockito.Mockito . doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.job.Step > () ) . when ( stepDao ) . getStepsByExternalId ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.TASK_GUIDS [ NUMBER_CONSTANT ] ) ; }
private org.ovirt.engine.core.common.businessentities.Quota mockBasicQuota () { ( dbCalls ) ++ ; org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota () ; quota . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; quota . setStoragePoolId ( storage_pool . getId () ) ; quota . setDescription ( STRING_CONSTANT ) ; quota . setQuotaName ( STRING_CONSTANT ) ; quota . setGraceStoragePercentage ( NUMBER_CONSTANT ) ; quota . setGraceVdsGroupPercentage ( NUMBER_CONSTANT ) ; quota . setThresholdStoragePercentage ( NUMBER_CONSTANT ) ; quota . setThresholdVdsGroupPercentage ( NUMBER_CONSTANT ) ; quota . setQuotaEnforcementType ( QuotaEnforcementTypeEnum.HARD_ENFORCEMENT ) ; return quota ; }
@ org.junit.Test public void testDoFilterFromRequest ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito . when ( mockRequest . getLocale () ) . thenReturn ( java.util.Locale.JAPANESE ) ; testFilter . doFilter ( mockRequest , mockResponse , mockChain ) ; org.mockito.Mockito . verify ( mockChain ) . doFilter ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockResponse , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . addCookie ( org.mockito.Mockito . any () ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( LocaleFilter.LOCALE , java.util.Locale.JAPAN ) ; }
@ java.lang.Override protected void executeVdsBrokerCommand () { fullVmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVDSCommand . getBroker () . fullList ( org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVDSCommand . getParameters () . getVmIds () ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVDSCommand . proceedProxyReturnValue () ; java.util.Map < java.lang.String , java.lang.Object > [] struct = fullVmListReturn.vmList ; org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVDSCommand . setReturnValue ( struct ) ; }
@ org.junit.Test public void testRemoveAll () { org.ovirt.engine.core.common.businessentities.EngineSession result = dao . get ( existingEngineSession . getId () ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , dao . removeAll () ) ; result = dao . get ( existingEngineSession . getId () ) ; org.junit.Assert . assertNull ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , dao . removeAll () ) ; }
private static void addFloppyDetails ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { struct . put ( VdsProperties.Type , vmDevice . getType () . getValue () ) ; struct . put ( VdsProperties.Device , vmDevice . getDevice () ) ; struct . put ( VdsProperties.Index , STRING_CONSTANT ) ; struct . put ( VdsProperties.INTERFACE , VdsProperties.Fdc ) ; struct . put ( VdsProperties.ReadOnly , java.lang.String . valueOf ( vmDevice . getIsReadOnly () ) ) ; struct . put ( VdsProperties.Shareable , java.lang.Boolean.FALSE . toString () ) ; }
@ java.lang.Override protected void endWithFailure () { super . endActionOnDisks () ; if ( ( org.ovirt.engine.core.bll.AddVmCommand . getVm () ) != null ) { removeVmInSpm ( org.ovirt.engine.core.bll.AddVmCommand . getVm () . getstorage_pool_id () , org.ovirt.engine.core.bll.AddVmCommand . getVmId () ) ; } removeVmRelatedEntitiesFromDb () ; org.ovirt.engine.core.bll.AddVmCommand . setSucceeded ( true ) ; }
public void copyClientsFrom ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volumeAdvancedDetails ) { for ( org.ovirt.engine.core.common.businessentities.gluster.BrickDetails newBrickDetails : volumeAdvancedDetails . getBrickDetails () ) { org.ovirt.engine.core.compat.Guid newBrickId = newBrickDetails . getBrickProperties () . getBrickId () ; if ( newBrickId != null ) { for ( org.ovirt.engine.core.common.businessentities.gluster.BrickDetails brickDetails : getBrickDetails () ) { if ( newBrickId . equals ( brickDetails . getBrickProperties () . getBrickId () ) ) { brickDetails . setClients ( newBrickDetails . getClients () ) ; break; } } } } }
private void checkFloat () { checkNumeric () ; if ( ( c ) == ( org.ovirt.engine.core.compat.FormatterJava.Conversion.HEXADECIMAL_FLOAT ) ) { checkBadFlags ( org.ovirt.engine.core.compat.FormatterJava.Flags.PARENTHESES , org.ovirt.engine.core.compat.FormatterJava.Flags.GROUP ) ; } else if ( ( c ) == ( org.ovirt.engine.core.compat.FormatterJava.Conversion.SCIENTIFIC ) ) { checkBadFlags ( org.ovirt.engine.core.compat.FormatterJava.Flags.GROUP ) ; } else if ( ( c ) == ( org.ovirt.engine.core.compat.FormatterJava.Conversion.GENERAL ) ) { checkBadFlags ( org.ovirt.engine.core.compat.FormatterJava.Flags.ALTERNATE ) ; } }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result ) { java.util.List < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > returnValueList = result . getReturnValues () ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValueList . get ( NUMBER_CONSTANT ) . getReturnValue () ) ) ; initTemplateWithVersion ( templates , null , false ) ; initCdImage () ; }
@ org.junit.Test public void testValues () { org.ovirt.engine.core.searchbackend.IAutoCompleter comp = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.searchbackend.Jedi . class ) ; java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void createCpuProfileTest () { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper . createCpuProfile ( org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_ID , org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_NAME ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_NAME , cpuProfile . getName () ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_ID , cpuProfile . getClusterId () ) ; org.junit.Assert . assertNotNull ( cpuProfile . getId () ) ; org.junit.Assert . assertEquals ( ProfileType.CPU , cpuProfile . getProfileType () ) ; }
private org.ovirt.engine.core.bll.ValidationResult validOrFirstFailure ( org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.ValidatorPredicate predicate ) { for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.StorageDomainValidator > entry : domainValidators . entrySet () ) { org.ovirt.engine.core.bll.ValidationResult currResult = predicate . evaluate ( entry ) ; if ( ! ( currResult . isValid () ) ) { return currResult ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ org.junit.Test public void validateFailsWhenCreateAllSnapshotFromVmValidationFails () { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain . setStatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain . setStatus ( StorageDomainStatus.Active ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand () ; org.junit.Assert . assertFalse ( command . validate () ) ; }
private java.util.List < org.ovirt.engine.core.compat.Guid > getVdsBlackList () { java.util.List < org.ovirt.engine.core.compat.Guid > blackList = new java.util.ArrayList ( org.ovirt.engine.core.bll.MigrateVmCommand . getRunVdssList () ) ; if ( ( org.ovirt.engine.core.bll.MigrateVmCommand . getVdsId () ) != null ) { blackList . add ( org.ovirt.engine.core.bll.MigrateVmCommand . getVdsId () ) ; } return blackList ; }
public static boolean validHostname ( java.lang.String address ) { if ( ( address == null ) || ( address . trim () . isEmpty () ) ) { return false ; } return ( org.ovirt.engine.core.common.utils.ValidationUtils . isValidIpAddressOrHostname ( address ) ) || ( org.ovirt.engine.core.common.utils.ValidationUtils . isValidIpv6Address ( address ) ) ; }
private static java.lang.String AssignStringValue ( java.util.Map < java.lang.String , java.lang.Object > input , java.lang.String name ) { if ( input . containsKey ( name ) ) { return ( ( java.lang.String ) ( ( input . get ( name ) ) instanceof java.lang.String ? input . get ( name ) : null ) ) ; } return null ; }
public void modifyCredentials ( java.lang.String pool , java.lang.String user , java.lang.String currentPassword , java.lang.String newPassword , java.util.Map < java.lang.String , java.lang.Object > vars ) throws java.lang.Exception { org.ovirt.engineextensions.aaa.ldap.PasswordModifyExtendedResult passwordModifyResult = ( ( org.ovirt.engineextensions.aaa.ldap.PasswordModifyExtendedResult ) ( getConnectionPoolEntry ( pool , null , vars ) . connectionPool . processExtendedOperation ( new org.ovirt.engineextensions.aaa.ldap.PasswordModifyExtendedRequest ( user , currentPassword , newPassword ) ) ) ) ; if ( ( passwordModifyResult . getResultCode () ) != ( ResultCode.SUCCESS ) ) { throw new org.ovirt.engineextensions.aaa.ldap.LDAPException ( passwordModifyResult ) ; } }
private void initSelectedMacPool () { java.util.Collection < org.ovirt.engine.core.common.businessentities.MacPool > allMacPools = getMacPoolListModel () . getItems () ; org.ovirt.engine.core.common.businessentities.StoragePool dc = getEntity () ; if ( ( allMacPools != null ) && ( dc != null ) ) { org.ovirt.engine.core.compat.Guid macPoolId = dc . getMacPoolId () ; for ( org.ovirt.engine.core.common.businessentities.MacPool macPool : allMacPools ) { if ( macPool . getId () . equals ( macPoolId ) ) { getMacPoolListModel () . setSelectedItem ( macPool ) ; break; } } } }
@ java.lang.Override protected void doGet ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { java.io.File file = org.ovirt.engine.core.utils.servlet.ServletUtils . makeFileFromSanePath ( request . getPathInfo () , base ) ; file = checkForIndex ( request , response , file , request . getPathInfo () ) ; org.ovirt.engine.core.utils.servlet.ServletUtils . sendFile ( request , response , file , type ) ; }
@ org.junit.Test public void validateDiskIsLocked ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk () ; command . getImage () . setImageStatus ( ImageStatus.LOCKED ) ; org.mockito.Mockito . doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDao () ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED . toString () ) ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) void modelBoundWidgetChange () { org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = getModel () . getLastExecutedCommand () ; org.ovirt.engine.ui.common.presenter.ModelBoundPresenterWidget < > modelBoundPresenterWidget = getModelBoundWidget ( lastExecutedCommand ) ; ( ( org.ovirt.engine.ui.common.presenter.ModelBoundPresenterWidget < org.ovirt.engine.ui.uicommonweb.models.Model > ) ( modelBoundPresenterWidget ) ) . init ( getModel () . getWidgetModel () ) ; }
public static void initNicHotplugSupportMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.nicHotplugSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetNicHotplugSupportMap ) , callback ) ; }
@ java.lang.Override public void setEntity ( java.lang.Object value ) { cluster = null ; super . setEntity ( value ) ; if ( ( getEntity () ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getClusterById ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object listModel , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; updateActionAvailability () ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity () ) ) . getVdsGroupId () ) ; } }
public static java.lang.String getPassFromFile ( java.lang.String passFile ) throws java.io.IOException { java.io.File f = new java.io.File ( passFile ) ; if ( ! ( f . exists () ) ) { return org.apache.commons.lang.StringUtils.EMPTY ; } java.lang.String pass ; try ( java.io.BufferedReader br = new java.io.BufferedReader ( new java.io.FileReader ( f ) ) ) { pass = br . readLine () ; } if ( pass == null ) { return org.apache.commons.lang.StringUtils.EMPTY ; } return pass ; }
public static void getDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean filterInternalDomain ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > () ; } } ; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters () ; tempVar . setFilterInternalDomain ( filterInternalDomain ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetDomainList , tempVar , aQuery ) ; }
@ org.junit.Test public void testRemoveForcedIncomplete ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations () ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations ( NUMBER_CONSTANT ) ; setUpActionExpectations ( VdcActionType.RemoveVm , org.ovirt.engine.core.common.action.RemoveVmParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.FALSE } , true , true ) ; verifyRemove ( collection . remove ( GUIDS [ NUMBER_CONSTANT ] . toString () , new org.ovirt.engine.api.model.Action () { {} } ) ) ; }
private void addVmToDb () { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { addVmStatic () ; addVmDynamic () ; addVmInterfaces () ; addVmStatistics () ; getCompensationContext () . stateChanged () ; return null ; } } ) ; }
protected boolean performImagesChecks () { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getVm () , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getVm () . getStoragePoolId () , Guid.Empty , true , true , false , false , true , true , getImagesList () ) ; }
@ org.junit.Test public void testRemove () { org.ovirt.engine.core.common.businessentities.network.Network result = dao . getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME2 , FixturesTool.DATA_CENTER ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( FixturesTool.EXISTING_DNS_RESOLVER_CONFIGURATION_TO_REMOVE , result . getDnsResolverConfiguration () . getId () ) ; dao . remove ( result . getId () ) ; org.junit.Assert . assertNull ( dao . getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME2 , FixturesTool.DATA_CENTER ) ) ; org.junit.Assert . assertNull ( dnsResolverConfigurationDao . get ( FixturesTool.EXISTING_DNS_RESOLVER_CONFIGURATION_TO_REMOVE ) ) ; }
@ org.junit.Before public void setup () { innerMap = new java.util.HashMap <> () ; testedMap = new org.ovirt.engine.core.utils.collections.CopyOnAccessMap ( innerMap ) ; key1 = new org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyKey ( STRING_CONSTANT , NUMBER_CONSTANT ) ; value1 = new org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyValue ( org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.VALUE1_WIDTH , org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.VALUE1_LENGTH ) ; key2 = new org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyKey ( STRING_CONSTANT , NUMBER_CONSTANT ) ; value2 = new org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.MyValue ( org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.VALUE2_WIDTH , org.ovirt.engine.core.utils.collections.CopyOnAccessMapTest.VALUE2_LENGTH ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate () ; mockBackend ( false , EngineError.GlusterHookUpdateFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATE_FAILED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.Collection < org.ovirt.engine.core.common.businessentities.VmWatchdog > watchdogs = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; for ( org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs ) { model . getWatchdogAction () . setSelectedItem ( watchdog . getAction () ) ; model . getWatchdogModel () . setSelectedItem ( watchdog . getModel () ) ; } }
@ org.junit.Test public void validateSpaceNotWithinThreshold ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > command = setupCanAddVmTests ( NUMBER_CONSTANT ) ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( storageDomainValidator ) . isDomainWithinThresholds () ; org.mockito.Mockito . doReturn ( storageDomainValidator ) . when ( command ) . createStorageDomainValidator ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.StorageDomain . class ) ) ; org.junit.Assert . assertFalse ( command . validateSpaceRequirements () ) ; }
@ java.lang.Override @ org.junit.Before public void setUpBefore ( ) throws java.lang.Exception { super . setUpBefore () ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseIface = createBaseInterface ( qosA , networkName ) ; baseIface . setMtu ( NUMBER_CONSTANT ) ; setTestIface ( baseIface ) ; org.mockito.Mockito . when ( calculateBaseNic . getBaseNic ( baseIface ) ) . thenReturn ( baseIface ) ; }
private java.util.List < org.ovirt.engine.api.model.Network > getNetworks ( java.lang.String clusterId ) { org.ovirt.engine.core.compat.Guid dataCenterId = getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup . class , VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , null ) . getStoragePoolId () ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; return getBackendCollection ( VdcQueryType.GetAllNetworks , params ) ; }
@ java.lang.Override protected void init () { org.ovirt.engine.core.bll.RemoveVmCommand . getParameters () . setEntityInfo ( new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.VM , org.ovirt.engine.core.bll.RemoveVmCommand . getVmId () ) ) ; if ( ( org.ovirt.engine.core.bll.RemoveVmCommand . getVm () ) != null ) { setStoragePoolId ( org.ovirt.engine.core.bll.RemoveVmCommand . getVm () . getStoragePoolId () ) ; } }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice.Source > mapRngSources ( java.util.List < java.lang.String > model ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice.Source > result = new java.util.ArrayList <> ( ( model != null ? model . size () : NUMBER_CONSTANT ) ) ; if ( model != null ) { for ( java.lang.String sourceString : model ) { try { org.ovirt.engine.api.model.RngSource source = org.ovirt.engine.api.model.RngSource . fromValue ( sourceString ) ; result . add ( org.ovirt.engine.api.restapi.types.RngDeviceMapper . map ( source , null ) ) ; } catch ( java.lang.IllegalArgumentException iae ) {} } } return result ; }
private static void initDisksUsage ( java.util.Map < java.lang.String , java.lang.Object > vmStruct , org.ovirt.engine.core.common.businessentities.VmStatistics vm ) { java.lang.Object [] vmDisksUsage = ( ( java.lang.Object [] ) ( vmStruct . get ( VdsProperties.VM_DISKS_USAGE ) ) ) ; if ( vmDisksUsage != null ) { java.util.ArrayList < java.lang.Object > disksUsageList = new java.util.ArrayList < java.lang.Object > ( java.util.Arrays . asList ( vmDisksUsage ) ) ; vm . setDisksUsage ( org.ovirt.engine.core.utils.SerializationFactory . getSerializer () . serializeUnformattedJson ( disksUsageList ) ) ; } }
@ java.lang.Override public void postDataCenterWithClusterSelectedItemChanged () { updateDefaultHost () ; updateCustomPropertySheet () ; updateMinAllocatedMemory () ; updateNumOfSockets () ; updateOSValues () ; if ( ( getModel () . getTemplate () . getSelectedItem () ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel () . getTemplate () . getSelectedItem () ; updateQuotaByCluster ( template . getQuotaId () , template . getQuotaName () ) ; } updateMemoryBalloon () ; updateCpuSharesAvailability () ; updateVirtioScsiAvailability () ; }
@ org.junit.Test public void testCheckGlusterQuorumWithTwoServersDown () { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster ( true ) ; java.lang.Iterable < org.ovirt.engine.core.compat.Guid > hostIds = java.util.Arrays . asList ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , hostValidator . checkGlusterQuorum ( cluster , hostIds ) . size () ) ; org.junit.Assert . assertEquals ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT ) , hostValidator . checkGlusterQuorum ( cluster , hostIds ) ) ; }
@ org.junit.Test public void testExecuteNoTaskHandlers () { org.ovirt.engine.core.common.action.VdcActionParametersBase parameterMock = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.action.VdcActionParametersBase . class ) ; org.mockito.Mockito . when ( parameterMock . getTransactionScopeOption () ) . thenReturn ( TransactionScopeOption.Required ) ; org.mockito.Mockito . when ( parameterMock . getLockProperties () ) . thenReturn ( org.ovirt.engine.core.common.action.LockProperties . create ( LockProperties.Scope.None ) ) ; org.ovirt.engine.core.bll.CommandBase < org.ovirt.engine.core.common.action.VdcActionParametersBase > command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.CommandBaseTest.CommandBaseDummy ( parameterMock ) ) ; command . executeAction () ; org.mockito.Mockito . verify ( command ) . executeCommand () ; }
private boolean isPathEditable ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { if ( storage . getStorageType () . isFileDomain () ) { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = storage . getStorageDomainType () ; return ( storageDomainType . isInternalDomain () ) && ( isStorageStatusValidForPathEditing ( storage ) ) ; } return false ; }
@ java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue () { switch ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand . getActionState () ) { case EXECUTE : if ( ! ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand . getParameters () . getTaskGroupSuccess () ) ) { return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE ; } if ( ( isFirstTaskHandler () ) && ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand . getSucceeded () ) ) { return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_VM_DISK ; } break; case END_SUCCESS : return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS ; case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE ; } return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ) { return false ; } org.ovirt.engine.core.common.businessentities.storage.LunDisk other = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( obj ) ) ; return ( ( super . equals ( obj ) ) && ( java.util.Objects . equals ( lun , other.lun ) ) ) && ( java.util.Objects . equals ( usingScsiReservation , other.usingScsiReservation ) ) ; }
@ org.junit.Test @ java.lang.Override public void testListCrash ( ) throws java.lang.Exception { collection . setUriInfo ( setUpUriExpectations ( null ) ) ; setUpEntityQueryExpectations ( org.ovirt.engine.api.restapi.resource.FAILURE ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , new java.lang.RuntimeException ( FAILURE ) ) ; } }
@ java.lang.Override protected void endWithFailure () { setVm ( null ) ; if ( ( getVm () ) != null ) { removeVmSnapshots ( getVm () ) ; endActionOnAllImageGroups () ; removeVmNetworkInterfaces () ; getVmDynamicDAO () . remove ( getVmId () ) ; getVmStatisticsDAO () . remove ( getVmId () ) ; getVmStaticDAO () . remove ( getVmId () ) ; setSucceeded ( true ) ; } else { setVm ( getParameters () . getVm () ) ; getReturnValue () . setEndActionTryAgain ( false ) ; } }
protected boolean performImagesChecks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( vm , org.ovirt.engine.core.bll.AddDiskCommand . getReturnValue () . getCanDoActionMessages () , vm . getStoragePoolId () , getStorageDomainId () . getValue () , false , true , false , false , false , true , java.util.Collections . < org.ovirt.engine.core.common.businessentities.Disk > emptyList () ) ; }
@ java.lang.Override protected void endWithFailure () { if ( ( org.ovirt.engine.core.bll.AddImageFromScratchCommand . getDestinationDiskImage () ) != null ) { if ( org.ovirt.engine.core.bll.AddImageFromScratchCommand . getParameters () . isShouldRemainIllegalOnFailedExecution () ) { setImageStatus ( ImageStatus.ILLEGAL , org.ovirt.engine.core.bll.AddImageFromScratchCommand . getDestinationDiskImage () ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskImageDynamicDao () . remove ( org.ovirt.engine.core.bll.AddImageFromScratchCommand . getDestinationDiskImage () . getImageId () ) ; super . endWithFailure () ; } } }
private boolean hostEmulationModeMatchesTheConfigValues ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.String [] hostSupportedEmulatedMachines ) { java.lang.String matchedEmulatedMachine = org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( org.ovirt.engine.core.common.config.Config . < java.util.List < java.lang.String > > GetValue ( ConfigValues.ClusterEmulatedMachines , vds . getVdsGroupCompatibilityVersion () . getValue () ) , hostSupportedEmulatedMachines ) ; if ( ( matchedEmulatedMachine != null ) && ( ! ( matchedEmulatedMachine . isEmpty () ) ) ) { setClusterEmulatedMachine ( vds , matchedEmulatedMachine ) ; return true ; } return false ; }
public void addStatistics ( org.ovirt.engine.api.model.Host model , org.ovirt.engine.core.common.businessentities.VDS entity ) { model . setStatistics ( new org.ovirt.engine.api.model.Statistics () ) ; org.ovirt.engine.api.restapi.resource.HostStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.HostStatisticalQuery ( newModel ( model . getId () ) ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query . getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( statistic , query . getParentType () ) ; } model . getStatistics () . getStatistics () . addAll ( statistics ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { host = new org.ovirt.engine.core.common.businessentities.VDS () ; host . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; final org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic = new org.ovirt.engine.core.common.businessentities.VdsDynamic () ; host . setDynamicData ( vdsDynamic ) ; bond = new org.ovirt.engine.core.common.businessentities.network.Bond () ; bond . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . when ( mockNetworkExclusivenessValidatorResolver . resolveNetworkExclusivenessValidator () ) . thenReturn ( mockNetworkExclusivenessValidator ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters () { return new org.ovirt.engine.core.common.vdscommands.SyncImageGroupDataVDSCommandParameters ( getEnclosingCommand () . getParameters () . getStoragePoolId () , getEnclosingCommand () . getParameters () . getSourceStorageDomainId () , getEnclosingCommand () . getParameters () . getImageGroupID () , getEnclosingCommand () . getParameters () . getTargetStorageDomainId () , org.ovirt.engine.core.common.vdscommands.SyncImageGroupDataVDSCommandParameters.SYNC_TYPE_INTERNAL ) ; }
@ org.junit.Test public void testRefreshUserSession () { container . getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.USER , true ) ; container . cleanExpiredUsersSessions () ; java.lang.Object obj = container . getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.USER , false ) ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , container . getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.USER , false ) ) ; clearSession () ; }
private void mockPassDiscardSupportedForDestSd ( org.ovirt.engine.core.bll.ValidationResult validationResult , org.ovirt.engine.core.common.businessentities.storage.ImageOperation imageOperation ) { command . getParameters () . setOperation ( imageOperation ) ; org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator multipleDiskVmElementValidator = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator . class ) ; org.mockito.Mockito . doReturn ( multipleDiskVmElementValidator ) . when ( command ) . createMultipleDiskVmElementValidator () ; org.mockito.Mockito . when ( multipleDiskVmElementValidator . isPassDiscardSupportedForDestSd ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( validationResult ) ; }
private java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > getIdsOfNetworkAttachmentsRelatedToInterfaceNames ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments ) { java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > map = new java.util.HashMap <> () ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : networkAttachments ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils . addToMap ( attachment . getNicName () , attachment . getId () , map , new org.ovirt.engine.core.utils.collections.MultiValueMapUtils.ListCreator () ) ; } return map ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllTags , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . setUpTags () , failure ) ; if ( failure == null ) { setUpEntityQueryExpectations ( VdcQueryType.GetRootTag , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] {} , new java.lang.Object [] {} , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . setUpRootTag () ) ; } }
public void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
protected void activateHostsAfterClusterChange ( final java.lang.String searchStr , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > activateVdsParameterList ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.ActivateVds , activateVdsParameterList , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { com.google.gwt.user.client.Timer timer = new com.google.gwt.user.client.Timer () { public void run () { checkVdsActivateSucceeded ( searchStr ) ; } } ; timer . schedule ( NUMBER_CONSTANT ) ; } } , this ) ; }
@ java.lang.Override public boolean fetch () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue getStats = org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . runVdsCommand ( VDSCommandType.GetAllVmStats , new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase ( vdsManager . getCopyVds () ) ) ; if ( getStats . getSucceeded () ) { vdsmVms = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > ) ( getStats . getReturnValue () ) ) ; onFetchVms () ; return true ; } else { onError () ; return false ; } }
void initEditors () { volumeTypeListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.storage.VolumeType > () ) ; storageListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StorageDomainFreeSpaceRenderer () ) ; volumeFormatListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.storage.VolumeFormat > () ) ; sourceStorageListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StorageDomainFreeSpaceRenderer () ) ; diskProfileListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > () ) ; quotaListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.Quota > () ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVdsSpmIdMapDao () ; vdsDao = dbFacade . getVdsDao () ; existingVds = vdsDao . get ( org.ovirt.engine.core.dao.VdsSpmIdMapDAOTest.EXISTING_VDS_ID ) ; existingVdsSpmIdMap = dao . get ( existingVds . getId () ) ; newVdsSpmIdMap = new org.ovirt.engine.core.common.businessentities.vds_spm_id_map ( org.ovirt.engine.core.dao.VdsSpmIdMapDAOTest.FREE_STORAGE_POOL_ID , org.ovirt.engine.core.dao.VdsSpmIdMapDAOTest.FREE_VDS_ID , NUMBER_CONSTANT ) ; }
public void freeMacs ( java.util.List < java.lang.String > macs ) { if ( ! ( macs . isEmpty () ) ) { lockObj . writeLock () . lock () ; try { if ( ! ( initialized ) ) { logInitializationError ( STRING_CONSTANT ) ; } for ( java.lang.String mac : macs ) { internalFreeMac ( mac ) ; } } finally { lockObj . writeLock () . unlock () ; } } }
@ java.lang.Override public void migrateVM ( java.util.List < org.ovirt.engine.core.compat.Guid > initialHosts , org.ovirt.engine.core.compat.Guid vmToMigrate ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vmToMigrate ) ; parameters . setInitialHosts ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( initialHosts ) ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.MigrateVm , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
@ java.lang.Override public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { org.ovirt.engine.core.common.businessentities.Bookmark selectedObject = selectionModel . getSelectedObject () ; java.util.List < org.ovirt.engine.core.common.businessentities.Bookmark > selectedItems = ( selectedObject != null ) ? new java.util.ArrayList ( java.util.Arrays . asList ( selectedObject ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Bookmark > () ; this . setSelectedItems ( selectedItems ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object result1 ) { getProfile () . setItems ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ) ( result1 ) ) ) ; profileBehavior . initSelectedProfile ( getProfile () , getNic () ) ; updateProfileChangability () ; okCommand . setIsExecutionAllowed ( true ) ; initSelectedType () ; }
private void expectGetDeviceList () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; returnValue . setSucceeded ( true ) ; returnValue . setReturnValue ( org.ovirt.engine.core.bll.storage.disk.lun.GetLunsByVgIdQueryTest . setUpLunsFromDeviceList () ) ; org.mockito.Mockito . when ( vdsBrokerFrontendMock . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.GetDeviceList ) , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( returnValue ) ; }
public void getSpiceUsbAutoShare ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue () : true ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ java.lang.Override protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { java.lang.Boolean migrationNetworkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.MigrationNetworkEnabled , clusterNetworkModel . getCluster () . getcompatibility_version () . toString () ) ) ) ; return ( migrationNetworkEnabled && ( clusterNetworkModel . isAttached () ) ) && ( ! ( clusterNetworkModel . isExternal () ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.Agent update ( org.ovirt.engine.api.model.Agent agent ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > agentResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetFenceAgentById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ; org.ovirt.engine.core.common.businessentities.pm.FenceAgent entity = getEntity ( agentResolver , true ) ; return performUpdate ( agent , entity , map ( entity ) , agentResolver , VdcActionType.UpdateFenceAgent , new org.ovirt.engine.api.restapi.resource.BackendFenceAgentResource.UpdateParametersProvider () ) ; }
private void mockCommandCall ( org.ovirt.engine.core.common.action.ActionType actionType , boolean withContext ) { if ( withContext ) { org.mockito.Mockito . doReturn ( successfulReturnValue () ) . when ( backend ) . runInternalAction ( org.mockito.ArgumentMatchers . eq ( actionType ) , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; } else { org.mockito.Mockito . doReturn ( successfulReturnValue () ) . when ( backend ) . runInternalAction ( org.mockito.ArgumentMatchers . eq ( actionType ) , org.mockito.ArgumentMatchers . any () ) ; } }
protected boolean updateVnicForBackwardCompatibility () { if ( ! ( validate ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper . updateNicForBackwardCompatibility ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getParameters () . getInterface () , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getParameters () . getNetworkName () , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getParameters () . isPortMirroring () , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getVm () . getStaticData () , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getCurrentUser () ) ) ) ) { return false ; } return true ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { validateMemorySize ( getMemSize () , ( ( java.lang.Integer ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) , _minMemSize ) ; if ( ! ( ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( model ) ) . getBehavior () ) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior ) ) { validateMemorySize ( getMinAllocatedMemory () , getMemSize () . getEntity () , NUMBER_CONSTANT ) ; } }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters () ; params . setStoragePoolId ( dataCenterId ) ; params . setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private void addInterfaceDeviceToDb () { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils . addNetworkInterfaceDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getInterface () . getId () , org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getParameters () . getVmId () ) , org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getInterface () . isPlugged () ) ; org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getCompensationContext () . snapshotNewEntity ( vmDevice ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.ExternalOperatingSystem > mapOperationSystem ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ForemanOperatingSystem > foremanOss ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalOperatingSystem > oss = new java.util.ArrayList ( foremanOss . size () ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanOperatingSystem os : foremanOss ) { org.ovirt.engine.core.common.businessentities.ExternalOperatingSystem eos = new org.ovirt.engine.core.common.businessentities.ExternalOperatingSystem () ; eos . setName ( os . getName () ) ; eos . setId ( os . getId () ) ; oss . add ( eos ) ; } return oss ; }
@ org.junit.Test public void canDoActionFailsOnNullHook () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand < org.ovirt.engine.core.common.action.gluster.GlusterHookParameters > ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd , false ) ; org.junit.Assert . assertFalse ( cmd . canDoAction () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST . toString () ) ) ; }
protected void mockBackendStatusChange ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito . doReturn ( backend ) . when ( cmd ) . getBackend () ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; vdsReturnValue . setReturnValue ( succeeded ) ; vdsReturnValue . setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue . setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , STRING_CONSTANT ) ) ; } org.mockito.Mockito . when ( vdsBrokerFrontend . runVdsCommand ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest . any ( org.ovirt.engine.core.common.vdscommands.VDSCommandType . class ) , org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest . any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase . class ) ) ) . thenReturn ( vdsReturnValue ) ; }
private org.ovirt.engine.core.common.businessentities.VDS makeTestVds ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS newVdsData = new org.ovirt.engine.core.common.businessentities.VDS () ; newVdsData . setHostName ( STRING_CONSTANT ) ; newVdsData . setVdsName ( STRING_CONSTANT ) ; newVdsData . setVdsGroupCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( STRING_CONSTANT ) ) ; newVdsData . setVdsGroupId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; newVdsData . setId ( vdsId ) ; return newVdsData ; }
public void updateAuditLogEventProcessed ( long auditLogId ) throws java.sql.SQLException { java.sql.Connection connection = null ; java.sql.PreparedStatement ps = null ; try { connection = ds . getConnection () ; ps = connection . prepareStatement ( ( STRING_CONSTANT + ( STRING_CONSTANT + STRING_CONSTANT ) ) ) ; ps . setLong ( NUMBER_CONSTANT , auditLogId ) ; int updated = ps . executeUpdate () ; if ( updated != NUMBER_CONSTANT ) { org.ovirt.engine.core.notifier.dao.EventsManager.log . error ( STRING_CONSTANT , auditLogId ) ; } } finally { org.ovirt.engine.core.utils.db.DbUtils . closeQuietly ( ps , connection ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { boolean returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue () ; if ( returnValue ) { displayConsoleConnectConfirmPopup ( command ) ; } else { command . execute () ; } }
@ org.junit.Test public void liveMigrateDiskBasedOnTemplate () { command . getParameters () . setParametersList ( createMoveDisksParameters () ) ; initDiskImageBasedOnTemplate ( diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageId ) ; command . updateParameters () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , command . getLiveMigrateVmDisksParametersList () . size () ) ; }
@ org.junit.Test public void testIsCrossReference () { org.junit.Assert . assertTrue ( STRING_CONSTANT , comp . isCrossReferece ( STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , comp . isCrossReferece ( STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , comp . isCrossReferece ( STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , comp . isCrossReferece ( STRING_CONSTANT , null ) ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , comp . isCrossReferece ( null , STRING_CONSTANT ) ) ; }
private org.ovirt.api.metamodel.tool.JavaTypeReference getListReference ( org.ovirt.api.metamodel.concepts.ListType type ) { org.ovirt.api.metamodel.concepts.Type elementType = type . getElementType () ; org.ovirt.api.metamodel.tool.JavaTypeReference reference = getTypeReference ( elementType , true ) ; if ( reference != null ) { reference . addImport ( java.util.List . class ) ; reference . setText ( ( ( STRING_CONSTANT + ( reference . getText () ) ) + STRING_CONSTANT ) ) ; } return reference ; }
@ java.lang.Override public void onSuccess ( java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.VDS > hostNameListModel = getExternalHostName () ; hostNameListModel . setItems ( hosts ) ; hostNameListModel . setIsChangeable ( true ) ; setEnableSearchHost ( true ) ; }
public void getSpiceUsbAutoShare ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( source == null ) || ( ( java.lang.Boolean ) ( source ) ) ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare , getDefaultConfigurationVersion () ) , aQuery ) ; }
private void initStorageDomain () { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setId ( storageDomainId ) ; storageDomain . setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito . when ( storageDomainDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito . when ( storageDomainDao . getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { getWindow () . stopProgress () ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result . getReturnValue () ; if ( ( returnValue != null ) && ( returnValue . getSucceeded () ) ) { setWindow ( null ) ; updateActionsAvailability () ; } else { cancel () ; } super . executed ( result ) ; }
static java.lang.String resolveMessage ( java.lang.String message , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ) { java.lang.String returnValue = message ; if ( logable != null ) { java.util.Map < java.lang.String , java.lang.String > map = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . getAvailableValues ( message , logable ) ; returnValue = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . resolveMessage ( message , map ) ; } return returnValue ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { if ( ( ( permsList ) == null ) && ( ( getDisk () ) != null ) ) { permsList = new java.util.ArrayList <> () ; permsList . add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getDisk () . getId () , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.DELETE_DISK ) ) ; } return permsList ; }
private java.lang.String getNetworkId ( java.lang.String networkName ) { if ( networkName != null ) { org.ovirt.engine.api.restapi.resource.BackendVmNicsResource parent = ( ( org.ovirt.engine.api.restapi.resource.BackendVmNicsResource ) ( collection ) ) ; org.ovirt.engine.core.compat.Guid clusterId = parent . getClusterId () ; org.ovirt.engine.api.model.Network n = parent . getClusterNetwork ( clusterId , null , networkName ) ; if ( n != null ) { return n . getId () . toString () ; } } return null ; }
private void changeStatus ( org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters parameters , org.ovirt.engine.core.common.businessentities.VM curVm ) { if ( org.ovirt.engine.core.vdsbroker.DestroyVmVDSCommand . getParameters () . getVdsId () . equals ( curVm . getRunOnVds () ) ) { org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . InternalSetVmStatus ( curVm , ( parameters . getGracefully () ? org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown : org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ; } }
@ org.junit.Test public void testGetAllForValidQos () { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao . getAllForQos ( FixturesTool.HOST_NETWORK_QOS_A ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , result . size () ) ; org.junit.Assert . assertEquals ( FixturesTool.NETWORK_ENGINE , result . get ( NUMBER_CONSTANT ) . getId () ) ; }
@ java.lang.Override public void run () { org.ovirt.engine.core.bll.VdsEventListener.log . info ( STRING_CONSTANT , vds . getId () , vds . getHostName () ) ; org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( vds . getId () , org.ovirt.engine.core.common.businessentities.FenceActionType.Restart ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.VdsNotRespondingTreatment , params , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; moveBricksToUnknown ( vds ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { if ( ( ( permsList ) == null ) && ( ( getDisk () ) != null ) ) { permsList = new java.util.ArrayList <> () ; permsList . add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getDisk () . getId () , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.ATTACH_DISK ) ) ; permsList . add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getDisk () . getId () , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES ) ) ; } return permsList ; }
public static void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( STRING_CONSTANT , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams . setMaxCount ( NUMBER_CONSTANT ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
@ java.lang.Override public java.util.Map < java.lang.String , java.lang.String > getCustomValues () { addCustomValue ( GlusterConstants.VOLUME_NAME , getGlusterVolumeName () ) ; addCustomValue ( GlusterConstants.GEO_REP_USER , getParameters () . getUserName () ) ; addCustomValue ( GlusterConstants.GEO_REP_SLAVE_VOLUME_NAME , getParameters () . getSlaveVolumeName () ) ; addCustomValue ( GlusterConstants.SERVICE_TYPE , ServiceType.GLUSTER . name () ) ; return super . getCustomValues () ; }
private java.util.ArrayList < java.lang.String > trimElements ( java.lang.String . . . elements ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( elements.length ) ; for ( java.lang.String e : elements ) { e = e . trim () ; if ( ( e . length () ) > NUMBER_CONSTANT ) { list . add ( e ) ; } } return list ; }
@ org.junit.Test public void migrationSupported () { validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( validator ) . migrationSupportedForArch ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertThat ( validator . migrationSupported ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextEnum ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > ) ( source ) ) . size () ) > NUMBER_CONSTANT ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void setDefaultNames1 () { org.ovirt.engine.core.common.businessentities.VDS host = context.host ; if ( ( host . getStoragePoolId () ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDataCenterById ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { context.hostDataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; setDefaultNames2 () ; } } , frontendHash ) , host . getStoragePoolId () ) ; } else { setDefaultNames2 () ; } }
@ org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList = java.util.Collections . emptyList () ; org.mockito.Mockito . doReturn ( disksList ) . when ( cmd ) . getDisksList () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( multipleStorageDomainsValidator ) . allDomainsHaveSpaceForNewDisks ( disksList ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; org.mockito.Mockito . verify ( multipleStorageDomainsValidator ) . allDomainsHaveSpaceForNewDisks ( disksList ) ; }
public void addVideoDevices ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , int numberOfVideoDevices ) { for ( int i = NUMBER_CONSTANT ; i < numberOfVideoDevices ; i ++ ) { addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmBase . getId () ) , VmDeviceGeneralType.VIDEO , vmBase . getDefaultDisplayType () . getDefaultVmDeviceType () , getVideoDeviceSpecParams ( vmBase ) , true , false ) ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { final java.util.Map < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > returnMap = returnValue . getReturnValue () ; if ( ( returnMap . get ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DEFAULT_OS_ID ) ) == null ) { throw new java.lang.RuntimeException ( STRING_CONSTANT ) ; } osIdToDefaultIconIdMap = java.util.Collections . unmodifiableMap ( returnMap ) ; initializeLargeToSmallIconMap () ; }
private void setupCanAddPpcTest () { org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . buildAndCheckDestStorageDomains () ; cmd . getParameters () . getVm () . setClusterArch ( ArchitectureType.ppc64 ) ; cluster . setArchitecture ( ArchitectureType.ppc64 ) ; cluster . setCompatibilityVersion ( org.ovirt.engine.core.compat.Version . getLast () ) ; }
protected java.util.Locale getLocaleFromRequest ( final javax.servlet.http.HttpServletRequest request ) { java.lang.String localeString = getLocaleStringFromReferer ( request ) ; if ( localeString == null ) { localeString = getLocaleStringFromPath ( request . getPathInfo () ) ; } java.util.Locale locale = org.ovirt.engine.core.utils.LocaleUtils . getLocaleFromString ( localeString , true ) ; return locale ; }
private java.util.Map < java.lang.String , java.lang.String > getAvailableValues ( java.lang.String message , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ) { java.util.Map < java.lang.String , java.lang.String > returnValue = new java.util.HashMap < java.lang.String , java.lang.String > ( logable . getCustomValues () ) ; java.util.Set < java.lang.String > attributes = resolvePlaceHolders ( message ) ; if ( ( attributes != null ) && ( ( attributes . size () ) > NUMBER_CONSTANT ) ) { org.ovirt.engine.core.compat.backendcompat.TypeCompat . getPropertyValues ( logable , attributes , returnValue ) ; } return returnValue ; }
private org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.VmManagementParametersBase > setupCanAddVmTests ( final int domainSizeGB , final int sizeRequired ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB , sizeRequired ) ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.VmManagementParametersBase > cmd = createCommand ( vm ) ; org.ovirt.engine.core.bll.AddVmCommandTest . initCommandMethods ( cmd ) ; org.mockito.Mockito . doReturn ( createVmTemplate () ) . when ( cmd ) . getVmTemplate () ; return cmd ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd . executeCommand () ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getSucceeded () ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_DISABLE ) ; }
public static void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
@ org.junit.Test public void testNicLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Nic nic = new org.ovirt.engine.api.model.Nic () ; nic . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.NIC_ID ) ; nic . setVm ( new org.ovirt.engine.api.model.Vm () ) ; nic . getVm () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( nic ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.NIC_HREF , nic . getHref () ) ; }
protected boolean validateBallonDevice () { if ( ! ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils . isBalloonDeviceExists ( getVm () . getManagedVmDeviceMap () . values () ) ) ) { return true ; } if ( ! ( osRepository . isBalloonEnabled ( getVm () . getStaticData () . getOsId () , getEffectiveCompatibilityVersion () ) ) ) { addValidationMessageVariable ( STRING_CONSTANT , org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroup () . getArchitecture () ) ; return failValidation ( EngineMessage.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; } return true ; }
private void initParentResource () { org.ovirt.engine.api.restapi.resource.AbstractBackendResource parent = resource . getParent () . getParent () . getParent () ; parent . setBackend ( backend ) ; parent . setMappingLocator ( mapperLocator ) ; parent . setMessageBundle ( messageBundle ) ; parent . setHttpHeaders ( httpHeaders ) ; }
private boolean networkAttachedToVds ( java.lang.String networkName , org.ovirt.engine.core.compat.Guid vdsId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > listOfInterfaces = getInterfaceDao () . getAllInterfacesForVds ( vdsId ) ; for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface vdsNetworkInterface : listOfInterfaces ) { if ( networkName . equals ( vdsNetworkInterface . getNetworkName () ) ) { return true ; } } return false ; }
void stubGetUserBySessionIdQuery () { org.mockito.Mockito . when ( mockBackend . runQuery ( org.mockito.Matchers . eq ( VdcQueryType.GetUserBySessionId ) , org.ovirt.engine.ui.frontend.server.gwt.AbstractGwtDynamicHostPageServletTest . isA ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.queries.VdcQueryReturnValue () { { setSucceeded ( true ) ; setReturnValue ( mockUser ) ; } } ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; if ( ( cluster != null ) && ( cluster . supportsGlusterService () ) ) { model . getForce () . setIsAvailable ( true ) ; } model . stopProgress () ; }
@ java.lang.Override protected void copyVmDevices () { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmDevice > ( vmFromConfiguration . getVmUnamagedDeviceList () ) ; devices . addAll ( vmFromConfiguration . getManagedVmDeviceMap () . values () ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . copyVmDevices ( getVmIdFromSnapshot () , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVmId () , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVm () , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVm () . getStaticData () , true , devices , newDiskImages , _vmInterfaces , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getParameters () . isSoundDeviceEnabled () , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getParameters () . isConsoleEnabled () ) ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.utils.pm.VdsFenceOptions options = new org.ovirt.engine.core.utils.pm.VdsFenceOptions () ; java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > map = options . getFencingOptionMappingMap () ; org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery . getQueryReturnValue () . setReturnValue ( map ) ; org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery . getQueryReturnValue () . setSucceeded ( ( ( map . size () ) > NUMBER_CONSTANT ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.compat.Guid networkId = attachment . getNetworkId () ; java.lang.String networkName = attachment . getNetworkName () ; org.ovirt.engine.core.compat.Guid violatingEntityId = attachment . getId () ; return validateCoherentIdentification ( java.lang.String . valueOf ( violatingEntityId ) , networkId , networkName , EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY , networkBusinessEntityMap ) ; }
private boolean consumeForVdsQuota ( org.ovirt.engine.core.compat.Guid quotaId ) throws java.lang.CloneNotSupportedException { org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters = parametersWrapper . clone () ; parameters . getParameters () . add ( new org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter ( quotaId , null , QuotaConsumptionParameter.QuotaAction.CONSUME , org.ovirt.engine.core.bll.quota.QuotaManagerTest.DESTINATION_GUID , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; return quotaManager . consume ( parameters ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) ) ; setupMocks () ; org.mockito.Mockito . doNothing () . when ( hookSyncJob ) . refreshHooksInCluster ( getVdsGroup () , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_REFRESH ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.VmTemplateHandler . lockVmTemplateInTransaction ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getVmTemplateId () , org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getCompensationContext () ) ; if ( ! ( imageTemplates . isEmpty () ) ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { if ( removeVmTemplateImages () ) { org.ovirt.engine.core.bll.VmHandler . removeVmInitFromDB ( getVmTemplate () ) ; setSucceeded ( true ) ; } return null ; } } ) ; } else { HandleEndAction () ; } }
public void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( STRING_CONSTANT , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
private void setupExpectedGlusterServersInfo () { expectedServers = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo > () ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo server = new org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo () ; server . setUuid ( org.ovirt.engine.core.bll.gluster.GetAddedGlusterServersQueryTest.server_id3 ) ; server . setHostnameOrIp ( org.ovirt.engine.core.bll.gluster.GetAddedGlusterServersQueryTest.TEST_SERVER3 ) ; server . setStatus ( PeerStatus.CONNECTED ) ; expectedServers . add ( server ) ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView () . getSearchButton () . getCommand () . setIsExecutionAllowed ( ( ! ( model . getSearchInProgress () . getEntity () ) ) ) ; }
@ java.lang.Override public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Erratum erratum ) { if ( ( erratum . getType () ) == ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources . bug () ; } else if ( ( erratum . getType () ) == ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources . enhancement () ; } else if ( ( erratum . getType () ) == ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources . security () ; } return null ; }
private void testStatusMapping ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus storagePoolStatus , org.ovirt.engine.api.model.DataCenterStatus dataCenterStatus ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; storagePool . setStatus ( storagePoolStatus ) ; org.ovirt.engine.api.model.DataCenter dataCenter = org.ovirt.engine.api.restapi.types.DataCenterMapper . map ( storagePool , null ) ; assertEquals ( dataCenter . getStatus () , dataCenterStatus ) ; }
protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable < T > createActionTable () { return new org.ovirt.engine.ui.common.widget.table.SimpleActionTable < T > ( modelProvider , getTableResources () , org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider . getEventBus () , org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider . getClientStorage () ) { { showRefreshButton () ; showPagingButtons () ; showItemsCount () ; showSelectionCountTooltip () ; enableHeaderContextMenu () ; } } ; }
protected boolean checkStorageDomainStatus ( final org.ovirt.engine.core.common.businessentities.StorageDomainStatus . . . statuses ) { boolean valid = false ; org.ovirt.engine.core.common.businessentities.StorageDomainStatus status = getStorageDomainStatus () ; if ( status != null ) { valid = java.util.Arrays . asList ( statuses ) . contains ( status ) ; } if ( ! valid ) { if ( ( status != null ) && ( status . isStorageDomainInProcess () ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ; } addStorageDomainStatusIllegalMessage () ; } return valid ; }
@ org.junit.Test @ java.lang.Override public void testList ( ) throws java.lang.Exception { int numOfEntitiesInList = NUMBER_CONSTANT ; setUpGetEntityExpectations ( VdcQueryType.GetStorageServerConnectionExtensionsByHostId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionsResourceTest.hostID } , getEntityList ( numOfEntitiesInList ) ) ; javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection . setUriInfo ( uriInfo ) ; java.util.List < org.ovirt.engine.api.model.StorageConnectionExtension > retCollection = getCollection () ; assertNotNull ( retCollection ) ; assertEquals ( numOfEntitiesInList , retCollection . size () ) ; }
public boolean isValidVmNetwork ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.Network > networksByName ) { java.lang.String networkName = iface . getNetworkName () ; return ( networksByName . containsKey ( networkName ) ) && ( networksByName . get ( networkName ) . isVmNetwork () ) ; }
public static java.util.List < java.lang.String > mapRngSources ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VmRngDevice.Source > entity ) { java.util.List < java.lang.String > result = new java.util.ArrayList ( ( entity != null ? entity . size () : NUMBER_CONSTANT ) ) ; if ( entity != null ) { for ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source source : entity ) { org.ovirt.engine.api.model.RngSource restSource = org.ovirt.engine.api.restapi.types.RngDeviceMapper . map ( source , null ) ; result . add ( restSource . name () ) ; } } return result ; }
@ java.lang.Override public org.ovirt.engine.core.authentication.AuthenticationResult authenticate ( java.lang.String name , java.lang.String password ) { org.ovirt.engine.core.bll.adbroker.LdapReturnValueBase ldapResult = broker . runAdAction ( AdActionType.AuthenticateUser , new org.ovirt.engine.core.bll.adbroker.LdapUserPasswordBaseParameters ( domain , name , password ) ) ; org.ovirt.engine.core.bll.adbroker.UserAuthenticationResult authResult = ( ( org.ovirt.engine.core.bll.adbroker.UserAuthenticationResult ) ( ldapResult . getReturnValue () ) ) ; return new org.ovirt.engine.core.authentication.provisional.ProvisionalAuthenticationResult ( domain , authResult ) ; }
protected boolean ExecuteWithoutTransaction () { boolean succeeded = false ; try { log . info ( STRING_CONSTANT ) ; ExecuteRegisterVdsCommand () ; succeeded = org.ovirt.engine.core.bll.RegisterVdsQuery . getQueryReturnValue () . getSucceeded () ; } catch ( java.lang.RuntimeException ex ) { log . error ( STRING_CONSTANT , ex ) ; } finally { WriteToAuditLog () ; } return succeeded ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getStorageDomainStaticDao () ; dynamicDao = dbFacade . getStorageDomainDynamicDao () ; diskImageDao = dbFacade . getDiskImageDao () ; imageDao = dbFacade . getImageDao () ; existingDomain = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic () ; newStaticDomain . setstorage_name ( STRING_CONSTANT ) ; newStaticDomain . setstorage ( STRING_CONSTANT ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . setVds ( null ) ; if ( ( org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . getVds () ) == null ) { org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . setCommandShouldBeLogged ( false ) ; log . info ( STRING_CONSTANT , org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . getVdsName () , org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . getVdsId () ) ; org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . getReturnValue () . setSucceeded ( false ) ; return; } org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . setCommandShouldBeLogged ( true ) ; kdumpDetectionResult = detectHostKdumping () ; org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand . getReturnValue () . setSucceeded ( ( ( kdumpDetectionResult ) == ( org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand.KdumpDetectionResult.KDUMP_FINISHED ) ) ) ; }
private boolean evaluateHostUpgradeInternalCommandProgress ( java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds , org.ovirt.engine.core.bll.CommandBase < > rootCommand ) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand ( childCmdIds ) ; if ( upgradeCommand == null ) { return false ; } switch ( upgradeCommand . getCommandStatus () ) { case ACTIVE : case NOT_STARTED : return false ; case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand . setCommandStatus ( CommandStatus.FAILED ) ; return true ; case SUCCEEDED : rootCommand . setCommandStatus ( CommandStatus.SUCCEEDED ) ; return true ; } return true ; }
public void getNetworkConnectivityCheckTimeoutInSeconds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : NUMBER_CONSTANT ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.NetworkConnectivityCheckTimeoutInSeconds , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ java.lang.Override public void onRemoval () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = getDbFacade () . getStorageDomainDao () . getAllByConnectionId ( provider . getId () ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainEntry = storageDomains . get ( NUMBER_CONSTANT ) ; getDbFacade () . getStorageDomainDao () . remove ( storageDomainEntry . getId () ) ; }
@ java.lang.Override protected void executeCommand () { int missingDiskCount = getMissingDiskCount () ; if ( missingDiskCount <= NUMBER_CONSTANT ) { setOvfUpdateStep ( OvfUpdateStep.OVF_UPLOAD ) ; updateOvfStoreContent () ; } else { setOvfUpdateStep ( OvfUpdateStep.OVF_STORES_CREATION ) ; createOvfStoreDisks ( getMissingDiskCount () ) ; } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT , getEntity ( NUMBER_CONSTANT ) ) ; setUpGetStorageServerConnectionExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.StorageDomain model = org.ovirt.engine.api.restapi.resource.BackendStorageDomainsResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue () ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.IsVmWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
@ org.junit.Test public void testGetRelatedTableName () { org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , comp . getRelatedTableName ( STRING_CONSTANT ) ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , comp . getRelatedTableName ( STRING_CONSTANT ) ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , comp . getRelatedTableName ( null ) ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound , org.ovirt.engine.core.common.businessentities.VDS entity ) throws java.lang.Exception { while ( ( times -- ) > NUMBER_CONSTANT ) { setUpGetEntityExpectations ( VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , ( notFound ? null : entity ) ) ; } }
private void runNextActionFlowWithFirstActionFailureTestCommon ( boolean waitFoResult ) { org.ovirt.engine.ui.uicommonweb.action.UiAction action1 = createAction ( waitFoResult , true ) ; org.ovirt.engine.ui.uicommonweb.action.UiAction action2 = createAction ( waitFoResult , true ) ; action1 . then ( action2 ) ; action1 . runAction () ; verifyRunActionAndExecuteCallbacksRandomly ( false , action1 . getActionFlowState () , NUMBER_CONSTANT , waitFoResult ) ; verifyRunActionAndExecuteCallbacksRandomly ( true , action1 . getActionFlowState () , NUMBER_CONSTANT , NUMBER_CONSTANT , waitFoResult ) ; assertFinishedWithErrors ( java.util.Arrays . asList ( action1 , action2 ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , null ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
private void verifyActions ( org.ovirt.engine.api.model.HostNics list ) { assertNotNull ( list . getActions () ) ; assertNotNull ( list . getActions () . getLinks () ) ; assertNotNull ( list . getActions () . getLinks () . get ( NUMBER_CONSTANT ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SETUPNETWORKS_ACTION_URL , list . getActions () . getLinks () . get ( NUMBER_CONSTANT ) . getHref () ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SETUPNETWORKS_ACTION_REL , list . getActions () . getLinks () . get ( NUMBER_CONSTANT ) . getRel () ) ; }
private void endDefaultOperations () { endUnlockOps () ; if ( isTemplateVersion () ) { org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap . put ( org.ovirt.engine.core.bll.AddVmTemplateCommand . getParameters () . getBaseTemplateId () , null ) ; java.lang.String jobId = getSchedulUtil () . scheduleAOneTimeJob ( this , STRING_CONSTANT , new java.lang.Class [ NUMBER_CONSTANT ] , new java.lang.Object [ NUMBER_CONSTANT ] , NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ; org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap . put ( org.ovirt.engine.core.bll.AddVmTemplateCommand . getParameters () . getBaseTemplateId () , jobId ) ; } }
public java.util.List < java.net.InetAddress > resolveAll ( java.lang.String name ) throws java.net.UnknownHostException { org.ovirt.engineextensions.aaa.ldap.Resolver.log . debug ( STRING_CONSTANT , name ) ; java.util.List < java.net.InetAddress > addresses = _resolveAll ( name ) ; java.util.List < java.net.InetAddress > ret ; if ( ( addresses . size () ) == NUMBER_CONSTANT ) { ret = addresses ; } else { ret = new java.util.ArrayList <> ( addresses ) ; java.util.Collections . shuffle ( ret , random ) ; } org.ovirt.engineextensions.aaa.ldap.Resolver.log . debug ( STRING_CONSTANT , ret ) ; return ret ; }
private void refreshClusterData ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { log . debugFormat ( STRING_CONSTANT , cluster . getname () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > existingServers = getVdsDao () . getAllForVdsGroup ( cluster . getId () ) ; org.ovirt.engine.core.common.businessentities.VDS upServer = getClusterUtils () . getUpServer ( cluster . getId () ) ; if ( upServer == null ) { log . debugFormat ( STRING_CONSTANT , cluster . getname () ) ; return; } refreshServerData ( cluster , upServer , existingServers ) ; refreshVolumeData ( cluster , upServer , existingServers ) ; }
public static < E extends org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > java.util.Map < java.lang.String , E > hostInterfacesByNetworkName ( java.util.Collection < E > entityList ) { if ( entityList != null ) { java.util.Map < java.lang.String , E > map = new java.util.HashMap < java.lang.String , E > () ; for ( E e : entityList ) { if ( ( e . getNetworkName () ) != null ) { map . put ( e . getNetworkName () , e ) ; } } return map ; } else { return java.util.Collections . emptyMap () ; } }
@ org.junit.Test public void testRemoveWithoutParam () { container . SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; container . removeSession () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.ovirt.engine.core.utils.ThreadLocalParamsContainer . setHttpSessionId ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; container . removeSession () ; org.junit.Assert . assertNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
private boolean validateStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > vmDisksList , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > memoryDisksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getAllDisks ( vmDisksList , memoryDisksList ) ; org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator ( disksList ) ; return ( ( validate ( sdValidator . allDomainsExistAndActive () ) ) && ( validate ( sdValidator . allDomainsWithinThresholds () ) ) ) && ( validate ( sdValidator . allDomainsHaveSpaceForAllDisks ( vmDisksList , memoryDisksList ) ) ) ; }
private static java.util.List < org.ovirt.engine.core.compat.Guid > extractIconIds ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VM > vms , boolean smallIcons , boolean largeIcons ) { final java.util.List < org.ovirt.engine.core.compat.Guid > result = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( vm == null ) { continue; } if ( smallIcons ) { result . add ( vm . getStaticData () . getSmallIconId () ) ; } if ( largeIcons ) { result . add ( vm . getStaticData () . getLargeIconId () ) ; } } return result ; }
@ org.junit.Test public void fakeVlanNicWithVmNetworkDenied () { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork ( STRING_CONSTANT ) ; net2 . setVlanId ( NUMBER_CONSTANT ) ; mockExistingNetworks ( net1 , net2 ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork ( STRING_CONSTANT , net1 ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface fakeVlanNic = createVlan ( nic . getName () , NUMBER_CONSTANT , net2 . getName () ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , fakeVlanNic ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK , nic . getName () ) ; }
@ java.lang.Override protected void AsyncSearch () { super . AsyncSearch () ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity () ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend . RegisterQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters ( vm . getId () ) ) ) ; setItems ( getAsyncResult () . getData () ) ; }
private void doInit ( org.ovirt.engine.api.extensions.ExtMap input ) throws java.io.IOException , java.sql.SQLException { javax.sql.DataSource ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider ( configuration ) . provide () ; this . authentication = new org.ovirt.engine.extension.aaa.jdbc.core.Authentication ( ds ) ; this . tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks ( ds , this . authentication ) ; org.ovirt.engine.extension.aaa.jdbc.binding.api.ExtensionUtils . checkDbVersion ( ds , input . < org.ovirt.engine.api.extensions.ExtMap > get ( Base.InvokeKeys.CONTEXT ) . < java.lang.String > get ( Base.ContextKeys.CONFIGURATION_FILE ) ) ; }
@ java.lang.Override protected void moveSelectionDown () { if ( ( ( suggestionPopup ) != null ) && ( suggestionPopup . isShowing () ) ) { suggestionsTable . focusItemByIndex ( suggestionsTable . getSelectedItemIndex () ) ; if ( ( suggestionsTable . getSelectedItemIndex () ) == NUMBER_CONSTANT ) { com.google.gwt.core.client.Scheduler . get () . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand () { @ java.lang.Override public void execute () { suggestionsTable . getElement () . getParentElement () . setScrollTop ( NUMBER_CONSTANT ) ; } } ) ; } } }
@ java.lang.Override @ org.junit.jupiter.api.Test public void testListCrashClientLocale () { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpNetworkAttachmentsQueryExpectations ( t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
@ java.lang.Override public void serviceFound ( org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync foundService ) { foundService . logOff ( new com.google.gwt.user.client.rpc.AsyncCallback < org.ovirt.engine.core.common.action.VdcReturnValueBase > () { @ java.lang.Override public void onSuccess ( final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { xsrfRequestBuilder . setXsrfToken ( null ) ; callback . onSuccess ( result ) ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { xsrfRequestBuilder . setXsrfToken ( null ) ; callback . onFailure ( caught ) ; } } ) ; }
@ java.lang.Override protected void endWithFailure () { setIsVmRunningStateless () ; if ( _isVmRunningStateless ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand . getBackend () . endAction ( VdcActionType.CreateAllSnapshotsFromVm , org.ovirt.engine.core.bll.RunVmCommand . getParameters () . getImagesParameters () . get ( NUMBER_CONSTANT ) , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand . getCompensationContext () ) ) ; setSucceeded ( vdcReturnValue . getSucceeded () ) ; } else { super . endWithFailure () ; } }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand command ) { org.mockito.Mockito . doReturn ( serviceDao ) . when ( command ) . getGlusterServiceDao () ; org.mockito.Mockito . doReturn ( glusterUtils ) . when ( command ) . getGlusterUtils () ; org.mockito.Mockito . doReturn ( getUpServers () ) . when ( glusterUtils ) . getAllUpServers ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ org.junit.Test public void validateFailsDiffInterface () { cmd = org.mockito.Mockito . spy ( createTestCommand ( volumeId1 , getBricks ( volumeId1 , NUMBER_CONSTANT ) , NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ) ; prepareMocks ( cmd ) ; prepareInterfaceMocks () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.vdsbroker.attestation.AttestationValue ) ) { return false ; } org.ovirt.engine.core.vdsbroker.attestation.AttestationValue other = ( ( org.ovirt.engine.core.vdsbroker.attestation.AttestationValue ) ( obj ) ) ; return ( java.util.Objects . equals ( hostName , other.hostName ) ) && ( java.util.Objects . equals ( trustLevel , other.trustLevel ) ) ; }
@ java.lang.Override protected void ExecuteVdsBrokerCommand () { java.util.List < java.lang.String > vmIds = org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand . getParameters () . getVmIds () ; java.lang.String [] vmIdsArray = vmIds . toArray ( new java.lang.String [ vmIds . size () ] ) ; fullVmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand . getBroker () . list ( java.lang.Boolean.TRUE . toString () , vmIdsArray ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand . ProceedProxyReturnValue () ; java.util.Map < java.lang.String , java.lang.Object > [] struct = fullVmListReturn.mVmList ; org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand . setReturnValue ( struct ) ; }
@ org.junit.Test public void mapVmWatchdog () { org.ovirt.engine.core.common.businessentities.VmWatchdog entity = new org.ovirt.engine.core.common.businessentities.VmWatchdog () ; entity . setAction ( VmWatchdogAction.RESET ) ; entity . setModel ( VmWatchdogType.i6300esb ) ; entity . setId ( Guid.Empty ) ; org.ovirt.engine.api.model.Watchdog model = org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( entity , null ) ; org.junit.Assert . assertNotNull ( model ) ; org.junit.Assert . assertEquals ( WatchdogAction.RESET , model . getAction () ) ; org.junit.Assert . assertEquals ( WatchdogModel.I6300ESB , model . getModel () ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel > createActionTable () { return new org.ovirt.engine.ui.userportal.widget.table.column.UserPortalSimpleActionTable < org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel > ( modelProvider , getTableResources () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getEventBus () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getClientStorage () , new org.ovirt.engine.ui.userportal.widget.refresh.UserPortalRefreshManager ( modelProvider , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getEventBus () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . getClientStorage () ) ) ; }
@ org.junit.Test public void testGetIdsForOvfDeletionTwoToDelete () { vmDao . remove ( FixturesTool.VM_RHEL5_POOL_50 ) ; vmDao . remove ( FixturesTool.VM_RHEL5_POOL_51 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > guidsToDelete = vmAndTemplatesGenerationsDao . getIdsForOvfDeletion ( FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , guidsToDelete . size () ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , guidsToDelete . contains ( FixturesTool.VM_RHEL5_POOL_50 ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , guidsToDelete . contains ( FixturesTool.VM_RHEL5_POOL_51 ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Event model , int index ) { assertNotNull ( model ) ; assertEquals ( model . getId () , java.lang.String . valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; assertEquals ( model . getSeverity () , LogSeverity.ALERT ) ; assertEquals ( model . getDescription () , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; assertEquals ( model . getOrigin () , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; assertEquals ( model . getCustomId () , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; }
@ org.junit.Test public void validateWrongDiskImageTypeTemplate ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initTemplateDiskImage () ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK . toString () ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVMDevice ( org.ovirt.engine.core.compat.Guid vmID , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , vmID ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , VmDeviceType.DISK . getName () , STRING_CONSTANT , NUMBER_CONSTANT , null , true , true , true , STRING_CONSTANT , null , disk . getVmSnapshotId () , null ) ; }
@ java.lang.Override protected void onReveal () { super . onReveal () ; if ( hasSelection () ) { clearSelection () ; } else { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter . setSubTabPanelVisible ( false ) ; } getTable () . resetScrollPosition () ; getTable () . setLoadingState ( LoadingState.LOADING ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Tags > convert ( java.lang.Object source ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ret = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.Tags tags : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ) ( source ) ) ) { if ( ( tags . getType () ) == ( org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag ) ) { ret . add ( tags ) ; } } return ret ; } return new java.util.ArrayList <> () ; }
public void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : NUMBER_CONSTANT ; } } ; aQuery.asyncCallback . onSuccess ( aQuery . getModel () , NUMBER_CONSTANT ) ; }
private void updateReportsAvailability () { if ( org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . isReportsEnabled () ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.StorageDomain > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper . getInstance () . getResourceSubActions ( STRING_CONSTANT , getModelProvider () ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions . size () ) > NUMBER_CONSTANT ) ) { getTable () . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabStorageView.constants . showReportStorage () , resourceSubActions ) ) ; } } }
protected boolean performLiveSnapshot ( final org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInScope ( TransactionScopeOption.Suppress , new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { runVdsCommand ( VDSCommandType.Snapshot , buildLiveSnapshotParameters ( snapshot ) ) ; return null ; } } ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { handleVdsLiveSnapshotFailure ( e ) ; return false ; } return true ; }
@ org.junit.Test public void mapAction () { for ( org.ovirt.engine.api.model.WatchdogAction action : org.ovirt.engine.api.model.WatchdogAction . values () ) { org.ovirt.engine.core.common.businessentities.VmWatchdogAction backendAction = org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( action ) ; org.junit.Assert . assertNotNull ( backendAction ) ; org.junit.Assert . assertEquals ( backendAction . name () . toLowerCase () , action . name () . toLowerCase () ) ; } }
private void initializeObjectState () { if ( org.apache.commons.lang.StringUtils . isEmpty ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getSnapshotName () ) ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = org.ovirt.engine.core.bll.RemoveSnapshotCommand . getSnapshotDao () . get ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getParameters () . getSnapshotId () ) ; if ( snapshot != null ) { setSnapshotName ( snapshot . getDescription () ) ; } } setStoragePoolId ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () . getStoragePoolId () ) ; }
@ org.junit.Before public void prepareParams () { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase () ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand ( parameters , null ) ) ; org.mockito.Mockito . doReturn ( storageConnDao ) . when ( command ) . getStorageConnDao () ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( command ) . getStorageDomainDao () ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . findConnectionWithSameDetails ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.StorageServerConnections . class ) ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetTagExpectations ( false ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ java.lang.Override protected boolean canDoAction () { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > domainsMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > () ; if ( ! ( canDoActionBeforeCloneVm ( domainsMap ) ) ) { return false ; } if ( getParameters () . isImportAsNewEntity () ) { initImportClonedVm () ; } return canDoActionAfterCloneVm ( domainsMap ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ) ) ; java.util.Collections . sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer () ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model ) ) ; searchableListModel . setItems ( disks ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue response ) { if ( response . getSucceeded () ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > checkedLuns = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( response . getReturnValue () ) ) ; postGetLunsMessages ( sanStorageModel . getUsedLunsMessages ( checkedLuns ) ) ; } else { sanStorageModel . setGetLUNsFailure ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . couldNotRetrieveLUNsLunsFailure () ) ; } }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForRemove () ; mockBackend ( false , EngineError.GlusterHookRemoveFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . remove ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_REMOVE_FAILED , cmd . getAuditLogTypeValue () ) ; }
public void testNegativeConstructors () { org.ovirt.engine.core.compat.TimeSpan span = new org.ovirt.engine.core.compat.TimeSpan ( NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Days ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Hours ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Minutes ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Seconds ) ; assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , span.Milliseconds ) ; }
protected void setStorageDomainStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , org.ovirt.engine.core.bll.context.CompensationContext context ) { if ( ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () ) != null ) && ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () . getStoragePoolId () ) != null ) ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () . getStoragePoolIsoMapData () ; if ( context != null ) { context . snapshotEntityStatus ( map ) ; } org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () . setStatus ( status ) ; org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStoragePoolIsoMapDAO () . updateStatus ( map . getId () , status ) ; } }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.VM vm ) { org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup = getEntity () ; affinityGroup . getEntityIds () . add ( asGuid ( vm . getId () ) ) ; return performAction ( VdcActionType.EditAffinityGroup , new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters ( affinityGroup . getId () , affinityGroup ) ) ; }
@ org.junit.After public void tearDown ( ) throws java.lang.Exception { org.mockito.Mockito . verify ( queryStartEvent , org.mockito.Mockito . atLeastOnce () ) . raise ( org.ovirt.engine.ui.frontend.Frontend . class , EventArgs.Empty ) ; org.mockito.Mockito . verify ( queryCompleteEvent , org.mockito.Mockito . atLeastOnce () ) . raise ( org.ovirt.engine.ui.frontend.Frontend . class , EventArgs.Empty ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.ui.frontend.Frontend . getCurrentContext () , STRING_CONSTANT ) ; }
private org.ovirt.engine.core.common.businessentities.AuditLog createAuditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { if ( auditLogable . isExternal () ) { return auditLogable . createAuditLog ( logType , loggerString ) ; } final java.lang.String messageByType = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . getMessageOrNull ( logType ) ; if ( messageByType == null ) { return null ; } else { java.lang.String resolvedMessage = resolveMessage ( messageByType , auditLogable ) ; return auditLogable . createAuditLog ( logType , resolvedMessage ) ; } }
private void mockVm () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; vm . setStatus ( VMStatus.Down ) ; vm . setStoragePoolId ( org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommandTest.STORAGE_POOL_ID ) ; org.mockito.Mockito . doReturn ( vm ) . when ( cmd ) . getVm () ; }
@ java.lang.Override public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onFailed ( cmdId , childCmdIds ) ; log . error ( STRING_CONSTANT , getDiskId () ) ; getCommand () . getParameters () . setTaskGroupSuccess ( false ) ; onFinish ( cmdId ) ; }
@ org.junit.jupiter.api.BeforeEach public void init () { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.String > > initialHashes = new java.util.ArrayList <> () ; initialHashes . add ( new org.ovirt.engine.core.common.utils.Pair ( org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID , org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH ) ) ; org.mockito.Mockito . doReturn ( initialHashes ) . when ( vmDynamicDao ) . getAllDevicesHashes () ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.compat.Version . getLast () ) . when ( vdsManager ) . getCompatibilityVersion () ; org.mockito.Mockito . doReturn ( vdsManager ) . when ( resourceManager ) . getVdsManager ( org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.events.EventModel eventModel ) { driver . edit ( eventModel ) ; org.ovirt.engine.core.common.businessentities.AuditLog event = eventModel . getEvent () ; eventIdLabel . asValueBox () . setValue ( java.lang.String . valueOf ( event . getlog_typeValue () ) ) ; eventTimeLabel . asValueBox () . setValue ( new org.ovirt.engine.ui.common.widget.renderer.FullDateTimeRenderer () . render ( event . getlog_time () ) ) ; eventMessageTextArea . asValueBox () . setValue ( event . getmessage () ) ; }
private void mockGetForDisk ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > vmsMap = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > () ; vmsMap . put ( java.lang.Boolean.TRUE , vms ) ; org.mockito.Mockito . when ( vmDAO . getForDisk ( diskImageGuid ) ) . thenReturn ( vmsMap ) ; }
protected void selectDataCenterWithCluster ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.compat.Guid selectedCluster , java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster > dataCentersWithClusters ) { if ( selectedCluster == null ) { getDataCenterWithClustersList () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrDefault ( dataCentersWithClusters ) ) ; } else { model . getDataCenterWithClustersList () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrDefault ( dataCentersWithClusters , new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterWithClusterAccordingClusterPredicate ( selectedCluster ) ) ) ; } }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { nameEditor . setLabel ( constants . import_newName () ) ; selectLabelEditor . setText ( constants . cloneSelect () ) ; applyToAllEditor . setLabel ( constants . cloneApplyToAll () ) ; noCloneEditor . setLabel ( constants . cloneDontImport () ) ; }
@ org.junit.Test public void testRedundantMessages ( ) throws java.io.IOException { org.ovirt.engine.core.utils.EnumTranslationProperties props = new org.ovirt.engine.core.utils.EnumTranslationProperties ( org.ovirt.engine.core.common.errors.EngineMessage . class ) ; try ( java.io.InputStream is = new java.io.FileInputStream ( file ) ) { props . load ( is ) ; } catch ( org.ovirt.engine.core.utils.MissingEnumTranslationException exception ) { org.junit.Assert . fail ( ( ( ( STRING_CONSTANT + ( file . getAbsolutePath () ) ) + STRING_CONSTANT ) + ( exception . getMessage () ) ) ) ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { if ( returnValue . getSucceeded () ) { org.ovirt.engine.core.common.businessentities.VM vm = returnValue . getReturnValue () ; updateVms ( java.util.Collections . singletonList ( vm ) ) ; } else { setError ( messages . failedToLoadOva ( getOvaPath () . getEntity () ) ) ; } stopProgress () ; }
@ org.junit.Test public void testRemoveByStorageDomain ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveDisk , org.ovirt.engine.core.common.action.RemoveDiskParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendTemplateDiskResource.STORAGE_DOMAIN , GUIDS [ NUMBER_CONSTANT ] . toString () ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource . remove () ) ; }
protected void setUpAddExpectations ( ) throws java.lang.Exception { setUriInfo ( org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest . setUpBasicUriExpectations () ) ; org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest . setUpHttpHeaderExpectations ( STRING_CONSTANT , STRING_CONSTANT ) ; setUpGetVirtioScsiExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetSoundcardExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest . setUpGetRngDeviceExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; org.mockito.Mockito . doReturn ( java.lang.Boolean.TRUE ) . when ( getQuery () ) . connectStorageDomain ( org.mockito.ArgumentMatchers . eq ( storageDomain ) ) ; org.mockito.Mockito . doReturn ( java.lang.Boolean.TRUE ) . when ( getQuery () ) . disconnectStorageDomain ( org.mockito.ArgumentMatchers . eq ( storageDomain ) ) ; }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper qosValuesTest ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos ) { mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( STRING_CONSTANT , network ) ; mockExistingIfaces ( iface ) ; iface . setQos ( qos ) ; return createHelper ( createParametersForNics ( iface ) , Version.v3_4 ) ; }
@ org.junit.Test public void testSave () { newVmStatistics . setId ( org.ovirt.engine.core.dao.VmStatisticsDaoTest.NEW_VM_ID ) ; newVmStatistics . setMigrationProgressPercent ( NUMBER_CONSTANT ) ; dao . save ( newVmStatistics ) ; org.ovirt.engine.core.common.businessentities.VmStatistics stats = dao . get ( org.ovirt.engine.core.dao.VmStatisticsDaoTest.NEW_VM_ID ) ; org.junit.Assert . assertNotNull ( stats ) ; org.junit.Assert . assertEquals ( newVmStatistics , stats ) ; }
@ java.lang.Override protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel model ) { org.ovirt.engine.ui.common.widget.uicommon.template.TemplateGeneralModelForm.Driver.driver . edit ( model ) ; monitorCount . setText ( java.lang.Integer . toString ( getModel () . getMonitorCount () ) ) ; isStateless . setText ( java.lang.Boolean . toString ( getModel () . getIsStateless () ) ) ; }
public static void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
protected void mockFenceActionResults ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult [] results ) { org.mockito.stubbing.OngoingStubbing < org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult > fenceMethodResult = org.mockito.Mockito . when ( fenceAgentExecutor . fence ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ) ; for ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result : results ) { fenceMethodResult = fenceMethodResult . thenReturn ( result ) ; } }
@ org.junit.Test public void nonLocalStoragePoolAttachedToSingleCluster () { org.mockito.Mockito . when ( cluster . getStoragePoolId () ) . thenReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . when ( dataCenterDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.StoragePool . class ) ) ; org.junit.Assert . assertThat ( validator . localStoragePoolAttachedToSingleCluster () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { try { if ( org.ovirt.engine.ui.frontend.Frontend . ignoreFailure ( caught ) ) { return; } org.ovirt.engine.ui.frontend.Frontend.logger . log ( java.util.logging.Level.SEVERE , ( STRING_CONSTANT + caught ) , caught ) ; org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult ( queryTypeList , queryParamsList , null ) ; org.ovirt.engine.ui.frontend.Frontend . failureEventHandler ( caught ) ; callback . executed ( f ) ; } finally { org.ovirt.engine.ui.frontend.Frontend . raiseQueryCompleteEvent ( queryTypeList , context ) ; } }
private java.lang.String generateInfoFileData () { java.util.Map < java.lang.String , java.lang.Object > data = new java.util.HashMap <> () ; data . put ( OvfInfoFileConstants.LastUpdated , updateDate . toString () ) ; data . put ( OvfInfoFileConstants.Domains , java.util.Arrays . asList ( org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand . getParameters () . getStorageDomainId () ) ) ; return buildJson ( data , true ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObj ) { java.lang.Object returnValue = returnValueObj . getReturnValue () ; java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > allHostVfs = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > ) ( returnValue ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : allHostVfs ) { originalVfsConfigs . add ( vfsConfig ) ; nicToVfsConfig . put ( vfsConfig . getNicId () , new org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig ( vfsConfig ) ) ; } queryVfMap () ; }
private void onExport () { org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( getWindow () ) ) ; if ( ( model . getProgress () ) != null ) { return; } if ( ! ( model . validate () ) ) { return; } model . startProgress () ; getTemplatesNotPresentOnExportDomain () ; }
public void edit () { final org.ovirt.engine.core.common.businessentities.Network network = ( ( org.ovirt.engine.core.common.businessentities.Network ) ( getSelectedItem () ) ) ; if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ( network , this ) ; setWindow ( networkModel ) ; initDcList ( networkModel ) ; }
private void verifyAllContent ( org.ovirt.engine.api.model.Snapshot model , org.ovirt.engine.api.model.ConfigurationType type , java.lang.String data ) { assertNotNull ( model . getInitialization () ) ; assertNotNull ( model . getInitialization () . getConfiguration () ) ; assertEquals ( data , model . getInitialization () . getConfiguration () . getData () ) ; assertEquals ( type , model . getInitialization () . getConfiguration () . getType () ) ; }
@ org.junit.Before public void createCommand () { org.ovirt.engine.core.common.action.RunVmParams param = new org.ovirt.engine.core.common.action.RunVmParams ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > ( param ) ) ; mockVmRunHandler () ; mockSuccessfulSnapshotValidator () ; mockVmPropertiesUtils () ; mockBackend () ; }
@ org.junit.Test public void testVmPayloadMapToPaylod () { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload () ; vmPayload . setDeviceType ( org.ovirt.engine.core.common.utils.VmDeviceType.CDROM ) ; vmPayload . setVolumeId ( STRING_CONSTANT ) ; org.ovirt.engine.api.model.Payload payload = org.ovirt.engine.api.restapi.types.VmMapper . map ( vmPayload , null ) ; assertEquals ( vmPayload . getDeviceType () . name () , payload . getType () . name () ) ; assertEquals ( vmPayload . getVolumeId () , payload . getVolumeId () ) ; }
protected void startSubStep () { asyncTaskStep = org.ovirt.engine.core.bll.job.ExecutionHandler . addSubStep ( this . getExecutionContext () , org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase . getExecutionContext () . getJob () . getStep ( StepEnum.EXECUTING ) , getStepType () , org.ovirt.engine.core.dal.job.ExecutionMessageDirector . resolveStepMessage ( getStepType () , getStepMessageMap ( JobExecutionStatus.STARTED , null ) ) ) ; }
private org.ovirt.engine.core.dao.ClusterDao mockCluster () { org.ovirt.engine.core.dao.ClusterDao mock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.ClusterDao . class ) ; cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setEmulatedMachine ( STRING_CONSTANT ) ; org.mockito.Mockito . when ( mock . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( cluster ) ; return mock ; }
@ org.junit.Test public void testValidateEnoughSpace () { prepareForVmValidatorTests () ; spySdValidator () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( snapshotValidator ) . vmSnapshotDisksNotDuringMerge ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; cmd . getVm () . setStatus ( VMStatus.Up ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > parentSnapshots = mockDisksList ( NUMBER_CONSTANT ) ; org.mockito.Mockito . doReturn ( parentSnapshots ) . when ( cmd ) . getSourceImages () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
@ org.junit.Test public void canDoActionWrongDiskImageTypeVm ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Copy ) ; initVmDiskImage ( false ) ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . getTemplateForImage () ; command . defineVmTemplate () ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_NOT_TEMPLATE_DISK . toString () ) ) ; }
private boolean isDiskExistInVm ( org.ovirt.engine.core.common.businessentities.Disk disk ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > listVms = org.ovirt.engine.core.bll.AbstractDiskVmCommand . getVmDAO () . getVmsListForDisk ( disk . getId () , true ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : listVms ) { if ( vm . getId () . equals ( org.ovirt.engine.core.bll.AbstractDiskVmCommand . getVmId () ) ) { return true ; } } return false ; }
void initEditors () { isoEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.compat.RpmVersion > () { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.compat.RpmVersion version ) { return version . getRpmName () ; } } ) ; rbPassword = new com.google.gwt.user.client.ui.RadioButton ( STRING_CONSTANT ) ; rbPublicKey = new com.google.gwt.user.client.ui.RadioButton ( STRING_CONSTANT ) ; publicKeyEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextAreaLabelEditor () ; activateHostAfterInstallEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; overrideIpTablesEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction ( org.ovirt.engine.core.compat.Guid stepId , org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.businessentities.AsyncTasks dbAsyncTask , org.ovirt.engine.core.bll.job.ExecutionContext context ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask . getActionParameters () ; org.ovirt.engine.core.bll.CommandBase < > command = org.ovirt.engine.core.bll.CommandsFactory . createCommand ( actionType , parameters ) ; command . setContext ( new org.ovirt.engine.core.bll.context.CommandContext ( context ) ) ; return command . endAction () ; }
@ org.junit.Test public void testGetFcp ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT , getFcpEntity () ) ; setUpGetEntityExpectations ( VdcQueryType.GetLunsByVgId , org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] . toString () } , setUpLuns () ) ; setUriInfo ( setUpBasicUriExpectations () ) ; verifyGetFcp ( resource . get () ) ; }
@ java.lang.Override public java.lang.String getButtonToolTip () { if ( ( ! ( getModel () . getIsCloneVmSupported () ) ) && ( ( getModel () . getEntity () ) != null ) ) { org.ovirt.engine.core.common.queries.CommandVersionsInfo commandVersionsInfo = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getCommandVersionsInfo ( VdcActionType.AddVmFromSnapshot ) ; java.lang.String minimalClusterVersion = ( commandVersionsInfo != null ) ? commandVersionsInfo . getClusterVersion () . toString ( NUMBER_CONSTANT ) : STRING_CONSTANT ; return messages . cloneVmNotSupported ( minimalClusterVersion ) ; } else { return this . getTitle () ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String fingerprint = ( ( java.lang.String ) ( result ) ) ; if ( ( fingerprint != null ) && ( ( fingerprint . length () ) > NUMBER_CONSTANT ) ) { getGlusterHostFingerprint () . setEntity ( ( ( java.lang.String ) ( result ) ) ) ; setIsFingerprintVerified ( true ) ; } else { getGlusterHostFingerprint () . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . errorLoadingFingerprint () ) ; setIsFingerprintVerified ( false ) ; } }
@ org.junit.Test public void validateSucceeds () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . singletonList ( getStorageDevice ( STRING_CONSTANT ) ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
@ java.lang.Override public java.util.List < java.lang.String > convert ( java.lang.Object source ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList <> () ; if ( source != null ) { java.lang.String [] array = ( ( java.lang.String ) ( source ) ) . split ( STRING_CONSTANT , ( - NUMBER_CONSTANT ) ) ; for ( java.lang.String item : array ) { list . add ( item ) ; } } return list ; }
private void updateActionAvailability () { if ( ( ( getEntity () ) == null ) || ( getEntity () . isGroup () ) ) { getManageEventsCommand () . setIsExecutionAllowed ( false ) ; } else { getManageEventsCommand () . setIsExecutionAllowed ( true ) ; } }
@ org.junit.Test public void testValidateWithEmptySnapshotGuid () { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters ( vmId , org.ovirt.engine.core.compat.Guid.Empty ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand ( params , null ) ) ; org.mockito.Mockito . doNothing () . when ( cmd ) . updateVmDisksFromDb () ; org.mockito.Mockito . doReturn ( snapshotDao ) . when ( cmd ) . getSnapshotDao () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { updateSnapshotDisks ( disks ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper . sendWarningForNonExportableDisks ( this , disks , VmModelHelper.WarningType.VM_SNAPSHOT ) ; getCommands () . add ( getOnSaveCommand () ) ; getCommands () . add ( getCancelCommand () ) ; stopProgress () ; }
private void updateDirectLunDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isInternal = getIsInternal () . getEntity () ; if ( isInternal ) { return; } boolean isDirectLUNDiskkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.DirectLUNDiskEnabled , datacenter . getcompatibility_version () . getValue () ) ) ) ; getIsDirectLunDiskAvaialable () . setEntity ( isDirectLUNDiskkEnabled ) ; setMessage ( ( ! isDirectLUNDiskkEnabled ? org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS . directLUNDiskNotSupported () : STRING_CONSTANT ) ) ; }
private void doInit ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) throws java.io.IOException , java.sql.SQLException { this . ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider ( configuration ) . provide () ; this . authorization = new org.ovirt.engine.extension.aaa.jdbc.core.Authorization ( ds ) ; this . tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks ( ds , this . authorization ) ; org.ovirt.engine.extension.aaa.jdbc.binding.api.ExtensionUtils . checkDbVersion ( ds , input . < org.ovirt.engine.api.extensions.ExtMap > get ( Base.InvokeKeys.CONTEXT ) . < java.lang.String > get ( Base.ContextKeys.CONFIGURATION_FILE ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice > devs = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; getModel () . getIsRngEnabled () . setEntity ( ( ! ( devs . isEmpty () ) ) ) ; getModel () . setRngDevice ( ( devs . isEmpty () ? new org.ovirt.engine.core.common.businessentities.VmRngDevice () : devs . get ( NUMBER_CONSTANT ) ) ) ; }
void addBootOrder ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { java.lang.String s = java.lang.String . valueOf ( vmDevice . getBootOrder () ) ; if ( ( ! ( org.apache.commons.lang.StringUtils . isEmpty ( s ) ) ) && ( ! ( s . equals ( STRING_CONSTANT ) ) ) ) { struct . put ( VdsProperties.BootOrder , s ) ; } }
private void updateOptions () { getCompulsoryActions () . clear () ; getOptionalActions () . clear () ; if ( ( getEntity () ) != null ) { startProgress () ; if ( ! ( getEntity () . isLocal () ) ) { updateOptionsNonLocalFSData () ; } else { updateOptionsLocalFSData () ; } } }
@ org.junit.Test public void testGetVmsByInstanceTypeId () { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . getVmsListByInstanceType ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , result . size () ) ; org.junit.Assert . assertEquals ( result . iterator () . next () . getId () , new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void testExecuteQuery () { java.lang.String vmName = org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) ; org.mockito.Mockito . when ( getQueryParameters () . getName () ) . thenReturn ( vmName ) ; boolean result = org.ovirt.engine.core.utils.RandomUtils . instance () . nextBoolean () ; org.mockito.Mockito . doReturn ( result ) . when ( getQuery () ) . isVmWithSameNameExistStatic ( vmName , null ) ; getQuery () . executeQueryCommand () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , result , getQuery () . getQueryReturnValue () . getReturnValue () ) ; }
@ java.lang.Override protected void onRunOnce () { startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.RunVmOnce , createRunVmOnceParams () , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress () ; commandTarget . executeCommand ( runOnceCommand ) ; } } , this ) ; }
private void updateExportDomainLoadButtonEnabledState () { final boolean enabled = ( ( getModel () . getExportDomain () . getEntity () ) != null ) && ( getModel () . getDataCenters () . getIsChangable () ) ; getView () . getLoadVmsFromExportDomainButton () . setEnabled ( enabled ) ; }
private void logMessage ( org.ovirt.engine.core.common.AuditLogSeverity severity , java.lang.String logMessage ) { switch ( severity ) { case NORMAL : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . info ( logMessage ) ; break; case ERROR : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . error ( logMessage ) ; break; case ALERT : case WARNING : default: org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . warn ( logMessage ) ; break; } }
public java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskInterface > getDiskHotpluggableInterfaces ( java.lang.Integer osId , org.ovirt.engine.core.compat.Version version ) { java.util.Set < java.lang.String > diskHotpluggableInterfaces = getDiskHotpluggableInterfacesMap () . get ( new org.ovirt.engine.core.common.utils.Pair ( osId , version ) ) ; if ( diskHotpluggableInterfaces == null ) { return java.util.Collections . emptySet () ; } java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskInterface > diskInterfaces = new java.util.HashSet <> () ; for ( java.lang.String diskHotpluggableInterface : diskHotpluggableInterfaces ) { diskInterfaces . add ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface . valueOf ( diskHotpluggableInterface ) ) ; } return diskInterfaces ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > networkFilters = new java.util.ArrayList ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; networkFilters . add ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER ) ; getNetworkFilter () . setItems ( networkFilters ) ; initSelectedNetworkFilter () ; }
@ java.lang.Override public java.util.List < java.lang.String > convert ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > source ) { if ( source != null ) { java.util.ArrayList < java.lang.String > fileNameList = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : source ) { if ( desiredImage ( repoImage ) ) { fileNameList . add ( transform ( repoImage ) ) ; } } java.util.Collections . sort ( fileNameList , new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ) ; return fileNameList ; } return new java.util.ArrayList <> () ; }
protected org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion computeTemplateWithVersionToSelect ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion > newItems , org.ovirt.engine.core.compat.Guid previousTemplateId , boolean useLatest , boolean addLatest ) { if ( previousTemplateId == null ) { return org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase . computeNewTemplateWithVersionToSelect ( newItems , addLatest ) ; } org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion oldTemplateToSelect = org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( newItems , new org.ovirt.engine.ui.uicommonweb.Linq.TemplateWithVersionPredicate ( previousTemplateId , useLatest ) ) ; return oldTemplateToSelect != null ? oldTemplateToSelect : org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase . computeNewTemplateWithVersionToSelect ( newItems , addLatest ) ; }
protected void prepareMocks ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.mockito.Mockito . when ( cmd . getCluster () ) . thenReturn ( cluster ) ; org.mockito.Mockito . doReturn ( vds ) . when ( cmd ) . getVds () ; org.mockito.Mockito . doReturn ( status ) . when ( vds ) . getStatus () ; mockIsGlusterEnabled ( true ) ; org.mockito.Mockito . doReturn ( glusterUtil ) . when ( cmd ) . getGlusterUtil () ; }
protected boolean setAndValidateDiskProfiles () { java.util.Map < org.ovirt.engine.core.common.businessentities.storage.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand . getVm () . getImages () ) { map . put ( diskImage , org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand . getStorageDomainId () ) ; } return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper . setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand . getCurrentUser () ) ) ; }
private void setupParentPopulateExpectations () { org.easymock.EasyMock . expect ( bricksResourceMock . populateAdvancedDetails ( org.easymock.EasyMock . isA ( org.ovirt.engine.api.model.GlusterBrick . class ) , org.easymock.EasyMock . isA ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity . class ) ) ) . andDelegateTo ( new org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource () { @ java.lang.Override protected org.ovirt.engine.api.model.GlusterBrick populateAdvancedDetails ( org.ovirt.engine.api.model.GlusterBrick model , org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { model . setPort ( GlusterTestHelper.BRICK_PORT ) ; model . setMntOptions ( GlusterTestHelper.BRICK_MNT_OPT ) ; return model ; } } ) . anyTimes () ; }
@ java.lang.Override protected void addVmNetwork () { org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVdsGroupId () , getStoragePoolId () , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVdsGroup () . getcompatibility_version () , org.ovirt.engine.core.common.AuditLogType.ADD_VM_FROM_SNAPSHOT_INVALID_INTERFACES ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : vmFromConfiguration . getInterfaces () ) { vnicProfileHelper . updateNicWithVnicProfileForUser ( iface , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getCurrentUser () ) ; } vnicProfileHelper . auditInvalidInterfaces ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand . getVmName () ) ; super . addVmNetwork () ; }
protected boolean validateSoundDevice () { if ( ! ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils . isSoundDeviceExists ( getVm () . getManagedVmDeviceMap () . values () ) ) ) { return true ; } if ( ! ( osRepository . isSoundDeviceEnabled ( getVm () . getStaticData () . getOsId () , org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroup () . getCompatibilityVersion () ) ) ) { addCanDoActionMessageVariable ( STRING_CONSTANT , org.ovirt.engine.core.bll.ImportVmCommandBase . getVdsGroup () . getArchitecture () ) ; return failCanDoAction ( EngineMessage.SOUND_DEVICE_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; } return true ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; org.ovirt.engine.api.model.VnicProfile model = org.ovirt.engine.api.restapi.resource.BackendVnicProfileResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { org.ovirt.engine.api.restapi.resource.BackendVnicProfileResource resource = ( ( org.ovirt.engine.api.restapi.resource.BackendVnicProfileResource ) ( this . resource ) ) ; resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
private void setCookie ( final javax.servlet.http.HttpServletResponse response , final javax.servlet.ServletContext servletContext , final java.util.Locale userLocale ) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie ( org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE , userLocale . toString () ) ; cookie . setPath ( org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH ) ; cookie . setMaxAge ( java.lang.Integer.MAX_VALUE ) ; response . addCookie ( cookie ) ; }
private void refreshAllVdssInPool () { java.util.List < org.ovirt.engine.core.compat.Guid > vdsIdsToSetNonOperational = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > () ; runSynchronizeOperation ( new org.ovirt.engine.core.bll.storage.RefreshPoolSingleAsyncOperationFactory () , vdsIdsToSetNonOperational ) ; for ( org.ovirt.engine.core.compat.Guid vdsId : vdsIdsToSetNonOperational ) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( vdsId , org.ovirt.engine.core.common.businessentities.NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE ) ; tempVar . setStorageDomainId ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand . getStorageDomain () . getId () ) ; tempVar . setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand . getBackend () . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; } }
@ org.junit.Test public void testAddExistingBlockDomainSuccessfully () { org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest . getLUNs () ) . when ( command ) . getLUNsFromVgInfo ( parameters . getStorageDomain () . getStorage () ) ; command . executeCommand () ; org.junit.Assert . assertTrue ( command . getReturnValue () . getSucceeded () ) ; }
public void start () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > () ; for ( java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel . getSelectedItems () ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list . add ( new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( vds . getId () ) ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.StartVds , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) {} } , null ) ; }
public static void fillImagesMapBasedOnTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > diskInfoDestinationMap , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > destStorages , boolean notCheckSize ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageDomainDao () . getAllForStoragePool ( template . getStoragePoolId () ) ; org.ovirt.engine.core.bll.ImagesHandler . fillImagesMapBasedOnTemplate ( template , domains , diskInfoDestinationMap , destStorages , notCheckSize ) ; }
@ org.junit.Ignore @ org.junit.Test public void testGetAllMultiStoragePoolSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery . executeQueryCommand () ; org.junit.Assert . assertEquals ( storagePoolResultList , searchQuery . getQueryReturnValue () . getReturnValue () ) ; }
private void initVncKeyboardLayout () { final java.util.List < java.lang.String > layouts = ( ( java.util.List < java.lang.String > ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.VncKeyboardLayoutValidValues ) ) ) ; final java.util.ArrayList < java.lang.String > vncKeyboardLayoutItems = new java.util.ArrayList < java.lang.String > () ; vncKeyboardLayoutItems . add ( null ) ; vncKeyboardLayoutItems . addAll ( layouts ) ; getVncKeyboardLayout () . setItems ( vncKeyboardLayoutItems ) ; getVncKeyboardLayout () . setIsAvailable ( isVncSelected () ) ; }
@ java.lang.Override protected com.google.gwt.user.cellview.client.CellTree createDataDisplayWidget ( org.ovirt.engine.ui.webadmin.uicommon.model.SystemTreeModelProvider modelProvider ) { com.google.gwt.user.cellview.client.CellTree display = new org.ovirt.engine.ui.common.widget.tree.ElementIdCellTree < org.ovirt.engine.ui.webadmin.uicommon.model.SystemTreeModelProvider > ( modelProvider , null , org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.res ) { @ java.lang.Override protected void onLoad () { expandTree ( getDataDisplayWidget () . getRootTreeNode () , org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.ITEM_LEVEL ) ; } } ; display . setAnimationEnabled ( true ) ; modelProvider . setDataDisplay ( display ) ; return display ; }
public void getDataCenterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; storageDomain . setStorageFormat ( StorageFormatType.V3 ) ; storageDomain . setStorageType ( StorageType.NFS ) ; storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; storagePool . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; storagePool . setCompatibilityVersion ( Version.ALL . get ( NUMBER_CONSTANT ) ) ; spyValidator () ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getStorageServerConnectionLunMapDao () ; org.ovirt.engine.core.dao.StorageServerConnectionDao storageServerConnectionDao = dbFacade . getStorageServerConnectionDao () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections existingConnection = storageServerConnectionDao . get ( STRING_CONSTANT ) ; existingLUNStorageMap = dao . get ( new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMapId ( STRING_CONSTANT , existingConnection . getid () ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDaoTest.FREE_LUN_ID , existingConnection . getid () ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { org.ovirt.engine.core.bll.context.CompensationContext context = getCompensationContext () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains ) { for ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map : getStoragePoolIsoMap ( domain ) ) { context . snapshotEntityStatus ( map , map . getstatus () ) ; updateStatus ( map , status ) ; } } getCompensationContext () . stateChanged () ; return null ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.action.MigrateVmParameters ) ) { return false ; } org.ovirt.engine.core.common.action.MigrateVmParameters other = ( ( org.ovirt.engine.core.common.action.MigrateVmParameters ) ( obj ) ) ; return ( ( java.util.Objects . equals ( getVmId () , other . getVmId () ) ) && ( ( forceMigrationForNonMigratableVm ) == ( other.forceMigrationForNonMigratableVm ) ) ) && ( java.util.Objects . equals ( targetVdsGroupId , other.targetVdsGroupId ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfiguration () { org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address () ; address . setAddress ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS ) ; address . setNetmask ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK ) ; address . setGateway ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY ) ; address . setBootProtocol ( NetworkBootProtocol.STATIC_IP ) ; org.ovirt.engine.core.common.businessentities.network.IpConfiguration result = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration () ; result . setIPv4Addresses ( java.util.Collections . singletonList ( address ) ) ; return result ; }
@ java.lang.Override protected void executeNetworkCommand ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < > op2 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel , java.lang.Object . . . params ) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel ; assert op2 == null ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bondModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel ) ( op1 ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation . detachAllLabels ( bondModel , dataFromHostSetupNetworksModel ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation . detachAllNetworks ( bondModel , dataFromHostSetupNetworksModel ) ; dataFromHostSetupNetworksModel . removeBondFromParameters ( bondModel . getCreateOrUpdateBond () ) ; }
@ org.junit.Test public void validateFailsForVdsNonUp () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters () , null ) ) ; prepareMocks ( cmd , VDSStatus.Down ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.mockito.Mockito . doReturn ( VDSStatus.Error ) . when ( vds ) . getStatus () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.mockito.Mockito . doReturn ( VDSStatus.Maintenance ) . when ( vds ) . getStatus () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { resource . getParent () . setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.ReportedDevice device = resource . get () ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmReportedDeviceResourceTest.DEVICE_ID . toString () , device . getId () ) ; verifyLinks ( device ) ; }
@ org.junit.Test public void testMoveNamedParent ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetTagByTagName , org.ovirt.engine.core.common.queries.NameQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { NAMES [ org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.PARENT_IDX ] } , getEntity ( org.ovirt.engine.api.restapi.resource.BackendTagResourceTest.NEW_PARENT_IDX ) ) ; org.ovirt.engine.api.model.Tag model = org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . getModel ( NUMBER_CONSTANT ) ; model . getParent () . setId ( null ) ; model . getParent () . setName ( NAMES [ org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.PARENT_IDX ] ) ; doTestMove ( model , NUMBER_CONSTANT ) ; }
public org.ovirt.engine.core.common.job.Step addTaskStep ( org.ovirt.engine.core.bll.job.ExecutionContext context , org.ovirt.engine.core.common.job.StepEnum stepName , java.lang.String description ) { if ( context == null ) { return null ; } org.ovirt.engine.core.common.job.Step step = null ; if ( context . isTasksMonitored () ) { org.ovirt.engine.core.common.job.Step parentTaskStep = context . getParentTasksStep () ; if ( parentTaskStep != null ) { step = addSubStep ( parentTaskStep , stepName , description ) ; } } return step ; }
@ org.junit.Test public void testAddHostedEngineStorageFails () { org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest . getLUNs () ) . when ( command ) . getLUNsFromVgInfo ( parameters . getStorageDomain () . getStorage () ) ; org.mockito.Mockito . doReturn ( java.util.Collections . emptyList () ) . when ( command ) . getAllLuns () ; parameters . getStorageDomain () . setStorageName ( StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME ) ; org.junit.Assert . assertFalse ( command . canAddDomain () ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . assertCanDoActionMessages ( STRING_CONSTANT , command , VdcBllMessages.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE ) ; }
private static void compose ( java.lang.StringBuilder builder , java.lang.String key , java.lang.String value ) { final char DELIMITER = CHAR_CONS ; final char NAME_VALUE_SEPARATOR = CHAR_CONS ; if ( ( builder . length () ) > NUMBER_CONSTANT ) { builder . append ( DELIMITER ) ; } builder . append ( key ) . append ( NAME_VALUE_SEPARATOR ) . append ( value ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { if ( ( _managementNetwork ) != null ) { _parser . cliEnvironmentSet ( VdsmEnv.MANAGEMENT_BRIDGE_NAME , _managementNetwork ) ; } else if ( _isLegacyNode ) { _parser . cliEnvironmentSet ( VdsmEnv.MANAGEMENT_BRIDGE_NAME , org.ovirt.engine.core.utils.NetworkUtils . getEngineNetwork () ) ; } else { _parser . cliNoop () ; } return true ; }
@ java.lang.Override public void init ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { setDiskImages ( diskImages ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel moveDiskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > diskImages = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; moveDiskModel . onInitAllDisks ( diskImages ) ; moveDiskModel . onInitDisks () ; } } ) ) ; }
@ java.lang.Override protected void initMtu () { getHasMtu () . setEntity ( ( ( getNetwork () . getMtu () ) != NUMBER_CONSTANT ) ) ; getMtu () . setEntity ( ( ( getNetwork () . getMtu () ) != NUMBER_CONSTANT ? getNetwork () . getMtu () : null ) ) ; }
@ org.junit.Test public void validateSameSourceAndDest () { destStorageId = srcStorageId ; initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; command . getParameters () . setStorageDomainId ( destStorageId ) ; command . setStorageDomainId ( destStorageId ) ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME ) ; }
private boolean hasImages () { int allowedDisksNum = getOvfInfo () . size () ; return ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getDiskImageDao () . getAllSnapshotsForStorageDomain ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () . getId () ) . size () ) > allowedDisksNum ) || ( ( getImageStorageDomainMapDao () . getAllByStorageDomainId ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () . getId () ) . size () ) > allowedDisksNum ) ; }
private void createProfiles ( ) throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { for ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy authnExtension : org.ovirt.engine.core.extensions.mgr.ExtensionsManager . getInstance () . getProvidedExtensions ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_SERVICE ) ) { registerProfile ( new org.ovirt.engine.core.aaa.AuthenticationProfile ( authnExtension , org.ovirt.engine.core.extensions.mgr.ExtensionsManager . getInstance () . getExtensionByName ( authnExtension . getContext () . < java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) . getProperty ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_AUTHZ_PLUGIN ) ) ) ) ; } }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters () { return new org.ovirt.engine.core.common.vdscommands.TargetDomainImageGroupVDSCommandParameters ( getEnclosingCommand () . getParameters () . getStoragePoolId () , getEnclosingCommand () . getParameters () . getSourceStorageDomainId () , getEnclosingCommand () . getParameters () . getImageGroupID () , getEnclosingCommand () . getParameters () . getTargetStorageDomainId () ) ; }
@ java.lang.Override public void syncWithBackend () { super . syncWithBackend () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getClusterList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { onGetClusterList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( ReturnValue ) ) ) ; } } ) , getSelectedDc () . getId () ) ; }
@ org.junit.Before public void setup () { org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . bind ( org.ovirt.engine.core.common.osinfo.OsRepository . class , osRepository ) ; initVm () ; images = new java.util.ArrayList <> () ; emulatedMachine = STRING_CONSTANT ; cpuId = STRING_CONSTANT ; underTest = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter ( vm , images , version , emulatedMachine , cpuId , osRepository ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Host postPopulate ( org.ovirt.engine.api.model.Host from ) { while ( ( from . getPort () ) == NUMBER_CONSTANT ) { from . setPort ( org.ovirt.engine.api.restapi.types.MappingTestHelper . rand ( NUMBER_CONSTANT ) ) ; } from . setProtocol ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.HostProtocol . class ) ) ; from . getSpm () . setPriority ( NUMBER_CONSTANT ) ; from . getPowerManagement () . setPmProxies ( new org.ovirt.engine.api.model.PmProxies () ) ; return from ; }
private void removeDiskImages () { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > images = org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( getVm () . getDiskMap () . values () , true , false ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage image : images ) { image . setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays . asList ( getParameters () . getStorageDomainId () ) ) ) ; image . setStoragePoolId ( getParameters () . getStoragePoolId () ) ; } removeVmImages ( images ) ; }
@ org.junit.Test public void testListWithEveryonePermissions ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetEntityExpectations ( VdcQueryType.GetDbUserByUserId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getUserByIdx ( NUMBER_CONSTANT ) , true ) ; setUpQueryExpectations ( STRING_CONSTANT , null , org.ovirt.engine.api.restapi.resource.EVERYONE ) ; collection . setUriInfo ( uriInfo ) ; verifyCollection ( getCollection () ) ; }
@ org.junit.Test public void testGetCurrentWithMatrixTrue ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; uriInfo = addMatrixParameterExpectations ( uriInfo , STRING_CONSTANT , STRING_CONSTANT ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( getVm () ) ; org.ovirt.engine.api.model.Cdrom cdrom = resource . get () ; verifyModelWithCurrentCd ( cdrom ) ; }
private void revertCinderDisks () { for ( org.ovirt.engine.core.common.action.VdcActionParametersBase childParams : org.ovirt.engine.core.bll.storage.disk.cinder.CloneCinderDisksCommand . getParameters () . getImagesParameters () ) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase commandParameters = ( ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase ) ( childParams ) ) ; org.ovirt.engine.core.compat.Guid destinationImageId = commandParameters . getDestinationImageId () ; removeCinderDisk ( destinationImageId ) ; } }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setAllContentHeaderExpectation () ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; control . replay () ; org.ovirt.engine.api.model.NIC nic = resource . get () ; org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest . verifyModelSpecific ( nic , NUMBER_CONSTANT ) ; verifyLinks ( nic ) ; }
@ java.lang.Override protected boolean canDoAction () { boolean autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand . isUserCanBeAuthenticated () ; if ( autheticated ) { autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand . getCurrentUser () . isAdmin () ; if ( ! autheticated ) { addCanDoActionMessage ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; } } if ( ! autheticated ) { org.ovirt.engine.core.bll.LoginAdminUserCommand . logAutheticationFailure () ; } return autheticated ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > model ) { driver . edit ( model ) ; model . getSelectedItemChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { com.google.gwt.event.logical.shared.ValueChangeEvent . fire ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor . this , model ) ; } } ) ; }
@ java.lang.Override protected boolean validate () { if ( ! ( org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . getParameters () . isSkipDomainChecks () ) ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . getStorageDomain () ) ; return ( validate ( storageDomainValidator . isDomainExistAndActive () ) ) && ( validate ( storageDomainValidator . isDataDomain () ) ) ; } return true ; }
public org.ovirt.engine.core.common.businessentities.VmInit buildCloudInitParameters ( org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel model ) { if ( ( ( java.lang.Boolean ) ( model . getIsSysprepEnabled () . getEntity () ) ) || ( ( java.lang.Boolean ) ( model . getIsCloudInitEnabled () . getEntity () ) ) ) { return buildModelSpecificParameters ( model . getIsWindowsOS () ) ; } else { return null ; } }
private org.ovirt.engine.core.common.businessentities.storage_pool extractStoragePoolFromQuota ( org.ovirt.engine.core.compat.Guid quotaId ) { org.ovirt.engine.core.common.businessentities.storage_pool storagePool ; org.ovirt.engine.core.common.businessentities.Quota quota = getQuotaDAO () . getById ( quotaId ) ; storagePool = new org.ovirt.engine.core.common.businessentities.storage_pool () ; if ( quota != null ) { storagePool . setId ( quota . getStoragePoolId () ) ; storagePool . setQuotaEnforcementType ( quota . getQuotaEnforcementType () ) ; } else { storagePool . setId ( Guid.Empty ) ; storagePool . setQuotaEnforcementType ( QuotaEnforcementTypeEnum.DISABLED ) ; } return storagePool ; }
private void mockVmWithDisk ( org.ovirt.engine.core.compat.Guid storageId ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; image . setStorageIds ( new java.util.ArrayList ( java.util.Arrays . asList ( storageId ) ) ) ; mockVm () . getDiskMap () . put ( image . getId () , image ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > filterTemplatesByArchitecture ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > list , org.ovirt.engine.core.common.businessentities.ArchitectureType architecture ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > filteredList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > () ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : list ) { if ( ( template . getId () . equals ( Guid.Empty ) ) || ( template . getClusterArch () . equals ( architecture ) ) ) { filteredList . add ( template ) ; } } return filteredList ; }
@ org.junit.Test public void testSwitchStorageDomainType () { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command . getStorageDomain () . getStorageStaticData () ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.utils.Pair ( sdStatic , sdStatic . getId () ) ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters . class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
public void dismissEvent ( org.ovirt.engine.core.common.businessentities.AuditLog auditLog ) { if ( auditLog == null ) { return; } org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters params = new org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters ( auditLog . getAuditLogId () ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.RemoveAuditLogById , params , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.events.EventListModel . this . refresh () ; } } ) ; }
public static org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary getStorageSummary ( javax.sql.DataSource dataSource ) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary result = new org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary ( new org.ovirt.engine.ui.frontend.server.dashboard.StorageUtilization () ) ; result . setPhysicalTotal ( org.ovirt.engine.ui.frontend.server.dashboard.HourlySummaryHelper . getTotalStorageCount ( dataSource ) ) ; result . setHistory ( org.ovirt.engine.ui.frontend.server.dashboard.HourlySummaryHelper . getHourlyStorageHistory ( dataSource ) ) ; result . setUsed ( org.ovirt.engine.ui.frontend.server.dashboard.HourlySummaryHelper . getLast5MinutesStorageAverage ( dataSource ) ) ; org.ovirt.engine.ui.frontend.server.dashboard.HourlySummaryHelper . getVirtualStorageCount ( result , dataSource ) ; org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper . populateStorageUtilization ( result . getUtilization () , dataSource ) ; return result ; }
@ org.junit.Test public void testAddForce () { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; setUriInfo ( setUpGetMatrixConstraintsExpectations ( BackendResource.FORCE_CONSTRAINT , true , STRING_CONSTANT , uriInfo ) ) ; setUpVolumeCreationExpectations ( true ) ; collection . setParent ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.parentMock ) ; javax.ws.rs.core.Response response = collection . add ( createModel () ) ; assertEquals ( NUMBER_CONSTANT , response . getStatus () ) ; assertTrue ( ( ( response . getEntity () ) instanceof org.ovirt.engine.api.model.GlusterVolume ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.GlusterVolume ) ( response . getEntity () ) ) , NUMBER_CONSTANT ) ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc getDeviceList ( int storageType ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . getDeviceList ( storageType ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private com.google.gwt.resources.client.ImageResource getStatusImage () { switch ( item . getStatus () ) { case UP : return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NicPanel.resources . nicUp () ; case DOWN : return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NicPanel.resources . nicDown () ; case NONE : return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NicPanel.resources . questionMarkImage () ; default: return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NicPanel.resources . questionMarkImage () ; } }
@ org.junit.Test ( expected = java.lang.RuntimeException . class ) public void testQueryForInvalidVolumeId () { org.mockito.Mockito . doReturn ( Guid.Empty ) . when ( getQueryParameters () ) . getVolumeId () ; getQuery () . executeQueryCommand () ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( getQuery () . getReturnValue () ) ) ; org.junit.Assert . assertEquals ( EngineMessage.GLUSTER_VOLUME_ID_INVALID . toString () , returnValue . getExceptionString () ) ; }
private void updateNumOfMonitors () { if ( ( getDisplayType () . getSelectedItem () ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) { getNumOfMonitors () . setIsChangable ( true ) ; } else { getNumOfMonitors () . setSelectedItem ( NUMBER_CONSTANT ) ; getNumOfMonitors () . setIsChangable ( false ) ; } }
@ org.junit.Test public void testClusterLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster () ; cluster . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.CLUSTER_ID ) ; cluster . setDataCenter ( new org.ovirt.engine.api.model.DataCenter () ) ; cluster . getDataCenter () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DATA_CENTER_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( cluster ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.CLUSTER_HREF , cluster . getHref () ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DATA_CENTER_HREF , cluster . getDataCenter () . getHref () ) ; }
protected void mockVmDevice ( boolean plugged ) { vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice () ; vmDevice . setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId () ) ; vmDevice . setIsPlugged ( plugged ) ; org.mockito.Mockito . when ( vmDeviceDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VmDeviceId . class ) ) ) . thenReturn ( vmDevice ) ; }
@ java.lang.Override public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onFailed ( cmdId , childCmdIds ) ; org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommandCallback . getCommand () . getParameters () . setTaskGroupSuccess ( false ) ; org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommandCallback.log . error ( STRING_CONSTANT , getDiskId () ) ; org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommandCallback . getCommand () . endAction () ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_ENABLE_FAILED , cmd . getAuditLogTypeValue () ) ; }
public synchronized boolean hasTasksForEntityIdAndAction ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.action.VdcActionType type ) { if ( ( _tasks ) != null ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks . values () ) { if ( ( isCurrentTaskLookedFor ( id , task ) ) && ( type . equals ( task . getParameters () . getDbAsyncTask () . getaction_type () ) ) ) { return true ; } } } return false ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVdsDao () . get ( org.ovirt.engine.core.bll.GetVdsHooksByIdQuery . getParameters () . getVdsId () ) ; java.util.Map < java.lang.String , java.lang.Object > result = new java.util.HashMap < java.lang.String , java.lang.Object > () ; if ( vds != null ) { result = org.ovirt.engine.core.utils.vdshooks.VdsHooksParser . parseHooks ( vds . getHooksStr () ) ; } org.ovirt.engine.core.bll.GetVdsHooksByIdQuery . getQueryReturnValue () . setReturnValue ( result ) ; }
public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration () { return org.ovirt.engine.core.bll.ValidationResult . failWith ( EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_OR_BALLOONING ) . when ( ( ( ( cluster . getMaxVdsMemoryOverCommit () ) > NUMBER_CONSTANT ) && ( ! ( ( cluster . isEnableKsm () ) || ( cluster . isEnableBallooning () ) ) ) ) ) ; }
public static boolean CanUpdateField ( java.lang.Class < > objectType , java.lang.String fieldName , java.lang.Enum < > status , java.lang.Object fieldContainer ) { org.ovirt.engine.core.utils.ObjectIdentityChecker checker = null ; if ( ( checker = org.ovirt.engine.core.utils.ObjectIdentityChecker.mIdentities . get ( objectType ) ) != null ) { return checker . IsFieldUpdatable ( status , fieldName , fieldContainer ) ; } return true ; }
@ java.lang.Override protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel model ) { driver . edit ( model ) ; monitorCount . setText ( java.lang.Integer . toString ( getModel () . getMonitorCount () ) ) ; oS . setText ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getOsName ( getModel () . getOS () ) ) ; }
@ org.junit.Test public void testExecuteCommandByServerIdForStart () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( null , org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START ) , null ) ) ; setUpMockUpForStart () ; mockBackend ( true , null , GlusterServiceStatus.STOPPED ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( serverServiceDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_SERVICE_STARTED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override protected void verifyModel ( org.ovirt.engine.api.model.GlusterVolume model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertEquals ( NAMES [ index ] , model . getName () ) ; assertEquals ( org.ovirt.engine.api.model.GlusterVolumeType.DISTRIBUTE , model . getVolumeType () ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResourceTest.clusterId . toString () , model . getCluster () . getId () ) ; verifyLinks ( model ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > getUserRequestForStoragePoolAndDomainRepoFileList ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.FileTypeExtension fileTypeExtension , boolean forceRefresh ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > repoList = null ; if ( ! ( isStorageDomainValid ( storageDomainId , fileTypeExtension , forceRefresh ) ) ) { return null ; } repoList = getCachedIsoListByStoragePoolAndDomainId ( storagePoolId , storageDomainId , fileTypeExtension ) ; return repoList ; }
private void setUpStorageHelper () { org.ovirt.engine.core.bll.storage.connection.IStorageHelper helper = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.storage.connection.IStorageHelper . class ) ; org.mockito.Mockito . when ( helper . connectStorageToDomainByVdsIdDetails ( storageDomain , command . getParameters () . getVdsId () ) ) . thenReturn ( new org.ovirt.engine.core.common.utils.Pair ( true , null ) ) ; org.mockito.Mockito . when ( helper . disconnectStorageFromDomainByVdsId ( storageDomain , command . getParameters () . getVdsId () ) ) . thenReturn ( true ) ; org.mockito.Mockito . doReturn ( helper ) . when ( command ) . getStorageHelper ( storageDomain ) ; }
public void initUserAndGroupData () { if ( ( dbUser ) == null ) { dbUser = org.ovirt.engine.core.bll.PermissionsCommandBase . getDbUserDAO () . get ( org.ovirt.engine.core.bll.PermissionsCommandBase . getParameters () . getPermission () . getad_element_id () ) ; } if ( ( ( dbUser ) == null ) && ( ( dbGroup ) == null ) ) { dbGroup = org.ovirt.engine.core.bll.PermissionsCommandBase . getAdGroupDAO () . get ( org.ovirt.engine.core.bll.PermissionsCommandBase . getParameters () . getPermission () . getad_element_id () ) ; } }
@ java.lang.Override public void onRevealOverlayContent ( org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent event ) { java.util.Set < com.gwtplatform.mvp.client.PresenterWidget < > > children = getChildren ( com.gwtplatform.mvp.client.presenter.slots.LegacySlotConvertor . convert ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetContent ) ) ; if ( ( ( event . getContent () ) != null ) && ( ! ( children . isEmpty () ) ) ) { event . getContent () . setCurrentPlaceWidget ( children . iterator () . next () ) ; } setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetOverlay , event . getContent () ) ; }
public void appendCustomValue ( final java.lang.String name , final java.lang.String value , final java.lang.String separator ) { final java.lang.String key = name . toLowerCase () ; java.lang.String newValue = value ; allocateCustomValues () ; if ( customValues . containsKey ( key ) ) { newValue = java.lang.String . format ( STRING_CONSTANT , customValues . get ( key ) , separator , value ) ; } customValues . put ( name . toLowerCase () , newValue ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , java.util.List < java.lang.String > messages ) { if ( ( vm . getMigrationSupport () ) == ( org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ) ) { for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host . getId () . equals ( vm . getDedicatedVmForVds () ) ) { return java.util.Arrays . asList ( host ) ; } } return new java.util.ArrayList <> () ; } return hosts ; }
protected org.ovirt.engine.core.common.errors.VdcBllErrors GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc xmlRpcStatus ) { try { org.ovirt.engine.core.common.errors.VdcBllErrors bllErrors = org.ovirt.engine.core.common.errors.VdcBllErrors . forValue ( xmlRpcStatus.mCode ) ; if ( bllErrors == null ) { log . warn ( ( STRING_CONSTANT + xmlRpcStatus ) ) ; bllErrors = org.ovirt.engine.core.common.errors.VdcBllErrors.unexpected ; } return bllErrors ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.core.common.errors.VdcBllErrors.unexpected ; } }
@ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( ( p . getUsageCpuPercent () ) + ( calcSpmCpuConsumption ( p ) ) ) < lowUtilization ) && ( ( p . getVmCount () ) >= minVmCount ) ) && ( ( ( p . getCpuOverCommitTimestamp () ) == null ) || ( ( ( getTime () . getTime () ) - ( p . getCpuOverCommitTimestamp () . getTime () ) ) >= ( java.util.concurrent.TimeUnit.MINUTES . toMillis ( cpuOverCommitDurationMinutes ) ) ) ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.VdcOption ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VdcOption other = ( ( org.ovirt.engine.core.common.businessentities.VdcOption ) ( obj ) ) ; return ( java.util.Objects . equals ( name , other.name ) ) && ( java.util.Objects . equals ( value , other.value ) ) ; }
private void removeNetwork () { networkMap . remove ( ( ( java.lang.String ) ( getNetworkList () . getSelectedItem () ) ) ) ; getNetworkList () . setItems ( new java.util.ArrayList < java.lang.String > ( networkMap . keySet () ) ) ; getNetworkList () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrDefault ( networkMap . keySet () ) ) ; }
@ java.lang.Override protected void updateLinkChangability () { super . updateLinkChangability () ; if ( ! ( getLinked () . getIsChangable () ) ) { return; } boolean isPlugged = isPluggedBeforeAndAfterEdit () ; if ( ( ( isVmUp () ) && isPlugged ) && ( selectedNetworkExternal () ) ) { getLinked () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . hotLinkStateUpdateNotSupportedExternalNetworks () ) ; getLinked () . setIsChangeable ( false ) ; initLinked () ; } }
public boolean invokeAsBoolean ( com.google.gwt.core.client.JsArray < > args , org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler ) { clearResultInformation () ; return function . invoke ( args , JsFunction.RESULT_TYPE_BOOLEAN , ( java.lang.Boolean result ) - > { this . resultValue = result ; this . resultType = JsFunction.RESULT_TYPE_BOOLEAN ; } , errorHandler ) ; }
@ org.junit.Test public void testFetchClusterWithUnlimitedGlobalLimitation ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > quotaClusterList = dao . getQuotaClusterByClusterGuid ( FixturesTool.CLUSTER_RHEL6_ISCSI , FixturesTool.QUOTA_SPECIFIC ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , quotaClusterList . size () ) ; org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster = quotaClusterList . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertNotNull ( quotaCluster ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.QuotaDaoTest.unlimited , quotaCluster . getMemSizeMB () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , ( ( int ) ( quotaCluster . getVirtualCpu () ) ) ) ; }
@ org.junit.Test public void testEchoStderr ( ) throws java.lang.Exception { java.lang.String content = STRING_CONSTANT ; try ( final java.io.InputStream stdin = new java.io.ByteArrayInputStream ( content . getBytes ( STRING_CONSTANT ) ) ; final java.io.ByteArrayOutputStream stdout = new java.io.ByteArrayOutputStream () ; final java.io.ByteArrayOutputStream stderr = new java.io.ByteArrayOutputStream () ) { client . executeCommand ( STRING_CONSTANT , stdin , stdout , stderr ) ; org.junit.Assert . assertEquals ( content , new java.lang.String ( stderr . toByteArray () , STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , stdout . size () ) ; } }
@ org.junit.Before public void setUp () { vdsFromDb = new org.ovirt.engine.core.common.businessentities.VDS () ; vdsFromDb . setId ( vdsId ) ; vdsFromDb . setClusterId ( clusterId ) ; virtStrategy = org.mockito.Mockito . spy ( new org.ovirt.engine.core.vdsbroker.monitoring.VirtMonitoringStrategy ( mockCluster () , mockVdsDao () , null ) ) ; org.mockito.Mockito . doNothing () . when ( virtStrategy ) . vdsNonOperational ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; }
public int totalVideoRAMSizeMb ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Integer > settings = getVideoDeviceSettings ( vm . getStaticData () ) ; return ( ( ( settings . getOrDefault ( VdsProperties.VIDEO_RAM , NUMBER_CONSTANT ) ) + ( settings . getOrDefault ( VdsProperties.VIDEO_VRAM , NUMBER_CONSTANT ) ) ) + NUMBER_CONSTANT ) / NUMBER_CONSTANT ; }
private void initOsIds () { osIds = new java.util.ArrayList <> ( osNames . keySet () ) ; java.util.Collections . sort ( osIds , new java.util.Comparator < java.lang.Integer > () { @ java.lang.Override public int compare ( java.lang.Integer o1 , java.lang.Integer o2 ) { return osNames . get ( o1 ) . compareTo ( osNames . get ( o2 ) ) ; } } ) ; }
private static void addAddress ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { java.util.Map < java.lang.String , java.lang.String > addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils . string2Map ( vmDevice . getAddress () ) ; if ( ( addressMap . size () ) > NUMBER_CONSTANT ) { struct . put ( VdsProperties.Address , addressMap ) ; } }
private org.ovirt.engine.core.dao.VdsGroupDAO mockVdsGroup () { org.ovirt.engine.core.dao.VdsGroupDAO mock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.VdsGroupDAO . class ) ; org.ovirt.engine.core.common.businessentities.VDSGroup value = new org.ovirt.engine.core.common.businessentities.VDSGroup () ; value . setEmulatedMachine ( STRING_CONSTANT ) ; org.mockito.Mockito . when ( mock . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( value ) ; return mock ; }
@ java.lang.Override public void setColumnVisible ( com.google.gwt.user.cellview.client.Column < T , > column , boolean visible ) { if ( isColumnPresent ( column ) ) { columnVisibleMapOverride . put ( column , visible ) ; ensureColumnVisible ( column , null , visible , columnWidthMap . get ( column ) , false ) ; } }
@ org.junit.Test public void testValidModifiedBondsFailsWhenReferencingExistingNonBondInterface ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond () ; final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_IS_NOT_BOND ; org.ovirt.engine.core.bll.ValidationResult notABondValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils . getVariableAssignmentString ( engineMessage , bond . getName () ) ) ; doTestValidModifiedBonds ( bond , notABondValidationResult , notABondValidationResult , ValidationResult.VALID ) ; }
public static void assertNoDuplicateKeys ( java.lang.String filePath ) throws java.io.FileNotFoundException { org.ovirt.engine.core.utils.NoDuplicateProperties props = new org.ovirt.engine.core.utils.NoDuplicateProperties () ; try ( java.io.InputStream is = new java.io.FileInputStream ( filePath ) ) { props . load ( is ) ; } catch ( java.lang.Exception exception ) { org.junit.Assert . fail ( ( ( ( STRING_CONSTANT + filePath ) + STRING_CONSTANT ) + ( exception . getMessage () ) ) ) ; } }
@ org.junit.Test public void testDeleteAllUnusedIcons () { reinitializeDatabase () ; dao . removeAllUnusedIcons () ; final org.ovirt.engine.core.common.businessentities.VmIcon unusedIcon = dao . get ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ; org.junit.Assert . assertNull ( unusedIcon ) ; final org.ovirt.engine.core.common.businessentities.VmIcon usedIcon = dao . get ( FixturesTool.SMALL_ICON_ID ) ; org.junit.Assert . assertNotNull ( usedIcon ) ; reinitializeDatabase () ; }
private boolean commitNewMac ( java.lang.String mac ) { availableMacs . remove ( mac ) ; allocatedMacs . put ( mac , NUMBER_CONSTANT ) ; if ( availableMacs . isEmpty () ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( logable , AuditLogType.MAC_POOL_EMPTY ) ; return false ; } return true ; }
@ java.lang.Override protected void buildModel ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.BuilderExecutionFinished < org.ovirt.engine.core.common.businessentities.VmBase , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel > callback ) { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor ( callback , new org.ovirt.engine.ui.uicommonweb.builders.vm.NameAndDescriptionVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommentVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CoreVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.KernelParamsVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.SerialNumberPolicyVmBaseToUnitBuilder () ) ) ) . build ( vmBase , getModel () ) ; }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void pmHealthCheck () { if ( ! ( active ) ) { try { synchronized ( this ) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log . info ( STRING_CONSTANT ) ; active = true ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVdsDao () . getAll () ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host . isPmEnabled () ) { pmHealthCheck ( host ) ; } } org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log . info ( STRING_CONSTANT ) ; } } finally { active = false ; } } }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( getVds () . getId () , reason , customLogValues ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
@ java.lang.Override protected void ExecuteVmCommand () { org.ovirt.engine.core.bll.ImagesHandler . setDiskAlias ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () , org.ovirt.engine.core.bll.AddDiskCommand . getVm () ) ; if ( ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) == ( org.ovirt.engine.core.bll.AddDiskCommand . getParameters () . getDiskInfo () . getDiskStorageType () ) ) { createDiskBasedOnImage () ; } else { createDiskBasedOnLun () ; } }
static boolean handlesEvent ( com.google.gwt.view.client.CellPreviewEvent < org.ovirt.engine.ui.uicommonweb.models.EntityModel > event ) { com.google.gwt.dom.client.NativeEvent nativeEvent = event . getNativeEvent () ; if ( ! ( BrowserEvents.CLICK . equals ( nativeEvent . getType () ) ) ) { return false ; } com.google.gwt.dom.client.Element target = nativeEvent . getEventTarget () . cast () ; return STRING_CONSTANT . equals ( target . getTagName () . toLowerCase () ) ; }
private java.util.List < java.lang.String > getFreeBonds () { java.util.List < java.lang.String > freeBonds = new java.util.ArrayList < java.lang.String > () ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond : allBonds ) { if ( ! ( nicMap . containsKey ( bond . getName () ) ) ) { freeBonds . add ( bond . getName () ) ; } } return freeBonds ; }
@ java.lang.Override public void onUserLoginChange ( org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event ) { if ( user . isLoggedIn () ) { manager . invokePluginsNowOrLater ( STRING_CONSTANT , org.ovirt.engine.ui.webadmin.plugin.jsni.JsArrayHelper . createStringArray ( user . getUserName () , user . getUserId () ) ) ; } else { manager . invokePluginsNowOrLater ( STRING_CONSTANT , null ) ; } }
public java.lang.String load ( java.io.File file ) { try ( java.io.FileInputStream inputStream = new java.io.FileInputStream ( file ) ) { java.util.Properties props = new java.util.Properties () ; props . load ( inputStream ) ; return loadImpl ( props , file ) ; } catch ( java.io.IOException exception ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( java.lang.String . format ( STRING_CONSTANT , file . getAbsolutePath () ) ) ; } }
public static void isStorageDomainNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return storageDomains . isEmpty () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + name ) , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) , aQuery ) ; }
@ java.lang.Override public int compare ( org.ovirt.engine.core.common.businessentities.network.Network net1 , org.ovirt.engine.core.common.businessentities.network.Network net2 ) { final boolean managementNetwork1 = net1 . getCluster () . isManagement () ; final boolean managementNetwork2 = net2 . getCluster () . isManagement () ; if ( ( ! managementNetwork1 ) && ( ! managementNetwork2 ) ) { return lexoNumeric . compare ( net1 . getName () , net2 . getName () ) ; } else { return managementNetwork1 ? - NUMBER_CONSTANT : NUMBER_CONSTANT ; } }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { java.util.ArrayList < java.lang.String > networkList = new java.util.ArrayList < java.lang.String > () ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : importModel . getNetworks () ) { networkList . add ( network . getName () ) ; } ( ( org.ovirt.engine.ui.webadmin.widget.table.cell.CustomSelectionCell ) ( getCell () ) ) . setOptions ( networkList ) ; return networkList . isEmpty () ? STRING_CONSTANT : networkList . get ( NUMBER_CONSTANT ) ; }
private boolean containsVmCluster ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters ) { for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { if ( ( cluster . getStoragePoolId () ) != null ) { if ( vm . getVdsGroupId () . equals ( cluster . getId () ) ) { return true ; } } } return false ; }
public void init () { initState () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getRedirectServletReportsPage ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { setReportBaseUrl ( ( ( java.lang.String ) ( returnValue ) ) ) ; } } ) ) ; parseReportsXML () ; }
private void remove () { if ( ( getWindow () ) != null ) { return; } java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > vnics = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > () ; for ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface , org.ovirt.engine.core.common.businessentities.VmTemplate > pair : getSelectedItems () ) { vnics . add ( pair . getFirst () ) ; } org.ovirt.engine.ui.uicommonweb.models.vms.RemoveVmTemplateInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.RemoveVmTemplateInterfaceModel ( this , vnics , true ) ; setWindow ( model ) ; }
@ java.lang.Override public void Rollback () { super . Rollback () ; if ( macAddressChanged ) { org.ovirt.engine.core.bll.MacPoolManager . getInstance () . AddMac ( oldIface . getMacAddress () ) ; if ( ! ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > GetValue ( ConfigValues.AllowDuplicateMacAddresses ) ) ) { org.ovirt.engine.core.bll.MacPoolManager . getInstance () . freeMac ( getMacAddress () ) ; } } }
@ org.junit.Test public void migrationNotSupported () { org.mockito.Mockito . doReturn ( false ) . when ( validator ) . migrationSupportedForArch ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertThat ( validator . migrationSupported ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextEnum ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.MIGRATION_ON_ERROR_IS_NOT_SUPPORTED ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { org.ovirt.engine.core.compat.Guid networkId = ( ( getNetwork () ) == null ) ? null : getNetwork () . getId () ; return java.util.Collections . singletonList ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( networkId , org.ovirt.engine.core.common.VdcObjectType.Network , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand . getActionType () . getActionGroup () ) ) ; }
public static org.ovirt.engine.core.common.job.Step addTaskStep ( org.ovirt.engine.core.bll.job.ExecutionContext context , org.ovirt.engine.core.common.job.StepEnum stepName , java.lang.String description ) { if ( context == null ) { return null ; } org.ovirt.engine.core.common.job.Step step = null ; if ( context . isTasksMonitored () ) { org.ovirt.engine.core.common.job.Step parentTaskStep = context . getParentTasksStep () ; if ( parentTaskStep != null ) { step = org.ovirt.engine.core.bll.job.ExecutionHandler . addSubStep ( parentTaskStep , stepName , description ) ; } } return step ; }
@ java.lang.Override public boolean storageDomainRemoved ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > list = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageServerConnectionDao () . getAllForVolumeGroup ( storageDomain . getStorage () ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : FilterConnectionsUsedByOthers ( list , storageDomain . getStorage () ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageServerConnectionDao () . remove ( connection . getid () ) ; } removeStorageDomainLuns ( storageDomain ) ; return true ; }
public static void getExternalNetworkMap ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllExternalNetworksOnProvider , new org.ovirt.engine.core.common.queries.IdQueryParameters ( providerId ) , aQuery ) ; }
@ org.junit.Test public void testExecuteCommandByServerIdForRestart () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( null , org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_RESTART ) , null ) ) ; setUpMockUpForRestart () ; mockBackend ( true , null , GlusterServiceStatus.RUNNING ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( serverServiceDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService . class ) ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_SERVICE_RESTARTED ) ; }
@ java.lang.Override public org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message execute ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message message ) { java.util.Map < java.lang.String , java.lang.String > headers = message . getHeaders () ; java.lang.String destHeader = headers . get ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION ) ; if ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils . isEmpty ( destHeader ) ) { return new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message () . error () . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_MESSAGE , STRING_CONSTANT ) ; } for ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el : eventListeners ) { el . onMessageReceived ( message . getContent () ) ; } return null ; }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.IP_VALIDATOR . validate ( value ) ; if ( ! ( ipValidation . getSuccess () ) ) { return ipValidation ; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; if ( value instanceof java.lang.String ) { result . setSuccess ( validateNetMask ( ( ( java.lang.String ) ( value ) ) ) ) ; result . setReasons ( org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons ) ; } return result ; }
public java.util.concurrent.Future < org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse > call ( org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call ( req ) ; this . tracker . registerCall ( req , call ) ; retryCall ( req , call ) ; try { this . getClient () . sendMessage ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils . jsonToByteArray ( req . toJson () ) ) ; } finally { retryCall ( req , call ) ; } return call ; }
private void removeTemplateBackup () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > prms = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > () ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : getSelectedItems () ) { prms . add ( new org.ovirt.engine.core.common.action.VmTemplateImportExportParameters ( template . getId () , getEntity () . getId () , pool . getId () ) ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.RemoveVmTemplateFromImportExport , prms ) ; cancel () ; }
@ org.junit.Test public void testCheckGlusterQuorumWithoutBricks () { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster ( true , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.CLUSTER_ID ) ; java.lang.Iterable < org.ovirt.engine.core.compat.Guid > hostIds = java.util.Arrays . asList ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.DUMMY_SERVER_ID , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 ) ; org.junit.Assert . assertTrue ( hostValidator . checkGlusterQuorum ( cluster , hostIds ) . isEmpty () ) ; }
@ org.junit.Test public void networkWithTheSameDefaultMTUAddedToNic () { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( STRING_CONSTANT ) ; net . setVmNetwork ( false ) ; org.ovirt.engine.core.common.businessentities.network.Network newNet = createNetwork ( STRING_CONSTANT ) ; newNet . setVlanId ( NUMBER_CONSTANT ) ; mockExistingNetworks ( net , newNet ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork ( STRING_CONSTANT , net ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic , newNet . getVlanId () , newNet . getName () ) ) ) ; validateAndExpectNoViolations ( helper ) ; }
@ org.junit.Test public void testUpdateSetAndUploadIconFailure ( ) throws java.lang.Exception { final org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setSmallIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIcon ( GUIDS [ NUMBER_CONSTANT ] ) ) ; model . setLargeIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIconWithData () ) ; try { verifyModel ( resource . update ( model ) , NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BAD_REQUEST ) ; } }
@ java.lang.Override public boolean matches ( java.lang.Object argument ) { if ( ! ( argument instanceof java.util.ArrayList ) ) { return false ; } @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ids = ( ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ) ( argument ) ) ; return ( ( ids . size () ) == ( removedBrickIds . size () ) ) && ( removedBrickIds . containsAll ( ids ) ) ; }
protected boolean validate ( org.ovirt.engine.core.bll.ValidationResult validationResult , java.util.List < java.lang.String > message ) { if ( ! ( validationResult . isValid () ) ) { message . add ( validationResult . getMessage () . name () ) ; for ( java.lang.String variableReplacement : validationResult . getVariableReplacements () ) { message . add ( variableReplacement ) ; } } return validationResult . isValid () ; }
@ org.junit.Test public void testGetClustersByServiceAndCompatibilityVersion () { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = dao . getClustersByServiceAndCompatibilityVersion ( true , false , STRING_CONSTANT ) ; org.junit.Assert . assertNotNull ( clusters ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , clusters . size () ) ; org.junit.Assert . assertEquals ( FixturesTool.GLUSTER_CLUSTER_ID , clusters . get ( NUMBER_CONSTANT ) . getId () ) ; }
@ java.lang.Override protected void initProfiles () { java.lang.Iterable < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > existingProfiles = getProfiles () . getItems () ; if ( existingProfiles == null ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > profiles = new java.util.LinkedList < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > () ; profiles . add ( createDefaultProfile () ) ; getProfiles () . setItems ( profiles ) ; } else { for ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profile : existingProfiles ) { profile . updateDc ( getSelectedDc () . getcompatibility_version () , getSelectedDc () . getId () ) ; } } }
public org.ovirt.engine.core.extensions.mgr.ExtensionProxy getExtensionByName ( java.lang.String name ) throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { if ( name == null ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( STRING_CONSTANT ) ; } org.ovirt.engine.core.extensions.mgr.ExtensionsManager.ExtensionEntry entry = initializedEntries . get ( name ) ; if ( entry == null ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( java.lang.String . format ( STRING_CONSTANT , name ) ) ; } return entry.extension ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { validateParameters ( network , getRequiredAddFields () ) ; org.ovirt.engine.api.model.Network entity = map ( network ) ; org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = getAddParameters ( network , entity ) ; return performCreate ( addAction , params , new org.ovirt.engine.api.restapi.resource.DataCenterNetworkIdResolver ( network . getName () , params . getStoragePoolId () . toString () ) ) ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel model ) { driver . edit ( model ) ; publicInfo . setVisible ( model . getPublicUse () . getIsAvailable () ) ; nameEditor . fireValueChangeOnKeyDown () ; model . getName () . getEntityChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { com.google.gwt.event.logical.shared.ValueChangeEvent . fire ( org.ovirt.engine.ui.webadmin.widget.vnicProfile.VnicProfileWidget . this , model ) ; } } ) ; }
@ org.junit.Test public void testList ( ) throws java.lang.Exception { resource . setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( VdcQueryType.GetVdsHooksById , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , getEntity ( NUMBER_CONSTANT ) ) ; control . replay () ; org.ovirt.engine.api.model.Hooks hooks = resource . list () ; assertNotNull ( hooks . getHooks () ) ; assertEquals ( NUMBER_CONSTANT , hooks . getHooks () . size () ) ; }
private boolean prepareStorageServer ( org.ovirt.engine.core.common.action.HostStoragePoolParametersBase parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > res = updateIfaces ( connections , parameters . getVds () . getId () ) ; connections . clear () ; connections . addAll ( res ) ; return true ; }
private boolean commitNewMac ( java.lang.String mac ) { availableMacs . remove ( mac ) ; allocatedMacs . put ( mac , NUMBER_CONSTANT ) ; if ( availableMacs . isEmpty () ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( logable , AuditLogType.MAC_POOL_EMPTY ) ; return false ; } return true ; }
@ java.lang.Override protected org.ovirt.engine.core.compat.Guid ConcreteCreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters ( asyncTaskCreationInfo , new org.ovirt.engine.core.common.businessentities.async_tasks ( parentCommand , org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success , org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running , asyncTaskCreationInfo . getTaskID () , org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskCommand . getParameters () , asyncTaskCreationInfo . getStepId () , org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskCommand . getCommandId () ) ) ; p . setEntityId ( org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskCommand . getParameters () . getEntityId () ) ; org.ovirt.engine.core.compat.Guid ret = org.ovirt.engine.core.bll.AsyncTaskManager . getInstance () . CreateTask ( AsyncTaskType.mergeSnapshots , p ) ; return ret ; }
@ org.junit.Test public void testAddIncompleteParametersNoPermits ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Role model = new org.ovirt.engine.api.model.Role () ; model . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public void setEntity ( java.lang.Object value ) { super . setEntity ( value ) ; if ( getIsToSync () . getIsChangable () ) { if ( ! ( ( java.lang.Boolean ) ( value ) ) ) { revertChanges () ; } setBootProtocolsAvailable ( ( ( java.lang.Boolean ) ( value ) ) ) ; } }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hostList ) { java.util.Iterator < org.ovirt.engine.core.common.businessentities.VDS > iterator = hostList . iterator () ; while ( iterator . hasNext () ) { if ( ( iterator . next () . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) { iterator . remove () ; } } volumeBrickModel . setHostList ( hostList ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties ) ) { return false ; } org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties other = ( ( org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties ) ( obj ) ) ; if ( ! ( getPluginType () . equals ( other . getPluginType () ) ) ) { return false ; } return true ; }
void updateButton () { getButtonWidget () . setVisible ( ( ( command . getIsAvailable () ) && ( command . getIsVisible () ) ) ) ; getButtonWidget () . setEnabled ( command . getIsExecutionAllowed () ) ; getButtonWidget () . setTitle ( command . getTitle () ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.aggregationtodaily_3_4.AggregationToDaily.row11Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_AggregationToDaily ) { try { int length = NUMBER_CONSTANT ; this . var_name = readString ( dis ) ; this . var_datetime = readDate ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
@ org.junit.Test public void testUpdate () { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile profile = dao . get ( FixturesTool.CPU_PROFILE_1 ) ; org.junit.Assert . assertNotNull ( profile ) ; org.junit.Assert . assertEquals ( FixturesTool.QOS_ID_4 , profile . getQosId () ) ; profile . setQosId ( FixturesTool.QOS_ID_5 ) ; profile . setDescription ( STRING_CONSTANT ) ; dao . update ( profile ) ; org.ovirt.engine.core.common.businessentities.profiles.CpuProfile result = dao . get ( profile . getId () ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( profile , result ) ; }
@ org.junit.Test public void testAllDomainsHaveSpaceForNewDisksSuccess () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList = java.util.Collections . emptyList () ; org.mockito.Mockito . doReturn ( disksList ) . when ( cmd ) . getDisksList () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; org.mockito.Mockito . verify ( multipleStorageDomainsValidator ) . allDomainsHaveSpaceForNewDisks ( disksList ) ; }
private void fillConnectionDetailsIfNeeded ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { if ( ( connection . getId () ) == null ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections dbConnection = findConnectionWithSameDetails ( connection ) ; if ( dbConnection != null ) { connection . setId ( dbConnection . getId () ) ; } } }
@ java.lang.Override public int hashCode () { final int prime = NUMBER_CONSTANT ; int result = NUMBER_CONSTANT ; result = ( prime * result ) + ( ( operationType ) == null ? NUMBER_CONSTANT : operationType . hashCode () ) ; result = ( prime * result ) + ( ( parameter ) == null ? NUMBER_CONSTANT : parameter . hashCode () ) ; return result ; }
private org.ovirt.engine.core.common.businessentities.Snapshot addSnapshotToDB ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder ) { boolean taskExists = ( ! ( getDisksList () . isEmpty () ) ) || ( memoryImageBuilder . isCreateTasks () ) ; return new org.ovirt.engine.core.bll.snapshots.SnapshotsManager () . addSnapshot ( snapshotId , getParameters () . getDescription () , ( taskExists ? org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus.LOCKED : org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus.OK ) , getParameters () . getSnapshotType () , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVm () , true , memoryImageBuilder . getVolumeStringRepresentation () , getDisksList () , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getCompensationContext () ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StatsInfo > getStatsInfo () { org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statInfo = new org.ovirt.engine.core.common.businessentities.gluster.StatsInfo () ; statInfo . setDuration ( NUMBER_CONSTANT ) ; statInfo . setDurationFormatted ( new org.ovirt.engine.core.common.utils.Pair ( new java.lang.Integer ( NUMBER_CONSTANT ) , java.util.concurrent.TimeUnit.SECONDS . toString () ) ) ; statInfo . setTotalRead ( NUMBER_CONSTANT ) ; statInfo . setTotalWrite ( NUMBER_CONSTANT ) ; statInfo . setBlockStats ( getBlockStats () ) ; statInfo . setFopStats ( getFopStats () ) ; return java.util.Collections . singletonList ( statInfo ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrash ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
@ org.junit.Test public void testChangeDiskProfileForDisk () { org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap = dao . getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertThat ( STRING_CONSTANT , imageStorageDomainMap . getDiskProfileId () , org.hamcrest.CoreMatchers . not ( org.hamcrest.CoreMatchers . equalTo ( FixturesTool.DISK_PROFILE_2 ) ) ) ; dao . updateDiskProfileByImageGroupIdAndStorageDomainId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DISK_ID , org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DOMAIN_ID , FixturesTool.DISK_PROFILE_2 ) ; imageStorageDomainMap = dao . getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , FixturesTool.DISK_PROFILE_2 , imageStorageDomainMap . getDiskProfileId () ) ; }
@ org.junit.Test public void testRemoveWithHostId ( ) throws java.lang.Exception { setUpGetEntityExpectations () ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveStorageDomain , org.ovirt.engine.core.common.action.RemoveStorageDomainParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , GUIDS [ NUMBER_CONSTANT ] , java.lang.Boolean.FALSE } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendStorageDomainResource.HOST , GUIDS [ NUMBER_CONSTANT ] . toString () ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource . remove () ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > scores = new java.util.ArrayList < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > () ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { scores . add ( new org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId () , vds . getUsageCpuPercent () ) ) ; } return scores ; }
public void addParameter ( java.lang.String name , java.lang.String value ) { com.google.gwt.user.client.ui.Hidden hidden = new com.google.gwt.user.client.ui.Hidden ( name , value ) ; form . getElement () . appendChild ( hidden . getElement () ) ; java.util.List < com.google.gwt.user.client.ui.Hidden > oldHiddenList = hiddens . get ( name ) ; if ( oldHiddenList == null ) { hiddens . put ( name , new java.util.LinkedList ( java.util.Collections . singletonList ( hidden ) ) ) ; } else { oldHiddenList . add ( hidden ) ; } }
private void prepareMocks () { org.mockito.Mockito . doReturn ( storageConnDao ) . when ( command ) . getStorageConnDao () ; org.mockito.Mockito . doReturn ( storagePoolIsoMapDao ) . when ( command ) . getStoragePoolIsoMapDao () ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . findConnectionWithSameDetails ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.StorageServerConnections . class ) ) ; org.mockito.Mockito . doReturn ( lunDao ) . when ( command ) . getLunDao () ; org.mockito.Mockito . doReturn ( vmDao ) . when ( command ) . getVmDao () ; }
@ java.lang.Override org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm > build () { org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm > pair = pairOf ( createDbVm () , createVmInternalData ( null ) ) ; pair . getSecond () . getVmDynamic () . setStatus ( VMStatus.MigratingTo ) ; pair . getSecond () . getVmDynamic () . setRunOnVds ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID ) ; return pair ; }
@ java.lang.Override public void setAttached ( boolean attached ) { attachedSeparatedImage . setResource ( ( attached ? org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.resources . joinedIcon () : org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.resources . separatedIcon () ) ) ; tooltip . setText ( ( attached ? org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.constants . attachedToInstanceType () : org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.constants . detachedFromInstanceType () ) ) ; }
private void mockExecutor ( boolean success ) { org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result ; if ( success ) { result = new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS , org.ovirt.engine.core.common.businessentities.pm.PowerStatus.ON ) ; } else { result = new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR , org.ovirt.engine.core.common.businessentities.pm.PowerStatus.UNKNOWN ) ; } org.mockito.Mockito . doReturn ( result ) . when ( executor ) . fence ( org.mockito.ArgumentMatchers . any () ) ; }
public void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > () ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
@ org.junit.Test public void successVmInPreviewForAttachedSnapshot () { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice . setSnapshotId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
public void getRedirectServletReportsPage ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.RedirectServletReportsPage , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ org.junit.Test public void encodeDecodeWithNonAsciiDiskDescription ( ) throws java.lang.Exception { disk . setDiskAlias ( STRING_CONSTANT ) ; disk . setDiskDescription ( STRING_CONSTANT ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( STRING_CONSTANT ) , generateDiskDescriptionJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( STRING_CONSTANT ) ) , generateEncodingJsonEntry ( NUMBER_CONSTANT ) ) ; assertDiskDescriptionDecoding ( disk ) ; }
@ java.lang.Override protected < X > void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , com.google.gwt.cell.client.HasCell < T , X > hasCell , java.lang.String id ) { com.google.gwt.cell.client.Cell < X > cell = hasCell . getCell () ; sb . appendHtmlConstant ( STRING_CONSTANT ) ; cell . render ( context , hasCell . getValue ( value ) , sb ) ; sb . appendHtmlConstant ( STRING_CONSTANT ) ; }
public static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyOnCreate ( org.ovirt.engine.api.model.Usb usb ) { if ( ( ( usb == null ) || ( ! ( usb . isSetEnabled () ) ) ) || ( ! ( usb . isEnabled () ) ) ) { return org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED ; } else { org.ovirt.engine.api.model.UsbType usbType = org.ovirt.engine.api.restapi.types.VmMapper . getUsbType ( usb ) ; if ( usbType == null ) { return null ; } else { return org.ovirt.engine.api.restapi.types.VmMapper . getUsbPolicyAccordingToUsbType ( usbType ) ; } } }
public void testAdd ( ) throws java.lang.Exception { setUpGetGraphicsExpectations ( NUMBER_CONSTANT ) ; setUpGetConsoleExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetSoundcardExpectations ( NUMBER_CONSTANT ) ; setUpGetBallooningExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpVm ( GUIDS [ NUMBER_CONSTANT ] ) ) ; super . testAdd () ; }
@ java.lang.Override protected boolean verifySourceDomains () { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > poolDomainsMap = org.ovirt.engine.core.common.businessentities.Entities . businessEntitiesById ( org.ovirt.engine.core.bll.AddVmFromTemplateCommand . getPoolDomains () ) ; java.util.EnumSet < org.ovirt.engine.core.common.businessentities.StorageDomainStatus > validDomainStatuses = java.util.EnumSet . of ( StorageDomainStatus.Active ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . filterImageDisks ( getImagesToCheckDestinationStorageDomains () , true , false , false ) ; validDisksDomains = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . findDomainsInApplicableStatusForDisks ( templateDiskImages , poolDomainsMap , validDomainStatuses ) ; return validate ( new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( templateDiskImages ) . diskImagesOnAnyApplicableDomains ( validDisksDomains , poolDomainsMap , EngineMessage.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS , validDomainStatuses ) ) ; }
@ org.junit.Test public void testExecuteCommandByClusterIdForStart () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START ) , null ) ) ; setUpMockUpForStart () ; mockBackend ( true , null , GlusterServiceStatus.STOPPED ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( serverServiceDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_SERVICE_STARTED , cmd . getAuditLogTypeValue () ) ; }
public java.lang.String combine ( java.lang.String path ) { if ( path . startsWith ( this . root ) ) { return ( this . effectiveUri ) + path ; } if ( this . root . startsWith ( org.ovirt.engine.sdk.utils.UrlHelper.SLASH ) ) return ( ( this . effectiveUri ) + ( this . root ) ) + path ; return ( ( ( this . effectiveUri ) + ( org.ovirt.engine.sdk.utils.UrlHelper.SLASH ) ) + ( this . root ) ) + path ; }
void mockGetCaCertificate () { org.ovirt.engine.core.common.queries.QueryReturnValue caCertificateReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue () ; caCertificateReturnValue . setSucceeded ( true ) ; caCertificateReturnValue . setReturnValue ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.CA_CERTIFICATE ) ; org.mockito.Mockito . doReturn ( caCertificateReturnValue ) . when ( backend ) . runInternalQuery ( org.mockito.ArgumentMatchers . eq ( QueryType.GetCACertificate ) , org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.jupiter.api.Test public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.aaa.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.aaa.BackendGroupsResourceTest.QUERY , t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; org.junit.jupiter.api.Assertions . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.aaa.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
private boolean validateSourceStorageDomain ( org.ovirt.engine.core.compat.Guid imageId ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById ( imageId ) ; org.ovirt.engine.core.compat.Guid domainId = diskImage . getStorageIds () . get ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = getValidator ( domainId , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand . getStoragePoolId () ) ; return validate ( validator . isDomainExistAndActive () ) ; }
@ org.junit.Test public void compare () { org.junit.Assert . assertTrue ( ( ( Version.v3_6 . compareTo ( Version.v4_0 ) ) < NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( ( ( Version.v4_0 . compareTo ( Version.v3_6 ) ) > NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( ( ( Version.v3_6 . compareTo ( new org.ovirt.engine.core.compat.Version ( STRING_CONSTANT ) ) ) == NUMBER_CONSTANT ) ) ; }
private void fillReportedConfigurations ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > networkNameToNicMap , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > networkMap , org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment ) { org.ovirt.engine.core.common.businessentities.network.Network network = networkMap . get ( networkAttachment . getNetworkId () ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = getNicToWhichIsNetworkAttached ( networkNameToNicMap , networkMap , networkAttachment ) ; if ( nic != null ) { org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = createNetworkInSyncWithVdsNetworkInterface ( networkAttachment , nic , network ) . reportConfigurationsOnHost () ; networkAttachment . setReportedConfigurations ( reportedConfigurations ) ; } }
@ org.junit.Test public void validateFailsForDifferentStorageDevice () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice ( STRING_CONSTANT , null ) ; org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice ( STRING_CONSTANT , null ) ; storageDevice2 . setDevType ( STRING_CONSTANT ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays . asList ( storageDevice1 , storageDevice2 ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ java.lang.Override protected void init () { super . init () ; setVmName ( org.ovirt.engine.core.bll.ConvertVmCommand . getParameters () . getVmName () ) ; setVdsId ( org.ovirt.engine.core.bll.ConvertVmCommand . getParameters () . getProxyHostId () ) ; setVdsGroupId ( org.ovirt.engine.core.bll.ConvertVmCommand . getParameters () . getVdsGroupId () ) ; setStoragePoolId ( org.ovirt.engine.core.bll.ConvertVmCommand . getParameters () . getStoragePoolId () ) ; setStorageDomainId ( org.ovirt.engine.core.bll.ConvertVmCommand . getParameters () . getStorageDomainId () ) ; }
private void doTestBadAddNetwork ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpVDSGroupExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.AttachNetworkToVdsGroup , org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , canDo , success ) ) ; org.ovirt.engine.api.model.Network model = getModel ( NUMBER_CONSTANT ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private org.ovirt.engine.core.common.businessentities.StoragePool mockStoragePool () { org.ovirt.engine.core.compat.Guid storagePoolId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool () ; storagePool . setId ( storagePoolId ) ; storagePool . setStatus ( StoragePoolStatus.Up ) ; org.mockito.Mockito . when ( storagePoolDao . get ( storagePoolId ) ) . thenReturn ( storagePool ) ; return storagePool ; }
@ org.junit.Test public void testStorageDomainLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain () ; storageDomain . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; storageDomain . setStorage ( new org.ovirt.engine.api.model.HostStorage () ) ; storageDomain . getStorage () . setPath ( STRING_CONSTANT ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( storageDomain ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , storageDomain . getHref () ) ; assertNull ( storageDomain . getStorage () . getHref () ) ; }
private org.apache.http.conn.ClientConnectionManager createPoolingClientConnectionManager ( java.lang.String url , int port ) { org.apache.http.conn.scheme.SchemeRegistry schemeRegistry = createSchemeRegistry ( url , port ) ; org.apache.http.impl.conn.PoolingClientConnectionManager cm = new org.apache.http.impl.conn.PoolingClientConnectionManager ( schemeRegistry ) ; cm . setMaxTotal ( org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS ) ; cm . setDefaultMaxPerRoute ( org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS_PER_ROUTE ) ; cm . setMaxPerRoute ( new org.apache.http.conn.routing.HttpRoute ( new org.apache.http.HttpHost ( getHost ( url ) , getPort ( url , port ) ) ) , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS_PER_HOST ) ; return cm ; }
public static void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
@ java.lang.Override protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks () { return org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getParameters () . isNeedsLocking () ? java.util.Collections . singletonMap ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand . getVmId () . toString () , org.ovirt.engine.core.bll.LockMessagesMatchUtil . makeLockingPair ( LockingGroup.VM , getSnapshotIsBeingTakenForVmMessage () ) ) : null ; }
@ org.junit.Test public void failWhenHostDoesNotExist () { java.util.List < java.lang.String > messages = new java.util.LinkedList <> () ; boolean result = validator . isHostExists ( null , messages ) ; org.junit.Assert . assertFalse ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , messages . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , messages . get ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void rerun () { org.ovirt.engine.core.bll.MigrateVmCommand . setVm ( null ) ; determineMigrationFailureForAuditLog () ; if ( ( ( org.ovirt.engine.core.bll.MigrateVmCommand . getVm () ) != null ) && ( ( org.ovirt.engine.core.bll.MigrateVmCommand . getVm () . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) ) { super . rerun () ; } else { org.ovirt.engine.core.bll.MigrateVmCommand . runningFailed () ; _isRerun = true ; } }
protected boolean checkStorageDomainStatus ( final org.ovirt.engine.core.common.businessentities.StorageDomainStatus . . . statuses ) { boolean valid = false ; org.ovirt.engine.core.common.businessentities.StorageDomainStatus status = getStorageDomainStatus () ; if ( status != null ) { valid = java.util.Arrays . asList ( statuses ) . contains ( status ) ; } if ( ! valid ) { if ( status == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ; } addStorageDomainStatusIllegalMessage () ; } return valid ; }
private void saveToDb ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { org.ovirt.engine.core.common.AuditLogSeverity severity = logType . getSeverity () ; org.ovirt.engine.core.common.businessentities.AuditLog auditLog = createAuditLog ( auditLogable , logType , loggerString , severity ) ; if ( auditLog == null ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . warn ( STRING_CONSTANT ) ; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . setPropertiesFromAuditLogableBase ( auditLogable , auditLog ) ; getDbFacadeInstance () . getAuditLogDao () . save ( auditLog ) ; logMessage ( severity , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . getMessageToLog ( loggerString , auditLog ) ) ; } }
@ java.lang.Override @ org.junit.Test public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpMacPoolsQueryExpectations ( t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
@ java.lang.Override public void executeCommand () { super . executeCommand () ; if ( org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand . isImagesAlreadyOnTarget () ) { org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand . getUnregisteredOVFDataDao () . removeEntity ( ovfEntityData . getEntityId () , null ) ; } setActionReturnValue ( org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand . getVmTemplate () . getId () ) ; }
public boolean getLegal () { if ( getUseTimout () ) { java.lang.String keyForCheck = getkeyForCheck () ; if ( ( org.ovirt.engine.core.utils.cache.CacheManager . getTimeoutBaseCache () . putIfAbsent ( keyForCheck , keyForCheck , getEndTime () , java.util.concurrent.TimeUnit.MILLISECONDS ) ) == null ) { return true ; } return false ; } return true ; }
java.lang.Iterable < org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork > getAllImportedNetworks () { org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork > tableModel = importedNetworks . asEditor () . flush () ; return ( tableModel != null ) && ( ( tableModel . getItems () ) != null ) ? tableModel . getItems () : new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork > () ; }
@ org.junit.Test public void testNotCreatingImageIfSupplied () { org.ovirt.engine.core.compat.Guid suppliedImageId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.mockito.Mockito . doNothing () . when ( transferImageCommand ) . handleImageIsReadyForTransfer () ; transferImageCommand . getParameters () . setImageId ( suppliedImageId ) ; transferImageCommand . executeCommand () ; org.mockito.Mockito . verify ( transferImageCommand , org.mockito.Mockito . never () ) . createImage () ; org.mockito.Mockito . verify ( transferImageCommand , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . handleImageIsReadyForTransfer () ; }
void initComboBox () { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StringRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo > () { @ java.lang.Override public java.lang.String render ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo optionInfo ) { if ( optionInfo != null ) { return optionInfo . getKey () ; } return null ; } } ) ; keyTextBoxEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxEditor () ; keyComboBox = new org.ovirt.engine.ui.common.widget.ComboBox ( keyListBoxEditor , keyTextBoxEditor ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.StorageConnection model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResourceTest.STORAGE_TYPES_MAPPED [ index ] . toString () . toLowerCase () , model . getType () . value () ) ; verifyLinks ( model ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.Snapshot getActiveSnapshot () { for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getVm () . getSnapshots () ) { if ( ( snapshot . getType () ) == ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE ) ) return snapshot ; } org.ovirt.engine.core.bll.ImportVmCommand.log . warn ( STRING_CONSTANT , getVmId () ) ; return null ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > () ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void getVdsNullVdsId () { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID3 ) ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b . setVds ( vds ) ; b . setVdsId ( vdsId ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertNull ( v ) ; }
private java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getVmDisksDummies () { java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksDummies = new java.util.LinkedList <> () ; for ( org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.ImportVmCommand . getParameters () . getImageToDestinationDomainMap () . values () ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; diskImage . setStorageIds ( new java.util.ArrayList ( java.util.Arrays . asList ( storageDomainId ) ) ) ; disksDummies . add ( diskImage ) ; } return disksDummies ; }
private void setDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > value ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks = ( value != null ) ? new java.util.ArrayList ( value ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > () ; java.util.Collections . sort ( disks , new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator () ) ; super . setItems ( disks ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { getCompensationContext () . snapshotEntityStatus ( diskImage . getImage () ) ; getCompensationContext () . stateChanged () ; diskImage . setImageStatus ( ImageStatus.LOCKED ) ; org.ovirt.engine.core.bll.ImagesHandler . updateImageStatus ( diskImage . getImageId () , ImageStatus.LOCKED ) ; return null ; }
private boolean canRemoveLunDisk () { if ( ( listVms ) != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : listVms ) { if ( ( vm . getstatus () ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = getVmDeviceDAO () . get ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , vm . getId () ) ) ; if ( vmDevice . getIsPlugged () ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; return false ; } } } } return true ; }
private void AddDaysOfWeek () { java.lang.String day ; int dayIndex = NUMBER_CONSTANT ; for ( int i = - NUMBER_CONSTANT ; i > ( - NUMBER_CONSTANT ) ; i -- ) { day = org.ovirt.engine.core.compat.DateTime . getNow () . AddDays ( i ) . getDayOfWeek () . toString () ; mEnumValues . put ( day , dayIndex ) ; mVerbs . add ( day ) ; dayIndex ++ ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.VmDevice ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VmPayload other = ( ( org.ovirt.engine.core.common.businessentities.VmPayload ) ( obj ) ) ; return ( ( super . equals ( obj ) ) && ( java.util.Objects . equals ( volumeId , other.volumeId ) ) ) && ( java.util.Objects . equals ( files , other.files ) ) ; }
@ org.junit.jupiter.api.Test @ java.lang.Override public void testListCrashClientLocale () { locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; collection . setUriInfo ( setUpUriExpectations ( null ) ) ; setUpEntityQueryExpectations ( org.ovirt.engine.api.restapi.resource.FAILURE ) ; try { getCollection () ; org.junit.jupiter.api.Assertions . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , new java.lang.RuntimeException ( FAILURE ) ) ; } }
public void setupMocks () { org.mockito.Mockito . when ( clusterDao . get ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) . thenReturn ( getCluster () ) ; org.mockito.Mockito . doReturn ( clusterDao ) . when ( cmd ) . getClusterDao () ; org.mockito.Mockito . doReturn ( hookSyncJob ) . when ( cmd ) . getSyncJobInstance () ; }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setAllContentHeaderExpectation () ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Nic nic = resource . get () ; assertTrue ( nic . isSetStatistics () ) ; verifyModelSpecific ( nic , NUMBER_CONSTANT ) ; verifyLinks ( nic ) ; } finally { accepts . clear () ; } }
private void markVfsAsUsedByVm ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.compat.Guid vmId , java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > passthroughVnicToVfMap ) { org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelper hostNicVfsConfigHelper = org.ovirt.engine.core.di.Injector . get ( org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelper . class ) ; hostNicVfsConfigHelper . setVmIdOnVfs ( hostId , vmId , new java.util.HashSet ( passthroughVnicToVfMap . values () ) ) ; }
public void buildVmLease () { java.util.Map < java.lang.String , java.lang.Object > device = new java.util.HashMap <> () ; device . put ( VdsProperties.Type , VdsProperties.VmLease ) ; device . put ( VdsProperties.Device , VdsProperties.VmLease ) ; device . put ( VdsProperties.DeviceId , org.ovirt.engine.core.compat.Guid . newGuid () . toString () ) ; device . put ( VdsProperties.VmLeaseSdId , vm . getLeaseStorageDomainId () . toString () ) ; device . put ( VdsProperties.VmLeaseId , vm . getId () . toString () ) ; devices . add ( device ) ; }
@ org.junit.Test public void testGetCascadingResource () { org.junit.Assert . assertTrue ( STRING_CONSTANT , testTheme . getCascadingResource ( STRING_CONSTANT ) . getFile () . getAbsolutePath () . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , testTheme . getCascadingResource ( STRING_CONSTANT ) . getContentType () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) protected < T > Q resolveCreated ( org.ovirt.engine.core.common.action.VdcReturnValueBase result , org.ovirt.engine.api.restapi.resource.IResolver < T , Q > entityResolver ) { try { return entityResolver . resolve ( result . getActionReturnValue () ) ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource . handleError ( e , false ) ; } }
@ java.lang.Override protected boolean canDoAction () { if ( ( hostedEngineHelper . getStorageDomain () ) != null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; } if ( ( heStorageDomain ) == null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; } if ( ! ( java.util.Arrays . asList ( org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES ) . contains ( heStorageDomain . getStorageType () ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED ) ; } return true ; }
public void isPoolNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.IsVmPoolWithSameNameExists , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
private void testValidSql ( java.lang.String dynamicQuery , java.lang.String exepctedSQLResult ) { org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker () ; org.ovirt.engine.core.searchbackend.ISyntaxChecker curSyntaxChecker = org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory . createBackendSyntaxChecker ( STRING_CONSTANT ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = curSyntaxChecker . analyzeSyntaxState ( dynamicQuery , true ) ; org.junit.Assert . assertTrue ( ( STRING_CONSTANT + dynamicQuery ) , res . getvalid () ) ; java.lang.String query = chkr . generateQueryFromSyntaxContainer ( res , true ) ; org.junit.Assert . assertEquals ( exepctedSQLResult , query ) ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( STRING_CONSTANT . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VDSStatus . class ) ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VDSNiceType . class ) ; } else {} return retval ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = returnValue . getReturnValue () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains ) { domain . setId ( domain . getStoragePoolId () ) ; } java.util.Collections . sort ( domains , new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByPoolNameComparator () ) ; setItems ( domains ) ; setIsEmpty ( ( ( getItems () . size () ) == NUMBER_CONSTANT ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure , org.ovirt.engine.core.compat.Guid adElementId ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( queryType , queryParams . getClass () , new java.lang.String [] { queryParameterName } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpPermissionsWithAdElementId ( adElementId ) , failure ) ; control . replay () ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > convert ( java.lang.Object source ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; return getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; } return new java.util.ArrayList <> () ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_CONSTANT ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters . setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
@ org.junit.Test ( expected = javax.ws.rs.WebApplicationException . class ) public void testQueryWithFilter ( ) throws java.lang.Exception { java.util.List < java.lang.String > filterValue = new java.util.ArrayList <> () ; filterValue . add ( STRING_CONSTANT ) ; org.mockito.Mockito . reset ( httpHeaders ) ; org.mockito.Mockito . when ( httpHeaders . getRequestHeader ( org.ovirt.engine.api.restapi.resource.USER_FILTER_HEADER ) ) . thenReturn ( filterValue ) ; resource . setUriInfo ( setUpBasicUriExpectations () ) ; resource . get () ; }
@ org.junit.Test ( expected = org.ovirt.engine.api.restapi.utils.MalformedIdException . class ) public void testBadGuidValidation ( ) throws java.lang.Exception { setUpGetEntityExpectations ( false ) ; org.ovirt.engine.api.model.Host host = new org.ovirt.engine.api.model.Host () ; host . setCluster ( new org.ovirt.engine.api.model.Cluster () ) ; host . getCluster () . setId ( STRING_CONSTANT ) ; control . replay () ; resource . update ( host ) ; }
@ org.junit.Test public void testCleanExpiredUsersSessionsNoUsers () { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container . cleanExpiredUsersSessions () ; container . cleanExpiredUsersSessions () ; org.junit.Assert . assertNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.mockito.Mockito . verifyZeroInteractions ( dbUserDAOMcok ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; java.util.List < org.ovirt.engine.api.model.Permission > perms = setUpPermissions () ; setUpEntityQueryExpectations ( queryType , queryParams . getClass () , new java.lang.String [] { queryParameterName } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , perms , failure ) ; }
private void newEntity () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel . createInstance ( getEntity () . getStaticData () , getEntity () . getVdsGroupCompatibilityVersion () , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems () ) ) , this ) ; setWindow ( model ) ; }
private boolean isPlugCommandAvailable ( boolean plug ) { return ( ( ( ( getSelectedItems () ) != null ) && ( ( getSelectedItems () . size () ) > NUMBER_CONSTANT ) ) && ( isPlugAvailableByDisks ( plug ) ) ) && ( ( isVmDown () ) || ( isHotPlugAvailable () ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addManagedDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType , org.ovirt.engine.core.common.utils.VmDeviceType type , java.util.Map < java.lang.String , java.lang.Object > specParams , boolean isPlugged , java.lang.Boolean isReadOnly ) { return addManagedDevice ( id , generalType , type , specParams , isPlugged , isReadOnly , STRING_CONSTANT , null , false ) ; }
@ org.junit.Test public void testConvertMiBToEiB () { double mib = NUMBER_CONSTANT * ( java.lang.Math . pow ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; int eib = org.ovirt.engine.core.common.utils.SizeConverter . convert ( ( ( long ) ( mib ) ) , SizeUnit.MiB , SizeUnit.EiB ) . intValue () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , eib ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { getCompensationContext () . snapshotEntityStatus ( snapshot , snapshot . getStatus () ) ; getSnapshotDao () . updateStatus ( getParameters () . getSnapshotId () , SnapshotStatus.LOCKED ) ; getCompensationContext () . stateChanged () ; return null ; }
@ java.lang.Override protected java.lang.String getDescription () { java.lang.String networkName = ( ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand . getNetworkName () ) == null ) ? STRING_CONSTANT : org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand . getNetworkName () ; java.lang.String clusterName = ( ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand . getVdsGroup () ) == null ) ? STRING_CONSTANT : org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand . getVdsGroup () . getName () ; return ( networkName + STRING_CONSTANT ) + clusterName ; }
private static void updateTimeoutLogableObject ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { int duplicateEventsIntrvalValue = ( auditLogable . isExternal () ) ? java.lang.Math . max ( auditLogable . getEventFloodInSec () , NUMBER_CONSTANT ) : logType . getDuplicateEventsIntervalValue () ; if ( duplicateEventsIntrvalValue > NUMBER_CONSTANT ) { auditLogable . setEndTime ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( duplicateEventsIntrvalValue ) ) ; auditLogable . setTimeoutObjectId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . composeObjectId ( auditLogable , logType ) ) ; } }
protected void setUpCommand () { org.mockito.Mockito . doNothing () . when ( command ) . initTemplate () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . verifyAddVm () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . setAndValidateCpuProfile () ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration entity = super . mapRow ( rs , rowNum ) ; entity . setId ( getGuidDefaultEmpty ( rs , STRING_CONSTANT ) ) ; entity . setValue ( rs . getString ( STRING_CONSTANT ) ) ; return entity ; }
public void activateItemsUpdate () { disableItemsUpdate () ; model . getItemsChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateItems () ; } } ) ; updateItems () ; }
@ org.junit.Test public void moveDisk () { command . getParameters () . setParametersList ( createMoveDisksParameters () ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Down , null , diskImageId ) ; command . updateParameters () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , command . getMoveDiskParametersList () . size () ) ; }
private static void interfaceHasSiblingVlanInterfaces ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( siblingVlanInterfaces . isEmpty () ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllSiblingVlanInterfaces , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
@ org.junit.Test public void testImportWithStorageDomainName ( ) throws java.lang.Exception { setUpGetEntityExpectations ( ( STRING_CONSTANT + ( NAMES [ NUMBER_CONSTANT ] ) ) , SearchType.StorageDomain , getStorageDomain ( NUMBER_CONSTANT ) ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain () ; storageDomain . setName ( NAMES [ NUMBER_CONSTANT ] ) ; org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster () ; cluster . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; doTestImport ( storageDomain , cluster , false ) ; }
private static void logField ( org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromOvf , java.lang.String fieldName , java.lang.String fieldValue ) { java.lang.String vmName = vmStaticFromOvf . getvm_name () ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; logable . AddCustomValue ( STRING_CONSTANT , fieldName ) ; logable . AddCustomValue ( STRING_CONSTANT , vmName ) ; logable . AddCustomValue ( STRING_CONSTANT , fieldValue ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( logable , AuditLogType.VM_IMPORT_INFO ) ; }
public void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > () ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . glusterSnapshotInfo ( STRING_CONSTANT , volumeName ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc ( clusterId , xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > getClustersToAttach () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > clusterToAttach = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > () ; for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getNetworkClusterList () . getItems () ) { if ( networkClusterModel . isAttached () ) { clusterToAttach . add ( networkClusterModel ) ; } } return clusterToAttach ; }
@ java.lang.Override public java.lang.Void runInTransaction () { org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredNetworkData = new org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData ( getParameters () . getNetworkAttachments () , applyUserConfiguredNics () ) ; hostNetworkTopologyPersister . persistAndEnforceNetworkCompliance ( updatedHost , false , userConfiguredNetworkData ) ; getVdsDynamicDao () . updateNetConfigDirty ( updatedHost . getId () , updatedHost . getNetConfigDirty () ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : getModifiedNetworks () ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper . setStatus ( getVdsGroupId () , net ) ; } return null ; }
@ org.junit.Before public void setUp () { clusterId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.mockito.Mockito . doReturn ( cluster ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( clusterUtils ) . when ( command ) . getClusterUtils () ; org.mockito.Mockito . when ( glusterUtils . getUpServer ( clusterId ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
public void getLocalStorageHost ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String dataCenterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) { return item ; } } return null ; } } ; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters ( ( STRING_CONSTANT + dataCenterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , sp , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.StorageServerConnections createPosixConnection ( java.lang.String connection , org.ovirt.engine.core.common.businessentities.StorageType type , java.lang.String vfsType , java.lang.String mountOptions ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid . NewGuid () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionDetails = populateBasicConnectionDetails ( connection , type ) ; connectionDetails . setVfsType ( vfsType ) ; connectionDetails . setMountOptions ( mountOptions ) ; return connectionDetails ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllDbUsers , org.ovirt.engine.core.common.queries.VdcQueryParametersBase . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { false , false } , getUsers () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , false , false , false , false ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.DetachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , valid , success ) ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
@ org.junit.Test public void testAttachFailDomainAlreadyInPool () { org.mockito.Mockito . when ( storagePoolIsoMapDao . getAllForStorage ( storageDomain . getId () ) ) . thenReturn ( java.util.Collections . singletonList ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap () ) ) ; org.ovirt.engine.core.bll.ValidationResult attachedDomainInsertionResult = validator . validateDomainCanBeAttachedToPool () ; org.junit.Assert . assertThat ( attachedDomainInsertionResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ) ; }
@ java.lang.Override protected void executeCommand () { try { addVmToDb () ; processImages () ; org.ovirt.engine.core.bll.VmHandler . addVmInitToDB ( getVm () . getStaticData () ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.ImportVmCommandBase . getMacPool () . freeMacs ( macsAdded ) ; throw e ; } org.ovirt.engine.core.bll.ImportVmCommandBase . setSucceeded ( true ) ; }
@ org.junit.Test public void testConnectionWithValidMountOptionsSucceeds () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.NFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( command ) . validateMountOptions () ; org.mockito.Mockito . when ( command . getStorageConnDao () . get ( newPosixConnection . getId () ) ) . thenReturn ( newPosixConnection ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendMacPoolResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void removeDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , org.ovirt.engine.core.compat.Guid vmId ) { try { removeDiskFromVm ( vmId , diskImage . getId () ) ; removeImage ( diskImage ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log . error ( STRING_CONSTANT , ex . getMessage () ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log . debug ( STRING_CONSTANT , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
public void addDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap , org.ovirt.engine.core.compat.Guid vmId ) { try { addImage ( image , active , imageStorageDomainMap ) ; addDiskToVmIfNotExists ( image , vmId ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log . error ( STRING_CONSTANT , ex . getMessage () ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log . debug ( STRING_CONSTANT , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > pools ) { if ( ( pools == null ) || ( ( pools . size () ) != NUMBER_CONSTANT ) ) { return; } org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = pools . get ( NUMBER_CONSTANT ) ; setStoragePool ( dataCenter ) ; callback . onSuccess ( pools ) ; }
public void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void getWANColorDepth ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth . fromInt ( ( ( java.lang.Integer ) ( source ) ) . intValue () ) : org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth.depth16 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth , getDefaultConfigurationVersion () ) , aQuery ) ; }
@ org.junit.Before public void setup () { org.mockito.Mockito . when ( version . getValue () ) . thenReturn ( org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION ) ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.VmNicValidator ( nic , version ) ) ; org.mockito.Mockito . doReturn ( dbFacade ) . when ( validator ) . getDbFacade () ; vm = new org.ovirt.engine.core.common.businessentities.VM () ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( org.ovirt.engine.core.searchbackend.StorageDomainFieldAutoCompleter.TYPE . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.StorageType . class ) ; } else if ( org.ovirt.engine.core.searchbackend.StorageDomainFieldAutoCompleter.STATUS . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus . class ) ; } else if ( org.ovirt.engine.core.searchbackend.StorageDomainFieldAutoCompleter.WIPE_AFTER_DELETE . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter () ; } return retval ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Bookmark > resultList = returnValue . getReturnValue () ; if ( resultList != null ) { java.util.Collections . sort ( resultList , org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR ) ; } setIsBookmarkInitiated ( true ) ; setItems ( resultList ) ; setIsBookmarkInitiated ( false ) ; }
@ org.junit.Test public void hasMultipleClustersForLocalDC () { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = java.util.Arrays . asList ( new org.ovirt.engine.core.common.businessentities.Cluster () , new org.ovirt.engine.core.common.businessentities.Cluster () ) ; org.mockito.Mockito . when ( clusterDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( clusters ) ; cmd . getStoragePool () . setIsLocal ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.CLUSTER_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE ) ; }
@ org.junit.Test public void testCreateTasksStartedFromCLIWithErrors () { org.mockito.Mockito . doReturn ( getTasks ( JobExecutionStatus.STARTED ) ) . when ( provider ) . getTaskListForCluster ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.CLUSTER_GUIDS [ NUMBER_CONSTANT ] ) ; tasksSyncJob . updateGlusterAsyncTasks () ; org.mockito.Mockito . verify ( taskUtils , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . endStepJob ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.job.Step . class ) ) ; }
@ java.lang.Override protected void sendWarningForNonExportableDisks ( org.ovirt.engine.core.common.businessentities.VM entity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getVmDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getWindow () , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( target ) ) ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > vmDisks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper . sendWarningForNonExportableDisks ( model , vmDisks , VmModelHelper.WarningType.VM_EXPORT ) ; } } ) , entity . getId () ) ; }
@ java.lang.Override protected void endSuccessfully () { org.ovirt.engine.core.compat.Guid createdDiskId = org.ovirt.engine.core.bll.storage.ovfstore.CreateOvfVolumeForStorageDomainCommand . getActionReturnValue () ; endChildCommand ( true ) ; org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfoDb = storageDomainOvfInfoDao . get ( createdDiskId ) ; if ( ( storageDomainOvfInfoDb == null ) || ( ( storageDomainOvfInfoDb . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.DISABLED ) ) ) { return; } storageDomainOvfInfoDb . setStatus ( StorageDomainOvfInfoStatus.OUTDATED ) ; storageDomainOvfInfoDao . update ( storageDomainOvfInfoDb ) ; org.ovirt.engine.core.bll.storage.ovfstore.CreateOvfVolumeForStorageDomainCommand . setSucceeded ( true ) ; }
@ org.junit.Test public void testGetEntityNameByIdAndTypeForVM () { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao . get ( org.ovirt.engine.core.dao.EntityDaoImplTest.VM_ID ) ; org.junit.Assert . assertNotNull ( vmStatic ) ; java.lang.String name = vmStatic . getName () ; org.junit.Assert . assertEquals ( name , underTest . getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.VM_STATIC_GUID , VdcObjectType.VM ) ) ; }
@ org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown () { initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) . when ( diskValidator ) . isDiskPluggedToAnyNonDownVm ( org.mockito.ArgumentMatchers . anyBoolean () ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN . name () ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { getBehavior () . deactivateInstanceTypeManager () ; updateWatchdogItems ( ( ( java.util.HashSet < org.ovirt.engine.core.common.businessentities.VmWatchdogType > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; getBehavior () . activateInstanceTypeManager () ; }
protected void updateHashName ( T model ) { java.lang.String hashName = model . getHashName () ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget . getView () . setHashName ( hashName ) ; org.ovirt.engine.ui.uicommonweb.UICommand openDocumentationCommand = model . getOpenDocumentationCommand () ; if ( openDocumentationCommand != null ) { boolean isDocumentationAvailable = ( hashName != null ) && ( ( org.ovirt.engine.ui.common.uicommon.DocumentationPathTranslator . getPath ( hashName ) ) != null ) ; openDocumentationCommand . setIsAvailable ( isDocumentationAvailable ) ; updateHelpCommand ( ( isDocumentationAvailable ? openDocumentationCommand : null ) ) ; } }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Nic model = new org.ovirt.engine.api.model.Nic () ; model . setName ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
private void doTestRemoveNotFound ( java.lang.String id ) throws java.lang.Exception { initResource ( resource.parent ) ; resource.id = id ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } resource.id = STRING_CONSTANT ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getQuotaByAdElementId ( org.ovirt.engine.core.compat.Guid adElementId , org.ovirt.engine.core.compat.Guid storagePoolId , boolean recursive ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource quotaParameterSource = getCustomMapSqlParameterSource () ; quotaParameterSource . addValue ( STRING_CONSTANT , adElementId ) ; quotaParameterSource . addValue ( STRING_CONSTANT , storagePoolId ) ; quotaParameterSource . addValue ( STRING_CONSTANT , recursive ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , getQuotaMetaDataFromResultSet () , quotaParameterSource ) ; }
@ java.lang.Override public void setItems ( java.lang.Iterable value ) { if ( ( items ) != value ) { ItemsChanging ( value , items ) ; items = value ; getItemsChangedEvent () . raise ( this , EventArgs.Empty ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
protected void updateSgIoUnfilteredChangeability () { if ( ! ( getIsScsiPassthrough () . getEntity () ) ) { getIsSgIoUnfiltered () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants . cannotEnableSgioWhenScsiPassthroughDisabled () ) ; getIsSgIoUnfiltered () . setIsChangeable ( false ) ; getIsSgIoUnfiltered () . setEntity ( false ) ; return; } if ( isEditEnabled () ) { getIsSgIoUnfiltered () . setChangeProhibitionReason ( null ) ; } getIsSgIoUnfiltered () . setIsChangeable ( isEditEnabled () ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ; org.ovirt.engine.api.restapi.resource.HostStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.HostStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
@ org.junit.Test public void testUpdateByVolumeIdAndName () { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig config = dao . getConfigByVolumeIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.VOLUME_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_1 ) ; org.junit.Assert . assertNotNull ( config ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , config . getParamValue () ) ; dao . updateConfigByVolumeIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.VOLUME_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_1 , STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig modifiedConfig = dao . getConfigByVolumeIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.VOLUME_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_1 ) ; org.junit.Assert . assertNotNull ( modifiedConfig ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , modifiedConfig . getParamValue () ) ; }
public void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
private boolean isCurrentTaskLookedFor ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task ) { return ( ( ( ( task instanceof org.ovirt.engine.core.bll.tasks.CommandAsyncTask ) && ( ( task . getParameters () . getEntityInfo () ) != null ) ) && ( id . equals ( task . getParameters () . getEntityInfo () . getId () ) ) ) && ( ( task . getState () ) != ( AsyncTaskState.Cleared ) ) ) && ( ( task . getState () ) != ( AsyncTaskState.ClearFailed ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { filteredStorageDomains = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : storageDomains ) { if ( org.ovirt.engine.ui.uicommonweb.Linq . isDataActiveStorageDomain ( domain ) ) { filteredStorageDomains . add ( domain ) ; } } if ( getClusterQuota () . getIsAvailable () ) { initQuotaForStorageDomains () ; } else { initDisksStorageDomainsList () ; } }
@ org.junit.Test public void insufficientDiskSpaceWithCollapse () { setupDiskSpaceTest () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.Matchers . anyMapOf ( org.ovirt.engine.core.compat.Guid . class , org.ovirt.engine.core.common.businessentities.StorageDomain . class ) ) ; org.mockito.Mockito . when ( cmd . getImportValidator () . validateSpaceRequirements ( org.mockito.Matchers . anyCollectionOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage . class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
public void isClusterEmpty ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > () { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.IsClusterEmpty , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
@ org.junit.Test public void testAddSetAndUploadIconFailure ( ) throws java.lang.Exception { final org.ovirt.engine.api.model.Vm model = createModel ( null ) ; model . setLargeIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIconWithData () ) ; model . setSmallIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler . createIcon ( GUIDS [ NUMBER_CONSTANT ] ) ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BAD_REQUEST ) ; } }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result . getReturnValue () ; if ( ( returnValue != null ) && ( returnValue . getSucceeded () ) ) { networkCreatingManager . updateVnics ( ( ( idToUpdate ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . getActionReturnValue () ) ) : idToUpdate ) , unitVmModel . getNicsWithLogicalNetworks () . getItems () , unitVmModel ) ; } else { networkCreatingManager . getCallback () . queryFailed () ; } }
@ org.junit.Test public void getPermissionCheckSubjectsTest () { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissions = addClusterCommand . getPermissionCheckSubjects () ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , permissions . size () ) ; org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject = permissions . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( cluster . getStoragePoolId () , permissionSubject . getObjectId () ) ; org.junit.Assert . assertEquals ( VdcObjectType.StoragePool , permissionSubject . getObjectType () ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getNetworkDao () . getAllForDataCenter ( getStoragePoolId () ) ; for ( final org.ovirt.engine.core.common.businessentities.network.Network net : networks ) { getCompensationContext () . snapshotEntity ( net ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getNetworkDao () . remove ( net . getId () ) ; } getCompensationContext () . stateChanged () ; return null ; }
@ org.junit.Test public void insufficientDiskSpaceWithCollapse () { setupDiskSpaceTest () ; org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . when ( cmd . getImportValidator () . validateSpaceRequirements ( org.mockito.ArgumentMatchers . anyCollection () ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas ) { quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > () ; getQuota () . setItems ( quotas ) ; getQuota () . setIsEmpty ( quotas . isEmpty () ) ; updateControlsAvailability () ; stopProgress () ; }
private void initCommand ( org.ovirt.engine.core.common.businessentities.OvfEntityData resultOvfEntityData ) { initUnregisteredOVFData ( resultOvfEntityData ) ; org.mockito.Mockito . doReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.network.macpool.MacPool . class ) ) . when ( cmd ) . getMacPool () ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.ImportValidator ( cmd . getParameters () ) ) ; org.mockito.Mockito . doReturn ( validator ) . when ( cmd ) . getImportValidator () ; mockStoragePool () ; org.mockito.Mockito . doReturn ( storagePool ) . when ( validator ) . getStoragePool () ; cmd . init () ; }
public boolean hasSqlInjection ( java.lang.String sql ) { sql = removeAllStringValuesFromSql ( sql ) ; if ( ! ( sql . isEmpty () ) ) { sql = sql . replaceAll ( STRING_CONSTANT , STRING_CONSTANT ) ; for ( java.lang.String expr : sqlInjectionExpressions ) { if ( sql . contains ( expr ) ) { return true ; } } } return false ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getBlockDataStorageModels () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > models = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > () ; org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel iscsiDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel () ; iscsiDataModel . setIsGrouppedByTarget ( true ) ; models . add ( iscsiDataModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel fcpDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel () ; models . add ( fcpDataModel ) ; addTypeToStorageModels ( StorageDomainType.Data , models ) ; return models ; }
private org.ovirt.engine.core.extensions.mgr.ExtensionProxy getExtensionByConfigKey ( java.lang.String key , java.lang.String value ) { org.ovirt.engine.core.extensions.mgr.ExtensionProxy ret = null ; for ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy proxy : getExtensionsManager () . getExtensionsByService ( org.ovirt.engine.api.extensions.aaa.Authn . class . getName () ) ) { if ( value . equals ( proxy . getContext () . < java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) . getProperty ( key ) ) ) { ret = proxy ; break; } } return ret ; }
@ java.lang.Override public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.ImportSanStorageModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.ImportSanStorageModel ) ( target ) ) ; java.lang.Object result = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; if ( result != null ) { model . setCandidates ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ) ( result ) ) ) ; } else { setError ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . errorWhileRetrievingListOfDomainsImportSanStorage () ) ; } }
@ java.lang.Override public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties () { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties () ; jobProperties . put ( VdcObjectType.VM . name () . toLowerCase () , ( ( org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand . getVmName () ) == null ? STRING_CONSTANT : org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand . getVmName () ) ) ; jobProperties . put ( VdcObjectType.Storage . name () . toLowerCase () , org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand . getStorageDomainName () ) ; } return jobProperties ; }
@ org.junit.Before public void setup ( ) throws java.lang.Exception { validator = org.ovirt.engine.core.common.utils.ValidationUtils . getValidator () ; org.ovirt.engine.core.common.config.IConfigUtilsInterface confUtils = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.config.IConfigUtilsInterface . class ) ; org.mockito.Mockito . when ( confUtils . getValue ( ConfigValues.ManagementNetwork , ConfigCommon.defaultConfigurationVersion ) ) . thenReturn ( org.ovirt.engine.core.common.utils.MTUValidatorTest.TEST_MANAGEMENT_NETWORK ) ; org.ovirt.engine.core.common.config.Config . setConfigUtils ( confUtils ) ; }
private static java.lang.Boolean AssignBoolValue ( java.util.Map < java.lang.String , java.lang.Object > input , java.lang.String name ) { if ( input . containsKey ( name ) ) { if ( ( input . get ( name ) ) instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( input . get ( name ) ) ) ; } return java.lang.Boolean . parseBoolean ( input . get ( name ) . toString () ) ; } return java.lang.Boolean.FALSE ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( java.util.Collections . emptyList () ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void clusterWithVirtGlusterServicesNotAllowed () { createCommandWithVirtGlusterEnabled () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; mcr . mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; cpuExists () ; allQueriesForVms () ; validateFailedWithReason ( EngineMessage.CLUSTER_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ; }
private com.google.gwt.user.client.rpc.XsrfToken extractTokenFromRequest () { java.util.List < java.lang.String > header = java.util.Collections . list ( getThreadLocalRequest () . getHeaders ( XsrfRpcRequestBuilder.XSRF_TOKEN_HEADER ) ) ; com.google.gwt.user.client.rpc.XsrfToken result = null ; if ( ( header . size () ) == NUMBER_CONSTANT ) { result = new com.google.gwt.user.client.rpc.XsrfToken ( header . get ( NUMBER_CONSTANT ) ) ; } return result ; }
@ org.junit.Test public void testUpdate () { org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService service = dao . getByClusterIdAndServiceType ( org.ovirt.engine.core.dao.gluster.GlusterClusterServiceDaoTest.CLUSTER_ID , ServiceType.GLUSTER ) ; org.junit.Assert . assertNotNull ( service ) ; org.junit.Assert . assertEquals ( GlusterServiceStatus.RUNNING , service . getStatus () ) ; service . setStatus ( GlusterServiceStatus.STOPPED ) ; dao . update ( service ) ; service = dao . getByClusterIdAndServiceType ( org.ovirt.engine.core.dao.gluster.GlusterClusterServiceDaoTest.CLUSTER_ID , ServiceType.GLUSTER ) ; org.junit.Assert . assertNotNull ( service ) ; org.junit.Assert . assertEquals ( GlusterServiceStatus.STOPPED , service . getStatus () ) ; }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent ) ) { return false ; } org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent other = ( ( org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent ) ( obj ) ) ; return ( refreshRate ) == ( other.refreshRate ) ; }
@ org.junit.Test public void validateSucceedsWhenGlusterServerHasPeersThatExistInDB ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS () , true ) ; org.mockito.Mockito . when ( glusterDBUtils . serverExists ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . eq ( org.ovirt.engine.core.bll.hostdeploy.AddVdsCommandTest.PEER_1 ) ) ) . thenReturn ( true ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
static org.ovirt.engine.api.model.Event getModel ( int index ) { org.ovirt.engine.api.model.Event model = new org.ovirt.engine.api.model.Event () ; model . setId ( java.lang.String . valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; model . setSeverity ( LogSeverity.ALERT ) ; model . setDescription ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; model . setOrigin ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; model . setCustomId ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; model . setFloodRate ( NUMBER_CONSTANT ) ; return model ; }
private boolean isConsoleCommandsExecutionAllowed () { final java.util.List < org.ovirt.engine.core.common.businessentities.VM > list = ( ( getSelectedItem () ) == null ) ? null : getSelectedItems () ; if ( list == null ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.VM vm : list ) { if ( consoleModelsCache . getVmConsolesForEntity ( vm ) . canConnectToConsole () ) { return true ; } } return false ; }
@ org.junit.Test public void canAddCloneVmFromSnapshotNoConfiguration () { initializeMock () ; cmd . getVm () . setName ( STRING_CONSTANT ) ; mockUninterestingMethods () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.Matchers . any () ) ; org.mockito.Mockito . when ( snapshotDao . get ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommandTest.SOURCE_SNAPSHOT_ID ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.Snapshot () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION ) ; }
@ org.junit.Test public void isConnWithSameDetailsExistBlockDomains () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( STRING_CONSTANT , StorageType.ISCSI , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList <> () ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection1 = createISCSIConnection ( STRING_CONSTANT , StorageType.ISCSI , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; connections . add ( connection1 ) ; org.mockito.Mockito . when ( storageConnDao . getAllForConnection ( newISCSIConnection ) ) . thenReturn ( connections ) ; boolean isExists = command . isConnWithSameDetailsExists ( newISCSIConnection , null ) ; org.junit.Assert . assertTrue ( isExists ) ; }
private java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > addTaskToQueue ( org.ovirt.engine.core.common.eventqueue.Event event , java.util.concurrent.Callable < org.ovirt.engine.core.common.eventqueue.EventResult > callable , org.ovirt.engine.core.compat.Guid storagePoolId , boolean addFirst ) { java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > task = new java.util.concurrent.FutureTask ( callable ) ; org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.eventqueue.Event , java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > > queueEvent = new org.ovirt.engine.core.common.utils.Pair ( event , task ) ; if ( addFirst ) { getEventQueue ( storagePoolId ) . addFirst ( queueEvent ) ; } else { getEventQueue ( storagePoolId ) . add ( queueEvent ) ; } return task ; }
private void updateOptionsLocalFSData () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getLocalStorageHost ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; clusterGuideModel.localStorageHost = localStorageHost ; clusterGuideModel . updateOptionsLocalFS () ; } } ) , dataCenter . getName () ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.Cluster model = org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
private void addStatistics ( org.ovirt.engine.api.model.Disk model , org.ovirt.engine.api.model.Disk entity ) { model . setStatistics ( new org.ovirt.engine.api.model.Statistics () ) ; org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery ( newModel ( model . getId () ) ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query . getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( statistic , query . getParentType () ) ; } model . getStatistics () . getStatistics () . addAll ( statistics ) ; }
@ java.lang.Override public void run () { try { returnValue = org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( actionType , actionParameters ) ; } catch ( java.lang.RuntimeException ex ) { log . error ( STRING_CONSTANT , ex ) ; } finally { latch . countDown () ; } }
@ java.lang.Override public com.google.gwt.resources.client.ImageResource getValue ( T item ) { java.lang.String osTypeName = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getOsUniqueOsNames () . get ( extractor . extractOsType ( item ) ) ; com.google.gwt.resources.client.ResourcePrototype resource = org.ovirt.engine.ui.userportal.widget.table.column.VmImageColumn . getApplicationResourcesWithLookup () . getResource ( ( osTypeName + STRING_CONSTANT ) ) ; if ( ! ( resource instanceof com.google.gwt.resources.client.ImageResource ) ) { resource = org.ovirt.engine.ui.userportal.widget.table.column.VmImageColumn . getApplicationResourcesWithLookup () . otherSmallImage () ; } return ( ( com.google.gwt.resources.client.ImageResource ) ( resource ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > () { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface lookupEntity ( org.ovirt.engine.core.compat.Guid guid ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return parent . lookupInterface ( id ) ; } } ; org.ovirt.engine.api.restapi.resource.HostNicStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.HostNicStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.DiskSnapshot postPopulate ( org.ovirt.engine.api.model.DiskSnapshot model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ScsiGenericIO . class ) ) ; model . setStatus ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ; model . setLunStorage ( null ) ; return model ; }
@ org.junit.Test public void executeCommandWhenServerIdPresent () { setUpMocksForUpdate () ; mockForReadContent ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration entity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration () ; entity . setId ( getGuidDefaultEmpty ( rs , STRING_CONSTANT ) ) ; entity . setKey ( rs . getString ( STRING_CONSTANT ) ) ; entity . setValue ( rs . getString ( STRING_CONSTANT ) ) ; entity . setDescription ( rs . getString ( STRING_CONSTANT ) ) ; entity . setAllowedValues ( ( ( rs . getString ( STRING_CONSTANT ) ) != null ? java.util.Arrays . asList ( rs . getString ( STRING_CONSTANT ) . split ( STRING_CONSTANT ) ) : null ) ) ; return entity ; }
private void createCommand () { cmd . init () ; org.mockito.Mockito . doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao () ; org.mockito.Mockito . doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( vdsDao ) . when ( cmd ) . getVdsDao () ; }
@ java.lang.Override protected void addJNDIBeans () { addBeanJNDIName ( BeanType.BACKEND , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.SCHEDULER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.VDS_EVENT_LISTENER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.LOCK_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.EVENTQUEUE_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX . concat ( STRING_CONSTANT ) ) ; addBeanJNDIName ( BeanType.CACHE_CONTAINER , STRING_CONSTANT ) ; }
@ org.junit.Test public void canSetNumaPinning () { paramNumaNodes . clear () ; paramNumaNodes . add ( org.ovirt.engine.core.bll.utils.NumaTestUtils . createVmNumaNode ( NUMBER_CONSTANT , vdsNumaNodes ) ) ; mockCommandWithVmFromParams () ; command . executeCommand () ; org.mockito.Mockito . verify ( vmNumaNodeDao ) . massSaveNumaNode ( org.mockito.ArgumentMatchers . eq ( paramNumaNodes ) , org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { dataCenters . addAll ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) ; java.util.Collections . sort ( dataCenters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getExternalNetworkMap ( networkQuery , provider . getId () ) ; }
@ org.junit.Test public void testCredentialsWithConnectionExtensionSameHostDifferentTarget () { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . createConnectionWithCredentials ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . createConnectionExtension ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > credentials = helper . getStorageConnectionCredentialsForhost ( connExt . getHostId () , conn ) ; org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . assertCredentials ( credentials , conn . getUserName () , conn . getPassword () ) ; }
public boolean validateArchitectures ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsToImport ) { final org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenters () . getSelectedItem () ; if ( ( vmsToImport . isEmpty () ) || ( dataCenter == null ) ) { return false ; } return ( validateSameArchitecture ( vmsToImport ) ) && ( validateClusterExistsForArchitecture ( vmsToImport . get ( NUMBER_CONSTANT ) . getClusterArch () , dataCenter ) ) ; }
public void initUserAndGroupData () { if ( ( _dbUser ) == null ) { _dbUser = org.ovirt.engine.core.bll.PermissionsCommandBase . getDbUserDAO () . get ( org.ovirt.engine.core.bll.PermissionsCommandBase . getParameters () . getPermission () . getad_element_id () ) ; } if ( ( _adGroup ) == null ) { org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = org.ovirt.engine.core.bll.PermissionsCommandBase . getAdGroupDAO () . get ( org.ovirt.engine.core.bll.PermissionsCommandBase . getParameters () . getPermission () . getad_element_id () ) ; if ( dbGroup != null ) { _adGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup ( dbGroup ) ; } } }
@ java.lang.Override protected void executeCommand () { super . executeCommand () ; if ( org.ovirt.engine.core.bll.CreateSnapshotCommand . CanCreateSnapshot () ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = performImageVdsmOperation () ; if ( ( vdsReturnValue != null ) && ( vdsReturnValue . getSucceeded () ) ) { ProcessOldImageFromDb () ; AddDiskImageToDb ( mNewCreatedDiskImage , null ) ; setActionReturnValue ( mNewCreatedDiskImage ) ; org.ovirt.engine.core.bll.CreateSnapshotCommand . setSucceeded ( true ) ; } } }
@ org.junit.Test public void testImportWithClusterName ( ) throws java.lang.Exception { setUpGetEntityExpectations ( ( STRING_CONSTANT + ( NAMES [ NUMBER_CONSTANT ] ) ) , SearchType.Cluster , getCluster ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain () ; storageDomain . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster () ; cluster . setName ( NAMES [ NUMBER_CONSTANT ] ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; doTestImport ( storageDomain , cluster , false ) ; }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; try { resource . update ( getModel ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void shouldElectActiveSharedBeforeLocalDataDomain2 () { org.ovirt.engine.core.common.businessentities.StorageDomain localDomain = createDataStorageDomain ( StorageDomainStatus.Active , STRING_CONSTANT , LOCAL_SD_ID ) ; localDomain . setStorageType ( StorageType.LOCALFS ) ; org.ovirt.engine.core.common.businessentities.StorageDomain sharedDomain = createDataStorageDomain ( StorageDomainStatus.Active , STRING_CONSTANT , SHARED_SD_ID ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Arrays . asList ( sharedDomain , localDomain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; org.junit.Assert . assertEquals ( sharedDomain , cmd . electNewMaster () ) ; }
@ javax.annotation.PostConstruct private void init () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.compat.Guid hostId : hostDynamicDao . getIdsOfHostsWithStatus ( VDSStatus.Up ) ) { parameters . add ( new org.ovirt.engine.core.common.action.VdsActionParameters ( hostId ) ) ; } backend . runInternalMultipleActions ( VdcActionType.RefreshHostDevices , parameters ) ; hostDeviceDao . cleanDownVms () ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage getImage () { if ( ( mImage ) == null ) { mImage = org.ovirt.engine.core.bll.BaseImagesCommand . getDiskImageDao () . get ( getImageId () ) ; if ( ( mImage ) == null ) { mImage = org.ovirt.engine.core.bll.BaseImagesCommand . getDiskImageDao () . getSnapshotById ( getImageId () ) ; } } return mImage ; }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setAllContentHeaderExpectation () ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; control . replay () ; org.ovirt.engine.api.model.Nic nic = resource . get () ; assertTrue ( nic . isSetStatistics () ) ; verifyModelSpecific ( nic , NUMBER_CONSTANT ) ; verifyLinks ( nic ) ; } finally { accepts . clear () ; } }
private java.util.SortedSet < org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel > getTargetsSet () { return new java.util.TreeSet ( new java.util.Comparator < org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel > () { org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator lexoNumeric = new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ; @ java.lang.Override public int compare ( org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel targetModel1 , org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel targetModel2 ) { return lexoNumeric . compare ( targetModel1 . getEntity () . getiqn () , targetModel2 . getEntity () . getiqn () ) ; } } ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > iterator = model . getItems () . iterator () ; if ( iterator . hasNext () ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel root = model . cloneTagModel ( iterator . next () ) ; updateDataProvider ( java.util.Arrays . asList ( root ) ) ; } }
@ java.lang.Override public void removeLun ( org.ovirt.engine.core.common.businessentities.LUNs lun ) { if ( lun . getvolume_group_id () . isEmpty () ) { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getLunDao () . remove ( lun . getLUN_id () ) ; for ( org.ovirt.engine.core.common.businessentities.storage_server_connections connection : filterConnectionsUsedByOthers ( lun . getLunConnections () , STRING_CONSTANT , lun . getLUN_id () ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageServerConnectionDao () . remove ( connection . getid () ) ; } } }
private void prepareCommand () { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase () ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand ( parameters ) ) ; org.mockito.Mockito . doReturn ( lunDAO ) . when ( command ) . getLunDao () ; org.mockito.Mockito . doReturn ( storageServerConnectionDAO ) . when ( command ) . getStorageServerConnectionDao () ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.UpdateUserProfileCommand . getUserProfile () ; profile . setSshPublicKey ( org.ovirt.engine.core.bll.UpdateUserProfileCommand . getParameters () . getUserProfile () . getSshPublicKey () ) ; profile . setUserPortalVmLoginAutomatically ( org.ovirt.engine.core.bll.UpdateUserProfileCommand . getParameters () . getUserProfile () . isUserPortalVmLoginAutomatically () ) ; userProfileDao . update ( profile ) ; org.ovirt.engine.core.bll.UpdateUserProfileCommand . setSucceeded ( true ) ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQuery . getBackendResourceManager () . RunVdsCommand ( VDSCommandType.GetGlusterVolumeProfileInfo , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeProfileInfoVDSParameters ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQuery . getParameters () . getClusterId () , getUpServerId ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQuery . getParameters () . getClusterId () ) , getGlusterVolumeName ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQuery . getParameters () . getVolumeId () ) ) ) ; org.ovirt.engine.core.bll.gluster.GetGlusterVolumeProfileInfoQuery . getQueryReturnValue () . setReturnValue ( returnValue . getReturnValue () ) ; }
protected org.ovirt.engine.core.common.businessentities.VM getVmEntity () { org.ovirt.engine.api.restapi.resource.VM entity = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.VM . class ) ; org.mockito.Mockito . when ( entity . getId () ) . thenReturn ( GUIDS [ NUMBER_CONSTANT ] ) ; org.mockito.Mockito . when ( entity . getStaticData () ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.VmStatic () ) ; return entity ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage getImage () { if ( ( mImage ) == null ) { org.ovirt.engine.core.common.businessentities.DiskImage image = getDiskImageDao () . get ( getImageId () ) ; if ( image != null ) { mImage = image ; } else { image = getDiskImageDao () . getSnapshotById ( getImageId () ) ; if ( image != null ) { mImage = image ; } } } return mImage ; }
protected java.util.List < java.lang.String > getAvailableKeys () { java.util.List < java.lang.String > list = ( ( allKeys ) == null ) ? new java.util.LinkedList < java.lang.String > () : new java.util.LinkedList < java.lang.String > ( allKeys ) ; list . removeAll ( getUsedKeys () ) ; if ( ( list . size () ) > NUMBER_CONSTANT ) { list . add ( NUMBER_CONSTANT , selectKey ) ; } else { list . add ( noKeys ) ; } return list ; }
public void createCommand () { param = new org.ovirt.engine.core.common.action.UpdateHostNicVfsConfigParameters ( org.ovirt.engine.core.bll.network.host.UpdateHostNicVfsConfigCommandTest.NIC_ID , org.ovirt.engine.core.bll.network.host.UpdateHostNicVfsConfigCommandTest.NUM_OF_VFS , false ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.network.host.UpdateHostNicVfsConfigCommand ( param , null ) ) ; org.mockito.Mockito . doReturn ( validator ) . when ( command ) . getVfsConfigValidator () ; org.mockito.Mockito . doReturn ( vfsConfigDao ) . when ( command ) . getVfsConfigDao () ; org.mockito.Mockito . doReturn ( interfaceDao ) . when ( command ) . getInterfaceDao () ; }
protected void onGetClusterList ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > clusterList ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > items = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > () ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusterList ) { items . add ( createNetworkClusterModel ( cluster ) ) ; } getNetworkClusterList () . setItems ( items ) ; if ( firstInit ) { firstInit = false ; addCommands () ; } }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [] names , java.lang.Object [] values , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses ) { java.lang.String uri = ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.URL_BASE ) + STRING_CONSTANT ; return setUpActionExpectations ( task , clz , names , values , true , true , null , asyncTasks , asyncStatuses , null , null , uri , true ) ; }
private void mockSnapshotsValidator () { org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotInPreview ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
public < T > T pickRandom ( java.util.Collection < T > c ) { int elementIndex = nextInt ( c . size () ) ; java.util.Iterator < T > iter = c . iterator () ; for ( int i = NUMBER_CONSTANT ; i < elementIndex ; ++ i ) { iter . next () ; } return iter . next () ; }
private void RestoreVmFromBaseSnapshot ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getSnapshotDao () . exists ( vm . getId () , SnapshotType.STATELESS ) ) { log . infoFormat ( STRING_CONSTANT , vm . getId () ) ; org.ovirt.engine.core.common.action.VmOperationParameterBase restoreParams = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm . getId () ) ; restoreParams . setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , restoreParams , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand . getExecutionContext () , org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand . getLock () ) ) ; } }
@ org.junit.Test public void testValidateVmMigrating () { prepareForVmValidatorTests () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( snapshotValidator ) . vmSnapshotDisksNotDuringMerge ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; cmd . getVm () . setStatus ( VMStatus.MigratingTo ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP ) ; }
public org.ovirt.engine.core.common.businessentities.storage_domains setupForSpaceTest ( final org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings ) { org.ovirt.engine.core.common.businessentities.StorageDomainDynamic dynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic () ; dynamic . setavailable_disk_size ( settings.diskSpaceFree ) ; dynamic . setused_disk_size ( settings.diskSpaceUsed ) ; org.ovirt.engine.core.common.businessentities.storage_domains domain = new org.ovirt.engine.core.common.businessentities.storage_domains () ; domain . setStorageDynamicData ( dynamic ) ; org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest . mockConfig ( settings.spaceThresholdGB ) ; return domain ; }
@ java.lang.Override protected boolean validate () { if ( ! ( super . validate () ) ) { return false ; } return validate ( brickValidator . canRemoveBrick ( getParameters () . getBricks () , getGlusterVolume () , getParameters () . getReplicaCount () , false ) ) ; }
@ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( STRING_CONSTANT . equals ( lastExecutedCommand . getName () ) ) { return hostManagementConfirmationdetachConfirmPopupProvider . get () ; } return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = result . getReturnValue () ; if ( vm == null ) { return; } syncSearch ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId () ) ) ; } }
private boolean initVirtResources () { if ( InitializeStorage () ) { processFencing () ; processStoragePoolStatus () ; } else { java.util.Map < java.lang.String , java.lang.String > customLogValues = java.util.Collections . singletonMap ( STRING_CONSTANT , org.ovirt.engine.core.bll.InitVdsOnUpCommand . getStoragePoolName () ) ; setNonOperational ( NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE , customLogValues ) ; return false ; } return true ; }
@ java.lang.Override public java.util.List < java.lang.Integer > convert ( java.lang.Object source ) { java.util.ArrayList < java.lang.Integer > nums = new java.util.ArrayList <> () ; if ( source != null ) { java.lang.Iterable numEnumerable = ( ( java.lang.Iterable ) ( source ) ) ; java.util.Iterator numIterator = numEnumerable . iterator () ; while ( numIterator . hasNext () ) { nums . add ( java.lang.Integer . parseInt ( numIterator . next () . toString () ) ) ; } } return nums ; }
private void editMacPool () { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel ( this , org.ovirt.engine.core.common.action.VdcActionType.UpdateMacPool ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . editSharedMacPoolTitle () ) ; model . setHashName ( STRING_CONSTANT ) ; model . setHelpTag ( HelpTag.edit_shared_mac_pool ) ; model . setEntity ( ( ( org.ovirt.engine.core.common.businessentities.MacPool ) ( getSelectedItem () ) ) ) ; setWindow ( model ) ; }
@ java.lang.Override public org.ovirt.engine.core.dao.VdsGroupDAO getVdsGroupDAO () { final org.ovirt.engine.core.dao.VdsGroupDAO v = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.VdsGroupDAO . class ) ; final org.ovirt.engine.core.common.businessentities.VDSGroup g = new org.ovirt.engine.core.common.businessentities.VDSGroup () ; g . setvds_group_id ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; org.mockito.Mockito . when ( v . get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ) . thenReturn ( g ) ; return v ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters ) { networkModel . getDataCenters () . setItems ( dataCenters ) ; if ( networkModel instanceof org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ) { org.ovirt.engine.core.common.businessentities.StoragePool currentDc = findDc ( networkModel . getNetwork () . getDataCenterId () , dataCenters ) ; networkModel . getDataCenters () . setSelectedItem ( currentDc ) ; } else { networkModel . getDataCenters () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( dataCenters ) ) ; } }
private void doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( boolean displayNetwork , org.ovirt.engine.core.common.businessentities.network.Network network , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment () ; attachment . setIpConfiguration ( null ) ; attachment . setNetworkId ( network . getId () ) ; doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( displayNetwork , matcher , network , attachment ) ; }
@ java.lang.Override public org.ovirt.engine.core.aaa.DirectoryUser findUser ( org.ovirt.engine.core.common.utils.ExternalId id ) { java.lang.String name = null ; try { name = new java.lang.String ( id . getBytes () , STRING_CONSTANT ) ; } catch ( java.io.UnsupportedEncodingException e ) { return null ; } return new org.ovirt.engine.core.aaa.DirectoryUser ( this . getName () , id , name ) ; }
@ org.junit.Test public void testFetchSpecificQuotaUsageForGlobalCluster ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > quotaClusterList = dao . getQuotaClusterByClusterGuid ( null , FixturesTool.QUOTA_SPECIFIC ) ; org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster = quotaClusterList . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , quotaClusterList . size () ) ; org.junit.Assert . assertNotNull ( quotaCluster ) ; }
public void updateCpuSharesAmountChangeability () { boolean changeable = ( getModel () . getCpuSharesAmountSelection () . getSelectedItem () ) == ( UnitVmModel.CpuSharesAmount.CUSTOM ) ; boolean none = ( getModel () . getCpuSharesAmountSelection () . getSelectedItem () ) == ( UnitVmModel.CpuSharesAmount.DISABLED ) ; getModel () . getCpuSharesAmount () . setEntity ( ( changeable || none ? null : getModel () . getCpuSharesAmountSelection () . getSelectedItem () . getValue () ) ) ; getModel () . getCpuSharesAmount () . setIsChangable ( changeable ) ; }
protected void initAppTable () { appTable = new org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable () ; appTable . addColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < java.lang.String > () { @ java.lang.Override public java.lang.String getValue ( java.lang.String object ) { return object ; } } , constants . installedApp () ) ; appTable . getElement () . getStyle () . setPosition ( Position.RELATIVE ) ; com.google.gwt.user.client.ui.ScrollPanel appPanel = new com.google.gwt.user.client.ui.ScrollPanel () ; appPanel . add ( appTable ) ; subTabLayoutPanel . add ( appPanel , constants . importVmApplicationslSubTabLabel () ) ; }
@ java.lang.Override public void migrateVM ( java.util.List < org.ovirt.engine.core.compat.Guid > initialHosts , org.ovirt.engine.core.compat.Guid vmToMigrate ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vmToMigrate ) ; parameters . setInitialHosts ( new java.util.ArrayList ( initialHosts ) ) ; backendInternal . runInternalAction ( VdcActionType.MigrateVm , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
@ org.junit.Test public void canDoActionFailedVMHasNotDisk ( ) throws java.lang.Exception { mockVmStatusUp () ; org.mockito.Mockito . doReturn ( diskDao ) . when ( command ) . getDiskDao () ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( null ) ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST . toString () ) ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase Login ( org.ovirt.engine.core.common.action.LoginUserParameters parameters ) { switch ( parameters . getActionType () ) { case AutoLogin : case LoginUser : case LoginAdminUser : { org.ovirt.engine.core.bll.CommandBase < > command = org.ovirt.engine.core.bll.CommandsFactory . CreateCommand ( parameters . getActionType () , parameters ) ; return command . executeAction () ; } default: { return NotAutorizedError () ; } } }
@ org.junit.Test ( expected = javax.ws.rs.WebApplicationException . class ) public void testQueryWithFilter ( ) throws java.lang.Exception { java.util.List < java.lang.String > filterValue = new java.util.ArrayList < java.lang.String > () ; filterValue . add ( STRING_CONSTANT ) ; org.easymock.EasyMock . reset ( httpHeaders ) ; org.easymock.EasyMock . expect ( httpHeaders . getRequestHeader ( STRING_CONSTANT ) ) . andReturn ( filterValue ) ; resource . setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; resource . get () ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmList ) { java.util.List < org.ovirt.engine.core.compat.Guid > vmIds = getAffinityGroup () . getEntityIds () ; getVmsSelectionModel () . init ( vmList , ( vmIds != null ? vmIds : new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > () ) ) ; stopProgress () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = this ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; behavior . postInitTemplate ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . filterTemplatesByArchitecture ( templates , dataCenterWithCluster . getCluster () . getArchitecture () ) ) ; }
public java.lang.String getSessionIdBySeqId ( long sessionSequenceId ) { java.lang.String sessionId = null ; for ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo : sessionInfoMap . values () ) { if ( sessionInfo.contentOfSession . get ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID ) . equals ( sessionSequenceId ) ) { sessionId = ( ( java.lang.String ) ( sessionInfo.contentOfSession . get ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_ID ) ) ) ; break; } } return sessionId ; }
@ java.lang.Override protected void beforeCommandExecuted ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . beforeCommandExecuted ( command ) ; if ( command == ( model . getDefaultCommand () ) ) { removeListeners ( model ) ; getView () . flushToPrivateModel () ; consoleOptionsPersister . storeToLocalStorage ( model . getModel () ) ; org.ovirt.engine.ui.common.presenter.popup.ConsoleModelChangedEvent . fire ( this , model . getModel () ) ; } }
private void setCustomDefinedProperties ( org.ovirt.engine.core.common.businessentities.VmStatic vmStaticDataFromParams ) { org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.VMCustomProperties properties = org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils . getInstance () . parseProperties ( org.ovirt.engine.core.bll.UpdateVmCommand . getVdsGroup () . getcompatibility_version () , vmStaticDataFromParams . getCustomProperties () ) ; vmStaticDataFromParams . setPredefinedProperties ( properties . getPredefinedProperties () ) ; vmStaticDataFromParams . setUserDefinedProperties ( properties . getUseDefinedProperties () ) ; }
@ java.lang.Override public org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult runDiscover () { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient () ; client . setConfig ( config ) ; java.lang.Object result = client . execute ( org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.DISCOVER , org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.EMPTY ) ; return parseDiscoverResults ( result ) ; } catch ( org.apache.xmlrpc.XmlRpcException e ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log . error ( STRING_CONSTANT , e ) ; return null ; } }
protected void initSoundCard ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . isSoundcardEnabled ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel () , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel () . getIsSoundcardEnabled () . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }
@ org.junit.experimental.theories.Theory public void externalVmAreNotSavedAsLastVm ( org.ovirt.engine.core.vdsbroker.VmTestPairs data ) { stubCalls ( data ) ; org.junit.Assert . assertTrue ( vmsListFetcher . fetch () ) ; org.junit.Assume . assumeTrue ( ( ( data . vdsmVm () ) != null ) ) ; org.junit.Assume . assumeTrue ( ( ( data . dbVm () ) == null ) ) ; org.mockito.Mockito . verify ( vdsManager ) . setLastVmsList ( vdsManagerArgumentCaptor . capture () ) ; org.junit.Assert . assertTrue ( ( ( vdsManagerArgumentCaptor . getValue () . size () ) == NUMBER_CONSTANT ) ) ; }
public java.lang.String getTemplate ( java.lang.String type , java.lang.String name ) { org.ovirt.engine.sdk.codegen.templates.MethodParameterTemplate paramTemplate = new org.ovirt.engine.sdk.codegen.templates.MethodParameterTemplate () ; java.lang.String param = paramTemplate . getTemplate ( type , name ) ; org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper templateWrapper = new org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper ( getTemplate () ) ; templateWrapper . set ( STRING_CONSTANT , param ) ; return templateWrapper . toString () ; }
protected void RemoveVmUsers () { java.util.List < org.ovirt.engine.core.common.businessentities.tags_vm_map > all = getTagDAO () . getTagVmMapByVmIdAndDefaultTag ( org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; for ( org.ovirt.engine.core.common.businessentities.tags_vm_map tagVm : all ) { getTagDAO () . detachVmFromTag ( tagVm . gettag_id () , org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Boolean returnValue ) { if ( ! ( getCluster () . getSelectedItem () . getId () . equals ( cluster . getId () ) ) ) { return; } if ( returnValue ) { getAddBricksCommand () . setIsExecutionAllowed ( true ) ; setMessage ( null ) ; } else { getAddBricksCommand () . setIsExecutionAllowed ( false ) ; setMessage ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . volumeEmptyClusterValidationMsg () ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( propName . equals ( STRING_CONSTANT ) ) { onIsValidPropertyChange ( object ) ; } else if ( propName . equals ( STRING_CONSTANT ) ) { updateListByGropping ( object ) ; } }
public static synchronized java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > GetWindowsOsTypes () { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ) != null ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > () ; for ( org.ovirt.engine.core.common.businessentities.VmOsType type : org.ovirt.engine.core.common.businessentities.VmOsType . values () ) { if ( type . isWindows () ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes . add ( type ) ; } } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; }
protected void setSelectedOSType ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType ) { if ( vmBase . getId () . equals ( Guid.Empty ) ) { java.lang.Integer osId = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDefaultOs ( architectureType ) ; if ( osId != null ) { setSelectedOSTypeById ( osId . intValue () ) ; } } else { setSelectedOSTypeById ( vmBase . getOsId () ) ; } }
public org.ovirt.engine.core.bll.ValidationResult canAddRngDevice ( org.ovirt.engine.core.common.businessentities.Cluster cluster , org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice ) { org.ovirt.engine.core.common.businessentities.VmRngDevice.Source source = rngDevice . getSource () ; boolean supported = ( cluster != null ) && ( cluster . getRequiredRngSources () . contains ( source ) ) ; if ( ! supported ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void postOnSetupNetworks () { org.ovirt.engine.core.common.action.HostSetupNetworksParameters hostSetupNetworksParameters = createHostSetupNetworksParameters () ; org.ovirt.engine.ui.uicommonweb.action.UiAction setupNetworksAction = new org.ovirt.engine.ui.uicommonweb.action.UiVdcAction ( org.ovirt.engine.core.common.action.VdcActionType.HostSetupNetworks , hostSetupNetworksParameters , this , true ) ; setupNetworksAction . then ( getVfsConfigAction () ) . then ( getCommitNetworkChangesAction () ) . onAllExecutionsFinish ( getCloseAction () ) ; setupNetworksAction . runAction () ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
@ org.junit.Test public void onFailureResetInitialStatus () { mockExecutor ( false ) ; try { command . executeCommand () ; } catch ( org.ovirt.engine.core.common.errors.EngineException exception ) { org.mockito.Mockito . verify ( vdsBrokerFrontend ) . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.SetVdsStatus ) , org.mockito.ArgumentMatchers . any () ) ; return; } org.junit.Assert . fail () ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskInterface . class ) ) ; model . setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ScsiGenericIO . class ) ) ; model . setStatus ( org.ovirt.engine.api.common.util.StatusUtils . create ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ) ; model . setLunStorage ( null ) ; return model ; }
@ org.junit.Test public void mapGuestAgentSsoFromRestToBackend ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Sso restSso = new org.ovirt.engine.api.model.Sso () ; restSso . setMethods ( new org.ovirt.engine.api.model.Methods () ) ; org.ovirt.engine.api.model.Method guestAgent = new org.ovirt.engine.api.model.Method () ; guestAgent . setId ( org.ovirt.engine.api.model.SsoMethod.GUEST_AGENT ) ; restSso . getMethods () . getMethods () . add ( guestAgent ) ; org.ovirt.engine.core.common.businessentities.SsoMethod expectedBackendSsoMethod = org.ovirt.engine.core.common.businessentities.SsoMethod.GUEST_AGENT ; org.junit.Assert . assertEquals ( expectedBackendSsoMethod , org.ovirt.engine.api.restapi.types.SsoMapper . map ( restSso , null ) ) ; }
@ java.lang.Override public void onResponseReceived ( com.google.gwt.http.client.Request request , com.google.gwt.http.client.Response response ) { try { if ( org.ovirt.engine.ui.uicompat.ReportParser . getInstance () . parseReport ( response . getText () ) ) { resourceMap = org.ovirt.engine.ui.uicompat.ReportParser . getInstance () . getResourceMap () ; dashboardMap = org.ovirt.engine.ui.uicompat.ReportParser . getInstance () . getDashboardMap () ; isCommunityEdition = org.ovirt.engine.ui.uicompat.ReportParser . getInstance () . isCommunityEdition () ; } } catch ( com.google.gwt.xml.client.impl.DOMParseException e ) {} finally { setXmlInitialized () ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) protected void initializeCommand ( org.ovirt.engine.core.common.businessentities.ImageOperation operation ) { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.MoveOrCopyDiskCommandDummy ( new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters ( diskImageGuid , srcStorageId , destStorageId , operation ) ) ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest . mockStorageDomainValidatorWithSpace () ) . when ( command ) . createStorageDomainValidator () ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . acquireLock () ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID } , java.util.Collections . emptyList () ) ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private boolean checkDomain () { if ( ( ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand . getParameters () . getVmTemplateData () . getVmInit () ) != null ) && ( ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand . getParameters () . getVmTemplateData () . getVmInit () . getDomain () ) != null ) ) { return org.ovirt.engine.core.bll.UpdateVmTemplateCommand . isDomainLegal ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand . getParameters () . getVmTemplateData () . getVmInit () . getDomain () , org.ovirt.engine.core.bll.UpdateVmTemplateCommand . getReturnValue () . getValidationMessages () ) ; } return true ; }
@ org.junit.Before public void createCommand () { org.ovirt.engine.core.common.action.RunVmParams param = new org.ovirt.engine.core.common.action.RunVmParams ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > ( param ) ) ; mockIsoDomainListSyncronizer () ; mockSuccessfulRunVmValidator () ; mockSuccessfulSnapshotValidator () ; mockBackend () ; }
public static org.ovirt.engine.core.common.businessentities.DbUser persistAuthenticatedUser ( org.ovirt.engine.core.authentication.DirectoryUser directoryUser ) { org.ovirt.engine.core.dao.DbUserDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDbUserDao () ; org.ovirt.engine.core.common.businessentities.DbUser dbUser = dao . getByExternalId ( directoryUser . getDirectory () . getName () , directoryUser . getId () ) ; if ( dbUser != null ) { dao . update ( dbUser ) ; } else { dbUser = new org.ovirt.engine.core.common.businessentities.DbUser ( directoryUser ) ; dao . save ( dbUser ) ; } return dbUser ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; model . setDataCentersAndClusters ( model , dataCenters , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) ; initCdImage () ; getPoolModelBehaviorInitializedEvent () . raise ( this , EventArgs.Empty ) ; }
@ org.junit.Test public void canDoActionSucceeds ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , false ) ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( false ) ; mockHasVolumeOnServer ( false ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionSuccess ( command ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > filteredHosts = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( isHostAvailable ( host ) ) { filteredHosts . add ( host ) ; } } getHost () . setItems ( filteredHosts ) ; }
@ org.junit.Test public void testGuidListValues () { java.lang.String listValues = STRING_CONSTANT ; java.util.List < org.ovirt.engine.core.compat.Guid > stringList = org.ovirt.engine.core.utils.GuidUtils . getGuidListFromString ( listValues ) ; java.util.List < org.ovirt.engine.core.compat.Guid > expectedList = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > () ; expectedList . add ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; expectedList . add ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( expectedList , stringList ) ; }
private static void reportInvalidInterfacesForNetwork ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > interfaces , org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( interfaces . size () ) != NUMBER_CONSTANT ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vds . getId () ) ; logable . addCustomValue ( STRING_CONSTANT , network . getName () ) ; logable . addCustomValue ( STRING_CONSTANT , org.apache.commons.lang.StringUtils . join ( org.ovirt.engine.core.common.businessentities.Entities . objectNames ( interfaces ) , STRING_CONSTANT ) ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( logable , AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES ) ; } }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip () { com.google.gwt.safehtml.shared.SafeHtml tooltip = null ; if ( ( ( ! ( getModel () . isVmDown () ) ) && ( getModel () . isHotPlugAvailable () ) ) && ( ! ( getModel () . getIsDiskHotPlugSupported () ) ) ) { tooltip = com.google.gwt.safehtml.shared.SafeHtmlUtils . fromString ( org.ovirt.engine.ui.common.widget.uicommon.vm.VmDiskListModelTable.constants . diskHotPlugNotSupported () ) ; } return tooltip ; }
private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions () { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct () ; options . add ( VdsProperties.connectivityCheck , java.lang.Boolean . toString ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . isCheckConnectivity () ) ) ; if ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . isCheckConnectivity () ) { options . add ( VdsProperties.connectivityTimeout , org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand . getParameters () . getConectivityTimeout () ) ; } return options ; }
@ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( ( ( p . getUsageCpuPercent () ) + ( calcSpmCpuConsumption ( p ) ) ) >= highUtilization ) && ( ( p . getCpuOverCommitTimestamp () ) != null ) ) && ( ( ( getTime () . getTime () ) - ( p . getCpuOverCommitTimestamp () . getTime () ) ) >= ( java.util.concurrent.TimeUnit.MINUTES . toMillis ( cpuOverCommitDurationMinutes ) ) ) ) && ( ( p . getVmCount () ) > NUMBER_CONSTANT ) ; }
private void updateSpiceUsbAutoShare ( final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getSpiceUsbAutoShare ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice . setUsbAutoShare ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ) ; }
public static java.lang.String CreateImageFile ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { java.lang.String retVal = STRING_CONSTANT ; if ( ( image . getId () ) != null ) { retVal += image . getId () . toString () ; } else { retVal += org.ovirt.engine.core.compat.Guid.Empty ; } retVal += STRING_CONSTANT + ( image . getImageId () . toString () ) ; return retVal ; }
@ org.junit.Test ( expected = org.ovirt.engine.api.restapi.utils.MalformedIdException . class ) public void testBadGuidValidation ( ) throws java.lang.Exception { setUpGetEntityExpectations ( false ) ; org.ovirt.engine.api.model.Host host = new org.ovirt.engine.api.model.Host () ; host . setCluster ( new org.ovirt.engine.api.model.Cluster () ) ; host . getCluster () . setId ( STRING_CONSTANT ) ; resource . update ( host ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getEnableKsm () . getEntity () ) == null ) { return; } if ( getEnableKsm () . getEntity () ) { getKsmPolicyForNumaSelection () . setIsChangeable ( true ) ; } if ( ! ( getEnableKsm () . getEntity () ) ) { getKsmPolicyForNumaSelection () . setIsChangeable ( false ) ; } }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > activeHosts = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( VDSStatus.Up . equals ( host . getStatus () ) ) { activeHosts . add ( host ) ; } } getDefaultHost () . setItems ( activeHosts ) ; if ( activeHosts . isEmpty () ) { setIsHostTabVisible ( false ) ; } }
private void commonTestFlow ( boolean withDummyLun ) { org.mockito.Mockito . when ( getQueryParameters () . getVgId () ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VG_ID ) ; org.mockito.Mockito . when ( getQueryParameters () . getId () ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VDS_ID ) ; expectGetLunsForVg ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VG_ID , withDummyLun ) ; expectGetDeviceList () ; expectGetLunsMap () ; expectGetConnections () ; getQuery () . setInternalExecution ( true ) ; getQuery () . executeCommand () ; org.ovirt.engine.core.bll.CommandAssertUtils . checkSucceeded ( getQuery () , true ) ; checkReturnValue ( getQuery () ) ; }
@ java.lang.Override protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks () { if ( ( ( getParameters () . getVm () ) != null ) && ( ! ( org.apache.commons.lang.StringUtils . isBlank ( getParameters () . getVm () . getName () ) ) ) ) { return java.util.Collections . singletonMap ( getParameters () . getVm () . getName () , org.ovirt.engine.core.bll.LockMessagesMatchUtil . makeLockingPair ( LockingGroup.VM_NAME , VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ) ; } return null ; }
@ org.junit.Test public void versionDecreaseNoHostsOrNetwork () { createCommandWithOlderVersion () ; setupCpu () ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.StoragePoolDao . class ) ; org.mockito.Mockito . when ( storagePoolDao2 . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createStoragePoolLocalFS () ) ; org.mockito.Mockito . doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao () ; initAndAssertValidation ( true ) ; }
@ org.junit.Test public void testUpdateDoesntChangeExternalId () { org.ovirt.engine.core.common.businessentities.DbUser userBefore = dao . get ( existingUser . getId () ) ; dao . update ( userBefore ) ; org.ovirt.engine.core.common.businessentities.DbUser userAfter = dao . get ( existingUser . getId () ) ; org.junit.Assert . assertEquals ( userBefore . getExternalId () , userAfter . getExternalId () ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { org.ovirt.engine.core.bll.context.CompensationContext context = getCompensationContext () ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains ) { for ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map : getStoragePoolIsoMap ( domain ) ) { context . snapshotEntityStatus ( map ) ; updateStatus ( map , status ) ; } } getCompensationContext () . stateChanged () ; return null ; }
private void gatherNonRunningVms ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VM > dbVms ) { for ( org.ovirt.engine.core.common.businessentities.VM dbVm : dbVms . values () ) { if ( ! ( vdsmVms . containsKey ( dbVm . getId () ) ) ) { changedVms . add ( new org.ovirt.engine.core.common.utils.Pair ( dbVm , null ) ) ; } } }
@ org.junit.Test public void testValidateNoVM () { command . getParameters () . setId ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; command . getParameters () . setAction ( VmWatchdogAction.PAUSE ) ; command . getParameters () . setModel ( vmWatchdogType ) ; org.junit.Assert . assertFalse ( command . validate () ) ; }
public static void updateCurrentCd ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String currentCd ) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vm . getDynamicData () ; vmDynamic . setCurrentCd ( currentCd ) ; org.ovirt.engine.core.bll.Backend . getInstance () . getResourceManager () . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( vmDynamic ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.v3.types.V3SerialNumber adapt ( org.ovirt.engine.api.model.SerialNumber from ) { org.ovirt.engine.api.v3.types.V3SerialNumber to = new org.ovirt.engine.api.v3.types.V3SerialNumber () ; if ( from . isSetPolicy () ) { to . setPolicy ( from . getPolicy () . value () ) ; } if ( from . isSetValue () ) { to . setValue ( from . getValue () ) ; } return to ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; try { resource . get () ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ java.lang.Override public java.lang.String getTooltip ( IVdcQueryable quota ) { boolean quotaExceeded = false ; if ( quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage ) { quotaExceeded = getQuotaExceeded ( ( ( org.ovirt.engine.core.common.businessentities.QuotaStorage ) ( quota ) ) ) ; } else if ( quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup ) { quotaExceeded = getQuotaExceeded ( ( ( org.ovirt.engine.core.common.businessentities.QuotaVdsGroup ) ( quota ) ) ) ; } if ( quotaExceeded ) { return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaUtilizationStatusColumn.constants . quotaExceeded () ; } return null ; }
private void moveMacsOfUpdatedDataCenter ( org.ovirt.engine.core.compat.Guid oldMacPoolId , org.ovirt.engine.core.compat.Guid newMacPoolId , java.util.List < java.lang.String > vmInterfaceMacs ) { java.util.Objects . requireNonNull ( vmInterfaceMacs ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy sourcePool = poolPerDc . getPoolById ( oldMacPoolId ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy targetPool = poolPerDc . getPoolById ( newMacPoolId ) ; for ( java.lang.String mac : vmInterfaceMacs ) { sourcePool . freeMac ( mac ) ; targetPool . forceAddMac ( mac ) ; } }
@ java.lang.Override protected void toggleGhost ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel value , org.ovirt.engine.ui.webadmin.widget.vnicProfile.VnicProfileWidget widget , boolean becomingGhost ) { super . toggleGhost ( value , widget , becomingGhost ) ; widget.publicUseEditor . setEnabled ( ( ( ! becomingGhost ) && ( value . getPublicUse () . getIsChangable () ) ) ) ; widget.networkQoSEditor . setEnabled ( ( ( ! becomingGhost ) && ( value . getNetworkQoS () . getIsChangable () ) ) ) ; }
@ org.junit.Test public void cpuTypeSupportsVirtServiceForVirtCluster () { org.mockito.Mockito . when ( cluster . supportsVirtService () ) . thenReturn ( true ) ; org.mockito.Mockito . doReturn ( true ) . when ( validator ) . cpuExists () ; org.junit.Assert . assertThat ( validator . cpuTypeSupportsVirtService () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > () ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params . setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
@ java.lang.Override protected boolean canDoAction () { org.ovirt.engine.core.common.businessentities.AuditLog event = org.ovirt.engine.core.bll.RemoveExternalEventCommand . getAuditLogDao () . get ( org.ovirt.engine.core.bll.RemoveExternalEventCommand . getParameters () . getId () ) ; if ( event == null ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_NOT_FOUND ) ; } if ( org.ovirt.engine.core.bll.RemoveExternalEventCommand.OVIRT . equalsIgnoreCase ( event . getOrigin () ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN ) ; } return true ; }
void initMemorySizeLabels () { this . physicalMemory = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Integer > ( constants ) ; this . usedMemory = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Integer > ( constants ) ; this . freeMemory = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Integer > ( constants ) ; this . swapTotal = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Long > ( constants ) ; this . usedSwap = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Long > ( constants ) ; this . swapFree = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Long > ( constants ) ; this . maxSchedulingMemory = new org.ovirt.engine.ui.common.widget.label.MemorySizeLabel < java.lang.Float > ( constants ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createNotVirtIODisk () { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage () ; disk . setImageId ( diskImageGuid ) ; disk . setDiskInterface ( DiskInterface.IDE ) ; disk . setactive ( true ) ; org.mockito.Mockito . doReturn ( diskDao ) . when ( command ) . getDiskDao () ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( disk ) ; return disk ; }
@ java.lang.Override protected void beforeCommandExecuted ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . beforeCommandExecuted ( command ) ; if ( command == ( model . getDefaultCommand () ) ) { removeListeners ( model ) ; getView () . flushToPrivateModel () ; consoleOptionsPersister . storeToLocalStorage ( model . getModel () ) ; org.ovirt.engine.ui.common.presenter.popup.ConsoleModelChangedEvent . fire ( getEventBus () , model . getModel () ) ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { if ( returnValue != null ) { java.util.Map < java.lang.String , java.lang.String > customPropertiesList = returnValue . getReturnValue () ; getCustomPropertySheet () . setKeyValueMap ( customPropertiesList ) ; getCustomPropertySheet () . setIsChangeable ( ( ! ( customPropertiesList . isEmpty () ) ) ) ; initCustomProperties () ; } stopProgress () ; }
private void initMockNetworkAttachmentIpConfigurationValidator ( org.ovirt.engine.core.common.errors.EngineMessage engineMessage , java.util.Collection < java.lang.String > replacements ) { org.ovirt.engine.core.bll.ValidationResult validationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , replacements ) ; org.mockito.Mockito . when ( mockNetworkAttachmentIpConfigurationValidator . validateNetworkAttachmentIpConfiguration ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( validationResult ) ; }
public void getAllDataCenterNetworks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > () ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNetworksByDataCenterId , params , aQuery ) ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.VmConsoles > getAutoConnectableConsoles () { java.util.List < org.ovirt.engine.ui.uicommonweb.models.VmConsoles > autoConnectableConsoles = new java.util.LinkedList < org.ovirt.engine.ui.uicommonweb.models.VmConsoles > () ; for ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel upItem : items ) { if ( ( ! ( upItem . isPool () ) ) && ( upItem . getVmConsoles () . canConnectToConsole () ) ) { autoConnectableConsoles . add ( upItem . getVmConsoles () ) ; } } return autoConnectableConsoles ; }
@ java.lang.Override protected org.ovirt.engine.api.model.NIC populate ( org.ovirt.engine.api.model.NIC model , org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity ) { org.ovirt.engine.core.common.businessentities.Network network = findNetwork ( model ) ; if ( network != null ) { model . getNetwork () . setId ( network . getId () . toString () ) ; model . getNetwork () . setName ( null ) ; } return model ; }
private void doProcessRequest ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { java.lang.String sessionID = request . getParameter ( SESSION_ID_PARAMETER ) ; if ( runQuery ( response , sessionID ) ) { response . setStatus ( SUCCESS_CODE ) ; org.ovirt.engine.core.services.GetSessionUser.log . debug ( STRING_CONSTANT , sessionID ) ; } else { response . setStatus ( FAILED_CODE ) ; org.ovirt.engine.core.services.GetSessionUser.log . debug ( STRING_CONSTANT , sessionID ) ; } }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.dao.DbGroupDAO dao = org.ovirt.engine.core.bll.AddGroupCommand . getAdGroupDAO () ; org.ovirt.engine.core.common.businessentities.DbGroup groupToAdd = org.ovirt.engine.core.bll.AddGroupCommand . getParameters () . getGroupToAdd () ; org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = dao . getByExternalId ( groupToAdd . getDomain () , groupToAdd . getExternalId () ) ; if ( dbGroup == null ) { dao . save ( groupToAdd ) ; } else { dao . update ( dbGroup ) ; groupToAdd = dbGroup ; } setActionReturnValue ( groupToAdd . getId () ) ; org.ovirt.engine.core.bll.AddGroupCommand . setSucceeded ( true ) ; }
@ java.lang.Override protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > buildFromOVFs ( java.util.List < java.lang.String > ovfList ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = new java.util.ArrayList <> () ; for ( java.lang.String ovf : ovfList ) { try { if ( ! ( ovfHelper . isOvfTemplate ( ovf ) ) ) { vms . add ( ovfHelper . readVmFromOvf ( ovf ) ) ; } } catch ( org.ovirt.engine.core.utils.ovf.OvfReaderException ex ) { auditLogOvfLoadError ( ex . getName () , ex . getMessage () ) ; } } return vms ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase Login ( org.ovirt.engine.core.common.action.LoginUserParameters parameters ) { switch ( parameters . getActionType () ) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase < > command = org.ovirt.engine.core.bll.CommandsFactory . CreateCommand ( parameters . getActionType () , parameters ) ; return command . executeAction () ; default: return getErrorCommandReturnValue ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; } }
private org.ovirt.engine.core.dao.ClusterDao mockCluster () { org.ovirt.engine.core.dao.ClusterDao mock = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.ClusterDao . class ) ; cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setEmulatedMachine ( STRING_CONSTANT ) ; cluster . getRequiredRngSources () . add ( VmRngDevice.Source.RANDOM ) ; org.mockito.Mockito . when ( mock . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( cluster ) ; return mock ; }
@ org.junit.Test public void testEchoStdout ( ) throws java.lang.Exception { java.lang.String content = STRING_CONSTANT ; try ( final java.io.InputStream stdin = new java.io.ByteArrayInputStream ( content . getBytes ( STRING_CONSTANT ) ) ; final java.io.ByteArrayOutputStream stdout = new java.io.ByteArrayOutputStream () ; final java.io.ByteArrayOutputStream stderr = new java.io.ByteArrayOutputStream () ) { client . executeCommand ( STRING_CONSTANT , stdin , stdout , stderr ) ; org.junit.Assert . assertEquals ( content , new java.lang.String ( stdout . toByteArray () , STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , stderr . size () ) ; } }
@ java.lang.Override public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource () { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > () { @ java.lang.Override public org.ovirt.engine.api.model.Disk lookupEntity ( org.ovirt.engine.core.compat.Guid guid ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection . lookupEntity ( guid ) ; } } ; org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.DiskStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.Disk , org.ovirt.engine.api.model.Disk > ( entityType , guid , query ) ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > perms = setUpPermissions () ; setUpEntityQueryExpectations ( queryType , queryParams . getClass () , new java.lang.String [] { queryParameterName } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , perms , failure ) ; control . replay () ; }
@ java.lang.Override protected void buildModel ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.BuilderExecutionFinished < org.ovirt.engine.core.common.businessentities.VmBase , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel > callback ) { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor ( callback , new org.ovirt.engine.ui.uicommonweb.builders.vm.NameAndDescriptionVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommentVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyVmBaseToUnitBuilder () . withEveryFeatureSupported () , new org.ovirt.engine.ui.uicommonweb.builders.vm.CoreVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.KernelParamsVmBaseToUnitBuilder () , new org.ovirt.engine.ui.uicommonweb.builders.vm.SerialNumberPolicyVmBaseToUnitBuilder () . withEveryFeatureSupported () ) . withEveryFeatureSupported () ) ) . build ( vmBase , getModel () ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
@ org.junit.Test public void validateFailsForCluster () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters () , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; mockIsGlusterEnabled ( false ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; mockIsGlusterEnabled ( true ) ; mockCompatibilityVersion ( Version.v3_5 ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void testDisksUsagesWithEmptyEntry () { java.lang.Object [] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . initDisksUsageData () ; disksUsages [ NUMBER_CONSTANT ] = new java.util.HashMap < java.lang.String , java.lang.String > () ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDisksUsageInXmlRpc ( disksUsages ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . getVmStatistics () , disksUsages , xml ) ; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.bll.CommandBase command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters ( asyncTaskCreationInfo , getAsyncTask ( taskId , command , asyncTaskCreationInfo , parentCommand ) ) ; p . setEntityInfo ( command . getParameters () . getEntityInfo () ) ; return createTask ( internalGetTaskType ( command ) , p ) ; }
@ org.junit.Test public void vdsNameVds () { b . setVdsName ( null ) ; final org.ovirt.engine.core.common.businessentities.VDS v = new org.ovirt.engine.core.common.businessentities.VDS () ; v . setVdsName ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; b . setVds ( v ) ; final java.lang.String s = b . getVdsName () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , s ) ; }
@ org.junit.Test public void mapBackendModel () { for ( org.ovirt.engine.core.common.businessentities.VmWatchdogType type : org.ovirt.engine.core.common.businessentities.VmWatchdogType . values () ) { org.ovirt.engine.api.model.WatchdogModel model = org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( type ) ; org.junit.Assert . assertNotNull ( model ) ; org.junit.Assert . assertEquals ( model . name () . toLowerCase () , type . name () . toLowerCase () ) ; } }
protected org.ovirt.engine.core.authentication.DirectoryGroup getAdGroup () { if ( ( ( mGroup ) == null ) && ( ! ( getGroupId () . equals ( Guid.Empty ) ) ) ) { org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDbGroupDao () . get ( getGroupId () ) ; org.ovirt.engine.core.authentication.Directory directory = org.ovirt.engine.core.authentication.DirectoryManager . getInstance () . getDirectory ( dbGroup . getDomain () ) ; if ( directory != null ) { mGroup = directory . findGroup ( dbGroup . getExternalId () ) ; } } return mGroup ; }
@ org.junit.Test public void failWhenStartupTimeoutHasNotPassed () { java.util.List < java.lang.String > messages = new java.util.LinkedList <> () ; org.mockito.Mockito . when ( backend . getStartedAt () ) . thenReturn ( new org.ovirt.engine.core.compat.DateTime ( new java.util.Date () ) ) ; boolean result = validator . isStartupTimeoutPassed ( messages ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , messages . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , messages . get ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertFalse ( result ) ; }
public void doTestFence ( org.ovirt.engine.api.model.FenceType fenceType , org.ovirt.engine.core.common.action.VdcActionType actionType ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( actionType , org.ovirt.engine.core.common.action.FenceVdsActionParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action () ; action . setFenceType ( fenceType . value () ) ; verifyActionResponse ( resource . fence ( action ) ) ; }
private static java.lang.String encrypt ( java.lang.String source , java.security.cert.Certificate cert ) throws java.io.UnsupportedEncodingException , java.security.GeneralSecurityException { javax.crypto.Cipher rsa = javax.crypto.Cipher . getInstance ( org.ovirt.engine.core.engineencryptutils.EncryptionUtils.algo ) ; rsa . init ( javax.crypto.Cipher.ENCRYPT_MODE , cert . getPublicKey () ) ; return org.apache.commons.codec.binary.Base64 . encodeBase64String ( rsa . doFinal ( source . trim () . getBytes ( STRING_CONSTANT ) ) ) ; }
private boolean isCopyCommandAvailable () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks = ( ( getSelectedItems () ) != null ) ? getSelectedItems () : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > () ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disks ) { if ( ( ( disk . getImageStatus () ) != ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ) ) || ( ( disk . getDiskStorageType () ) != ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) ) { return false ; } } return true ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > GetNicTypeList ( org.ovirt.engine.core.common.businessentities.VmOsType osType , boolean hasDualmode ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > ( java.util.Arrays . asList ( org.ovirt.engine.core.common.businessentities.VmInterfaceType . values () ) ) ; list . remove ( VmInterfaceType.rtl8139_pv ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . IsWindowsOsType ( osType ) ) { if ( ( osType == ( org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP ) ) && hasDualmode ) { list . add ( VmInterfaceType.rtl8139_pv ) ; } } return list ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot () ; java.lang.String memoryVolume = ( ( activeSnapshot != null ) && ( ! ( org.ovirt.engine.core.bll.ImportVmCommand . getParameters () . isImportAsNewEntity () ) ) ) ? activeSnapshot . getMemoryVolume () : org.apache.commons.lang.StringUtils.EMPTY ; return snapshotsManager . addActiveSnapshot ( snapshotId , getVm () , memoryVolume , org.ovirt.engine.core.bll.ImportVmCommand . getCompensationContext () ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Provider > convert ( java.lang.Object returnValue ) { if ( returnValue == null ) { return new java.util.ArrayList <> () ; } java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = org.ovirt.engine.ui.uicommonweb.Linq . filterProvidersByProvidedType ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) , providedEntity ) ; java.util.Collections . sort ( providers , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return providers ; }
private void useAlternateCredentials_EntityChanged () { boolean useAlternateCredentials = getUseAlternateCredentials () . getEntity () ; getSysPrepUserName () . setIsChangable ( getUseAlternateCredentials () . getEntity () ) ; getSysPrepPassword () . setIsChangable ( getUseAlternateCredentials () . getEntity () ) ; getSysPrepUserName () . setEntity ( ( useAlternateCredentials ? STRING_CONSTANT : null ) ) ; getSysPrepPassword () . setEntity ( ( useAlternateCredentials ? STRING_CONSTANT : null ) ) ; }
@ java.lang.Override @ org.junit.Test public void canDoActionFailedWrongPlugStatus ( ) throws java.lang.Exception { mockVmStatusUp () ; cretaeDiskWrongPlug ( false ) ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED . toString () ) ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [] names , java.lang.Object [] values , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses ) { java.lang.String uri = ( ( ( STRING_CONSTANT + ( org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID ) ) + STRING_CONSTANT ) + ( org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID ) ) + STRING_CONSTANT ; return setUpActionExpectations ( task , clz , names , values , true , true , null , asyncTasks , asyncStatuses , null , null , uri , true ) ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.core.common.businessentities.HasSerialNumberPolicy . class , to = org.ovirt.engine.api.model.SerialNumber . class ) public static org.ovirt.engine.api.model.SerialNumber map ( org.ovirt.engine.core.common.businessentities.HasSerialNumberPolicy entity , org.ovirt.engine.api.model.SerialNumber template ) { if ( template == null ) { template = new org.ovirt.engine.api.model.SerialNumber () ; } template . setPolicy ( org.ovirt.engine.api.restapi.types.SerialNumberMapper . map ( entity . getSerialNumberPolicy () , null ) ) ; template . setValue ( entity . getCustomSerialNumber () ) ; return template ; }
public static synchronized java.lang.String [] getLinksToExclude ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { return org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource . isIsoDomain ( storageDomain ) ? new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource . isExportDomain ( storageDomain ) ? new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource . isImageDomain ( storageDomain ) ? new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } : new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetDomainExpectations ( StorageType.NFS , false ) ; control . replay () ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest . getModel () ; model . setProvisionedSize ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
private void removeVmStatelessImages () { if ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getSnapshotDAO () . exists ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getVmId () , SnapshotType.STATELESS ) ) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log . infoFormat ( STRING_CONSTANT , org.ovirt.engine.core.bll.ProcessDownVmCommand . getVmId () ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getVmId () ) , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContextForTasks ( org.ovirt.engine.core.bll.ProcessDownVmCommand . getContext () , org.ovirt.engine.core.bll.ProcessDownVmCommand . getLock () ) ) ; } }
protected void handleCopyResult ( org.ovirt.engine.core.common.businessentities.DiskImage copiedDiskImage , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { if ( ! ( result . getSucceeded () ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError ) ; } else { org.ovirt.engine.core.bll.ImagesHandler . addDiskImageWithNoVmDevice ( copiedDiskImage ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand . getTaskIdList () . addAll ( result . getInternalTaskIdList () ) ; newDiskImages . add ( copiedDiskImage ) ; } }
private boolean hostCompliesWithClusterEmulationMode ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup ) { java.lang.String clusterEmulatedMachine = vdsGroup . getEmulatedMachine () ; if ( ( clusterEmulatedMachine == null ) || ( clusterEmulatedMachine . isEmpty () ) ) { return hostEmulationModeMatchesTheConfigValues ( vds ) ; } else { return ( vds . getSupportedEmulatedMachines () ) != null ? java.util.Arrays . asList ( vds . getSupportedEmulatedMachines () . split ( STRING_CONSTANT ) ) . contains ( clusterEmulatedMachine ) : false ; } }
@ org.junit.Test public void validateFailsForNoStorageDevice () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . < org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > emptyList () ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void encodeWhenNonAsciiDiskDescriptionIsTruncated ( ) throws java.io.IOException { disk . setDiskAlias ( STRING_CONSTANT ) ; java.lang.String nonAsciiDiskDescription = STRING_CONSTANT ; disk . setDiskDescription ( nonAsciiDiskDescription ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( STRING_CONSTANT ) ) , generateDiskDescriptionJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . encodeString ( nonAsciiDiskDescription . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ) , generateEncodingJsonEntry ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( windowPropertyNames . contains ( propName ) ) { handleWindowModelChange ( source , windowPopup , false , propName ) ; } else if ( confirmWindowPropertyNames . contains ( propName ) ) { handleWindowModelChange ( source , confirmWindowPopup , true , propName ) ; } }
private void bindConsoles () { bind ( org.ovirt.engine.ui.uicommonweb.models.vms.INoVnc . class ) . to ( org.ovirt.engine.ui.common.uicommon.NoVncImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.IVncNative . class ) . to ( org.ovirt.engine.ui.common.uicommon.VncNativeImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.ISpiceNative . class ) . to ( org.ovirt.engine.ui.common.uicommon.SpiceNativeImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.IRdpNative . class ) . to ( org.ovirt.engine.ui.common.uicommon.RdpNativeImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.IRdpPlugin . class ) . to ( org.ovirt.engine.ui.common.uicommon.RdpPluginImpl . class ) ; }
public void log ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { if ( ! ( logType . shouldBeLogged () ) ) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator ( auditLogable , logType ) ; if ( eventFloodRegulator . isLegal () ) { saveToDb ( auditLogable , logType , loggerString ) ; } }
@ javax.annotation.PostConstruct private void initialize () { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log . info ( STRING_CONSTANT , getClass () . getSimpleName () ) ; java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config . < java.lang.Integer > getValue ( ConfigValues.BackupCheckPeriodInHours ) ; if ( backupCheckPeriodInHours > NUMBER_CONSTANT ) { org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl . getInstance () . scheduleAFixedDelayJob ( this , STRING_CONSTANT , new java.lang.Class [] {} , new java.lang.Object [] {} , backupCheckPeriodInHours , backupCheckPeriodInHours , java.util.concurrent.TimeUnit.HOURS ) ; org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log . info ( STRING_CONSTANT , getClass () . getSimpleName () ) ; } }
@ org.junit.Test public void testIllegalImageReturnedByQuery ( ) throws java.lang.Exception { existingVm . getDiskMap () . put ( existingDiskImage . getId () , existingDiskImage ) ; existingVm . getImages () . add ( existingDiskImage ) ; snapshotVmConfigurationHelper . markImagesIllegalIfNotInDb ( existingVm , existingSnapshotId ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk diskImage : existingVm . getDiskMap () . values () ) { org.junit.Assert . assertEquals ( ImageStatus.ILLEGAL , ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( diskImage ) ) . getImageStatus () ) ; } }
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getImages ( org.ovirt.engine.core.compat.Guid vmId , java.util.Collection < ? extends org.ovirt.engine.core.common.businessentities.Disk > diskImageList ) { if ( diskImageList == null ) { return org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskDao () . getAllForVm ( vmId ) , true , false ) ; } return org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( diskImageList , true , false ) ; }
@ org.junit.Test public void testGetNotFound ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , true ) ; control . replay () ; try { resource . get () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void revertToActiveSnapshot ( org.ovirt.engine.core.compat.Guid createdSnapshotId ) { if ( createdSnapshotId != null ) { org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getSnapshotDao () . remove ( createdSnapshotId ) ; org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getSnapshotDao () . updateId ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getSnapshotDao () . getId ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVmId () , SnapshotType.ACTIVE ) , createdSnapshotId ) ; } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . setSucceeded ( false ) ; }
@ org.junit.Test public void clusterWithNoCpu () { createCommandWithNoCpuName () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; org.mockito.Mockito . when ( glusterVolumeDao . getByClusterId ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( new java.util.ArrayList <> () ) ; allQueriesForVms () ; initAndAssertValidation ( true ) ; }
private void saveToDb ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { org.ovirt.engine.core.common.AuditLogSeverity severity = logType . getSeverity () ; org.ovirt.engine.core.common.businessentities.AuditLog auditLog = createAuditLog ( auditLogable , logType , loggerString , severity ) ; if ( auditLog == null ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . warn ( STRING_CONSTANT ) ; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . setPropertiesFromAuditLogableBase ( auditLogable , auditLog ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . getDbFacadeInstance () . getAuditLogDao () . save ( auditLog ) ; logMessage ( severity , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . getMessageToLog ( loggerString , auditLog ) ) ; } }
@ org.junit.Test public void validateSucceedsWithStopActionTypeAndClusterIdAndServerId () { cmd . getParameters () . setActionType ( GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) ; cmd . getParameters () . setClusterId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cmd . getParameters () . setServerId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cmd . setClusterId ( cmd . getParameters () . getClusterId () ) ; cmd . setVdsId ( cmd . getParameters () . getServerId () ) ; prepareMocks () ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
private void doDataCenterSearch () { final org.ovirt.engine.ui.frontend.AsyncQuery dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; dcQuery . setModel ( this ) ; dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel ) ( model ) ) ; systemTreeModel . setDataCenters ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; doNetworksSearch () ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDataCenterList ( dcQuery ) ; }
private boolean canPerformQuotaValidation () { if ( ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) == ( _oldDisk . getDiskStorageType () ) ) { if ( ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( _oldDisk ) ) . getQuotaId () . equals ( getQuotaId () ) ) ) { return true ; } } return false ; }
@ org.junit.Test public void test64BitMemoryExceedsLimit () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setClusterCompatibilityVersion ( Version.v4_0 ) ; vm . setVmMemSizeMb ( ( ( org.ovirt.engine.core.bll.validator.RunVmValidatorTest.MEMORY_LIMIT_64_BIT ) + NUMBER_CONSTANT ) ) ; vm . setVmOs ( org.ovirt.engine.core.bll.validator.RunVmValidatorTest._64_BIT_OS ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateMemorySize ( vm ) , false , EngineMessage.ACTION_TYPE_FAILED_MEMORY_EXCEEDS_SUPPORTED_LIMIT ) ; }
private org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase getAddParameters ( org.ovirt.engine.api.model.Agent agent ) { org.ovirt.engine.api.model.Host host = new org.ovirt.engine.api.model.Host () ; host . setId ( hostId . toString () ) ; agent . setHost ( host ) ; org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase params = new org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase () ; params . setAgent ( map ( agent , null ) ) ; return params ; }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderDisk > cinderDisks , org.ovirt.engine.core.compat.Guid newSnapshotId ) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters () ; createParams . setCinderDisks ( cinderDisks ) ; createParams . setVmSnapshotId ( newSnapshotId ) ; createParams . setParentHasTasks ( ( ! ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand . getReturnValue () . getVdsmTaskIdList () . isEmpty () ) ) ) ; return withRootCommandInfo ( createParams ) ; }
private void retrieveDefaultSpmPriority () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDefaultSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmDefaultPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; updateSpmPriorityValues () ; updateSpmPriority () ; } } ) ) ; }
@ java.lang.Override protected void executeQueryCommand () { final java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > consoleDevices = getVmDeviceDAO () . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.GetConsoleDevicesQuery . getParameters () . getId () , VmDeviceGeneralType.CONSOLE ) ; java.util.List < java.lang.String > result = new java.util.ArrayList ( consoleDevices . size () ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice v : consoleDevices ) { result . add ( v . getDevice () ) ; } org.ovirt.engine.core.bll.GetConsoleDevicesQuery . getQueryReturnValue () . setReturnValue ( result ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVmPoolDao () ; existingVmPool = dao . get ( org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_POOL_ID ) ; deletableVmPool = dao . get ( org.ovirt.engine.core.dao.VmPoolDAOTest.DELETABLE_VM_POOL_ID ) ; newVmPool = new org.ovirt.engine.core.common.businessentities.vm_pools () ; newVmPool . setvm_pool_name ( STRING_CONSTANT ) ; newVmPool . setvm_pool_description ( STRING_CONSTANT ) ; newVmPool . setvds_group_id ( org.ovirt.engine.core.dao.VmPoolDAOTest.VDS_GROUP_ID ) ; existingVmPoolMap = dao . getVmPoolMapByVmGuid ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; newVmPoolMap = new org.ovirt.engine.core.common.businessentities.VmPoolMap ( org.ovirt.engine.core.dao.VmPoolDAOTest.FREE_VM_ID , existingVmPool . getvm_pool_id () ) ; }
private org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties mapAdditionalProperties ( java.sql.ResultSet rs , org.ovirt.engine.core.common.businessentities.Provider < > entity ) throws java.sql.SQLException { switch ( entity . getType () ) { case OPENSTACK_NETWORK : org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties () ; properties . setTenantName ( rs . getString ( STRING_CONSTANT ) ) ; properties . setPluginType ( rs . getString ( STRING_CONSTANT ) ) ; return properties ; default: return null ; } }
public org.ovirt.engine.core.bll.ValidationResult verifyDisks ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imageList , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.compat.Guid > imageToDestinationDomainMap ) { if ( ( ! ( params . isImportAsNewEntity () ) ) && ( ! ( params . isImagesExistOnTargetStorageDomain () ) ) ) { return new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( imageList ) . diskImagesOnStorage ( imageToDestinationDomainMap , params . getStoragePoolId () ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , getIscsiBondContainingStorageConnection () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetStorageServerConnectionById , org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondStorageConnectionResourceTest.STORAGE_CONNECTION_ID . toString () } , getEntity ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.StorageConnection model = resource . get () ; assertEquals ( GUIDS [ NUMBER_CONSTANT ] . toString () , model . getId () ) ; verifyLinks ( model ) ; }
@ org.junit.Test public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ; org.ovirt.engine.core.bll.ValidationResult slavesValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils . getVariableAssignmentString ( engineMessage , STRING_CONSTANT ) , org.ovirt.engine.core.utils.ReplacementUtils . createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_NAME , STRING_CONSTANT ) ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond () ; bond . setSlaves ( java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , slavesValidationResult , slavesValidationResult ) ; }
@ org.junit.Test public void testFirstMatch () { java.util.List < java.lang.String > source = java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( source , STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( source , STRING_CONSTANT , STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( null , org.ovirt.engine.core.common.utils.ListUtils . firstMatch ( source , null ) ) ; }
@ org.junit.Test public void testCreateManagementNetworkIfRequiredFailedOnSetupNetworks () { host . setActiveNic ( org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME ) ; final org.ovirt.engine.core.bll.network.NetworkConfigurator spiedUnderTest = org.mockito.Mockito . spy ( underTest ) ; org.mockito.Mockito . doReturn ( backend ) . when ( spiedUnderTest ) . getBackend () ; org.mockito.Mockito . when ( backend . runInternalAction ( org.mockito.ArgumentMatchers . eq ( ActionType.HostSetupNetworks ) , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( createReturnValue ( false ) ) ; verifyAuditLoggableBaseFilledProperly ( spiedUnderTest , AuditLogType.SETUP_NETWORK_FAILED_FOR_MANAGEMENT_NETWORK_CONFIGURATION ) ; }
private void validateReplacementsDoNotContainUnexpectedItems ( java.util.Collection < java.lang.String > replacements , java.util.List < java.lang.Object > items ) { for ( java.lang.String replacement : replacements ) { for ( int i = ReplacementUtils.DEFAULT_MAX_NUMBER_OF_PRINTED_ITEMS ; i < ( items . size () ) ; i ++ ) { org.junit.Assert . assertFalse ( replacement . contains ( buildPropertyValue ( i ) ) ) ; } } }
@ org.junit.Test public void getVdsNullRun () { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( null ) ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b . setVds ( vds ) ; b . setVdsId ( vdsId ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertNull ( v ) ; }
public org.ovirt.engine.core.common.businessentities.StoragePool getStoragePool () { if ( ( ( ( _storagePool ) == null ) && ( ( getStoragePoolId () ) != null ) ) && ( ! ( Guid.Empty . equals ( getStoragePoolId () ) ) ) ) { _storagePool = getStoragePoolDAO () . get ( getStoragePoolId () ) ; } return _storagePool ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { ( ( org.ovirt.engine.ui.webadmin.section.main.presenter.popup.cluster.NewClusterNetworkPopupPresenterWidget.ViewDef ) ( getView () ) ) . setDataCenterName ( ( ( org.ovirt.engine.core.common.businessentities.storage_pool ) ( model . getDataCenters () . getSelectedItem () ) ) . getname () ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVm ( org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > spyVmCommand ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setStatus ( VMStatus.Down ) ; org.mockito.Mockito . doReturn ( vmDAO ) . when ( command ) . getVmDAO () ; org.mockito.Mockito . when ( vmDAO . get ( command . getParameters () . getVmId () ) ) . thenReturn ( vm ) ; org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.businessentities.VDSGroup () ) . when ( command ) . getVdsGroup () ; return vm ; }
public org.ovirt.engine.core.compat.Guid getStorageDomainIdForVmMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList ) { if ( ( cachedStorageDomainId . equals ( Guid.Empty ) ) && ( ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVm () ) != null ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler . getInstance () . findStorageDomainForMemory ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVm () . getStoragePoolId () , memoryDisksList , getDisksList () , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand . getVm () ) ; if ( storageDomain != null ) { cachedStorageDomainId = storageDomain . getId () ; } } return cachedStorageDomainId ; }
private void addInterfaceDeviceToDb () { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils . addNetworkInterfaceDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getInterface () . getId () , org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getParameters () . getVmId () ) , org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getInterface () . isPlugged () ) ; org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand . getCompensationContext () . snapshotNewEntity ( vmDevice ) ; }
protected void updateActionAvailability () { int numOfSelectedItems = ( ( getSelectedItems () ) != null ) ? getSelectedItems () . size () : NUMBER_CONSTANT ; getEditInstanceTypeCommand () . setIsExecutionAllowed ( ( numOfSelectedItems == NUMBER_CONSTANT ) ) ; getDeleteInstanceTypeCommand () . setIsExecutionAllowed ( ( numOfSelectedItems == NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testUpdate () { dao . save ( vnicProfile ) ; vnicProfile . setPortMirroring ( true ) ; vnicProfile . setPassthrough ( true ) ; dao . update ( vnicProfile ) ; org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao . get ( vnicProfile . getId () ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( vnicProfile . getId () , result . getId () ) ; org.junit.Assert . assertTrue ( result . isPortMirroring () ) ; org.junit.Assert . assertTrue ( result . isPassthrough () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap entity = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap () ; entity . setstorage_id ( org.ovirt.engine.core.compat.Guid . createGuidFromString ( rs . getString ( STRING_CONSTANT ) ) ) ; entity . setstorage_pool_id ( org.ovirt.engine.core.compat.NGuid . createGuidFromString ( rs . getString ( STRING_CONSTANT ) ) ) ; entity . setstatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus . forValue ( rs . getInt ( STRING_CONSTANT ) ) ) ; return entity ; }
@ java.lang.Override protected void postSaveAction ( boolean succeeded ) { if ( succeeded ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qosItems = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ( getQos () . getItems () ) ; qosItems . add ( NUMBER_CONSTANT , networkQoS ) ; getQos () . setItems ( qosItems ) ; getQos () . setSelectedItem ( networkQoS ) ; } super . postSaveAction ( succeeded ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Template model = getRestModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
@ org.junit.Test public void unmanagedVlanAddedToNic () { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( STRING_CONSTANT , null ) ; mockExistingIfaces ( nic ) ; java.lang.String networkName = STRING_CONSTANT ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic , NUMBER_CONSTANT , networkName ) ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER , networkName ) ; }
private java.util.List < org.ovirt.engine.api.model.Network > getNetworks () { org.ovirt.engine.core.compat.Guid dataCenterId = getEntity ( org.ovirt.engine.core.common.businessentities.Cluster . class , VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , null ) . getStoragePoolId () ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; return getBackendCollection ( VdcQueryType.GetAllNetworks , params ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsFromExportDomain () { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters p = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getParameters () . getStoragePoolId () , getParameters () . getSourceDomainId () ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetVal = runInternalQuery ( VdcQueryType.GetVmsFromExportDomain , p ) ; return qRetVal . getSucceeded () ? qRetVal . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue () : null ; }
private void _writeFile ( java.io.File file , java.lang.String content , boolean executable ) throws java.io.IOException { java.io.File f = file . getParentFile () ; if ( f == null ) { throw new java.io.IOException ( ( STRING_CONSTANT + f ) ) ; } if ( ! ( f . mkdirs () ) ) {} try ( java.io.OutputStream os = new java.io.FileOutputStream ( file ) ) { os . write ( content . getBytes ( STRING_CONSTANT ) ) ; file . setExecutable ( executable ) ; } }
public void updateItemsAvailability () { if ( ! ( org.ovirt.engine.ui.frontend.Frontend . getInstance () . getQueryStartedEvent () . getListeners () . contains ( this ) ) ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . getQueryStartedEvent () . addListener ( this ) ; } if ( ! ( org.ovirt.engine.ui.frontend.Frontend . getInstance () . getQueryCompleteEvent () . getListeners () . contains ( this ) ) ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . getQueryCompleteEvent () . addListener ( this ) ; } }
@ java.lang.SuppressWarnings ( value = { STRING_CONSTANT , STRING_CONSTANT } ) @ org.junit.Test public void hostProviderTypeDoesNotMatch () { org.mockito.Mockito . when ( host . getHostProviderId () ) . thenReturn ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.common.businessentities.Provider provider = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.Provider . class ) ; org.mockito.Mockito . when ( provider . getType () ) . thenReturn ( ProviderType.OPENSTACK_IMAGE ) ; org.mockito.Mockito . when ( providerDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( provider ) ; org.junit.Assert . assertThat ( validator . hostProviderTypeMatches () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_HOST_PROVIDER_TYPE_MISMATCH ) ) ; }
public void getRpmVersion ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion ) ; tempVar . setVersion ( getDefaultConfigurationVersion () ) ; getConfigFromCache ( tempVar , aQuery ) ; }
public void onFailed () { updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; log . debug ( STRING_CONSTANT , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getCommandId () ) ; imageTransferDao . remove ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getCommandId () ) ; endWithFailure () ; log . error ( STRING_CONSTANT , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getParameters () . getImageId () , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand . getCommandId () ) ; }
@ org.junit.Test public void dataCenterVersionMatches () { org.mockito.Mockito . when ( cluster . getStoragePoolId () ) . thenReturn ( org.mockito.Mockito . mock ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.StoragePool . class ) ; org.mockito.Mockito . when ( dataCenterDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( dataCenter ) ; org.junit.Assert . assertThat ( validator . dataCenterVersionMismatch () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
public void saveNewSanStorage () { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel ) ( getWindow () ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel ) ( model . getSelectedItem () ) ) ; java.util.ArrayList < java.lang.String > usedLunsMessages = sanStorageModel . getUsedLunsMessages () ; if ( usedLunsMessages . isEmpty () ) { onSaveSanStorage () ; } else { forceCreationWarning ( usedLunsMessages ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification ( org.ovirt.engine.core.common.businessentities.network.Bond bond ) { org.ovirt.engine.core.compat.Guid nicId = bond . getId () ; java.lang.String nicName = bond . getName () ; org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY ; return hostSetupNetworksValidatorHelper . validateCoherentIdentification ( nicName , nicId , nicName , message , existingInterfacesMap ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { boolean hasIscsiStorage = false ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connections ) { if ( ( connection . getStorageType () ) == ( org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI ) ) { hasIscsiStorage = true ; break; } } iscsiBondListModel . setIsAvailable ( hasIscsiStorage ) ; }
public org.ovirt.engine.core.common.businessentities.storage.VolumeClassification deleteVolumeByClassificationType ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderVolumeType = cinderDisk . getVolumeClassification () ; if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { deleteVolume ( cinderDisk ) ; } else if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { deleteSnapshot ( cinderDisk . getImageId () ) ; } org.ovirt.engine.core.bll.storage.CinderBroker.log . error ( STRING_CONSTANT , cinderDisk . getDiskAlias () , cinderDisk . getImageId () ) ; return cinderVolumeType ; }
@ java.lang.Override public org.ovirt.engine.api.model.Capabilities list () { org.ovirt.engine.api.model.Capabilities caps = new org.ovirt.engine.api.model.Capabilities () ; for ( org.ovirt.engine.api.model.Version v : getSupportedClusterLevels () ) { caps . getVersions () . add ( generateVersionCaps ( v ) ) ; } caps . setSchedulingPolicies ( getSchedulingPolicies () ) ; return caps ; }
private void setSelectedVncImpl () { java.lang.Object defConsoleModel = model . getModel () . getDefaultConsoleModel () ; org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel vncConsoleModel = ( defConsoleModel instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel ) ? ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel ) ( defConsoleModel ) ) : null ; if ( vncConsoleModel == null ) { return; } if ( noVncImplRadioButton . asRadioButton () . getValue () ) { vncConsoleModel . setVncImplementation ( VncConsoleModel.ClientConsoleMode.NoVnc ) ; } else { vncConsoleModel . setVncImplementation ( VncConsoleModel.ClientConsoleMode.Native ) ; } }
@ org.junit.Test public void validateEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSnapshotValidator () ; initVmForSpace () ; initVmDiskImage ( false ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommandTest . mockStorageDomainValidatorWithSpace () ) . when ( command ) . createStorageDomainValidator () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
public java.lang.Boolean getNicHotplugSupport ( java.lang.Integer osId , org.ovirt.engine.core.compat.Version version ) { org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > pair = new org.ovirt.engine.core.common.utils.Pair ( osId , version ) ; if ( getNicHotplugSupportMap () . containsKey ( pair ) ) { return getNicHotplugSupportMap () . get ( pair ) ; } return false ; }
@ org.junit.Before public void setup () { dbFacade = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () ; org.mockito.Mockito . when ( fencedVds . getName () ) . thenReturn ( org.ovirt.engine.core.bll.FenceProxyLocatorTest.HOST_NAME ) ; org.mockito.Mockito . when ( fencedVds . getId () ) . thenReturn ( org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCECD_HOST_ID ) ; org.mockito.Mockito . when ( fencedVds . getVdsGroupId () ) . thenReturn ( org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCED_HOST_CLUSTER_ID ) ; org.mockito.Mockito . when ( fencedVds . getStoragePoolId () ) . thenReturn ( org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCED_HOST_DATACENTER_ID ) ; fenceProxyLocator = new org.ovirt.engine.core.bll.FenceProxyLocator ( fencedVds ) ; org.mockito.Mockito . when ( dbFacade . getVdsDao () ) . thenReturn ( vdsDao ) ; }
public static void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters () ; params . setStoragePoolId ( dataCenterId ) ; params . setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private static void addCdDetails ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { struct . put ( VdsProperties.Type , vmDevice . getType () . getValue () ) ; struct . put ( VdsProperties.Device , vmDevice . getDevice () ) ; struct . put ( VdsProperties.Index , STRING_CONSTANT ) ; struct . put ( VdsProperties.INTERFACE , VdsProperties.Ide ) ; struct . put ( VdsProperties.ReadOnly , java.lang.Boolean.TRUE . toString () ) ; struct . put ( VdsProperties.Shareable , java.lang.Boolean.FALSE . toString () ) ; }
@ org.junit.Test public void testKDCLocator () { org.ovirt.engine.core.utils.kerberos.KDCLocator locator = new org.ovirt.engine.core.utils.kerberos.KDCLocator () ; java.lang.String [] recordsList = new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ; org.ovirt.engine.core.utils.dns.DnsSRVLocator.DnsSRVResult result = locator . getKdc ( recordsList , STRING_CONSTANT ) ; int numOfEntries = result . getNumOfValidAddresses () ; junit.framework.Assert . assertEquals ( numOfEntries , NUMBER_CONSTANT ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllForStoragePoolAndStatus ( org.ovirt.engine.core.compat.Guid storagePool , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { return getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , storagePool ) . addValue ( STRING_CONSTANT , ( status != null ? status . getValue () : null ) ) ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations () ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVds , org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostResourceTest.ROOT_PASSWORD } , valid , success ) ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel > items = model . getItems () ; if ( ( items != null ) && ( ! ( items . isEmpty () ) ) ) { selectionModel . setSelected ( items . get ( NUMBER_CONSTANT ) , true ) ; } }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( createTestCommand ( volumeId2 , NUMBER_CONSTANT ) ) ; prepareMocks ( cmd ) ; mockBackend ( true , null ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( cmd ) . startSubStep () ; org.mockito.Mockito . verify ( cmd ) . handleTaskReturn ( asyncTaskToBeReturned ) ; org.mockito.Mockito . verify ( cmd ) . updateBricksWithTaskID ( asyncTaskToBeReturned ) ; org.junit.Assert . assertEquals ( AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS , cmd . getAuditLogTypeValue () ) ; }
public boolean isStartupTimeoutPassed () { java.util.Date waitTo = getBackend () . getStartedAt () . addSeconds ( ( ( java.lang.Integer ) ( org.ovirt.engine.core.common.config.Config . getValue ( ConfigValues.DisableFenceAtStartupInSec ) ) ) ) ; java.util.Date now = new java.util.Date () ; if ( ! ( ( waitTo . before ( now ) ) || ( waitTo . equals ( now ) ) ) ) { return false ; } else { return true ; } }
public org.ovirt.engine.core.common.businessentities.VolumeFormat getDiskVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { if ( storageType . isFileDomain () ) { return org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW ; } else if ( storageType . isBlockDomain () ) { switch ( volumeType ) { case Sparse : return org.ovirt.engine.core.common.businessentities.VolumeFormat.COW ; case Preallocated : return org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW ; default: return org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned ; } } else { return org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned ; } }
@ org.junit.Test public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( null ) ; try { org.ovirt.engine.api.model.Cdrom cdrom = getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO ) ; resource . update ( cdrom ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
@ org.junit.Test public void testManualFence ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations () ; setUriInfo ( setUpActionExpectations ( VdcActionType.FenceVdsManualy , org.ovirt.engine.core.common.action.FenceVdsManualyParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] , GUIDS [ NUMBER_CONSTANT ] } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action () ; action . setFenceType ( FenceType.MANUAL . value () ) ; verifyActionResponse ( resource . fence ( action ) ) ; }
@ org.junit.Test public void getFreeVfOneFreeVf () { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , freeVfs . size () ) ; org.junit.Assert . assertTrue ( freeVfs . contains ( hostNicVfsConfigHelper . getFreeVf ( nic , null ) ) ) ; }
public static boolean CanUpdateField ( java.lang.String objectType , java.lang.String fieldName , java.lang.Enum < > status , java.lang.Object fieldContainer ) { java.lang.Class < > type = null ; if ( ( type = org.ovirt.engine.core.utils.ObjectIdentityChecker.mAliases . get ( objectType ) ) != null ) { return org.ovirt.engine.core.utils.ObjectIdentityChecker . CanUpdateField ( type , fieldName , status , fieldContainer ) ; } else { throw new java.lang.RuntimeException ( java.lang.String . format ( STRING_CONSTANT , type ) ) ; } }
@ org.junit.Test public void testDiscoverGeoRepDataWhenNoSessions () { org.mockito.Mockito . doReturn ( getSessionsVDSReturnVal ( NUMBER_CONSTANT ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.Matchers . eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters . class ) ) ; syncJob . discoverGeoRepData () ; org.mockito.Mockito . verify ( geoRepDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . save ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession . class ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = filterStorageDomains ( returnValue ) ; getStorageDomain () . setItems ( storageDomains ) ; getStorageDomain () . setIsEmpty ( storageDomains . isEmpty () ) ; updateControlsAvailability () ; stopProgress () ; }
private void logDeviceInformation ( org.ovirt.engine.core.compat.Guid vmId , java.util.Map device ) { java.lang.String message = STRING_CONSTANT ; java.lang.String deviceType = org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo . getDeviceType ( device ) ; if ( shouldLogDeviceDetails ( deviceType ) ) { java.util.Map < java.lang.String , java.lang.Object > deviceInfo = device ; org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log . infoFormat ( ( message + STRING_CONSTANT ) , org.apache.commons.lang.StringUtils . defaultString ( deviceType ) , vmId , deviceInfo ) ; } else { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log . infoFormat ( message , org.apache.commons.lang.StringUtils . defaultString ( deviceType ) , vmId ) ; } }
public void getAAAProfilesListViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runPublicQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getRoleDao () ; existingRole = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; newRole = new org.ovirt.engine.core.common.businessentities.Role () ; newRole . setname ( STRING_CONSTANT ) ; newRole . setdescription ( STRING_CONSTANT ) ; newRole . setType ( RoleType.USER ) ; newRole . setAllowsViewingChildren ( false ) ; }
public org.ovirt.engine.core.utils.ovf.xml.XmlNode selectSingleNode ( java.lang.String string , org.ovirt.engine.core.utils.ovf.xml.XmlNamespaceManager _xmlns ) { try { javax.xml.xpath.XPathFactory factory = javax.xml.xpath.XPathFactory . newInstance () ; javax.xml.xpath.XPath xPath = factory . newXPath () ; xPath . setNamespaceContext ( _xmlns ) ; java.lang.Object o = xPath . evaluate ( string , doc , javax.xml.xpath.XPathConstants.NODE ) ; return o != null ? new org.ovirt.engine.core.utils.ovf.xml.XmlNode ( ( ( org.w3c.dom.Node ) ( o ) ) ) : null ; } catch ( javax.xml.xpath.XPathExpressionException e ) { throw new java.lang.RuntimeException ( ( STRING_CONSTANT + string ) , e ) ; } }
@ org.junit.Test public void validateSucceedsWithStopActionTypeAndClusterId () { cmd . getParameters () . setActionType ( GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) ; cmd . getParameters () . setClusterId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; cmd . setClusterId ( cmd . getParameters () . getClusterId () ) ; prepareMocks () ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
private java.util.Map < java.lang.String , java.lang.Object > buildResponse ( org.ovirt.engine.core.sso.utils.SsoSession ssoSession ) { java.util.Map < java.lang.String , java.lang.Object > payload = new java.util.HashMap <> () ; payload . put ( SsoConstants.JSON_ACCESS_TOKEN , ssoSession . getAccessToken () ) ; payload . put ( SsoConstants.JSON_SCOPE , ( org.apache.commons.lang.StringUtils . isEmpty ( ssoSession . getScope () ) ? STRING_CONSTANT : ssoSession . getScope () ) ) ; payload . put ( SsoConstants.JSON_EXPIRES_IN , ssoSession . getValidTo () . toString () ) ; payload . put ( SsoConstants.JSON_TOKEN_TYPE , STRING_CONSTANT ) ; return payload ; }
private com.woorea.openstack.quantum.model.Port locatePort ( org.ovirt.engine.core.common.businessentities.network.VmNic nic ) { java.util.List < com.woorea.openstack.quantum.model.Port > ports = execute ( getClient () . ports () . list () ) . getList () ; for ( com.woorea.openstack.quantum.model.Port port : ports ) { if ( ( org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.DEVICE_OWNER . equals ( port . getDeviceOwner () ) ) && ( nic . getId () . toString () . equals ( port . getDeviceId () ) ) ) { return port ; } } return null ; }
private void updateVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { clearVms () ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > externalVms = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { externalVms . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( vm ) ) ; } externalVmModels . setItems ( externalVms ) ; stopProgress () ; }
@ org.junit.Test public void testClusterNetworkLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network () ; network . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.NETWORK_ID ) ; network . setCluster ( new org.ovirt.engine.api.model.Cluster () ) ; network . getCluster () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.CLUSTER_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( network ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.CLUSTER_NETWORK_HREF , network . getHref () ) ; }
@ java.lang.Override protected void executeCommand () { getQuotaDAO () . remove ( getParameters () . getQuotaId () ) ; org.ovirt.engine.core.bll.quota.QuotaManager . getInstance () . removeQuotaFromCache ( getQuota () . getStoragePoolId () , getParameters () . getQuotaId () ) ; getReturnValue () . setSucceeded ( true ) ; }
@ org.junit.Test public void diskSnapshotsCannotBePreviewed () { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot () ; org.mockito.Mockito . when ( snapshotDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( activeSnapshot ) ; org.mockito.Mockito . when ( diskImageDao . get ( disk1 . getImageId () ) ) . thenReturn ( disk1 ) ; org.mockito.Mockito . when ( diskImageDao . get ( disk2 . getImageId () ) ) . thenReturn ( disk2 ) ; org.junit.Assert . assertThat ( validator . canDiskSnapshotsBePreviewed ( activeSnapshot . getId () ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.CANNOT_PREVIEW_ACTIVE_SNAPSHOT ) ) ; }
@ java.lang.Override protected boolean validate () { if ( ! ( super . validate () ) ) { return false ; } if ( getGlusterVolume () . getVolumeType () . isDispersedType () ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_REMOVE_BRICK_FROM_DISPERSE_VOLUME_NOT_SUPPORTED ) ; } return validate ( brickValidator . canRemoveBrick ( getParameters () . getBricks () , getGlusterVolume () , getParameters () . getReplicaCount () , true ) ) ; }
private void runNextActionFlowWithFirstActionFailureTestCommon ( boolean waitFoResult ) { org.ovirt.engine.ui.uicommonweb.action.UiAction action1 = createAction ( waitFoResult , true ) ; org.ovirt.engine.ui.uicommonweb.action.UiAction action2 = createAction ( waitFoResult , true ) ; action1 . then ( action2 ) ; action1 . runAction () ; verifyRunActionAndExecuteCallbacksRandomly ( action1 . getActionFlowState () , waitFoResult ) ; verifyRunActionAndExecuteCallbacksRandomly ( true , action1 . getActionFlowState () , NUMBER_CONSTANT , NUMBER_CONSTANT , waitFoResult ) ; assertFinishedWithErrors ( java.util.Arrays . asList ( action1 , action2 ) , NUMBER_CONSTANT ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getStoragePoolIsoMapDao () ; storagePoolIsoMapDAO = dbFacade . getStoragePoolDao () ; existingPool = storagePoolIsoMapDAO . get ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; existingStoragePoolIsoMap = dao . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( org.ovirt.engine.core.dao.StoragePoolIsoMapDAOTest.EXISTING_ISO_ID , existingPool . getId () ) ) ; newStoragePoolIsoMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( org.ovirt.engine.core.dao.StoragePoolIsoMapDAOTest.FREE_ISO_ID , existingPool . getId () , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unattached ) ; }
private static void updateOption ( org.ovirt.engine.core.common.businessentities.VdcOption option ) { java.util.Map < java.lang.String , java.lang.Object > values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache . get ( option . getOptionName () ) ; if ( values == null ) { values = new java.util.HashMap <> () ; org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache . put ( option . getOptionName () , values ) ; } values . put ( option . getVersion () , getValue ( option ) ) ; }
public static java.lang.String decrypt ( java.lang.String source ) throws java.security.GeneralSecurityException { if ( ( source == null ) || ( ( source . trim () . length () ) == NUMBER_CONSTANT ) ) { return source ; } else { javax.crypto.Cipher rsa = javax.crypto.Cipher . getInstance ( STRING_CONSTANT ) ; rsa . init ( javax.crypto.Cipher.DECRYPT_MODE , org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils . getPrivateKeyEntry () . getPrivateKey () ) ; return new java.lang.String ( rsa . doFinal ( new org.apache.commons.codec.binary.Base64 () . decode ( source ) ) , java.nio.charset.Charset . forName ( STRING_CONSTANT ) ) ; } }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections . sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > mockDisksList ( int numberOfDisks ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList = new java.util.ArrayList <> ( numberOfDisks ) ; for ( int index = NUMBER_CONSTANT ; index < numberOfDisks ; index ++ ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; disksList . add ( image ) ; } org.mockito.Mockito . doReturn ( disksList ) . when ( cmd ) . getSourceImages () ; return disksList ; }
public void setupNetworks () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel setupNetworksWindowModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel ( this , ( ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > ) ( getSelectedItem () ) ) . getSecond () ) ; setWindow ( setupNetworksWindowModel ) ; }
private void initClustersTable () { clusterTable = new org.ovirt.engine.ui.common.widget.table.SimpleActionTable ( clusterPolicyClusterModelProvider , getTableHeaderlessResources () , getTableResources () , eventBus , clientStorage ) ; org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.VDSGroup > clusterColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.VDSGroup > () { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDSGroup object ) { return object . getName () ; } } ; clusterTable . addColumn ( clusterColumn , org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ClusterPolicyView.constants . clusterPolicyAttachedCluster () ) ; }
protected boolean validateImages () { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () . getStoragePoolId () , true , true , true , true , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getDiskDao () . getAllForVm ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVmId () ) ) ; }
@ java.lang.Override protected void syncSearch () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllVmTemplates ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalTemplateListModel ) ( model ) ) . setItems ( ( ( java.util.Collection ) ( returnValue ) ) ) ; } } ) , getIsQueryFirstTime () ) ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails getVolumeAdvancedDetails ( org.ovirt.engine.core.common.businessentities.VDS upServer , org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue result = runVdsCommand ( VDSCommandType.GetGlusterVolumeAdvancedDetails , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeAdvancedDetailsVDSParameters ( upServer . getId () , clusterId , volumeName , null , false , true ) ) ; return result . getSucceeded () ? ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails ) ( result . getReturnValue () ) ) : null ; }
public java.util.concurrent.Future < org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse > call ( org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call ( req ) ; this . tracker . registerCall ( req , call ) ; try { this . getClient () . sendMessage ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils . jsonToByteArray ( req . toJson () ) ) ; } finally { retryCall ( req , call ) ; } return call ; }
private static org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice ( org.ovirt.engine.core.compat.Guid deviceId , org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , java.lang.String device , boolean isManaged ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( deviceId , vmId ) , type , device , STRING_CONSTANT , java.util.Collections . emptyMap () , isManaged , true , false , STRING_CONSTANT , java.util.Collections . emptyMap () , null , null ) ; }
private boolean evaluateHostUpgradeInternalCommandProgress ( java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds , org.ovirt.engine.core.bll.CommandBase < > rootCommand ) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand ( childCmdIds ) ; if ( upgradeCommand == null ) { return false ; } switch ( upgradeCommand . getCommandStatus () ) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand . setCommandStatus ( CommandStatus.FAILED ) ; return true ; case SUCCEEDED : rootCommand . setCommandStatus ( CommandStatus.SUCCEEDED ) ; return true ; } return true ; }
private boolean removeMemoryFromSnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot , boolean clearFromDB ) { final java.lang.String memoryVolume = snapshot . getMemoryVolume () ; if ( memoryVolume . isEmpty () ) { return true ; } if ( clearFromDB ) { getSnapshotDao () . removeMemoryFromSnapshot ( snapshot . getId () ) ; } return removeMemoryVolumes ( memoryVolume ) ; }
@ java.lang.Override protected void onReset () { super . onReset () ; if ( ! ( hasReportsModelRefreshEvent () ) ) { getModel () . getReportsAvailabilityEvent () . addListener ( new org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent () ) ; } setSubTabPanelVisible ( false ) ; getModel () . refreshReportModel () ; }
@ org.junit.Test public void testQueryDefaultWindowsTimeZone () { mcr . mockConfigValue ( ConfigValues.DefaultWindowsTimeZone , org.ovirt.engine.core.bll.GetDefaultTimeZoneQueryTest.DEFAULT_WINDOWS_TIME_ZONE ) ; org.mockito.Mockito . when ( getQueryParameters () . getTimeZoneType () ) . thenReturn ( TimeZoneType.WINDOWS_TIMEZONE ) ; getQuery () . executeQueryCommand () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.lang.String result = ( ( java.lang.String ) ( getQuery () . getQueryReturnValue () . getReturnValue () ) ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + result ) , org.ovirt.engine.core.bll.GetDefaultTimeZoneQueryTest.DEFAULT_WINDOWS_TIME_ZONE , result ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase restoreCinderDisk ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk , org.ovirt.engine.core.common.action.ImagesContainterParametersBase params ) { java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil . executeAsyncCommand ( VdcActionType.RestoreFromCinderSnapshot , params , org.ovirt.engine.core.bll.storage.disk.cinder.RestoreAllCinderSnapshotsCommand . cloneContextAndDetachFromParent () ) ; try { return future . get () ; } catch ( java.lang.InterruptedException | java.util.concurrent.ExecutionException e ) { log . error ( STRING_CONSTANT , e ) ; } return null ; }
@ java.lang.Override public void run () { org.ovirt.engine.core.bll.VdsEventListener.log . info ( STRING_CONSTANT , vds . getId () , vds . getHostName () ) ; org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( vds . getId () ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.VdsNotRespondingTreatment , params , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; moveBricksToUnknown ( vds ) ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.api.model.HostStorage . class , to = org.ovirt.engine.core.common.businessentities.StorageDomain . class ) public static org.ovirt.engine.core.common.businessentities.StorageDomain map ( org.ovirt.engine.api.model.HostStorage model , org.ovirt.engine.api.restapi.types.StorageDomain template ) { org.ovirt.engine.api.restapi.types.StorageDomain entity = ( template != null ) ? template : new org.ovirt.engine.api.restapi.types.StorageDomain () ; entity . setStorage ( model . getId () ) ; if ( model . isSetType () ) { entity . setStorageType ( org.ovirt.engine.api.restapi.types.StorageDomainMapper . map ( model . getType () , null ) ) ; } return entity ; }
@ com.google.inject.Provides @ com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel , org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.Erratum > > getErrataDetailProvider ( final com.google.gwt.event.shared.EventBus eventBus , final com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > defaultConfirmPopupProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel > mainModelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.Erratum > > modelProvider ) { org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel , org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.Erratum > > result = new org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider ( eventBus , defaultConfirmPopupProvider ) ; result . setMainModelProvider ( mainModelProvider ) ; result . setModelProvider ( modelProvider ) ; return result ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand ( final org.ovirt.engine.core.bll.CommandBase < > command , final org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback callback = command . getCallback () ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils . getBackendCommandObjectsHandler ( org.ovirt.engine.core.bll.tasks.CommandExecutor.log ) . runAction ( command , ( cmdContext != null ? cmdContext . getExecutionContext () : null ) ) ; updateCommand ( command , result ) ; return result ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( ( ( ( STRING_CONSTANT . equals ( fieldName ) ) || ( STRING_CONSTANT . equals ( fieldName ) ) ) || ( STRING_CONSTANT . equals ( fieldName ) ) ) || ( STRING_CONSTANT . equals ( fieldName ) ) ) { return BiggerOrSmallerRelationAutoCompleter.INTSANCE ; } else if ( STRING_CONSTANT . equals ( fieldName ) ) { return NumericConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
@ org.junit.Test public void testSelectionRestoredOnNewSetItems () { listModel . setItems ( java.util.Arrays . asList ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; listModel . setSelectedItem ( NUMBER_CONSTANT ) ; listModel . setItems ( java.util.Arrays . asList ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( ( ( java.lang.Integer ) ( NUMBER_CONSTANT ) ) , listModel . getSelectedItem () ) ; }
@ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ! ( result . getReturnValue () . getSucceeded () ) ) { return; } org.ovirt.engine.ui.uicommonweb.models.userportal.PoolItemBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.PoolItemBehavior ) ( result . getState () ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result . getReturnValue () ; org.ovirt.engine.core.compat.Guid Guid = ( ( org.ovirt.engine.core.compat.Guid ) ( returnValueBase . getActionReturnValue () ) ) ; behavior . PostTakeVm ( Guid ) ; }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetPayloadExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setUpGetBallooningExpectations () ; control . replay () ; org.ovirt.engine.api.model.VM vm = resource . get () ; assertTrue ( vm . isSetStatistics () ) ; verifyModel ( vm , NUMBER_CONSTANT ) ; } finally { accepts . clear () ; } }
@ java.lang.Override protected void syncSearch () { org.ovirt.engine.core.common.VdcObjectType objType = getObjectType () ; org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters tempVar = new org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters () ; tempVar . setObjectId ( getEntityGuid () ) ; tempVar . setVdcObjectType ( objType ) ; tempVar . setDirectOnly ( false ) ; tempVar . setRefresh ( org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel . getIsQueryFirstTime () ) ; tempVar . setAllUsersWithPermission ( getAllUsersWithPermission () ) ; super . syncSearch ( VdcQueryType.GetPermissionsForObject , tempVar ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getIsImportGlusterConfiguration () . getEntity () ) != null ) && ( getIsImportGlusterConfiguration () . getEntity () ) ) { getGlusterHostAddress () . setIsChangable ( true ) ; getGlusterHostPassword () . setIsChangable ( true ) ; } else { getGlusterHostAddress () . setIsChangable ( false ) ; getGlusterHostPassword () . setIsChangable ( false ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Boolean isNameUnique ) { if ( ! isNameUnique ) { model . getInvalidityReasons () . clear () ; model . getName () . getInvalidityReasons () . add ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . nameMustBeUniqueInvalidReason () ) ; model . getName () . setIsValid ( false ) ; model . setIsValid ( false ) ; model . fireValidationCompleteEvent () ; } else { postNameUniqueCheck ( vm ) ; } }
@ org.junit.Test public void getVdsNullAll () { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = null ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b . setVds ( vds ) ; b . setVdsId ( vdsId ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertNull ( v ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Vm deprecatedPopulate ( org.ovirt.engine.api.model.Vm model , org.ovirt.engine.core.common.businessentities.VM entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper . getDetails ( httpHeaders , uriInfo ) ; if ( details . contains ( STRING_CONSTANT ) ) { addStatistics ( model , entity ) ; } org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper . setPayload ( this , model ) ; org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper . setCertificateInfo ( this , model ) ; org.ovirt.engine.api.restapi.resource.MemoryPolicyHelper . setupMemoryBalloon ( model , this ) ; return model ; }
@ org.junit.Test public void bufferBelowCapacity () { org.junit.Assert . assertNull ( tested . add ( STRING_CONSTANT ) ) ; org.junit.Assert . assertNull ( tested . add ( STRING_CONSTANT ) ) ; org.junit.Assert . assertArrayEquals ( testedListToArray () , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , tested . head () ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , tested . size () ) ; org.junit.Assert . assertFalse ( tested . isEmpty () ) ; org.junit.Assert . assertFalse ( tested . isFull () ) ; }
public void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_CONSTANT ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters . setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
private org.ovirt.engine.core.bll.network.MacsStorage createMacsStorage ( java.lang.String rangesString ) { java.util.Collection < org.apache.commons.lang.math.LongRange > rangesBoundaries = org.ovirt.engine.core.utils.MacAddressRangeUtils . parseRangeString ( rangesString ) ; org.ovirt.engine.core.bll.network.MacsStorage macsStorage = new org.ovirt.engine.core.bll.network.MacsStorage ( allowDuplicates ) ; for ( org.apache.commons.lang.math.LongRange range : rangesBoundaries ) { macsStorage . addRange ( range . getMinimumLong () , range . getMaximumLong () ) ; } return macsStorage ; }
@ org.junit.Test public void encodeWhenAliasIsTruncated ( ) throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest . generateRandomString ( NUMBER_CONSTANT ) ; disk . setDiskAlias ( alias ) ; disk . setDiskDescription ( STRING_CONSTANT ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( alias . substring ( NUMBER_CONSTANT , org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest.DISK_ALIAS_MAX_LENGTH ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice () { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.Empty , vm . getId () ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , STRING_CONSTANT , STRING_CONSTANT , new java.util.HashMap <> () , true , true , true , STRING_CONSTANT , new java.util.HashMap <> () , org.ovirt.engine.core.compat.Guid . newGuid () , STRING_CONSTANT ) ; }
protected void mockBackendStatusChange ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; vdsReturnValue . setReturnValue ( succeeded ) ; vdsReturnValue . setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue . setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , STRING_CONSTANT ) ) ; } org.mockito.Mockito . when ( vdsBrokerFrontend . runVdsCommand ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest . any ( org.ovirt.engine.core.common.vdscommands.VDSCommandType . class ) , org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest . any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase . class ) ) ) . thenReturn ( vdsReturnValue ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( getInboundEnabled () . equals ( sender ) ) { updateInboundAvailability () ; } else if ( getOutboundEnabled () . equals ( sender ) ) { updateOutboundAvailability () ; } }
private void updateActionAvailability () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainDR > domainDRs = ( ( getSelectedItems () ) != null ) ? getSelectedItems () : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomainDR > () ; getEditCommand () . setIsExecutionAllowed ( ( ( domainDRs . size () ) == NUMBER_CONSTANT ) ) ; }
public java.util.Collection < org.ovirt.engine.core.aaa.DirectoryGroup > mapGroupRecordsToDirectoryGroups ( final java.lang.String authzName , final java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > groups ) { java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > results = new java.util.ArrayList <> () ; for ( org.ovirt.engine.api.extensions.ExtMap group : groups ) { results . add ( mapGroupRecordToDirectoryGroup ( authzName , group ) ) ; } return results ; }
@ org.junit.Test public void validateFailsForDeviceAlreadyInUse () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice ( STRING_CONSTANT , null ) ; storageDevice . setCanCreateBrick ( false ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . singletonList ( storageDevice ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ java.lang.Override public boolean match ( org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster source ) { return ( ( ( ( source . getDataCenter () ) != null ) && ( ( source . getCluster () ) != null ) ) && ( source . getDataCenter () . getId () . equals ( dataCenterId ) ) ) && ( source . getCluster () . getId () . equals ( clusterId ) ) ; }
@ java.lang.Override public void replaceBrick ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity oldBrick , org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick ) { getCallsHandler () . executeModification ( STRING_CONSTANT , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , oldBrick . getId () ) . addValue ( STRING_CONSTANT , newBrick . getId () ) . addValue ( STRING_CONSTANT , newBrick . getServerId () ) . addValue ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.EnumUtils . nameOrNull ( newBrick . getStatus () ) ) ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByIds ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > storageIds , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; for ( org.ovirt.engine.core.compat.Guid storageId : storageIds ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.ui.uicommonweb.Linq . getStorageById ( storageId , storageDomains ) ; if ( storageDomain != null ) { list . add ( storageDomain ) ; } } return list ; }
public void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_ENABLE_FAILED ) ; }
public int getCountByTypeAndSeverity ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType type , org.ovirt.engine.core.common.businessentities.Erratum.ErrataSeverity severity ) { if ( ( ( errata ) == null ) || ( errata . isEmpty () ) ) { return NUMBER_CONSTANT ; } int count = NUMBER_CONSTANT ; for ( org.ovirt.engine.core.common.businessentities.Erratum e : errata ) { if ( ( ( e . getType () ) == type ) && ( ( e . getSeverity () ) == severity ) ) { count ++ ; } } return count ; }
private static boolean handlesEvent ( com.google.gwt.view.client.CellPreviewEvent < org.ovirt.engine.ui.uicommonweb.models.EntityModel > event ) { com.google.gwt.dom.client.NativeEvent nativeEvent = event . getNativeEvent () ; if ( ! ( STRING_CONSTANT . equals ( nativeEvent . getType () . toLowerCase () ) ) ) { return false ; } com.google.gwt.dom.client.Element target = nativeEvent . getEventTarget () . cast () ; return STRING_CONSTANT . equals ( target . getTagName () . toLowerCase () ) ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage getDiskImageToRemoveByParam ( org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters param ) { org.ovirt.engine.core.compat.Guid imageGroupId = param . getDestImageGroupId () ; org.ovirt.engine.core.compat.Guid imageId = param . getDestinationImageId () ; org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage () ; diskImage . setId ( imageGroupId ) ; diskImage . setImageId ( imageId ) ; return diskImage ; }
public void EnsureAsyncSearchStopped () { getTimer () . stop () ; if ( ( ( getAsyncResult () ) != null ) && ( ! ( getAsyncResult () . getId () . equals ( NGuid.Empty ) ) ) ) { setAsyncResult ( null ) ; } }
private void updateMemoryBoxVisibility () { org.ovirt.engine.core.common.businessentities.VM vm = model . getVm () ; if ( vm == null ) { return; } boolean memorySnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . isMemorySnapshotSupported ( vm ) ; memoryEditor . setVisible ( ( memorySnapshotSupported && ( vm . isRunning () ) ) ) ; if ( ! ( memoryEditor . isVisible () ) ) { model . getMemory () . setEntity ( false ) ; } }
public void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params . setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getImportBlockDataStorageModels () { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > models = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > () ; org.ovirt.engine.ui.uicommonweb.models.storage.ImportIscsiStorageModel iscsiDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.ImportIscsiStorageModel () ; models . add ( iscsiDataModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.ImportFcpStorageModel fcpDataModel = new org.ovirt.engine.ui.uicommonweb.models.storage.ImportFcpStorageModel () ; models . add ( fcpDataModel ) ; addTypeToStorageModels ( StorageDomainType.Data , models ) ; return models ; }
protected boolean validateImages () { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesToValidate = org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getDiskDao () . getAllForVm ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVmId () ) , true , false ) ; org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator ( imagesToValidate ) ; return ( validate ( diskImagesValidator . diskImagesNotLocked () ) ) && ( org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( org.ovirt.engine.core.bll.RemoveSnapshotCommand . getReturnValue () . getCanDoActionMessages () , org.ovirt.engine.core.bll.RemoveSnapshotCommand . getVm () . getStoragePoolId () , true , true , imagesToValidate ) ) ; }
private boolean isRunningConfigurationNeeded () { return ( ( org.ovirt.engine.core.bll.UpdateVmCommand . getVm () . isNextRunConfigurationExists () ) || ( ! ( org.ovirt.engine.core.bll.VmHandler . isUpdateValid ( org.ovirt.engine.core.bll.UpdateVmCommand . getVm () . getStaticData () , org.ovirt.engine.core.bll.UpdateVmCommand . getParameters () . getVmStaticData () , org.ovirt.engine.core.bll.UpdateVmCommand . getVm () . getStatus () ) ) ) ) || ( ! ( org.ovirt.engine.core.bll.VmHandler . isUpdateValidForVmDevices ( getVmId () , org.ovirt.engine.core.bll.UpdateVmCommand . getVm () . getStatus () , org.ovirt.engine.core.bll.UpdateVmCommand . getParameters () ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.BootSequence getSequence () { java.lang.String str = STRING_CONSTANT ; for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel a : getItems () ) { if ( a . getIsChangable () ) { org.ovirt.engine.core.common.businessentities.BootSequence bs = ( ( org.ovirt.engine.core.common.businessentities.BootSequence ) ( a . getEntity () ) ) ; str += bs . toString () ; } } return ! ( str . equals ( STRING_CONSTANT ) ) ? org.ovirt.engine.core.common.businessentities.BootSequence . valueOf ( str ) : null ; }
@ java.lang.Override protected void executeCommand () { int missingDiskCount = getMissingDiskCount () ; if ( missingDiskCount <= NUMBER_CONSTANT ) { setOvfUpdateStep ( OvfUpdateStep.OVF_UPLOAD ) ; org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . setSucceeded ( updateOvfStoreContent () ) ; } else { setOvfUpdateStep ( OvfUpdateStep.OVF_STORES_CREATION ) ; org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand . setSucceeded ( createOvfStoreDisks ( getMissingDiskCount () ) ) ; } }
private void updateActionAvailability () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks = ( ( getSelectedItems () ) != null ) ? getSelectedItems () : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > () ; getRemoveCommand () . setIsExecutionAllowed ( ( ( ( disks . size () ) > NUMBER_CONSTANT ) && ( isRemoveCommandAvailable ( disks ) ) ) ) ; }
@ org.junit.Test public void testNoAffinityGroups () { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = java.util.Arrays . asList ( host1 , host2 ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.Integer > scores = collectScores ( policyUnit . score ( cluster , hosts , newVm , null ) ) ; org.junit.Assert . assertEquals ( scores . get ( host1 . getId () ) , scores . get ( host2 . getId () ) ) ; }
@ org.junit.Test public void canDoActionFailsOnNoHook () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd , false ) ; org.junit.Assert . assertFalse ( cmd . canDoAction () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getCanDoActionMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST . toString () ) ) ; }
void mockGetVdsCertificateSubjectByVmId () { org.mockito.Mockito . doReturn ( hostSubjectReturnValue ) . when ( backend ) . runInternalQuery ( org.mockito.Matchers . eq ( VdcQueryType.GetVdsCertificateSubjectByVmId ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.HOST_SUBJECT ) . when ( hostSubjectReturnValue ) . getReturnValue () ; }
@ org.junit.Test public void addExistingConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . initializeVds () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS ) ; }
@ java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue ( T object ) { java.lang.Integer progressValue = getProgressValue ( object ) ; int progress = ( progressValue != null ) ? progressValue : NUMBER_CONSTANT ; java.lang.String text = getProgressText ( object ) ; java.lang.String color = ( progress < NUMBER_CONSTANT ) ? STRING_CONSTANT : progress < NUMBER_CONSTANT ? STRING_CONSTANT : STRING_CONSTANT ; return org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider . getApplicationTemplates () . progressBar ( progress , text , color ) ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > () ; } final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; return getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Event event ) { validateParameters ( event , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; validateEnums ( org.ovirt.engine.api.model.Event . class , event ) ; return performCreate ( VdcActionType.AddExternalEvent , getParameters ( event ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < java.lang.Long > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetAuditLogById , org.ovirt.engine.core.common.queries.GetAuditLogByIdParameters . class ) ) ; }
private void updateDirectLunDiskEnabled () { if ( ( getDiskStorageType () . getEntity () ) != ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN ) ) { return; } getIsDirectLunDiskAvaialable () . setEntity ( true ) ; setMessage ( STRING_CONSTANT ) ; getIsModelDisabled () . setEntity ( false ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue () { switch ( org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand . getActionState () ) { case EXECUTE : if ( ! ( org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand . getParameters () . getTaskGroupSuccess () ) ) { return org.ovirt.engine.core.common.AuditLogType.USER_IMPORT_IMAGE_FINISHED_FAILURE ; } if ( ( ( org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand . getParameters () . getExecutionIndex () ) == NUMBER_CONSTANT ) && ( org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand . getSucceeded () ) ) { return org.ovirt.engine.core.common.AuditLogType.USER_IMPORT_IMAGE ; } break; case END_SUCCESS : return org.ovirt.engine.core.common.AuditLogType.USER_IMPORT_IMAGE_FINISHED_SUCCESS ; case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_IMPORT_IMAGE_FINISHED_FAILURE ; } return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED ; }
private void updateUserAuthFields () { getUserName () . setIsValid ( true ) ; getUserName () . setIsChangable ( getUseUserAuth () . getEntity () ) ; getPassword () . setIsValid ( true ) ; getPassword () . setIsChangable ( getUseUserAuth () . getEntity () ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Storage postPopulate ( org.ovirt.engine.api.model.Storage from ) { from . setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.StorageType . class ) . value () ) ; org.ovirt.engine.api.model.LogicalUnit unit = new org.ovirt.engine.api.model.LogicalUnit () ; unit . setId ( from . getId () ) ; from . getLogicalUnits () . unsetLogicalUnits () ; from . getLogicalUnits () . getLogicalUnits () . add ( unit ) ; return from ; }
@ java.lang.Override protected void executeCommand () { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > vmDisksMap = vmSlaPolicyUtils . getRunningVmDiskImageMapWithQos ( getQosId () ) ; super . executeCommand () ; if ( getSucceeded () ) { vmSlaPolicyUtils . refreshVmsStorageQos ( vmDisksMap , new org.ovirt.engine.core.common.businessentities.qos.StorageQos () ) ; } }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.VDS > hostNameListModel = getExternalHostName () ; hostNameListModel . setItems ( hosts ) ; hostNameListModel . setIsChangeable ( true ) ; setEnableSearchHost ( true ) ; getProviders () . setIsChangeable ( true ) ; }
@ java.lang.Override public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . ExecuteCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { AddNetwork () ; } if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { AddDisk () ; } if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { Cancel () ; } }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworks , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.core.compat.Guid.Empty } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > () , null ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ java.lang.Override public boolean isSpiceProxyDefined ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.SpiceProxyDefault ) ) ) ) ) ) || ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( vm . getVdsGroupSpiceProxy () ) ) ) ) || ( ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( vm . getVmPoolSpiceProxy () ) ) ) ; }
@ java.lang.Override protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { super . onLogin ( loginModel ) ; org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . init () ; org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . getReportsInitEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability () ; } } ) ; performLogin ( loginModel ) ; }
protected void updateOldImageAsActive ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType snapshotType , boolean active ) { org.ovirt.engine.core.compat.Guid oldImageId = findImageForSameDrive ( snapshotType ) ; if ( oldImageId == null ) { log . error ( STRING_CONSTANT , active , snapshotType , getImageId () ) ; return; } org.ovirt.engine.core.common.businessentities.storage.DiskImage oldImage = org.ovirt.engine.core.bll.BaseImagesCommand . getDiskImageDao () . getSnapshotById ( oldImageId ) ; oldImage . setActive ( active ) ; org.ovirt.engine.core.bll.BaseImagesCommand . getImageDao () . update ( oldImage . getImage () ) ; }
@ org.junit.Test public void validateSpaceAndThreshold () { mockGetAllSnapshots () ; org.junit.Assert . assertTrue ( cmd . validateSpaceRequirements () ) ; org.mockito.Mockito . verify ( storageDomainValidator , org.mockito.Mockito . times ( org.ovirt.engine.core.bll.TOTAL_NUM_DOMAINS ) ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers . anyList () ) ; org.mockito.Mockito . verify ( storageDomainValidator , org.mockito.Mockito . never () ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers . anyList () ) ; }
public void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return org.ovirt.engine.ui.uicommonweb.Linq . < org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.List < > ) ( source ) ) ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
protected void EndImportCommand () { setVm ( null ) ; EndActionOnAllImageGroups () ; if ( ( getVm () ) != null ) { org.ovirt.engine.core.bll.VmHandler . UnLockVm ( getVm () ) ; UpdateVmImSpm () ; } else { setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.ImportVmCommand.log . warn ( STRING_CONSTANT ) ; } setSucceeded ( true ) ; }
@ org.junit.Before @ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; vmID = org.ovirt.engine.core.compat.Guid . newGuid () ; org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.compat.Guid . newGuid () ; pluggedDisk = createDiskImage ( true ) ; unpluggedDisk = createDiskImage ( true ) ; pluggedDiskSnapshot = createDiskImage ( false ) ; pluggedDiskSnapshot . setVmSnapshotId ( snapshotId ) ; unpluggedDiskSnapshot = createDiskImage ( false ) ; unpluggedDiskSnapshot . setVmSnapshotId ( snapshotId ) ; setUpDaoMocks () ; }
@ org.junit.Test public void testNotificationService () { org.ovirt.engine.core.notifier.NotificationService notificationService = null ; try { notificationService = new org.ovirt.engine.core.notifier.NotificationService ( new org.ovirt.engine.core.notifier.utils.NotificationConfigurator ( STRING_CONSTANT ) ) ; } catch ( org.ovirt.engine.core.notifier.NotificationServiceException e ) { e . printStackTrace () ; } org.junit.Assert . assertNotNull ( notificationService ) ; notificationService . run () ; }
private java.lang.String getTokenFromHeader ( javax.servlet.http.HttpServletRequest request ) { java.lang.String token = null ; java.lang.String headerValue = request . getHeader ( SsoConstants.HEADER_AUTHORIZATION ) ; if ( ( headerValue != null ) && ( headerValue . startsWith ( org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER ) ) ) { token = headerValue . substring ( org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER . length () ) . trim () ; } return token ; }
private void doQueryExecute ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) throws java.sql.SQLException { output . mput ( Authz.InvokeKeys.QUERY_RESULT , authorization . executeQuery ( input . get ( Authz.InvokeKeys.QUERY_OPAQUE , java.lang.String . class ) , input . get ( Authz.InvokeKeys.PAGE_SIZE , java.lang.Integer . class , java.lang.Integer.MAX_VALUE ) ) ) ; }
@ java.lang.Override public void onFailure ( final org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.LoginUserParameters > operation , final java.lang.Throwable caught ) { if ( ignoreFailure ( caught ) ) { return; } org.ovirt.engine.ui.frontend.Frontend.logger . log ( java.util.logging.Level.SEVERE , ( STRING_CONSTANT + caught ) , caught ) ; getEventsHandler () . runQueryFailed ( null ) ; failureEventHandler ( caught ) ; if ( callback . isHandleFailure () ) { setLoggedInUser ( null ) ; callback . getDel () . onSuccess ( callback . getModel () , null ) ; } }
@ java.lang.Override protected org.ovirt.engine.core.bll.UpdateVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > createCommand () { org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters param = new org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters ( vmPools , testVm , VM_COUNT ) ; param . setStorageDomainId ( firstStorageDomainId ) ; org.ovirt.engine.core.bll.UpdateVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.UpdateVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > ( param , org.ovirt.engine.core.bll.context.CommandContext . createContext ( param . getSessionId () ) ) { @ java.lang.Override protected void initUser () {} @ java.lang.Override protected void initTemplate () {} } ) ; return command ; }
private void initCommand () { org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters () ; params . setVdsId ( org.ovirt.engine.core.bll.pm.StartVdsCommandTest.FENCECD_HOST_ID ) ; command = new org.ovirt.engine.core.bll.pm.StartVdsCommand ( params , null ) ; command . setAuditLogDirector ( auditLogDirector ) ; command = org.mockito.Mockito . spy ( command ) ; org.mockito.Mockito . doReturn ( executor ) . when ( command ) . createHostFenceActionExecutor ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VDS . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.FencingPolicy . class ) ) ; org.mockito.Mockito . doReturn ( vdsBrokerFrontend ) . when ( command ) . getVdsBroker () ; command . setClusterId ( org.ovirt.engine.core.bll.pm.StartVdsCommandTest.FENCECD_HOST_CLUSTER_ID ) ; }
@ java.lang.Override public java.lang.String render ( java.lang.Object [] arg ) { java.lang.Object entity = arg [ NUMBER_CONSTANT ] ; org.ovirt.engine.core.compat.Guid objectGuid = ( ( org.ovirt.engine.core.compat.Guid ) ( arg [ NUMBER_CONSTANT ] ) ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getEntityGuid ( entity ) . equals ( objectGuid ) ) { return STRING_CONSTANT ; } java.lang.String ownerName = ( ( java.lang.String ) ( arg [ NUMBER_CONSTANT ] ) ) ; return ownerName ; }
private void loadIconsToDatabase () { final java.util.Map < java.lang.Integer , java.lang.String > osIdToOsNameMap = org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . get ( org.ovirt.engine.core.common.osinfo.OsRepository . class ) . getUniqueOsNames () ; for ( java.util.Map.Entry < java.lang.Integer , java.lang.String > entry : osIdToOsNameMap . entrySet () ) { final org.ovirt.engine.core.common.queries.VmIconIdSizePair iconIdPair = ensureIconsInDatabase ( entry . getValue () ) ; if ( iconIdPair != null ) { osIdToIconIdMap . put ( entry . getKey () , iconIdPair ) ; } } }
public static org.ovirt.engine.core.common.businessentities.network.Network getNetworkByVnicProfile ( org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile ) { if ( ( vnicProfile == null ) || ( ( vnicProfile . getNetworkId () ) == null ) ) { return null ; } return org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getNetworkDao () . get ( vnicProfile . getNetworkId () ) ; }
@ org.junit.Test public void testAddVersionNoBaseTemplateId ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; org.ovirt.engine.api.model.Template t = org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest . getModel ( NUMBER_CONSTANT ) ; t . getVersion () . setBaseTemplate ( null ) ; try { collection . add ( t ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException e ) { assertNotNull ( e . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , e . getResponse () . getStatus () ) ; } }
private void updateBricks ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > fetchedBricks = fetchedVolume . getBricks () ; if ( fetchedBricks == null ) { log . warnFormat ( ( STRING_CONSTANT + STRING_CONSTANT ) , fetchedVolume . getName () ) ; return; } removeDeletedBricks ( existingVolume , fetchedBricks ) ; updateExistingAndNewBricks ( existingVolume , fetchedBricks ) ; }
protected java.lang.String getStrippedVdsUniqueId () { if ( ( _strippedVdsUniqueId ) == null ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; for ( char ch : org.ovirt.engine.core.bll.RegisterVdsQuery . getParameters () . getVdsUniqueId () . toCharArray () ) { if ( org.ovirt.engine.core.bll.RegisterVdsQuery.validChars . get ( ch ) ) { builder . append ( ch ) ; } } _strippedVdsUniqueId = builder . toString () ; } return _strippedVdsUniqueId ; }
public void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters () , aQuery ) ; }
private void addSuggestItem ( java.lang.String firstPart , org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartType firstPartType , java.lang.String secondPart , org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartType secondPartType ) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel tempVar = new org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel () ; tempVar . setPartString ( firstPart ) ; tempVar . setPartType ( firstPartType ) ; org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel tempVar2 = new org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel () ; tempVar2 . setPartString ( secondPart ) ; tempVar2 . setPartType ( secondPartType ) ; java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel > parts = new java.util.ArrayList ( java.util.Arrays . asList ( new org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel [] { tempVar , tempVar2 } ) ) ; getItems () . add ( parts ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetPermissionsByAdElementId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpPermissions () , failure ) ; }
private java.lang.String getNetworkId ( java.lang.String networkName ) { if ( networkName != null ) { org.ovirt.engine.core.compat.Guid clusterId = getClusterId () ; org.ovirt.engine.core.common.businessentities.Network n = getClusterNetwork ( clusterId , null , networkName ) ; if ( n != null ) { return n . getId () . toString () ; } } return null ; }
@ org.junit.Test public void testLogReturnLogsWhenLogLevelActiveAndExpandReturn ( ) throws java.lang.Exception { java.lang.String id = STRING_CONSTANT ; org.slf4j.Logger log = org.mockito.Mockito . mock ( org.slf4j.Logger . class ) ; org.mockito.Mockito . when ( log . isDebugEnabled () ) . thenReturn ( true ) ; org.ovirt.engine.core.utils.log.LoggedUtils . logReturn ( log , id , new org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedOverridingSubclass () , new java.lang.Object () ) ; org.mockito.Mockito . verify ( log ) . debug ( org.mockito.ArgumentMatchers . eq ( LoggedUtils.EXIT_LOG_RETURN_VALUE ) , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . eq ( id ) ) ; }
@ java.lang.Override public int compare ( org.ovirt.engine.core.common.businessentities.NetworkView paramT1 , org.ovirt.engine.core.common.businessentities.NetworkView paramT2 ) { int compareValue = paramT1 . getStoragePoolName () . compareTo ( paramT2 . getStoragePoolName () ) ; if ( compareValue != NUMBER_CONSTANT ) { return compareValue ; } return paramT1 . getName () . compareTo ( paramT2 . getName () ) ; }
@ org.junit.Test public void testStorageDomainTemplateLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Template template = new org.ovirt.engine.api.model.Template () ; template . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.TEMPLATE_ID ) ; template . setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain () ) ; template . getStorageDomain () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; template = org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( template ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_TEMPLATE_HREF , template . getHref () ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , template . getStorageDomain () . getHref () ) ; }
@ java.lang.Override public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( target ) ) ; java.lang.Iterable < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > filteredHosts = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > () ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( isHostAvailable ( host ) ) { filteredHosts . add ( host ) ; } } diskModel . getHost () . setItems ( filteredHosts ) ; }
public void newNetworkQoS () { if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkQoSModel newNetworkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkQoSModel ( this , getEntity () ) ; setWindow ( newNetworkQoSModel ) ; newNetworkQoSModel . getDataCenters () . setItems ( java.util.Arrays . asList ( getEntity () ) ) ; newNetworkQoSModel . getDataCenters () . setSelectedItem ( getEntity () ) ; }
@ org.junit.Test public void testDeleteUnregisteredEntity () { java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList = dao . getByEntityIdAndStorageDomain ( FixturesTool.UNREGISTERED_VM , FixturesTool.STORAGE_DOAMIN_NFS2_1 ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , ovfEntityDataList . size () ) ; org.junit.Assert . assertFalse ( ovfEntityDataList . isEmpty () ) ; dao . removeEntity ( FixturesTool.UNREGISTERED_VM , FixturesTool.STORAGE_DOAMIN_NFS2_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList2 = dao . getByEntityIdAndStorageDomain ( FixturesTool.UNREGISTERED_VM , FixturesTool.STORAGE_DOAMIN_NFS2_1 ) ; org.junit.Assert . assertTrue ( ovfEntityDataList2 . isEmpty () ) ; }
@ org.junit.Test public void commandFailsNoPubKeys () { java.util.List < java.lang.String > pubKeys = new java.util.ArrayList <> () ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHostPubKeyToSlaveInternalCommand ( new org.ovirt.engine.core.common.action.gluster.UpdateGlusterHostPubKeyToSlaveParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , pubKeys ) , null ) ) ; org.junit.Assert . assertFalse ( command . validate () ) ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.core.common.businessentities.VdsProtocol . class , to = org.ovirt.engine.api.model.HostProtocol . class ) public static org.ovirt.engine.api.model.HostProtocol map ( org.ovirt.engine.core.common.businessentities.VdsProtocol protocol , org.ovirt.engine.api.model.HostProtocol template ) { org.ovirt.engine.api.model.HostProtocol result = null ; if ( protocol != null ) { switch ( protocol ) { case STOMP : result = org.ovirt.engine.api.model.HostProtocol.STOMP ; break; case XML : default: result = org.ovirt.engine.api.model.HostProtocol.XML ; break; } } return result ; }
private void runAction ( org.ovirt.engine.core.common.action.VdcActionType action , org.ovirt.engine.core.common.action.VdcActionParametersBase param ) { if ( ( getConfirmWindow () ) == null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow () ) ) ; model . startProgress () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( action , param , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { model . stopProgress () ; setConfirmWindow ( null ) ; } } ) ; }
private void addListeners () { getTargets () . getSelectedItemsChangedEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getLoginCommand () . setIsExecutionAllowed ( ( ( ( getTargets () . getSelectedItems () ) != null ) && ( ! ( getTargets () . getSelectedItems () . isEmpty () ) ) ) ) ; } } ) ; }
@ org.junit.Before public void setup () { org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . bind ( org.ovirt.engine.core.common.osinfo.OsRepository . class , osRepository ) ; initVm () ; images = new java.util.ArrayList <> () ; emulatedMachine = STRING_CONSTANT ; cpuId = STRING_CONSTANT ; underTest = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter ( vm , images , version , emulatedMachine , cpuId ) ; }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; if ( ( ( value != null ) && ( value instanceof java.lang.String ) ) && ( ( ( ( java.lang.String ) ( value ) ) . length () ) > ( getMaxLength () ) ) ) { result . setSuccess ( false ) ; result . getReasons () . add ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getMessages () . lenValidationFieldMusnotExceed ( getMaxLength () ) ) ; } return result ; }
@ org.junit.Before public void setup () { initVds () ; initConditions () ; org.mockito.Mockito . when ( vdsManager . getRefreshStatistics () ) . thenReturn ( false ) ; updater = new org.ovirt.engine.core.vdsbroker.HostMonitoring ( vdsManager , vds , org.mockito.Mockito . mock ( org.ovirt.engine.core.vdsbroker.MonitoringStrategy . class ) , resourceManager , dbFacade , auditLogDirector ) ; }
protected void handleCredentials ( java.net.HttpURLConnection connection ) { if ( ( ( hostProvider . getUsername () ) != null ) && ( ( hostProvider . getPassword () ) != null ) ) { connection . setRequestProperty ( STRING_CONSTANT , java.lang.String . format ( STRING_CONSTANT , new org.apache.commons.codec.binary.Base64 ( NUMBER_CONSTANT ) . encodeToString ( java.lang.String . format ( STRING_CONSTANT , hostProvider . getUsername () , hostProvider . getPassword () ) . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ) ) ; } }
@ java.lang.Override protected boolean canDoAction () { if ( ! ( super . canDoAction () ) ) { return false ; } if ( ( ( getAllUpServers () ) == null ) || ( getAllUpServers () . isEmpty () ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND ) ; return false ; } return true ; }
@ org.junit.Test public void validateSucceeds () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays . asList ( getStorageDevice ( STRING_CONSTANT , null ) ) ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
@ org.junit.Test public void compare () { org.junit.Assert . assertTrue ( ( ( Version.v3_6 . compareTo ( Version.v4_0 ) ) < NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( ( ( Version.v4_0 . compareTo ( Version.v3_6 ) ) > NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , Version.v3_6 . compareTo ( new org.ovirt.engine.core.compat.Version ( STRING_CONSTANT ) ) ) ; }
@ org.junit.Test public void testCredentialsWithConnectionExtensionDifferentHostSameTarget () { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . createConnectionWithCredentials ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . createConnectionExtension ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > credentials = helper . getStorageConnectionCredentialsForhost ( connExt . getHostId () , conn ) ; org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest . assertCredentials ( credentials , conn . getUserName () , conn . getPassword () ) ; }
@ java.lang.Override protected void postConnect ( org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback callback ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { this . nioEngine = new org.ovirt.vdsm.jsonrpc.client.reactors.SSLEngineNioHelper ( channel , createSSLEngine ( false ) , callback , this ) ; this . nioEngine . beginHandshake () ; int interestedOps = java.nio.channels.SelectionKey.OP_READ ; reactor . wakeup () ; key = this . channel . register ( selector , ( interestedOps |= java.nio.channels.SelectionKey.OP_WRITE ) , this ) ; } catch ( java.nio.channels.ClosedChannelException | javax.net.ssl.SSLException e ) { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompListener.log . error ( STRING_CONSTANT , e ) ; throw new org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ( e ) ; } }
public static < T > T injectMembers ( T instance ) { javax.enterprise.inject.spi.AnnotatedType type = org.ovirt.engine.core.bll.utils.Injector.injector.manager . createAnnotatedType ( instance . getClass () ) ; javax.enterprise.inject.spi.InjectionTarget injectionTarget = org.ovirt.engine.core.bll.utils.Injector.injector.manager . createInjectionTarget ( type ) ; injectionTarget . inject ( instance , org.ovirt.engine.core.bll.utils.Injector.injector.manager . createCreationalContext ( null ) ) ; injectionTarget . postConstruct ( instance ) ; return instance ; }
@ org.junit.Test public void testFetchSpecificQuotaUsageForSpecificVdsGroup ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaVdsGroup > quotaVdsGroupList = dao . getQuotaVdsGroupByVdsGroupGuid ( FixturesTool.VDS_GROUP_RHEL6_ISCSI , FixturesTool.QUOTA_SPECIFIC ) ; org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaVdsGroup = quotaVdsGroupList . get ( NUMBER_CONSTANT ) ; org.junit.Assert . assertNotNull ( quotaVdsGroup ) ; org.junit.Assert . assertEquals ( true , ( ( quotaVdsGroupList . size () ) == NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( quotaVdsGroup . getVirtualCpu () , java.lang.Integer . valueOf ( NUMBER_CONSTANT ) ) ; }
public void runMultipleActions ( final java.util.List < org.ovirt.engine.core.common.action.VdcActionType > actionTypes , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final java.util.List < org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback > callbacks , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback failureCallback , final java.lang.Object state ) { runMultipleActions ( actionTypes , parameters , callbacks , failureCallback , state , false ) ; }
@ org.junit.Test public void canDoActionFailedWrongPlugStatus ( ) throws java.lang.Exception { mockVmStatusUp () ; cretaeDiskWrongPlug ( true ) ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED . toString () ) ) ; }
@ org.junit.Test public void testDoGet_CalculateMd5_ResourceModifiedEtagResponse ( ) throws java.io.IOException , java.security.NoSuchAlgorithmException , javax.servlet.ServletException { java.lang.String md5sum = STRING_CONSTANT ; org.ovirt.engine.ui.frontend.server.gwt.AbstractGwtDynamicHostPageServletTest . doReturn ( md5sum ) . when ( testServlet ) . getMd5Sum ( mockRequest ) ; testServlet . doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockResponse ) . addHeader ( GwtDynamicHostPageServlet.ETAG_HEADER , md5sum ) ; }
protected void doTestBadAdd ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpVm ( GUIDS [ NUMBER_CONSTANT ] ) ) ; setUpGetConsoleExpectations ( NUMBER_CONSTANT ) ; setUpGetSoundcardExpectations ( NUMBER_CONSTANT ) ; super . doTestBadAdd ( valid , success , detail ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.StorageDomain deprecatedPopulate ( org.ovirt.engine.api.model.StorageDomain model , org.ovirt.engine.api.model.StorageDomain entity ) { if ( StorageDomainSharedStatus.Unattached . equals ( entity . getStorageDomainSharedStatus () ) ) { model . setStatus ( StorageDomainStatus.UNATTACHED ) ; } else { model . setStatus ( null ) ; } return super . deprecatedPopulate ( model , entity ) ; }
@ java.lang.Override protected boolean validateCreateImage () { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper . validate ( VdcActionType.AddDisk , getAddDiskParameters () , org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand . getContext () . clone () ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand . getReturnValue () . setValidationMessages ( returnValue . getValidationMessages () ) ; return returnValue . isValid () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue () ; if ( vm == null ) { return; } setVM ( vm ) ; syncSearch () ; } }
@ java.lang.Override public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { if ( ( object . getLastAlignmentScan () ) != null ) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat . getFormat ( STRING_CONSTANT ) . format ( object . getLastAlignmentScan () ) ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.messages . lastDiskAlignment ( lastScanDate ) ; } return null ; }
public void onRemove () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > pb = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > () ; for ( java.lang.Object a : sourceListModel . getSelectedItems () ) { org.ovirt.engine.core.common.businessentities.network.Network network = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( a ) ) ; pb . add ( new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( network . getDataCenterId () , network ) ) ; } org.ovirt.engine.ui.frontend.Frontend . RunMultipleAction ( VdcActionType.RemoveNetwork , pb ) ; sourceListModel . setConfirmWindow ( null ) ; }
private void mockValidators () { org.mockito.Mockito . doReturn ( diskValidator ) . when ( command ) . createDiskValidator ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . doReturn ( diskVmElementValidator ) . when ( command ) . createDiskVmElementValidator ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Test public void testGetVmIconByDataUrlWithValidUrl () { final java.util.List < org.ovirt.engine.core.common.businessentities.VmIcon > result = dao . getByDataUrl ( org.ovirt.engine.core.dao.VmIconDaoTest.OTHER_SMALL_DATAURL ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , result . size () ) ; org.junit.Assert . assertEquals ( new org.ovirt.engine.core.common.businessentities.VmIcon ( FixturesTool.SMALL_ICON_ID , org.ovirt.engine.core.dao.VmIconDaoTest.OTHER_SMALL_DATAURL ) , result . get ( NUMBER_CONSTANT ) ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( GUIDS [ NUMBER_CONSTANT ] , true ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters () { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > () ; list . add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( org.ovirt.engine.core.bll.RegisterDiskCommand . getParameters () . getDiskImage () . getQuotaId () , null , QuotaConsumptionParameter.QuotaAction.CONSUME , org.ovirt.engine.core.bll.RegisterDiskCommand . getStorageDomainId () , org.ovirt.engine.core.bll.RegisterDiskCommand . getParameters () . getDiskImage () . getActualSize () ) ) ; return list ; }
public org.ovirt.engine.core.common.businessentities.VmInit buildCloudInitParameters ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { if ( ( model . getVmInitEnabled () . getEntity () ) || ( model . getSysprepEnabled () . getEntity () ) ) { return buildModelSpecificParameters ( model . getIsWindowsOS () ) ; } else { return null ; } }
@ org.junit.Test public void failWhenPowerManagementDisabled () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; java.util.List < java.lang.String > messages = new java.util.LinkedList <> () ; boolean result = validator . isPowerManagementEnabledAndLegal ( vds , null , messages ) ; org.junit.Assert . assertFalse ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , messages . size () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , messages . get ( NUMBER_CONSTANT ) ) ; }
private static java.util.ArrayList < org.ovirt.engine.core.compat.Guid > getGuidListFromStringArray ( java.util.List < java.lang.String > strings ) { java.util.ArrayList < org.ovirt.engine.core.compat.Guid > guidList = new java.util.ArrayList <> () ; for ( java.lang.String guidString : strings ) { guidList . add ( org.ovirt.engine.core.compat.Guid . createGuidFromStringDefaultEmpty ( guidString ) ) ; } return guidList ; }
public static java.lang.String firstMatch ( java.util.List < java.lang.String > src , java.lang.String . . . lookup ) { if ( lookup == null ) { return null ; } java.util.Arrays . sort ( lookup ) ; for ( java.lang.String s : src ) { int matchedIndex = java.util.Arrays . binarySearch ( lookup , s ) ; if ( matchedIndex >= NUMBER_CONSTANT ) { return lookup [ matchedIndex ] ; } } return null ; }
@ java.lang.Override public org.ovirt.engine.core.common.job.Job getJobWithSteps ( final org.ovirt.engine.core.compat.Guid jobId ) { org.ovirt.engine.core.common.job.Job job = jobDao . get ( jobId ) ; if ( job != null ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > jobSubjectEntity = jobSubjectEntityDao . getJobSubjectEntityByJobId ( jobId ) ; job . setJobSubjectEntities ( jobSubjectEntity ) ; } return job ; }
@ org.junit.Test public void testValidateVmUpHostCapable () { prepareForVmValidatorTests () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( snapshotValidator ) . vmSnapshotDisksNotDuringMerge ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; cmd . getVm () . setStatus ( VMStatus.Up ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
@ java.lang.Override public boolean canOpenSpiceConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { if ( item . isPool () ) { return false ; } if ( ( item . getDefaultConsoleModel () . getConnectCommand () . getIsAvailable () ) && ( item . getDefaultConsoleModel () . getConnectCommand () . getIsExecutionAllowed () ) ) { return true ; } return false ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.Quota getQuotaByQuotaName ( java.lang.String quotaName , org.ovirt.engine.core.compat.Guid storagePoolId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource quotaParameterSource = getCustomMapSqlParameterSource () ; quotaParameterSource . addValue ( STRING_CONSTANT , quotaName ) ; quotaParameterSource . addValue ( STRING_CONSTANT , storagePoolId ) ; return getCallsHandler () . executeRead ( STRING_CONSTANT , getQuotaFromResultSet () , quotaParameterSource ) ; }
public static org.ovirt.engine.core.aaa.DirectoryUser findDirectoryUserById ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final java.lang.String id , final boolean groupsResolving , final boolean groupsResolvingRecursive ) { java.util.Collection < org.ovirt.engine.core.aaa.DirectoryUser > users = org.ovirt.engine.core.bll.aaa.DirectoryUtils . findDirectoryUserByIds ( extension , namespace , java.util.Arrays . asList ( id ) , groupsResolving , groupsResolvingRecursive ) ; if ( ( users . size () ) == NUMBER_CONSTANT ) { return null ; } return new java.util.ArrayList ( users ) . get ( NUMBER_CONSTANT ) ; }
public void onRemove () { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = new java.util.ArrayList <> () ; for ( T qos : sourceListModel . getSelectedItems () ) { org.ovirt.engine.core.common.action.QosParametersBase < T > parameter = new org.ovirt.engine.core.common.action.QosParametersBase () ; parameter . setQosId ( qos . getId () ) ; parameters . add ( parameter ) ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( getRemoveActionType () , parameters ) ; cancel () ; }
protected void initLabelModels () { java.util.Collections . sort ( originalLabels , new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ) ; java.util.LinkedList < org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > > items = new java.util.LinkedList <> () ; for ( java.lang.String label : originalLabels ) { org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > labelModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel () ; labelModel . setItems ( suggestedLabels ) ; labelModel . setSelectedItem ( label ) ; items . add ( labelModel ) ; } setItems ( items ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue () ; if ( vm == null ) { return; } syncSearch ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId () ) ) ; } }
@ java.lang.Override protected boolean canDoAction () { org.ovirt.engine.core.bll.validator.UpgradeHostValidator validator = new org.ovirt.engine.core.bll.validator.UpgradeHostValidator ( org.ovirt.engine.core.bll.hostdeploy.UpgradeHostCommand . getVds () ) ; return ( ( ( validate ( validator . hostExists () ) ) && ( validate ( validator . statusSupportedForHostUpgrade () ) ) ) && ( validate ( validator . updatesAvailable () ) ) ) && ( validate ( validator . imageProvidedForOvirtNode ( org.ovirt.engine.core.bll.hostdeploy.UpgradeHostCommand . getParameters () . getoVirtIsoFile () ) ) ) ; }
@ org.junit.Test public void validateFailsOnNullHookId () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( null ) , null ) ) ; setupMocks ( cmd ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.junit.Assert . assertTrue ( cmd . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED . toString () ) ) ; }
@ java.lang.Override protected void executeVmCommand () { super . executeVmCommand () ; org.ovirt.engine.core.bll.AddVmFromTemplateCommand . getVm () . setVmtGuid ( VmTemplateHandler.BLANK_VM_TEMPLATE_ID ) ; org.ovirt.engine.core.bll.AddVmFromTemplateCommand . getVm () . getStaticData () . setQuotaId ( org.ovirt.engine.core.bll.AddVmFromTemplateCommand . getParameters () . getVmStaticData () . getQuotaId () ) ; vmStaticDao . update ( org.ovirt.engine.core.bll.AddVmFromTemplateCommand . getVm () . getStaticData () ) ; checkTrustedService () ; }
private void initExternalProviderList () { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; getExternalProviders () . setItems ( providers ) ; selectExternalProvider () ; } } ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllNetworkProviders ( getProvidersQuery ) ; }
public static void GetClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
protected void initVmForSpace () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setStatus ( VMStatus.Down ) ; org.mockito.Mockito . when ( vmDao . get ( org.mockito.Matchers . any () ) ) . thenReturn ( vm ) ; java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > > vmList = java.util.Collections . singletonList ( new org.ovirt.engine.core.common.utils.Pair ( vm , vmDevice ) ) ; org.mockito.Mockito . when ( vmDao . getVmsWithPlugInfo ( org.mockito.Matchers . any () ) ) . thenReturn ( vmList ) ; }
@ org.junit.Test public void validateSucceeds ( ) throws java.lang.Exception { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , false ) , null ) ) ; prepareMocks () ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic () ; mockVmsPinnedToHost ( java.util.Collections . < java.lang.String > emptyList () ) ; mockIsGlusterEnabled ( false ) ; mockHasVolumeOnServer ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , org.ovirt.engine.core.common.errors.EngineFault > runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper . getVdsDao () . get ( vdsId ) ; if ( ! ( canVDSConnectToGlusterfs ( vds ) ) ) { org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper.log . error ( STRING_CONSTANT , vds . getName () , storageDomain . getName () ) ; addMessageToAuditLog ( AuditLogType.VDS_CANNOT_CONNECT_TO_GLUSTERFS , null , vds ) ; return new org.ovirt.engine.core.common.utils.Pair ( false , null ) ; } return super . runConnectionStorageToDomain ( storageDomain , vdsId , type ) ; }
@ org.junit.Test public void testVmWithDisks () { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > disks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > () ; disks . add ( new org.ovirt.engine.core.common.businessentities.DiskImage () ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , null , disks , null ) , true , null ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVm () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setId ( vmId ) ; vm . setStoragePoolId ( spId ) ; vm . setStatus ( VMStatus.Down ) ; org.mockito.Mockito . when ( vmDao . get ( vmId ) ) . thenReturn ( vm ) ; return vm ; }
private void attachDetachDisk ( org.ovirt.engine.core.common.businessentities.storage.Disk disk , org.ovirt.engine.core.common.action.VdcActionType actionType ) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement oldDve = disk . getDiskVmElementForVm ( oldVmId ) ; runInternalAction ( actionType , new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters ( new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( disk . getId () , org.ovirt.engine.core.bll.CloneVmCommand . getParameters () . getNewVmGuid () ) , oldDve . isPlugged () ) ) ; }
private void remoteFileName ( java.lang.String file ) { if ( ( ( ( file . indexOf ( CHAR_CONS ) ) != ( - NUMBER_CONSTANT ) ) || ( ( file . indexOf ( CHAR_CONS ) ) != ( - NUMBER_CONSTANT ) ) ) || ( ( file . indexOf ( CHAR_CONS ) ) != ( - NUMBER_CONSTANT ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { if ( returnValue != null ) { _defaultConfigurationVersion = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL ; } loginModel . getLoggedInEvent () . raise ( loginModel , EventArgs.EMPTY ) ; }
private void edit () { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getSelectedItem () ) ) ; if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.frontend.AsyncQuery getVmInitQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; getVmInitQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { vmInitLoaded ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getTemplateById ( getVmInitQuery , template . getId () ) ; }
public static org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult ( org.ovirt.engine.core.common.vdscommands.VDSReturnValue result ) { if ( org.apache.commons.lang.StringUtils . isNotEmpty ( result . getExceptionString () ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( ( ( result . getVdsError () ) != null ? result . getVdsError () . getCode () : org.ovirt.engine.core.common.errors.EngineError.ENGINE ) , result . getExceptionString () , result ) ; } return result ; }
@ java.lang.Override public javax.ws.rs.core.Response remove () { org.ovirt.engine.api.model.StorageDomain storageDomain = get () ; if ( storageDomain . getStorage () . getType () . equals ( StorageType.LOCALFS ) ) { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters params = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters ( guid ) ; params . setDoFormat ( true ) ; return performAction ( VdcActionType.RemoveStorageDomain , params ) ; } else { org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters params = new org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters ( guid , dataCenterId ) ; return performAction ( VdcActionType.DetachStorageDomainFromPool , params ) ; } }
@ org.junit.Test public void testEffectiveEmulatedMachineCCV () { final org.ovirt.engine.core.common.businessentities.VmBase vmBase = new org.ovirt.engine.core.common.businessentities.VmBase () ; final org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setEmulatedMachine ( STRING_CONSTANT ) ; vmBase . setCustomCompatibilityVersion ( Version.v4_0 ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , org.ovirt.engine.core.bll.utils.EmulatedMachineUtils . getEffective ( vmBase , ( ) - > cluster ) ) ; }
private void updateSuggestedDiskAlias () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNextAvailableDiskAliasNameByVMId ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String suggestedDiskAlias = ( ( java.lang.String ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( model ) ) ; diskModel . getAlias () . setEntity ( suggestedDiskAlias ) ; } } , getHash () ) , getVm () . getId () ) ; }
private void initVersion () { if ( ! ( isVersionInit ) ) { isVersionInit = true ; for ( org.ovirt.engine.core.compat.Version item : getVersion () . getItems () ) { if ( org.ovirt.engine.core.compat.Version . OpEquality ( item , getEntity () . getcompatibility_version () ) ) { getVersion () . setSelectedItem ( item ) ; break; } } } }
@ org.junit.Test public void validateFailsForDeviceAlreadyInUse () { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice ( STRING_CONSTANT ) ; storageDevice . setCanCreateBrick ( false ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , STRING_CONSTANT , STRING_CONSTANT , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections . singletonList ( storageDevice ) ) , null ) ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { boolean isOk = behavior . isNumOfSocketsCorrect ( java.lang.Integer . parseInt ( getTotalCPUCores () . getEntity () ) ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult res = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult () ; res . setSuccess ( isOk ) ; res . setReasons ( java.util.Arrays . asList ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getMessages () . incorrectVCPUNumber () ) ) ; return res ; }
@ java.lang.Override protected boolean canDoAction () { return ( ( ( validate ( networkExists ( getRemovedNetwork () ) ) ) && ( validate ( notManagementNetwork () ) ) ) && ( validate ( networkNotUsedByVms ( getRemovedNetwork () ) ) ) ) && ( validate ( networkNotUsedByTemplates ( getRemovedNetwork () ) ) ) ; }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void createCluster () { existingCluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; existingCluster . setId ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.CLUSTER_ID ) ; existingCluster . setName ( STRING_CONSTANT ) ; existingCluster . setGlusterService ( true ) ; existingCluster . setVirtService ( false ) ; existingCluster . setGlusterCliBasedSchedulingOn ( true ) ; createObjects () ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils . createDiskDummies ( org.ovirt.engine.core.bll.ImportVmCommand . getVm () . getTotalMemorySizeInBytes () , MemoryUtils.METADATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler . getInstance () . findStorageDomainForMemory ( org.ovirt.engine.core.bll.ImportVmCommand . getParameters () . getStoragePoolId () , memoryDisksList , getVmDisksDummies () , org.ovirt.engine.core.bll.ImportVmCommand . getVm () ) ; disksList . addAll ( memoryDisksList ) ; return storageDomain ; }
@ java.lang.Override public void refreshDetails ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getGlusterRemoveBricksStatus ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity statusEntity = vdcValue . getReturnValue () ; if ( statusEntity != null ) { showStatus ( statusEntity ) ; } } } ) , volumeEntity . getClusterId () , volumeEntity . getId () , getBricks () ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito . doNothing () . when ( glusterUtil ) . connect ( client , org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.USER , org.ovirt.engine.core.bll.utils.GlusterUtilTest.WRONG_PASSWORD ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.OUTPUT_XML ) . when ( glusterUtil ) . executePeerStatusCommand ( client ) ; org.mockito.Mockito . doThrow ( javax.naming.AuthenticationException . class ) . when ( glusterUtil ) . authenticate ( client ) ; }
@ java.lang.Override protected void setAllowChangeHostPlacementPropertiesWhenNotInMaintenance () { org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () ; getDataCenter () . setIsChangeable ( false ) ; getDataCenter () . setChangeProhibitionReason ( constants . dcCanOnlyBeChangedWhenHostInMaintMode () ) ; getCluster () . setIsChangeable ( false ) ; getCluster () . setChangeProhibitionReason ( constants . clusterCanOnlyBeChangedWhenHostInMaintMode () ) ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StorageDomainListReturnForXmlRpc getStorageDomainsList ( java.lang.String sdUUID , int domainType , java.lang.String poolType , java.lang.String path ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . getStorageDomainsList ( sdUUID , domainType , poolType , path ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StorageDomainListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StorageDomainListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
@ java.lang.Override protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllRunningVdssInPool () { java.util.Set < org.ovirt.engine.core.common.businessentities.VDSStatus > vdsStatus = java.util.EnumSet . copyOf ( StoragePoolDomainHelper.vdsDomainsActiveMonitoringStatus ) ; vdsStatus . addAll ( StoragePoolDomainHelper.vdsDomainsMaintenanceMonitoringStatus ) ; return org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand . getVdsDao () . getAllForStoragePoolAndStatuses ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand . getStoragePool () . getId () , vdsStatus ) ; }
private void updateHasSelectedTags () { java.util.List < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > selectedTags = ( ( getTagList () . getSelectedItems () ) != null ) ? getTagList () . getSelectedItems () : new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > () ; setHasSelectedTags ( ( ( ( getSelectedItem () ) != null ) && ( ( selectedTags . size () ) > NUMBER_CONSTANT ) ) ) ; }
public java.lang.String getServerFingerprint ( java.lang.String serverName ) { java.lang.String fingerPrint = null ; try ( final org.ovirt.engine.core.bll.utils.EngineSSHClient client = getEngineSSHClient () ) { client . setHost ( serverName ) ; client . connect () ; fingerPrint = client . getHostFingerprint () ; } catch ( java.lang.Throwable e ) { log . errorFormat ( STRING_CONSTANT , serverName , org.apache.commons.lang.exception.ExceptionUtils . getMessage ( e ) ) ; } return fingerPrint ; }
@ org.junit.Test public void testAddLunDiskMissingId () { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk () ; model . getLunStorage () . getLogicalUnits () . getLogicalUnits () . get ( NUMBER_CONSTANT ) . setId ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
private void createSnapshotsForDisks () { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : getDisksList () ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = executeChildCommand ( image . getImageId () ) ; if ( vdcReturnValue . getSucceeded () ) { getTaskIdList () . addAll ( vdcReturnValue . getInternalVdsmTaskIdList () ) ; } else { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( vdcReturnValue . getFault () . getError () , STRING_CONSTANT ) ; } } }
@ java.lang.Override protected void updateWipeAfterDelete ( org.ovirt.engine.core.common.businessentities.StorageType storageType ) { if ( storageType . isFileDomain () ) { getIsWipeAfterDelete () . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.CONSTANTS . wipeAfterDeleteNotSupportedForFileDomains () ) ; getIsWipeAfterDelete () . setIsChangable ( false ) ; getIsWipeAfterDelete () . setEntity ( false ) ; } else { getIsWipeAfterDelete () . setIsChangable ( true ) ; getIsWipeAfterDelete () . setEntity ( ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( ConfigurationValues.SANWipeAfterDelete ) ) ) ) ; } }
@ java.lang.Override protected org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > createCommand () { org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters param = new org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters () ; param . setVm ( vm ) ; param . setSourceSnapshotId ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommandTest.SOURCE_SNAPSHOT_ID ) ; param . setStorageDomainId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = new org.ovirt.engine.core.bll.AddVmFromSnapshotCommand ( param , null ) ; cmd . setVm ( vm ) ; cmd . setVmId ( vm . getId () ) ; return cmd ; }
@ org.junit.Test public void shouldNotMigrateVmOnClusterTwoWhileMigrating () { final org.ovirt.engine.core.common.businessentities.VM migratingVM = new org.ovirt.engine.core.common.businessentities.VM () ; migratingVM . setClusterId ( cluster2 . getId () ) ; org.mockito.Mockito . when ( clusterDao . getWithoutMigratingVms () ) . thenReturn ( java.util.Collections . singletonList ( cluster1 ) ) ; arem . refresh () ; org.mockito.Mockito . verify ( arem ) . migrateVM ( vm1 ) ; org.mockito.Mockito . verify ( arem , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . migrateVM ( org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override public javax.ws.rs.core.Response importCertificates ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper . getProvider ( this , id ) ; java.util.List < org.ovirt.engine.core.common.businessentities.CertificateInfo > entities = getBackendCollection ( org.ovirt.engine.core.common.businessentities.CertificateInfo . class , VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) ) ; if ( ( entities . size () ) == NUMBER_CONSTANT ) { return null ; } return null ; }
private javax.servlet.http.HttpSession getSession () { javax.servlet.http.HttpServletRequest request = this . getThreadLocalRequest () ; javax.servlet.http.HttpSession session = request . getSession () ; org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log . debug ( ( ( ( ( STRING_CONSTANT + ( request . getRemoteAddr () ) ) + STRING_CONSTANT ) + ( session . getId () ) ) + STRING_CONSTANT ) ) ; return session ; }
protected void updateDataCenterVersion () { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model . setDataCenterVersion ( storagePool . getcompatibility_version () ) ; } } ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getDataCenterById ( query , getEntity () . getStoragePoolId () ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects () { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissions = new java.util.ArrayList < org.ovirt.engine.core.bll.utils.PermissionSubject > () ; permissions . add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.bll.ForceSelectSPMCommand . getParameters () . getPreferredSPMId () , org.ovirt.engine.core.common.VdcObjectType.VDS , org.ovirt.engine.core.common.businessentities.ActionGroup.MANIPUTLATE_HOST ) ) ; return permissions ; }
protected void synchronizeNics ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > nics , org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager () ; vmInterfaceManager . removeAll ( vmId ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmInterface : nics ) { if ( ( vmInterface . getId () ) == null ) { vmInterface . setId ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; } vmInterface . setVmId ( vmId ) ; vmInterfaceManager . add ( vmInterface , compensationContext , false ) ; } }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setStatus ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ; model . setLunStorage ( new org.ovirt.engine.api.model.HostStorage () ) ; return model ; }
protected void verifyModel ( org.ovirt.engine.api.model.Group model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertEquals ( NAMES [ index ] , model . getName () ) ; assertNotNull ( model . getDomain () ) ; verifyLinks ( model ) ; }
@ org.junit.Test public void testGetEntityNameByIdAndTypeForVmTemplate () { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao . get ( org.ovirt.engine.core.dao.EntityDaoImplTest.VM_TEMPLATE_ID ) ; org.junit.Assert . assertNotNull ( vmTemplate ) ; java.lang.String name = vmTemplate . getName () ; org.junit.Assert . assertEquals ( name , underTest . getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.VM_TEMPLATE_ID , VdcObjectType.VmTemplate ) ) ; }
protected void setUpGetSystemStatisticsExpectations () { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = createMock ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue . class ) ; org.easymock.EasyMock . expect ( backend . runQuery ( org.easymock.EasyMock . eq ( VdcQueryType.GetSystemStatistics ) , queryParams () ) ) . andReturn ( queryResult ) ; org.easymock.EasyMock . expect ( queryResult . getSucceeded () ) . andReturn ( true ) . anyTimes () ; org.easymock.EasyMock . expect ( queryResult . getReturnValue () ) . andReturn ( setUpStats () ) . anyTimes () ; replayAll () ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE ; org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue . getReturnValue () ; if ( profile != null ) { setUserProfile ( profile ) ; connectAutomatically = profile . isUserPortalVmLoginAutomatically () ; model . getPublicKey () . setEntity ( profile . getSshPublicKey () ) ; } model . getEnableConnectAutomatically () . setEntity ( connectAutomatically ) ; }
@ org.junit.Test public void failWhenNoAgentsExist () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setPmEnabled ( true ) ; java.util.List < java.lang.String > messages = new java.util.LinkedList <> () ; boolean result = validator . isPowerManagementEnabledAndLegal ( vds , null , messages ) ; org.junit.Assert . assertFalse ( result ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , messages . size () ) ; org.junit.Assert . assertTrue ( messages . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( messages . contains ( STRING_CONSTANT ) ) ; }
@ java.lang.Override protected void executeCommand () { final org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction ( VdcActionType.DetachNetworkFromClusterInternal , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToClusterCommand . getParameters () ) ; setSucceeded ( returnValue . getSucceeded () ) ; if ( returnValue . getSucceeded () ) { if ( org.ovirt.engine.core.bll.network.cluster.NetworkHelper . shouldRemoveNetworkFromHostUponNetworkRemoval ( getPersistedNetwork () ) ) { detachLabeledNetworksFromClusterHosts () ; } } else { propagateFailure ( returnValue ) ; } }
@ org.junit.Test public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmTemplate , org.ovirt.engine.core.common.action.VmTemplateParametersBase . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , true , true ) ) ; verifyRemove ( collection . remove ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ) ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( volumeDao ) . when ( cmd ) . getGlusterVolumeDao () ; org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getSingleBrickVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito . doReturn ( getMultiBrickVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot ) { if ( snapshot == null ) { return null ; } org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus status = snapshot . getStatus () ; java.lang.String tooltip ; switch ( status ) { case ACTIVATED : tooltip = org.ovirt.engine.ui.webadmin.widget.table.column.GlusterVolumeSnapshotStatusColumn.constants . up () ; break; case DEACTIVATED : tooltip = org.ovirt.engine.ui.webadmin.widget.table.column.GlusterVolumeSnapshotStatusColumn.constants . down () ; break; case UNKNOWN : tooltip = org.ovirt.engine.ui.webadmin.widget.table.column.GlusterVolumeSnapshotStatusColumn.constants . unknown () ; break; default: tooltip = org.ovirt.engine.ui.webadmin.widget.table.column.GlusterVolumeSnapshotStatusColumn.constants . down () ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils . fromSafeConstant ( tooltip ) ; }
@ java.lang.Override @ org.junit.Test public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales . add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , t ) ; collection . setUriInfo ( uriInfo ) ; try { getCollection () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales . clear () ; } }
protected void initHosts () { startProgress () ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getHostListByClusterId ( new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getPinnedHost () . setItems ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VDS > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; stopProgress () ; selectCurrentPinnedHost () ; } } ) , vm . getVdsGroupId () ) ; }
private void mockProxyHost ( boolean anotherProxyAvailable ) { org.ovirt.engine.core.common.businessentities.VDS proxyHost = new org.ovirt.engine.core.common.businessentities.VDS () ; proxyHost . setId ( org.ovirt.engine.core.bll.pm.FenceAgentExecutorTest.PROXY_HOST_ID ) ; org.mockito.Mockito . when ( proxyLocator . findProxyHost ( true ) ) . thenReturn ( proxyHost ) ; if ( anotherProxyAvailable ) { org.ovirt.engine.core.common.businessentities.VDS secondProxyHost = new org.ovirt.engine.core.common.businessentities.VDS () ; secondProxyHost . setId ( org.ovirt.engine.core.bll.pm.FenceAgentExecutorTest.SECOND_PROXY_HOST_ID ) ; org.mockito.Mockito . when ( proxyLocator . findProxyHost ( true , org.ovirt.engine.core.bll.pm.FenceAgentExecutorTest.PROXY_HOST_ID ) ) . thenReturn ( secondProxyHost ) ; } }
protected boolean performImagesChecks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.bll.ImagesHandler . PerformImagesChecks ( vm , org.ovirt.engine.core.bll.AddDiskCommand . getReturnValue () . getCanDoActionMessages () , vm . getstorage_pool_id () , getStorageDomainId () . getValue () , false , true , false , false , true , false , false , true , null ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase RunActionWithinThreadCompat ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters ) { try { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.bll.RegisterVdsQuery < P > . WaitCallback cb = new WaitCallback ( latch , actionType , actionParameters ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil . execute ( cb ) ; try { latch . await () ; } catch ( java.lang.InterruptedException e ) {} return cb . getReturnValue () ; } catch ( java.lang.RuntimeException ex ) { log . error ( STRING_CONSTANT , ex ) ; return null ; } }
@ java.lang.Override protected com.google.gwt.resources.client.ImageResource getStatusImage () { org.ovirt.engine.core.common.businessentities.network.NetworkStatus netStatus = item . getStatus () ; if ( netStatus == ( org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.InternalNetworkPanel.resources . upImage () ; } else if ( netStatus == ( org.ovirt.engine.core.common.businessentities.network.NetworkStatus.NON_OPERATIONAL ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.InternalNetworkPanel.resources . downImage () ; } else { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.InternalNetworkPanel.resources . questionMarkImage () ; } }
private static void copyFile ( java.lang.String srcFilePath , java.lang.String dstFilePath ) throws java.io.IOException { try ( java.io.FileInputStream in = new java.io.FileInputStream ( srcFilePath ) ) { try ( java.io.FileOutputStream out = new java.io.FileOutputStream ( dstFilePath ) ) { byte [] buf = new byte [ NUMBER_CONSTANT ] ; int len ; while ( ( len = in . read ( buf ) ) > NUMBER_CONSTANT ) { out . write ( buf , NUMBER_CONSTANT , len ) ; } } } }
@ org.junit.Test public void testBuildVmNumatuneSetting ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory . buildVmNumatuneSetting ( org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , numaTune . size () ) ; org.junit.Assert . assertTrue ( numaTune . containsKey ( VdsProperties.NUMA_TUNE_MODE ) ) ; org.junit.Assert . assertEquals ( NumaTuneMode.INTERLEAVE . getValue () , numaTune . get ( VdsProperties.NUMA_TUNE_MODE ) ) ; org.junit.Assert . assertTrue ( numaTune . containsKey ( VdsProperties.NUMA_TUNE_NODESET ) ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , numaTune . get ( VdsProperties.NUMA_TUNE_NODESET ) ) ; }
@ org.junit.Test public void testCheckGlusterQuorumWithoutRequiredVolumeOptions () { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster ( true ) ; java.lang.Iterable < org.ovirt.engine.core.compat.Guid > hostIds = java.util.Arrays . asList ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > glusterVolumes = getGlusterVolumes ( GlusterStatus.UP ) ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : glusterVolumes ) { volume . setOptions ( STRING_CONSTANT ) ; } org.mockito.Mockito . doReturn ( glusterVolumes ) . when ( volumeDao ) . getByClusterId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.CLUSTER_ID ) ; org.junit.Assert . assertTrue ( hostValidator . checkGlusterQuorum ( cluster , hostIds ) . isEmpty () ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > pools ) { if ( ( pools != null ) && ( ! ( pools . isEmpty () ) ) ) { pool = pools . get ( NUMBER_CONSTANT ) ; checkVmsDependentOnTemplate ( pool . getId () , getEntity () . getId () ) ; } }
private void populateVdsAndVmsList () { final java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = vmDao . getAll () ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( ( ! ( vm . isNotRunning () ) ) && ( ( vm . getRunOnVds () ) != null ) ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils . addToMap ( vm . getRunOnVds () , vm . getId () , vdsAndVmsList , new org.ovirt.engine.core.utils.collections.MultiValueMapUtils.HashSetCreator <> () ) ; } } }
@ org.junit.Test public void testGetWatchDogModels ( ) throws java.lang.Exception { java.util.List < java.lang.String > watchDogModels = OsRepositoryImpl.INSTANCE . getWatchDogModels ( NUMBER_CONSTANT , null ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , watchDogModels . size () ) ; for ( java.lang.String model : org.ovirt.engine.core.utils.OsRepositoryImplTest.WATCH_DOG_MODELS . split ( STRING_CONSTANT ) ) { org.junit.Assert . assertTrue ( watchDogModels . contains ( model . trim () ) ) ; } }
@ org.junit.Test public void testCannotUpdateOSNotSupportVirtioScsi () { prepareVmToPassValidate () ; group . setCompatibilityVersion ( Version.v3_6 ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isVirtioScsiEnabledForVm ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.bll.UpdateVmCommandTest.osRepository . getDiskInterfaces ( org.mockito.ArgumentMatchers . anyInt () , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . singletonList ( STRING_CONSTANT ) ) ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI ) ; }
protected void runAddAndVerify ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface , boolean addMacResult , org.mockito.verification.VerificationMode addMacVerification , boolean expectedResult ) { org.mockito.Mockito . when ( macPoolManager . AddMac ( iface . getMacAddress () ) ) . thenReturn ( addMacResult ) ; org.junit.Assert . assertEquals ( expectedResult , vmInterfaceManager . add ( iface , org.ovirt.engine.core.bll.context.NoOpCompensationContext . getInstance () , false ) ) ; verifyAddDelegatedCorrectly ( iface , addMacVerification ) ; }
@ java.lang.Override public int hashCode () { final int prime = NUMBER_CONSTANT ; int result = NUMBER_CONSTANT ; result = ( prime * result ) + ( actionType ) ; result = ( prime * result ) + ( ( clusterMinimalVersion ) == null ? NUMBER_CONSTANT : clusterMinimalVersion . hashCode () ) ; result = ( prime * result ) + ( ( storagePoolMinimalVersion ) == null ? NUMBER_CONSTANT : storagePoolMinimalVersion . hashCode () ) ; return result ; }
public static void addDiskToVm ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getBaseDiskDao () . save ( disk ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , vmId ) , VmDeviceGeneralType.DISK , VmDeviceType.DISK , null , true , false , null , false ) ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.GlusterVolume volume ) { validateParameters ( volume , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; validateEnumParameters ( volume ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getMapper ( org.ovirt.engine.api.model.GlusterVolume . class , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity . class ) . map ( volume , null ) ; volumeEntity . setClusterId ( asGuid ( parent . get () . getId () ) ) ; mapBricks ( volume , volumeEntity ) ; return performCreation ( VdcActionType.CreateGlusterVolume , new org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters ( volumeEntity ) , new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterVolumeById , org.ovirt.engine.core.common.queries.gluster.IdQueryParameters . class ) , true ) ; }
private void unlinkingTest ( org.ovirt.engine.core.bll.ValidationResult expected , boolean networkLinkingSupported , boolean nicLinked ) { mockConfigRule . mockConfigValue ( ConfigValues.NetworkLinkingSupported , version , networkLinkingSupported ) ; org.mockito.Mockito . when ( nic . isLinked () ) . thenReturn ( nicLinked ) ; org.junit.Assert . assertEquals ( expected , validator . linkedCorrectly () ) ; }
@ org.junit.Test public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.DataCenter model = org.ovirt.engine.api.restapi.resource.BackendDataCentersResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setId ( GUIDS [ NUMBER_CONSTANT ] . toString () ) ; try { resource . update ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public static org.ovirt.engine.api.model.PermitType valueOf ( org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { for ( org.ovirt.engine.api.model.PermitType permitType : org.ovirt.engine.api.model.PermitType . values () ) { if ( actionGroup . equals ( permitType . getActionGroup () ) ) { return permitType ; } } throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_CONSTANT + ( actionGroup . name () ) ) + STRING_CONSTANT ) + ( org.ovirt.engine.api.model.PermitType . class . getName () ) ) + STRING_CONSTANT ) ) ; }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > () ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params . setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
@ java.lang.Override public void executeSave () { org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > parameters = new org.ovirt.engine.core.common.action.QosParametersBase () ; parameters . setQos ( networkQoS ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.UpdateNetworkQoS , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1 ) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1 . getReturnValue () ; boolean succeeded = false ; if ( ( retVal != null ) && ( retVal . getSucceeded () ) ) { succeeded = true ; } postSaveAction ( succeeded ) ; } } ) ; }
@ org.junit.Test public void testChangeCdNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( null ) ; try { resource . update ( getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.B_ISO ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void copyVmDevices () { org.ovirt.engine.core.bll.utils.VmDeviceUtils . copyVmDevices ( vmDevicesSourceId , org.ovirt.engine.core.bll.AddVmCommand . getVmId () , getSrcDeviceIdToTargetDeviceIdMapping () , isSoundDeviceEnabled () , org.ovirt.engine.core.bll.AddVmCommand . getParameters () . isConsoleEnabled () , isVirtioScsiEnabled () , isBalloonEnabled () , org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getGraphicsDevices () . keySet () , false ) ; if ( ( org.ovirt.engine.core.bll.AddVmCommand . getInstanceTypeId () ) != null ) { copyDiskDevicesFromTemplate () ; } }
private void setUpMockUpForRestart () { prepareMocks () ; org.mockito.Mockito . when ( serviceDao . getByServiceType ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( getGlusterServiceListByServiceType ( ServiceType.GLUSTER_SWIFT , GlusterServiceStatus.RUNNING ) ) ; org.mockito.Mockito . doReturn ( getGlusterServerServicesByServerIdAndServiceType ( org.ovirt.engine.core.compat.Guid . newGuid () , ServiceType.GLUSTER_SWIFT , GlusterServiceStatus.RUNNING ) ) . when ( serverServiceDao ) . getByServerIdAndServiceType ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Test public void commandFailsNoPubKeys () { java.util.List < java.lang.String > pubKeys = new java.util.ArrayList <> () ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHostPubKeyToSlaveInternalCommand ( new org.ovirt.engine.core.common.action.gluster.UpdateGlusterHostPubKeyToSlaveParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , pubKeys ) , null ) ) ; org.mockito.Mockito . doReturn ( vds ) . when ( command ) . getUpServer () ; org.junit.Assert . assertFalse ( command . validate () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.VDS > hostNameListModel = getExternalHostName () ; hostNameListModel . setItems ( hosts ) ; hostNameListModel . setIsChangeable ( true ) ; setEnableSearchHost ( true ) ; getProviders () . setIsChangeable ( true ) ; }
public static java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > getDiskImagesByIdMap ( java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > result = new java.util.HashMap <> () ; if ( diskImages != null ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages ) { result . put ( diskImage . getImageId () , diskImage ) ; } } return result ; }
public void addUsbSlots ( org.ovirt.engine.core.compat.Guid vmId , int numberOfSlots ) { for ( int index = NUMBER_CONSTANT ; index <= numberOfSlots ; index ++ ) { addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmId ) , VmDeviceGeneralType.REDIR , VmDeviceType.SPICEVMC , org.ovirt.engine.core.bll.utils.VmDeviceUtils.EMPTY_SPEC_PARAMS , true , false ) ; } }
@ java.lang.Override public org.ovirt.engine.api.model.AffinityGroup update ( final org.ovirt.engine.api.model.AffinityGroup incoming ) { return performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetAffinityGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) , VdcActionType.EditAffinityGroup , new org.ovirt.engine.api.restapi.resource.ParametersProvider < org.ovirt.engine.api.model.AffinityGroup , org.ovirt.engine.api.model.AffinityGroup > () { @ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.AffinityGroup model , org.ovirt.engine.api.model.AffinityGroup entity ) { return new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters ( guid , map ( incoming , entity ) ) ; } } ) ; }
@ org.junit.Test public void versionDecreaseLowerVersionThanDC () { createCommandWithOlderVersion () ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito . mock ( org.ovirt.engine.core.dao.StoragePoolDao . class ) ; org.mockito.Mockito . when ( storagePoolDao2 . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createStoragePoolLocalFSOldVersion () ) ; org.mockito.Mockito . doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( storagePoolDao2 ) . when ( dbFacadeMock ) . getStoragePoolDao () ; setupCpu () ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION_UNDER_DC ) ; }
@ java.lang.Override public com.google.gwt.resources.client.ImageResource getValue ( T value ) { setTitle ( value . getComment () ) ; if ( ( ( value . getComment () ) != null ) && ( ! ( value . getComment () . isEmpty () ) ) ) { return org.ovirt.engine.ui.webadmin.widget.table.column.CommentColumn . getApplicationResources () . commentImage () ; } return null ; }
@ org.junit.Test public void testAddLunDisk_MissingId () { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk () ; model . getLunStorage () . getLogicalUnits () . getLogicalUnits () . get ( NUMBER_CONSTANT ) . setId ( null ) ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = returnValue . getReturnValue () ; java.util.Collections . sort ( vms , new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericNameableComparator () ) ; setItems ( vms ) ; setIsEmpty ( ( ( vms . size () ) == NUMBER_CONSTANT ) ) ; }
private void hostName_SelectedItemChanged () { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getExternalHostName () . getSelectedItem () ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS () ; } updateModelFromVds ( vds , null , false , null ) ; }
private static java.util.Map < java.lang.String , java.lang.String > mapExternalRoleMapping ( org.ovirt.engine.api.model.RegistrationRoleMappings model ) { return model . getRegistrationRoleMappings () . stream () . collect ( java.util.stream.Collectors . toMap ( ( registrationMap ) - > registrationMap . isSetFrom () ? registrationMap . getFrom () . getName () : null , ( registrationMap ) - > registrationMap . isSetTo () ? org.ovirt.engine.api.restapi.types.RoleMapper . map ( registrationMap . getTo () , null ) . getName () : null ) ) ; }
@ java.lang.Override public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Throwable { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > toReturn = new java.util.LinkedList <> () ; for ( org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo > , org.ovirt.engine.core.common.businessentities.StorageDomain > pair : poolDomainsOvfInfo . values () ) { toReturn . add ( pair . getSecond () ) ; } return toReturn ; }
private boolean isAlreadyInRequestedStatus () { boolean ret = false ; org.ovirt.engine.core.common.businessentities.pm.FenceActionType action = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand . getParameters () . getAction () ; _result = fenceNode ( FenceActionType.STATUS ) ; if ( ( _result.power ) != null ) { java.lang.String powerStatus = _result.power . toLowerCase () ; if ( ( ( action == ( org.ovirt.engine.core.common.businessentities.pm.FenceActionType.START ) ) && ( powerStatus . equals ( STRING_CONSTANT ) ) ) || ( ( action == ( org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STOP ) ) && ( powerStatus . equals ( STRING_CONSTANT ) ) ) ) ret = true ; } return ret ; }
private static org.ovirt.engine.api.rsdl.ServiceTreeNode buildNode ( java.lang.Class < > resource , java.lang.String path ) { org.ovirt.engine.api.rsdl.ServiceTreeNode node = new org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder () . name ( resource . getSimpleName () ) . path ( path ) . subCollections ( org.ovirt.engine.api.rsdl.ServiceTree . getSubServices ( resource ) ) . actions ( org.ovirt.engine.api.rsdl.ServiceTree . getActions ( resource ) ) . build () ; if ( ! ( org.ovirt.engine.api.rsdl.ServiceTree.nodes . containsKey ( resource ) ) ) { org.ovirt.engine.api.rsdl.ServiceTree.nodes . put ( resource , node ) ; } return node ; }
@ org.junit.Test public void testListIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpUriExpectations ( null ) ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; setUpQueryExpectations ( STRING_CONSTANT ) ; java.util.List < org.ovirt.engine.api.model.NIC > nics = getCollection () ; assertTrue ( nics . get ( NUMBER_CONSTANT ) . isSetStatistics () ) ; verifyCollection ( nics ) ; } finally { accepts . clear () ; } }
@ org.junit.Test public void testGuestFQDN () { org.ovirt.engine.api.model.VM vm = new org.ovirt.engine.api.model.VM () ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic () ; vmDynamic . setStatus ( VMStatus.Up ) ; vmDynamic . setVmFQDN ( STRING_CONSTANT ) ; vm . setDynamicData ( vmDynamic ) ; org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper . map ( vm , ( ( org.ovirt.engine.api.model.VM ) ( null ) ) ) ; assertNotNull ( map . getGuestInfo () . getFqdn () ) ; assertEquals ( map . getGuestInfo () . getFqdn () , STRING_CONSTANT ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override protected java.util.Collection < org.ovirt.engine.core.common.businessentities.VmTemplate > getEntitiesFromExportDomain () { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenterId ( storageDomainId ) , storageDomainId ) ; java.util.Map < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.core.common.queries.DiskImageList > ret = getEntity ( java.util.HashMap . class , VdcQueryType.GetTemplatesFromExportDomain , params , ( STRING_CONSTANT + ( storageDomainId . toString () ) ) ) ; return ret . keySet () ; }
protected java.lang.Object resolveCreated ( org.ovirt.engine.core.common.action.VdcReturnValueBase result , org.ovirt.engine.api.restapi.resource.EntityResolver entityResolver , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParentType ) { try { return entityResolver . resolve ( ( ( org.ovirt.engine.core.compat.Guid ) ( result . getActionReturnValue () ) ) ) ; } catch ( java.lang.Exception e ) { return null ; } }
private void initSpmPriorities () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getMaxSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.maxSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; initSpmPriorities1 () ; } } ) ) ; }
@ org.junit.Test public void mapModel () { for ( org.ovirt.engine.api.model.WatchdogModel model : org.ovirt.engine.api.model.WatchdogModel . values () ) { org.ovirt.engine.core.common.businessentities.VmWatchdogType backendModel = org.ovirt.engine.api.restapi.types.WatchdogMapper . map ( model ) ; org.junit.Assert . assertNotNull ( backendModel ) ; org.junit.Assert . assertEquals ( backendModel . name () . toLowerCase () , model . name () . toLowerCase () ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetStepsByJobId , org.ovirt.engine.core.common.queries.GetStepsByJobIdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , setUpSteps () , failure ) ; }
@ org.junit.Test public void enableNewAddtionalFeatureWhenHostSupports () { createCommandWithAddtionalFeature () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; cpuExists () ; cpuFlagsNotMissing () ; clusterHasVds () ; org.mockito.Mockito . when ( hostFeatureDao . getSupportedHostFeaturesByHostId ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . singleton ( STRING_CONSTANT ) ) ; initAndAssertValidation ( true ) ; }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.DataCenter dataCenter ) { validateParameters ( dataCenter , STRING_CONSTANT ) ; if ( ! ( dataCenter . isSetLocal () ) ) { validateParameters ( dataCenter , STRING_CONSTANT ) ; } org.ovirt.engine.core.common.businessentities.StoragePool entity = map ( dataCenter ) ; return performCreate ( VdcActionType.AddEmptyStoragePool , new org.ovirt.engine.core.common.action.StoragePoolManagementParameter ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStoragePoolById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ) ; }
@ org.junit.Test public void insertNewVariable () { org.ovirt.engine.core.common.ExternalVariable newVar = new org.ovirt.engine.core.common.ExternalVariable () ; newVar . setName ( STRING_CONSTANT ) ; newVar . setValue ( STRING_CONSTANT ) ; newVar . setUpdateDate ( new java.util.Date () ) ; dao . save ( newVar ) ; org.ovirt.engine.core.common.ExternalVariable found = dao . get ( newVar . getName () ) ; org.junit.Assert . assertNotNull ( found ) ; org.junit.Assert . assertEquals ( newVar , found ) ; }
protected void postDiscoverTargetsInternal ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > newItems ) { if ( newItems . isEmpty () ) { setMessage ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () . noNewDevicesWereFoundMsg () ) ; return; } java.util.SortedSet < org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel > targetsSet = getTargetsSet () ; targetsSet . addAll ( getTargets () . getItems () ) ; targetsSet . addAll ( getSanTargetModels ( newItems . iterator () ) ) ; getTargets () . setItems ( new java.util.ArrayList ( targetsSet ) ) ; proposeDiscover () ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void assertAllDisksAreActive ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { if ( disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk ) { continue; } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , diskImage . getActive () ) ; } }
private java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.DiskImage > getDiskImagesByIdMap ( java.util.Collection < org.ovirt.engine.api.model.Disk > values ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.DiskImage > result = new java.util.HashMap <> () ; for ( org.ovirt.engine.api.model.Disk diskImage : values ) { result . put ( diskImage . getId () , ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( diskImage ) ) ) ; } return result ; }
public boolean supportedForUnitVmModel ( org.ovirt.engine.core.common.queries.ConfigurationValues feature , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.core.compat.Version version = model . getCompatibilityVersion () ; if ( version == null ) { return false ; } else { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getConfigValuePreConverted ( feature , version . getValue () ) ) ) ; } }
public void onSetupNetworks () { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNetworkConnectivityCheckTimeoutInSeconds ( new org.ovirt.engine.ui.frontend.AsyncQuery ( sourceListModel , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { getConnectivityTimeout () . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; postOnSetupNetworks () ; } } ) ) ; }
@ org.junit.Test public void testDoGet_ExtraAttributes_WithoutUserInfoObject ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito . doReturn ( mockApplicationModeObject ) . when ( testServlet ) . getApplicationModeObject ( org.mockito.ArgumentMatchers . nullable ( java.lang.Integer . class ) ) ; org.mockito.Mockito . doReturn ( mockPluginDefinitionsArray ) . when ( testServlet ) . getPluginDefinitionsArray ( org.mockito.ArgumentMatchers . any () ) ; testServlet . doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( WebAdminHostPageServlet.ATTR_APPLICATION_MODE , mockApplicationModeObject ) ; org.mockito.Mockito . verify ( mockRequest ) . setAttribute ( WebAdminHostPageServlet.ATTR_PLUGIN_DEFS , mockPluginDefinitionsArray ) ; }
@ org.junit.Test public void getExistingVariable () { org.ovirt.engine.core.common.ExternalVariable expected = new org.ovirt.engine.core.common.ExternalVariable () ; expected . setName ( STRING_CONSTANT ) ; org.ovirt.engine.core.common.ExternalVariable found = dao . get ( expected . getName () ) ; org.junit.Assert . assertNotNull ( found ) ; org.junit.Assert . assertEquals ( expected , found ) ; org.junit.Assert . assertNotNull ( found . getUpdateDate () ) ; }
protected org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > setupCanAddVmFromSnapshotTests ( final int domainSizeGB , org.ovirt.engine.core.compat.Guid sourceSnapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB ) ; initializeVmDaoMock ( vm ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = createVmFromSnapshotCommand ( vm , sourceSnapshotId ) ; org.ovirt.engine.core.bll.AddVmCommandTest . initCommandMethods ( cmd ) ; return cmd ; }
protected java.lang.String getColumnWidthKey ( com.google.gwt.user.cellview.client.Column < T , > column ) { if ( columnResizePersistenceEnabled ) { return ( ( ( ( org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.GRID_COLUMN_WIDTH_PREFIX ) + STRING_CONSTANT ) + ( getGridElementId () ) ) + STRING_CONSTANT ) + ( getColumnIndex ( column ) ) ; } return null ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = org.ovirt.engine.core.common.businessentities.SsoMethod . class , to = org.ovirt.engine.api.model.Sso . class ) public static org.ovirt.engine.api.model.Sso map ( org.ovirt.engine.core.common.businessentities.SsoMethod entity , org.ovirt.engine.api.model.Sso template ) { org.ovirt.engine.api.model.Sso model = ( template == null ) ? new org.ovirt.engine.api.model.Sso () : template ; model . setMethods ( new org.ovirt.engine.api.model.Methods () ) ; if ( entity == ( org.ovirt.engine.core.common.businessentities.SsoMethod.GUEST_AGENT ) ) { org.ovirt.engine.api.model.Method method = new org.ovirt.engine.api.model.Method () ; method . setId ( org.ovirt.engine.api.model.SsoMethod.GUEST_AGENT ) ; model . getMethods () . getMethods () . add ( method ) ; } return model ; }
protected void updateConsoleDevice ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetConsoleDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > consoleDevices = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; getModel () . getIsConsoleDeviceEnabled () . setEntity ( ( ! ( consoleDevices . isEmpty () ) ) ) ; } } ) ) ; }
@ java.lang.Override public java.util.ArrayList < java.lang.Integer > get64bitOss () { java.util.ArrayList < java.lang.Integer > oss = new java.util.ArrayList < java.lang.Integer > () ; for ( int osId : getOsIds () ) { java.lang.String bus = getValueByVersion ( idToUnameLookup . get ( osId ) , STRING_CONSTANT , null ) ; if ( STRING_CONSTANT . equalsIgnoreCase ( bus ) ) { oss . add ( osId ) ; } } return oss ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getGlusterHook ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String glusterCommand , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStage stage , java.lang.String hookName ) { return getCallsHandler () . executeRead ( STRING_CONSTANT , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoImpl.glusterHookRowMapper , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , clusterId ) . addValue ( STRING_CONSTANT , glusterCommand ) . addValue ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.EnumUtils . nameOrNull ( stage ) ) . addValue ( STRING_CONSTANT , hookName ) . addValue ( STRING_CONSTANT , false ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice ( org.ovirt.engine.core.compat.Guid vmGuid ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , vmGuid ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , STRING_CONSTANT , STRING_CONSTANT , new java.util.HashMap <> () , true , false , false , STRING_CONSTANT , java.util.Collections . singletonMap ( STRING_CONSTANT , STRING_CONSTANT ) , null , null ) ; }
@ org.junit.Before public void mockDbFacade () { org.powermock.api.mockito.PowerMockito . mockStatic ( org.ovirt.engine.core.dal.dbbroker.DbFacade . class ) ; org.mockito.Mockito . when ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () ) . thenReturn ( db ) ; org.mockito.Mockito . when ( db . getVdsGroupDAO () ) . thenReturn ( vdsGroupDAO ) ; org.mockito.Mockito . when ( vdsGroupDAO . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( mockVirtVDSGroup () ) . thenReturn ( mockGlusterVDSGroup () ) . thenReturn ( mockBothVDSGroup () ) ; }
@ org.junit.Test public void getVdsWithVdsId () { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; b . setVdsId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , v . getId () ) ; }
@ java.lang.Override protected void ExecuteVdsBrokerCommand () { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.CancelMigrateVDSCommand . getParameters () . getVmId () ; status = org.ovirt.engine.core.vdsbroker.vdsbroker.CancelMigrateVDSCommand . getBroker () . migrateCancel ( vmId . toString () ) ; ProceedProxyReturnValue () ; org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . RemoveAsyncRunningVm ( vmId ) ; }
private void parseSecondArgWithKeyValue ( java.lang.String arg , java.lang.String key , java.lang.String value ) { if ( isSetOrMergeAction () ) { engineConfigMap . setKey ( key ) ; engineConfigMap . setValue ( value ) ; } else { throw new java.lang.IllegalArgumentException ( ( ( STRING_CONSTANT + arg ) + STRING_CONSTANT ) ) ; } }
private void initCommand () { final org.ovirt.engine.core.compat.Guid sourceSnapshotId = org.ovirt.engine.core.compat.Guid . newGuid () ; command = setupCanAddVmFromSnapshotTests ( NUMBER_CONSTANT , sourceSnapshotId ) ; generateStorageToDisksMap ( command ) ; initDestSDs ( command ) ; storageDomainValidator = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator . class ) ; snapshotsValidator = org.mockito.Mockito . mock ( org.ovirt.engine.core.bll.snapshots.SnapshotsValidator . class ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( args != null ) && ( args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ; if ( STRING_CONSTANT . equals ( propName ) ) { passwordSetEditor . setTitle ( ( model . getPasswordSet () . getIsChangable () ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants . vmInitPasswordSetToolTip () : org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants . vmInitPasswordNotSetToolTip () ) ) ; } } }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk () ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
@ org.junit.Test public void testRemoveForced ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveDisk , org.ovirt.engine.core.common.action.RemoveDiskParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendTemplateDiskResource.FORCE , java.lang.Boolean.TRUE . toString () ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource . remove () ) ; }
@ org.junit.Test ( expected = java.lang.NullPointerException . class ) public void appendCustomValueDoesntHandleNullKeys () { final java.lang.String key = null ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String sep = STRING_CONSTANT ; b . appendCustomValue ( key , value , sep ) ; final java.lang.String s = b . getCustomValue ( key ) ; org.junit.Assert . assertEquals ( value , s ) ; }
@ java.lang.Override protected void onBind () { super . onBind () ; org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel < > tableSelectionModel = ( ( getTable () ) != null ) ? getTable () . getSelectionModel () : null ; if ( tableSelectionModel != null ) { registerHandler ( tableSelectionModel . addSelectionChangeHandler ( new com.google.gwt.view.client.SelectionChangeEvent.Handler () { @ java.lang.Override public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { updateDetailModelSelection () ; } } ) ) ; } }
private static void addPortMirroringToVmInterface ( java.util.Map < java.lang.String , java.lang.Object > struct , org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( ( vnicProfile != null ) && ( vnicProfile . isPortMirroring () ) ) { struct . put ( VdsProperties.PORT_MIRRORING , ( network == null ? java.util.Collections . < java.lang.String > emptyList () : java.util.Collections . singletonList ( network . getName () ) ) ) ; } }
public final void AddField ( java.lang.Enum < > status , java.lang.String fieldName ) { java.util.List < java.lang.String > values = null ; if ( ! ( ( values = mDictionary . get ( status ) ) != null ) ) { values = new java.util.ArrayList < java.lang.String > () ; mDictionary . put ( status , values ) ; } if ( ! ( values . contains ( fieldName ) ) ) { values . add ( fieldName ) ; } }
@ java.lang.Override public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Tag tag ) { validateParameters ( tag , STRING_CONSTANT ) ; if ( isSetParentName ( tag ) ) { tag . getParent () . setId ( getParentId ( tag ) ) ; } return performCreate ( VdcActionType.AddTag , new org.ovirt.engine.core.common.action.TagsOperationParameters ( map ( tag ) ) , new org.ovirt.engine.api.restapi.resource.BackendTagsResource.TagNameResolver ( tag . getName () ) ) ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.businessentities.aaa.DbUser > getUsers () { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.aaa.DbUser > users = new java.util.ArrayList <> () ; for ( int i = NUMBER_CONSTANT ; i < ( NAMES.length ) ; i ++ ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser () ; user . setId ( GUIDS [ i ] ) ; user . setLoginName ( NAMES [ i ] ) ; users . add ( user ) ; } return users ; }
@ java.lang.Override protected void endWithFailure () { if ( ( commandCoordinatorUtil . getCommandExecutionStatus ( org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand . getCommandId () ) ) != ( org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED ) ) { changeStorageDomainStatusInTransaction ( loadStoragePoolIsoMap () , StorageDomainStatus.Unknown ) ; auditLogDirector . log ( this , AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE ) ; } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand . setSucceeded ( true ) ; }
public void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < > ) ( source ) ) . isEmpty () ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private java.lang.String getMemoryFromSnapshot () { if ( memoryFromSnapshotUsed ) { return org.apache.commons.lang.StringUtils.EMPTY ; } if ( ( cachedMemoryVolumeFromSnapshot ) == null ) { boolean archSupportSnapshot = org.ovirt.engine.core.common.FeatureSupported . isMemorySnapshotSupportedByArchitecture ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getClusterArch () , org.ovirt.engine.core.bll.RunVmCommand . getVm () . getVdsGroupCompatibilityVersion () ) ; cachedMemoryVolumeFromSnapshot = ( archSupportSnapshot && ( org.ovirt.engine.core.common.FeatureSupported . memorySnapshot ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getVdsGroupCompatibilityVersion () ) ) ) ? org.ovirt.engine.core.bll.RunVmCommand . getActiveSnapshot () . getMemoryVolume () : org.apache.commons.lang.StringUtils.EMPTY ; } return cachedMemoryVolumeFromSnapshot ; }
private void setBar ( com.google.gwt.user.client.ui.FlowPanel percentageBar , com.google.gwt.user.client.ui.Label percentageLabel , java.lang.Integer value , int fakeValue , java.lang.String style ) { if ( value != null ) { java.lang.String percentage = value + STRING_CONSTANT ; java.lang.String fakePercentage = fakeValue + STRING_CONSTANT ; percentageLabel . setText ( ( value < ( org.ovirt.engine.ui.userportal.widget.DoublePercentageProgressBar.MINIMUM_SIZE_TO_SHOW_TEXT ) ? STRING_CONSTANT : percentage ) ) ; percentageLabel . setStyleName ( style ) ; percentageBar . setWidth ( fakePercentage ) ; percentageBar . setVisible ( ( value != NUMBER_CONSTANT ) ) ; } }
public void removeFilter ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { unusedFilters . add ( policyUnit ) ; for ( int i = NUMBER_CONSTANT ; i < ( usedFilters . size () ) ; i ++ ) { if ( usedFilters . get ( i ) . getId () . equals ( policyUnit . getId () ) ) { usedFilters . remove ( i ) ; break; } } refreshCustomProperties ( policyUnit , false ) ; getFiltersChangedEvent () . raise ( this , EventArgs.Empty ) ; }
protected org.ovirt.engine.ui.uicommonweb.validation.IValidation [] getClonedNameValidators () { final int maxClonedNameLength = getMaxClonedNameLength () ; return new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation ( maxClonedNameLength ) , new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation ( org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getMessages () . nameMustConataionOnlyAlphanumericChars ( maxClonedNameLength ) ) , new org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.UniqueClonedNameValidator ( assignedVmNames ) } ; }
protected boolean validateStpProperty () { boolean stpIsAllowed = true ; if ( ( ! ( getNetwork () . isVmNetwork () ) ) && ( getNetwork () . getstp () ) ) { addCanDoActionMessage ( VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP ) ; stpIsAllowed = false ; } return stpIsAllowed ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup > returnValue ) { for ( org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup grp : returnValue ) { items . add ( createUserGroup ( grp . getName () , grp . getNamespace () , grp . getAuthz () ) ) ; } setItems ( items ) ; }
@ org.junit.Test public void validateSucceeds () { org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters () ; param . setForce ( false ) ; param . setGeoRepSessionId ( geoRepSessionId ) ; param . setVolumeId ( startedVolumeId ) ; cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.PauseGlusterVolumeGeoRepSessionCommand ( param , null ) ) ; org.mockito.Mockito . doReturn ( getGeoRepSession ( geoRepSessionId , GeoRepSessionStatus.ACTIVE , startedVolumeId ) ) . when ( geoRepDao ) . getById ( geoRepSessionId ) ; prepareMocks ( cmd ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
public org.ovirt.engine.core.utils.ovf.xml.XmlNode selectSingleNode ( java.lang.String string , org.ovirt.engine.core.utils.ovf.xml.XmlNamespaceManager _xmlns ) { try { javax.xml.xpath.XPathFactory factory = javax.xml.xpath.XPathFactory . newInstance () ; javax.xml.xpath.XPath xPath = factory . newXPath () ; xPath . setNamespaceContext ( _xmlns ) ; java.lang.Object o = xPath . evaluate ( string , node , javax.xml.xpath.XPathConstants.NODE ) ; return o != null ? new org.ovirt.engine.core.utils.ovf.xml.XmlNode ( ( ( org.w3c.dom.Node ) ( o ) ) ) : null ; } catch ( javax.xml.xpath.XPathExpressionException e ) { throw new java.lang.RuntimeException ( ( STRING_CONSTANT + string ) , e ) ; } }
@ org.junit.Test public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts . add ( STRING_CONSTANT ) ; setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Disk disk = resource . get () ; assertTrue ( disk . isSetStatistics () ) ; org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest . verifyModelSpecific ( disk , NUMBER_CONSTANT ) ; verifyLinks ( disk ) ; } finally { accepts . clear () ; } }
@ org.junit.Before public void setup () { storagePool = new org.ovirt.engine.core.common.businessentities.storage_pool ( STRING_CONSTANT , org.ovirt.engine.core.compat.Guid . NewGuid () , STRING_CONSTANT , StorageType.UNKNOWN . getValue () , StoragePoolStatus.Up . getValue () ) ; validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( storagePool , new java.util.ArrayList < java.lang.String > () ) ) ; mockPosixStorageEnabledConfigValue () ; }
@ org.junit.Test public void networkExists () { simulateClusterExists () ; org.mockito.Mockito . when ( mockNetworkDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( getNetwork () ) ; org.mockito.Mockito . when ( mockNetworkClusterDao . get ( param . getNetworkCluster () . getId () ) ) . thenReturn ( param . getNetworkCluster () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( underTest , EngineMessage.NETWORK_ALREADY_ATTACHED_TO_CLUSTER ) ; }
@ com.google.inject.Provides @ com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Erratum , org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel > getHostErrataListProvider ( com.google.gwt.event.shared.EventBus eventBus , com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > defaultConfirmPopupProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > > mainModelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel > modelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel > countModelProvider ) { org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider < org.ovirt.engine.core.common.businessentities.Erratum , org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel > result = new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider ( eventBus , defaultConfirmPopupProvider ) ; result . setMainModelProvider ( mainModelProvider ) ; result . setModelProvider ( modelProvider ) ; return result ; }
@ org.junit.Test public void testNullDisksUsages () { org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = getVmStatistics () ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDisksUsageInXmlRpc ( null ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . updateVMStatisticsData ( vmStatistics , xml ) ; org.junit.Assert . assertEquals ( null , vmStatistics . getDisksUsage () ) ; }
@ java.lang.Override protected void updateSingleNic ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { super . updateSingleNic ( node , iface ) ; iface . setMacAddress ( ( ( node . SelectSingleNode ( STRING_CONSTANT , _xmlNS ) ) != null ? node . SelectSingleNode ( STRING_CONSTANT , _xmlNS ) . innerText : STRING_CONSTANT ) ) ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType createGhostValue () { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface () ; vnic . setName ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getNewNicName ( vnics ) ) ; vnics . add ( vnic ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType vnicWithProfile = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType ( vnic ) ; vnicWithProfile . setItems ( vnicProfiles ) ; return vnicWithProfile ; }
private void mockBackend () { org.ovirt.engine.core.common.action.VdcReturnValueBase addClusterReturnValue = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.action.VdcReturnValueBase . class ) ; org.mockito.Mockito . when ( addClusterReturnValue . getSucceeded () ) . thenReturn ( true ) ; org.mockito.Mockito . when ( backend . runAction ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.action.VdcActionType . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.action.CpuProfileParameters . class ) ) ) . thenReturn ( addClusterReturnValue ) ; }
private void mockDiskVmElementValidatorPassDiscardValidation ( org.ovirt.engine.core.common.businessentities.storage.Disk disk , org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement , org.ovirt.engine.core.bll.ValidationResult validationResult ) { org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator diskVmElementValidator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator ( disk , diskVmElement ) ) ; org.mockito.Mockito . doReturn ( diskVmElementValidator ) . when ( multipleDiskVmElementValidator ) . createDiskVmElementValidator ( disk , diskVmElement ) ; org.mockito.Mockito . doReturn ( validationResult ) . when ( diskVmElementValidator ) . isPassDiscardSupported ( org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; existingVmPool = dao . get ( org.ovirt.engine.core.dao.VmPoolDaoTest.EXISTING_VM_POOL_ID ) ; deletableVmPool = dao . get ( org.ovirt.engine.core.dao.VmPoolDaoTest.DELETABLE_VM_POOL_ID ) ; newVmPool = new org.ovirt.engine.core.common.businessentities.VmPool () ; newVmPool . setName ( STRING_CONSTANT ) ; newVmPool . setVmPoolDescription ( STRING_CONSTANT ) ; newVmPool . setClusterId ( FixturesTool.CLUSTER ) ; newVmPoolMap = new org.ovirt.engine.core.common.businessentities.VmPoolMap ( org.ovirt.engine.core.dao.VmPoolDaoTest.FREE_VM_ID , org.ovirt.engine.core.dao.VmPoolDaoTest.EXISTING_VM_POOL_ID ) ; }
public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( @ javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log . error ( STRING_CONSTANT , getPolicyUnit () . getName () ) ; java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > pairs = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { pairs . add ( new org.ovirt.engine.core.common.utils.Pair ( vds . getId () , NUMBER_CONSTANT ) ) ; } return pairs ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = createDataStorageDomain ( status , name , HE_SD_ID ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( java.util.Collections . singletonList ( domain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; return domain ; }
@ java.lang.Override protected void onExportChanged () { if ( getExport () . getEntity () ) { getHasVLanTag () . setIsChangable ( false ) ; getVLanTag () . setIsChangable ( false ) ; getIsVmNetwork () . setIsChangable ( false ) ; getNetworkLabel () . setIsChangable ( false ) ; } super . onExportChanged () ; }
private static void initMigrationSupportMap () { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery () ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.migrationSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetMigrationSupport ) , callback ) ; }
void bindConfiguration () { bindConstant () . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultLoginSectionPlace . class ) . to ( ApplicationPlaces.DEFAULT_LOGIN_SECTION_PLACE ) ; bindConstant () . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultMainSectionPlace . class ) . to ( ApplicationPlaces.DEFAULT_MAIN_SECTION_BASIC_PLACE ) ; bindConstant () . annotatedWith ( org.ovirt.engine.ui.userportal.section.DefaultMainSectionExtendedPlace . class ) . to ( ApplicationPlaces.DEFAULT_MAIN_SECTION_EXTENDED_PLACE ) ; bindResourceConfiguration ( org.ovirt.engine.ui.userportal.ApplicationConstants . class , org.ovirt.engine.ui.userportal.ApplicationMessages . class , org.ovirt.engine.ui.userportal.ApplicationResources . class , org.ovirt.engine.ui.userportal.ApplicationTemplates . class ) ; bind ( org.ovirt.engine.ui.userportal.ApplicationResourcesWithLookup . class ) . in ( com.google.inject.Singleton . class ) ; }
@ java.lang.Override public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties () { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties () ; jobProperties . put ( VdcObjectType.VmTemplate . name () . toLowerCase () , ( ( getVmTemplateName () ) == null ? STRING_CONSTANT : getVmTemplateName () ) ) ; } return jobProperties ; }
public static org.ovirt.engine.core.aaa.DirectoryGroup findDirectoryGroupById ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , java.lang.String namespace , final java.lang.String id , final boolean resolveGroups , final boolean resolveGroupsRecursive ) { java.util.Collection < org.ovirt.engine.core.aaa.DirectoryGroup > groups = org.ovirt.engine.core.bll.aaa.DirectoryUtils . findDirectoryGroupsByIds ( extension , namespace , java.util.Arrays . asList ( id ) , resolveGroups , resolveGroupsRecursive ) ; if ( ( groups . size () ) == NUMBER_CONSTANT ) { return null ; } return new java.util.ArrayList ( groups ) . get ( NUMBER_CONSTANT ) ; }
@ org.junit.Test public void testCompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm () ; vm . setName ( STRING_CONSTANT ) ; vm . setStatus ( VmStatus.UP ) ; vm . setHost ( new org.ovirt.engine.api.model.Host () ) ; org.ovirt.engine.api.common.util.CompletenessAssertor . validateParameters ( vm , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
@ org.junit.Test public void testDiscoverGeoRepData () { org.mockito.Mockito . doReturn ( getSessionsVDSReturnVal ( NUMBER_CONSTANT ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.Matchers . eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters . class ) ) ; syncJob . discoverGeoRepData () ; org.mockito.Mockito . verify ( geoRepDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . save ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession . class ) ) ; }
@ org.junit.Test public void testMigrateMacsToAnotherMacPoolWithSuccessfulDuplicityCheck () { underTest . migrateMacsToAnotherMacPool ( sourceMacPoolId , targetMacPoolId , macsToMigrate , commandContext ) ; org.mockito.Mockito . verify ( macPoolPerCluster ) . getMacPoolById ( sourceMacPoolId , commandContext ) ; org.mockito.Mockito . verify ( macPoolPerCluster ) . getMacPoolById ( targetMacPoolId , commandContext ) ; org.mockito.InOrder inOrder = org.mockito.Mockito . inOrder ( sourceMacPool , targetMacPool ) ; inOrder . verify ( sourceMacPool ) . freeMacs ( macsToMigrate ) ; inOrder . verify ( targetMacPool ) . addMacs ( macsToMigrate ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase addVmFromScratch ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmFromScratchParameters parameters = new org.ovirt.engine.core.common.action.AddVmFromScratchParameters ( vmStatic , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand . getParameters () . getDiskInfoList () , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand . getParameters () . getStorageDomainId () ) ; parameters . setSessionId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand . getParameters () . getSessionId () ) ; parameters . setDontAttachToDefaultTag ( true ) ; return runInternalAction ( VdcActionType.AddVmFromScratch , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler . createDefaultContexForTasks ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand . getExecutionContext () ) ) ; }
private org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters createLiveMigrateVmDisksParameters ( java.util.List < org.ovirt.engine.core.common.action.MoveDiskParameters > moveDiskParamsList , org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < org.ovirt.engine.core.common.action.LiveMigrateDiskParameters > liveMigrateDiskParametersList = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters : moveDiskParamsList ) { liveMigrateDiskParametersList . add ( createLiveMigrateDiskParameters ( moveDiskParameters , vmId ) ) ; } org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters liveMigrateDisksParameters = new org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters ( liveMigrateDiskParametersList , vmId ) ; return liveMigrateDisksParameters ; }
@ org.junit.Test public void appendCustomValueAppendsWithNull () { final java.lang.String key = STRING_CONSTANT ; final java.lang.String value = null ; final java.lang.String newVal = STRING_CONSTANT ; final java.lang.String sep = STRING_CONSTANT ; b . addCustomValue ( key , value ) ; b . appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b . getCustomValue ( key ) ; org.junit.Assert . assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
private void generateEnumReadOne ( org.ovirt.api.metamodel.concepts.EnumType type ) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes . getEnumName ( type ) ; javaBuffer . addImport ( typeName ) ; javaBuffer . addImport ( org.ovirt.api.metamodel.runtime.json.JsonReader . class ) ; javaBuffer . addLine ( STRING_CONSTANT , typeName . getSimpleName () ) ; javaBuffer . addLine ( STRING_CONSTANT , typeName . getSimpleName () ) ; javaBuffer . addLine ( STRING_CONSTANT ) ; javaBuffer . addLine () ; }
@ org.junit.Test public void executeCommandWhenFailed () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd . executeCommand () ; org.junit.Assert . assertFalse ( cmd . getReturnValue () . getSucceeded () ) ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_DISABLE_FAILED ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService insertTestService () { org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service = new org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService () ; service . setId ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.NEW_SERVICE_ID ) ; service . setServerId ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVER1_ID ) ; service . setServiceId ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE2_ID ) ; service . setServiceType ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE2_TYPE ) ; service . setStatus ( GlusterServiceStatus.UNKNOWN ) ; service . setMessage ( STRING_CONSTANT ) ; service . setPid ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.NEW_PID ) ; service . setHostName ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.VDS_NAME1 ) ; dao . save ( service ) ; return service ; }
private void initParentResource () { org.ovirt.engine.api.restapi.resource.AbstractBackendResource parent = collection . getParent () . getParent () ; parent . setBackend ( backend ) ; parent . setMappingLocator ( mapperLocator ) ; parent . setValidatorLocator ( validatorLocator ) ; parent . setMessageBundle ( messageBundle ) ; parent . setHttpHeaders ( httpHeaders ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addManagedDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , org.ovirt.engine.core.common.utils.VmDeviceType device , java.util.Map < java.lang.String , java.lang.Object > specParams , boolean plugged , boolean readOnly , java.lang.String address , java.util.Map < java.lang.String , java.lang.String > customProp ) { org.ovirt.engine.core.common.businessentities.VmDevice managedDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( id , type , device , specParams , plugged , readOnly , customProp ) ; if ( org.apache.commons.lang.StringUtils . isNotBlank ( address ) ) { managedDevice . setAddress ( address ) ; } return managedDevice ; }
private boolean isMakeCreatorExplicitOwner () { return ( org.ovirt.engine.core.bll.AddVmCommand . getParameters () . isMakeCreatorExplicitOwner () ) || ( ( ( org.ovirt.engine.core.bll.AddVmCommand . getCurrentUser () ) != null ) && ( ! ( checkUserAuthorization ( org.ovirt.engine.core.bll.AddVmCommand . getCurrentUser () . getId () , ActionGroup.MANIPULATE_PERMISSIONS , org.ovirt.engine.core.bll.AddVmCommand . getVmId () , VdcObjectType.VM ) ) ) ) ; }
private void addStorageFormatOptions ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.restapi.model.StorageFormat . . . formats ) { version . setStorageFormats ( new org.ovirt.engine.api.model.StorageFormats () ) ; for ( org.ovirt.engine.api.restapi.model.StorageFormat format : formats ) { version . getStorageFormats () . getStorageFormats () . add ( format . value () ) ; } }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getSingleBrickVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito . doReturn ( getMultiBrickVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; org.mockito.Mockito . doReturn ( cluster ) . when ( cmd ) . getCluster () ; }
private void changePassword () { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.ChangeUserPassword , new org.ovirt.engine.core.common.action.ChangeUserPasswordParameters ( getUserName () . getEntity () , getPassword () . getEntity () , getNewPassword () . getEntity () , getDomain () . getSelectedItem () ) ) ; }
protected boolean validateVmNetwork () { boolean retVal = true ; if ( ! ( getNetwork () . isVmNetwork () ) ) { org.ovirt.engine.core.compat.Version version = org.ovirt.engine.core.bll.network.dc.NetworkCommon . getStoragePool () . getcompatibility_version () ; retVal = org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > GetValue ( ConfigValues.NonVmNetworkSupported , version . getValue () ) ; if ( ! retVal ) { addCanDoActionMessage ( VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL ) ; } } return retVal ; }
private void initExternalProviderList () { startProgress ( null ) ; org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery () ; getProvidersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; getExternalProviders () . setItems ( providers ) ; selectExternalProvider () ; stopProgress () ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getAllNetworkProviders ( getProvidersQuery ) ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
protected void endActionOnAllImageGroups () { for ( org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.ImportVmCommand . getParameters () . getImagesParameters () ) { p . setTaskGroupSuccess ( org.ovirt.engine.core.bll.ImportVmCommand . getParameters () . getTaskGroupSuccess () ) ; org.ovirt.engine.core.bll.ImportVmCommand . getBackend () . endAction ( VdcActionType.CopyImageGroup , p , org.ovirt.engine.core.bll.ImportVmCommand . getContext () . clone () . withoutCompensationContext () . withoutExecutionContext () . withoutLock () ) ; } }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getParametersForTask ( org.ovirt.engine.core.common.action.VdcActionType parentCommandType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = parameters . getParentParameters () ; if ( ( parentCommandType == ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ) || ( parentParameters == null ) ) { return parameters ; } parentParameters . setExecutionReason ( parameters . getExecutionReason () ) ; parentParameters . setCommandType ( parentCommandType ) ; return parentParameters ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > () ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( STRING_CONSTANT , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams . setMaxCount ( NUMBER_CONSTANT ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) { super . setVmId ( parameters . getContainerId () ) ; if ( ( ( getDiskImage () ) != null ) && ( ( getDiskImage () . getStoragePoolId () ) != null ) ) { setStoragePoolId ( getDiskImage () . getStoragePoolId () ) ; } }
private void endVmRelatedOps () { org.ovirt.engine.core.bll.ImportVmCommand . setVm ( null ) ; if ( ( org.ovirt.engine.core.bll.ImportVmCommand . getVm () ) != null ) { org.ovirt.engine.core.bll.VmHandler . unLockVm ( org.ovirt.engine.core.bll.ImportVmCommand . getVm () ) ; } else { org.ovirt.engine.core.bll.ImportVmCommand . setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.ImportVmCommand.log . warn ( STRING_CONSTANT ) ; } }
private void logMessage ( org.ovirt.engine.core.common.businessentities.AuditLog auditLog ) { java.lang.String logMessage = getMessageToLog ( auditLog ) ; switch ( auditLog . getSeverity () ) { case NORMAL : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . info ( logMessage ) ; break; case ERROR : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . error ( logMessage ) ; break; case ALERT : case WARNING : default: org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . warn ( logMessage ) ; break; } }
private static void addBootProtocol ( java.util.Map < java.lang.String , java.lang.Object > entry , org.ovirt.engine.core.common.businessentities.VDS host , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver resolver = ( org.ovirt.engine.core.common.FeatureSupported . cfgEntriesDeprecated ( host . getClusterCompatibilityVersion () ) ) ? new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgBootProtocolResolver ( entry , iface ) : new org.ovirt.engine.core.vdsbroker.vdsbroker.CfgBootProtocolResolver ( entry , iface ) ; resolver . resolve () ; }
@ org.junit.Test public void shouldElectActiveSharedBeforeLocalDataDomain () { org.ovirt.engine.core.common.businessentities.StorageDomain localDomain = createDataStorageDomain ( StorageDomainStatus.Active , STRING_CONSTANT , LOCAL_SD_ID ) ; localDomain . setStorageType ( StorageType.LOCALFS ) ; org.ovirt.engine.core.common.businessentities.StorageDomain sharedDomain = createDataStorageDomain ( StorageDomainStatus.Active , STRING_CONSTANT , SHARED_SD_ID ) ; org.mockito.Mockito . when ( storageDomainDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Arrays . asList ( localDomain , sharedDomain ) ) ; cmd . setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; org.junit.Assert . assertEquals ( sharedDomain , cmd . electNewMaster () ) ; }
@ org.junit.Test public void validateInvalidDestinationDomain () { initStorageDomain ( srcStorageId ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain . setStorageDomainType ( StorageDomainType.ISO ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > cinderVolumeTypes = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > ) ( returnValue ) ) ; java.util.List < java.lang.String > volumeTypesNames = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType cinderVolumeType : cinderVolumeTypes ) { volumeTypesNames . add ( cinderVolumeType . getName () ) ; } diskModel . getCinderVolumeType () . setItems ( volumeTypesNames ) ; }
@ java.lang.Override public void setItems ( java.util.Collection value ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = ( value != null ) ? new java.util.ArrayList <> ( value ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > () ; java.util.Collections . sort ( disks , new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator () ) ; super . setItems ( disks ) ; updateActionAvailability () ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addNetworkInterfaceDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , boolean plugged , boolean hostDev ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( id , VmDeviceGeneralType.INTERFACE , ( hostDev ? org.ovirt.engine.core.common.utils.VmDeviceType.HOST_DEVICE : org.ovirt.engine.core.common.utils.VmDeviceType.BRIDGE ) , java.util.Collections . < java.lang.String , java.lang.Object > emptyMap () , plugged , false , null , false ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getResolveStatusConflict () . getEntity () ) == null ) { getResolveStatusConflictEnable () . setIsChangable ( false ) ; getResolveStatusConflictDisable () . setIsChangable ( false ) ; } else { getResolveStatusConflictEnable () . setIsChangable ( getResolveStatusConflict () . getEntity () ) ; getResolveStatusConflictDisable () . setIsChangable ( getResolveStatusConflict () . getEntity () ) ; } }
public java.lang.Long determineImageInitialSize ( org.ovirt.engine.core.common.businessentities.storage.Image sourceImage , org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid srcDomain , org.ovirt.engine.core.compat.Guid dstDomain , org.ovirt.engine.core.compat.Guid imageGroupID ) { if ( isInitialSizeSupportedForFormat ( destFormat , dstDomain ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = getVolumeInfoFromVdsm ( storagePoolId , srcDomain , imageGroupID , sourceImage . getId () ) ; return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . computeCowImageNeededSize ( sourceImage . getVolumeFormat () , imageInfoFromStorage . getActualSizeInBytes () ) ; } return null ; }
private void addExpectHeader ( org.ovirt.engine.api.model.DetailedLink link , java.lang.String value ) { org.ovirt.engine.api.model.Headers headers = link . getRequest () . getHeaders () ; if ( headers == null ) { headers = new org.ovirt.engine.api.model.Headers () ; link . getRequest () . setHeaders ( headers ) ; } org.ovirt.engine.api.model.Header header = new org.ovirt.engine.api.model.Header () ; header . setName ( STRING_CONSTANT ) ; header . setValue ( value ) ; header . setRequired ( false ) ; headers . getHeaders () . add ( header ) ; }
@ org.junit.Test public void updateStepProgress () { java.lang.Integer newProgress = NUMBER_CONSTANT ; org.ovirt.engine.core.common.job.Step s = dao . get ( FixturesTool.STEP_ID ) ; org.junit.Assert . assertNotEquals ( STRING_CONSTANT , newProgress , s . getProgress () ) ; updateStepProgress ( FixturesTool.STEP_ID , newProgress ) ; s = dao . get ( FixturesTool.STEP_ID ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , newProgress , s . getProgress () ) ; }
private void mockVdsWithOsVersion ( java.lang.String osVersion ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setVdsType ( VDSType.oVirtVintageNode ) ; vds . setHostOs ( osVersion ) ; org.mockito.Mockito . when ( vdsDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( vds ) ; }
private boolean canScheduleVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.List < org.ovirt.engine.core.compat.Guid > blacklist = new java.util.ArrayList <> () ; if ( ( org.ovirt.engine.core.bll.MaintenanceVdsCommand . getVdsId () ) != null ) { blacklist . add ( org.ovirt.engine.core.bll.MaintenanceVdsCommand . getVdsId () ) ; } return ! ( schedulingManager . canSchedule ( org.ovirt.engine.core.bll.MaintenanceVdsCommand . getCluster () , vm , blacklist , java.util.Collections . emptyList () , new java.util.ArrayList <> () ) . isEmpty () ) ; }
@ java.lang.Override protected void executeQueryCommand () { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > soundDevList = getVmDeviceDAO () . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.GetSoundDevicesQuery . getParameters () . getId () , VmDeviceGeneralType.SOUND ) ; java.util.List < java.lang.String > result = new java.util.ArrayList ( soundDevList . size () ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice v : soundDevList ) { result . add ( v . getDevice () ) ; } org.ovirt.engine.core.bll.GetSoundDevicesQuery . getQueryReturnValue () . setReturnValue ( result ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getNetworkDAO () . update ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getNetwork () ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster clusterAttachment : org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getClusterAttachments () ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper . setStatus ( clusterAttachment . getClusterId () , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getNetwork () ) ; } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . setSucceeded ( true ) ; }
public void fillReportedConfigurations ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments , org.ovirt.engine.core.compat.Guid hostId ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allInterfacesForHost = interfaceDao . getAllInterfacesForVds ( hostId ) ; org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > networkMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( networkDao . getAllForCluster ( vdsDao . get ( hostId ) . getClusterId () ) ) ; fillReportedConfigurations ( allInterfacesForHost , networkMap , networkAttachments ) ; }
private static void addCommandForNewQuota ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.Guid quotaLimitId , java.lang.Double desiredStorageSize , java.lang.Integer desiredCPUSize , java.lang.Double desiredMemSize ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.QuotaManager.QuotaDeltaValue > commandMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.QuotaManager.QuotaDeltaValue > () ; org.ovirt.engine.core.bll.QuotaManager . addCommandForExistingQuota ( commandId , desiredStorageSize , desiredCPUSize , desiredMemSize , commandMap ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.network.ExternalSubnet > getAllSubnets ( org.ovirt.engine.core.common.businessentities.network.ProviderNetwork network ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.ExternalSubnet > result = new java.util.ArrayList <> () ; com.woorea.openstack.quantum.model.Subnets subnets = execute ( getClient () . subnets () . list () ) ; for ( com.woorea.openstack.quantum.model.Subnet subnet : subnets . getList () ) { if ( network . getExternalId () . equals ( subnet . getNetworkId () ) ) { result . add ( map ( subnet , network ) ) ; } } return result ; }
@ java.lang.Override protected boolean canDoAction () { return ( ( ( ( ( ( ( ( ( ( isImageExist () ) && ( checkOperationIsCorrect () ) ) && ( canFindVmOrTemplate () ) ) && ( isImageNotLocked () ) ) && ( isSourceAndDestTheSame () ) ) && ( validateSourceStorageDomain () ) ) && ( validateDestStorage () ) ) && ( checkTemplateInDestStorageDomain () ) ) && ( validateSpaceRequirements () ) ) && ( checkCanBeMoveInVm () ) ) && ( checkIfNeedToBeOverride () ) ; }
private void generateNewDiskId ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskList , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { org.ovirt.engine.core.compat.Guid newGuidForDisk = org.ovirt.engine.core.compat.Guid . newGuid () ; newDiskIdForDisk . put ( newGuidForDisk , org.ovirt.engine.core.common.businessentities.DiskImage . copyOf ( disk ) ) ; disk . setId ( newGuidForDisk ) ; disk . setImageId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskList ) { diskImage . setId ( disk . getId () ) ; } }
protected void verifyModel ( org.ovirt.engine.api.model.Event model , int index ) { assertNotNull ( model ) ; assertEquals ( model . getId () , java.lang.String . valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; assertEquals ( LogSeverity.ALERT , model . getSeverity () ) ; assertEquals ( model . getDescription () , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; assertEquals ( model . getOrigin () , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; assertEquals ( model . getCustomId () , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; }
void bindConfiguration () { bindConstant () . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultMainSectionPlace . class ) . to ( UserPortalApplicationPlaces.DEFAULT_MAIN_SECTION_BASIC_PLACE ) ; bindConstant () . annotatedWith ( org.ovirt.engine.ui.userportal.section.DefaultMainSectionExtendedPlace . class ) . to ( UserPortalApplicationPlaces.DEFAULT_MAIN_SECTION_EXTENDED_PLACE ) ; bindConstant () . annotatedWith ( org.ovirt.engine.ui.common.system.ClientStorageKeyPrefix . class ) . to ( org.ovirt.engine.ui.userportal.gin.SystemModule.CLIENT_STORAGE_KEY_PREFIX ) ; bindResourceConfiguration ( org.ovirt.engine.ui.userportal.ApplicationConstants . class , org.ovirt.engine.ui.userportal.ApplicationMessages . class , org.ovirt.engine.ui.userportal.ApplicationResources . class , org.ovirt.engine.ui.userportal.ApplicationTemplates . class , org.ovirt.engine.ui.userportal.ApplicationDynamicMessages . class ) ; bind ( org.ovirt.engine.ui.userportal.ApplicationResourcesWithLookup . class ) . in ( com.google.inject.Singleton . class ) ; }
protected void initStoragePoolId () { if ( ( org.ovirt.engine.core.bll.AddVmCommand . getVdsGroup () ) != null ) { setStoragePoolId ( ( ( org.ovirt.engine.core.bll.AddVmCommand . getVdsGroup () . getStoragePoolId () ) != null ? org.ovirt.engine.core.bll.AddVmCommand . getVdsGroup () . getStoragePoolId () : org.ovirt.engine.core.compat.Guid.Empty ) ) ; } }
private void verifyResult ( java.lang.String left , java.lang.String right , int expectedResult ) { org.junit.Assert . assertEquals ( java.lang.String . format ( STRING_CONSTANT , left , right , ( expectedResult == ( - NUMBER_CONSTANT ) ? STRING_CONSTANT : expectedResult == NUMBER_CONSTANT ? STRING_CONSTANT : STRING_CONSTANT ) ) , expectedResult , comparator . compare ( left , right ) ) ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Host model , int index ) { assertEquals ( GUIDS [ index ] . toString () , model . getId () ) ; assertEquals ( NAMES [ index ] , model . getName () ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.ADDRESSES [ index ] , model . getAddress () ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.HOST_STATUS [ index ] , model . getStatus () ) ; }
public boolean CheckIfCpusSameManufacture ( java.lang.String cpuName1 , java.lang.String cpuName2 ) { boolean result = false ; if ( ( cpuName1 != null ) && ( cpuName2 != null ) ) { if ( _intelCpuByNameDictionary . containsKey ( cpuName1 ) ) { result = _intelCpuByNameDictionary . containsKey ( cpuName2 ) ; } else if ( _amdCpuByNameDictionary . containsKey ( cpuName1 ) ) { result = _amdCpuByNameDictionary . containsKey ( cpuName2 ) ; } } return result ; }
@ org.junit.Test public void testDisksUsagesWithEmptyEntry () { java.lang.Object [] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . initDisksUsageData () ; disksUsages [ NUMBER_CONSTANT ] = new java.util.HashMap <> () ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . getVmStatistics () , disksUsages , xml ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model . setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskFormat . class ) ) ; model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskInterface . class ) ) ; model . setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.ScsiGenericIO . class ) ) ; model . setStatus ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.DiskStatus . class ) ) ; model . setLunStorage ( null ) ; return model ; }
@ org.junit.Test public void validateFailsForVdsNonUp () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters () , null ) ) ; prepareMocks ( VDSStatus.Down ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.mockito.Mockito . doReturn ( VDSStatus.Error ) . when ( vds ) . getStatus () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; org.mockito.Mockito . doReturn ( VDSStatus.Maintenance ) . when ( vds ) . getStatus () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
private void initiateResumeUpload () { startProgress ( null ) ; final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters () ; parameters . setDiskId ( getDiskModel () . getDisk () . getId () ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( VdcActionType.TransferImageStatus , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { initiateResumeUploadCheckStatus ( result ) ; } } , this ) ; }
@ org.junit.Test public void testEmpty () { org.ovirt.engine.core.searchbackend.IConditionFieldAutoCompleter comp = new org.ovirt.engine.core.searchbackend.AdGroupConditionFieldAutoCompleter () ; java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , null ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ java.lang.Override public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.lang.String tooltipContent ; if ( ( vm . getVmPoolId () ) == null ) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig . from ( vm . getVmType () , vm . isStateless () , vm . isNextRunConfigurationExists () ) ; tooltipContent = config . getTooltip () ; } else { tooltipContent = getPoolVmTooltip ( vm . getVmType () ) ; } return tooltipContent ; }
protected void reexecuteCommand () { org.ovirt.engine.core.bll.RunVmCommandBase . getReturnValue () . setCanDoAction ( false ) ; if ( ( org.ovirt.engine.core.bll.RunVmCommandBase . getExecutionContext () ) != null ) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.RunVmCommandBase . getExecutionContext () . getJob () ; if ( job != null ) { org.ovirt.engine.core.bll.job.JobRepositoryFactory . getJobRepository () . closeCompletedJobSteps ( job . getId () , JobExecutionStatus.FAILED ) ; } } org.ovirt.engine.core.bll.RunVmCommandBase . executeAction () ; }
@ org.junit.Test public void getVdsWithVdsId () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase () ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; b . setVdsId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b . setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b . getVds () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , v . getId () ) ; }
private void bindConsoles () { bind ( org.ovirt.engine.ui.uicommonweb.models.vms.INoVnc . class ) . to ( org.ovirt.engine.ui.common.uicommon.NoVncImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.IVncNative . class ) . to ( org.ovirt.engine.ui.common.uicommon.VncNativeImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.ISpiceHtml5 . class ) . to ( org.ovirt.engine.ui.common.uicommon.SpiceHtml5Impl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.ISpiceNative . class ) . to ( org.ovirt.engine.ui.common.uicommon.SpiceNativeImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.IRdpNative . class ) . to ( org.ovirt.engine.ui.common.uicommon.RdpNativeImpl . class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.vms.IRdpPlugin . class ) . to ( org.ovirt.engine.ui.common.uicommon.RdpPluginImpl . class ) ; }
private org.ovirt.engine.core.common.businessentities.VmStatic [] initVmStaticsOrderedByAutoStartup ( java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > vmStatics ) { org.ovirt.engine.core.common.businessentities.VmStatic [] vmStaticArray = initVmStaticsOrderedByPriority ( vmStatics ) ; org.ovirt.engine.core.common.businessentities.VmStatic tempVmStatic = vmStaticArray [ NUMBER_CONSTANT ] ; vmStaticArray [ NUMBER_CONSTANT ] = vmStaticArray [ NUMBER_CONSTANT ] ; vmStaticArray [ NUMBER_CONSTANT ] = tempVmStatic ; vmStaticArray [ NUMBER_CONSTANT ] . setAutoStartup ( true ) ; updateArrayOfVmStaticsInDb ( vmStaticArray ) ; return vmStaticArray ; }
@ org.junit.Test public void commandFailsSlaveNotOvirtMonitored () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.SetupGlusterGeoRepMountBrokerInternalCommand ( new org.ovirt.engine.core.common.action.gluster.SetUpMountBrokerParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , new java.util.HashSet ( java.util.Collections . singletonList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) , null , null ) ) ) ; org.mockito.Mockito . doReturn ( vds ) . when ( command ) . getUpServer () ; org.mockito.Mockito . doReturn ( null ) . when ( command ) . getSlaveVolume () ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; }
public static void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
private boolean canScheduleVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.List < org.ovirt.engine.core.compat.Guid > blacklist = new java.util.ArrayList <> () ; if ( ( org.ovirt.engine.core.bll.MaintenanceVdsCommand . getVdsId () ) != null ) { blacklist . add ( org.ovirt.engine.core.bll.MaintenanceVdsCommand . getVdsId () ) ; } return schedulingManager . canSchedule ( org.ovirt.engine.core.bll.MaintenanceVdsCommand . getCluster () , vm , blacklist , java.util.Collections . < org.ovirt.engine.core.compat.Guid > emptyList () , new java.util.ArrayList <> () ) ; }
@ java.lang.Override public void vdsNonOperational ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , boolean logCommand , org.ovirt.engine.core.compat.Guid domainId , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.bll.job.ExecutionHandler . updateSpecificActionJobCompleted ( vdsId , VdcActionType.MaintenanceVds , false ) ; org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( vdsId , reason , customLogValues ) ; tempVar . setStorageDomainId ( domainId ) ; tempVar . setShouldBeLogged ( logCommand ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler . createInternalJobContext () ) ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB , final int sizeRequired ) { mockVmTemplateDAOReturnVmTemplate () ; mockDiskImageDAOGetSnapshotById () ; mockStorageDomainDAOGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDAOGet ( domainSizeGB ) ; mockConfig () ; mockConfigSizeRequirements ( sizeRequired ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest . createVm () ; return vm ; }
@ java.lang.SuppressWarnings ( value = { STRING_CONSTANT , STRING_CONSTANT } ) @ org.junit.Test public void hostProviderTypeMatches () { org.mockito.Mockito . when ( host . getHostProviderId () ) . thenReturn ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.ovirt.engine.core.common.businessentities.Provider provider = org.mockito.Mockito . mock ( org.ovirt.engine.core.common.businessentities.Provider . class ) ; org.mockito.Mockito . when ( provider . getType () ) . thenReturn ( ProviderType.FOREMAN ) ; org.mockito.Mockito . when ( providerDao . get ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( provider ) ; org.junit.Assert . assertThat ( validator . hostProviderTypeMatches () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.ui.uicommonweb.models.providers.EditProviderModel.CMD_APPROVE . equals ( command . getName () ) ) { cancel () ; actualSave () ; } else if ( org.ovirt.engine.ui.uicommonweb.models.providers.EditProviderModel.CMD_CANCEL . equals ( command . getName () ) ) { cancel () ; } }
@ org.junit.Test public void moveShareableDiskToGlusterDomain () { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( true ) ; org.junit.Assert . assertFalse ( command . validate () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getValidationMessages () . contains ( EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS . toString () ) ) ; }
@ org.junit.Test public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network () ; setUriInfo ( setUpBasicUriExpectations () ) ; try { collection . add ( model ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; } }
public void setCommandStatus ( org.ovirt.engine.core.compat.CommandStatus status , boolean updateDB ) { this . commandStatus = status ; if ( updateDB ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport . suspend () ; try { org.ovirt.engine.core.bll.tasks.TaskManagerUtil . updateCommandStatus ( getCommandId () , getTaskType () , commandStatus ) ; } finally { if ( transaction != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . resume ( transaction ) ; } } } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel ) ( sender ) ) ; java.lang.String propertyName = args.propertyName ; if ( STRING_CONSTANT . equals ( propertyName ) ) { enableDisableByBootProtocol ( model ) ; } }
@ org.junit.Test public void hostNNotUsed () { org.mockito.Mockito . when ( oldHost . getHostName () ) . thenReturn ( generateRandomName () ) ; org.mockito.Mockito . when ( host . getHostName () ) . thenReturn ( generateRandomName () ) ; org.junit.Assert . assertThat ( validator . hostNameNotUsed () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private boolean handleQueryError ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { setMessage ( null ) ; if ( ! ( returnValue . getSucceeded () ) ) { setMessage ( org.ovirt.engine.ui.frontend.Frontend . getInstance () . getAppErrorsTranslator () . translateErrorTextSingle ( returnValue . getExceptionString () ) ) ; getSearchInProgress () . setEntity ( false ) ; return true ; } return false ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetRoleActionGroupsByRoleId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ NUMBER_CONSTANT ] } , org.ovirt.engine.api.restapi.resource.BackendPermitsResourceTest . setUpActionGroups () , failure ) ; control . replay () ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( createTestCommand ( volumeId1 ) ) ; prepareMocks ( cmd ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_VOLUME_DETAILS_REFRESH , cmd . getAuditLogTypeValue () ) ; org.mockito.Mockito . verify ( syncJob , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . refreshVolumeDetails ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VDS . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity . class ) ) ; }
private < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < org.ovirt.engine.core.compat.Guid > & org.ovirt.engine.core.common.businessentities.Nameable > org.ovirt.engine.core.bll.ValidationResult validateCoherentIdentification ( java.lang.String violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName , org.ovirt.engine.core.common.errors.EngineMessage message , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < T > map ) { boolean bothIdentificationSet = ( referringId != null ) && ( referringName != null ) ; java.lang.String [] replacements = createIncoherentIdentificationErrorReplacements ( violatingEntityId , referringId , referringName ) ; return org.ovirt.engine.core.bll.ValidationResult . failWith ( message , replacements ) . when ( ( bothIdentificationSet && ( isNameAndIdIncoherent ( referringId , referringName , map ) ) ) ) ; }
@ org.junit.Test public void testActivate ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.ActivateStorageDomain , org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID , org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action () ; verifyActionResponse ( resource . activate ( action ) ) ; }
@ org.junit.Test public void canDoActionFailedShareableDiskVolumeFormatUnsupported ( ) throws java.lang.Exception { org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters () ; parameters . setDiskInfo ( createShareableDisk ( VolumeFormat.COW ) ) ; org.mockito.Mockito . when ( diskDao . get ( diskImageGuid ) ) . thenReturn ( createDiskImage () ) ; initializeCommand ( parameters ) ; org.junit.Assert . assertFalse ( command . canDoAction () ) ; org.junit.Assert . assertTrue ( command . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT . toString () ) ) ; }
protected void initStoragePoolId () { if ( ( ( org.ovirt.engine.core.bll.RemoveImageCommand . getStoragePoolId () ) == null ) || ( Guid.Empty . equals ( org.ovirt.engine.core.bll.RemoveImageCommand . getStoragePoolId () ) ) ) { setStoragePoolId ( ( ( ( org.ovirt.engine.core.bll.RemoveImageCommand . getDiskImage () ) != null ) && ( ( org.ovirt.engine.core.bll.RemoveImageCommand . getDiskImage () . getStoragePoolId () ) != null ) ? org.ovirt.engine.core.bll.RemoveImageCommand . getDiskImage () . getStoragePoolId () : org.ovirt.engine.core.compat.Guid.Empty ) ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsInterfacesByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest . setUpInterfaces () , failure ) ; }
@ org.junit.Test public void testGetAllWithPermissionsPrivilegedUser () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.Assert . assertFalse ( result . isEmpty () ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.StorageDomainDaoTest.NUMBER_OF_STORAGE_DOMAINS_FOR_PRIVELEGED_USER , result . size () ) ; org.junit.Assert . assertEquals ( result . iterator () . next () , existingDomain ) ; }
private boolean unmanagedNetworkChanged ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface existingIface = getExistingIfaces () . get ( iface . getName () ) ; return ( existingIface == null ) || ( ! ( iface . getNetworkName () . equals ( existingIface . getNetworkName () ) ) ) ; }
@ org.junit.Test public void executeCommandWhenFailed () { setUpMocksForUpdate () ; mockBackend ( false , EngineError.GlusterHookUpdateFailed ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . never () ) . updateGlusterHook ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATE_FAILED , cmd . getAuditLogTypeValue () ) ; }
@ java.lang.Override public void run () { try { org.ovirt.engine.core.common.action.VdcReturnValueBase ret = org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.ApproveVds , params ) ; if ( ( ret == null ) || ( ! ( ret . getSucceeded () ) ) ) { log . errorFormat ( STRING_CONSTANT , params . getVdsId () ) ; } else if ( ret . getSucceeded () ) { log . infoFormat ( STRING_CONSTANT , params . getVdsId () ) ; } } catch ( java.lang.RuntimeException ex ) { log . error ( STRING_CONSTANT , ex ) ; } }
@ org.junit.Test public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateTag , org.ovirt.engine.core.common.action.TagsOperationParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { NAMES [ NUMBER_CONSTANT ] , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.PARENT_GUID } , true , true ) ) ; verifyModel ( resource . update ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest . getModel ( NUMBER_CONSTANT , false ) ) , NUMBER_CONSTANT ) ; }
@ org.junit.Test public void legalTimedOut () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase () ; t . setUseTimout ( true ) ; long c = java.lang.System . currentTimeMillis () ; c -= NUMBER_CONSTANT ; t . setEndTime ( c ) ; final java.lang.String s = STRING_CONSTANT ; t . setTimeoutObjectId ( s ) ; t . getLegal () ; final boolean result = t . getLegal () ; org.junit.Assert . assertTrue ( result ) ; }
public boolean isValidVmNetwork ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > networksByName , org.ovirt.engine.core.compat.Version version ) { java.lang.String networkName = iface . getNetworkName () ; return ( networkName == null ) || ( ( networksByName . containsKey ( networkName ) ) && ( networksByName . get ( networkName ) . isVmNetwork () ) ) ; }
private void initCustomPropertySheet () { setCustomPropertySheet ( new org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel () ) ; if ( ( clusterPolicy . getParameterMap () ) != null ) { getCustomProperties () . putAll ( clusterPolicy . getParameterMap () ) ; } customPropertiesInitialized = true ; refreshCustomProperties ( null , false ) ; }
protected void mockBackendStatusChange ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; vdsReturnValue . setReturnValue ( succeeded ) ; vdsReturnValue . setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue . setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , STRING_CONSTANT ) ) ; } org.mockito.Mockito . when ( vdsBrokerFrontend . runVdsCommand ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest . any () , org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest . any () ) ) . thenReturn ( vdsReturnValue ) ; }
@ org.junit.Test public void migrationSupported () { org.mockito.Mockito . doReturn ( true ) . when ( validator ) . migrationSupportedForArch ( org.mockito.ArgumentMatchers . any () ) ; org.junit.Assert . assertThat ( validator . migrationSupported ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextEnum ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private void updateActionAvailability () { java.util.List items = ( ( ( getSelectedItems () ) != null ) && ( ( getSelectedItem () ) != null ) ) ? getSelectedItems () : new java.util.ArrayList () ; getEditQuotaCommand () . setIsExecutionAllowed ( ( ( items . size () ) == NUMBER_CONSTANT ) ) ; getRemoveQuotaCommand () . setIsExecutionAllowed ( ( ( items . size () ) > NUMBER_CONSTANT ) ) ; getCloneQuotaCommand () . setIsExecutionAllowed ( ( ( items . size () ) == NUMBER_CONSTANT ) ) ; }
protected void initFrontend () { frontend . setEventsHandler ( frontendEventsHandler ) ; frontend . getFrontendFailureEvent () . addListener ( frontendFailureEventListener ) ; frontend . getFrontendNotLoggedInEvent () . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener () { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { user . logout () ; } } ) ; frontend . setFilterQueries ( filterFrontendQueries () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call () { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log . warnFormat ( logMessage ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( mCurrentVdsId ) ; logable . setStorageDomainId ( masterDomainId ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( logable , AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC ) ; return org.ovirt.engine.core.vdsbroker.ResourceManager . getInstance () . getEventListener () . masterDomainNotOperational ( masterDomainId , storagePoolId , false , true ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand . setVds ( null ) ; if ( ( ( org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand . getVds () ) != null ) && ( shouldVdsBeFenced () ) ) { super . executeCommand () ; } else { org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand . setCommandShouldBeLogged ( false ) ; log . infoFormat ( STRING_CONSTANT , org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand . getVdsName () , org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand . getVdsId () ) ; } }
@ org.junit.Test public void testChangeClusterForbidden () { prepareVmToPassValidate () ; org.ovirt.engine.core.common.businessentities.Cluster newGroup = new org.ovirt.engine.core.common.businessentities.Cluster () ; newGroup . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; newGroup . setCompatibilityVersion ( Version.v3_6 ) ; vmStatic . setClusterId ( newGroup . getId () ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , command . validate () ) ; assertValidateMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
private void newPoolNameIsAlreadyTaken () { org.mockito.Mockito . when ( spDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; org.mockito.Mockito . when ( spDao . getByName ( org.mockito.Matchers . anyString () ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest . createDefaultStoragePool () ) ; }
private java.lang.String getPublicEntity ( java.lang.String entityName ) { if ( this . entitiesMap . containsKey ( entityName . toLowerCase () ) ) { return this . entitiesMap . get ( entityName . toLowerCase () ) ; } throw new java.lang.RuntimeException ( ( ( STRING_CONSTANT + entityName ) + STRING_CONSTANT ) ) ; }
private void updateCommand ( final org.ovirt.engine.core.bll.CommandBase < > command , final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = coco . getCommandEntity ( command . getCommandId () ) ; cmdEntity . setReturnValue ( result ) ; if ( ! ( result . getCanDoAction () ) ) { cmdEntity . setCommandStatus ( CommandStatus.FAILED ) ; } coco . persistCommand ( cmdEntity ) ; }
@ org.junit.Test public void testExecuteQueryGetAllEntitiesCommand ( ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { getQuery () . executeQueryCommand () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = getQuery () . getQueryReturnValue () . getReturnValue () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , result . size () ) ; }
@ org.junit.Test public void testList ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmApplicationsResourceTest.VM_ID } , getVm () ) ; verifyApplications ( resource . list () ) ; }
private void printBoolean ( java.lang.Object arg ) throws java.io.IOException { java.lang.String s ; if ( arg != null ) { s = ( arg instanceof java.lang.Boolean ) ? arg . toString () : java.lang.Boolean . toString ( true ) ; } else { s = java.lang.Boolean . toString ( false ) ; } print ( s ) ; }
@ org.junit.Before public void prepareMocks () { org.mockito.Mockito . doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer () ; org.mockito.Mockito . doReturn ( getVdsStatic () ) . when ( vdsStaticDao ) . get ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverId ) ; org.mockito.Mockito . doReturn ( getCluster ( true ) ) . when ( clusterDao ) . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ org.ovirt.engine.api.restapi.types.Mapping ( from = java.lang.String . class , to = org.ovirt.engine.api.model.Application . class ) public static org.ovirt.engine.api.model.Application map ( java.lang.String appName , org.ovirt.engine.api.model.Application template ) { org.ovirt.engine.api.model.Application model = ( template != null ) ? template : new org.ovirt.engine.api.model.Application () ; model . setName ( appName ) ; model . setId ( org.ovirt.engine.api.restapi.utils.GuidUtils . asGuid ( appName . getBytes () ) . toString () ) ; return model ; }
@ java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotPlugNic ( java.util.Map info ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer . hotplugNic ( info ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard getFakeDashboard () { java.util.Random random = new java.util.Random () ; org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = new org.ovirt.engine.ui.frontend.server.dashboard.Dashboard () ; dashboard . setGlobalUtilization ( org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator . fakeGlobalUtilization ( random ) ) ; dashboard . setHeatMapData ( org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator . fakeHeatMapData ( random ) ) ; dashboard . setInventory ( org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator . fakeInventory ( random ) ) ; return dashboard ; }
private void rollbackDisksQuota () { java.util.List < org.ovirt.engine.core.compat.Guid > quotaList = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > () ; if ( ( imageTemplates ) != null ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : imageTemplates ) { quotaList . add ( image . getQuotaId () ) ; } org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getQuotaManager () . rollbackQuota ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getStoragePool () , quotaList ) ; } }
@ org.junit.Test public void testNegativeConstructors () { org.ovirt.engine.core.compat.TimeSpan span = new org.ovirt.engine.core.compat.TimeSpan ( NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) , ( - NUMBER_CONSTANT ) , NUMBER_CONSTANT ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Days ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Hours ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Minutes ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Seconds ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , span.Milliseconds ) ; }
@ org.junit.Test public void testUpdateNotExistingConnection ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetNotExistingEntityExpectations () ; try { resource . update ( getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void mockBackend ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito . doReturn ( backend ) . when ( cmd ) . getBackend () ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; vdsReturnValue . setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue . setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , STRING_CONSTANT ) ) ; } org.mockito.Mockito . when ( vdsBrokerFrontend . runVdsCommand ( org.mockito.ArgumentMatchers . eq ( VDSCommandType.AddGlusterHook ) , org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( vdsReturnValue ) ; }
@ java.lang.Override protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > buildFromOVFs ( java.util.List < java.lang.String > ovfList ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = new java.util.ArrayList <> () ; for ( java.lang.String ovf : ovfList ) { try { if ( ! ( ovfHelper . isOvfTemplate ( ovf ) ) ) { vms . add ( ovfHelper . readVmFromOvf ( ovf ) . getVm () ) ; } } catch ( org.ovirt.engine.core.utils.ovf.OvfReaderException ex ) { auditLogOvfLoadError ( ex . getName () , ex . getMessage () ) ; } } return vms ; }
public static synchronized java.lang.String [] getLinksToExclude ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { return org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource . isIsoDomain ( storageDomain ) ? new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource . isExportDomain ( storageDomain ) ? new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource . isImageDomain ( storageDomain ) ? new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } : new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ; }
@ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result ) { java.util.List < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > returnValueList = result . getReturnValues () ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValueList . get ( NUMBER_CONSTANT ) . getReturnValue () ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValueList . get ( NUMBER_CONSTANT ) . getReturnValue () ) ) ; InitClusters ( clusters , true , false ) ; InitTemplates ( templates ) ; InitCdImage () ; }
@ org.junit.Test public void canSetNumaPinning () { paramNumaNodes . clear () ; paramNumaNodes . add ( org.ovirt.engine.core.bll.utils.NumaTestUtils . createVmNumaNode ( NUMBER_CONSTANT , vdsNumaNodes ) ) ; mockCommandWithVmFromParams () ; command . executeCommand () ; org.mockito.Mockito . verify ( vmNumaNodeDao ) . massRemoveNumaNodeByNumaNodeId ( org.mockito.ArgumentMatchers . eq ( existingNumaNodeIds ) ) ; org.mockito.Mockito . verify ( vmNumaNodeDao ) . massSaveNumaNode ( org.mockito.ArgumentMatchers . eq ( paramNumaNodes ) , org.mockito.ArgumentMatchers . any () ) ; }
private void afterMigrationFrom ( org.ovirt.engine.core.common.businessentities.VmDynamic runningVm , org.ovirt.engine.core.common.businessentities.VM vmToUpdate ) { org.ovirt.engine.core.common.businessentities.VMStatus oldVmStatus = vmToUpdate . getStatus () ; if ( ( oldVmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) && ( runningVm . getstatus () . isGuestUp () ) ) { _vmsToRerun . add ( runningVm . getId () ) ; org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log . infoFormat ( STRING_CONSTANT , runningVm . getId () ) ; vmToUpdate . setMigratingToVds ( null ) ; } }
@ org.junit.Test public void canDoActionFailsWithClusterDoesNotSupportGluster () { cmd = org.mockito.Mockito . spy ( createTestCommand ( getVolume ( NUMBER_CONSTANT , false ) ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito . doReturn ( getVdsGroup ( false ) ) . when ( vdsGroupDao ) . get ( org.mockito.Mockito . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER ) ; }
public static void fillImagesMapBasedOnTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > diskInfoDestinationMap , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > destStorages ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getStorageDomainDao () . getAllForStoragePool ( template . getStoragePoolId () ) ; org.ovirt.engine.core.bll.ImagesHandler . fillImagesMapBasedOnTemplate ( template , domains , diskInfoDestinationMap , destStorages ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmDuringInitialization ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( ( vm . isRunning () ) || ( ( vm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.NotResponding ) ) ) || ( isVmDuringInitiating ( vm ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
@ org.junit.Test public void testCanEditARunningVM () { prepareVmToPassValidate () ; vm . setStatus ( VMStatus.Up ) ; mockDiskDaoGetAllForVm ( java.util.Collections . emptyList () , true ) ; mockVmValidator () ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . areUpdatedFieldsLegal () ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; }
private void prepare2 () { org.ovirt.engine.ui.uicompat.PreparingEnlistment enlistment = ( ( org.ovirt.engine.ui.uicompat.PreparingEnlistment ) ( context.enlistment ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.activateVdsReturnValue ; if ( ( returnValue == null ) || ( ! ( returnValue . getSucceeded () ) ) ) { context.enlistment = null ; enlistment . ForceRollback () ; } else { prepare3 () ; } }
private void removeListeners ( org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model ) { if ( ( viewUpdatingListener ) == null ) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice = model . getVmConsoles () . getConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel . class ) . getspice () ; if ( spice == null ) { return; } }
@ org.junit.Test public void testUpdateCantDo ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations () ; resource . setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVds , org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.ROOT_PASSWORD } , false , true , STRING_CONSTANT ) ) ; try { resource . update ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest . getModel ( NUMBER_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , STRING_CONSTANT , NUMBER_CONSTANT ) ; } }
private void mockCommand () { org.mockito.Mockito . doReturn ( vdsDaoMock ) . when ( command ) . getVdsDao () ; org.mockito.Mockito . doReturn ( asyncTaskDaoMock ) . when ( command ) . getAsyncTaskDao () ; org.mockito.Mockito . doReturn ( storagePool ) . when ( storagePoolDaoMock ) . getForVds ( vdsId ) ; org.mockito.Mockito . doReturn ( vds ) . when ( vdsDaoMock ) . get ( vdsId ) ; }
private void loadFile ( java.io.File file ) throws org.ovirt.engine.core.authentication.ConfigurationException { org.ovirt.engine.core.authentication.Configuration config = null ; try { config = org.ovirt.engine.core.authentication.Configuration . loadFile ( file ) ; } catch ( java.io.IOException exception ) { throw new org.ovirt.engine.core.authentication.ConfigurationException ( ( ( STRING_CONSTANT + ( file . getAbsolutePath () ) ) + STRING_CONSTANT ) , exception ) ; } java.lang.Boolean enabled = config . getBoolean ( org.ovirt.engine.core.authentication.Manager.ENABLED_PARAMETER , false ) ; if ( ! ( enabled . booleanValue () ) ) { return; } parseObject ( config ) ; }
public void init ( java.lang.String dialogToken , java.lang.String title , java.lang.String width , java.lang.String height , boolean closeIconVisible , boolean closeOnEscKey ) { this . dialogToken = dialogToken ; this . closeOnEscKey = closeOnEscKey ; getView () . init ( title , width , height , closeIconVisible ) ; }
@ java.lang.Override protected void onBind () { super . onBind () ; registerHandler ( getTable () . getSelectionModel () . addSelectionChangeHandler ( new com.google.gwt.view.client.SelectionChangeEvent.Handler () { @ java.lang.Override public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { modelProvider . setSelectedItems ( getSelectedItems () ) ; fireTableSelectionChangeEvent () ; handlePlaceTransition () ; } } ) ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( STRING_CONSTANT . equals ( command . getName () ) ) { onSave () ; } else if ( STRING_CONSTANT . equals ( command . getName () ) ) { cancel () ; } }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( java.util.Collections . emptyList () ) ; setUriInfo ( setUpBasicUriExpectations () ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
public org.ovirt.engine.ui.uicommonweb.models.vms.ImportDiskData getDiskImportData ( org.ovirt.engine.core.compat.Guid diskId ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportDiskData importData = diskImportDataMap . get ( diskId ) ; if ( importData != null ) { if ( ( storageDiskListModel . getSelectedItem () ) != null ) { importData . setSelectedStorageDomain ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( storageDiskListModel . getSelectedItem () ) ) ) ; } } return importData ; }
void addStyles () { advancedParametersExpanderContent . setStyleName ( style . advancedParametersExpanderContent () ) ; warningLowSpaceIndicatorEditor . addContentWidgetContainerStyleName ( style . warningTextBoxEditor () ) ; criticalSpaceActionBlockerEditor . addContentWidgetStyleName ( style . blockerTextBoxEditor () ) ; formatListEditor . addContentWidgetStyleName ( style . formatListEditor () ) ; }
public static void addDiskToVm ( org.ovirt.engine.core.common.businessentities.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getBaseDiskDao () . save ( disk ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk . getId () , vmId ) , VmDeviceGeneralType.DISK , VmDeviceType.DISK , null , true , false , null ) ; }
@ java.lang.Override public org.ovirt.engine.api.v3.types.V3IpAddressAssignment adapt ( org.ovirt.engine.api.model.IpAddressAssignment from ) { org.ovirt.engine.api.v3.types.V3IpAddressAssignment to = new org.ovirt.engine.api.v3.types.V3IpAddressAssignment () ; if ( from . isSetAssignmentMethod () ) { to . setAssignmentMethod ( from . getAssignmentMethod () . value () ) ; } if ( from . isSetIp () ) { to . setIp ( org.ovirt.engine.api.v3.adapters.V3OutAdapters . adaptOut ( from . getIp () ) ) ; } return to ; }
@ org.junit.Test public void testUpdate () { dao . save ( dummyPolicy ) ; dummyPolicy . setName ( STRING_CONSTANT ) ; dao . update ( dummyPolicy ) ; org.ovirt.engine.core.common.scheduling.ClusterPolicy result = dao . get ( dummyPolicy . getId () , java.util.Collections . emptyMap () ) ; org.junit.Assert . assertEquals ( result , dummyPolicy ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ImportDiskData getDiskImportData ( java.lang.String alias ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportDiskData importData = diskImportDataMap . get ( alias ) ; if ( importData != null ) { if ( ( storage . getSelectedItem () ) == null ) { importData . setSelectedStorageDomain ( storage . getSelectedItem () ) ; } } return importData ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getClusterPolicyUnitParameterMap ( org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit clusterPolicyUnit ) { return getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , clusterPolicyUnit . getClusterPolicyId () ) . addValue ( STRING_CONSTANT , clusterPolicyUnit . getPolicyUnitId () ) . addValue ( STRING_CONSTANT , clusterPolicyUnit . getFilterSequence () ) . addValue ( STRING_CONSTANT , clusterPolicyUnit . getFactor () ) ; }
@ org.junit.Test public void testExecuteQueryGetAllEntitiesCommand ( ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { getQuery () . executeQueryCommand () ; @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = getQuery () . getQueryReturnValue () . getReturnValue () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , NUMBER_CONSTANT , result . size () ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVmNetworkStatisticsDao () ; newVmStatistics = new org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics () ; newVmStatistics . setId ( org.ovirt.engine.core.dao.network.VmNetworkStatisticsDaoTest.NEW_INTERFACE_ID ) ; newVmStatistics . setVmId ( org.ovirt.engine.core.dao.network.VmNetworkStatisticsDaoTest.VM_ID ) ; newVmStatistics . setStatus ( InterfaceStatus.DOWN ) ; newVmStatistics . setReceiveDropRate ( NUMBER_CONSTANT ) ; newVmStatistics . setReceiveRate ( NUMBER_CONSTANT ) ; newVmStatistics . setTransmitDropRate ( NUMBER_CONSTANT ) ; newVmStatistics . setTransmitRate ( NUMBER_CONSTANT ) ; }
@ org.junit.Test public void calculateNetworkImplementationDetailsNetworkMtuOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice () ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface . isBridged () , ( ( iface . getMtu () ) + NUMBER_CONSTANT ) , iface . getVlanId () , createQos () ) ; }
private java.lang.String [] createIncoherentIdentificationErrorReplacements ( java.lang.String violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName ) { return new java.lang.String [] { java.lang.String . format ( STRING_CONSTANT , violatingEntityId ) , java.lang.String . format ( STRING_CONSTANT , referringId ) , java.lang.String . format ( STRING_CONSTANT , referringName ) } ; }
@ java.lang.Override public org.ovirt.engine.api.model.Networks list () { org.ovirt.engine.api.model.Networks networks ; if ( isFiltered () ) { networks = mapCollection ( getBackendCollection ( queryType , getQueryParameters () , SearchType.Network ) ) ; } else { networks = mapCollection ( getBackendCollection ( SearchType.Network ) ) ; } for ( org.ovirt.engine.api.model.Network network : networks . getNetworks () ) { network . setDisplay ( null ) ; } return networks ; }
public java.util.Collection < org.ovirt.engine.core.aaa.DirectoryUser > mapPrincipalRecordsToDirectoryUsers ( final java.lang.String authzName , final java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > users ) { java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > results = new java.util.ArrayList <> () ; for ( org.ovirt.engine.api.extensions.ExtMap user : users ) { results . add ( mapPrincipalRecordToDirectoryUser ( authzName , user ) ) ; } return results ; }
@ org.junit.Test public void validateSpaceAndThreshold () { org.junit.Assert . assertTrue ( cmd . validateSpaceRequirements () ) ; org.mockito.Mockito . verify ( storageDomainValidator , org.mockito.Mockito . times ( org.ovirt.engine.core.bll.TOTAL_NUM_DOMAINS ) ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers . anyList () ) ; org.mockito.Mockito . verify ( storageDomainValidator , org.mockito.Mockito . never () ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers . anyList () ) ; }
@ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ! ( result . getReturnValue () . getSucceeded () ) ) { return; } org.ovirt.engine.ui.uicommonweb.models.userportal.PoolItemBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.PoolItemBehavior ) ( result . getState () ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result . getReturnValue () ; org.ovirt.engine.core.compat.Guid Guid = ( ( org.ovirt.engine.core.compat.Guid ) ( returnValueBase . getActionReturnValue () ) ) ; }
@ java.lang.Override public com.google.gwt.event.dom.client.HasClickHandlers addRebootButton () { org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton button = new org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton ( org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants . rebootVm () , org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.resources . rebootIcon () , org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.resources . rebootDisabledIcon () , style . rebootButtonAdditionalStyle () ) ; this . rebootButton = button ; addButtonToPanel ( button ) ; return button ; }
@ java.lang.Override protected void persistCollectedData () { super . persistCollectedData () ; org.ovirt.engine.core.common.businessentities.VdsDynamic hostFromDb = vdsDynamicDao . get ( getVds () . getId () ) ; hostFromDb . setSupportedClusterLevels ( getVds () . getDynamicData () . getSupportedClusterLevels () ) ; vdsDynamicDao . update ( hostFromDb ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public < T extends java.lang.Object > T instanceOf ( java.lang.Class < T > clazz ) { javax.enterprise.inject.spi.Bean < > bean = org.ovirt.engine.core.di.Injector.injector.manager . getBeans ( clazz ) . iterator () . next () ; return ( ( T ) ( org.ovirt.engine.core.di.Injector.injector.manager . getReference ( bean , clazz , org.ovirt.engine.core.di.Injector.injector.manager . createCreationalContext ( bean ) ) ) ) ; }
private void setupMock ( ) throws java.lang.Exception { commandMock = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.ClearExternalJobCommand ( parameters , null ) ) ; org.mockito.Mockito . when ( commandMock . getParameters () ) . thenReturn ( parameters ) ; org.mockito.Mockito . doReturn ( jobDaoMock ) . when ( commandMock ) . getJobDao () ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) . thenReturn ( makeTestJob ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) ; org.mockito.Mockito . when ( jobDaoMock . get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.nonExistingJobId ) ) . thenReturn ( null ) ; }
@ org.junit.Test public void testValues () { java.util.List < java.lang.String > comps = java.util.Arrays . asList ( comp . getCompletion ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( STRING_CONSTANT , comps . contains ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , comp . getCompletion ( STRING_CONSTANT ) . length ) ; }
@ org.junit.Test public void testGuidListValuesWithOneGuid () { java.lang.String listValues = STRING_CONSTANT ; java.util.List < org.ovirt.engine.core.compat.Guid > stringList = org.ovirt.engine.core.utils.GuidUtils . getGuidListFromString ( listValues ) ; java.util.List < org.ovirt.engine.core.compat.Guid > expectedList = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > () ; expectedList . add ( new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ) ; org.junit.Assert . assertEquals ( expectedList , stringList ) ; }
@ java.lang.Override protected void executeQueryCommand () { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allDcNetworks = getNetworkDao () . getAllForDataCenter ( org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery . getParameters () . getId () ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > managementNetworkCandidates = allDcNetworks . stream () . filter ( getManagementNetworkCandidatePredicate () ) . collect ( java.util.stream.Collectors . toList () ) ; org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery . getQueryReturnValue () . setReturnValue ( managementNetworkCandidates ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.VmDevice generateNewEntity () { java.util.Map < java.lang.String , java.lang.String > customProp = new java.util.LinkedHashMap <> () ; customProp . put ( STRING_CONSTANT , STRING_CONSTANT ) ; return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . newGuid () , org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , STRING_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT , new java.util.HashMap < java.lang.String , java.lang.Object > () , true , false , false , STRING_CONSTANT , customProp , null , null ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; providers . add ( NUMBER_CONSTANT , null ) ; getExternalProviders () . setItems ( providers ) ; getExternalProviders () . setSelectedItem ( null ) ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas ) { quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > () ; getStorageQuota () . setItems ( quotas ) ; getStorageQuota () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( quotas ) ) ; }
@ java.lang.Override protected void EndWithFailure () { org.ovirt.engine.core.bll.ExportVmCommand . EndActionOnAllImageGroups () ; if ( ( org.ovirt.engine.core.bll.ExportVmCommand . getVm () ) != null ) { org.ovirt.engine.core.bll.VmHandler . UnLockVm ( org.ovirt.engine.core.bll.ExportVmCommand . getVm () ) ; org.ovirt.engine.core.bll.VmHandler . updateDisksFromDb ( org.ovirt.engine.core.bll.ExportVmCommand . getVm () ) ; } else { org.ovirt.engine.core.bll.ExportVmCommand . setCommandShouldBeLogged ( false ) ; log . warn ( STRING_CONSTANT ) ; } org.ovirt.engine.core.bll.ExportVmCommand . setSucceeded ( true ) ; }
public void getNumberOfActiveVmsInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( NUMBER_CONSTANT ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetNumberOfActiveVmsInVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
private java.util.List < org.ovirt.engine.api.model.Network > getNetworks ( java.lang.String clusterId ) { org.ovirt.engine.core.compat.Guid dataCenterId = getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup . class , VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , null ) . getStoragePoolId () ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; return getBackendCollection ( VdcQueryType.GetAllNetworks , params ) ; }
@ org.junit.Test public void validateInvalidDestinationDomain () { initStorageDomain ( srcStorageId ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain . setStorageDomainType ( StorageDomainType.ISO ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid . newGuid () , diskImageGroupId ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; }
private boolean Register ( org.ovirt.engine.core.common.businessentities.VDS vdsByUniqueId , org.ovirt.engine.core.compat.Guid vdsGroupId , boolean IsPending ) { if ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > GetValue ( ConfigValues.LogVdsRegistration ) ) { log . infoFormat ( STRING_CONSTANT ) ; } boolean returnValue = true ; if ( vdsByUniqueId == null ) { returnValue = registerNewHost ( vdsGroupId , IsPending ) ; } else { returnValue = updateExistingHost ( vdsByUniqueId , IsPending ) ; } if ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > GetValue ( ConfigValues.LogVdsRegistration ) ) { log . infoFormat ( STRING_CONSTANT , returnValue ) ; } return returnValue ; }
protected javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.DiskProfile diskProfile ) { validateParameters ( diskProfile ) ; org.ovirt.engine.api.model.DiskProfile map = map ( diskProfile ) ; org.ovirt.engine.core.common.action.DiskProfileParameters parameters = new org.ovirt.engine.core.common.action.DiskProfileParameters ( map ) ; return performCreate ( VdcActionType.AddDiskProfile , parameters , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetDiskProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ) ; }
public static boolean isDevicesChanged ( org.ovirt.engine.core.common.businessentities.VM dbVm , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm ) { org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVmDynamic = vdsmVm . getVmDynamic () ; return ( ( ( ( vdsmVmDynamic != null ) && ( ( vdsmVmDynamic . getStatus () ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo ) ) ) && ( ( vdsmVmDynamic . getHash () ) != null ) ) && ( dbVm != null ) ) && ( ! ( java.util.Objects . equals ( dbVm . getHash () , vdsmVmDynamic . getHash () ) ) ) ; }
@ org.junit.Test public void testGetStorageDomainIdWithPermissions () { mockStoragePoolDao ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; org.mockito.Mockito . when ( storageDomainDaoMock . getIsoStorageDomainIdForPool ( getQueryParameters () . getStoragePoolId () , StorageDomainStatus.Active ) ) . thenReturn ( storageDomainId ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , storageDomainId , getQuery () . getStorageDomainIdForQuery () ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getNetworkDao () ; cluster = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; datacenter = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; new_net = new org.ovirt.engine.core.common.businessentities.network.Network () ; new_net . setName ( STRING_CONSTANT ) ; new_net . setDescription ( STRING_CONSTANT ) ; new_net . setDataCenterId ( datacenter ) ; }
@ org.junit.Test public void migrationNotSupported () { validator = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ) ; org.mockito.Mockito . doReturn ( false ) . when ( validator ) . migrationSupportedForArch ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) ; org.junit.Assert . assertThat ( validator . migrationSupported ( org.ovirt.engine.core.utils.RandomUtils . instance () . nextEnum ( org.ovirt.engine.core.common.businessentities.ArchitectureType . class ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.MIGRATION_ON_ERROR_IS_NOT_SUPPORTED ) ) ; }
@ org.junit.Test public void testSave () { dao . save ( dummyPolicy ) ; org.ovirt.engine.core.common.scheduling.ClusterPolicy result = dao . get ( dummyPolicy . getId () , java.util.Collections . emptyMap () ) ; org.junit.Assert . assertEquals ( result , dummyPolicy ) ; dao . remove ( dummyPolicy . getId () ) ; }
private void mockDAOForQuery () { org.mockito.Mockito . when ( getDbFacadeMockInstance () . getQuotaDao () ) . thenReturn ( quotaDAO ) ; returnedQuotas = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > () ; org.mockito.Mockito . when ( getQueryParameters () . getAdElementId () ) . thenReturn ( adElementId ) ; org.mockito.Mockito . when ( getQueryParameters () . getStoragePoolId () ) . thenReturn ( storagePoolId ) ; org.mockito.Mockito . when ( quotaDAO . getQuotaByAdElementId ( adElementId , storagePoolId , false ) ) . thenReturn ( returnedQuotas ) ; }
private void findNegotiatingProfiles () { if ( ( profiles ) == null ) { synchronized ( this ) { if ( ( profiles ) == null ) { profiles = new java.util.ArrayList < org.ovirt.engine.core.authentication.AuthenticationProfile > ( NUMBER_CONSTANT ) ; for ( org.ovirt.engine.core.authentication.AuthenticationProfile profile : org.ovirt.engine.core.authentication.AuthenticationProfileManager . getInstance () . getProfiles () ) { if ( profile != null ) { org.ovirt.engine.core.authentication.Authenticator authenticator = profile . getAuthenticator () ; if ( authenticator instanceof org.ovirt.engine.core.authentication.NegotiatingAuthenticator ) { profiles . add ( NUMBER_CONSTANT , profile ) ; } } } } } } }
@ org.junit.Test public void testCompareTo () { org.ovirt.engine.core.compat.Guid guid1 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.ovirt.engine.core.compat.Guid guid2 = new org.ovirt.engine.core.compat.Guid ( STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( ( ( guid1 . compareTo ( guid2 ) ) < NUMBER_CONSTANT ) ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , guid1 . compareTo ( guid1 ) ) ; org.junit.Assert . assertTrue ( ( ( guid2 . compareTo ( guid1 ) ) > NUMBER_CONSTANT ) ) ; }
public java.util.Set < java.lang.String > computeSelecetedLabels () { java.util.Set < java.lang.String > selectedLabels = new java.util.HashSet <> () ; for ( org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > labelModel : getItems () ) { selectedLabels . add ( labelModel . getSelectedItem () ) ; } return selectedLabels ; }
@ org.junit.Test public void testVMIsNotValid () { org.mockito.Mockito . doReturn ( java.lang.Boolean.FALSE ) . when ( cmd ) . validateVM ( vmValidator ) ; org.mockito.Mockito . doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest . getEmptyDiskList () ) . when ( cmd ) . getDisksList () ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ org.junit.Test public void insufficientDiskSpace () { final int lotsOfSpace = NUMBER_CONSTANT ; final org.ovirt.engine.core.bll.ImportVmCommand c = setupDiskSpaceTest ( lotsOfSpace ) ; org.junit.Assert . assertFalse ( c . canDoAction () ) ; org.junit.Assert . assertTrue ( c . getReturnValue () . getCanDoActionMessages () . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW . toString () ) ) ; }
protected void updateConsoleDevice ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetConsoleDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > consoleDevices = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; getModel () . getIsConsoleDeviceEnabled () . setEntity ( ( ! ( consoleDevices . isEmpty () ) ) ) ; } } ) ) ; }
private void applyNetworkChangesToHosts () { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand < T > . SyncNetworkParametersBuilder builder = new SyncNetworkParametersBuilder () ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = builder . buildParameters ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand . getNetwork () , getOldNetwork () ) ; if ( ! ( parameters . isEmpty () ) ) { org.ovirt.engine.core.bll.network.NetworkParametersBuilder . updateParametersSequencing ( parameters ) ; runInternalMultipleActions ( VdcActionType.PersistentSetupNetworks , parameters ) ; } }
protected void updateOptionsRequiredAddDataCenter ( boolean enableButton ) { if ( enableButton ) { org.ovirt.engine.ui.uicommonweb.UICommand addDataCenterAction = new org.ovirt.engine.ui.uicommonweb.UICommand ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.ADD_DATA_CENTER , this ) ; addDataCenterAction . setTitle ( addDataCenterTitle ) ; addDataCenterAction . setIsAvailable ( enableButton ) ; getOptionalActions () . add ( addDataCenterAction ) ; } else { setNote ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( noAvailableActions ) ) ; } stopProgress () ; }
public void process ( ) throws java.io.IOException , org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( this . closing . get () ) { return; } processIncoming () ; if ( this . closing . get () ) { return; } processHeartbeat () ; if ( this . closing . get () ) { return; } processOutgoing () ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = performImageVdsmOperation () ; if ( ( vdsReturnValue != null ) && ( vdsReturnValue . getSucceeded () ) ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { processOldImageFromDb () ; addDiskImageToDb ( newDiskImage , getCompensationContext () ) ; setActionReturnValue ( newDiskImage ) ; setSucceeded ( true ) ; return null ; } } ) ; } }
public void setPmProxyPreferences ( java.lang.String value ) { java.lang.String [] array = value . split ( STRING_CONSTANT ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > list = new java.util.ArrayList <> () ; for ( java.lang.String item : array ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > model = new org.ovirt.engine.ui.uicommonweb.models.EntityModel () ; model . setEntity ( item ) ; list . add ( model ) ; } getPmProxyPreferencesList () . setItems ( list ) ; }
public static java.lang.String getPassFromFile ( java.lang.String passFile ) throws java.io.IOException { java.io.FileReader input = new java.io.FileReader ( passFile ) ; java.io.BufferedReader br = new java.io.BufferedReader ( input ) ; java.lang.String pass = br . readLine () ; try { input . close () ; br . close () ; } catch ( java.lang.Exception e ) {} return pass ; }
private void createObjects () { existingServer1 = createServer ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_NAME_1 ) ; existingServer2 = createServer ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_ID_2 , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_NAME_2 ) ; existingServers . add ( existingServer1 ) ; existingServers . add ( existingServer2 ) ; existingServers . add ( createServer ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_ID_3 , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.SERVER_NAME_3 ) ) ; existingDistVol = createDistVol ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.DIST_VOL_NAME , org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.EXISTING_VOL_DIST_ID ) ; existingReplVol = createReplVol () ; }
@ org.junit.Test ( expected = com.google.gwt.core.ext.UnableToCompleteException . class ) public void doParse_unhandledFieldTypeRecursion ( ) throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set < ? extends com.google.gwt.core.ext.typeinfo.JClassType > ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = new java.util.HashSet ( java.util.Arrays . asList ( ownerTypeParentFieldTypeSubField1Type ) ) ; org.mockito.Mockito . doReturn ( ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy ) . when ( ownerTypeParentFieldTypeSubField1Type ) . getFlattenedSupertypeHierarchy () ; org.mockito.Mockito . when ( ownerTypeParentFieldTypeSubField1Type . getFields () ) . thenReturn ( new com.google.gwt.core.ext.typeinfo.JField [] { ownerTypeParentField } ) ; tested . doParse ( ownerType , new java.util.ArrayList < com.google.gwt.core.ext.typeinfo.JClassType > () , STRING_CONSTANT , STRING_CONSTANT ) ; }
private void updateArbiterAvailability () { getArbiterVolume () . setIsAvailable ( ( ( ( getTypeList () . getSelectedItem () . isReplicatedType () ) && ( ( getCluster () . getSelectedItem () ) != null ) ) && ( ( Version.v4_1 . compareTo ( getCluster () . getSelectedItem () . getCompatibilityVersion () ) ) >= NUMBER_CONSTANT ) ) ) ; }
public void getAAAProfilesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > () ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
private void setUpGetBallooningExpectations ( int times ) throws java.lang.Exception { for ( int i = NUMBER_CONSTANT ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ i ] } , true ) ; } }
protected void updateUserCdImage ( org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getInstance () . getIrsImageList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel () , new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < java.lang.String > images = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; setImagesToModel ( model , images ) ; } } ) , storagePoolId ) ; }
private void newPoolNameIsAlreadyTaken () { org.mockito.Mockito . when ( spDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool () ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > storagePoolList = new java.util.ArrayList <> () ; storagePoolList . add ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest . createDefaultStoragePool () ) ; org.mockito.Mockito . when ( spDao . getByName ( org.mockito.Matchers . anyString () , org.mockito.Matchers . anyBoolean () ) ) . thenReturn ( new java.util.ArrayList ( storagePoolList ) ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { java.lang.String minimal = org.ovirt.engine.core.common.config.Config . < java.lang.String > getValue ( ConfigValues.BootstrapMinimalVdsmVersion ) ; if ( ( minimal . trim () . length () ) == NUMBER_CONSTANT ) { _parser . cliNoop () ; } else { _parser . cliEnvironmentSet ( VdsmEnv.VDSM_MINIMUM_VERSION , minimal ) ; } return true ; }
@ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > cinderVolumeTypes ) { java.util.List < java.lang.String > volumeTypesNames = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType cinderVolumeType : cinderVolumeTypes ) { volumeTypesNames . add ( cinderVolumeType . getName () ) ; } getCinderVolumeType () . setItems ( volumeTypesNames ) ; }
public static org.ovirt.engine.core.compat.RpmVersion getOvirtHostOsVersion ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return new org.ovirt.engine.core.compat.RpmVersion ( vds . getHostOs () , STRING_CONSTANT , true ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.VdsHandler.log . errorFormat ( STRING_CONSTANT , vds . getId () , vds . getName () , vds . getHostOs () , org.apache.commons.lang.exception.ExceptionUtils . getMessage ( e ) ) ; } return null ; }
@ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1 ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel1 = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result1 . getState () ) ) ; vmListModel1 . getWindow () . StopProgress () ; org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1 . getReturnValue () ; if ( ( retVal != null ) && ( retVal . getSucceeded () ) ) { vmListModel1 . Cancel () ; } }
public static void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > () ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
@ org.junit.runners.Parameterized.Parameters public static java.lang.Object [] [] namesParams () { return new java.lang.Object [] [] { new java.lang.Object [] { STRING_CONSTANT , false , false } , new java.lang.Object [] { STRING_CONSTANT , true , false } , new java.lang.Object [] { STRING_CONSTANT , true , true } } ; }
@ org.junit.Test public void addExistingConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection , null ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS ) ; }
private void testValidSql ( java.lang.String dynamicQuery , java.lang.String exepctedSQLResult ) { org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( NUMBER_CONSTANT ) ; org.ovirt.engine.core.searchbackend.ISyntaxChecker curSyntaxChecker = org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory . createBackendSyntaxChecker ( STRING_CONSTANT ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = curSyntaxChecker . analyzeSyntaxState ( dynamicQuery , true ) ; org.junit.Assert . assertTrue ( ( STRING_CONSTANT + dynamicQuery ) , res . getvalid () ) ; java.lang.String query = chkr . generateQueryFromSyntaxContainer ( res , true ) ; java.lang.System.out . println ( exepctedSQLResult ) ; java.lang.System.out . println ( query ) ; org.junit.Assert . assertEquals ( exepctedSQLResult , query ) ; }
private void addStatistics ( org.ovirt.engine.api.model.Vm model , org.ovirt.engine.api.restapi.resource.VM entity ) { model . setStatistics ( new org.ovirt.engine.api.model.Statistics () ) ; org.ovirt.engine.api.restapi.resource.VmStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.VmStatisticalQuery ( newModel ( model . getId () ) ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query . getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( statistic , query . getParentType () ) ; } model . getStatistics () . getStatistics () . addAll ( statistics ) ; }
@ java.lang.Override public void onSuccess ( java.util.Set < java.lang.String > emulatedSet ) { if ( emulatedSet != null ) { java.lang.String oldVal = getEmulatedMachine () . getSelectedItem () ; getEmulatedMachine () . setItems ( new java.util.TreeSet <> ( emulatedSet ) ) ; getEmulatedMachine () . setSelectedItem ( oldVal ) ; convertEmulatedMachineField () ; } }
@ org.junit.Test public void testDedicatedHostNotExistOrNotSameCluster () { prepareVmToPassValidate () ; org.mockito.Mockito . doReturn ( false ) . when ( command ) . isDedicatedVdsExistOnSameCluster ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; vmStatic . setDedicatedVmForVdsList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , command . validate () ) ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetStorageDomainsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters . class , new java.lang.String [] { STRING_CONSTANT } , new java.lang.Object [] { GUIDS [ ( ( NAMES.length ) - NUMBER_CONSTANT ) ] } , setUpStorageDomains () , failure ) ; }
@ org.junit.BeforeClass public static void initTestCase ( ) throws java.lang.Exception { if ( ( org.ovirt.engine.core.dao.BaseDAOTestCase.dataSource ) == null ) { org.ovirt.engine.core.dao.BaseDAOTestCase.dataSource = org.ovirt.engine.core.dao.BaseDAOTestCase . createDataSource () ; org.ovirt.engine.core.dao.BaseDAOTestCase.dataset = org.ovirt.engine.core.dao.BaseDAOTestCase . initDataSet () ; org.ovirt.engine.core.dao.BaseDAOTestCase.dbFacade = new org.ovirt.engine.core.dal.dbbroker.DbFacade () ; org.ovirt.engine.core.dao.BaseDAOTestCase.dbFacade . setDbEngineDialect ( org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator . loadDbEngineDialect () ) ; org.ovirt.engine.core.dao.BaseDAOTestCase.dbFacade . setTemplate ( org.ovirt.engine.core.dao.BaseDAOTestCase.dbFacade . getDbEngineDialect () . createJdbcTemplate ( org.ovirt.engine.core.dao.BaseDAOTestCase.dataSource ) ) ; DatabaseOperation.CLEAN_INSERT . execute ( org.ovirt.engine.core.dao.BaseDAOTestCase . getConnection () , org.ovirt.engine.core.dao.BaseDAOTestCase.dataset ) ; } }
@ org.junit.Test public void testSucceedInterfaceCanUpdateReadOnly () { initializeCommand ( new org.ovirt.engine.core.common.action.UpdateVmDiskParameters ( vmId , createDiskImage () ) ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . updateReadOnlyRequested () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface () ; org.junit.Assert . assertTrue ( command . validateCanUpdateReadOnly ( diskValidator ) ) ; }
private void addGraphicsDevice () { for ( org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : org.ovirt.engine.core.bll.AddVmCommand . getParameters () . getGraphicsDevices () . values () ) { if ( graphicsDevice == null ) { continue; } graphicsDevice . setVmId ( org.ovirt.engine.core.bll.AddVmCommand . getVmId () ) ; org.ovirt.engine.core.bll.AddVmCommand . getBackend () . runInternalAction ( VdcActionType.AddGraphicsDevice , new org.ovirt.engine.core.bll.GraphicsParameters ( graphicsDevice ) ) ; } }
private void addDiskPermissions ( org.ovirt.engine.core.common.businessentities.Disk disk ) { if ( ( org.ovirt.engine.core.bll.AddDiskCommand . getCurrentUser () ) != null ) { org.ovirt.engine.core.common.businessentities.Permissions perms = new org.ovirt.engine.core.common.businessentities.Permissions ( org.ovirt.engine.core.bll.AddDiskCommand . getCurrentUser () . getId () , PredefinedRoles.DISK_OPERATOR . getId () , disk . getId () , org.ovirt.engine.core.common.VdcObjectType.Disk ) ; org.ovirt.engine.core.bll.MultiLevelAdministrationHandler . addPermission ( perms ) ; } }
protected void actualSave () { flush () ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runAction ( action , new org.ovirt.engine.core.common.action.ProviderParameters ( provider ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback () { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ( ( result . getReturnValue () ) == null ) || ( ! ( result . getReturnValue () . getSucceeded () ) ) ) { return; } sourceListModel . getSearchCommand () . execute () ; cancel () ; } } , this ) ; }
@ java.lang.Override protected boolean matchesSafely ( org.ovirt.engine.core.bll.ValidationResult item ) { final java.util.List < java.lang.String > vr = item . getVariableReplacements () ; return ( ( variableReplacements.length ) == ( vr . size () ) ) && ( vr . containsAll ( java.util.Arrays . asList ( variableReplacements ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createImage () { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage () ; diskImage . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; diskImage . setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays . asList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) ) ; return diskImage ; }
public static void endTaskStep ( org.ovirt.engine.core.compat.Guid stepId , org.ovirt.engine.core.common.job.JobExecutionStatus exitStatus ) { try { if ( stepId != null ) { org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.JobRepositoryFactory . getJobRepository () . getStep ( stepId ) ; if ( step != null ) { step . markStepEnded ( exitStatus ) ; org.ovirt.engine.core.bll.job.JobRepositoryFactory . getJobRepository () . updateStep ( step ) ; } } } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.job.ExecutionHandler.log . errorFormat ( STRING_CONSTANT , stepId , exitStatus , e ) ; } }
private void initSnapshotValidator () { org.mockito.Mockito . when ( snapshotsValidator . vmNotInPreview ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( ValidationResult.VALID ) ; org.mockito.Mockito . when ( snapshotsValidator . vmNotDuringSnapshot ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( ValidationResult.VALID ) ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
@ com.gwtplatform.mvp.client.annotations.ProxyEvent public void onSearchableModelActivation ( org.ovirt.engine.ui.userportal.section.main.presenter.SearchableModelActivationEvent event ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel currentModel = modelProvider . getModel () ; if ( ( event . getListModel () ) == currentModel ) { currentModel . getSearchCommand () . Execute () ; } else { currentModel . setItems ( null ) ; currentModel . EnsureAsyncSearchStopped () ; } }
@ org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation ( value = STRING_CONSTANT ) public void refreshLightWeightData () { log . debug ( STRING_CONSTANT ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = getClusterDao () . getAll () ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { if ( cluster . supportsGlusterService () ) { try { refreshClusterData ( cluster ) ; } catch ( java.lang.Exception e ) { log . errorFormat ( STRING_CONSTANT , cluster . getname () , e ) ; } } } }
private void prepareMocks ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand < org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters > command ) { org.mockito.Mockito . doReturn ( auditLogDao ) . when ( command ) . getAuditLogDao () ; org.mockito.Mockito . doReturn ( getEventWithOvirtOrigin () ) . when ( auditLogDao ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_2 ) ; org.mockito.Mockito . doReturn ( getEventWithExternalOrigin () ) . when ( auditLogDao ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String label = getNetworkLabel () . getSelectedItem () ; getNetworkLabel () . setItems ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; getNetworkLabel () . setSelectedItem ( label ) ; onExportChanged () ; }
public double nextDouble ( double d , boolean inclusive ) { if ( d <= NUMBER_CONSTANT ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } double rand = nextDouble () ; if ( ! inclusive ) { while ( rand == NUMBER_CONSTANT ) { rand = nextDouble () ; } } return rand * d ; }
private void removeMemoryFromActiveSnapshot () { java.lang.String memory = org.ovirt.engine.core.bll.RunVmCommand . getActiveSnapshot () . getMemoryVolume () ; if ( org.apache.commons.lang.StringUtils . isEmpty ( memory ) ) { return; } org.ovirt.engine.core.bll.RunVmCommand . getSnapshotDAO () . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.RunVmCommand . getVmId () ) ; if ( ( org.ovirt.engine.core.bll.RunVmCommand . getSnapshotDAO () . getNumOfSnapshotsByMemory ( memory ) ) == NUMBER_CONSTANT ) { removeMemoryVolumes ( memory , org.ovirt.engine.core.bll.RunVmCommand . getActionType () , true ) ; } }
private static java.util.LinkedHashMap < java.lang.String , java.lang.String > getPeriods ( org.ovirt.engine.sdk.entities.DetailedLink link ) { java.lang.String url = link . getHref () ; java.util.List < java.lang.String > sUrl = java.util.Arrays . asList ( url . split ( STRING_CONSTANT ) ) ; return org.ovirt.engine.sdk.generator.utils.UrlUtils . listToDict ( sUrl ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; model . setDataCentersAndClusters ( model , dataCenters , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , vm . getVdsGroupId () ) ; initTemplate () ; initCdImage () ; initSoundCard ( vm . getId () ) ; }
@ java.lang.Override public org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper clone ( ) throws java.lang.CloneNotSupportedException { super . clone () ; org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper cloneWrapper = new org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper ( getAuditLogable () , canDoActionMessages ) ; if ( ( getParameters () ) != null ) { cloneWrapper . setParameters ( new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > () ) ; for ( org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter parameter : getParameters () ) { cloneWrapper . getParameters () . add ( parameter . clone () ) ; } } return cloneWrapper ; }
protected java.lang.Object runPublicQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams , java.lang.String sessionId ) { initQueryParams ( queryParams , sessionId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend . runPublicQuery ( queryType , queryParams ) ; return ( result != null ) && ( result . getSucceeded () ) ? result . getReturnValue () : null ; }
protected void getDowntime () { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand ( VDSCommandType.MigrateStatus , new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters ( getDestinationVdsId () , org.ovirt.engine.core.bll.MigrateVmCommand . getVmId () ) ) ; if ( retVal != null ) { actualDowntime = ( ( java.lang.Integer ) ( retVal . getReturnValue () ) ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { migrationErrorCode = e . getErrorCode () ; } }
@ org.junit.Test public void testGet () { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao . get ( FixturesTool.VM_NETWORK_INTERFACE_PROFILE ) ; org.junit.Assert . assertNotNull ( result ) ; org.junit.Assert . assertEquals ( FixturesTool.VM_NETWORK_INTERFACE_PROFILE , result . getId () ) ; org.junit.Assert . assertFalse ( result . isPortMirroring () ) ; org.junit.Assert . assertFalse ( result . isPassthrough () ) ; }
@ java.lang.Override public void setMessage ( java.lang.String message ) { super . setMessage ( message ) ; if ( ( message != null ) && ( ( message . length () ) > NUMBER_CONSTANT ) ) { table . setVisible ( false ) ; messageLabel . setText ( message ) ; } }
@ org.junit.runners.Parameterized.Parameters public static java.lang.Object [] [] data () { return new java.lang.Object [] [] { new java.lang.Object [] { false , java.util.Collections . emptyList () } , new java.lang.Object [] { false , java.util.Collections . singletonList ( ActionGroup.CREATE_VM ) } , new java.lang.Object [] { true , java.util.Collections . singletonList ( ActionGroup.CONFIGURE_ENGINE ) } , new java.lang.Object [] { true , java.util.Arrays . asList ( ActionGroup.CONFIGURE_ENGINE , ActionGroup.CREATE_VM ) } } ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForRemove () ; mockBackend ( true , null ) ; cmd . executeCommand () ; org.mockito.Mockito . verify ( hooksDao , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . remove ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.junit.Assert . assertEquals ( AuditLogType.GLUSTER_HOOK_REMOVED , cmd . getAuditLogTypeValue () ) ; }
@ org.junit.Test public void testGet () { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( VdcQueryType.GetImageById , org.ovirt.engine.core.common.queries.GetImageByIdParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainImageResourceTest.DOMAIN_ID , org.ovirt.engine.api.restapi.resource.BackendStorageDomainImageResourceTest.IMAGE_ID . toString () } , getEntity ( NUMBER_CONSTANT ) ) ; org.ovirt.engine.api.model.Image image = resource . get () ; org.ovirt.engine.api.restapi.resource.BackendStorageDomainImageResourceTest . verifyModelSpecific ( image , NUMBER_CONSTANT ) ; verifyLinks ( image ) ; }
@ java.lang.Override protected void moveOrCopyAllImageGroups () { moveOrCopyAllImageGroups ( getVm () . getId () , org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( getVm () . getDiskMap () . values () , false , false , true ) ) ; copyAllMemoryImages ( getVm () . getId () ) ; }
@ java.lang.Override public void saveGlusterServerHook ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook ) { getCallsHandler () . executeModification ( STRING_CONSTANT , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , serverHook . getHookId () ) . addValue ( STRING_CONSTANT , serverHook . getServerId () ) . addValue ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.EnumUtils . nameOrNull ( serverHook . getStatus () ) ) . addValue ( STRING_CONSTANT , org.ovirt.engine.core.common.utils.EnumUtils . nameOrNull ( serverHook . getContentType () ) ) . addValue ( STRING_CONSTANT , serverHook . getChecksum () ) ) ; }
@ org.junit.Test public void testRemoveNonExistant ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , false ) ; try { resource . remove () ; fail ( STRING_CONSTANT ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae . getResponse () ) ; assertEquals ( NUMBER_CONSTANT , wae . getResponse () . getStatus () ) ; } }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setAllContentHeaderExpectation () ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; setGetGuestAgentQueryExpectations ( NUMBER_CONSTANT ) ; org.ovirt.engine.api.model.Nic nic = resource . get () ; verifyModelSpecific ( nic , NUMBER_CONSTANT ) ; verifyLinks ( nic ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.InstanceType update ( org.ovirt.engine.api.model.InstanceType incoming ) { org.ovirt.engine.api.model.InstanceType instanceType = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters . class ) , VdcActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource.UpdateParametersProvider () ) ; if ( instanceType != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper . adjustDisplayData ( this , instanceType ) ; } return instanceType ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getImages () { if ( ( images ) == null ) { images = new java.util.ArrayList <> () ; for ( org.ovirt.engine.core.compat.Guid imageId : org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand . getParameters () . getImageIds () ) { if ( imageId == null ) { continue; } org.ovirt.engine.core.common.businessentities.DiskImage image = getDiskImageDao () . getSnapshotById ( imageId ) ; if ( image != null ) { images . add ( image ) ; } } } return images ; }
private void mockDiskImageDao () { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskImageList = new java.util.ArrayList <> () ; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ; diskImage . setStorageIds ( new java.util.ArrayList ( java.util.Arrays . asList ( org.ovirt.engine.core.compat.Guid . newGuid () ) ) ) ; diskImageList . add ( diskImage ) ; org.mockito.Mockito . doReturn ( diskDao ) . when ( spyCommand ) . getDiskDao () ; org.mockito.Mockito . when ( diskDao . getAllForVm ( vmId ) ) . thenReturn ( diskImageList ) ; }
@ org.junit.Test public void testValidateNotEnoughSpace () { prepareForVmValidatorTests () ; spySdValidator () ; cmd . getVm () . setStatus ( VMStatus.Up ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesDisks = mockDisksList ( NUMBER_CONSTANT ) ; org.mockito.Mockito . when ( storageDomainsValidator . allDomainsHaveSpaceForClonedDisks ( imagesDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
protected R addLinks ( R model , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParent , java.lang.String . . . subCollectionMembersToExclude ) { model = addParents ( model ) ; model = linkSubCollections ( model , suggestedParent , subCollectionMembersToExclude ) ; model = org.ovirt.engine.api.common.util.LinkHelper . addLinks ( org.ovirt.engine.api.restapi.resource.AbstractBackendResource . getUriInfo () , model , suggestedParent ) ; return model ; }
protected void analyze () { proceedDownVms () ; proceedWatchdogEvents () ; proceedBalloonCheck () ; proceedGuaranteedMemoryCheck () ; updateRepository () ; prepareGuestAgentNetworkDevicesForUpdate () ; updateLunDisks () ; updateVmJobs () ; analyzeExternalVms () ; analyzeHostedEngineVm () ; if ( ( vmDynamicToSave ) != null ) { vmsMonitoring . addVmDynamicToList ( vmDynamicToSave ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VDS , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( getStatusChangeVDSCommand () , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters ( upServer . getId () , entity . getGlusterCommand () , entity . getStage () , entity . getName () ) ) ; return new org.ovirt.engine.core.common.utils.Pair ( upServer , returnValue ) ; }
@ org.junit.Test public void executeCommand () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd . executeCommand () ; org.junit.Assert . assertEquals ( cmd . getAuditLogTypeValue () , AuditLogType.GLUSTER_HOOK_ENABLE ) ; }
void initListBoxEditors () { isoEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < java.lang.Object > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < java.lang.Object > () { @ java.lang.Override public java.lang.String renderNullSafe ( java.lang.Object object ) { org.ovirt.engine.core.compat.RpmVersion version = ( ( org.ovirt.engine.core.compat.RpmVersion ) ( object ) ) ; return version . getRpmName () ; } } ) ; rbPassword = new com.google.gwt.user.client.ui.RadioButton ( STRING_CONSTANT ) ; rbPublicKey = new com.google.gwt.user.client.ui.RadioButton ( STRING_CONSTANT ) ; publicKeyEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelTextAreaLabelEditor () ; }
com.google.gwt.http.client.RequestBuilder createRequest ( java.lang.String engineAuthToken ) { com.google.gwt.http.client.RequestBuilder builder = new com.google.gwt.http.client.RequestBuilder ( com.google.gwt.http.client.RequestBuilder.GET , restApiBaseUrl ) ; builder . setHeader ( STRING_CONSTANT , java.lang.String . valueOf ( restApiSessionTimeout ) ) ; java.lang.String preferValue = STRING_CONSTANT ; if ( engineAuthToken != null ) { preferValue += STRING_CONSTANT ; builder . setHeader ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.ENGINE_AUTH_TOKEN_HEADER , engineAuthToken ) ; } builder . setHeader ( STRING_CONSTANT , preferValue ) ; java.lang.String sessionId = getSessionId () ; if ( sessionId != null ) { builder . setHeader ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_HEADER , sessionId ) ; } return builder ; }
private org.ovirt.engine.core.common.businessentities.VM mockVm () { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM () ; vm . setstatus ( VMStatus.Down ) ; vm . setstorage_pool_id ( org.ovirt.engine.core.compat.Guid . NewGuid () ) ; org.mockito.Mockito . when ( vmDAO . get ( command . getParameters () . getVmId () ) ) . thenReturn ( vm ) ; return vm ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.image_storage_domain_map imageStorageDomainMap , org.ovirt.engine.core.compat.Guid vmId ) { try { org.ovirt.engine.core.bll.ImagesHandler . addImage ( image , active , imageStorageDomainMap ) ; org.ovirt.engine.core.bll.ImagesHandler . addDiskToVmIfNotExists ( image , vmId ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log . error ( STRING_CONSTANT , ex ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.DB , ex ) ; } }
@ org.junit.Test public void testDiskLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk disk = new org.ovirt.engine.api.model.Disk () ; disk . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DISK_ID ) ; disk . setVm ( new org.ovirt.engine.api.model.Vm () ) ; disk . getVm () . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( disk ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DISK_HREF , disk . getHref () ) ; }
@ org.junit.Test public void addNotEmptyIdConnection () { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( STRING_CONSTANT , StorageType.POSIXFS , STRING_CONSTANT , STRING_CONSTANT ) ; newPosixConnection . setid ( org.ovirt.engine.core.compat.Guid . newGuid () . toString () ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid.Empty ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils . runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY ) ; }
@ java.lang.Override protected void init () { resource = new org.ovirt.engine.api.restapi.resource.BackendHostResource ( GUIDS [ NUMBER_CONSTANT ] . toString () , new org.ovirt.engine.api.restapi.resource.BackendHostsResource () ) ; resource . setBackend ( backend ) ; resource . setMappingLocator ( mapperLocator ) ; resource . setValidatorLocator ( validatorLocator ) ; resource . setMessageBundle ( messageBundle ) ; resource . setHttpHeaders ( httpHeaders ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { addDisk () ; } if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { cancel () ; } }
@ org.junit.Test public void testCheckVmOnlyOnClusterUpgrade () { prepareVmToPassValidate () ; mockVmValidator () ; command . initEffectiveCompatibilityVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( command ) ; org.mockito.Mockito . verify ( inClusterUpgradeValidator , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . isVmReadyForUpgrade ( org.mockito.ArgumentMatchers . any () ) ; }
@ org.junit.Before public void setUp () { spId = org.ovirt.engine.core.compat.Guid . newGuid () ; vdsId = org.ovirt.engine.core.compat.Guid . newGuid () ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setId ( vdsId ) ; vds . setStoragePoolId ( spId ) ; cmd . setVds ( vds ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel createNetworkClusterModel ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { if ( cluster . getId () . equals ( this . cluster . getId () ) ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel ( cluster ) ; networkClusterModel . setAttached ( true ) ; networkClusterModel . setRequired ( ( ! ( getExport () . getEntity () ) ) ) ; networkClusterModel . setIsChangeable ( false ) ; return networkClusterModel ; } else { return super . createNetworkClusterModel ( cluster ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getDetailModel () . getAppListModel () . getItems () ) != null ) { applicationsTable . setRowData ( new java.util.ArrayList ( getDetailModel () . getAppListModel () . getItems () ) ) ; } else { applicationsTable . setRowData ( new java.util.ArrayList < java.lang.String > () ) ; } }
public static void logError ( org.slf4j.Logger log , java.lang.String id , java.lang.Object obj , java.lang.Throwable t ) { org.ovirt.engine.core.utils.log.Logged logged = org.ovirt.engine.core.utils.log.LoggedUtils . getAnnotation ( obj ) ; if ( ( logged != null ) && ( org.ovirt.engine.core.utils.log.LoggedUtils . isLogLevelOn ( log , logged . errorLevel () ) ) ) { org.ovirt.engine.core.utils.log.LoggedUtils . log ( log , logged . errorLevel () , org.ovirt.engine.core.utils.log.LoggedUtils.ERROR_LOG , org.ovirt.engine.core.utils.log.LoggedUtils . determineMessage ( log , logged , obj ) , t . getMessage () , id ) ; log . error ( STRING_CONSTANT , t ) ; } }
public static java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > filterDisksByType ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > diskModels , org.ovirt.engine.core.common.businessentities.storage.DiskStorageType type ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > filteredList = new java.util.ArrayList <> () ; for ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel item : diskModels ) { if ( ( item . getDisk () . getDiskStorageType () ) == type ) { filteredList . add ( item ) ; } } return filteredList ; }
@ org.junit.Test public void hostNicHaveOneFreeVfWhichShareIommuGroup () { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mockVnic ( true ) ; initHostWithOneVfsConfig ( java.util.Collections . singletonList ( vnic ) , NUMBER_CONSTANT , true , false , false , true , true , false ) ; assertHostNotValid ( java.util.Collections . singletonList ( vnic ) , java.util.Collections . singletonList ( vnic . getName () ) ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = returnValue . getReturnValue () ; java.util.Collections . sort ( templates , new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericNameableComparator () ) ; setItems ( templates ) ; setIsEmpty ( ( ( templates . size () ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { java.util.List < Q > qosList = ( ( java.util.ArrayList < Q > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; qosMap = new java.util.HashMap <> () ; if ( qosList != null ) { for ( Q qos : qosList ) { qosMap . put ( qos . getId () , qos ) ; } } fetchProfiles () ; }
public org.ovirt.engine.sdk.entities.Action setupnetworks ( org.ovirt.engine.sdk.entities.Action action ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( ( ( this . parent . getHref () ) + ( SLASH ) ) + ( getName () ) ) + ( SLASH ) ) + STRING_CONSTANT ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder () . build () ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build () ; return getProxy () . action ( url , action , org.ovirt.engine.sdk.entities.Action . class , org.ovirt.engine.sdk.entities.Action . class , headers ) ; }
@ java.lang.Override public void vmTypeChanged ( org.ovirt.engine.core.common.businessentities.VmType vmType ) { if ( getModel () . getProvisioning () . getIsAvailable () ) { getModel () . getProvisioning () . setEntity ( ( vmType == ( org.ovirt.engine.core.common.businessentities.VmType.Server ) ) ) ; } super . vmTypeChanged ( vmType ) ; }
public void getExternalProviderHostGroupList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalHostGroup > () ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters () ; params . setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetHostGroupsFromExternalProvider , params , aQuery ) ; }
@ java.lang.Override protected void executeVmCommand () { try { vmHandler . updateDisksFromDb ( org.ovirt.engine.core.bll.exportimport.ExtractOvaCommand . getVm () ) ; java.util.List < java.lang.String > diskPaths = prepareImages () ; boolean succeeded = runAnsibleImportOvaPlaybook ( diskPaths ) ; teardownImages () ; if ( ! succeeded ) { log . error ( STRING_CONSTANT ) ; setCommandStatus ( CommandStatus.FAILED ) ; } else { org.ovirt.engine.core.bll.exportimport.ExtractOvaCommand . setSucceeded ( true ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { log . error ( STRING_CONSTANT , e ) ; setCommandStatus ( CommandStatus.FAILED ) ; } }
@ org.junit.Test public void onSuccessAudit () { mockExecutor ( true ) ; org.mockito.Mockito . doNothing () . when ( command ) . teardown () ; command . executeCommand () ; org.mockito.Mockito . verify ( auditLogDirector , org.mockito.Mockito . times ( NUMBER_CONSTANT ) ) . log ( org.mockito.ArgumentMatchers . any () , org.mockito.ArgumentMatchers . any () ) ; }
@ java.lang.Override public void execute () { int minWidth = calculateWidgetMinWidthNeeded () ; contentPanel . getElement () . getStyle () . setProperty ( org.ovirt.engine.ui.common.widget.action.AbstractActionPanel.MIN_WIDTH , minWidth , Unit.PX ) ; if ( ( widgetMinWidth ) > NUMBER_CONSTANT ) { siblingWidth = calculateSiblingWidth () ; } initializeCascadeMenuPanel () ; }
@ org.junit.Test public void disableGlusterWhenVolumesExist () { createCommandWithVirtEnabled () ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithNoCpuName () ) ; cpuExists () ; cpuFlagsNotMissing () ; allQueriesForVms () ; clusterHasGlusterVolumes () ; validateFailedWithReason ( EngineMessage.CLUSTER_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
@ java.lang.Override public void sendMessage ( byte [] message ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect () ; } finally { send ( new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message () . send () . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION , this . getRequestQueue () ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_REPLY_TO , getResponseQueue () ) . withContent ( message ) . build () ) ; } }
private void removeVmImages () { java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > imageParams = org.ovirt.engine.core.bll.AddVmAndCloneImageCommand . getParameters () . getImagesParameters () ; for ( org.ovirt.engine.core.common.action.VdcActionParametersBase param : imageParams ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageToRemoveByParam ( ( ( org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters ) ( param ) ) ) ; if ( diskImage != null ) { org.ovirt.engine.core.bll.ImagesHandler . removeDiskImage ( diskImage , org.ovirt.engine.core.bll.AddVmAndCloneImageCommand . getVmId () ) ; } } }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
@ org.junit.Test public void canDoActionPreallocatedSpaceCheckSucceeds () { final int availableSize = NUMBER_CONSTANT ; final int usedSize = NUMBER_CONSTANT ; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( sdid , VolumeType.Preallocated ) ; mockVm () ; mockStorageDomain ( sdid , availableSize , usedSize ) ; mockStoragePoolIsoMap () ; org.junit.Assert . assertTrue ( command . canDoAction () ) ; }
@ org.junit.Test ( expected = java.lang.RuntimeException . class ) public void testQueryForInvalidVolumeId () { org.mockito.Mockito . doReturn ( Guid.Empty ) . when ( getQueryParameters () ) . getVolumeId () ; org.mockito.Mockito . doReturn ( null ) . when ( volumeDao ) . getById ( Guid.Empty ) ; getQuery () . executeQueryCommand () ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( getQuery () . getReturnValue () ) ) ; org.junit.Assert . assertEquals ( VdcBllMessages.GLUSTER_VOLUME_ID_INVALID . toString () , returnValue . getExceptionString () ) ; }
@ org.junit.Test public void qosNotSupported () { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNic ( STRING_CONSTANT , null , null , network . getName () ) ; org.mockito.Mockito . when ( qosDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( createQos () ) ; qos ( network , iface , null , false ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageDomain convert ( java.lang.Object source ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : storageDomains ) { if ( ( domain . getStorageDomainType () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { return domain ; } } return null ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addManagedDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , org.ovirt.engine.core.common.utils.VmDeviceType device , java.util.Map < java.lang.String , java.lang.Object > specParams , boolean plugged , java.lang.Boolean readOnly , java.lang.String address , java.util.Map < java.lang.String , java.lang.String > customProp ) { org.ovirt.engine.core.common.businessentities.VmDevice managedDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( id , type , device , specParams , plugged , readOnly , customProp ) ; if ( org.apache.commons.lang.StringUtils . isNotBlank ( address ) ) { managedDevice . setAddress ( address ) ; } return managedDevice ; }
@ org.junit.Test public void testDisksUsagesWithNullEntry () { java.lang.Object [] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . initDisksUsageData () ; disksUsages [ NUMBER_CONSTANT ] = null ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest . getVmStatistics () , disksUsages , xml ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getRevertVDSParameters () { return new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( getEnclosingCommand () . getParameters () . getStoragePoolId () , getEnclosingCommand () . getParameters () . getTargetStorageDomainId () , getEnclosingCommand () . getParameters () . getImageGroupID () , org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskImageDao () . get ( getEnclosingCommand () . getParameters () . getDestinationImageId () ) . isWipeAfterDelete () , getEnclosingCommand () . getParameters () . getForceDelete () , null ) ; }
@ java.lang.Override public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , T model , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < T > valueUpdater ) { super . onBrowserEvent ( context , parent , model , event , valueUpdater ) ; if ( ! ( BrowserEvents.CLICK . equals ( event . getType () ) ) ) { return; } onClickEvent ( model ) ; }
protected boolean updateVnicForBackwardCompatibility () { if ( ! ( validate ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper . updateNicForBackwardCompatibility ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getParameters () . getInterface () , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getVm () . getStaticData () , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand . getCurrentUser () . getUserId () ) ) ) ) { return false ; } return true ; }
@ org.junit.Before public void setup () { org.mockito.Mockito . doReturn ( new org.ovirt.engine.core.common.businessentities.Cluster () ) . when ( command ) . getCluster () ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic () ; vmStatic . setClusterId ( clusterId ) ; org.mockito.Mockito . doReturn ( vmStatic ) . when ( vmStaticDao ) . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( clusterId ) . when ( command ) . getClusterId () ; }
private void processFence () { org.ovirt.engine.core.bll.FenceExecutor executor = new org.ovirt.engine.core.bll.FenceExecutor ( getVds () , org.ovirt.engine.core.common.businessentities.FenceActionType.Status ) ; if ( ( getVds () . getpm_enabled () ) && ( executor . FindVdsToFence () ) ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = executor . Fence () ; _fenceSucceeded = returnValue . getSucceeded () ; _fenceStatusReturnValue = ( ( org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue ) ( returnValue . getReturnValue () ) ) ; _vdsProxyFound = true ; } }
public void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_CONSTANT ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
private org.ovirt.engine.core.compat.Guid pickProxyHostFromDataCenter () { org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery . getParameters () . getDataCenterId () ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdss = org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery . getVdsDao () . getAllForStoragePoolAndStatus ( dataCenterId , VDSStatus.Up ) ; if ( vdss . isEmpty () ) { logNoProxyAvailable ( dataCenterId ) ; throw new java.lang.IllegalArgumentException () ; } return vdss . get ( NUMBER_CONSTANT ) . getId () ; }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest . assertEquals ( STRING_CONSTANT , query ) ; setUpEntityQueryExpectations ( org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.queryType , org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.queryParams , new java.lang.String [] { org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.parentIdName } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest.PARENT_GUID . toString () } , org.ovirt.engine.api.restapi.resource.AbstractBackendAssignedTagsResourceTest . setUpTags () , failure ) ; control . replay () ; }
@ org.junit.Test public void hostProviderDoesNotExist () { org.mockito.Mockito . when ( host . getHostProviderId () ) . thenReturn ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.mockito.Mockito . when ( dbFacade . getProviderDao () ) . thenReturn ( providerDao ) ; validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( dbFacade , oldHost , host , false , hostedEngineHelper ) ; org.junit.Assert . assertThat ( validator . hostProviderExists () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) ) ; }
@ java.lang.Override public void onSuccess ( java.util.Set < java.lang.String > returnValue ) { if ( returnValue != null ) { java.util.Set < java.lang.String > emulatedSet = new java.util.TreeSet <> ( returnValue ) ; emulatedSet . add ( STRING_CONSTANT ) ; java.lang.String oldVal = getModel () . getEmulatedMachine () . getSelectedItem () ; getModel () . getEmulatedMachine () . setItems ( emulatedSet ) ; getModel () . getEmulatedMachine () . setSelectedItem ( oldVal ) ; } }
@ org.junit.Test public void testRemove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.DetachDiskFromVm , org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters . class , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } , new java.lang.Object [] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID , new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID ) } , true , true , false ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource . remove () ) ; }
@ org.junit.Test public void testReadAllText ( ) throws java.lang.Exception { java.io.File iFile = java.io.File . createTempFile ( STRING_CONSTANT , STRING_CONSTANT ) ; try ( java.io.FileWriter iFileWriter = new java.io.FileWriter ( iFile ) ) { iFileWriter . write ( STRING_CONSTANT ) ; } java.lang.String data = org.ovirt.engine.core.utils.FileUtil . readAllText ( iFile . getAbsolutePath () ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , data ) ; }
