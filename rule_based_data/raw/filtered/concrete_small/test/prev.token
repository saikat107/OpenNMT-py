private static void doTestPrimitiveFieldsFloat () { java.lang.System.out . println ( STRING_CONSTANT ) ; art.Test906.FloatObject floatObject = new art.Test906.FloatObject () ; art.Test906 . setTag ( floatObject , NUMBER_CONSTANT ) ; java.lang.System.out . println ( art.Test906 . iterateThroughHeapPrimitiveFields ( NUMBER_CONSTANT ) ) ; java.lang.System.out . println ( art.Test906 . getTag ( floatObject ) ) ; }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) android.util.Log . v ( com.android.bluetooth.map.BluetoothMapService.TAG , STRING_CONSTANT ) ; com.android.bluetooth.map.BluetoothMapService service = getService () ; if ( service == null ) return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; return service . getConnectionState ( device ) ; }
public static void noteStackedIface ( java.lang.String stackedIface , java.lang.String baseIface ) { synchronized ( com.android.internal.net.NetworkStatsFactory.sStackedIfaces ) { if ( baseIface != null ) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces . put ( stackedIface , baseIface ) ; } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces . remove ( stackedIface ) ; } } }
public long getLong ( int i ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return getLong ( ix ( checkIndex ( i , SizeOf.LONG ) ) ) ; }
public void installPackages ( java.util.List < java.lang.String > apkFilePaths , int timeOutInMs , boolean reinstall , @ com.android.annotations.NonNull java.util.Collection < java.lang.String > extraArgs ) throws com.android.ddmlib.InstallException ;
public static boolean equalMethodParameters ( java.lang.reflect.ArtMethod artMethod , java.lang.Class < > [] params ) { return java.lang.reflect.ArtMethod . equalConstructorParameters ( artMethod . findOverriddenMethodIfProxy () , params ) ; }
private java.lang.ThreadGroup [] allGroups ( java.lang.ThreadGroup parent ) { int count = parent . activeGroupCount () ; java.lang.ThreadGroup [] all = new java.lang.ThreadGroup [ count ] ; parent . enumerate ( all , true ) ; return all ; }
@ java.lang.Override public java.lang.String getProperty ( java.lang.String name ) { return null ; }
public void setOnInfoListener ( android.drm.DrmManagerClient.OnInfoListener infoListener ) { synchronized ( this ) { if ( null != infoListener ) { mOnInfoListener = infoListener ; } } }
@ java.lang.Override public long getContentLengthLong () { try { if ( ! ( connected ) ) { connect () ; } } catch ( java.io.IOException e ) {} return length ; }
public void setPushLevel ( java.util.logging.Level newLevel ) throws java.lang.SecurityException { if ( newLevel == null ) { throw new java.lang.NullPointerException () ; } java.util.logging.LogManager manager = java.util.logging.LogManager . getLogManager () ; checkPermission () ; pushLevel = newLevel ; }
public java.lang.Object clone () { try { return ( ( android.icu.text.DecimalFormatSymbols ) ( super . clone () ) ) ; } catch ( java.lang.CloneNotSupportedException e ) { throw new android.icu.util.ICUCloneNotSupportedException ( e ) ; } }
@ java.lang.Override public void run () { android.webkit.WebIconDatabase mIconDb = android.webkit.WebIconDatabase . getInstance () ; java.lang.String dbPath = ( getActivity () . getFilesDir () . toString () ) + STRING_CONSTANT ; mIconDb . open ( dbPath ) ; mIconDb . removeAllIcons () ; }
private boolean isSet ( int position ) { return bitString [ position ] ; }
public com.android.build.gradle.internal.tasks.File doCall ( java.lang.Object it ) { final com.android.builder.sdk.SdkInfo info = scope . getGlobalScope () . getSdkHandler () . getSdkInfo () ; return info == null ? null : info . getAdb () ; }
public void changePathRsp ( byte [] address , int rspStatus , int numItems ) { if ( ! ( changePathRspNative ( address , rspStatus , numItems ) ) ) android.util.Log . e ( com.android.bluetooth.avrcp.Avrcp.AvrcpMediaRsp.TAG , STRING_CONSTANT ) ; }
float getFloatUnchecked ( int index ) { throw new java.lang.UnsupportedOperationException () ; }
@ java.lang.Override public void setSSLParameters ( javax.net.ssl.SSLParameters p ) { super . setSSLParameters ( p ) ; sslParameters . setEndpointIdentificationAlgorithm ( org.conscrypt.Platform . getEndpointIdentificationAlgorithm ( p ) ) ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.util.List < android.bluetooth.BluetoothDevice > bluetoothA2dpSinkGetConnectedDevices () { return com.googlecode.android_scripting.facade.bluetooth.BluetoothA2dpSinkFacade.sA2dpSinkProfile . getConnectedDevices () ; }
void onDropped ( com.android.ide.eclipse.adt.editors.layout.gscripts.INode targetNode , com.android.ide.eclipse.adt.editors.layout.gscripts.IDragElement [] elements , com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback feedback , com.android.ide.eclipse.adt.editors.layout.gscripts.Point where , boolean isCopy , boolean sameCanvas ) ;
protected void forEach ( int slot , android.renderscript.Allocation [] ains , android.renderscript.Allocation aout , android.renderscript.FieldPacker v ) { forEach ( slot , ains , aout , v , new android.renderscript.Script.LaunchOptions () ) ; }
@ javax.annotation.Nonnull public static java.io.File [] getDefaultBootclasspath () { return new java.io.File [] { com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) , com.android.jack.TestTools . getFromAndroidTree ( STRING_CONSTANT ) } ; }
@ java.lang.Override protected boolean isRetained ( char c ) { return ( c == CHAR_CONS ) || ( c == CHAR_CONS ) ; }
@ android.security.KeyStoreKeyConstraints.PaddingEnum public static int fromKeymaster ( int padding ) { switch ( padding ) { case android.security.keymaster.KeymasterDefs.KM_PAD_NONE : return android.security.KeyStoreKeyConstraints.Padding.NONE ; case android.security.keymaster.KeymasterDefs.KM_PAD_ZERO : return android.security.KeyStoreKeyConstraints.Padding.ZERO ; case android.security.keymaster.KeymasterDefs.KM_PAD_PKCS7 : return android.security.KeyStoreKeyConstraints.Padding.PKCS7 ; default: throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + padding ) ) ; } }
@ org.junit.Test public void testUpdate_emptyScanList () { mRecommendedNetworkEvaluator . update ( new java.util.ArrayList < com.android.server.wifi.ScanDetail > () ) ; org.mockito.Mockito . verifyZeroInteractions ( mNetworkScoreManager ) ; org.mockito.Mockito . verify ( mWifiConfigManager ) . updateNetworkNotRecommended ( mTrustedWifiConfiguration.networkId , false ) ; }
@ java.lang.Override public void showWarning ( java.lang.String message ) { java.lang.System.out . println ( ( STRING_CONSTANT + message ) ) ; }
public static java.security.Provider.Service getService ( java.lang.String key ) { synchronized ( org.apache.harmony.security.fortress.Services.services ) { return org.apache.harmony.security.fortress.Services.services . get ( key ) ; } }
public int run () { return NUMBER_CONSTANT ; }
@ java.lang.Override protected void beforeDebuggeeStart ( org.apache.harmony.jpda.tests.jdwp.share.JDWPUnitDebuggeeWrapper debuggeeWrapper ) { debuggeeWrapper . setExpectedExitCode ( org.apache.harmony.jpda.tests.jdwp.VirtualMachine.ExitTest.EXIT_CODE ) ; super . beforeDebuggeeStart ( debuggeeWrapper ) ; }
@ android.test.suitebuilder.annotation.MediumTest public void testPreconditions () { assertNotNull ( mTextView ) ; assertEquals ( NUMBER_CONSTANT , mTextView . size () ) ; assertNotNull ( mTextView . get ( NUMBER_CONSTANT ) ) ; }
private static java.lang.String presentableFileName ( final java.io.File file ) { return ( STRING_CONSTANT + ( com.intellij.openapi.util.io.FileUtil . toSystemDependentName ( file . getPath () ) ) ) + STRING_CONSTANT ; }
public void setView ( int type , int i ) { float [] f = new float [] {} ; view = new android.opengl.cts.OpenGLES20ActivityTwo.OpenGLES20View ( this , type , i , f , mLatch ) ; setContentView ( view ) ; }
public void testWifi ( ) throws java.lang.Exception { if ( hasDeviceFeature ( STRING_CONSTANT ) ) { return; } executeDeviceOwnerTest ( STRING_CONSTANT ) ; }
private void addChildAt ( int index , com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child ) { mChildren . add ( index , child ) ; }
@ java.lang.Override public com.android.sdklib.repository.FullRevision convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { input = input . replace ( STRING_CONSTANT , STRING_CONSTANT ) ; return com.android.sdklib.repository.FullRevision . parseRevision ( input ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( e . getMessage () ) ; } }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( com.android.bluetooth.a2dp.A2dpService svc , android.content.Context context ) { android.util.Log . d ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( svc , context ) ; a2dpSm . start () ; return a2dpSm ; }
public void copyFrom ( java.lang.Object array ) { android.os.Trace . traceBegin ( RenderScript.TRACE_TAG , STRING_CONSTANT ) ; copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array . getLength ( array ) ) ; android.os.Trace . traceEnd ( RenderScript.TRACE_TAG ) ; }
void addConditionalBasicBlock ( @ javax.annotation.Nonnull com.android.jack.cfg.ConditionalBasicBlock block , @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement thenStatement , @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement elseStatement ) { assert block != null ; assert thenStatement != null ; assert elseStatement != null ; blocksToResolve . add ( new com.android.jack.cfg.ForwardBranchResolver.ConditionalBasicBlockToResolve ( block , thenStatement , elseStatement ) ) ; }
protected byte getTTL ( ) throws java.io.IOException { return ( ( byte ) ( getTimeToLive () ) ) ; }
public void run () {}
@ java.lang.Override protected void engineInitSign ( java.security.PrivateKey privateKey ) throws java.security.InvalidKeyException { initInternal ( org.conscrypt.OpenSSLKey . fromPrivateKey ( privateKey ) ) ; enableDSASignatureNonceHardeningIfApplicable () ; signing = true ; }
public void sendMessage ( int peerId , @ android.annotation.Nullable byte [] message , int messageId ) { sendMessage ( peerId , message , messageId , NUMBER_CONSTANT ) ; }
public boolean matches () { synchronized ( this ) { matchFound = java.util.regex.Matcher . matchesImpl ( address , matchOffsets ) ; } return matchFound ; }
void getChars ( char [] dst , int dstBegin ) { getCharsNoCheck ( NUMBER_CONSTANT , count , dst , dstBegin ) ; }
@ java.lang.Override public void clearBlacklist () { enforceChangePermission () ; mWifiStateMachine . clearBlacklist () ; }
@ java.lang.Override public org.objectweb.asm.AnnotationVisitor visitAnnotation ( java.lang.String desc , boolean visible ) { org.objectweb.asm.AnnotationVisitor av ; av = super . visitAnnotation ( remapper . mapDesc ( desc ) , visible ) ; return av == null ? null : createRemappingAnnotationAdapter ( av ) ; }
public void stop () { com.google.gct.login.CancellableServerReceiver localreceiver = receiver ; if ( localreceiver != null ) { try { localreceiver . stop () ; } catch ( java.io.IOException e ) { com.google.gct.login.GoogleLogin . logErrorAndDisplayDialog ( STRING_CONSTANT , e ) ; } } }
@ java.lang.Override public java.net.Socket createSocket ( ) throws java.io.IOException { javax.net.ssl.SSLSocket socket = ( ( javax.net.ssl.SSLSocket ) ( mDelegate . createSocket () ) ) ; configureSocket ( socket ) ; return socket ; }
private void updateDefaultChannel () { if ( com.intellij.openapi.application.impl.ApplicationInfoImpl . getShadowInstance () . isEAP () ) { UPDATE_CHANNEL_TYPE = ChannelStatus.EAP_CODE ; } }
@ java.lang.Override public java.lang.String insnArgString ( com.android.dx.dex.code.DalvInsn insn ) { com.android.dx.rop.code.RegisterSpecList regs = insn . getRegisters () ; return ( ( regs . get ( NUMBER_CONSTANT ) . regString () ) + STRING_CONSTANT ) + ( cstString ( insn ) ) ; }
@ com.android.annotations.NonNull public static com.android.sdklib.repository.MajorRevision parseRevision ( @ com.android.annotations.NonNull java.lang.String revision ) throws java.lang.NumberFormatException { com.android.sdklib.repository.FullRevision r = parseRevisionImpl ( revision , false , false ) ; return new com.android.sdklib.repository.MajorRevision ( r . getMajor () ) ; }
android.net.INetd getNetdInstance ( ) throws android.os.RemoteException { final android.net.INetd netd = android.net.util.NetdService . getInstance () ; if ( netd == null ) { throw new android.os.RemoteException ( STRING_CONSTANT ) ; } return netd ; }
private void notifyAuthCancelled () { synchronized ( this ) { mObexAuth . setCancelled ( true ) ; mObexAuth . notify () ; } }
@ com.android.annotations.NonNull public static java.io.File getAapt () { return com.android.build.gradle.integration.common.utils.SdkHelper . getBuildTool ( com.android.sdklib.repository.FullRevision . parseRevision ( STRING_CONSTANT ) , BuildToolInfo.PathId.AAPT ) ; }
@ java.lang.Override public void openModuleSettings ( final com.intellij.openapi.module.Module module ) { warnIfGradleProject () ; com.intellij.openapi.roots.ui.configuration.ModulesConfigurator . showDialog ( myProject , module . getName () , null ) ; }
private void writeInt ( java.io.FileOutputStream fos , int value ) throws java.io.IOException { java.nio.ByteBuffer b = java.nio.ByteBuffer . allocate ( NUMBER_CONSTANT ) ; b . putInt ( value ) ; fos . write ( b . array () ) ; }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [] chain , java.lang.String authType , javax.net.ssl.SSLSession session ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , session . getPeerHost () , false ) ; }
private void removeListener ( int key ) { if ( key == ( android.net.nsd.NsdManager.INVALID_LISTENER_KEY ) ) return; synchronized ( mMapLock ) { mListenerMap . remove ( key ) ; mServiceMap . remove ( key ) ; } }
public boolean simIdentityResponse ( int id , java.lang.String response ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal . sendCurrentNetworkEapIdentityResponse ( response ) ; } else { return doBooleanCommand ( ( ( ( STRING_CONSTANT + id ) + STRING_CONSTANT ) + response ) ) ; } }
public vogar.commands.VmCommandBuilder env ( java.lang.String key , java.lang.String value ) { this . env . put ( key , value ) ; return this ; }
public android.icu.util.ULocale getBestMatch ( android.icu.util.ULocale ulocale ) { return getBestMatchInternal ( ulocale ) . get0 () ; }
public com.android.sdklib.devices.Camera getCamera ( com.android.sdklib.devices.CameraLocation location ) { for ( com.android.sdklib.devices.Camera c : mCameras ) { if ( location . equals ( c . getLocation () ) ) { return c ; } } return null ; }
public static boolean LessThan ( int x , int y ) { return x < y ; }
@ java.lang.Override protected void onPostExecute ( android.os.Bundle bundle ) { com.android.tv.tuner.TunerPreferences.sPreferenceValues . putAll ( bundle ) ; }
public void test_getOrDefault () { libcore.java.util.MapDefaultMethodTester . test_getOrDefault ( new java.util.HashMap <> () , true , true ) ; }
public void terminate () { if ( ( image ) != null ) { image . dispose () ; } crosshairColor . dispose () ; borderColor . dispose () ; paddingColor . dispose () ; }
@ org.junit.Test public void testDefaultDisconnectedState () { org.junit.Assert . assertEquals ( BluetoothProfile.STATE_DISCONNECTED , mHeadsetStateMachine . getConnectionState ( null ) ) ; org.junit.Assert . assertThat ( mHeadsetStateMachine . getCurrentState () , org.hamcrest.core.IsInstanceOf . instanceOf ( HeadsetStateMachine.Disconnected . class ) ) ; }
@ java.lang.Override public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( mDriver . isSuppressed ( this , issue , mCompilationUnit ) ) { return; } super . report ( issue , location , message , data ) ; }
public void delete ( ) throws java.io.IOException { if ( ( java.net.ResponseCache . getDefault () ) == ( this . delegate ) ) { java.net.ResponseCache . setDefault ( null ) ; } delegate . delete () ; }
public void disconnect () { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log . d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , STRING_CONSTANT ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM ) ; if ( service == null ) return; service . disconnect () ; }
@ java.lang.Override public void cleanUp ( com.android.tradefed.build.IBuildInfo info ) {}
public void testIsEmpty () { java.util.concurrent.CopyOnWriteArraySet empty = new java.util.concurrent.CopyOnWriteArraySet () ; java.util.concurrent.CopyOnWriteArraySet full = jsr166.CopyOnWriteArraySetTest . populatedSet ( NUMBER_CONSTANT ) ; assertTrue ( empty . isEmpty () ) ; assertFalse ( full . isEmpty () ) ; }
public void testExtractDecodeEditEncodeMuxAudioVideo ( ) throws java.lang.Throwable { setSize ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyAudio () ; setCopyVideo () ; setVerifyAudioFormat () ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper . runTest ( this ) ; }
public static android.support.v8.renderscript.RenderScript create ( android.content.Context ctx , android.support.v8.renderscript.RenderScript.ContextType ct ) { int v = ctx . getApplicationInfo () . targetSdkVersion ; return android.support.v8.renderscript.RenderScript . create ( ctx , v , ct ) ; }
public java.net.ServerSocket createServerSocket ( int port ) throws java.io.IOException { return throwException () ; }
java.net.InetAddress [] lookupAllHostAddr ( java.lang.String hostname ) throws java.net.UnknownHostException ;
@ com.android.annotations.NonNull @ java.lang.Override public com.android.tools.lint.TypeDescriptor getArgumentType ( int index ) { org.eclipse.jdt.internal.compiler.lookup.TypeBinding parameterType = mBinding.parameters [ index ] ; com.android.tools.lint.TypeDescriptor typeDescriptor = com.android.tools.lint.EcjParser . getTypeDescriptor ( parameterType ) ; assert typeDescriptor != null ; return typeDescriptor ; }
@ java.lang.Override public void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { filterStdErr ( line ) ; } }
@ java.lang.Override @ com.android.annotations.Nullable public java.util.List < java.lang.String > getApplicableCallNames () { return java.util.Arrays . asList ( com.android.tools.lint.checks.CleanupDetector.RECYCLE , com.android.tools.lint.checks.CleanupDetector.OBTAIN_STYLED_ATTRIBUTES , com.android.tools.lint.checks.CleanupDetector.OBTAIN , com.android.tools.lint.checks.CleanupDetector.OBTAIN_ATTRIBUTES , com.android.tools.lint.checks.CleanupDetector.OBTAIN_TYPED_ARRAY , com.android.tools.lint.checks.CleanupDetector.OBTAIN_MESSAGE , com.android.tools.lint.checks.CleanupDetector.OBTAIN_NO_HISTORY , com.android.tools.lint.checks.CleanupDetector.BEGIN_TRANSACTION , com.android.tools.lint.checks.CleanupDetector.COMMIT , com.android.tools.lint.checks.CleanupDetector.COMMIT_ALLOWING_LOSS ) ; }
@ org.junit.Test public void testDataPathInitiatorMacTokenSuccess ( ) throws java.lang.Exception { testDataPathInitiatorUtility ( false , true , true , true ) ; }
public static java.io.File getIniFile ( java.lang.String name ) throws com.android.prefs.AndroidLocation.AndroidLocationException { java.lang.String avdRoot ; avdRoot = com.android.sdklib.internal.avd.AvdManager . getBaseAvdFolder () ; return new java.io.File ( avdRoot , ( name + ( com.android.sdklib.internal.avd.AvdManager.INI_EXTENSION ) ) ) ; }
public void testPutIfAbsent2_NullPointerException () { try { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( NUMBER_CONSTANT ) ; c . putIfAbsent ( STRING_CONSTANT , null ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public java.lang.String toUpperCase ( java.util.Locale locale ) { return java.lang.CaseMapper . toUpperCase ( locale , this , count ) ; }
void openRead ( com.android.tv.tuner.exoplayer.buffer.SampleChunk chunk ) throws java.io.IOException { if ( ( mChunk ) != null ) { mChunk . closeRead () ; } chunk . openRead () ; reset ( chunk ) ; }
public int createSapsRecord ( java.lang.String serviceName , int rfcommChannel , int version ) { if ( ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) == false ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + STRING_CONSTANT ) ) ; } return sdpCreateSapsRecordNative ( serviceName , rfcommChannel , version ) ; }
public static float FloatSubtraction () { float a ; float b ; float c ; a = Main . $inline$float ( NUMBER_CONSTANT ) ; b = Main . $inline$float ( NUMBER_CONSTANT ) ; c = a - b ; return c ; }
private com.google.devtools.common.options.OptionsParser.OptionUsageRestrictions optionUsageRestrictions () { com.google.devtools.common.options.Option option = field . getAnnotation ( com.google.devtools.common.options.Option . class ) ; return com.google.devtools.common.options.OptionsParser . documentationLevel ( option ) ; }
@ org.junit.Test public void testDataPathInitiatorDirectMacTokenSuccess ( ) throws java.lang.Exception { testDataPathInitiatorUtility ( true , true , true , true ) ; }
public void setNpnProtocols ( byte [] npnProtocols ) { if ( ( npnProtocols != null ) && ( ( npnProtocols.length ) == NUMBER_CONSTANT ) ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } sslParameters.npnProtocols = npnProtocols ; }
@ java.lang.Override public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { com.android.ide.eclipse.adt.AdtPlugin . log ( throwable , message ) ; }
public void put ( com.android.jack.dx.rop.annotation.NameValuePair pair ) { throwIfImmutable () ; if ( pair == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } elements . put ( pair . getName () , pair ) ; }
@ com.android.annotations.NonNull com.android.ddmlib.Device [] getDevices () { synchronized ( mDevices ) { return mDevices . toArray ( new com.android.ddmlib.Device [ mDevices . size () ] ) ; } }
@ java.lang.Override public void ignore ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { throw new java.lang.UnsupportedOperationException ( STRING_CONSTANT ) ; }
public void testConstructor2NPE () { try { int [] a = null ; java.util.concurrent.atomic.AtomicIntegerArray aa = new java.util.concurrent.atomic.AtomicIntegerArray ( a ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public boolean getRecordsLoaded () { if ( ( ( mRecordsToLoad ) == NUMBER_CONSTANT ) && ( ( mRecordsRequested ) == true ) ) { return true ; } else { return false ; } }
@ java.lang.Override public void end ( ) throws com.android.ide.common.res2.ConsumerException { try { postWriteAction () ; getExecutor () . waitForTasksWithQuickFail ( true ) ; } catch ( java.lang.Exception e ) { throw new com.android.ide.common.res2.ConsumerException ( e ) ; } }
public void removeAuthority ( android.accounts.Account account , java.lang.String authority ) { synchronized ( mAuthorities ) { removeAuthorityLocked ( account , authority , true ) ; } }
public boolean inConference () { return ( ( ( mAdded ) && ( ( mCurrentCall ) != null ) ) && ( mCurrentCall . isMultiParty () ) ) && ( ( getState () ) != ( android.telecom.Connection.STATE_DISCONNECTED ) ) ; }
@ java.lang.Override public void onSetProtocol ( byte protocol ) { mCallback . onSetProtocol ( protocol ) ; }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPhantomClassOrInterface node ) { if ( ( node . getMarker ( com.android.jack.frontend.VirtualMethodsMarker . class ) ) != null ) { return false ; } ensureHierarchyVisited ( node ) ; return super . visit ( node ) ; }
public static com.android.cts.verifier.TestListAdapter.TestListItem newCategory ( java.lang.String title ) { return new com.android.cts.verifier.TestListAdapter.TestListItem ( title , null , null , null , null , null ) ; }
@ com.android.annotations.Nullable @ java.lang.Override public java.lang.Object getValue () { return com.android.tools.lint.EcjParser . getConstantValue ( mBinding . constant () ) ; }
private static java.io.File [] splitLibraryPath ( java.lang.String path ) { java.util.ArrayList < java.io.File > result = dalvik.system.DexPathList . splitPaths ( path , java.lang.System . getProperty ( STRING_CONSTANT ) , true ) ; return result . toArray ( new java.io.File [ result . size () ] ) ; }
@ java.lang.Override public java.lang.String toString () { return ( ( STRING_CONSTANT + ( mDcListAll ) ) + STRING_CONSTANT ) + ( mDcListActiveByCid ) ; }
public void removeSessionCookies ( android.webkit.ValueCallback < java.lang.Boolean > callback ) { throw new android.webkit.MustOverrideException () ; }
public android.content.pm.ResolveInfo resolveInfoForPosition ( int position ) { if ( ( mList ) == null ) { return null ; } return mList . get ( position ) . ri ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , @ javax.annotation.Nullable java.lang.Object value ) { com.google.common.base.Preconditions . checkNotNull ( name ) ; addHolder ( value ) . builder . append ( name ) . append ( CHAR_CONS ) . append ( value ) ; return this ; }
public void setCleartextTrafficPermitted ( boolean permitted ) { synchronized ( this ) { mCleartextTrafficPermitted = permitted ; } }
public static final javax.crypto.Cipher getInstance ( java.lang.String transformation , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException , javax.crypto.NoSuchPaddingException { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( STRING_CONSTANT ) ; } javax.crypto.Cipher c = javax.crypto.Cipher . getCipher ( transformation , provider ) ; return c ; }
@ java.lang.Override public int hashCode () { final int prime = NUMBER_CONSTANT ; int result = NUMBER_CONSTANT ; result = ( prime * result ) + ( ( mDir ) == null ? NUMBER_CONSTANT : mDir . hashCode () ) ; return result ; }
public void test_getInstance_provider1 ( ) throws java.lang.Exception { test_getInstance ( java.security.Security . getProviders () [ NUMBER_CONSTANT ] ) ; }
public void setAdvertisePreferred ( boolean advertisePreferred ) { this . mAdvertisePreferred = advertisePreferred ; }
@ java.lang.Override public boolean canBeForceHidden ( com.android.internal.policy.impl.WindowState win , android.view.WindowManager.LayoutParams attrs ) { switch ( attrs.type ) { case TYPE_STATUS_BAR : case TYPE_NAVIGATION_BAR : case TYPE_WALLPAPER : case TYPE_DREAM : case TYPE_UNIVERSE_BACKGROUND : case TYPE_KEYGUARD : case TYPE_KEYGUARD_SCRIM : return false ; default: return true ; } }
@ org.junit.After public void cleanup () { org.mockito.Mockito . validateMockitoUsage () ; }
public long timeMinL ( int reps ) { long result = l ; for ( int rep = NUMBER_CONSTANT ; rep < reps ; ++ rep ) { java.lang.Math . min ( l , l ) ; } return result ; }
@ java.lang.Override protected void finalize ( ) throws java.lang.Throwable { try { android.graphics.Typeface . nativeUnref ( native_instance ) ; } finally { super . finalize () ; } }
@ org.hamcrest.Factory public static < T > org.hamcrest.Matcher < T > anyOf ( java.lang.Iterable < org.hamcrest.Matcher < ? extends T > > matchers ) { return new org.hamcrest.core.AnyOf < T > ( matchers ) ; }
@ java.lang.Override public void sendUssd ( java.lang.String ussdMessage ) throws android.os.RemoteException {}
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT , returns = STRING_CONSTANT ) public boolean removePasspointConfig ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.String fqdn ) { return mWifi . removePasspointConfiguration ( fqdn ) ; }
@ java.lang.Override public android.bluetooth.BluetoothCodecStatus getCodecStatus () { return mService . getCodecStatus () ; }
public long getSize ( com.android.ahat.heapdump.Site element , com.android.ahat.heapdump.AhatHeap heap ) { return element . getSize ( heap ) ; }
public java.lang.String getUrl () { throw new android.webkit.MustOverrideException () ; }
@ java.lang.Override public void free () { if ( ( address ) != NUMBER_CONSTANT ) { try { Libcore.os . munmap ( address , size ) ; } catch ( android.system.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } address = NUMBER_CONSTANT ; } }
private java.lang.String getInnerClassName () { return libcore.reflect.AnnotationAccess . getInnerClassName ( this ) ; }
@ java.lang.Override public void onSSLStateChange ( long sslSessionNativePtr , int type , int val ) { throw new java.lang.AssertionError ( STRING_CONSTANT ) ; }
public void info ( java.lang.String msg ) { if ( ( java.util.logging.Level.INFO . intValue () ) < ( levelValue ) ) { return; } log ( java.util.logging.Level.INFO , msg ) ; }
void putBigEndianTwosComplement ( byte [] a ) { this . makeValid () ; java.math.BigInt . Check ( java.math.NativeBN . twosComp2bn ( a , a.length , this . bignum ) ) ; }
private void setupSources () { mUpdaterData . setupDefaultSources () ; mRemotePackagesPage . onSdkReload () ; }
public java.lang.Object deleteChild ( java.lang.Object t , int i ) { return deleteChild ( t , i ) ; }
native boolean convolveTest ( int X , int Y , byte [] input , byte [] output , float [] coeffs , boolean is3x3 ) ;
public java.lang.String getIdentity () { return getFieldValue ( android.net.wifi.WifiEnterpriseConfig.IDENTITY_KEY , STRING_CONSTANT ) ; }
@ java.lang.Override public com.android.dx.dex.file.ClassDefItem call () { com.android.dx.dex.file.ClassDefItem clazz = com.android.dx.command.dexer.Main . translateClass ( bytes , classFile ) ; return clazz ; }
@ javax.annotation.Nonnull public final java.util.List < com.android.jack.test.runtime.RuntimeTestInfo > getRuntimeTestInfos () { if ( ( rtTestInfos ) == null ) { rtTestInfos = new java.util.ArrayList < com.android.jack.test.runtime.RuntimeTestInfo > () ; fillRtTestInfos () ; } return rtTestInfos ; }
@ java.lang.Override protected void addGroups ( android.database.Cursor cursor ) { mCallLogGroupBuilder . addGroups ( cursor , mActivity ) ; }
public double getDouble () { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } return getDouble ( ix ( nextGetIndex ( SizeOf.DOUBLE ) ) ) ; }
private android.webkit.BrowserFrame createWindow ( boolean dialog , boolean userGesture ) { android.webkit.WebView w = mCallbackProxy . createWindow ( dialog , userGesture ) ; if ( w != null ) { return w . getWebViewCore () . getBrowserFrame () ; } return null ; }
void setEchoSuppressionEnabled ( boolean enabled ) ;
@ java.lang.Override protected void visitPrimitive ( int argAndType , int type , int arg , int size ) { constantValue = com.android.jack.tools.merger.MergerTools . createConstant ( in , type , arg ) ; }
@ java.lang.Override public boolean containsValue ( @ javax.annotation.Nullable java.lang.Object value ) { for ( java.util.Collection < V > valueCollection : map . values () ) { if ( valueCollection . contains ( value ) ) { return true ; } } return false ; }
public synchronized boolean getDatabaseEnabled () { throw new android.webkit.MustOverrideException () ; }
@ javax.annotation.Nonnull public final java.lang.reflect.Constructor < > getJayceReaderConstructor ( ) throws com.android.jack.library.LibraryFormatException { ensureJayceLoaded () ; return jayceReaderConstructor ; }
@ java.lang.Override public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > onSuccessfulFill ( android.content.Context appContext ) { return com.google.common.util.concurrent.Futures . immediateFuture ( null ) ; }
native boolean colorMatrixTest ( int X , int Y , byte [] input , byte [] output , float [] coeffs , int optionFlag ) ;
public void cancel () { mIsCanceled = true ; }
protected org.bouncycastle.math.ec.ECFieldElement getRawYCoord () { return y ; }
public void setCallAudioState ( android.telecom.CallAudioState state ) { try { if ( mConnected ) { mConnectionService . onCallAudioStateChanged ( mConnectionId , state ) ; } } catch ( android.os.RemoteException ignored ) {} }
private void awaitRun ( tests.api.java.util.TimerTest.TimerTestTask task ) { while ( ( task . wasRun () ) == NUMBER_CONSTANT ) { try { java.lang.Thread . sleep ( NUMBER_CONSTANT ) ; } catch ( java.lang.InterruptedException e ) {} } }
boolean isBluetoothEnabled () { boolean ret = false ; android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter . getDefaultAdapter () ; if ( ( adapter != null ) && ( ( adapter . isEnabled () ) == true ) ) { ret = true ; } return ret ; }
@ java.lang.Override public final boolean equals ( java.lang.Object object ) { return super . equals ( object ) ; }
private static final void appendValue ( java.lang.StringBuilder sb , java.lang.String item , boolean valid , long value ) { sb . append ( item ) . append ( CHAR_CONS ) ; if ( valid ) { sb . append ( value ) ; } else { sb . append ( CHAR_CONS ) ; } }
public void testReplaceValue_NullPointerException () { try { java.util.concurrent.ConcurrentSkipListMap c = jsr166.ConcurrentSkipListMapTest . map5 () ; c . replace ( null , one , STRING_CONSTANT ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public void run () { mNM . notify ( NUMBER_CONSTANT , notificationWithNumbers ( NUMBER_CONSTANT ) ) ; mNM . notify ( NUMBER_CONSTANT , notificationWithNumbers ( NUMBER_CONSTANT ) ) ; mNM . cancel ( NUMBER_CONSTANT ) ; }
public void testConstructor4 () { try { jsr166.DelayQueueTest.PDelay [] ints = new jsr166.DelayQueueTest.PDelay [ SIZE ] ; java.util.concurrent.DelayQueue q = new java.util.concurrent.DelayQueue ( java.util.Arrays . asList ( ints ) ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public boolean simAuthFailedResponse ( int id ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal . sendCurrentNetworkEapSimGsmAuthFailure () ; } else { return doBooleanCommand ( ( ( STRING_CONSTANT + id ) + STRING_CONSTANT ) ) ; } }
private com.android.ide.common.layout.grid.GridModel getGrid ( com.android.ide.common.layout.ResizeState resizeState ) { com.android.ide.common.layout.grid.GridModel grid = ( ( com.android.ide.common.layout.grid.GridModel ) ( resizeState.clientData ) ) ; if ( grid == null ) { grid = new com.android.ide.common.layout.grid.GridModel ( mRulesEngine , resizeState.layout , resizeState.layoutView ) ; resizeState.clientData = grid ; } return grid ; }
public void appendPath ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { pathFragments . add ( new com.android.sched.vfs.VPath.VPathFragment ( java.lang.String . valueOf ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) , com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) ) ; pathFragments . addAll ( path . getPathFragments () ) ; }
@ java.lang.Override public javax.net.ssl.SSLSession getSession () { if ( ( sslSession ) == null ) { try { waitForHandshake () ; } catch ( java.io.IOException e ) { return org.conscrypt.SSLNullSession . getNullSession () ; } } return org.conscrypt.Platform . wrapSSLSession ( sslSession ) ; }
@ android.test.suitebuilder.annotation.MediumTest public void testProcessChldTypeReleaseHeldHold ( ) throws java.lang.Exception { com.android.server.telecom.Call onHoldCall = createHeldCall () ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_RELEASEHELD ) ; org.mockito.Mockito . verify ( mMockCallsManager ) . disconnectCall ( org.mockito.Matchers . eq ( onHoldCall ) ) ; assertEquals ( didProcess , true ) ; }
private static boolean isModelOlderThan011 ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { return com.android.tools.lint.detector.api.LintUtils . isModelOlderThan ( context . getProject () . getGradleProjectModel () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public static float FloatRemainder () { float a ; float b ; float c ; a = Main . $inline$float ( NUMBER_CONSTANT ) ; b = Main . $inline$float ( NUMBER_CONSTANT ) ; c = a % b ; return c ; }
@ javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec getOrCreateRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter parameter ) { assert ( parameter . getMarker ( com.android.jack.debug.DebugVariableInfoMarker . class ) ) == null ; return getRegisterSpec ( getRegisterNumber ( parameter ) , parameter , null ) ; }
protected void datagramSocketClose () { try { libcore.io.IoBridge . closeAndSignalBlockedThreads ( fd ) ; } catch ( java.io.IOException ignored ) {} }
public void zoomChanged () { synchronized ( this ) { if ( ( grid ) != null ) { grid . dispose () ; grid = null ; zoom = model . getZoom () ; } } doRedraw () ; }
@ java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { assert ( getSecondIndexType () ) == ( com.android.jack.dx.io.IndexType.NONE ) ; return new com.android.jack.dx.io.instructions.ZeroRegisterDecodedInstruction ( getFormat () , getOpcode () , newFirstIndex , getFirstIndexType () , getTarget () , getLiteral () ) ; }
private static < T > void assertEmpty ( T [] ts ) { int length = ts.length ; assertEquals ( ( STRING_CONSTANT + length ) , NUMBER_CONSTANT , length ) ; }
public com.android.volley.toolbox.ImageLoader.ImageContainer get ( java.lang.String requestUrl , final com.android.volley.toolbox.ImageLoader.ImageListener listener ) { return get ( requestUrl , listener , NUMBER_CONSTANT , NUMBER_CONSTANT , ScaleType.CENTER_INSIDE ) ; }
protected boolean nestedStatementPush ( com.android.jack.ir.ast.JStatement statement ) { boolean push = ! ( statement instanceof com.android.jack.ir.ast.JBlock ) ; if ( push ) { indentIn () ; newline () ; } else { space () ; } return push ; }
public void testfdimF32 () { script_f32 = new android.renderscript.cts.ScriptC_fdim_f32 ( mRS , mRes , R.raw.fdim_f32 ) ; android.renderscript.cts.ScriptField_fdim_f32_input floatArray = new android.renderscript.cts.ScriptField_fdim_f32_input ( mRS , INPUTSIZE ) ; mIn = floatArray . getAllocation () ; doF32 ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
private boolean hasPermission ( android.content.pm.PackageInfo app , java.lang.String permission ) { if ( ( app.requestedPermissions ) != null ) { for ( java.lang.String p : app.requestedPermissions ) { if ( permission . equals ( p ) ) { return true ; } } } return false ; }
protected final java.lang.Object getContent ( @ org.jetbrains.annotations.NotNull com.intellij.designer.DesignerEditorPanelFacade designer ) { com.intellij.designer.LightToolWindow toolWindow = ( ( com.intellij.designer.LightToolWindow ) ( designer . getClientProperty ( getComponentName () ) ) ) ; return toolWindow . getContent () ; }
@ java.lang.Override public int getDSTSavings () { return mUseDst ? mDstSavings : NUMBER_CONSTANT ; }
@ java.lang.Override public UResource.TableSink getOrCreateTableSink ( com.ibm.icu.impl.UResource.Key key , int initialSize ) { period = com.ibm.icu.impl.DayPeriodRules.DayPeriod . fromStringOrNull ( key ) ; if ( ( period ) == null ) { throw new com.ibm.icu.util.ICUException ( STRING_CONSTANT ) ; } return periodSink ; }
public static long UShrLongInt () { long lhs = Main . $inline$long ( ( - NUMBER_CONSTANT ) ) ; int rhs = Main . $inline$int ( NUMBER_CONSTANT ) ; return lhs > > > rhs ; }
public void setFocus () { canvas . setFocus () ; }
public com.android.layoutlib.api.SceneResult getResult () { assert ( this ) != ( com.android.layoutlib.api.SceneResult.SceneStatus.ERROR_UNKNOWN ) ; if ( ( this ) == ( com.android.layoutlib.api.SceneResult.SceneStatus.SUCCESS ) ) { return com.android.layoutlib.api.SceneResult.SUCCESS ; } return new com.android.layoutlib.api.SceneResult ( this ) ; }
private static boolean isIncoming ( com.android.incallui.incall.protocol.PrimaryCallState state ) { return ( ( state.state ) == ( com.android.incallui.call.DialerCall.State.INCOMING ) ) || ( ( state.state ) == ( com.android.incallui.call.DialerCall.State.CALL_WAITING ) ) ; }
public void Test04 () { errln ( STRING_CONSTANT ) ; }
public int insert ( java.lang.String name , byte [] item ) throws android.os.RemoteException ;
synchronized boolean setBondState ( java.lang.String address , int state , int reason ) { mBondState . setBondState ( address . toUpperCase () , state ) ; return true ; }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public void telephonySetNetworkSelectionModeAutomaticForSubscription ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT ) java.lang.Integer subId ) { mTelephonyManager . setNetworkSelectionModeAutomatic ( subId ) ; }
void onSSLStateChange ( long sslSessionNativePtr , int type , int val ) ;
@ android.support.annotation.MainThread void registerContentObservers ( android.content.Context appContext , com.android.dialer.phonelookup.PhoneLookup.ContentObserverCallbacks contentObserverCallbacks ) ;
@ android.support.annotation.MainThread public static void release ( android.content.Context context ) { if ( ( com.android.tv.tuner.TunerPreferences . useContentProvider ( context ) ) && ( ( com.android.tv.tuner.TunerPreferences.sContentObserver ) != null ) ) { context . getContentResolver () . unregisterContentObserver ( com.android.tv.tuner.TunerPreferences.sContentObserver ) ; } }
public void testField () { org.apache.harmony.crypto.tests.javax.crypto.interfaces.DHPublicKeyTest.checkDHPublicKey key = new org.apache.harmony.crypto.tests.javax.crypto.interfaces.DHPublicKeyTest.checkDHPublicKey () ; assertEquals ( STRING_CONSTANT , key . getSerVerUID () , ( - NUMBER_CONSTANT ) ) ; }
private void notifyCharacteristicReadRequest ( boolean resetValues ) { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) { android.util.Log . d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , STRING_CONSTANT ) ; } android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleServerService.BLE_CHARACTERISTIC_READ_REQUEST ) ; sendBroadcast ( intent ) ; if ( resetValues ) { resetValues () ; } }
@ org.junit.Test public void testConnectWithDisconnectAndSingleExistingNetwork ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , false , false ) ; executeAndValidateConnectSequence ( NUMBER_CONSTANT , false , true ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { mFile . close () ; } catch ( java.io.IOException e ) {} finally { super . finalize () ; } }
public static sun.security.util.Debug getInstance ( java.lang.String option , java.lang.String prefix ) { if ( sun.security.util.Debug . isOn ( option ) ) { sun.security.util.Debug d = new sun.security.util.Debug () ; d.prefix = prefix ; return d ; } else { return null ; } }
@ java.lang.Override public void onDevicesChange () { mDeviceList = sdk . getDevices () ; addDeviceMenuListener ( mDeviceCombo ) ; }
public void testStrings ( ) throws java.lang.Exception { com.android.tools.lint.detector.api.ConstantEvaluatorTest . checkExpression ( null , STRING_CONSTANT ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest . checkExpression ( STRING_CONSTANT , STRING_CONSTANT ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest . checkExpression ( STRING_CONSTANT , STRING_CONSTANT ) ; }
@ org.junit.Test public void testCameraImageCaptureAndRendering ( ) throws java.lang.Exception { if ( cameraAvailable () ) { android.graphics.cts.CameraGpuCtsActivity activity = mActivityRule . launchActivity ( null ) ; activity . waitToFinishRendering () ; activity . finish () ; } }
public int getxattr ( java.lang.String path , java.lang.String name , byte [] outValue ) throws android.system.ErrnoException ;
@ java.lang.Override protected void onDetachedFromWindow () { if ( ( mRS ) != null ) { mRS = null ; destroyRenderScriptGL () ; } }
@ java.lang.Override public void enter () { super . enter () ; setSpeakerphoneOn ( false ) ; setBluetoothOn ( false ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET , mAvailableRoutes ) ; setSystemAudioState ( newState ) ; updateInternalCallAudioState () ; }
public void copyTo ( float [] d ) { validateIsFloat32 () ; mRS . validate () ; mRS . nAllocationRead ( getID ( mRS ) , d ) ; }
@ java.lang.Override public void onPeriodChanged ( int periodInMs ) { android.util.Log . e ( com.android.server.wifi.WifiStateMachine.TAG , ( STRING_CONSTANT + periodInMs ) ) ; }
private void run ( @ javax.annotation.Nonnull com.android.jack.test.runtime.RuntimeTestInfo rti ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( rti ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain . class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01 . class ) . compileAndRunTest () ; }
void start ( java.lang.String outcomeName , java.lang.String runnerClass ) ;
@ java.lang.Override public java.lang.String getClientName ( int pid ) { return mClientInfo . get ( java.lang.Integer . valueOf ( pid ) ) ; }
@ java.lang.Override public void run () { mCallback . onServicesDiscovered ( this , status ) ; }
public static android.content.SyncStatusInfo getSyncStatus ( android.accounts.Account account , java.lang.String authority ) { try { return android.content.ContentResolver . getContentService () . getSyncStatus ( account , authority ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( STRING_CONSTANT , e ) ; } }
public static void sort ( java.lang.Object [] a ) { if ( java.util.Arrays.LegacyMergeSort.userRequested ) java.util.Arrays . legacyMergeSort ( a ) ; else java.util.ComparableTimSort . sort ( a ) ; }
public static java.util.Locale getDefault () { if ( ( java.util.Locale.defaultLocale ) == null ) { java.util.Locale . initDefault () ; } return java.util.Locale.defaultLocale ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public VT setValue ( VT value ) { checkEntryStatus () ; return enumMap . put ( ( ( KT ) ( enumMap.keys [ ordinal ] ) ) , value ) ; }
@ java.lang.Override public java.lang.Iterable < java.lang.String > getCppFlags () { getCFlags () ; }
public static void sort ( short [] a ) { java.util.DualPivotQuicksort . sort ( a ) ; }
public static int ShlIntLong () { int lhs = Main . $inline$int ( NUMBER_CONSTANT ) ; long rhs = Main . $inline$long ( NUMBER_CONSTANT ) ; return lhs < < rhs ; }
public void postDialContinue ( boolean proceed ) { try { if ( mConnected ) { mConnectionService . onPostDialContinue ( mConnectionId , proceed ) ; } } catch ( android.os.RemoteException ignored ) {} }
public void warning ( java.lang.String tag , java.lang.String message ) {}
public static native void BN_generate_prime_ex ( long ret , int bits , boolean safe , long add , long rem , long cb ) ;
public java.lang.String [] saw ( java.lang.String prefix ) { try { return mBinder . saw ( prefix ) ; } catch ( android.os.RemoteException e ) { android.util.Log . w ( android.security.KeyStore.TAG , STRING_CONSTANT , e ) ; return null ; } }
protected void handleNewUpstreamNetworkState ( android.net.NetworkState ns ) { mIPv6TetheringCoordinator . updateUpstreamNetworkState ( ns ) ; mOffloadController . setUpstreamLinkProperties ( ns.linkProperties ) ; }
@ java.lang.Override public void customSmsDismissed () { com.android.dialer.common.LogUtil . i ( STRING_CONSTANT , null ) ; createCustomSmsDialogFragment = null ; answerScreenDelegate . onDismissDialog () ; }
@ java.lang.Override public void enter () { infoLog ( STRING_CONSTANT ) ; com.android.bluetooth.btservice.AdapterService adapterService = mAdapterService ; if ( adapterService == null ) { errorLog ( STRING_CONSTANT ) ; return; } adapterService . updateUuids () ; adapterService . autoConnect () ; }
public java.lang.String getCookie ( java.lang.String url ) { throw new android.webkit.MustOverrideException () ; }
public static void promptToLogIn ( ) throws com.google.gct.login.InvalidThreadTypeException { com.google.gct.login.GoogleLogin . promptToLogIn ( null ) ; }
void putShortUnchecked ( int index , short value ) { throw new java.lang.UnsupportedOperationException () ; }
@ java.lang.Override public boolean needsSequentialWriting () { return ( baseVFS ) instanceof com.android.sched.vfs.SequentialOutputVFS ; }
public void testVersion16 () { android.renderscript.cts.ScriptC_set_target_api_16 test16 = new android.renderscript.cts.ScriptC_set_target_api_16 ( mRS , mRes , R.raw.set_target_api_16 ) ; test16 . invoke_check ( NUMBER_CONSTANT ) ; waitForMessage () ; checkForErrors () ; }
private void turnOnIms ( ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable () ; try { mImsServiceProxy . turnOnIms ( mPhoneId ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( STRING_CONSTANT , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void notifyDisconnectCause ( com.android.internal.telephony.Connection.DisconnectCause cause , int preciseCause ) { try { mRegistry . notifyDisconnectCause ( com.android.internal.telephony.DefaultPhoneNotifier . convertDisconnectCause ( cause ) , preciseCause ) ; } catch ( android.os.RemoteException ex ) {} }
public void reset ( int i ) { if ( ( i < NUMBER_CONSTANT ) || ( i >= ( mLen ) ) ) { throw new android.renderscript.RSIllegalArgumentException ( ( STRING_CONSTANT + i ) ) ; } mPos = i ; }
public static java.lang.String toString ( @ android.security.KeyStoreKeyConstraints.PaddingEnum int padding ) { switch ( padding ) { case android.security.KeyStoreKeyConstraints.Padding.NONE : return STRING_CONSTANT ; case android.security.KeyStoreKeyConstraints.Padding.ZERO : return STRING_CONSTANT ; case android.security.KeyStoreKeyConstraints.Padding.PKCS7 : return STRING_CONSTANT ; default: throw new java.lang.IllegalArgumentException ( ( STRING_CONSTANT + padding ) ) ; } }
@ org.junit.Test ( expected = java.lang.NullPointerException . class ) public void test_SSL_do_handshake_NULL_SSL ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto . SSL_do_handshake ( org.conscrypt.NativeCryptoTest.NULL , null , null , NUMBER_CONSTANT , false , null ) ; }
public void testRelease () { com.android.builder.BuildType type = new com.android.builder.BuildType ( STRING_CONSTANT ) ; assertFalse ( type . isDebuggable () ) ; assertFalse ( type . isDebugJniBuild () ) ; assertFalse ( type . isDebugSigned () ) ; }
private void unsljLogMore ( int response , java.lang.String more ) { riljLog ( ( ( ( STRING_CONSTANT + ( com.android.internal.telephony.RIL . responseToString ( response ) ) ) + STRING_CONSTANT ) + more ) ) ; }
public void initialize ( ) throws java.lang.Exception { this . socket = serverChannel . socket () ; socket . bind ( new java.net.InetSocketAddress ( STRING_CONSTANT , NUMBER_CONSTANT ) ) ; }
public com.android.ahat.DocString render ( com.android.tools.perflib.heap.Instance element ) { if ( element == null ) { return com.android.ahat.DocString . text ( STRING_CONSTANT ) ; } else { return com.android.ahat.Value . render ( element ) ; } }
public void setValue ( java.lang.Object value ) { mValue = value ; if ( value instanceof com.android.tools.perflib.heap.Instance ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( instance ) ; } }
public static native int abs ( int i ) ;
@ java.lang.Override public java.lang.String getId () { return name . toLowerCase () ; }
public void testIsSupported_EmptyString () { try { java.nio.charset.Charset . isSupported ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} }
static void printUnsupportedFlag ( java.lang.String flag ) { assert flag != null ; com.android.jack.shrob.proguard.GrammarActions.logger . log ( java.util.logging.Level.WARNING , STRING_CONSTANT , flag ) ; }
public void run () { synchronized ( this ) { if ( ( grid ) != null ) { grid . dispose () ; grid = null ; zoom = model . getZoom () ; } } }
@ org.jetbrains.annotations.NotNull public static java.lang.String readString ( java.io.DataInput in ) throws java.io.IOException { return com.intellij.util.io.IOUtil . readUTF ( in ) ; }
public java.lang.String toShortString () { return print ( true ) ; }
@ org.junit.Test public void test001a ( ) throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ; try { runTest001 ( jackOutput , null ) ; junit.framework.Assert . fail () ; } catch ( com.android.jack.backend.jayce.ImportConflictException e ) {} }
public void delete ( ) throws java.io.IOException { if ( ( java.net.ResponseCache . getDefault () ) == ( this ) ) { java.net.ResponseCache . setDefault ( null ) ; } delegate . getCache () . delete () ; }
@ android.test.suitebuilder.annotation.MediumTest public void testText () { java.lang.System.out . println ( ( STRING_CONSTANT + ( mTextView . getText () ) ) ) ; assertTrue ( STRING_CONSTANT . equals ( mTextView . getText () ) ) ; }
@ java.lang.Override protected void engineInitVerify ( java.security.PublicKey publicKey ) throws java.security.InvalidKeyException { throw new java.lang.UnsupportedOperationException () ; }
public void test_remove () { s = new java.util.Scanner ( STRING_CONSTANT ) . useDelimiter ( STRING_CONSTANT ) ; try { s . remove () ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.UnsupportedOperationException e ) {} }
public static java.lang.String getPackageName ( java.lang.String classFullName ) { int lastDot = classFullName . lastIndexOf ( CHAR_CONS ) ; if ( lastDot < NUMBER_CONSTANT ) { return STRING_CONSTANT ; } else { return classFullName . substring ( NUMBER_CONSTANT , lastDot ) ; } }
@ java.lang.Override public com.android.internal.telephony.Connection dial ( java.lang.String dialString , com.android.internal.telephony.UUSInfo uusInfo , int videoState , android.os.Bundle intentExtras ) throws com.android.internal.telephony.CallStateException { return dialInternal ( dialString , videoState , intentExtras ) ; }
@ org.junit.Test public void test001_3WithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools . checkStructureWithJill ( com.android.jill.AnnotationTest.BOOTCLASSPATH , null , new java.io.File ( com.android.jill.AnnotationTest.ANNOTATION001_PATH , STRING_CONSTANT ) , false ) ; }
public com.android.ims.internal.IImsCallSession getPendingCallSession ( int sessionId , java.lang.String callId ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady () ; return getServiceInterface ( mBinder ) . getPendingCallSession ( mSlotId , mSupportedFeature , sessionId , callId ) ; } }
@ org.junit.Test public void test_SSL_CTX_free ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto . SSL_CTX_free ( org.conscrypt.NativeCryptoTest.NULL ) ; org.junit.Assert . fail () ; } catch ( java.lang.NullPointerException expected ) {} org.conscrypt.NativeCrypto . SSL_CTX_free ( org.conscrypt.NativeCrypto . SSL_CTX_new () ) ; }
@ android.test.suitebuilder.annotation.MediumTest public void testAndroidStrings () { assertEquals ( mLibTextView1 . getText () , STRING_CONSTANT ) ; }
public static com.google.devtools.build.android.desugar.HeaderClassLoader fromClassPath ( java.util.List < java.nio.file.Path > classpath , com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter , java.lang.ClassLoader parent ) throws java.io.IOException { return new com.google.devtools.build.android.desugar.HeaderClassLoader ( com.google.devtools.build.android.desugar.HeaderClassLoader . indexJars ( classpath ) , rewriter , parent ) ; }
public static java.lang.String getEndpointIdentificationAlgorithm ( javax.net.ssl.SSLParameters params ) { return null ; }
@ java.lang.Override @ javax.annotation.Nonnull java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file , boolean append ) throws com.android.sched.util.file.WrongPermissionException { return new java.util.zip.DeflaterOutputStream ( vfs . openWrite ( file . getWrappedFile () , append ) , new java.util.zip.Deflater () ) ; }
public static android.renderscript.RenderScript create ( android.content.Context ctx , android.renderscript.RenderScript.ContextType ct ) { int v = ctx . getApplicationInfo () . targetSdkVersion ; return android.renderscript.RenderScript . create ( ctx , v , ct , android.renderscript.RenderScript.CREATE_FLAG_NONE ) ; }
public static void main ( java.lang.String [] args ) throws java.lang.Exception { java.lang.System . loadLibrary ( args [ NUMBER_CONSTANT ] ) ; Main . doTest () ; }
public void setUiTTYMode ( int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady () ; getServiceInterface ( mBinder ) . setUiTTYMode ( mSlotId , mSupportedFeature , uiTtyMode , onComplete ) ; } }
@ com.android.annotations.Nullable public org.eclipse.core.runtime.jobs.Job startLintJob () { org.eclipse.core.resources.IFile file = getInputFile () ; if ( file != null ) { return com.android.ide.eclipse.adt.internal.lint.EclipseLintRunner . startLint ( java.util.Collections . singletonList ( file ) , getStructuredDocument () , false , false ) ; } return null ; }
public int getHeight () { return ( mImage . getHeight () ) - NUMBER_CONSTANT ; }
public com.android.ims.internal.ImsCallSession createCallSession ( com.android.ims.ImsCallProfile profile , android.telephony.ims.internal.ImsCallSessionListener listener ) { return null ; }
@ java.lang.Override public void run () { assert ( mRunLoopID ) != NUMBER_CONSTANT : STRING_CONSTANT ; nativeRun () ; }
public static com.android.cts.verifier.TestListAdapter.TestListItem newTest ( java.lang.String title , java.lang.String testName , android.content.Intent intent , java.lang.String [] requiredFeatures , java.lang.String [] excludedFeatures , java.lang.String [] applicableFeatures ) { return new com.android.cts.verifier.TestListAdapter.TestListItem ( title , testName , intent , requiredFeatures , excludedFeatures , applicableFeatures ) ; }
public final java.net.URL getLocation () { return this . location ; }
@ org.junit.runners.Parameterized.Parameters ( name = STRING_CONSTANT ) public static java.lang.Iterable < org.conscrypt.OpenSSLServerSocketImplTest.SocketType > data () { return java.util.Arrays . asList ( org.conscrypt.OpenSSLServerSocketImplTest.SocketType.DEFAULT , org.conscrypt.OpenSSLServerSocketImplTest.SocketType.ENGINE ) ; }
public static boolean isInstanceOfClass ( com.android.tools.perflib.heap.Instance inst , java.lang.String className ) { com.android.tools.perflib.heap.ClassObj cls = inst . getClassObj () ; return ( cls != null ) && ( className . equals ( cls . getClassName () ) ) ; }
public void timeToUpperCase_ICU ( int reps ) { for ( int i = NUMBER_CONSTANT ; i < reps ; ++ i ) { libcore.icu.ICU . toUpperCase ( s.value , java.util.Locale.US . toString () ) ; } }
public void setQuery ( java.lang.String query , @ android.support.annotation.Nullable java.lang.String rawNumber , com.android.dialer.callintent.CallInitiationType.Type type ) { this . query = query ; this . rawNumber = rawNumber ; this . callInitiationType = type ; if ( searchCursorManager . setQuery ( query ) ) { notifyDataSetChanged () ; } }
public E getFirst () { E x = elements [ head ] ; if ( x == null ) throw new java.util.NoSuchElementException () ; return x ; }
private com.android.browser.Tab getNextTab () { return mTabControl . getTab ( java.lang.Math . min ( ( ( mTabControl . getTabCount () ) - NUMBER_CONSTANT ) , ( ( mTabControl . getCurrentPosition () ) + NUMBER_CONSTANT ) ) ) ; }
static java.math.BigInt modInverse ( java.math.BigInt a , java.math.BigInt m ) { java.math.BigInt r = java.math.BigInt . newBigInt () ; java.math.BigInt . Check ( java.math.NativeBN . BN_mod_inverse ( r.bignum , a.bignum , m.bignum ) ) ; return r ; }
@ java.lang.Override public void setEchoSuppressionEnabled ( boolean enabled ) { mActivePhone . setEchoSuppressionEnabled ( enabled ) ; }
public void add ( com.android.bluetooth.map.BluetoothMapMessageListingElement element ) { mList . add ( element ) ; if ( element . getReadBool () ) { mHasUnread = true ; } }
public void _hideTestCase6 ( int options ) throws java.lang.Exception { _testOneLine ( STRING_CONSTANT , options ) ; }
@ java.lang.Override public void tearDown ( ) throws java.lang.Exception { super . tearDown () ; android.support.test.espresso.Espresso . setFailureHandler ( new android.support.test.espresso.base.DefaultFailureHandler ( android.support.test.InstrumentationRegistry . getTargetContext () ) ) ; }
@ com.android.annotations.NonNull public java.lang.String getTaskName ( @ com.android.annotations.NonNull java.lang.String prefix , @ com.android.annotations.NonNull java.lang.String suffix ) { return ( prefix + ( com.android.utils.StringHelper . capitalize ( getVariantConfiguration () . getFullName () ) ) ) + suffix ; }
@ java.lang.Override public void run ( com.intellij.designer.DesignerEditorPanelFacade designer ) { com.intellij.designer.LightToolWindow toolWindow = ( ( com.intellij.designer.LightToolWindow ) ( designer . getClientProperty ( getComponentName () ) ) ) ; toolWindow . updateAnchor ( getEditorMode () ) ; }
public com.android.jack.tools.merger.JackMerger next ( int firstTypeIndex ) { currentIdx = getNextMergerIdx ( currentIdx , firstTypeIndex ) ; return mergers . get ( currentIdx ) ; }
@ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDoStatement doStmt ) { removeBreakOrCase . push ( java.lang.Boolean . valueOf ( false ) ) ; return super . visit ( doStmt ) ; }
public void removeMemberType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface jDeclaredType ) { int index = inners . indexOf ( jDeclaredType ) ; if ( index != ( - NUMBER_CONSTANT ) ) { inners . remove ( index ) ; } }
@ java.lang.Override public void onMiddlewareReady () { try { listener . middlewareReady () ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
protected void visitPrimitive ( int argAndType , int type , int arg , int size ) { for ( int i = NUMBER_CONSTANT ; i < size ; i ++ ) { in . readByte () ; } }
protected void init ( ) throws java.lang.Exception { myCollation = com.ibm.icu.text.Collator . getInstance ( new java.util.Locale ( STRING_CONSTANT , STRING_CONSTANT ) ) ; }
public static long AndLongInt () { long lhs = Main . $inline$long ( NUMBER_CONSTANT ) ; int rhs = Main . $inline$int ( NUMBER_CONSTANT ) ; return lhs & rhs ; }
@ java.lang.Override public void shutdown () { fullDismiss () ; com.googlecode.android_scripting.interpreter.html.HtmlActivityTask . shutdown () ; }
@ android.test.suitebuilder.annotation.MediumTest public void testResOverlay () { assertFalse ( STRING_CONSTANT . equals ( mResOverLay . getText () ) ) ; assertEquals ( STRING_CONSTANT , mResOverLay2 . getText () ) ; }
@ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; closeGlSurfaceView () ; com.android.cts.verifier.sensors.helpers.OpenCVLibrary . loadAsync ( this ) ; }
public void tearDown ( ) throws java.lang.Exception { android.support.test.espresso.IdlingPolicies . setMasterPolicyTimeout ( NUMBER_CONSTANT , java.util.concurrent.TimeUnit.SECONDS ) ; super . tearDown () ; }
public static java.lang.String toHexString ( byte [] array ) { return com.android.internal.util.HexDump . toHexString ( array , NUMBER_CONSTANT , array.length ) ; }
@ com.android.annotations.NonNull public com.google.common.collect.ImmutableList < com.android.manifmerger.Actions.NodeRecord > getNodeRecords ( org.w3c.dom.Element element ) { com.android.manifmerger.XmlNode.NodeKey nodeKey = XmlNode.NodeKey . fromXml ( element ) ; return mRecords . containsKey ( nodeKey ) ? mRecords . get ( nodeKey ) . getNodeRecords () : com.google.common.collect.ImmutableList . < com.android.manifmerger.Actions.NodeRecord > of () ; }
@ java.lang.Override public com.android.ims.internal.ImsCallSession createCallSession ( com.android.ims.ImsCallProfile profile , android.telephony.ims.internal.ImsCallSessionListener listener ) { return super . createCallSession ( profile , listener ) ; }
public void test_SSLSocket_interrupt ( ) throws java.lang.Exception { test_SSLSocket_interrupt_case ( true , true ) ; test_SSLSocket_interrupt_case ( true , false ) ; test_SSLSocket_interrupt_case ( false , true ) ; if ( libcore.java.security.StandardNames.IS_RI ) { test_SSLSocket_interrupt_case ( false , false ) ; } }
public boolean p2pFind ( int timeout ) { abortScan () ; return mSupplicantP2pIfaceHal . find ( timeout ) ; }
@ java.lang.Override @ com.android.annotations.NonNull public java.util.Collection < java.io.File > getCompileLibraries () { return plugin . getAndroidBuilder ( getVariantData () ) . getCompileClasspath ( getVariantData () . getVariantConfiguration () ) ; }
public static long [] copyOf ( long [] original , int newLength ) { if ( newLength < NUMBER_CONSTANT ) { throw new java.lang.NegativeArraySizeException () ; } return java.util.Arrays . copyOfRange ( original , NUMBER_CONSTANT , newLength ) ; }
@ org.junit.Test public void test002d ( ) throws java.lang.Exception { java.io.File jackOutput ; try { jackOutput = runTest002 ( true , null ) ; junit.framework.Assert . fail () ; } catch ( com.android.jack.resource.ResourceImportConflictException e ) {} }
@ com.googlecode.android_scripting.rpc.Rpc ( description = STRING_CONSTANT ) public java.lang.Boolean bluetoothHidDeviceUnregisterApp ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = STRING_CONSTANT , description = STRING_CONSTANT ) java.lang.Boolean useCorrectConfig ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile ) == null ) { return false ; } if ( useCorrectConfig ) { return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . unregisterApp ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sAppConfig ) ; } else { return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile . unregisterApp ( null ) ; } }
@ java.lang.Override public void end ( ) throws java.lang.InterruptedException {}
@ java.lang.Override public com.google.devtools.build.android.Revision convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { return com.google.devtools.build.android.Revision . parseRevision ( input ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( e . getMessage () ) ; } }
boolean run ( java.lang.String actionName , vogar.target.Profiler profiler , java.lang.String [] args ) ;
private static synchronized void setHeadsetService ( com.android.bluetooth.hfp.HeadsetService instance ) { if ( com.android.bluetooth.hfp.HeadsetService.DBG ) { android.util.Log . d ( com.android.bluetooth.hfp.HeadsetService.TAG , ( STRING_CONSTANT + ( com.android.bluetooth.hfp.HeadsetService.sHeadsetService ) ) ) ; } com.android.bluetooth.hfp.HeadsetService.sHeadsetService = instance ; }
@ java.lang.Override public void run () { scanRawTable () ; com.android.internal.telephony.InboundSmsHandler . cancelNewMessageNotification ( context ) ; }
public void setDocumentValidity ( long timeMillis ) { mDocValidity = timeMillis ; }
public void run () { synchronized ( this ) { if ( ( this . overlayImage ) != null ) { this . overlayImage . dispose () ; } this . overlayImage = overlayImage ; } }
@ java.lang.Override public com.android.ims.internal.IImsConfig getConfigInterface ( int sessionId ) throws android.os.RemoteException { checkBinderConnection () ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId ) ; }
public static int NegatedCondition ( boolean x ) { return x != false ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
private libcore.util.ZoneInfo createZoneInfo ( int [] [] transitionTimes , int [] [] transitionTypes ) throws java.lang.Exception { return createZoneInfo ( transitionTimes , transitionTypes , java.lang.System . currentTimeMillis () ) ; }
@ java.lang.Deprecated public synchronized void setPluginsPath ( java.lang.String pluginsPath ) {}
public static void main ( java.lang.String [] args ) { java.lang.System . loadLibrary ( args [ NUMBER_CONSTANT ] ) ; Main . doTest ( new Transform () ) ; }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID uuid ) { android.bluetooth.BluetoothGattCharacteristic characteristic = mService . getCharacteristic ( uuid ) ; if ( characteristic == null ) { showMessage ( STRING_CONSTANT ) ; } return characteristic ; }
public void editUrl () { if ( mOptionsMenuOpen ) mActivity . closeOptionsMenu () ; mUi . editUrl ( false ) ; }
public void sendMessageWithSessionInfo ( int message ) { sendMessage ( message , NUMBER_CONSTANT , NUMBER_CONSTANT , android.telecom.Log . createSubsession () ) ; }
private void sendErrorToApp ( int errorCode , java.lang.String message ) { try { mInternalCallback . onError ( errorCode , message ) ; } catch ( android.os.RemoteException e ) {} }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , android.bluetooth.le.AdvertisingSetCallback callback , android.os.Handler handler ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , NUMBER_CONSTANT , callback , handler ) ; }
public void testAcoshF32 () { script_f32 = new android.renderscript.cts.ScriptC_acosh_f32 ( mRS , mRes , R.raw.acosh_f32 ) ; doF32 ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
void refresh ( K key ) { int hash = hash ( com.google.common.base.Preconditions . checkNotNull ( key ) ) ; segmentFor ( hash ) . refresh ( key , hash , defaultLoader ) ; }
public void testGet_NullPointerException () { try { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( NUMBER_CONSTANT ) ; c . get ( null ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public final android.content.ContentProviderClient acquireContentProviderClient ( android.net.Uri uri ) { android.content.IContentProvider provider = acquireProvider ( uri ) ; if ( provider != null ) { return new android.content.ContentProviderClient ( this , provider ) ; } return null ; }
public static void startMethodTracing ( java.lang.String traceName , java.io.FileDescriptor fd , int bufferSize , int flags ) { dalvik.system.VMDebug . startMethodTracing ( traceName , fd , bufferSize , flags ) ; }
public int [] getBands () { return mBands . clone () ; }
@ org.junit.Before public void setUp ( ) throws com.android.sched.util.config.ConfigurationException { com.android.sched.vfs.VFSTest . class . getClassLoader () . setDefaultAssertionStatus ( true ) ; com.android.sched.util.config.ThreadConfig . setConfig ( new com.android.sched.util.config.AsapConfigBuilder () . build () ) ; }
public synchronized void setPolicyDataEnabled ( boolean enabled ) { boolean prevDataEnabled = isDataEnabled ( true ) ; mPolicyDataEnabled = enabled ; if ( prevDataEnabled != ( isDataEnabled ( true ) ) ) { notifyDataEnabledChanged ( ( ! prevDataEnabled ) , com.android.internal.telephony.dataconnection.DataEnabledSettings.REASON_POLICY_DATA_ENABLED ) ; } }
@ java.lang.Override public boolean onCreateOptionsMenu ( com.android.internal.telephony.cat.Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu . add ( NUMBER_CONSTANT , StkApp.MENU_ID_END_SESSION , NUMBER_CONSTANT , R.string.menu_end_session ) ; menu . add ( NUMBER_CONSTANT , StkApp.MENU_ID_HELP , NUMBER_CONSTANT , R.string.help ) ; return true ; }
public static long getCreationTimestamp () { try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.r . lock () ; return com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection . getTimestamp () ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.r . unlock () ; } }
public boolean setAttribute ( java.lang.String attributeName , java.lang.String value ) { checkEditOK () ; com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode attr = mNode . setAttributeValue ( attributeName , value , true ) ; mNode . commitDirtyAttributesToXml () ; return attr != null ; }
private void applyLidSwitchState () { mPowerManager . setKeyboardVisibility ( isBuiltInKeyboardVisible () ) ; if ( ( ( mLidState ) == ( android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED ) ) && ( mLidControlsSleep ) ) { mPowerManager . goToSleep ( android.os.SystemClock . uptimeMillis () ) ; } }
public void setClassAnnotations ( com.android.jack.dx.rop.annotation.Annotations annotations ) { if ( annotations == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } if ( ( classAnnotations ) != null ) { throw new java.lang.UnsupportedOperationException ( STRING_CONSTANT ) ; } classAnnotations = new com.android.jack.dx.dex.file.AnnotationSetItem ( annotations ) ; }
public boolean setAlpha ( int alpha ) { checkGC () ; try { getGc () . setAlpha ( alpha ) ; return true ; } catch ( org.eclipse.swt.SWTException e ) { return false ; } }
private final com.android.server.am.ProcessRecord getRecordForAppLocked ( android.app.IApplicationThread thread ) { if ( thread == null ) { return null ; } int appIndex = getLRURecordIndexForAppLocked ( thread ) ; return appIndex >= NUMBER_CONSTANT ? mLruProcesses . get ( appIndex ) : null ; }
@ android.test.suitebuilder.annotation.MediumTest public void testResOverlay () { assertNotEquals ( STRING_CONSTANT , mResOverLay . getText () ) ; assertEquals ( STRING_CONSTANT , mResOverLay2 . getText () ) ; }
private boolean isWhitelistedOrRetained ( char c ) { return ( ( libcore.net.UriCodec . isWhitelisted ( c ) ) || ( isRetained ( c ) ) ) && ( c != CHAR_CONS ) ; }
private GitilesView.Builder parseDescribeCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) { if ( com.google.gitiles.ViewFilter . isEmptyOrSlash ( path ) ) { return null ; } return com.google.gitiles.GitilesView . describe () . setRepositoryName ( repoName ) . setPathPart ( path ) ; }
public com.google.gerrit.gpg.GerritPublicKeyChecker create () { return new com.google.gerrit.gpg.GerritPublicKeyChecker ( this , null ) ; }
public java.util.Map < java.lang.String , java.lang.String > getMergeResults () { return this . mergeResults ; }
private boolean isNoteDbEnabled ( org.eclipse.jgit.lib.Config cfg ) { return migration . readChanges () ; }
public com.google.gerrit.server.patch.PatchList get ( final com.google.gerrit.client.reviewdb.Change change , final com.google.gerrit.client.reviewdb.PatchSet patchSet ) { return get ( change , patchSet , com.google.gerrit.client.data.PatchScriptSettings.Whitespace.IGNORE_NONE ) ; }
public com.google.gerrit.acceptance.PushOneCommit.Result rm ( org.eclipse.jgit.api.Git git , java.lang.String ref ) throws org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil . rm ( git , fileName ) ; return execute ( git , ref ) ; }
@ org.junit.Before public void setUp () { validator = new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator ( null , new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE ) , null , null ) ; }
@ java.lang.Override protected void updateRepoImpl ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.server.git.IntegrationException { args.mergeTip . moveTipTo ( amendGitlink ( toMerge ) , toMerge ) ; }
com.google.gerrit.lucene.LuceneChangeIndex create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String base ) ;
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) private static < T , K extends com.google.gwtorm.client.Key < > > com.google.common.util.concurrent.CheckedFuture < T , com.google.gwtorm.server.OrmException > emptyFuture () { return com.google.common.util.concurrent.Futures . immediateCheckedFuture ( null ) ; }
< I > com.google.gerrit.extensions.restapi.RestModifyView < P , I > post ( P parent ) throws com.google.gerrit.extensions.restapi.RestApiException ;
@ org.junit.Test public void createProjectFoo ( ) throws com.google.gerrit.extensions.restapi.RestApiException { gApi . projects () . name ( STRING_CONSTANT ) . create () ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { return execute ( org.apache.http.client.fluent.Request . Delete ( ( ( ( url ) + STRING_CONSTANT ) + endPoint ) ) ) ; HEAD ( NUMBER_CONSTANT [ Merge ] ) ; }
public final native void setMessage ( java.lang.String value ) ;
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( STRING_CONSTANT + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , NUMBER_CONSTANT , false , null , STRING_CONSTANT ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onRestore ( @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( restoreAction ) == null ) { restoreAction = new com.google.gerrit.client.change.RestoreAction ( restore , changeId ) ; } restoreAction . show () ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gerrit.client.Gerrit.myConfig = result.config ; if ( ( result.account ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.account ; com.google.gerrit.client.Gerrit . applyUserPreferences () ; } onModuleLoad2 ( gStarting ) ; }
@ org.junit.BeforeClass public static void setup () { com.google.gerrit.server.events.EventTypes . register ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServletTest.RefReplicationDoneEvent.TYPE , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServletTest.RefReplicationDoneEvent . class ) ; com.google.gwtorm.client.KeyUtil . setEncoderImpl ( new com.google.gwtorm.server.StandardKeyEncoder () ) ; }
@ java.lang.Override public void close ( ) throws java.io.IOException { rw . close () ; repo . close () ; }
@ org.junit.Test public void deletingNonExistingEditRest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . delete ( urlEdit () ) ; org.junit.Assert . assertEquals ( org.apache.http.HttpStatus.SC_NOT_FOUND , r . getStatusCode () ) ; }
public static java.lang.String toAccountQuery ( java.lang.String fullname , com.google.gerrit.reviewdb.client.Change.Status status ) { return com.google.gerrit.common.PageLinks . toChangeQuery ( ( ( ( com.google.gerrit.common.PageLinks . op ( STRING_CONSTANT , fullname ) ) + STRING_CONSTANT ) + ( com.google.gerrit.common.PageLinks . status ( status ) ) ) , com.google.gerrit.common.PageLinks.TOP ) ; }
@ java.lang.Override public java.lang.Object apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.google.gerrit.server.project.GarbageCollect.Input input ) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc . getNameKey () ; if ( input.async ) { return applyAsync ( project , input ) ; } else { return applySync ( project , input ) ; } }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err , e ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator . defaultTypeError () ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator . createTypeError ( err ) ; } }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < , com.google.gerrit.server.query.change.ChangeData > i : getWriteIndexes () ) { i . replace ( cd ) ; } fireChangeIndexedEvent ( cd ) ; }
void syncScroll ( com.google.gerrit.client.diff.DisplaySide masterSide ) { scrollSynchronizer . syncScroll ( masterSide ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator . defaultRuleError () ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator . createRuleError ( err ) ; } }
@ java.lang.Override public void stop () { async . close () ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { buttonClicked = true ; if ( callback != null ) { callback . onSuccess ( result ) ; } hide () ; }
@ java.lang.Override public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus () . isOpen () ) { change . setCurrentPatchSet ( result.info ) ; change . setStatus ( Change.Status.MERGED ) ; com.google.gerrit.server.ChangeUtil . updated ( change ) ; } return change ; }
private void assertParseSucceeds ( java.lang.String body ) throws java.lang.Exception { try ( com.google.gerrit.server.notedb.ChangeNotesParser parser = newParser ( writeCommit ( body ) ) ) { parser . parseAll () ; } }
public static void putMessage ( int id , java.lang.String m , com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi . editMessage ( id ) . put ( m , cb ) ; }
@ java.lang.Override public void configure () { install ( dbInjector . getInstance ( com.google.gerrit.pgm.util.BatchProgramModule . class ) ) ; bind ( com.google.gerrit.server.extensions.events.GitReferenceUpdated . class ) . toInstance ( GitReferenceUpdated.DISABLED ) ; install ( new com.google.gerrit.server.index.DummyIndexModule () ) ; factory ( ChangeResource.Factory . class ) ; }
public com.google.gerrit.server.project.SubmitRuleOptions.Builder toBuilder () { return com.google.gerrit.server.project.SubmitRuleOptions . builder () . allowClosed ( allowClosed () ) . skipFilters ( skipFilters () ) . rule ( rule () ) ; }
public java.lang.String getLine ( final int i ) { return getLines ( i , ( i + NUMBER_CONSTANT ) ) ; }
@ org.junit.Test ( expected = com.ericsson.gerrit.plugins.eventslog.MalformedQueryException . class ) public void throwBadRequestTriggerOnBadQuery ( ) throws java.lang.Exception { setUpClient () ; java.lang.String badQuery = STRING_CONSTANT ; easyMock . resetAll () ; easyMock . replayAll () ; store . queryChangeEvents ( badQuery ) ; easyMock . verifyAll () ; }
public com.google.gerrit.util.http.testutil.FakeHttpServletRequest setPathInfo ( java.lang.String path ) { this . path = com.google.common.base.Preconditions . checkNotNull ( path ) ; return this ; }
private boolean allRefsAreVisible ( java.util.Set < java.lang.String > ignore ) { return ( user . isInternalUser () ) || ( canPerformOnAllRefs ( Permission.READ , ignore ) ) ; }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = com.google.gerrit.testutil.TestChanges . newUpdate ( injector , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , c , allUsers , user ) ; return update ; }
public static void get ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfoCache.Entry > cb ) { com.google.gerrit.client.projects.ConfigInfoCache.instance . getImpl ( name , cb ) ; }
private static void runGerrit ( java.lang.String . . . args ) throws java.lang.Exception { org.junit.Assert . assertEquals ( NUMBER_CONSTANT , com.google.gerrit.launcher.GerritLauncher . mainImpl ( args ) ) ; }
@ java.lang.Override public void onSuccess ( T value ) { if ( failed ) { return; } this . result = value ; remaining . remove ( this ) ; this . applyAllSuccess () ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info . init () ; loadConfigInfo ( info , null ) ; }
public void setChangeId ( final com.google.gerrit.reviewdb.client.Change.Id changeId ) { this . changeId = changeId ; }
@ org.junit.Test public void getCache_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . get ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_NOT_FOUND , r . getStatusCode () ) ; }
java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > toFileInfoMap ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return toFileInfoMap ( change , patchSet , null ) ; }
protected void onClick ( final com.google.gwt.user.client.Event event ) { com.google.gwt.user.client.History . newItem ( getTargetHistoryToken () , false ) ; com.google.gerrit.client.Gerrit . display ( createScreen () ) ; com.google.gwt.user.client.DOM . eventPreventDefault ( event ) ; }
com.google.gerrit.server.index.account.AccountIndexer create ( com.google.gerrit.server.index.account.AccountIndexCollection indexes ) ;
@ java.lang.Override protected void run () { loader . rescan () ; }
public static java.lang.String refsDraftComments ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames . buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , changeId . get () ) ; r . append ( accountId . get () ) ; return r . toString () ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( STRING_CONSTANT , true ) ; }
private java.util.List < com.google.gerrit.server.notedb.rebuild.Event > events ( com.google.gerrit.server.notedb.rebuild.Event . . . es ) { return com.google.common.collect.Lists . newArrayList ( es ) ; }
public io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder setBranch ( final java.lang.String branch ) { this . branch = io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder . addEndSlash ( io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder . reduceWildcard ( branch ) ) ; return this ; }
public static final void uploadImage ( java.lang.String imageData ) { com.googlesource.gerrit.plugins.imagare.client.ImageUploader . uploadImage ( STRING_CONSTANT , imageData , null ) ; }
public static com.google.gerrit.extensions.common.PathSubject assertThat ( java.nio.file.Path path ) { return com.google.common.truth.Truth . assertAbout ( com.google.gerrit.extensions.common.PathSubject.PATH_SUBJECT_FACTORY ) . that ( path ) ; }
public com.google.gerrit.reviewdb.client.Account getDeletedAssignee () { return deletedAssignee ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForBranch ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String branch ) throws java.lang.Exception { return newChange ( repo , null , null , branch , null , null ) ; }
@ org.junit.Test public void flushCacheWithGerritPrefix ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession . post ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_OK , r . getStatusCode () ) ; }
@ java.lang.Override public com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData apply ( com.google.gerrit.server.plugins.JarScanner.ClassData classData ) { return new com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData ( classData.className , classData.annotationValue , classData.interfaces ) ; }
@ java.lang.Override public com.google.gerrit.server.patch.PatchList load ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { final org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( key.projectKey ) ; try { return readPatchList ( key , repo ) ; } finally { repo . close () ; } }
private org.eclipse.jgit.lib.Ref getDraftRef ( com.google.gerrit.acceptance.TestAccount account , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager . openRepository ( allUsers ) ) { return repo . exactRef ( com.google.gerrit.reviewdb.client.RefNames . refsDraftComments ( account.id , changeId ) ) ; } }
public void setSide ( final com.google.gerrit.client.reviewdb.PatchLineComment.Side s ) { side = s . getCode () ; }
private org.eclipse.jgit.errors.ConfigInvalidException parseException ( java.lang.String fmt , java.lang.Object . . . args ) { return new org.eclipse.jgit.errors.ConfigInvalidException ( ( ( ( STRING_CONSTANT + ( changeId ) ) + STRING_CONSTANT ) + ( java.lang.String . format ( fmt , args ) ) ) ) ; }
@ java.lang.Override public com.google.gerrit.server.patch.DiffSummary call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache . get ( key . toPatchListKey () , project ) ; return com.google.gerrit.server.patch.DiffSummaryLoader . toDiffSummary ( patchList ) ; }
public void normalize ( final com.google.gerrit.common.data.ApprovalType at , final com.google.gerrit.reviewdb.PatchSetApproval ca ) { applyTypeFloor ( at , ca ) ; applyRightFloor ( ca ) ; }
@ java.lang.Override protected void onInitUI () { super . onInitUI () ; groups = new com.google.gerrit.client.admin.GroupTable ( true ) ; add ( groups ) ; }
@ java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply ( com.google.gerrit.server.project.CommitResource rsrc ) { org.eclipse.jgit.revwalk.RevCommit c = rsrc . getCommit () ; com.google.gerrit.extensions.common.CommitInfo info = com.google.gerrit.server.project.GetCommit . toCommitInfo ( c ) ; return info ; }
@ org.junit.Test public void testGcNotAllowed_Forbidden ( ) throws java.lang.Exception { org.junit.Assert . assertEquals ( HttpStatus.SC_FORBIDDEN , userSession . post ( ( ( STRING_CONSTANT + ( allProjects . get () ) ) + STRING_CONSTANT ) ) . getStatusCode () ) ; }
public static void ensureAllPatchSetsLoaded ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd . patches () ; } }
private static java.lang.String checkName ( java.lang.String name ) { com.google.common.base.CharMatcher m = com.google.common.base.CharMatcher . anyOf ( STRING_CONSTANT ) ; com.google.common.base.Preconditions . checkArgument ( m . matchesAllOf ( name ) , STRING_CONSTANT , name ) ; return name ; }
public com.google.gerrit.server.config.PluginConfig getFromGerritConfig ( java.lang.String pluginName ) { return new com.google.gerrit.server.config.PluginConfig ( pluginName , cfg ) ; }
void setReviewed ( boolean r ) { reviewed . setValue ( r , true ) ; }
public com.google.gerrit.extensions.api.projects.Projects.ListRequest withAll () { this . all = true ; return this ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChangeInEditMode ( curr . getParentKey () ) ) ; }
private java.lang.String createMyChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory . create ( db , user . getIdent () ) ; return push . to ( git , STRING_CONSTANT ) . getChangeId () ; }
@ com.google.inject.Provides @ com.google.inject.Singleton public com.google.gerrit.solr.SolrChangeIndex getChangeIndex ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.IndexCollection indexes , com.google.gerrit.server.index.FieldDef.FillArgs fillArgs ) throws java.io.IOException { return new com.google.gerrit.solr.SolrChangeIndex ( cfg , fillArgs , sitePaths , indexes , com.google.gerrit.server.index.ChangeSchemas . getLatestRelease () ) ; }
public void setFile ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern . isEmpty () ) ) ) { file = pattern ; } }
@ org.junit.Test public void testEndsOnNewline () { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , NUMBER_CONSTANT ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter . create ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , iter . advance ( NUMBER_CONSTANT ) ) ; }
protected void focusHint () { if ( hintOn ) { super . setText ( STRING_CONSTANT ) ; hintOn = false ; if ( ( getHintStyleName () ) != null ) { removeStyleName ( getHintStyleName () ) ; } } }
@ java.lang.Override public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > list () { namesUpdateLock . lock () ; try { com.google.gerrit.server.git.LocalDiskRepositoryManager.ProjectVisitor visitor = new com.google.gerrit.server.git.LocalDiskRepositoryManager.ProjectVisitor ( basePath ) ; scanProjects ( visitor ) ; return java.util.Collections . unmodifiableSortedSet ( visitor.found ) ; } finally { namesUpdateLock . unlock () ; } }
static com.google.gerrit.server.git.CodeReviewCommit error ( final com.google.gerrit.server.git.CommitMergeStatus s ) { final com.google.gerrit.server.git.CodeReviewCommit r = new com.google.gerrit.server.git.CodeReviewCommit ( org.eclipse.jgit.lib.ObjectId . zeroId () ) ; r.statusCode = s ; return r ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig . sshd ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig . contactstore ( config , rs ) ; }
@ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { enableButtons ( true ) ; new com.google.gerrit.client.ErrorDialog ( caught . getMessage () ) . center () ; }
public java.util.Collection < com.google.gerrit.common.data.LabelType > getLabelSections () { return labelSections . values () ; }
public static com.google.gerrit.client.rpc.RestApi reviewer ( int id , java.lang.String reviewer ) { return com.google.gerrit.client.changes.ChangeApi . change ( id ) . view ( STRING_CONSTANT ) . id ( reviewer ) ; }
private PatchSet.Id getPatchSetId ( com.google.gerrit.acceptance.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables . getOnlyElement ( db . changes () . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( c . getChangeId () ) ) ) . currentPatchSetId () ; }
private void publishEvent ( com.google.gerrit.server.events.Event event ) { session . publish ( gson . toJson ( event ) ) ; }
public boolean canPublish ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( ( ( change . getStatus () ) == ( Change.Status.DRAFT ) ) && ( isOwner () ) ) && ( isVisible ( db ) ) ; }
private static void assertOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { assertTrue ( ( STRING_CONSTANT + ref ) , u . controlForRef ( ref ) . isOwner () ) ; }
private void assertGone ( javax.servlet.http.HttpServletRequest req ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse () ; servlet . service ( req , res ) ; assertEquals ( javax.servlet.http.HttpServletResponse.SC_GONE , res . getStatus () ) ; }
public com.google.gerrit.server.project.ListProjects setMatchPrefix ( java.lang.String prefix ) { this . matchPrefix = prefix ; return this ; }
private static boolean isAllowed ( com.google.gerrit.gpg.CheckResult result , java.util.Collection < org.eclipse.jgit.transport.ReceiveCommand > commands ) { if ( com.google.gerrit.gpg.SignedPushPreReceiveHook . onlyMagicBranches ( commands ) ) { return result . isOk () ; } else { return result . isTrusted () ; } }
private void grantForcePush ( ) throws java.lang.Exception { grant ( Permission.PUSH , project , STRING_CONSTANT , true , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS ) ; }
public void initFs ( ) throws java.io.IOException { uuid . initFs () ; head . initFs ( ( ( long ) ( NUMBER_CONSTANT ) ) ) ; tail . initFs ( ( ( long ) ( NUMBER_CONSTANT ) ) ) ; }
@ org.junit.Test @ com.google.gerrit.acceptance.GerritConfig ( name = STRING_CONSTANT , value = STRING_CONSTANT ) public void testOne () { org.junit.Assert . assertEquals ( STRING_CONSTANT , serverConfig . getString ( STRING_CONSTANT , null , STRING_CONSTANT ) ) ; }
private static java.lang.String status ( com.google.gerrit.reviewdb.client.Change.Status status ) { switch ( status ) { case ABANDONED : return STRING_CONSTANT ; case MERGED : return STRING_CONSTANT ; case NEW : case SUBMITTED : default: return STRING_CONSTANT ; } }
@ org.junit.Test public void noHeadText ( ) throws java.lang.Exception { setUpSimpleRefs () ; com.google.gitiles.FakeHttpServletResponse res = buildText ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , res . getActualBodyString () ) ; }
@ java.lang.Override public java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > apply ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException { return reviewersUtil . suggestReviewers ( this , rsrc . getControl () , getVisibility ( rsrc ) ) ; }
private boolean match ( java.lang.String destBranch , java.lang.String refPattern ) { return com.google.gerrit.server.project.RefPatternMatcher . getMatcher ( refPattern ) . match ( destBranch , this . getRefControl () . getCurrentUser () . getUserName () ) ; }
private boolean isHttpEnabled () { return ( ( downloadConfig . getDownloadSchemes () . contains ( DownloadScheme.DEFAULT_DOWNLOADS ) ) || ( downloadConfig . getDownloadSchemes () . contains ( DownloadScheme.ANON_HTTP ) ) ) || ( downloadConfig . getDownloadSchemes () . contains ( DownloadScheme.HTTP ) ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { if ( actionId . canInheritFromWildProject () ) { return filter ( projectControl . getProjectState () . getInheritedRights () , actionId ) ; } else { return java.util.Collections . emptyList () ; } }
com.google.gerrit.server.change.ChangeEdits.Create create ( com.google.gerrit.reviewdb.client.Change change , java.lang.String path ) ;
protected abstract void run ( final java.lang.String [] args ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure , java.io.IOException ;
public java.util.List < java.lang.String > currentFilePaths ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet () ; if ( ps == null ) { return null ; } return filePaths ( currentPatchSet ) ; }
private static com.google.gerrit.reviewdb.client.AuthType toType ( final org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.config.ConfigUtil . getEnum ( cfg , STRING_CONSTANT , null , STRING_CONSTANT , AuthType.OPENID ) ; }
@ java.lang.Override public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { switch ( event . getCharCode () ) { case com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER : doSearch () ; break; case com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE : searchBox . setText ( STRING_CONSTANT ) ; searchBox . setFocus ( false ) ; break; } }
abstract com.google.gerrit.server.mail.receive.MailMessage.Builder id ( java.lang.String val ) ;
boolean canPerform ( java.lang.String permissionName , boolean isChangeOwner ) { return doCanPerform ( permissionName , isChangeOwner , false ) ; }
@ java.lang.Override protected java.lang.String getRefName () { return STRING_CONSTANT ; }
public com.google.gerrit.client.ErrorDialog setText ( final java.lang.String t ) { BRANCH ( bf5cfe ) ; com.google.gerrit.client.Fix error ; com.google.gerrit.client.not honoring ; com.google.gerrit.client.line breaks ; text . setText ( t ) ; return this ; }
private void setModeHeader ( javax.servlet.http.HttpServletResponse res , com.google.gitiles.PathServlet.FileType type ) { res . setHeader ( com.google.gitiles.PathServlet.MODE_HEADER , java.lang.String . format ( STRING_CONSTANT , type.mode . getBits () ) ) ; }
@ java.lang.Override protected void onInitUI () { super . onInitUI () ; initName () ; initOwner () ; initDescription () ; initRealmProperties () ; initMemberList () ; }
@ java.lang.Override protected void set ( int newValue ) { checkSequenceValue ( newValue ) ; seq = newValue ; }
@ java.lang.Override public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.index.change.ChangeField . getCommitterParts ( object ) . contains ( getValue () . toLowerCase () ) ; }
@ org.junit.Test @ com.google.gerrit.acceptance.GerritConfig ( name = STRING_CONSTANT , value = STRING_CONSTANT ) public void suggestReviewersMaxNbrSuggestions ( ) throws java.lang.Exception { java.lang.String changeId = createChange () . getChangeId () ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , STRING_CONSTANT , NUMBER_CONSTANT ) ; com.google.common.truth.Truth . assertThat ( reviewers ) . hasSize ( NUMBER_CONSTANT ) ; }
@ org.junit.Test public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.parent = STRING_CONSTANT ; com.google.gerrit.acceptance.RestResponse r = adminSession . put ( STRING_CONSTANT , in ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_UNPROCESSABLE_ENTITY , r . getStatusCode () ) ; }
@ java.lang.Override public boolean getIfPresent ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.common.SubmitType submitType , java.lang.String mergeStrategy ) { return cache . getIfPresent ( new com.google.gerrit.server.change.MergeabilityCacheImpl.EntryKey ( commit , com.google.gerrit.server.change.MergeabilityCacheImpl . toId ( intoRef ) , submitType , mergeStrategy , null , null , null ) ) ; }
private com.google.gerrit.reviewdb.client.Change newChange () { return com.google.gerrit.testutil.TestChanges . newChange ( project , changeOwner ) ; }
@ java.lang.Override public void delete ( int id ) throws java.io.IOException { java.lang.String idString = java.lang.Integer . toString ( id ) ; delete ( idString , openIndex ) ; delete ( idString , closedIndex ) ; }
public static com.google.gerrit.client.GitwebLink getGitwebLink () { com.google.gerrit.common.data.GitwebConfig gw = com.google.gerrit.client.Gerrit . getConfig () . getGitwebLink () ; return gw != null ? new com.google.gerrit.client.GitwebLink ( gw ) : null ; }
@ java.lang.Override public void execute () { com.google.gwt.user.client.Window . scrollTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; message . setFocus ( true ) ; }
public static void publishEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject . createObject () ; com.google.gerrit.client.changes.ChangeApi . change ( id ) . view ( STRING_CONSTANT ) . post ( in , cb ) ; }
@ java.lang.Override public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen . setPageTitle ( STRING_CONSTANT ) ; screen . show ( new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen ( com.google.gwt.http.client.URL . decodeQueryString ( screen . getToken () ) ) ) ; }
private void configureRequestScope () { bind ( org.apache.sshd.server.CommandFactory.Command . class ) . toProvider ( new com.google.inject.Provider < org.apache.sshd.server.CommandFactory.Command > () { @ java.lang.Override public org.apache.sshd.server.CommandFactory.Command get () { return com.google.gerrit.server.ssh.SshScopes . getContext () . command ; } } ) . in ( SshScopes.REQUEST ) ; }
@ java.lang.Override public com.google.gerrit.extensions.api.projects.Projects projects () { return projects . get () ; }
private Timer1.Context getMetricsTimerContext ( java.lang.String name ) { return execTime . start ( name ) ; }
public void testInvalidSchemeWithBackreference () { try { new com.google.gwtexpui.safehtml.client.LinkFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) . replace ( STRING_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException expected ) {} }
@ org.junit.Test public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = STRING_CONSTANT ; in.parent = STRING_CONSTANT ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.UnprocessableEntityException . class ) ; }
@ java.lang.Override public int hashCode () { return ( ( accountId . hashCode () ) * NUMBER_CONSTANT ) + ( externalId . hashCode () ) ; }
private com.google.gerrit.extensions.common.FixReplacementInfo toFixReplacementInfo ( com.google.gerrit.reviewdb.client.FixReplacement fixReplacement ) { com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo = new com.google.gerrit.extensions.common.FixReplacementInfo () ; fixReplacementInfo.range = toRange ( fixReplacement.range ) ; fixReplacementInfo.replacement = fixReplacement.replacement ; return fixReplacementInfo ; }
@ java.lang.Override public void configure () { factory ( ChangeUpdate.Factory . class ) ; factory ( ChangeDraftUpdate.Factory . class ) ; bind ( com.google.gerrit.server.IdentifiedUser . class ) . toInstance ( user ) ; bind ( com.google.gerrit.server.config.AllUsersName . class ) . toProvider ( allUsers ) ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onMatchBrackets ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs . matchBrackets ( e . getValue () ) ; view . getEditor () . setOption ( STRING_CONSTANT , prefs . matchBrackets () ) ; }
@ java.lang.Override protected void setUp ( ) throws java.lang.Exception { super . setUp () ; schema = new com.google.gwtorm.schema.java.JavaSchemaModel ( com.google.gwtorm.data.PhoneBookDb . class ) ; people = schema . getRelation ( STRING_CONSTANT ) ; }
public void markKeyInvalid ( com.google.gerrit.reviewdb.client.Account.Id accountId , int seq ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = read ( accountId ) ) { if ( authorizedKeys . markKeyInvalid ( seq ) ) { commit ( authorizedKeys ) ; } } }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = notesFactory . create ( db , change () ) ; } return notes ; }
protected static java.lang.String padTwo ( final int v ) { if ( v < NUMBER_CONSTANT ) { return STRING_CONSTANT + v ; } else { return java.lang.String . valueOf ( v ) ; } }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.extensions.api.GerritApi . class ) . to ( com.google.gerrit.server.api.GerritApiImpl . class ) ; install ( new com.google.gerrit.server.api.Module () ) ; install ( new com.google.gerrit.server.api.Module () ) ; }
protected java.io.Writer startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String contentType ) throws java.io.IOException { setApiHeaders ( res , contentType ) ; return com.google.gitiles.BaseServlet . newWriter ( req , res ) ; }
public final void upsert ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doUpsert ( instances , null ) ; }
@ java.lang.Override public Project.NameKey getProjectNameKey () { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change.project ) ; }
public org.kohsuke.github.GitHub getHub ( ) throws java.io.IOException { return org.kohsuke.github.GitHub . connectUsingOAuth ( config.gitHubApiUrl , token.accessToken ) ; }
private void checkPreconditions ( javax.servlet.http.HttpServletRequest req , com.google.gerrit.extensions.restapi.RestResource rsrc ) throws com.google.gerrit.extensions.restapi.PreconditionFailedException { if ( STRING_CONSTANT . equals ( req . getHeader ( STRING_CONSTANT ) ) ) { throw new com.google.gerrit.extensions.restapi.PreconditionFailedException ( STRING_CONSTANT ) ; } }
@ org.junit.Test public void parseInvalidPrimaryStorage () { try { com.google.gerrit.server.notedb.NoteDbChangeState . parse ( new com.google.gerrit.reviewdb.client.Change.Id ( NUMBER_CONSTANT ) , STRING_CONSTANT ) ; com.google.common.truth.Truth . assert_ () . fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} }
public void setLinkName ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty () ) ) ) { this . name = name ; } }
@ java.lang.Override public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { submitOnSelection = false ; if ( ( event . getCharCode () ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { if ( nameTxt . isSuggestionListShowing () ) { submitOnSelection = true ; } else { doAddNew () ; } } }
private net.sf.ehcache.constructs.blocking.SelfPopulatingCache startCacheSshKeys () { final net.sf.ehcache.Cache dc = com.google.gerrit.server.GerritServer.cacheMgr . getCache ( STRING_CONSTANT ) ; final net.sf.ehcache.constructs.blocking.SelfPopulatingCache r ; r = new net.sf.ehcache.constructs.blocking.SelfPopulatingCache ( dc , new com.google.gerrit.server.ssh.SshKeyCacheEntryFactory () ) ; com.google.gerrit.server.GerritServer.cacheMgr . replaceCacheWithDecoratedCache ( dc , r ) ; return r ; }
private static int checkLimit ( int limit , java.lang.String name , int defaultValue ) { if ( limit == NUMBER_CONSTANT ) { return defaultValue ; } com.google.common.base.Preconditions . checkArgument ( ( limit > NUMBER_CONSTANT ) , STRING_CONSTANT , name , limit ) ; return limit ; }
@ java.lang.Override public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) {}
void onLogout () { async . append ( log ( STRING_CONSTANT ) ) ; audit ( context . get () , STRING_CONSTANT , STRING_CONSTANT , new java.lang.String [] {} ) ; }
@ java.lang.Override protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { final com.google.gerrit.server.GerritServer gs = com.google.gerrit.server.GerritServer . getInstance () ; final com.google.gwtorm.client.SchemaFactory < com.google.gerrit.client.reviewdb.ReviewDb > rdf = gs . getDatabase () ; return new com.google.gerrit.client.changes.ChangeDetailServiceImpl ( rdf ) ; }
private void autoReindexIfStale ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { autoReindexIfStale ( cd . project () , cd . getId () ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } }
@ java.lang.Override public void run () { try { serverStarted . await () ; } catch ( java.lang.InterruptedException e ) { throw new java.lang.RuntimeException ( e ) ; } catch ( java.util.concurrent.BrokenBarrierException e ) { throw new java.lang.RuntimeException ( e ) ; } }
@ java.lang.Override protected java.lang.String getRefName () { return com.google.gerrit.reviewdb.client.RefNames . refsDraftComments ( author , getChangeId () ) ; }
void applyFailed () { com.google.gwt.user.client.rpc.AsyncCallback < T > cb = delegate ; if ( cb != null ) { delegate = null ; result = null ; cb . onFailure ( failedThrowable ) ; } }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( changeId ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , null , null , false , true ) ) ; }
private void logDebug ( java.lang.String msg , java.lang.Object . . . args ) { if ( com.google.gerrit.server.git.SubmoduleOp.log . isDebugEnabled () ) { com.google.gerrit.server.git.SubmoduleOp.log . debug ( ( ( ( STRING_CONSTANT + ( orm . getSubmissionId () ) ) + STRING_CONSTANT ) + msg ) , args ) ; } }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.httpd.GerritOptions . class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( false , false ) ) ; }
@ java.lang.Override public int hashCode () { return ( ( categoryId . hashCode () ) * NUMBER_CONSTANT ) + ( value ) ; }
private static com.google.gerrit.common.data.PermissionRule deny ( com.google.gerrit.common.data.GroupReference group ) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53 . rule ( group ) ; rule . setDeny ( true ) ; return rule ; }
private void hideTextBox () { if ( ( textBox ) != null ) { textBox . setText ( textLabel . getText () ) ; textBox . removeFromParent () ; textBox = null ; } textLabel . setVisible ( true ) ; }
public static java.lang.String toUnified ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher . toPatch ( STRING_CONSTANT , diffBase , revision , fileName , null , NUMBER_CONSTANT ) ; }
public com.google.gerrit.extensions.registration.DynamicItem < T > get () { return new com.google.gerrit.extensions.registration.DynamicItem < T > ( key , com.google.gerrit.extensions.registration.DynamicItemProvider . find ( injector , type ) , STRING_CONSTANT ) ; }
private static com.google.gerrit.client.reviewdb.AccountExternalId createId ( final com.google.gerrit.client.reviewdb.Account.Id newId , final com.google.gerrit.server.account.AuthRequest who ) { final java.lang.String ext = who . getExternalId () ; return new com.google.gerrit.client.reviewdb.AccountExternalId ( new com.google.gerrit.client.reviewdb.AccountExternalId.Key ( newId , ext ) ) ; }
com.google.gerrit.lucene.LuceneChangeIndex create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , boolean readOnly ) ;
public void logout () { if ( ( val ) != null ) { manager . destroy ( key ) ; key = null ; val = null ; saveCookie ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } }
public static boolean isNotSignedIn ( final java.lang.Throwable caught ) { if ( caught instanceof com.google.gerrit.client.rpc.NotSignedInException ) { return true ; } return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught . getMessage () . equals ( NotSignedInException.MESSAGE ) ) ; }
public synchronized int getCount () { return count ; }
protected synchronized void handleEmails () {}
private com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc . getField ( com.google.gerrit.server.index.group.GroupField.UUID . getName () ) . stringValue () ) ; return groupCache . get ( uuid ) ; }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission perm ) { return ! ( label ( perm . permissionName () . get () ) . isEmpty () ) ; }
com.google.gerrit.server.git.GitModules create ( com.google.gerrit.reviewdb.client.Branch.NameKey project , java.lang.String submissionId , com.google.gerrit.server.git.MergeOpRepoManager m ) ;
private void setDefaultFields ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { setDefaultConfig ( filterConfig ) ; setDefaultRenderer ( filterConfig ) ; setDefaultUrls () ; setDefaultAccess () ; setDefaultVisibilityCache () ; setDefaultTimeCache () ; setDefaultBlameCache () ; setDefaultGitwebRedirect () ; setDefaultDateFormatterBuilder () ; }
public void add ( final com.google.inject.Injector . . . injectors ) { for ( final com.google.inject.Injector i : injectors ) { add ( i ) ; } }
@ java.lang.Override public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { this . ghLoginProvider = new com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.Provider () ; }
@ java.lang.Override public void start ( final org.apache.sshd.server.Environment env ) { startThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { runImp () ; } } ) ; }
public void testBackreference () { assertEquals ( STRING_CONSTANT , new com.google.gwtexpui.safehtml.client.LinkFindReplace ( STRING_CONSTANT , STRING_CONSTANT ) . replace ( STRING_CONSTANT ) ) ; }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return notesFactory . create ( db , change ) ; }
private void fail ( com.google.gerrit.reviewdb.client.Change change , java.lang.Throwable t ) { com.google.gerrit.pgm.Reindex.log . error ( ( STRING_CONSTANT + ( change . getId () ) ) , t ) ; ok . set ( false ) ; failed . update ( NUMBER_CONSTANT ) ; }
public java.util.List < T > toList () { final java.util.List < T > r = items ; if ( r == null ) { throw new java.lang.IllegalStateException ( STRING_CONSTANT ) ; } items = null ; return r ; }
public java.lang.String getCoverLetter () { if ( ( changeMessage ) != null ) { final java.lang.String txt = changeMessage . getMessage () ; if ( txt != null ) { return txt . trim () ; } } return STRING_CONSTANT ; }
public static void deleteDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.CommentApi . revision ( id , STRING_CONSTANT ) . id ( draftId ) . delete ( cb ) ; }
public static void addSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils . addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid . NewGuid () , vmId ) , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD , new org.ovirt.engine.core.bll.smartcard.SmartcardSpecParams () , true , false ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUpGetDomainExpectations ( StorageType.NFS , true ) ; setUpGetConnectionExpectations () ; setUriInfo ( setUpBasicUriExpectations () ) ; control . replay () ; verifyStorageDomain ( resource . get () ) ; }
private org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand createTestCommand2 ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters ( volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskOperation.START , null , getBricks ( volumeId , STRING_CONSTANT , NUMBER_CONSTANT ) . get ( NUMBER_CONSTANT ) , false ) ) ; }
@ java.lang.Override protected boolean canDoAction () { return getQuotaHelper () . checkQuotaValidationForAdd ( org.ovirt.engine.core.bll.AddQuotaCommand . getParameters () . getQuota () , org.ovirt.engine.core.bll.AddQuotaCommand . getReturnValue () . getCanDoActionMessages () ) ; }
private boolean validateSourceStorageDomain ( org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.compat.Guid sourceDomainId ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = getValidator ( imageId , sourceDomainId ) ; return validator . isDomainExistAndActive ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand . getReturnValue () . getCanDoActionMessages () ) ; }
public org.ovirt.engine.core.bll.SPMAsyncTask CreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters taskParameters ) { return org.ovirt.engine.core.bll.AsyncTaskFactory . Construct ( taskType , taskParameters ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = prepareDAO ( dbFacade . getVdsDao () ) ; existingVds = dao . get ( org.ovirt.engine.core.dao.VdsDAOTest.EXISTING_VDS_ID ) ; existingVds2 = dao . get ( org.ovirt.engine.core.dao.VdsDAOTest.EXISTING_VDS_ID_2 ) ; }
@ java.lang.Override public void Search () { if ( ( getEntity () ) != null ) { super . Search () ; } else { setItems ( null ) ; } }
static org.ovirt.engine.ui.uicompat.UIConstants getConstants () { if ( ( org.ovirt.engine.ui.frontend.Frontend.constants ) == null ) { org.ovirt.engine.ui.frontend.Frontend.constants = org.ovirt.engine.ui.uicompat.ConstantsManager . getInstance () . getConstants () ; } return org.ovirt.engine.ui.frontend.Frontend.constants ; }
@ org.junit.Test public void validateSucceedsOnStoppedVolume () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeParameters ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert . assertTrue ( cmd . validate () ) ; }
@ java.lang.Override public void vdsMovedToMaintenance ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { org.ovirt.engine.core.bll.MaintenanceVdsCommand . processStorageOnVdsInactive ( vds ) ; } finally { org.ovirt.engine.core.bll.job.ExecutionHandler . updateSpecificActionJobCompleted ( vds . getId () , VdcActionType.MaintenanceVds , true ) ; } }
@ java.lang.Override public javax.ws.rs.core.Response allocateVm ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.AttachUserToVmFromPoolAndRun , new org.ovirt.engine.core.common.action.VmPoolUserParameters ( guid , getCurrent () . getUser () , false ) , action , new org.ovirt.engine.api.restapi.resource.BackendVmPoolResource.VmQueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ) ; }
public void start () { org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger . fine ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; active = true ; scheduleRepeating ( getRefreshRate () ) ; com.google.gwt.event.logical.shared.ValueChangeEvent . fire ( this , getValue () ) ; }
@ org.junit.Test public void testGet () { setUriInfo ( setUpBasicUriExpectations () ) ; resource . setParent ( getCollectionResourceMock () ) ; control . replay () ; org.ovirt.engine.api.model.Hook hook = resource . get () ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostHookResourceTest.EVENT_2_NAME , hook . getEventName () ) ; }
public static org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideVmInterfaceModel createInstance ( org.ovirt.engine.core.common.businessentities.VmBase vm , org.ovirt.engine.core.compat.Version clusterCompatibilityVersion , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > vmNicList , org.ovirt.engine.ui.uicommonweb.models.EntityModel sourceModel ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideVmInterfaceModel instance = org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideVmInterfaceModel . createInstance ( vm , clusterCompatibilityVersion , vmNicList , sourceModel ) ; instance . init () ; return instance ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , false ) ; control . replay () ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
@ java.lang.Override public java.util.concurrent.Future < java.util.Map < java.lang.String , java.lang.Object > > setupNetworks ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct networks , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct bonds , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options ) { return vdsServer . futureSetupNetworks ( networks . getInnerMap () , bonds . getInnerMap () , options . getInnerMap () ) ; }
@ java.lang.Override public java.lang.Long getRawValue ( org.ovirt.engine.core.common.businessentities.StorageDomain object ) { long totalSpace = ( ( object . getTotalDiskSize () ) != null ) ? object . getTotalDiskSize () : NUMBER_CONSTANT ; return ( ( long ) ( totalSpace ) ) ; }
public void setupNetworks () { if ( ( getWindow () ) != null ) { return; } org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel setupNetworksWindowModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel ( this ) ; setWindow ( setupNetworksWindowModel ) ; setupNetworksWindowModel . setEntity ( getEntity () ) ; }
public short nextShort () { return ( ( short ) ( super . nextInt () ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { mappings . setExplanation ( org.ovirt.engine.ui.webadmin.widget.provider.NeutronAgentWidget.templates . italicText ( model . getInterfaceMappingsExplanation () . getEntity () ) ) ; }
protected org.ovirt.engine.core.common.scheduling.ClusterPolicy getSchedulingPolicy () { return getEntity ( new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetClusterPolicyById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) , false ) ; }
@ java.lang.Override public void setEntity ( java.lang.Object value ) { super . setEntity ( value ) ; updateIsHotPlugAvailable () ; }
@ java.lang.Override protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks () { return java.util.Collections . singletonMap ( getParameters () . getContainerId () . toString () , org.ovirt.engine.core.bll.LockMessagesMatchUtil . makeLockingPair ( LockingGroup.REMOTE_VM , org.ovirt.engine.core.bll.ImportVmCommand . getVmIsBeingImportedMessage () ) ) ; }
public void setmem_commited ( java.lang.Integer value ) { this . mVdsDynamic . setmem_commited ( value ) ; calculateFreeVirtualMemory () ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void isNetworkDeviceNonNetworkFree () { freeVfCommon ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = getSingleMockedNonFreeDevice () ; org.junit.Assert . assertFalse ( networkDeviceHelper . isDeviceNetworkFree ( hostDevice ) ) ; }
public void cancel () { resetData () ; setWindow ( null ) ; org.ovirt.engine.ui.frontend.Frontend . Unsubscribe () ; }
private void setVisibilityToChangedFieldsExpander ( boolean flag ) { changedFieldsPanel . setVisible ( flag ) ; applyNowTitleMessage . setVisible ( flag ) ; changedFieldsPanelTitle . setVisible ( flag ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { setItems ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ) ) ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations () ; control . replay () ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
private java.lang.String getPostUpdateOvfStoreDescription ( java.util.Date updateDate ) { if ( ( postUpdateDescription ) == null ) { postUpdateDescription = generateOvfStoreDescription ( updateDate , true ) ; } return postUpdateDescription ; }
public java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > getImageToDestinationDomainMap ( java.lang.Boolean isSingle ) { updateImageToDestinationDomainMap ( isSingle ) ; return imageToDestinationDomainMap ; }
private static org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand < org.ovirt.engine.core.common.action.StoragePoolParametersBase > createCommand ( org.ovirt.engine.core.common.action.StoragePoolParametersBase param ) { return new org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand ( param ) ; }
@ org.junit.Test public void testIsNotUp () { validator = mockHostForActivation ( VDSStatus.Down ) ; org.junit.Assert . assertThat ( validator . isUp () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL , STRING_CONSTANT ) ) ; }
@ org.junit.Test public void testGet () { setUpGetVmHostDevicesExpectations () ; control . replay () ; org.ovirt.engine.api.model.HostDevice device = resource . get () ; verifyHostDevice ( device ) ; }
@ javax.annotation.PostConstruct protected final void postConstruct () { init () ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return NUMBER_CONSTANT ; } return ( ( java.lang.Integer ) ( source ) ) . intValue () ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( siblingVlanInterfaces . size () ) > NUMBER_CONSTANT ) { return true ; } return false ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Qos incoming , org.ovirt.engine.core.common.businessentities.qos.QosBase entity ) { org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.qos.QosBase > parameters = new org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.qos.QosBase > () ; parameters . setQosId ( guid ) ; parameters . setQos ( map ( incoming , entity ) ) ; return parameters ; }
public java.lang.String getSearchString () { if ( ( searchString ) == null ) { return null ; } return ( searchString ) + ( ( pagingSearchString ) == null ? STRING_CONSTANT : pagingSearchString ) ; }
@ org.junit.Test public void validateFailsIfHostDoesNotExists () { org.mockito.Mockito . when ( vdsDao . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST ) ; }
protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { return new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( guids . get ( NUMBER_CONSTANT ) , guids . get ( NUMBER_CONSTANT ) , guids . get ( NUMBER_CONSTANT ) , isPostZero () , false ) ; }
protected boolean checkStorageDomainInDb () { return ( getStorageDomainStaticDAO () . get ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase . getStorageDomain () . getId () ) ) != null ; }
@ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > createGhostValue () { org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > value = new org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > () ; value . setItems ( suggestions ) ; value . setSelectedItem ( STRING_CONSTANT ) ; return value ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue getStatsForDomain () { return runVdsCommand ( VDSCommandType.GetStorageDomainStats , new org.ovirt.engine.core.common.vdscommands.GetStorageDomainStatsVDSCommandParameters ( org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand . getVds () . getId () , org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand . getStorageDomain () . getId () ) ) ; }
public static < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < ID > , ID extends java.io.Serializable & java.lang.Comparable < ? super ID > > org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityComparator < T , ID > newInstance () { return new org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityComparator < T , ID > () ; }
@ java.lang.Override public boolean isValid ( java.lang.String name , javax.validation.ConstraintValidatorContext context ) { return ( name != null ) && ( org.ovirt.engine.core.common.utils.ValidationUtils . validHostname ( name ) ) ; }
public static org.ovirt.engine.core.searchbackend.ISyntaxChecker CreateBackendSyntaxChecker ( java.lang.String AuthenticationMethod ) { org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.ConfigAuthenticationMethod = AuthenticationMethod ; if ( ( org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker ) == null ) { org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( org.ovirt.engine.core.common.config.Config . < java.lang.Integer > GetValue ( ConfigValues.SearchResultsLimit ) , true ) ; } return org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker ; }
@ org.junit.Test public void getCustomValueFromEmptyMap () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase () ; final java.lang.String s = b . getCustomValue ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , s ) ; }
public void setstatus ( org.ovirt.engine.core.common.businessentities.VMStatus value ) { if ( ( this . mVmDynamic . getstatus () ) != value ) { this . mVmDynamic . setstatus ( value ) ; } }
@ org.junit.Test public void add () { runAddAndVerify ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest . createNewInterface () , false , org.mockito.Mockito . times ( NUMBER_CONSTANT ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID ) ; }
@ java.lang.Override public boolean isAllowSnapshot () { return ( ! ( isShareable () ) ) && ( ! ( java.lang.Boolean.TRUE . equals ( getReadOnly () ) ) ) ; }
@ org.junit.Test public void vmNotDuringSnapshotReturnsInvalidResultWhenInSnapshot ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid () ; org.mockito.Mockito . when ( snapshotDao . exists ( vmId , SnapshotStatus.LOCKED ) ) . thenReturn ( true ) ; org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest . validateInvalidResult ( validator . vmNotDuringSnapshot ( vmId ) , VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT ) ; }
private void fetchImageTemplates () { if ( ( imageTemplates ) == null ) { imageTemplates = org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskDao () . getAllForVm ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand . getVmTemplateId () ) , false , false ) ; } }
@ java.lang.Override public void setMessage ( java.lang.String message ) { messagePanel . setText ( com.google.gwt.safehtml.shared.SafeHtmlUtils . fromString ( ( message != null ? message : STRING_CONSTANT ) ) . asString () . replace ( STRING_CONSTANT , STRING_CONSTANT ) ) ; }
@ java.lang.Override public void remove ( java.lang.String id ) { try { getClient () . networks () . delete ( id ) . execute () ; } catch ( java.lang.RuntimeException e ) { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE , e ) ; } }
public java.lang.Object call ( ) throws java.lang.Exception { _parser . cliEnvironmentSet ( java.lang.String . format ( STRING_CONSTANT , VdsmEnv.CONFIG_PREFIX ) , java.lang.Integer . toString ( _vds . getPort () ) ) ; return null ; }
@ org.junit.Test public void testAuditLogMacInUseUnplug () { final org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest . createNewInterface () ; vmInterfaceManager . auditLogMacInUseUnplug ( iface , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ; verifyCommonAuditLogFilledProperly ( AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG , iface ) ; org.junit.Assert . assertEquals ( auditLogableCaptor . getValue () . getVmName () , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ; }
protected < T > java.util.Set < org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor < T > > getExtraConfigDescriptors () { return java.util.Collections . emptySet () ; }
private static org.ovirt.engine.core.common.action.InstallVdsParameters createParameters () { org.ovirt.engine.core.common.action.InstallVdsParameters param = new org.ovirt.engine.core.common.action.InstallVdsParameters ( org.ovirt.engine.core.compat.Guid . newGuid () , null ) ; param . setIsReinstallOrUpgrade ( true ) ; return param ; }
public void setmem_shared ( java.lang.Long value ) { this . mVdsStatistics . setmem_shared ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; }
private void printSuccessMessage ( java.lang.String domainName , java.lang.String action ) { if ( args . containsKey ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_ADD_PERMISSIONS ) ) { java.lang.System.out . print ( java.lang.String . format ( SUCCESS_MESSAGE_FOR_ACTION_WITH_ADD_PERMISSIONS , STRING_CONSTANT , domainName ) ) ; } java.lang.System.out . println ( SERVICE_RESTART_MESSAGE ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Bookmark > getAll () { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.ovirt.engine.core.dao.BookmarkDAODbFacadeImpl.BookmarkSqlParameterSource () ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , new org.ovirt.engine.core.dao.BookmarkDAODbFacadeImpl.BookmarkRowMapper () , parameterSource ) ; }
@ java.lang.Override protected java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > getExclusiveLocks () { return java.util.Collections . singletonMap ( ( ( org.ovirt.engine.core.compat.Guid ) ( org.ovirt.engine.core.bll.RemoveDiskCommand . getParameters () . getEntityId () ) ) , LockingGroup.DISK . name () ) ; }
@ org.junit.Test public void testWriteFileToStream_IOException () { java.io.File file = new java.io.File ( STRING_CONSTANT ) ; java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream () ; try { org.ovirt.engine.core.utils.servlet.ServletUtils . writeFileToStream ( out , file ) ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( java.io.IOException ioe ) {} }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profile ) { driver . edit ( profile ) ; initCustomPropertySheet ( profile ) ; }
@ java.lang.Override protected void onEntityChanged () { super . onEntityChanged () ; if ( ( getEntity () ) != null ) { updateDataCenterVersion () ; getSearchCommand () . execute () ; updateIsDiskHotPlugAvailable () ; updateLiveStorageMigrationEnabled () ; } updateActionAvailability () ; }
public boolean isHibernating () { return ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.SavingState ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PreparingForHibernate ) ) ; }
@ java.lang.Override protected void onReveal () { super . onReveal () ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetSearchPanel , searchPanel ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetTabBar , tabBar ) ; configureFeedbackUrl () ; setMainTabBarOffset ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.MAIN_TABBAR_INITIAL_OFFSET ) ; }
@ org.junit.Test public void testGetVmIconByDataUrlWithInvalidUrl () { final java.util.List < org.ovirt.engine.core.common.businessentities.VmIcon > result = prepareDao () . getByDataUrl ( ( ( org.ovirt.engine.core.dao.VmIconDaoTest.OTHER_SMALL_DATAURL ) + STRING_CONSTANT ) ) ; org.junit.Assert . assertTrue ( result . isEmpty () ) ; }
protected < C extends org.ovirt.engine.api.model.ActionableResource > C addActions ( C model ) { org.ovirt.engine.api.restapi.util.LinkHelper . addActions ( org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource . getUriInfo () , model , this ) ; return model ; }
public void load ( java.util.Properties configuration ) { loadImpl ( configuration , null ) ; }
@ org.junit.Test public void validateOkSucceeds ( ) throws java.lang.Exception { setupMock () ; parameters . setId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.stepId ) ; parameters . setJobId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.jobId ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
@ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel ) ( result . getState () ) ) ; localModel . getWindow () . StopProgress () ; Cancel () ; }
private org.ovirt.engine.core.common.businessentities.Network getNetwork () { if ( ( network ) == null ) { network = org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . getNetworkDAO () . get ( org.ovirt.engine.core.bll.UpdateNetworkOnClusterCommand . getParameters () . getNetworkCluster () . getnetwork_id () ) ; } return network ; }
public java.util.Map < java.lang.String , java.lang.Object > getDeviceList ( int storageType , java.util.Map options ) ;
@ java.lang.Override protected void endWithFailure () { rollbackQuota () ; HandleEndAction () ; }
@ org.junit.Test public void versionDecreaseWithHost () { createCommandWithOlderVersion ( true , false ) ; setupCpu () ; vdsExist () ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_CLUSTER_WITH_HOSTS_COMPATIBILITY_VERSION ) ; }
@ org.junit.Test public void testGetAllVfsConfigByHostId () { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > vfsConfigs = dao . getAllVfsConfigByHostId ( org.ovirt.engine.core.dao.network.HostNicVfsConfigDaoTest.HOST_ID ) ; org.junit.Assert . assertEquals ( vfsConfigs . size () , NUMBER_CONSTANT ) ; }
public void setTotalDiskSize ( java.lang.Integer value ) { if ( ! ( totalDiskSize . equals ( value ) ) ) { totalDiskSize = value ; } }
public static < T > org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor < T > mockConfig ( org.ovirt.engine.core.common.config.ConfigValues value , org.ovirt.engine.core.compat.Version version , T returnValue ) { return new org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor < T > ( value , version . toString () , returnValue ) ; }
@ java.lang.Deprecated public static void RunMultipleAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { org.ovirt.engine.ui.frontend.Frontend . RunMultipleAction ( actionType , parameters , null , null ) ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String . valueOf ( object . getvm_mem_size_mb () ) ) + STRING_CONSTANT ; }
@ java.lang.Override public org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType vdcObjectType , org.ovirt.engine.core.compat.Guid . . . entityIds ) { return org.ovirt.engine.core.compat.Guid.Empty ; }
@ org.junit.Before public void setup () { existingGroup . setCompatibilityVersion ( Version.v3_1 ) ; param = new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter ( getExistingCluster () , getNetwork () ) ; underTest = new org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommandTest.TestAttachNetworkToClusterCommand ( param ) ; }
public boolean getIsAvailable () { return ( getDetailModel () . getExternalId () ) == null ; }
@ org.junit.Test public void defaultEndtime () { final long epochOffset = NUMBER_CONSTANT ; final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase () ; org.junit.Assert . assertEquals ( epochOffset , t . getEndTime () . getTime () ) ; }
@ java.lang.Override public void postModelEnabled ( boolean enabled ) { messageLabel . setVisible ( ( ! enabled ) ) ; setApplyEnabled ( ( ! enabled ) ) ; }
public void sethost_name ( java.lang.String value ) { this . mVdsStatic . sethost_name ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; }
public java.lang.String getData ( java.lang.String format ) { com.google.gwt.dom.client.DataTransfer dt = getDataTransfer () ; return getDataTransfer () . getData ( format ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result . getReturnValue () ; if ( ( returnValue != null ) && ( returnValue . getSucceeded () ) ) { cancel () ; } }
@ org.junit.Test public void passthroughProfileContainsPortMirroring () { passthroughProfileContainsSupportedPropertiesTest ( true , true , null , null ) ; org.junit.Assert . assertThat ( validator . passthroughProfileContainsSupportedProperties ( false ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES ) ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.common.widget.action.SubTabTreeActionPanel createActionPanel ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider modelProvider ) { return new org.ovirt.engine.ui.common.widget.action.SubTabTreeActionPanel < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( modelProvider , org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider . getEventBus () ) ; }
public static boolean hasCdDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( org.ovirt.engine.core.bll.utils.VmDeviceUtils . getCdDevices ( vmId ) . isEmpty () ) ; }
@ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue () : NUMBER_CONSTANT ; }
public java.lang.Object call ( ) throws java.lang.Exception { _parser . cliInstall () ; return null ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createNetworkParametersMapper ( org.ovirt.engine.core.compat.Guid vfsConfigId , org.ovirt.engine.core.compat.Guid networkId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , vfsConfigId ) . addValue ( STRING_CONSTANT , networkId ) ; return parameterSource ; }
private java.lang.String removeStorageServerConnection ( org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx , org.ovirt.engine.core.compat.Guid hostId ) { return performAction ( VdcActionType.RemoveStorageServerConnection , new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( cnx , hostId ) , java.lang.String . class ) ; }
public static java.lang.String getDisplayStringForPluginName ( java.lang.String pluginName ) { try { return org.ovirt.engine.ui.uicompat.EnumTranslator . createAndTranslate ( org.ovirt.engine.core.common.businessentities.OpenstackNetworkPluginType . valueOf ( pluginName ) ) ; } catch ( java.lang.IllegalArgumentException e ) { return pluginName ; } }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > externalVmModel ) { return toCellString ( externalVmModel ) ; }
private void verifyCertificate ( org.ovirt.engine.api.model.Vm model ) { assertNotNull ( model . getDisplay () ) ; assertNotNull ( model . getDisplay () . getCertificate () ) ; assertEquals ( model . getDisplay () . getCertificate () . getSubject () , org.ovirt.engine.api.restapi.resource.BackendVmResourceTest.CERTIFICATE ) ; }
@ java.lang.Override public void execute () { enforceScrollPosition () ; doAutoSelect = true ; }
@ java.lang.Override public org.ovirt.engine.api.model.StorageConnectionExtension update ( org.ovirt.engine.api.model.StorageConnectionExtension incoming ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionExtensionById , org.ovirt.engine.core.common.queries.IdQueryParameters . class ) ; return performUpdate ( incoming , resolver , VdcActionType.UpdateStorageServerConnectionExtension , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionResource.UpdateParametersProvider () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public org.ovirt.vdsm.jsonrpc.client.RequestBuilder withOptionalParameterAsList ( java.lang.String name , java.util.List value ) { if ( ( value != null ) && ( value . isEmpty () ) ) { return withParameter ( name , value ) ; } return this ; }
@ java.lang.Deprecated public static void RunPublicQuery ( final org.ovirt.engine.core.common.queries.VdcQueryType queryType , final org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.Frontend . getInstance () . runPublicQuery ( queryType , parameters , callback ) ; }
public static void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter () { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () , aQuery ) ; }
@ java.lang.Override protected java.lang.String composeRegex () { return ( ( start () ) + ( acceptEmptyInput ? hostnameOrIpOrEmpty () : hostnameOrIp () ) ) + ( end () ) ; }
public static org.ovirt.engine.core.compat.Guid RegisterQuery ( org.ovirt.engine.core.common.queries.VdcQueryType getallbookmarks , org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase , org.ovirt.engine.core.compat.RefObject < org.ovirt.engine.core.compat.ObservableCollection < org.ovirt.engine.core.common.businessentities.IVdcQueryable > > tempRefObject ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( STRING_CONSTANT ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.Watchdog update ( org.ovirt.engine.api.model.Watchdog watchdog ) { validateEnums ( org.ovirt.engine.api.model.Watchdog . class , watchdog ) ; return performUpdate ( watchdog , new org.ovirt.engine.api.restapi.resource.BackendVmWatchdogResource.WatchdogResolver () , VdcActionType.UpdateWatchdog , new org.ovirt.engine.api.restapi.resource.BackendVmWatchdogResource.UpdateParametersProvider () ) ; }
@ java.lang.Override public java.util.SortedSet < java.lang.String > convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.SortedSet < java.lang.String > sortedSet = new java.util.TreeSet ( new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator () ) ; sortedSet . addAll ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; return sortedSet ; }
private void setUpParentMock ( org.ovirt.engine.api.restapi.resource.BackendHostsResource parent ) { parent . setBackend ( backend ) ; parent . setMappingLocator ( mapperLocator ) ; parent . setValidatorLocator ( validatorLocator ) ; parent . setMessageBundle ( messageBundle ) ; parent . setHttpHeaders ( httpHeaders ) ; }
@ java.lang.Override protected void endSuccessfully () { removeImage ( org.ovirt.engine.core.bll.MoveImageGroupCommand . getParameters () . getSourceDomainId () . getValue () ) ; super . endSuccessfully () ; }
public static boolean isImagesExists ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > images , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { return org.ovirt.engine.core.bll.ImagesHandler . isImagesExists ( images , storagePoolId , storageDomainId , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > () ) ; }
@ java.lang.Override public T get ( ID id ) { return org.ovirt.engine.core.dao.DefaultReadDao . getCallsHandler () . executeRead ( getProcedureNameForGet () , createEntityRowMapper () , createIdParameterMapper ( id ) ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase eval ( org.ovirt.engine.core.common.businessentities.VmStatic vm ) { org.ovirt.engine.core.common.action.MigrateVmToServerParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmToServerParameters ( false , vm . getId () , vdsId ) ; parameters . setShouldBeLogged ( false ) ; return parameters ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllForVm ( org.ovirt.engine.core.compat.Guid id ) { return getAllForVm ( id , null , false ) ; }
@ org.junit.Before public void setup () { validator = new org.ovirt.engine.core.bll.validator.UpgradeHostValidator ( host ) ; }
@ java.lang.Override protected void beforeTask () { org.ovirt.engine.core.bll.ImagesHandler . updateImageStatus ( getEnclosingCommand () . getParameters () . getDestinationImageId () , ImageStatus.LOCKED ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid . NewGuid () , name , true , null , null , networkName ) ; }
@ java.lang.Override protected void beforeLogin ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel loginModel ) { org.ovirt.engine.ui.userportal.uicommon.model.UserPortalModelInitEvent . fire ( eventBus ) ; }
@ org.junit.Test public void moveDiskToGluster () { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initSrcStorageDomain () ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( false ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setProviders ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDataCenterList ( dcQuery ) ; }
public static synchronized boolean isImageDomain ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { org.ovirt.engine.api.model.StorageDomainType type = org.ovirt.engine.api.model.StorageDomainType . fromValue ( storageDomain . getType () ) ; return ( type != null ) && ( type == ( org.ovirt.engine.api.model.StorageDomainType.IMAGE ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid . newGuid () , name , true , null , null , networkName , true , null , false , null ) ; }
@ org.junit.Test public void validateFailsOnNull () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.StopGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( null , null ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < P > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkFilter resolveVnicProfileDefaultNetworkFilter ( org.ovirt.engine.core.dao.network.NetworkFilterDao networkFilterDao ) { if ( org.ovirt.engine.core.common.config.Config . < java.lang.Boolean > getValue ( ConfigValues.EnableMACAntiSpoofingFilterRules ) ) { return networkFilterDao . getNetworkFilterByName ( NetworkFilter.VDSM_NO_MAC_SPOOFING ) ; } return null ; }
private void mockDaos () { mockDiskImageDao () ; mockStorageDomainDao () ; mockStoragePoolDao () ; mockDynamicVmDao () ; org.mockito.Mockito . doReturn ( snapshotDao ) . when ( spyCommand ) . getSnapshotDao () ; }
@ org.junit.Test public void interfaceBasedOnNullProposedVlan () { org.junit.Assert . assertFalse ( org.ovirt.engine.core.utils.NetworkUtils . interfaceBasedOn ( ( ( java.lang.String ) ( null ) ) , org.ovirt.engine.core.utils.NetworkUtilsTest.IFACE_NAME ) ) ; }
public void setDiskStorageMap ( java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > > value ) { diskStorageMap = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public int hashCode () { return vm . hashCode () ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentResourceTest . setUpBasicUriExpectations () ) ; setUpEntityQueryExpectations ( NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; control . replay () ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
public void CancelConfirmWithFocus () { setConfirmWindow ( null ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( getWindow () ) ) ; hostModel . setIsPowerManagementTabSelected ( true ) ; hostModel . getIsPm () . setEntity ( true ) ; }
@ org.ovirt.engine.ui.webadmin.Template ( value = STRING_CONSTANT ) com.google.gwt.safehtml.shared.SafeHtml statusWithAlertTemplate ( com.google.gwt.safehtml.shared.SafeHtml statusImage , com.google.gwt.safehtml.shared.SafeHtml alertImage ) ;
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = dbFacade . getVdsDao () ; existingVds = dao . get ( FixturesTool.HOST_ID ) ; existingVds2 = dao . get ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; newVmId = org.ovirt.engine.core.compat.Guid . newGuid () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel externalDiscoveredHostsListModel = getExternalDiscoveredHosts () ; externalDiscoveredHostsListModel . setItems ( hosts ) ; externalDiscoveredHostsListModel . setIsChangeable ( true ) ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.NetworkView object ) { return ( object . getProvidedBy () ) == null ? STRING_CONSTANT : object . getProviderName () ; }
protected void proceedProxyReturnValue () { if ( isRefreshStoragePool () ) { super . proceedProxyReturnValue () ; } else { proceedConnectProxyReturnValue () ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.DbUser > getAllWithQuery ( java.lang.String query ) { return new org.springframework.jdbc.core.simple.SimpleJdbcTemplate ( jdbcTemplate ) . query ( query , org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserRowMapper.instance ) ; }
@ org.junit.Test public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn () { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomainForDisk ( StorageType.ISCSI ) ; disk . setWipeAfterDelete ( true ) ; storageDomain . setSupportsDiscardZeroesData ( false ) ; org.junit.Assert . assertThat ( validator . isSparsifySupported () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED ) ) ; }
protected void updateIteration () { refreshIteration = ( ( refreshIteration ) ++ ) % ( org.ovirt.engine.core.vdsbroker.VMStatsRefresher.NUMBER_VMS_REFRESHES_BEFORE_SAVE ) ; }
@ org.ovirt.engine.ui.common.widget.table.cell.Template ( value = STRING_CONSTANT + STRING_CONSTANT ) com.google.gwt.safehtml.shared.SafeHtml input ( java.lang.String value , java.lang.String customStyle ) ;
@ org.junit.AfterClass public static void cleanUp () { if ( ( org.ovirt.engine.core.uutils.ssh.TransferTest.local1 ) != null ) { if ( ! ( org.ovirt.engine.core.uutils.ssh.TransferTest.local1 . delete () ) ) {} org.ovirt.engine.core.uutils.ssh.TransferTest.local1 = null ; } org.ovirt.engine.core.uutils.ssh.TestCommon . terminate () ; }
@ org.junit.Test public void testValidateVmUpHostCapable () { prepareForVmValidatorTests () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmHostCanLiveMerge () ; cmd . getVm () . setStatus ( VMStatus.Up ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
private static void raiseQueryCompleteEvent ( final org.ovirt.engine.core.common.queries.VdcQueryType queryType , final java.lang.String context ) { org.ovirt.engine.ui.frontend.Frontend . raiseQueryEvent ( org.ovirt.engine.ui.frontend.Frontend . getQueryCompleteEvent () , queryType , context ) ; }
@ java.lang.Override public void update ( int index , org.ovirt.engine.core.common.businessentities.Quota quota , java.lang.String value ) { transitionHandler . handlePlaceTransition () ; }
private void init () { org.ovirt.engine.core.dal.dbbroker.DbFacade.log . info ( STRING_CONSTANT ) ; dbFacadeLocator . configure ( this ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.instance = this ; }
@ org.junit.Test public void testGetWindowsOss ( ) throws java.lang.Exception { org.junit.Assert . assertTrue ( ( ( OsRepositoryImpl.INSTANCE . getWindowsOss () . size () ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.VM result ) { editedVm = result ; vmInitLoaded ( editedVm ) ; }
@ java.lang.Override public void onSuccess ( final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger . finer ( STRING_CONSTANT ) ; callback . getDel () . onSuccess ( callback . getModel () , result ) ; }
@ org.junit.Test public void areAllVfsFreeFalseAttachedToVm () { freeVfCommon ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; org.junit.Assert . assertFalse ( networkDeviceHelper . areAllVfsFree ( nic ) ) ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.VM object ) { return null ; }
public void onAcccept ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorListener listener , org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client ) ;
public static boolean isMemorySizeLegal ( int osId , int memSizeInMB , org.ovirt.engine.core.compat.Version clusterVersion ) { return ( memSizeInMB >= ( org.ovirt.engine.core.bll.validator.VmValidationUtils . getMinMemorySizeInMb ( osId , clusterVersion ) ) ) && ( memSizeInMB <= ( org.ovirt.engine.core.bll.validator.VmValidationUtils . getMaxMemorySizeInMb ( osId , clusterVersion ) ) ) ; }
@ java.lang.Override public void setStatus ( org.ovirt.engine.core.common.businessentities.VDSStatus value ) { status = value . getValue () ; }
private org.gwtbootstrap3.client.ui.Anchor createTextAnchor ( java.lang.String title ) { return createTextAnchor ( title , null ) ; }
private org.ovirt.engine.core.common.osinfo.OsRepository getOsRepository () { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector . getInstance () . get ( org.ovirt.engine.core.common.osinfo.OsRepository . class ) ; }
protected M getMainModel () { return mainModelProvider . get () ; }
protected java.util.List < org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData > getPluginData () { java.util.List < org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData > currentData = new java.util.ArrayList < org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData > ( org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginDataManager . getInstance () . reloadAndGetCurrentData () ) ; java.util.Collections . sort ( currentData ) ; return currentData ; }
public void setName ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils . objectsEqual ( name , value ) ) ) { name = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
private void setUpParentMock ( org.ovirt.engine.api.restapi.resource.BackendHostsResource parent ) { parent . setBackend ( backend ) ; parent . setMappingLocator ( mapperLocator ) ; parent . setMessageBundle ( messageBundle ) ; parent . setHttpHeaders ( httpHeaders ) ; }
@ org.junit.Test public void testVmFailNoDisks () { org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > () ) , false , VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK ) ; }
private void mockStorageDomainValidator () { org.mockito.Mockito . doReturn ( storageDomainValidator ) . when ( command ) . getStorageDomainValidator ( org.mockito.ArgumentMatchers . any () ) ; org.mockito.Mockito . when ( storageDomainValidator . isDomainExistAndActive () ) . thenReturn ( ValidationResult.VALID ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.StorageDomains list () { if ( isFiltered () ) return mapCollection ( getBackendCollection ( VdcQueryType.GetAllStorageDomains , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () ) ) ; else return mapCollection ( getBackendCollection ( SearchType.StorageDomain ) ) ; }
private org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters buildRemoveMemoryVolumesParameters ( java.lang.String memoryState , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters params = new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters ( memoryState , vmId ) ; params . setEntityInfo ( org.ovirt.engine.core.bll.RemoveVmCommand . getParameters () . getEntityInfo () ) ; return params ; }
protected boolean shouldRemoveMemorySnapshotVolumes ( java.lang.String memoryVolume ) { return ( ! ( memoryVolume . isEmpty () ) ) && ( ( getDbFacade () . getSnapshotDao () . getNumOfSnapshotsByMemory ( memoryVolume ) ) == NUMBER_CONSTANT ) ; }
@ java.lang.Override protected java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > getExclusiveLocks () { return java.util.Collections . singletonMap ( getAdUserId () , getClass () . getName () ) ; }
@ java.lang.Override protected void initSelectedType () { getNicType () . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDefaultNicType ( getNicType () . getItems () ) ) ; }
@ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.Disk disk ) { return disk . isWipeAfterDelete () ; }
private void assertDbWasCalled ( int expectedNumOfCalls ) { org.junit.Assert . assertTrue ( java.lang.String . format ( org.ovirt.engine.core.bll.quota.QuotaManagerTest.EXPECTED_NUMBER_OF_DB_CALLS , expectedNumOfCalls , dbCalls ) , ( expectedNumOfCalls == ( dbCalls ) ) ) ; dbCalls = NUMBER_CONSTANT ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLunsForVgId ( java.lang.String vgId ) { return org.ovirt.engine.core.bll.storage.disk.lun.GetLunsByVgIdQuery . getDbFacade () . getLunDao () . getAllForVolumeGroup ( getVgId () ) ; }
@ java.lang.Override protected void beforeLogin ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel loginModel ) { org.ovirt.engine.ui.userportal.uicommon.model.UserPortalModelInitEvent . fire ( eventBus ) ; org.ovirt.engine.ui.common.uicommon.model.ModelInitializedEvent . fire ( eventBus ) ; }
private java.lang.Runnable pendingOperations ( ) throws java.io.IOException { if ( ( nioEngine ) == null ) { return null ; } return nioEngine . process () ; }
private void updateActionAvailability () { org.ovirt.engine.core.common.businessentities.DiskImage disk = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getEntity () ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond () { return createVdsInterface ( STRING_CONSTANT , true , null , org.ovirt.engine.core.utils.RandomUtils . instance () . nextString ( NUMBER_CONSTANT ) , null , null , null ) ; }
@ org.junit.Test public void testRestore () { setUriInfo ( setUpBasicUriExpectations () ) ; setUpTryBackExpectations () ; setUpRestoreExpectations () ; control . replay () ; resource . restore ( new org.ovirt.engine.api.model.Action () ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider getHostProvider () { return org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getProviderDao () . get ( org.ovirt.engine.core.bll.AddVdsCommand . getParameters () . getProviderId () ) ; }
@ java.lang.Override protected java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > getExclusiveLocks () { return java.util.Collections . singletonMap ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand . getVmId () , LockingGroup.VM . name () ) ; }
public void setKsmState ( java.lang.Boolean value ) { this . ksmState = value ; }
@ org.junit.Test public void testCleanNotExpiredUsersSessionsNoUsers () { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container . cleanExpiredUsersSessions () ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.mockito.Mockito . verifyZeroInteractions ( dbUserDAOMcok ) ; }
@ javax.ws.rs.GET public org.ovirt.engine.api.v3.types.V3Disk get () { org.ovirt.engine.api.v3.types.V3Disk disk = adaptGet ( getDelegate () : : get ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper . fixDiskLinks ( vmId , disk ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper . addDiskAttachmentDetails ( vmId , java.util.Collections . singletonList ( disk ) ) ; return disk ; }
void runMultipleActionFailed ( org.ovirt.engine.core.common.action.VdcActionType action , java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValues , java.util.List < org.ovirt.engine.core.common.errors.VdcFault > faults ) ;
private void verifyRunActionAndExecuteCallbacksRandomly ( boolean success , org.ovirt.engine.ui.uicommonweb.action.UiAction.ActionFlowState flowState , int exepectedNumOfRunActionExecutions , boolean waitForResult ) { verifyRunActionAndExecuteCallbacksRandomly ( success , flowState , exepectedNumOfRunActionExecutions , exepectedNumOfRunActionExecutions , waitForResult ) ; }
@ java.lang.Override public int hashCode () { return java.util.Objects . hash ( id , device , type , address , bootOrder , specParams , isManaged , isPlugged , getIsReadOnly () , alias , customProperties , snapshotId , logicalName , hostDevice ) ; }
@ org.junit.Test public void formatStringTest2 () { testMessages . addFallback ( DynamicMessageKey.APPLICATION_TITLE , STRING_CONSTANT ) ; java.lang.String result = testMessages . formatString ( DynamicMessageKey.APPLICATION_TITLE , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , STRING_CONSTANT , result ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface . getId () , iface . getName () , false , bondName , null , null ) ; }
@ java.lang.Override public void updateRunButton ( org.ovirt.engine.ui.uicommonweb.UICommand command , boolean isPool ) { java.lang.String tooltip = ( isPool ) ? org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants . takeVm () : org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants . runVm () ; runButton . setTooltip ( com.google.gwt.safehtml.shared.SafeHtmlUtils . fromSafeConstant ( tooltip ) ) ; updateButton ( runButton , command ) ; }
@ java.lang.Override public org.ovirt.engine.core.compat.Guid getVmId () { if ( getParameters () . isImportAsNewEntity () ) { return getParameters () . getVm () . getId () ; } else { return super . getVmId () ; } }
private void edit () { if ( ( getWindow () ) != null ) { return; } setWindow ( new org.ovirt.engine.ui.uicommonweb.models.providers.EditProviderModel ( this , ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( getSelectedItem () ) ) ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { timeZoneEditor . setEnabled ( ( ( java.lang.Boolean ) ( model . getTimeZoneEnabled () . getEntity () ) ) ) ; }
@ org.junit.Test public void canDoActionSucceeds () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert . assertTrue ( cmd . canDoAction () ) ; }
protected javax.ws.rs.core.Response performAction ( org.ovirt.engine.core.common.action.VdcActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { return performAction ( task , params , ( ( org.ovirt.engine.api.model.Action ) ( null ) ) ) ; }
protected < T > org.springframework.jdbc.core.simple.SimpleJdbcCall getCall ( java.lang.String procedureName , org.ovirt.engine.core.dal.dbbroker.SimpleJdbcCallsHandler.CallCreator callCreator ) { return getCall ( procedureName , callCreator , null ) ; }
@ org.junit.Test public void supportsHostedEngineDeploy () { org.mockito.Mockito . when ( hostedEngineHelper . isVmManaged () ) . thenReturn ( true ) ; mockCluster ( Version.v4_0 ) ; org.junit.Assert . assertThat ( validator . supportsDeployingHostedEngine ( new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration ( HostedEngineDeployConfiguration.Action.DEPLOY ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ org.junit.Test public void canRunVmPassStatelessWhenVmHAwithNullStatelessParam () { org.ovirt.engine.core.bll.RunVmCommandTest . canRunStatelessVmTest ( true , false , null , true ) ; }
public void overrideEngineManagedAttributes ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface sourceNic ) { setLabels ( sourceNic . getLabels () ) ; setCustomProperties ( sourceNic . getCustomProperties () ) ; }
@ org.junit.Test public void testValidateImageLocked () { getDiskImage () . setImageStatus ( ImageStatus.LOCKED ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED ) ; }
@ java.lang.Override protected org.ovirt.engine.core.dao.DiskLunMapDao prepareDao () { return prepareDAO ( dbFacade . getDiskLunMapDao () ) ; }
public void shutdown () { this . pool . getConnectionManager () . shutdown () ; }
@ java.lang.Override public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.aaa.ProfileEntry ) ( object ) ) . toString () ; }
@ org.junit.Test public void testGetAllAttachableDisksByPoolIdNull () { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > result = dao . getAllAttachableDisksByPoolId ( null , null , false ) ; org.ovirt.engine.core.dao.DiskDaoTest . assertFullGetAllAttachableDisksByPoolId ( result ) ; }
@ org.junit.Before public void setupMock () { org.mockito.Mockito . doReturn ( geoRepUtil ) . when ( getQuery () ) . getGeoRepUtilInstance () ; baseTest . setupMock ( geoRepUtil , geoRepDao , clusterDao ) ; }
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( asList ( getEntity ( NUMBER_CONSTANT ) ) ) ; control . replay () ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
private void updateController () { this . controller = modelProvider . getModel () ; updateTimer () ; }
private void mockVds () { mockIsValidVdsCommand () ; mockGetImageDomainsListVdsCommand ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue createVDSReturnValue ( org.ovirt.engine.core.compat.Guid serverId , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > serverServices ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue () ; ret . setSucceeded ( true ) ; ret . setReturnValue ( serverServices ) ; return ret ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setProviders ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDataCenterList ( dcQuery ) ; }
@ java.lang.Override public org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient createClient ( org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor , java.nio.channels.Selector selector , java.lang.String hostname , int port , org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient.CertCallback certCallback ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { return new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClient ( reactor , selector , hostname , port , this . sslContext , certCallback ) ; }
private org.ovirt.engine.core.common.utils.Pair < T , V > addGhostEntry () { T value = createGhostValue () ; V widget = addEntry ( value ) ; return new org.ovirt.engine.core.common.utils.Pair < T , V > ( value , widget ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addDiskDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , java.lang.Boolean isPlugged , java.lang.Boolean isReadOnly , boolean isUsingScsiReservation ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils . addDiskDevice ( vmId , deviceId , isPlugged , isReadOnly , STRING_CONSTANT , isUsingScsiReservation ) ; }
private void initCommand () { org.mockito.Mockito . doReturn ( executor ) . when ( command ) . createHostFenceActionExecutor ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.VDS . class ) , org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.FencingPolicy . class ) ) ; command . setClusterId ( org.ovirt.engine.core.bll.pm.StartVdsCommandTest.FENCECD_HOST_CLUSTER_ID ) ; }
protected org.ovirt.engine.core.common.businessentities.Cluster getCluster () { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster . class , VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , clusterId ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.webadmin.widget.storage.TemplatesTree < org.ovirt.engine.ui.uicommonweb.models.quota.QuotaTemplateListModel > getTree () { return new org.ovirt.engine.ui.webadmin.widget.storage.TemplatesTree < org.ovirt.engine.ui.uicommonweb.models.quota.QuotaTemplateListModel > ( resources , constants , templates ) ; }
protected boolean validateUniqueVmName () { return org.ovirt.engine.core.bll.VmHandler . isVmWithSameNameExistStatic ( org.ovirt.engine.core.bll.ImportVmCommandBase . getVm () . getName () , org.ovirt.engine.core.bll.ImportVmCommandBase . getStoragePoolId () ) ? failValidation ( EngineMessage.VM_CANNOT_IMPORT_VM_NAME_EXISTS ) : true ; }
@ java.lang.Override protected void configure () { super . configure () ; bind ( org.ovirt.engine.ui.webadmin.widget.tab.WebadminMenuLayout . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.common.widget.tab.MenuLayout . class ) . in ( com.google.inject.Singleton . class ) ; bind ( org.ovirt.engine.ui.webadmin.section.main.presenter.SearchStringCollector . class ) . asEagerSingleton () ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createBond ( java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid . NewGuid () , STRING_CONSTANT , true , null , null , networkName ) ; }
public boolean isCrossReferece ( java.lang.String text , java.lang.String obj ) { org.ovirt.engine.core.searchbackend.IAutoCompleter completer = getCrossRefAutoCompleter ( obj ) ; boolean retval = false ; if ( completer != null ) { retval = completer . validate ( text ) ; } return retval ; }
@ org.junit.Test public void testEmptyDisksUsages () { java.lang.Object [] disksUsages = new java.lang.Object [ NUMBER_CONSTANT ] ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . setDisksUsageInXmlRpc ( disksUsages ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest . validateDisksUsagesList ( getVmStatistics () , disksUsages , xml ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > searchStoragePool () { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery . getDbFacade () . getStoragePoolDao () , true , null ) ; }
@ org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenEmptyStorageGuidInParams ( ) throws java.lang.Exception { initializeCommand ( Guid.Empty ) ; org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid . NewGuid () ; mockVmWithDisk ( storageId ) ; mockVmNetworks () ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap () ; runAndAssertCanDoActionSuccess () ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.businessentities.aaa.DbUser userToLogoff ) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.VdcActionParametersBase () ; params . setSessionId ( getEngineSessionId () ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend () . logoff ( params ) ; return returnValue ; }
@ java.lang.Override protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > GetTagsAttachedToObject () { return org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getTagDAO () . getAllForVm ( org.ovirt.engine.core.bll.VmCommand . getParameters () . getVmId () . toString () ) ; }
protected boolean validateVmArchitecture () { return ( org.ovirt.engine.core.bll.ImportVmCommandBase . getVm () . getClusterArch () ) == ( org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ) ? failValidation ( EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_WITH_NOT_SUPPORTED_ARCHITECTURE ) : true ; }
@ java.lang.Override public void saveJob ( final org.ovirt.engine.core.common.job.Job job ) { org.ovirt.engine.core.utils.transaction.TransactionSupport . executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > () { @ java.lang.Override public java.lang.Void runInTransaction () { jobDao . save ( job ) ; return null ; } } ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setAllowClusterWithVirtGlusterEnabled ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > getTaskStatuses () { java.util.List < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > ret = new java.util.ArrayList <> () ; ret . add ( getTaskStatus ( NUMBER_CONSTANT ) ) ; ret . add ( getTaskStatus ( NUMBER_CONSTANT ) ) ; return ret ; }
private void stubDaos () { mockVmDynamic () ; mockVmStatic ( true ) ; mockVdsDao () ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.VDS host , org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { resourceManager . getEventListener () . vdsNonOperational ( host . getId () , reason , true , Guid.Empty , customLogValues ) ; }
@ org.junit.Test public void clusterAlreadyInLocalFs () { createCommandWithDefaultVdsGroup () ; oldGroupIsDetachedDefault () ; storagePoolIsLocalFS () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuExists () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuManufacturersMatch () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . clusterVersionIsSupported () ; allQueriesEmpty () ; storagePoolAlreadyHasCluster () ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { linuxOsIds = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ; }
public static void updateAllDiskImageSnapshotsStatusWithCompensation ( final org.ovirt.engine.core.compat.Guid diskId , final org.ovirt.engine.core.common.businessentities.storage.ImageStatus status , org.ovirt.engine.core.common.businessentities.storage.ImageStatus statusForCompensation , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( java.util.Collections . singletonList ( diskId ) , status , statusForCompensation , compensationContext ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Host deprecatedPopulate ( org.ovirt.engine.api.model.Host model , org.ovirt.engine.core.common.businessentities.VDS entity ) { parent . addStatistics ( model , entity ) ; parent . addCertificateInfo ( model ) ; return model ; }
private void canDetachDomain () { org.mockito.Mockito . doReturn ( true ) . when ( cmd ) . isDetachAllowed ( org.mockito.ArgumentMatchers . anyBoolean () ) ; }
@ org.junit.Test public void testGetValue () { java.lang.System.out . println ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( ( STRING_CONSTANT + ( value ) ) , value . ordinal () , value . getValue () ) ; }
public static boolean isMixedStorageDomainsSupported ( org.ovirt.engine.core.compat.Version version ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.MixedDomainTypesInDataCenter , version . toString () ) ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { defaultOSes = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; }
public void setvm_name ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper . EqOp ( this . mVmStatic . getvm_name () , value ) ) ) { this . mVmStatic . setvm_name ( value ) ; } }
public org.ovirt.engine.ui.uicommonweb.models.ListModel flush () { return driver . flush () ; }
public org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Bond > getBackendHostBonds () { java.util.List < org.ovirt.engine.core.common.businessentities.network.Bond > backendBonds = getBackendCollection ( org.ovirt.engine.core.common.businessentities.network.Bond . class , VdcQueryType.GetHostBondsByHostId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; return new org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Bond > ( backendBonds ) ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String . valueOf ( object . getDiskList () . size () ) ; }
public void setStartTime ( java.util.Date startTime ) { this . startTime = startTime ; if ( ( this . totalMigrationTime ) == null ) { this . totalMigrationTime = this . startTime ; } }
@ java.lang.Override protected void onReset () { super . onReset () ; clearSelection () ; if ( ( org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter . getView () . getTable () ) != null ) { org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter . getView () . getTable () . resetScrollPosition () ; } }
@ java.lang.Override public boolean equals ( java.lang.Object obj ) { return ( ( org.ovirt.engine.core.common.businessentities.Disk ) ( obj ) ) . isWipeAfterDelete () ; }
@ java.lang.Override protected void createQosWidget () { qosWidget = new org.ovirt.engine.ui.webadmin.section.main.view.popup.qos.CpuQosWidget ( constants ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = getNonReadOnlyExternalNetworkProviders ( result ) ; getExternalProviders () . setItems ( providers ) ; selectExternalProvider () ; }
@ org.junit.Test public void testGet () { setUriInfo ( setUpBasicUriExpectations () ) ; resource . setParent ( getCollectionResourceMock () ) ; control . replay () ; org.ovirt.engine.api.model.Hook hook = resource . get () ; assertEquals ( hook . getEventName () , org.ovirt.engine.api.restapi.resource.BackendHostHookResourceTest.EVENT_2_NAME ) ; }
@ org.junit.Test public void testGetClusterByClusterPolicyIdNegative () { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao . getClustersByClusterPolicyId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.junit.Assert . assertTrue ( ( ( result == null ) || ( ( result . size () ) == NUMBER_CONSTANT ) ) ) ; }
private void updateIsLiveMergeSupported ( java.lang.Object entity ) { if ( entity == null ) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( entity ) ) ; setLiveMergeSupported ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . isLiveMergeSupported ( vm ) ) ; }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitectureFromItem ( java.lang.Object item ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( item ) ) ; return vm . getClusterArch () ; }
void setTooltipText ( java.lang.String tooltipText ) { tooltip . setText ( tooltipText ) ; tooltip . reconfigure () ; }
@ org.junit.Test public void testGetStorageTypesInPoolForMixedTypes () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageType > expectedTypes = java.util.Arrays . asList () ; org.ovirt.engine.core.compat.Guid poolId = FixturesTool.STORAGE_POOL_MIXED_TYPES ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageType > storageTypes = dao . getStorageTypesInPool ( poolId ) ; assertStorageTypes ( storageTypes , StorageType.POSIXFS , StorageType.NFS , StorageType.ISCSI ) ; }
protected java.util.Set < java.lang.String > removeVmSnapshots () { return new org.ovirt.engine.core.bll.snapshots.SnapshotsManager () . removeSnapshots ( org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; }
@ java.lang.Override public javax.ws.rs.core.Response detach ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.RemoveVmFromPool , new org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters ( guid ) , action ) ; }
@ java.lang.Override public java.lang.String mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { java.lang.String content = rs . getString ( NUMBER_CONSTANT ) ; return content ; }
org.ovirt.engine.ui.webadmin.widget.host.VLanPanel createVLanPanel ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel ) { org.ovirt.engine.ui.webadmin.widget.host.VLanPanel panel = new org.ovirt.engine.ui.webadmin.widget.host.VLanPanel () ; panel . setWidth ( STRING_CONSTANT ) ; panel . setHeight ( STRING_CONSTANT ) ; panel . addVLans ( lineModel ) ; addClickHandlerToPanel ( panel , lineModel ) ; return panel ; }
@ org.ovirt.engine.ui.webadmin.Template ( value = STRING_CONSTANT ) com.google.gwt.safehtml.shared.SafeHtml volumeActivityMenu ( com.google.gwt.safehtml.shared.SafeHtml statusImage ) ;
private java.util.List < org.ovirt.engine.core.common.businessentities.ExternalOperatingSystem > getOperationSystems () { org.apache.commons.httpclient.HttpMethod method = new org.apache.commons.httpclient.methods.GetMethod ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.OPERATION_SYSTEM_QUERY ) ; return runOperationSystemMethod ( method ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = prepareDAO ( dbFacade . getLunDao () ) ; existingLUN = dao . get ( STRING_CONSTANT ) ; newLUN = new org.ovirt.engine.core.common.businessentities.LUNs () ; newLUN . setLUN_id ( STRING_CONSTANT ) ; }
@ org.junit.Test public void sufficientDiskSpace () { final int extraDiskSpaceRequired = NUMBER_CONSTANT ; final int diskSpacePct = NUMBER_CONSTANT ; final org.ovirt.engine.core.bll.ImportVmCommand c = setupDiskSpaceTest ( extraDiskSpaceRequired , diskSpacePct ) ; org.junit.Assert . assertTrue ( c . canDoAction () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase ) ( target ) ) ; behavior . setMaxVmsInPool ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; behavior . updateMaxNumOfVmCpus () ; }
@ java.lang.Override protected org.ovirt.engine.core.common.action.ProfileParametersBase < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > getParameters () { return new org.ovirt.engine.core.common.action.DiskProfileParameters ( getProfile () , getProfile () . getId () ) ; }
public void setErrataDetailPanelVisibilty ( boolean visible ) { splitLayoutPanel . setWidgetHidden ( errataDetailPanel , ( ! visible ) ) ; com.google.gwt.core.client.Scheduler . get () . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand () { @ java.lang.Override public void execute () { errataTableView . onResize () ; } } ) ; }
@ java.lang.Override public void cleanup () { driver . cleanup () ; }
protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable < T > createActionTable () { return new org.ovirt.engine.ui.userportal.widget.table.column.UserPortalSimpleActionTable < T > ( modelProvider , getTableResources () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . instance () . getEventBus () , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider . instance () . getClientStorage () ) ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB , final int sizeRequired ) { mockVmTemplateDaoReturnVmTemplate () ; mockDiskImageDaoGetSnapshotById () ; mockStorageDomainDaoGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDaoGet ( domainSizeGB ) ; mockConfig () ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest . createVm () ; return vm ; }
public static org.ovirt.engine.core.utils.customprop.VmPropertiesUtils getInstance () { if ( ( org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.vmPropertiesUtils ) == null ) { synchronized ( org.ovirt.engine.core.utils.customprop.VmPropertiesUtils . class ) { if ( ( org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.vmPropertiesUtils ) == null ) { org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.vmPropertiesUtils = new org.ovirt.engine.core.utils.customprop.VmPropertiesUtils () ; } } } return org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.vmPropertiesUtils ; }
public void showStatus ( java.lang.String status ) { if ( refreshManager . getModelTimer () . isActive () ) { setTitle ( status ) ; } }
protected abstract R doPopulate ( R model , Q entity ) ;
private org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters buildRemoveVmFromPoolParameters () { org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters parameters = new org.ovirt.engine.core.common.action.RemoveVmFromPoolParameters ( org.ovirt.engine.core.bll.UpdateVmVersionCommand . getVmId () , false ) ; parameters . setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; return parameters ; }
private org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel.ClientConsoleMode readDefaultConsoleClientMode () { try { return org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel.ClientConsoleMode . valueOf ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.ClientModeVncDefault ) ) ) ) ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel.ClientConsoleMode.Native ; } }
@ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.VM result ) { org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel runOnceModel = new org.ovirt.engine.ui.uicommonweb.models.vms.WebadminRunOnceModel ( result , this ) ; setWindow ( runOnceModel ) ; runOnceModel . init () ; }
protected java.lang.String getDefaultDomain () { return org.ovirt.engine.core.aaa.AuthzUtils . getName ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository . getInstance () . getProfiles () . get ( NUMBER_CONSTANT ) . getAuthz () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { customPropertiesList = ( ( java.util.Map < org.ovirt.engine.core.compat.Version , java.util.Map < java.lang.String , java.lang.String > > ) ( returnValue ) ) ; }
@ org.junit.Test public void diskImagesAlreadyExistBothDoesntExist () { org.mockito.Mockito . doReturn ( null ) . when ( validator ) . getExistingDisk ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.junit.Assert . assertThat ( validator . diskImagesAlreadyExist () , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getDeviceList ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { return getEntity ( java.util.List . class , QueryType.GetDeviceList , new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters ( hostId , storageType , false , null ) , STRING_CONSTANT , true ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > pmTypes = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; updatePmTypeList ( pmTypes ) ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( org.ovirt.engine.core.searchbackend.StringHelper . EqOp ( fieldName , STRING_CONSTANT ) ) { return StringOnlyEqualConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
private org.ovirt.engine.core.common.utils.Pair < T , K > getPair () { if ( ( pair ) == null ) { pair = new org.ovirt.engine.core.common.utils.Pair < T , K > ( null , null ) ; } return pair ; }
@ java.lang.Override public void clearBuff () { this . nioEngine . clearBuff () ; outbox . clear () ; }
@ java.lang.Override public java.util.Set < java.lang.String > getAllNetworkLabelsForDataCenter ( org.ovirt.engine.core.compat.Guid id ) { return new java.util.HashSet ( getCallsHandler () . executeReadList ( STRING_CONSTANT , new org.springframework.jdbc.core.SingleColumnRowMapper < java.lang.String > () , createIdParameterMapper ( id ) ) ) ; }
@ java.lang.Override protected void executeQueryCommand () { org.ovirt.engine.core.bll.VdcQueryParametersBase tempVar = org.ovirt.engine.core.bll.GetTagsByUserIdQuery . getParameters () ; org.ovirt.engine.core.bll.GetTagsByUserIdQuery . getQueryReturnValue () . setReturnValue ( org.ovirt.engine.core.bll.DbFacade . getInstance () . getTagDao () . getAllForUsers ( org.ovirt.engine.core.bll.GetTagsByUserIdQuery . getParameters () . getUserId () ) ) ; }
protected java.util.Map < java.lang.String , java.lang.String > getVmValuesForMsgResolving () { java.util.Map < java.lang.String , java.lang.String > values = java.util.Collections . singletonMap ( VdcObjectType.VM . name () . toLowerCase () , org.ovirt.engine.core.bll.RunVmCommand . getVmName () ) ; return values ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { migrationPolicies = ( ( java.util.List < org.ovirt.engine.core.common.migration.MigrationPolicy > ) ( returnValue ) ) ; }
@ org.junit.Test public void getClusterNameDefault () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase () ; final java.lang.String n = b . getClusterName () ; org.junit.Assert . assertEquals ( STRING_CONSTANT , n ) ; }
@ java.lang.Override protected org.ovirt.engine.core.bll.network.cluster.AttachNetworkClusterValidator createValidator () { return new org.ovirt.engine.core.bll.network.cluster.AttachNetworkClusterValidator ( interfaceDao , networkDao , networkCluster , version ) ; }
@ java.lang.Override public void setUp ( ) throws java.lang.Exception { super . setUp () ; org.mockito.Mockito . when ( getDbFacadeMockInstance () . getVmDeviceDao () ) . thenReturn ( vmDeviceDao ) ; org.mockito.Mockito . when ( getQueryParameters () . getId () ) . thenReturn ( org.ovirt.engine.core.bll.GetWatchdogQueryTest.TEST_VM_ID ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addDiskDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , java.lang.String address ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils . addDiskDevice ( vmId , deviceId , true , false , address , false ) ; }
public void setiso_path ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper . EqOp ( mVmStatic . getiso_path () , value ) ) ) { mVmStatic . setiso_path ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > getAllVdsNumaNodeByVdsId ( org.ovirt.engine.core.compat.Guid vdsId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , vdsId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > vdsNumaNodes = getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.VdsNumaNodeDaoImpl.vdsNumaNodeRowMapper , parameterSource ) ; return vdsNumaNodes ; }
@ org.junit.Before public void setUp () { testedModel = new org.ovirt.engine.ui.uicommonweb.models.SortedListModel < org.ovirt.engine.ui.uicommonweb.models.SortedListModelTest.TestItem > () { @ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.Configurator lookupConfigurator () { return null ; } @ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.ILogger lookupLogger () { return null ; } } ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; clusterGuideModel.localStorageHost = localStorageHost ; clusterGuideModel . updateOptionsLocalFS () ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNic ( java.lang.String nicName , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid . newGuid () , nicName , false , null , null , networkName , true ) ; }
@ org.junit.Test public void getUsbPolicyIsSetDisabled () { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb () ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup () ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper . getUsbPolicyOnCreate ( usb , vdsGroup . getCompatibilityVersion () ) , UsbPolicy.DISABLED ) ; }
@ org.junit.Test public void getFreeVfNotSriovNic () { commonIsSriovDevice ( false ) ; try { hostNicVfsConfigHelper . getFreeVf ( nic ) ; } catch ( java.lang.Exception exception ) { org.junit.Assert . assertTrue ( ( exception instanceof java.lang.UnsupportedOperationException ) ) ; } }
public java.util.Map < java.lang.String , java.lang.Object > getInfo () { mInfo = ( ( java.util.Map < java.lang.String , java.lang.Object > ) ( innerMap . get ( org.ovirt.engine.core.vdsbroker.irsbroker.OneImageInfoReturnForXmlRpc.INFO ) ) ) ; return mInfo ; }
public void setParameters ( java.lang.String value ) { switch ( getVmPoolType () ) { case TimeLease : { initializeTimeLeasedDefaultData ( value ) ; break; } default: { parameters = value ; break; } } }
@ java.lang.Override protected void executeVdsBrokerCommand () { buildVmData () ; mVmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand . getBroker () . create ( createInfo ) ; logCommandInfo () ; org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand . proceedProxyReturnValue () ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder . updateVMDynamicData ( vm . getDynamicData () , mVmReturn.mVm ) ; }
@ java.lang.Override protected void removeQuotaCommandLeftOver () { org.ovirt.engine.core.bll.QuotaManager . removeVdsGroupDeltaQuotaCommand ( org.ovirt.engine.core.bll.RunVmCommand . getQuotaId () , org.ovirt.engine.core.bll.RunVmCommand . getVm () . getvds_group_id () , org.ovirt.engine.core.bll.RunVmCommand . getCommandId () ) ; }
@ java.lang.Override public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.EntityModel model , java.lang.Boolean value ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel ) ( model ) ) ; networkClusterModel . setAttached ( value ) ; refreshClustersTable () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmDefaultPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; updateSpmPriorityValues () ; updateSpmPriority () ; }
private void createCommandWithOlderVersion () { createCommand ( org.ovirt.engine.core.bll.UpdateClusterCommandTest . createClusterWithOlderVersion ( true , false ) ) ; }
@ org.junit.Test public void validateDiskIsLocked () { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage () ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk () ; command . getImage () . setImageStatus ( ImageStatus.LOCKED ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED ) ; }
private java.lang.String getMacAddress () { return org.ovirt.engine.core.bll.UpdateVmInterfaceCommand . getParameters () . getInterface () . getMacAddress () ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > getAllForMonitoredVm ( org.ovirt.engine.core.compat.Guid vmId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , vmId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > results = getCallsHandler () . executeReadList ( STRING_CONSTANT , org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoImpl.VmNetworkInterfaceMonitoringRowMapper.INSTANCE , parameterSource ) ; return results ; }
public java.lang.String findFreeVfForVnic ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.network.Network vnicNetwork ) ;
@ org.junit.Test public void testCobvertGBToBytes () { long gigabytes = NUMBER_CONSTANT ; long bytes = org.ovirt.engine.core.common.utils.SizeConverter . convert ( gigabytes , SizeConverter.SizeUnit.GiB , SizeConverter.SizeUnit.BYTES ) . longValue () ; org.junit.Assert . assertEquals ( bytes , NUMBER_CONSTANT ) ; }
private void validateClientAcceptHeader ( org.ovirt.engine.core.sso.utils.SsoSession ssoSession , javax.servlet.http.HttpServletRequest request ) { if ( ! ( org.ovirt.engine.core.sso.utils.SsoUtils . scopeAsList ( ssoSession . getScope () ) . contains ( SsoConstants.OPENID_SCOPE ) ) ) { org.ovirt.engine.core.sso.utils.SsoUtils . validateClientAcceptHeader ( request ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.async_tasks get ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , id ) ; org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.AsyncTaskRowMapper mapper = new org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.AsyncTaskRowMapper () ; return getCallsHandler () . executeRead ( STRING_CONSTANT , mapper , parameterSource ) ; }
@ org.junit.Test public void testGetDataAndSetDataWithNullSession () { org.ovirt.engine.core.utils.ThreadLocalParamsContainer . setHttpSessionId ( null ) ; org.junit.Assert . assertFalse ( STRING_CONSTANT , container . SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert . assertNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < P > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ) ) ) ; }
@ java.lang.Override public void update ( int index , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { transitionHandler . handlePlaceTransition () ; }
public void setIsExecutionAllowed ( boolean value ) { if ( ( isExecutionAllowed ) != value ) { isExecutionAllowed = value ; if ( value ) { getExecuteProhibitionReasons () . clear () ; } onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
private void initTables ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants , org.ovirt.engine.ui.webadmin.ApplicationMessages messages ) { initQuotaClusterTable ( constants , messages ) ; initQuotaStorageTable ( constants , messages ) ; }
private void validateValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Integer > entity , java.lang.Integer maxValue ) { entity . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation () , new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation ( NUMBER_CONSTANT , maxValue ) } ) ; }
@ java.lang.Override protected void executeCommand () { setQuotaParameter () ; org.ovirt.engine.core.bll.AddQuotaCommand . getQuotaDAO () . save ( org.ovirt.engine.core.bll.AddQuotaCommand . getQuota () ) ; org.ovirt.engine.core.bll.AddQuotaCommand . getReturnValue () . setSucceeded ( true ) ; }
private void attachManagementNetwork () { final org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = createManagementNetworkCluster () ; networkCluster . setClusterId ( org.ovirt.engine.core.bll.AddClusterCommand . getClusterId () ) ; networkClusterDao . save ( networkCluster ) ; }
public void validate () { validateCommon () ; validateSmtp () ; validateFilter () ; }
private void setSelectedDefaultManagementNetwork ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel , org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork ) { if ( defaultManagementNetwork != null ) { clusterModel . getManagementNetwork () . setSelectedItem ( defaultManagementNetwork ) ; } }
private void createCommand () { cmd . init () ; org.mockito.Mockito . doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao () ; org.mockito.Mockito . doReturn ( vdsDao ) . when ( cmd ) . getVdsDao () ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String suggestedDiskAlias = ( ( java.lang.String ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( model ) ) ; diskModel . getAlias () . setEntity ( suggestedDiskAlias ) ; }
public void setvds_name ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper . EqOp ( this . mVdsStatic . getvds_name () , value ) ) ) { this . mVdsStatic . setvds_name ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
protected void RemoveVmStatic () { org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVmStaticDAO () . remove ( org.ovirt.engine.core.bll.VmCommand . getVmId () ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VdsStatic > getAllWithIpAddress ( java.lang.String address ) { return getCallsHandler () . executeReadList ( STRING_CONSTANT , new org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.VdsStaticRowMapper () , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , address ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getFiltered ( java.lang.String filter ) { java.lang.String url = ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.HOSTS_ENTRY_POINT ) + ( java.lang.String . format ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.SEARCH_QUERY_FORMAT , filter ) ) ; org.apache.commons.httpclient.HttpMethod method = new org.apache.commons.httpclient.methods.GetMethod ( url ) ; return runHostListMethod ( method ) ; }
@ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getView () . hide () ; }
@ java.lang.Override public void setRaidInfoMessages ( java.lang.String raidType , int stripeSize ) { deviceSelectionInfo . setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.applicationMessages . getStorageDeviceSelectionInfo ( raidType ) ) ; this . stripeSizeWithInfo . setExplanation ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.templates . italicText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.applicationMessages . stripSizeInfoForGlusterBricks ( stripeSize , raidType ) ) ) ; }
