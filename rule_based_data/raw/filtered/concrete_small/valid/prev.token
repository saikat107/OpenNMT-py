@ java.lang.Override public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { reloadTagAbiCombo () ; validatePage () ; }
com.android.build.gradle.internal.Map < java.lang.String , com.android.build.gradle.internal.ProductFlavorData < com.android.build.gradle.internal.dsl.GroupableProductFlavorDsl > > getProductFlavors () { return productFlavors ; }
public void testOpenSocketAddress_Null ( ) throws java.io.IOException { java.nio.channels.SocketChannel channel1IP = null ; try { channel1IP = java.nio.channels.SocketChannel . open ( null ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException e ) {} assertNull ( channel1IP ) ; }
public int getProgress () { assert ( mIncCoef ) > NUMBER_CONSTANT ; return ( mIncCoef ) > NUMBER_CONSTANT ? ( ( int ) ( ( mUi . getProgress () ) / ( mIncCoef ) ) ) : NUMBER_CONSTANT ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic , java.lang.String instructionSet ) { return dexopt ( apkPath , uid , isPublic , STRING_CONSTANT , instructionSet , false ) ; }
public java.lang.String getBucketLabel ( int index ) { return libcore.icu.AlphabeticIndex . getBucketLabel ( peer , index ) ; }
private java.lang.String toZoneIdStr ( java.lang.String expected ) { return expected . replaceAll ( STRING_CONSTANT , STRING_CONSTANT ) ; }
@ java.lang.Override @ javax.annotation.Nonnull java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVFile file ) throws com.android.sched.util.file.WrongPermissionException { assert ! ( isClosed () ) ; return file . getEncodedFile () . getOutputStream () ; }
@ org.junit.Test public void testInitialize_remoteExceptionFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( true , false , false ) ; }
private java.io.File getAppDataDir () { return new java.io.File ( org.chromium.base.PathUtils . getDataDirectory () ) ; }
public int getPriority ( android.bluetooth.BluetoothDevice device ) { int priority = Settings.Global . getInt ( getContentResolver () , Settings.Global . getBluetoothMapPriorityKey ( device . getAddress () ) , BluetoothProfile.PRIORITY_UNDEFINED ) ; return priority ; }
public void clear () { this . referent = null ; }
public void imageLoaded () { synchronized ( this ) { loadImage () ; crosshairLocation = model . getCrosshairLocation () ; zoom = model . getZoom () ; } doRedraw () ; }
public static long LongAddition () { long a ; long b ; long c ; a = Main . $inline$long ( NUMBER_CONSTANT ) ; b = Main . $inline$long ( NUMBER_CONSTANT ) ; c = a + b ; return c ; }
public static void closeGuardOpen ( java.lang.Object guardObj , java.lang.String message ) {}
@ java.lang.Override protected void implConfigureBlocking ( boolean blocking ) throws java.io.IOException { synchronized ( blockingLock () ) { libcore.io.IoUtils . setBlocking ( fd , blocking ) ; } }
@ java.lang.Override public int hashCode () { return java.util.Objects . hash ( getFrequency () , getProgramNumber () , getFilepath () ) ; }
public static void end ( java.lang.String name ) { if ( org.chromium.base.TraceEvent.sEnabled ) org.chromium.base.TraceEvent . nativeEnd ( name , null ) ; }
@ java.lang.Override public boolean isOpened ( int slotId , int featureType , int sessionId ) throws android.os.RemoteException { return false ; }
@ java.lang.Override public int getVersionCode () { return mVersionCode ; }
@ java.lang.Override public java.lang.Object expected () { return false ; HEAD ( NUMBER_CONSTANT ) ; }
@ java.lang.Override public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { com.android.sdkuilib.internal.repository.sdkman2.ShellSizeAndPos . saveSizeAndPos ( mShell , com.android.sdkuilib.internal.repository.sdkman2.AvdManagerWindowImpl1.SIZE_POS_PREFIX ) ; if ( ( mContext ) != ( com.android.sdkuilib.repository.AvdManagerWindow.AvdInvocationContext.SDK_MANAGER ) ) { onAndroidSdkUpdaterDispose () ; } }
@ com.android.annotations.NonNull @ java.lang.Override public com.android.tools.lint.TypeDescriptor getType () { com.android.tools.lint.TypeDescriptor typeDescriptor = com.android.tools.lint.EcjParser . getTypeDescriptor ( mBinding.type ) ; assert typeDescriptor != null ; return typeDescriptor ; }
private libcore.util.ZoneInfo createZoneInfo ( int [] [] transitionTimes , int [] [] transitionTypes ) throws java.lang.Exception { return createZoneInfo ( getName () , transitionTimes , transitionTypes , java.lang.System . currentTimeMillis () ) ; }
static void clearMarkers ( org.eclipse.core.resources.IResource resource ) { com.android.ide.eclipse.adt.internal.lint.EclipseLintClient . clearMarkers ( java.util.Collections . singletonList ( resource ) ) ; }
public long getSupportedProfiles () { com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) return NUMBER_CONSTANT ; return service . getSupportedProfiles () ; }
public static com.android.jack.dx.rop.code.RegisterSpec make ( int reg , com.android.jack.dx.rop.type.TypeBearer type , com.android.jack.dx.rop.code.LocalItem local ) { if ( local == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } return com.android.jack.dx.rop.code.RegisterSpec . intern ( reg , type , local ) ; }
private void errorAndExit ( java.lang.String format , java.lang.Object . . . args ) { mSdkLog . error ( null , format , args ) ; java.lang.System . exit ( NUMBER_CONSTANT ) ; }
public void callSessionRttMessageReceived ( java.lang.String rttMessage ) throws android.os.RemoteException { mListener . callSessionRttMessageReceived ( rttMessage ) ; }
@ com.android.compatibility.common.util.CddTest ( requirement = STRING_CONSTANT ) public void testNetdDomain ( ) throws com.android.tradefed.device.DeviceNotAvailableException { assertDomainN ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; HEAD ( STRING_CONSTANT ) ; }
public void removePeriodicSync ( android.accounts.Account account , java.lang.String providerName , android.os.Bundle extras ) { updateOrRemovePeriodicSync ( account , providerName , extras , NUMBER_CONSTANT , false ) ; }
protected boolean isMarked ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { synchronized ( node ) { return node . containsMarker ( markerClass ) ; } }
@ java.lang.Override protected void onDetachedFromWindow () { super . onDetachedFromWindow () ; final android.view.ViewTreeObserver treeObserver = getViewTreeObserver () ; if ( treeObserver != null ) { treeObserver . removeOnTouchModeChangeListener ( this ) ; } }
@ javax.annotation.Nonnull public final com.android.jack.test.runner.AbstractRuntimeRunner setErrorStream ( @ javax.annotation.Nonnull java.io.OutputStream errorStream ) { if ( ( errRedirectStream ) != null ) { errRedirectStream . close () ; } errRedirectStream = new java.io.PrintStream ( errorStream ) ; return this ; }
private native boolean handleCallActionNative ( int action , int index ) ;
public void onAppStatusChanged ( android.bluetooth.BluetoothDevice pluggedDevice , android.bluetooth.BluetoothHidDeviceAppConfiguration config , boolean registered ) { android.util.Log . d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( ( ( STRING_CONSTANT + ( pluggedDevice == null ? null : pluggedDevice . toString () ) ) + STRING_CONSTANT ) + registered ) ) ; }
private static void processOne ( java.lang.String pathname , com.android.dx.cf.direct.ClassPathOpener.FileNameFilter filter ) { com.android.dx.cf.direct.ClassPathOpener opener ; opener = new com.android.dx.cf.direct.ClassPathOpener ( pathname , true , filter , new com.android.dx.command.dexer.Main.FileBytesConsumer () ) ; if ( opener . process () ) { com.android.dx.command.dexer.Main . updateStatus ( true ) ; } }
public com.ibm.icu.text.DecimalFormatSymbols getDecimalFormatSymbols () { try { return ( ( com.ibm.icu.text.DecimalFormatSymbols ) ( symbols . clone () ) ) ; } catch ( java.lang.Exception foo ) { return null ; } }
@ org.junit.Before public void setUp ( ) throws com.android.sched.util.config.ConfigurationException { com.android.sched.util.config.ThreadConfig . setConfig ( new com.android.sched.util.config.AsapConfigBuilder () . build () ) ; }
public boolean isLabelProperty ( java.lang.Object element , java.lang.String property ) { return false ; }
@ java.lang.Override public void onSessionDestroyed () { android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , STRING_CONSTANT ) ; if ( ( mMediaController ) != null ) { removeMediaController ( mMediaController . getWrappedInstance () ) ; mMediaController . unregisterCallback ( mMediaControllerCb ) ; mMediaController = null ; } }
private void notifyVolumeChanged ( int volume ) { volume = convertToAudioStreamVolume ( volume ) ; mAudioManager . setStreamVolume ( AudioManager.STREAM_MUSIC , volume , ( ( android.media.AudioManager.FLAG_SHOW_UI ) | ( android.media.AudioManager.FLAG_BLUETOOTH_ABS_VOLUME ) ) ) ; }
@ java.lang.Override public void close () { synchronized ( channelImpl ) { if ( channelImpl . isOpen () ) { try { channelImpl . close () ; } catch ( java.io.IOException e ) {} } super . close () ; } }
@ java.lang.Override public void callSessionConferenceStateUpdated ( com.android.ims.internal.IImsCallSession session , com.android.ims.ImsConferenceState state ) { if ( ( mListener ) != null ) { mListener . callSessionConferenceStateUpdated ( this , state ) ; } }
synchronized void nAllocationIoReceive ( long alloc ) { validate () ; rsnAllocationIoReceive ( mContext , alloc ) ; }
@ org.junit.Test public void testCompareFiboDexFileWithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools . checkStructureWithJill ( com.android.jill.FibonacciThreeAddressTest.BOOTCLASSPATH , null , com.android.jill.FibonacciThreeAddressTest.JAVA_FILEPATH , false ) ; }
public boolean isOffloadedScanBatchingSupported () { com.android.bluetooth.btservice.AdapterService service = getService () ; if ( service == null ) return false ; int val = service . getOffloadedScanResultStorage () ; return val >= ( com.android.bluetooth.btservice.AdapterService.MIN_OFFLOADED_SCAN_STORAGE_BYTES ) ; }
private static com.android.server.timezone.RulesManagerService create ( android.content.Context context ) { com.android.server.timezone.RulesManagerServiceHelperImpl helper = new com.android.server.timezone.RulesManagerServiceHelperImpl ( context ) ; return new com.android.server.timezone.RulesManagerService ( helper , helper , helper , com.android.server.timezone.PackageTracker . create ( context ) , new libcore.tzdata.update2.TimeZoneDistroInstaller ( com.android.server.timezone.RulesManagerService.TAG , com.android.server.timezone.RulesManagerService.SYSTEM_TZ_DATA_FILE , com.android.server.timezone.RulesManagerService.TZ_DATA_DIR ) ) ; }
protected void init ( ) throws java.lang.Exception { fFormat = com.ibm.icu.text.DateFormat . getInstance () ; }
public void sendSetDialing ( java.lang.String id ) throws java.lang.Exception { mConnectionById . get ( id ) . state = android.telecom.Connection.STATE_DIALING ; for ( com.android.internal.telecom.IConnectionServiceAdapter a : mConnectionServiceAdapters ) { a . setDialing ( id ) ; } }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > nullValue () { return org.hamcrest.core.IsNull . nullValue () ; }
@ org.junit.Test public void testStaticWithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools . checkStructureWithJill ( null , null , com.android.jill.JillTestTools . getJackTestsWithJackFolder ( STRING_CONSTANT ) , false ) ; }
public static void run () { art.art.Main . bindAgentJNIForClass ( art.Test984 . class ) ; art.Test984 . doTest () ; }
public java.lang.String getDescriptor () { if ( isClosure () ) { char [] array = descriptor . toCharArray () ; array [ NUMBER_CONSTANT ] = CHAR_CONS ; return new java.lang.String ( array ) ; } return descriptor ; }
com.android.ims.internal.IImsConfig getConfigInterface ( int sessionId ) throws android.os.RemoteException ;
public void big ( com.android.ahat.DocString string ) ;
public com.android.layoutlib.api.SceneResult moveChild ( java.lang.Object parentView , java.lang.Object childView , java.lang.Object beforeSibling , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED . getResult () ; }
@ java.lang.Override public java.lang.String toString () { java.lang.String deviceName = getDeviceName () ; java.lang.String name = java.lang.String . format ( STRING_CONSTANT , getClassName () , getTestName () ) ; if ( deviceName != null ) { name += java.lang.String . format ( STRING_CONSTANT , deviceName ) ; } return name ; }
private void refreshUI () { int nFrames = NUMBER_CONSTANT ; nFrames = mTrace . getFrames () . size () ; setFrameCount ( nFrames ) ; selectFrame ( NUMBER_CONSTANT ) ; }
public void testSameConfigurationSplitFullSplitNoRelaunch ( ) throws java.lang.Exception { if ( ! ( supportsMultiWindowMode () ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( LogLevel.INFO , STRING_CONSTANT ) ; return; } moveActivitySplitFullSplit ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; }
@ com.android.annotations.NonNull com.android.build.gradle.internal.variant.BaseVariantData createVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.GradleVariantConfiguration variantConfiguration , @ com.android.annotations.NonNull java.util.Set < java.lang.String > densities , @ com.android.annotations.NonNull java.util.Set < java.lang.String > abi , @ com.android.annotations.NonNull java.util.Set < java.lang.String > compatibleScreens , @ com.android.annotations.NonNull com.android.build.gradle.internal.TaskManager taskManager ) ;
@ org.junit.Test public void testMethodRef002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( METHODREF002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.LAMBDA_TO_ANONYMOUS_CONVERTER . getName () , java.lang.Boolean.TRUE . toString () ) . compileAndRunTest () ; }
@ java.lang.Override public boolean dispatchKeyEvent ( android.view.KeyEvent event ) { return event . dispatch ( this ) ; }
final void appDiedLocked ( com.android.server.am.ProcessRecord app ) { appDiedLocked ( app , app.pid , app.thread ) ; }
@ java.lang.Override public void setUiTTYMode ( int slotId , int featureType , int sessionId , int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException {}
@ java.lang.Override public UResource.ArraySink getOrCreateArraySink ( com.ibm.icu.impl.UResource.Key key , int initialSize ) { if ( key . contentEquals ( STRING_CONSTANT ) ) { formatList = new java.lang.String [ initialSize ] ; return allowedFormatListSink ; } return null ; }
@ java.lang.Override public void run () { assert ( mRunLoopID ) != NUMBER_CONSTANT : STRING_CONSTANT ; nativeRun ( mRunLoopID ) ; }
@ java.lang.Override public void onAudioStateChanged ( android.telecom.CallAudioState audioState ) { if ( ( com.android.incallui.call.CallList . getInstance () . getActiveOrBackgroundCall () ) == null ) { return; } updateNotification () ; }
private void saveNitzTime ( long time ) { mDeviceState . setNitzTimeProperty ( time ) ; mSavedTime = time ; mSavedAtTime = mDeviceState . elapsedRealtime () ; mNitzUpdatedTime = true ; }
public void test_SSL_do_handshake_NULL_SSL ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto . SSL_do_handshake ( org.conscrypt.NativeCryptoTest.NULL , null , null , NUMBER_CONSTANT , false , null , null ) ; fail () ; } catch ( java.lang.NullPointerException expected ) {} }
public static int ShrIntLong () { int lhs = Main . $inline$int ( NUMBER_CONSTANT ) ; long rhs = Main . $inline$long ( NUMBER_CONSTANT ) ; return lhs > > rhs ; }
private void handleRadioProxyExceptionForRR ( com.android.internal.telephony.RILRequest rr , java.lang.String caller , java.lang.Exception e ) { riljLoge ( caller , e ) ; rr . onError ( com.android.internal.telephony.RADIO_NOT_AVAILABLE , null ) ; decrementWakeLock ( rr ) ; rr . release () ; resetProxyAndRequestList () ; }
public void timeScalbD ( int reps ) { for ( int rep = NUMBER_CONSTANT ; rep < reps ; ++ rep ) { java.lang.Math . scalb ( d , NUMBER_CONSTANT ) ; } }
void dispatchCallStateChanged ( int newState ) { for ( com.android.incallui.videotech.VideoTech videoTech : videoTechs ) { videoTech . onCallStateChanged ( context , newState ) ; } }
@ com.android.annotations.NonNull static com.android.build.gradle.tasks.annotations.Extractor.ClassItem create ( @ com.android.annotations.NonNull java.lang.String classFqn , @ com.android.annotations.NonNull com.android.build.gradle.tasks.annotations.Extractor.ClassKind kind ) { classFqn = com.android.build.gradle.tasks.annotations.ApiDatabase . getRawClass ( classFqn ) ; return new com.android.build.gradle.tasks.annotations.Extractor.ClassItem ( classFqn , kind ) ; }
public static java.lang.String map2OID ( java.lang.String algName ) { final java.lang.String result = org.apache.harmony.security.utils.AlgNameMapper.alg2OidMap . get ( algName . toUpperCase ( java.util.Locale.US ) ) ; if ( result != null ) { return result ; } return org.apache.harmony.xnet.provider.jsse.NativeCrypto . OBJ_txt2nid_oid ( algName ) ; }
public static void main ( java.lang.String [] args ) throws java.lang.Exception { java.lang.System . loadLibrary ( args [ NUMBER_CONSTANT ] ) ; Main . doTest () ; Main . doFollowReferencesTest () ; }
public java.lang.String getCookie ( java.lang.String url , boolean privateBrowsing ) { throw new android.webkit.MustOverrideException () ; }
public static void main ( java.lang.String [] args ) { art.Main . bindAgentJNIForClass ( Main . class ) ; Main . doTest ( new Transform () , new Main.TestWatcher () ) ; }
private static native int followingImpl ( int address , java.lang.String text , int offset ) ;
@ java.lang.Deprecated public synchronized void setPluginState ( android.webkit.WebSettings.PluginState state ) { throw new android.webkit.MustOverrideException () ; }
private void updateButtonState () { mOkButton . setEnabled ( ( ( ( ( ( com.android.uiautomator.OpenDialog.sScreenshotFile ) != null ) && ( ( com.android.uiautomator.OpenDialog.sXmlDumpFile ) != null ) ) && ( com.android.uiautomator.OpenDialog.sScreenshotFile . isFile () ) ) && ( com.android.uiautomator.OpenDialog.sXmlDumpFile . isFile () ) ) ) ; }
public void test_getSession ( ) throws java.security.NoSuchAlgorithmException { javax.net.ssl.SSLEngine sse = getEngine () ; try { assertNotNull ( sse . getSession () ) ; } catch ( java.lang.Exception ex ) { fail ( ( STRING_CONSTANT + ex ) ) ; } }
@ java.lang.Override public void runUntilIdle () { assert ( mRunLoopID ) != NUMBER_CONSTANT : STRING_CONSTANT ; nativeRunUntilIdle ( mRunLoopID ) ; }
@ java.lang.Override protected void engineInit ( int opmode , java.security.Key key , java.security.SecureRandom random ) throws java.security.InvalidKeyException { try { engineInitInternal ( opmode , key , null ) ; } catch ( java.security.InvalidAlgorithmParameterException e ) { throw new java.lang.RuntimeException ( e ) ; } }
private void addKeyPending ( android.view.KeyEvent event ) { synchronized ( mPassthroughPending ) { mPassthroughPending . add ( new com.android.bluetooth.avrcp.Avrcp.MediaKeyLog ( java.lang.System . currentTimeMillis () , event ) ) ; } }
@ android.support.annotation.WorkerThread public static void markAllNewVoicemailsAsRead ( @ android.support.annotation.NonNull final android.content.Context context ) { com.android.dialer.common.concurrent.ThreadUtil . postOnUiThread ( ( ) - > { new com.android.dialer.app.calllog.VoicemailQueryHandler ( context . getContentResolver () ) . markNewVoicemailsAsOld ( null ) ; } ) ; }
private void maybeDisconnectAdapter () { if ( ( mConnectionById . isEmpty () ) && ( mConferenceById . isEmpty () ) ) { try { mOutgoingConnectionServiceRpc . removeConnectionServiceAdapter ( mServant . getStub () ) ; } catch ( android.os.RemoteException e ) {} } }
@ java.lang.Override public void startDtmf ( char c ) throws android.os.RemoteException {}
void initRttCallScreenDelegate ( android.content.Context context , com.android.incallui.rtt.protocol.RttCallScreen rttCallScreen ) ;
private void ensureSorted () { if ( ! ( isSorted ) ) { java.util.Arrays . sort ( samples , NUMBER_CONSTANT , count ) ; isSorted = true ; } }
@ org.junit.After @ java.lang.Override public void tearDown ( ) throws java.lang.Exception { if ( ( videoView ) != null ) { getHelper () . cleanUpView ( videoView ) ; } if ( ( videoViewFactory ) != null ) { videoViewFactory . release () ; } super . tearDown () ; }
private boolean isLowDataExpected () { return ( mIsPowerSaveOn ) || ( ( ( ! ( mIsCharging ) ) && ( ! ( mIsTetheringOn ) ) ) && ( ! ( mIsScreenOn ) ) ) ; }
private boolean isNetworkAvailable () { android.net.NetworkInfo ni = mConnMgr . getNetworkInfo ( ConnectivityManager.TYPE_MOBILE_MMS ) ; return ni == null ? false : ni . isAvailable () ; }
private static void waitFor ( android.os.ConditionVariable conditionVariable ) { if ( conditionVariable . block ( com.android.server.ConnectivityServiceTest.TIMEOUT_MS ) ) { return; } fail ( ( ( STRING_CONSTANT + ( com.android.server.ConnectivityServiceTest.TIMEOUT_MS ) ) + STRING_CONSTANT ) ) ; }
@ java.lang.Deprecated public synchronized void setAppCacheMaxSize ( long appCacheMaxSize ) { throw new android.webkit.MustOverrideException () ; }
public static int UShrIntLong () { int lhs = Main . $inline$int ( ( - NUMBER_CONSTANT ) ) ; long rhs = Main . $inline$long ( NUMBER_CONSTANT ) ; return lhs > > > rhs ; }
android.service.voice.VoiceInteractionSession.Request removeRequest ( android.os.IBinder reqInterface ) { synchronized ( this ) { android.service.voice.VoiceInteractionSession.Request req = mActiveRequests . get ( reqInterface ) ; if ( req != null ) { mActiveRequests . remove ( req ) ; } return req ; } }
@ org.junit.Test @ android.test.suitebuilder.annotation.SmallTest public void testCreateNullPdu () { android.telephony.SmsCbMessage msg = com.android.internal.telephony.gsm.GsmSmsCbTest . createFromPdu ( null ) ; assertNull ( STRING_CONSTANT , msg ) ; }
@ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String packageName = intent . getStringExtra ( Intent.EXTRA_PACKAGE_NAME ) ; com.android.voicemail.impl.VvmLog . i ( STRING_CONSTANT , ( STRING_CONSTANT + packageName ) ) ; com.android.voicemail.impl.VvmPackageInstallHandler . handlePackageInstalled ( context , packageName ) ; }
@ org.junit.Test public void classObjNotABitmap ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump . getTestDump () ; com.android.ahat.heapdump.AhatInstance obj = dump . getAhatSnapshot () . findClass ( STRING_CONSTANT ) ; org.junit.Assert . assertNull ( obj . asBitmap () ) ; }
@ java.lang.Override public void createPartControl ( org.eclipse.swt.widgets.Composite parent ) { mPanel = new com.android.ddmuilib.EmulatorControlPanel ( com.android.ide.eclipse.ddms.DdmsPlugin . getImageLoader () ) ; mPanel . createPanel ( parent ) ; setSelectionDependentPanel ( mPanel ) ; }
public static org.chromium.base.ResourceExtractor get ( android.content.Context context ) { if ( ( org.chromium.base.ResourceExtractor.sInstance ) == null ) { org.chromium.base.ResourceExtractor.sInstance = new org.chromium.base.ResourceExtractor ( context ) ; } return org.chromium.base.ResourceExtractor.sInstance ; }
public synchronized void setNegativeSuffix ( java.lang.String suffix ) { properties . setNegativeSuffix ( suffix ) ; refreshFormatter () ; }
@ java.lang.Override public java.lang.Class < > [] getParameterTypes () { return artMethod . findOverriddenMethodIfProxy () . getParameterTypes () ; }
public android.icu.impl.UResource.TableSink getOrCreateTableSink ( android.icu.impl.UResource.Key key , int initialSize ) { return null ; }
public org.eclipse.core.resources.IFile getOutput () { return mOutputFiles . get ( NUMBER_CONSTANT ) ; }
public void testCompareTo_Null () { tests.api.java.nio.charset.CharsetTest.MockCharset c1 = new tests.api.java.nio.charset.CharsetTest.MockCharset ( STRING_CONSTANT , null ) ; try { c1 . compareTo ( null ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.NullPointerException e ) {} }
public void ping ( java.lang.String app , java.lang.String version ) { doPing ( app , version ) ; }
public void testReplaceValue3_NullPointerException () { try { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( NUMBER_CONSTANT ) ; c . replace ( STRING_CONSTANT , one , null ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
@ java.lang.Override public void disableOptionalCodecs () { com.android.bluetooth.a2dp.A2dpService service = getService () ; if ( service == null ) { return; } service . disableOptionalCodecs () ; }
java.util.Set < java.lang.String > getAllMethods ( com.android.tools.lint.checks.Api info ) { java.util.Set < java.lang.String > members = new java.util.HashSet < java.lang.String > ( NUMBER_CONSTANT ) ; addAllMethods ( info , members ) ; return members ; }
@ java.lang.Override public com.google.common.base.Joiner useForNull ( java.lang.String nullText ) { com.google.common.base.Preconditions . checkNotNull ( nullText ) ; throw new java.lang.UnsupportedOperationException ( STRING_CONSTANT ) ; }
public void testLogger1 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderLogger l = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderLogger ( STRING_CONSTANT ) ; assertFalse ( l . hasProblems () ) ; }
@ java.lang.Override protected void onResume () { super . onResume () ; init () ; }
@ javax.annotation.CheckForNull private T getLoadedProgram ( @ javax.annotation.Nonnull com.android.jack.server.JackHttpServer.Assertion status ) { return loadedProgram . get ( status ) ; }
@ java.lang.Override public javax.net.ssl.SSLParameters getSSLParameters () { javax.net.ssl.SSLParameters params = super . getSSLParameters () ; org.conscrypt.Platform . setEndpointIdentificationAlgorithm ( params , sslParameters . getEndpointIdentificationAlgorithm () ) ; return params ; }
public void testConstructor2 () { try { java.util.PriorityQueue q = new java.util.PriorityQueue ( NUMBER_CONSTANT ) ; shouldThrow () ; } catch ( java.lang.IllegalArgumentException success ) {} }
private void setInsertPos ( int insertPos ) { this . mInsertPos = insertPos ; }
public void testUtilityFunctions () { android.renderscript.cts.ScriptC_primitives t = new android.renderscript.cts.ScriptC_primitives ( mRS , mRes , R.raw.utils ) ; t . invoke_test () ; waitForMessage () ; assertEquals ( result , android.renderscript.cts.RS_MSG_TEST_PASSED ) ; }
@ java.lang.Override public final java.math.BigInteger getPrivateExponent () { if ( key . isEngineBased () ) { throw new java.lang.UnsupportedOperationException ( STRING_CONSTANT ) ; } ensureReadParams () ; return privateExponent ; }
void addDc ( com.android.internal.telephony.dataconnection.DataConnection dc ) { mDcListAll . add ( dc ) ; }
private static java.lang.String getenv ( java.lang.String name , java.lang.String defaultValue ) { if ( name == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } java.lang.String value = Libcore.os . getenv ( name ) ; return value != null ? value : defaultValue ; }
public void flush () { try { delegate . getCache () . flush () ; } catch ( java.io.IOException ignored ) {} }
private static java.lang.String encodeClassLoaderChain ( java.lang.String cl1 , java.lang.String cl2 ) { return cl1 . isEmpty () ? cl2 : ( cl1 + STRING_CONSTANT ) + cl2 ; }
@ java.lang.Override public void addressUpdated ( android.net.LinkAddress address , java.lang.String iface , int flags , int scope ) {}
private void assertIsActive ( int index ) { if ( ( index < ( mActiveStart ) ) && ( index >= ( mActiveEnd ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . format ( STRING_CONSTANT , index , mActiveStart , mActiveEnd ) ) ; } }
@ java.lang.Override public void ignore ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( location != null ) { ignore ( issue , location . getFile () ) ; } }
@ com.android.annotations.NonNull @ java.lang.Override public java.io.File getOutputFile () { return packageLibTask . getArchivePath () ; }
protected synchronized int peekData ( java.net.DatagramPacket p ) throws java.io.IOException { doRecv ( p , android.system.OsConstants.MSG_PEEK ) ; return p . getPort () ; }
public void resetAvrcpBlacklist ( android.bluetooth.BluetoothDevice device ) { mAvrcp . resetBlackList ( device . getAddress () ) ; }
@ java.lang.Override void test () { HEAD ( ( ( NUMBER_CONSTANT - ( mr1 ) ) - ( ct ) ) ) ; if ( ( mNm . getEffectsSuppressor () ) == null ) { status = PASS ; } else { status = FAIL ; } }
public static native int min ( int i1 , int i2 ) ;
@ java.lang.Override public boolean onCreate () { com.android.email.Email . setServicesEnabledAsync ( getContext () ) ; checkDatabases () ; return false ; }
@ java.lang.Override public void startTimer ( android.content.Context context , java.lang.String timerEventName ) {}
public void test_setOOBInlineZ ( ) throws java.lang.Exception { java.net.Socket theSocket = new java.net.Socket () ; theSocket . setOOBInline ( true ) ; assertTrue ( STRING_CONSTANT , theSocket . getOOBInline () ) ; }
public long getDelayUntilTime ( android.accounts.Account account , java.lang.String providerName ) { synchronized ( mAuthorities ) { android.content.SyncStorageEngine.AuthorityInfo authority = getAuthorityLocked ( account , providerName , STRING_CONSTANT ) ; if ( authority == null ) { return NUMBER_CONSTANT ; } return authority.delayUntil ; } }
public static native java.lang.ClassLoader getClosestUserClassLoader ( java.lang.ClassLoader bootstrap , java.lang.ClassLoader system ) ;
public void testVersion12 () { android.renderscript.cts.ScriptC_set_target_api_12 test12 = new android.renderscript.cts.ScriptC_set_target_api_12 ( mRS , mRes , R.raw.set_target_api_12 ) ; test12 . invoke_check ( NUMBER_CONSTANT ) ; waitForMessage () ; checkForErrors () ; }
private static boolean needsToSignIn () { java.util.Map < java.lang.String , com.google.gct.login.CredentialedUser > users = com.google.gct.login.GoogleLogin . getInstance () . getAllUsers () ; return ( users == null ) || ( users . isEmpty () ) ; }
public void answer ( int videoState ) { try { if ( mConnected ) { mConnectionService . answerVideo ( mConnectionId , videoState ) ; } } catch ( android.os.RemoteException ignored ) {} }
public static int consistentHash ( com.google.common.hash.HashCode hashCode , int buckets ) { return com.google.common.hash.Hashing . consistentHash ( com.google.common.hash.Hashing . padToLong ( hashCode ) , buckets ) ; }
@ java.lang.Override public native void doAbort ( ) ;
@ java.lang.Override public void setUiTtyMode ( int uiTtyMode , android.os.Message onCompleteMessage ) throws android.os.RemoteException { synchronized ( mLock ) { this . setUiTtyMode ( uiTtyMode , onCompleteMessage ) ; } }
@ java.lang.Override public byte [] call ( ) throws java.io.IOException { return com.android.dx.command.dexer.Main . writeDex ( dexFile ) ; }
double getDoubleUnchecked ( int index ) { throw new java.lang.UnsupportedOperationException () ; }
public void setSkins ( java.lang.String [] skins ) { mSkins = skins ; }
public int hashCode () { long bits = java.lang.Double . doubleToLongBits ( value ) ; return ( ( int ) ( bits ^ ( bits > > > NUMBER_CONSTANT ) ) ) ; }
@ java.lang.Override public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [] states ) { com.android.bluetooth.hearingaid.HearingAidService service = getService () ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( NUMBER_CONSTANT ) ; } return service . getDevicesMatchingConnectionStates ( states ) ; }
public static com.android.resources.LayoutDirection getByIndex ( int index ) { int i = NUMBER_CONSTANT ; for ( com.android.resources.LayoutDirection orient : com.android.resources.LayoutDirection . values () ) { if ( i == index ) { return orient ; } i ++ ; } return null ; }
public void visitProgramClass ( proguard.shrink.ProgramClass programClass ) { if ( ! ( usageMarker . isUsed ( programClass ) ) ) { attributeUsed = false ; } }
public static java.lang.String escape ( java.lang.CharSequence input ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; com.ibm.icu.impl.number.AffixUtils . escape ( input , sb ) ; return sb . toString () ; }
@ java.lang.Override public void run () { c . substring ( NUMBER_CONSTANT ) . toString () ; }
public static void main ( java.lang.String [] args ) { java.lang.System . loadLibrary ( args [ NUMBER_CONSTANT ] ) ; Main.TestWatcher w = new Main.TestWatcher () ; Main . doTest ( new Transform ( w ) , w ) ; }
public java.lang.String getLayoutResourceName () { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart graphicalEditor = mEditorDelegate . getGraphicalEditor () ; return graphicalEditor . getLayoutResourceName () ; }
@ java.lang.Override public void run () { mChannelScanTask . showFinishingProgressDialog () ; }
@ java.lang.Override public byte [] getEncoded ( java.lang.String encoding ) throws java.security.cert.CertificateEncodingException { org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.Encoding enc = org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.Encoding . findByApiName ( encoding ) ; if ( enc == null ) { throw new java.security.cert.CertificateEncodingException ( ( STRING_CONSTANT + encoding ) ) ; } return getEncoded () ; }
public void checkGuard ( java.lang.Object object ) throws java.lang.SecurityException { java.lang.SecurityManager sm = java.lang.System . getSecurityManager () ; if ( sm != null ) sm . checkPermission ( this ) ; }
@ java.lang.Override public void openContentEntriesSettings ( final com.intellij.openapi.module.Module module ) { warnIfGradleProject () ; com.intellij.openapi.roots.ui.configuration.ModulesConfigurator . showDialog ( myProject , module . getName () , ContentEntriesEditor.NAME ) ; }
@ java.lang.Override public void onChange ( boolean selfChange ) { super . onChange ( selfChange ) ; synchronized ( this ) { mNotificationEnabled = getValue () ; resetNotification () ; } }
public void run () { if ( mKeyguardDelegate . isDismissable () ) { mKeyguardDelegate . keyguardDone ( false , true ) ; } else { mKeyguardDelegate . dismiss () ; } }
private java.lang.CharSequence getVvmDialerTos () { if ( ! ( isVoicemailTranscriptionEnabled () ) ) { return STRING_CONSTANT ; } return context . getString ( R.string.dialer_terms_and_conditions_for_verizon_1_0 ) ; }
public boolean connectAudio ( java.lang.String deviceAddress ) { return mBluetoothHeadset . connectAudio () ; }
public static int getModCount () { try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.r . lock () ; return com.intellij.openapi.vfs.newvfs.persistent.FSRecords . getRecords () . getInt ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.HEADER_GLOBAL_MOD_COUNT_OFFSET ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.r . unlock () ; } }
protected void join ( java.net.InetAddress inetaddr , java.net.NetworkInterface netIf ) throws java.io.IOException { if ( isClosed () ) { throw new java.net.SocketException ( STRING_CONSTANT ) ; } libcore.io.IoBridge . setSocketOption ( fd , libcore.io.IoBridge.JAVA_MCAST_JOIN_GROUP , java.net.PlainDatagramSocketImpl . makeGroupReq ( inetaddr , netIf ) ) ; }
public static double DoubleRemainder () { double a ; double b ; double c ; a = Main . $inline$double ( NUMBER_CONSTANT ) ; b = Main . $inline$double ( NUMBER_CONSTANT ) ; c = a % b ; return c ; }
public static com.android.ide.common.resources.ResourceUrl create ( @ com.android.annotations.NonNull com.android.resources.ResourceType type , @ com.android.annotations.NonNull java.lang.String name , boolean framework , boolean create ) { return new com.android.ide.common.resources.ResourceUrl ( type , name , framework , create ) ; }
@ java.lang.Override public void onIntrData ( byte reportId , byte [] data ) { mCallback . onIntrData ( reportId , data ) ; }
private boolean isMarked ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { synchronized ( node ) { return node . containsMarker ( com.android.jack.shrob.obfuscation.KeepNameMarker . class ) ; } }
@ java.lang.Override @ javax.annotation.Nonnull public abstract void srcToExe ( @ javax.annotation.CheckForNull java.lang.String classpath , @ javax.annotation.Nonnull java.io.File out , boolean zipFile , @ javax.annotation.Nonnull java.io.File . . . sources ) throws java.lang.Exception ;
@ java.lang.Override protected void onLayout ( boolean changed , int left , int top , int right , int bottom ) { super . onLayout ( changed , left , top , right , bottom ) ; loadImageIfNecessary () ; }
void tearDown () { BRANCH ( ( ( NUMBER_CONSTANT - ( cts ) ) - ( dev ) ) ) ; mNm . setInterruptionFilter ( NotificationManager.INTERRUPTION_FILTER_ALL ) ; mNm . cancelAll () ; deleteChannels () ; com.android.cts.verifier.notifications.MockListener . getInstance () . resetData () ; }
private native java.lang.Object invoke ( java.lang.Object receiver , java.lang.Object [] args , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.reflect.InvocationTargetException ;
public static java.lang.String [] getProjection () { if ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.N_MR1 ) ) { return com.android.dialer.voicemailstatus.VoicemailStatusQuery.PROJECTION_NMR1 ; } if ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.N ) ) { return com.android.dialer.voicemailstatus.VoicemailStatusQuery.PROJECTION_N ; } return com.android.dialer.voicemailstatus.VoicemailStatusQuery.PROJECTION_M ; }
public void setNdkSoFolder ( @ com.android.annotations.NonNull java.util.Collection < java.io.File > ndkSoFolder ) { this . ndkSoFolder = ndkSoFolder ; }
@ com.android.annotations.NonNull public static java.lang.String prettyPrint ( @ com.android.annotations.NonNull org.w3c.dom.Node node ) { return com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlPrettyPrinter . prettyPrint ( node , com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences . create () , com.android.ide.common.xml.XmlFormatStyle . get ( node ) , com.android.utils.SdkUtils . getLineSeparator () ) ; }
@ java.lang.Override public void onConference ( android.telecom.Connection connection1 , android.telecom.Connection connection2 ) { synchronized ( android.telecom.cts.CtsConnectionService.sLock ) { if ( ( android.telecom.cts.CtsConnectionService.sConnectionService ) != null ) { android.telecom.cts.CtsConnectionService.sConnectionService . onConference ( connection1 , connection2 ) ; } else { android.telecom.cts.CtsConnectionService.mMockConnectionService . onConference ( connection1 , connection2 ) ; } } }
@ java.lang.Override protected void engineNextBytes ( byte [] bytes ) { selfSeedIfNotSeeded () ; org.conscrypt.NativeCrypto . RAND_bytes ( bytes ) ; }
synchronized long nScriptGroup2Create ( java.lang.String cachePath , long [] closures ) { validate () ; return rsnScriptGroup2Create ( mContext , cachePath , closures ) ; }
public void testParseARPReply () { final java.lang.String packet = STRING_CONSTANT + ( ( ( ( STRING_CONSTANT + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) + STRING_CONSTANT ) ; final java.lang.String expected = STRING_CONSTANT + STRING_CONSTANT ; assertEquals ( expected , getSummary ( packet ) ) ; }
public void onCancel ( android.content.DialogInterface dialog ) { if ( ( mFindSuidFilesTask ) != null ) { mFindSuidFilesTask . cancel ( true ) ; } finish () ; }
@ java.lang.Override public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldRef fr ) { trace ( fr . getFieldId () , fr . getReceiverType () ) ; com.android.jack.ir.ast.JField field = fr . getFieldId () . getField () ; if ( field != null ) { trace ( field ) ; } }
public void testVersion13 () { android.renderscript.cts.ScriptC_set_target_api_13 test13 = new android.renderscript.cts.ScriptC_set_target_api_13 ( mRS , mRes , R.raw.set_target_api_13 ) ; test13 . invoke_check ( NUMBER_CONSTANT ) ; waitForMessage () ; checkForErrors () ; }
public static void reportValue ( java.lang.Object val ) { java.lang.System.out . println ( ( ( ( ( STRING_CONSTANT + val ) + STRING_CONSTANT ) + ( val != null ? val instanceof java.lang.reflect.Proxy ? STRING_CONSTANT : val . getClass () : STRING_CONSTANT ) ) + STRING_CONSTANT ) ) ; }
public static android.security.KeymasterException getExceptionForKeymasterError ( int keymasterErrorCode ) { switch ( keymasterErrorCode ) { case android.security.keymaster.KeymasterDefs.KM_ERROR_INVALID_AUTHORIZATION_TIMEOUT : return new android.security.KeymasterException ( STRING_CONSTANT ) ; default: return new android.security.KeymasterException ( android.security.keymaster.KeymasterDefs . getErrorMessage ( keymasterErrorCode ) ) ; } }
@ java.lang.Override public void setTTYMode ( int ttyMode , android.os.Message onComplete ) { super . setTTYMode ( ttyMode , onComplete ) ; mCT . setTtyMode ( ttyMode ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { guard . warnIfOpen () ; if ( ( fd ) != null ) close () ; } finally { super . finalize () ; } }
public void preInstallHook () { com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk . getCurrent () ; if ( sdk != null ) { com.android.ide.eclipse.adt.internal.build.DexWrapper dx = sdk . getDexWrapper () ; dx . unload () ; } }
public void testStageInstallWithErrorCode_unsuccessfulFirstUpdate_olderVersionThanSystem ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest . createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.OLDER_RULES_VERSION , NUMBER_CONSTANT ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer . stageInstallWithErrorCode ( distro . getBytes () ) ) ; assertNoDistroOperationStaged () ; assertNoInstalledDistro () ; }
@ android.support.annotation.RequiresPermission ( value = Manifest.permission.READ_PHONE_STATE ) public void updateNotification ( com.android.incallui.call.CallList callList ) { updateInCallNotification ( callList ) ; }
@ java.lang.Override public void compile ( org.eclipse.jdt.internal.compiler.env.ICompilationUnit [] sourceUnits ) { if ( resetJack ) { session . reset () ; astBuilder = new com.android.jack.ir.impl.JackIrBuilder ( lookupEnvironment , session ) ; resetJack = false ; } super . compile ( sourceUnits ) ; }
@ org.junit.Test public void testSetupConnectedState () { setUpConnectedState () ; org.junit.Assert . assertEquals ( BluetoothProfile.STATE_CONNECTED , mHeadsetStateMachine . getConnectionState ( mTestDevice ) ) ; org.junit.Assert . assertThat ( mHeadsetStateMachine . getCurrentState () , org.hamcrest.core.IsInstanceOf . instanceOf ( HeadsetStateMachine.Connected . class ) ) ; }
void send404 ( java.io.PrintStream ps ) throws java.io.IOException { if ( ( delay ) > NUMBER_CONSTANT ) { try { java.lang.Thread . sleep ( delay ) ; } catch ( java.lang.InterruptedException e ) {} } ps . println ( ( STRING_CONSTANT + STRING_CONSTANT ) ) ; }
@ java.lang.Override @ javax.annotation.Nonnull java.io.InputStream openRead ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file ) throws com.android.sched.util.file.WrongPermissionException { return new java.util.zip.InflaterInputStream ( vfs . openRead ( file . getWrappedFile () ) , new java.util.zip.Inflater () ) ; }
@ java.lang.Override public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { checkResourceFolder ( context , context . getProject () . getDir () ) ; }
public void verify ( java.security.PublicKey key , java.security.Provider sigProvider ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.SignatureException , java.security.cert.CertificateException { sun.security.x509.X509CertImpl . verify ( this , key , sigProvider ) ; }
java.lang.String [] getDigitStringsLocal () { return digitStrings ; }
@ org.junit.Test public void testInitialize_zeroInterfacesFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , true , false ) ; }
public static java.lang.String getEndpointIdentificationAlgorithm ( javax.net.ssl.SSLParameters params ) { return params . getEndpointIdentificationAlgorithm () ; }
@ android.test.suitebuilder.annotation.MediumTest public void testJavaStrings () { assertEquals ( STRING_CONSTANT , mAppTextView2 . getText () ) ; assertEquals ( STRING_CONSTANT , mLibTextView2 . getText () ) ; }
@ java.lang.Override public void free () { array = null ; address = NUMBER_CONSTANT ; }
@ java.lang.Override public void streamMethodUpdated ( int method ) { onStreamMethodUpdated ( method ) ; }
public static boolean isBoundKeyAlgorithm ( java.lang.String algorithm ) { if ( ! ( android.security.KeyChain . isKeyAlgorithmSupported ( algorithm ) ) ) { return false ; } return android.security.KeyStore . getInstance () . isHardwareBacked () ; }
static void constantIndexing4 ( int [] array ) { array [ NUMBER_CONSTANT ] = NUMBER_CONSTANT ; }
@ java.lang.Override public void onAnimationUpdate ( android.animation.ValueAnimator animator ) { float fraction = animator . getAnimatedFraction () ; mLastAnimatedTvViewFrame = new android.view.ViewGroup.MarginLayoutParams ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; com.android.tv.ui.TvViewUiManager . interpolateMarginsRelative ( mLastAnimatedTvViewFrame , mOldTvViewFrame , mTvViewFrame , fraction ) ; updatePipView ( mLastAnimatedTvViewFrame ) ; }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID uuid ) { android.bluetooth.BluetoothGattCharacteristic characteristic = mService . getCharacteristic ( uuid ) ; if ( characteristic == null ) { showMessage ( STRING_CONSTANT ) ; return null ; } return characteristic ; }
public java.lang.String prefix ( java.lang.String typeName ) { if ( ( ( prefix . length () ) > NUMBER_CONSTANT ) && ( com.google.devtools.build.android.desugar.CoreLibraryRewriter . shouldPrefix ( typeName ) ) ) { return ( prefix ) + typeName ; } return typeName ; }
static java.math.BigInt addition ( java.math.BigInt a , java.math.BigInt b ) { java.math.BigInt r = java.math.BigInt . newBigInt () ; java.math.BigInt . Check ( java.math.NativeBN . BN_add ( r.bignum , a.bignum , b.bignum ) ) ; return r ; }
@ java.lang.Override public java.lang.String toString () { if ( ( count ) == NUMBER_CONSTANT ) { return STRING_CONSTANT ; } return java.lang.StringFactory . newStringFromChars ( NUMBER_CONSTANT , count , value ) ; }
@ java.lang.Override public void accept ( int result ) { if ( result == ( com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS ) ) { status = PASS ; } else { logFail () ; status = FAIL ; } next () ; }
public com.ibm.icu.text.SpoofChecker.Builder setData ( java.io.Reader confusables , java.io.Reader confusablesWholeScript ) throws java.io.IOException , java.text.ParseException { fSpoofData = new com.ibm.icu.text.SpoofChecker.SpoofData () ; com.ibm.icu.text.SpoofChecker.Builder.ConfusabledataBuilder . buildConfusableData ( confusables , fSpoofData ) ; com.ibm.icu.text.SpoofChecker.Builder.WSConfusableDataBuilder . buildWSConfusableData ( confusablesWholeScript , fSpoofData ) ; return this ; }
@ java.lang.Deprecated public synchronized void setRenderPriority ( android.webkit.WebSettings.RenderPriority priority ) { throw new android.webkit.MustOverrideException () ; }
private void checkGraphic ( java.lang.String baseName , com.android.assetstudiolib.GraphicGenerator.Shape shape ) throws java.io.IOException { checkGraphic ( baseName , shape , NUMBER_CONSTANT , STRING_CONSTANT , NUMBER_CONSTANT ) ; }
@ javax.annotation.Nonnull public java.util.List < com.android.jack.ir.ast.JStatement > getStatements () { return com.android.jack.Jack . getUnmodifiableCollections () . getUnmodifiableList ( statements ) ; }
public boolean mayThrowExceptions ( proguard.optimize.info.Clazz clazz , proguard.optimize.info.Method method , proguard.classfile.attribute.CodeAttribute codeAttribute , int offset , proguard.optimize.info.Instruction instruction ) { mayThrowExceptions = false ; instruction . accept ( clazz , method , codeAttribute , offset , this ) ; return mayThrowExceptions ; }
public void test_unblockWithJoinWithSource ( ) throws java.lang.Exception { setup ( true ) ; try { key . unblock ( java.net.Inet4Address . getByName ( STRING_CONSTANT ) ) ; } catch ( java.lang.IllegalStateException expected ) {} }
@ java.lang.Override public void error ( java.lang.String tag , java.lang.String message ) { com.android.ide.eclipse.adt.AdtPlugin . log ( IStatus.ERROR , message ) ; }
@ java.lang.Override @ javax.annotation.CheckForNull public java.lang.String getDigest () { return digests . get ( this . getPath () ) ; }
@ java.lang.Override public void inviteParticipants ( java.lang.String [] participants ) throws android.os.RemoteException {}
@ org.junit.Test public void test002a ( ) throws java.lang.Exception { java.io.File jackOutput ; try { jackOutput = runTest002 ( false , null ) ; junit.framework.Assert . fail () ; } catch ( com.android.jack.resource.ResourceImportConflictException e ) {} }
@ java.lang.Override public void placeVoiceCall ( java.lang.String phoneNumber , int ranking ) { placeCall ( phoneNumber , ranking , false ) ; }
@ org.hamcrest.Factory public static < K , V > org.hamcrest.Matcher < java.util.Map < K , V > > hasKey ( org.hamcrest.Matcher < K > keyMatcher ) { return org.hamcrest.collection.IsMapContaining . hasEntry ( keyMatcher , org.hamcrest.core.IsAnything . < V > anything () ) ; }
public boolean answer ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { capabilities.max_scan_cache_size = java.lang.Integer.MAX_VALUE ; capabilities.max_scan_buckets = max_scan_buckets ; capabilities.max_ap_cache_per_scan = com.android.server.wifi.scanner.WifiScanningServiceTest.MAX_AP_PER_SCAN ; capabilities.max_rssi_sample_size = NUMBER_CONSTANT ; capabilities.max_scan_reporting_threshold = NUMBER_CONSTANT ; capabilities.max_hotlist_bssids = NUMBER_CONSTANT ; capabilities.max_significant_wifi_change_aps = NUMBER_CONSTANT ; return true ; }
public void run () { synchronized ( this ) { loadImage () ; selectedNode = model . getSelected () ; } }
@ java.lang.Override public boolean isPermissionEnforced ( java.lang.String permission ) { final boolean enforcedDefault = isPermissionEnforcedDefault ( permission ) ; synchronized ( mPackages ) { return isPermissionEnforcedLocked ( permission , enforcedDefault ) ; } }
private void handleConnectionServiceDeath ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionServiceFocus ) { android.telecom.Log . d ( this , STRING_CONSTANT , connectionServiceFocus ) ; if ( java.util.Objects . equals ( connectionServiceFocus , mCurrentFocus ) ) { updateConnectionServiceFocus ( null ) ; updateCurrentFocusCall () ; } }
public void testConstructor_IllegalAliases_Initial () { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( STRING_CONSTANT , new java.lang.String [] { STRING_CONSTANT , STRING_CONSTANT } ) ; } catch ( java.nio.charset.IllegalCharsetNameException e ) { fail ( STRING_CONSTANT ) ; } }
@ java.lang.Override public android.os.Bundle autoDiscover ( java.lang.String userName , java.lang.String password ) throws android.os.RemoteException { return new com.android.exchange.EasSyncService () . tryAutodiscover ( userName , password ) ; }
public void testDescendingAddAll1 () { try { java.util.NavigableSet q = jsr166.ConcurrentSkipListSubSetTest . dset0 () ; q . addAll ( null ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
public void execute ( java.lang.String . . . tasks ) { execute ( java.util.Collections . < java.lang.String > emptyList () , tasks ) ; }
private void runTestNewInstanceString ( java.lang.String constructorSignature , java.lang.String expectedString , org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider provider ) { org.apache.harmony.jpda.tests.framework.jdwp.TaggedObject result = checkNewInstanceTag ( STRING_CONSTANT , constructorSignature , provider , JDWPConstants.Tag.STRING_TAG ) ; java.lang.String resultString = getStringValue ( result.objectID ) ; assertString ( STRING_CONSTANT , expectedString , resultString ) ; }
@ javax.annotation.Nonnull void libToExe ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception ;
public void cleanup () { mSingleScanListeners . removeAllForClient ( this ) ; mSingleScanStateMachine . removeSingleScanRequests ( this ) ; mBackgroundScanStateMachine . removeBackgroundScanSettings ( this ) ; mBackgroundScanStateMachine . removeHotlistSettings ( this ) ; unregister () ; localLog ( ( STRING_CONSTANT + ( this ) ) ) ; }
public void onBind ( java.net.InetAddress localAddress , int localPort ) { isBound = true ; impl . onBind ( localAddress , localPort ) ; }
public static long ReturnLong34 () { float imm = Main . $inline$float ( NUMBER_CONSTANT ) ; return ( ( long ) ( imm ) ) ; }
public void testEncode_CharBuffer_NullEncoder () { tests.api.java.nio.charset.CharsetTest.MockCharset2 c = new tests.api.java.nio.charset.CharsetTest.MockCharset2 ( STRING_CONSTANT , null ) ; try { c . encode ( java.nio.CharBuffer . wrap ( STRING_CONSTANT ) ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.NullPointerException e ) {} }
@ java.lang.Override protected synchronized boolean cleanup () { android.util.Log . i ( com.android.bluetooth.hfp.HeadsetService.TAG , STRING_CONSTANT ) ; if ( ! ( mCreated ) ) { android.util.Log . w ( com.android.bluetooth.hfp.HeadsetService.TAG , STRING_CONSTANT ) ; return true ; } mCreated = false ; return true ; }
private static final int aggregateStamp ( int stamp_a , int stamp_b ) { if ( ( stamp_a == ( java.util.Calendar.UNSET ) ) || ( stamp_b == ( java.util.Calendar.UNSET ) ) ) { return java.util.Calendar.UNSET ; } return stamp_a > stamp_b ? stamp_a : stamp_b ; }
public synchronized void addLabels ( java.util.Locale locale ) { libcore.icu.AlphabeticIndex . addLabels ( peer , locale . toString () ) ; }
@ java.lang.Override public java.lang.String toGenericString () { return java.lang.reflect.Constructor . sharedToGenericString ( java.lang.reflect.Modifier . constructorModifiers () , false ) ; }
void putULongInt ( long val , boolean neg ) { this . makeValid () ; java.math.BigInt . Check ( java.math.NativeBN . putULongInt ( this . bignum , val , neg ) ) ; }
public void expectMessage ( org.hamcrest.Matcher < java.lang.String > matcher ) { expect ( org.junit.internal.matchers.ThrowableMessageMatcher . hasMessage ( matcher ) ) ; }
private void assertVerified ( java.lang.String apkFilenameInResources , java.lang.Integer minSdkVersionOverride , java.lang.Integer maxSdkVersionOverride ) throws java.lang.Exception { com.android.apksig.ApkVerifierTest . assertVerified ( verify ( apkFilenameInResources , minSdkVersionOverride , maxSdkVersionOverride ) ) ; }
@ android.test.suitebuilder.annotation.MediumTest public void testProcessChldAddHeldToConfHolding ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall () ; addCallCapability ( activeCall , Connection.CAPABILITY_MERGE_CONFERENCE ) ; boolean didProcess = mBluetoothPhoneService.mBinder . processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_ADDHELDTOCONF ) ; org.mockito.Mockito . verify ( activeCall ) . mergeConference () ; assertEquals ( didProcess , true ) ; }
void assertNoCallback () { mService . waitForIdle () ; com.android.server.ConnectivityServiceTest.CallbackInfo c = mCallbacks . peek () ; assertNull ( ( STRING_CONSTANT + c ) , c ) ; }
private void writeObject ( java.io.ObjectOutputStream stream ) throws java.io.IOException { if ( getOpenSSLKey () . isEngineBased () ) { throw new java.io.NotSerializableException ( STRING_CONSTANT ) ; } ensureReadParams () ; stream . defaultWriteObject () ; }
@ com.android.annotations.NonNull public < K , V > java.util.Map < K , V > getAllModels ( @ com.android.annotations.NonNull org.gradle.tooling.BuildAction < java.util.Map < K , V > > action ) { return getAllModels ( action , false ) ; }
private boolean isValidDevice ( android.bluetooth.BluetoothDevice device ) { if ( device == null ) return false ; if ( android.bluetooth.BluetoothAdapter . checkBluetoothAddress ( device . getAddress () ) ) return true ; return false ; }
@ java.lang.Override public void execute ( com.android.build.gradle.managed.BuildType buildType ) { buildType . setName ( BuilderConstants.DEBUG ) ; buildType . setIsDebuggable ( true ) ; buildType . setIsEmbedMicroApp ( false ) ; }
public void setCropRect ( android.graphics.Rect cropRect ) { cropRect = new android.graphics.Rect ( cropRect ) ; cropRect . intersect ( NUMBER_CONSTANT , NUMBER_CONSTANT , getWidth () , getHeight () ) ; mCropRect = cropRect ; }
@ java.lang.Override protected boolean isRetained ( char c ) {}
@ org.chromium.base.annotations.CalledByNative private static org.chromium.base.SystemMessageHandler create ( long messagePumpDelegateNative , long messagePumpNative ) { return new org.chromium.base.SystemMessageHandler ( messagePumpDelegateNative , messagePumpNative ) ; }
@ java.lang.Override public void initialize ( android.telephony.mbms.IMbmsStreamingManagerCallback listener , int subscriptionId ) throws android.os.RemoteException { return; }
private static void assertReturnCodesEqual ( int expected , int got ) { assertEquals ( android.net.apf.ApfTest . label ( expected ) , android.net.apf.ApfTest . label ( got ) ) ; }
public void assertParcelingIsLossless ( android.net.IpPrefix p ) { android.net.IpPrefix p2 = passThroughParcel ( p ) ; assertEquals ( p , p2 ) ; }
public int getSize () { return ( this ) == ( com.android.tools.perflib.heap.Type.OBJECT ) ? com.android.tools.perflib.heap.Type.sIdSize : mSize ; }
@ java.lang.Override public boolean apply ( final java.lang.String s ) { return pattern . matcher ( s ) . matches () ; }
@ org.jetbrains.annotations.NotNull @ java.lang.Override public git4idea.push.GitPushTarget getValue () { return com.intellij.util.ObjectUtils . assertNotNull ( myCurrentTarget ) ; }
@ java.lang.Override public void merge ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws com.android.jack.backend.dex.DexWritingException { try { manager . mergeDex ( merger , type ) ; } catch ( com.android.jack.tools.merger.MergingOverflowException e ) { throw new com.android.jack.backend.dex.DexWritingException ( new com.android.jack.backend.dex.SingleDexOverflowException ( e ) ) ; } }
private native boolean setVolumeNative ( int volumeType , int volume ) ;
void updateConnectivity () { setWimaxStatus () ; setWifiStatus () ; setBtStatus () ; setIpAddressStatus () ; setImsRegistrationStatus () ; }
@ java.lang.Override public java.util.List < java.lang.String > targetProcessPrefix ( java.io.File workingDirectory ) { return java.util.Arrays . asList ( STRING_CONSTANT , STRING_CONSTANT , java.lang.Integer . toString ( port ) , host , STRING_CONSTANT , STRING_CONSTANT , workingDirectory . getAbsolutePath () , STRING_CONSTANT , STRING_CONSTANT ) ; }
public static com.android.server.wifi.ScanResults create ( int id , int . . . freqs ) { return new com.android.server.wifi.ScanResults ( id , ( - NUMBER_CONSTANT ) , com.android.server.wifi.ScanResults . generateNativeResults ( id , freqs ) ) ; }
public void testInstallOlderRulesVersion ( ) throws java.lang.Exception { java.io.File appFile = getTimeZoneDataApkFile ( STRING_CONSTANT ) ; getDevice () . installPackage ( appFile , true ) ; java.lang.Thread . sleep ( NUMBER_CONSTANT ) ; assertEquals ( com.android.timezone.xts.TimeZoneUpdateHostTest.STAGED_OPERATION_NONE , getStagedOperationType () ) ; }
public void simStatusChanged ( int indicationType ) { mRil . processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil . unsljLog ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RESPONSE_SIM_STATUS_CHANGED ) ; if ( ( mRil.mIccStatusChangedRegistrants ) != null ) { mRil.mIccStatusChangedRegistrants . notifyRegistrants () ; } }
@ com.android.annotations.Nullable @ java.lang.Override public com.android.tools.lint.TypeDescriptor getReturnType () { return isConstructor () ? null : com.android.tools.lint.EcjParser . getTypeDescriptor ( mBinding.returnType ) ; }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.sched.vfs.BaseVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.BaseVDir dir = this ; for ( java.lang.String name : path . split () ) { dir = vfs . getVDir ( dir , name ) ; } return dir ; }
public static void sendWifiStateChanged ( android.content.BroadcastReceiver broadcastReceiver , android.content.Context context , int wifiState ) { android.content.Intent intent = new android.content.Intent ( android.net.wifi.WifiManager.WIFI_STATE_CHANGED_ACTION ) ; intent . putExtra ( WifiManager.EXTRA_WIFI_STATE , wifiState ) ; broadcastReceiver . onReceive ( context , intent ) ; }
@ org.junit.Test ( expected = java.lang.IllegalArgumentException . class ) public void testDataPathInitiatorDirectNoMacNoTokenFail ( ) throws java.lang.Exception { testDataPathInitiatorUtility ( true , false , false , true ) ; }
public void testRemove1_NullPointerException () { try { java.util.NavigableMap c = jsr166.TreeSubMapTest . map5 () ; c . remove ( null ) ; shouldThrow () ; } catch ( java.lang.NullPointerException success ) {} }
@ java.lang.Override public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField field ) { if ( field . isExternal () ) { return false ; } return markIfNecessary ( field ) ; }
@ java.lang.Override public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { if ( t instanceof com.android.jack.ir.ast.JDefinedClass ) { t . removeMarker ( SwitchEnumSupport.UsedEnumField . class ) ; } }
@ java.lang.Override public java.lang.String getFolderSegment ( com.android.sdklib.IAndroidTarget target ) { return com.android.ide.eclipse.adt.internal.resources.configurations.NetworkCodeQualifier . getFolderSegment ( mCode ) ; }
private org.eclipse.core.resources.IFile getDependencyFileFor ( org.eclipse.core.resources.IFile sourceFile ) { org.eclipse.core.resources.IFolder depFolder = getDependencyFolder () ; return depFolder . getFile ( sourceFile . getName () . replaceAll ( AndroidConstants.RE_RS_EXT , AndroidConstants.DOT_DEP ) ) ; }
private void resetForInput () { java.util.regex.Matcher . setInputImpl ( address , input , regionStart , regionEnd ) ; java.util.regex.Matcher . useAnchoringBoundsImpl ( address , anchoringBounds ) ; java.util.regex.Matcher . useTransparentBoundsImpl ( address , transparentBounds ) ; }
private synchronized com.android.bluetooth.avrcp.MediaPlayerInfo getAddressedPlayerInfo () { return mMediaPlayerInfoList . getOrDefault ( mCurrAddrPlayerID , null ) ; }
@ android.view.RemotableViewMethod public void setEnabled ( boolean enabled ) { if ( enabled == ( isEnabled () ) ) return; setFlags ( ( enabled ? android.view.View.ENABLED : android.view.View.DISABLED ) , android.view.View.ENABLED_MASK ) ; refreshDrawableState () ; invalidate () ; }
void putLongUnchecked ( int index , long value ) { throw new java.lang.UnsupportedOperationException () ; }
public void testConstructor_NullContext_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( null , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , android.security.AndroidKeyPairGeneratorSpecTest.SERIAL_1 , android.security.AndroidKeyPairGeneratorSpecTest.NOW , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS ) ; fail ( STRING_CONSTANT ) ; } catch ( java.lang.IllegalArgumentException success ) {} }
public void test_setPerformancePreference_Int_Int_Int ( ) throws java.io.IOException { java.net.Socket theSocket = new java.net.Socket () ; theSocket . setPerformancePreferences ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
private static boolean isAggressiveRecovery ( int value ) { return ( ( ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.CLEANUP ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.REREGISTER ) ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.RADIO_RESTART ) ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.RADIO_RESTART_WITH_PROP ) ) ; }
@ java.lang.Override public com.android.ahat.heapdump.Value getField ( java.lang.String fieldName ) { for ( com.android.ahat.heapdump.FieldValue field : mFieldValues ) { if ( fieldName . equals ( field . getName () ) ) { return field . getValue () ; } } return null ; }
public void testExtractDecodeEditEncodeMux720p ( ) throws java.lang.Throwable { setSize ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyVideo () ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper . runTest ( this ) ; }
@ java.lang.Override public java.lang.Class < > [] getParameterTypes () { return java.lang.Class . findOverriddenMethodIfProxy ( artMethod ) . getParameterTypes () ; }
@ java.lang.Override public java.lang.String getDefaultSkin () { return mDefaultSkin ; }
public static double DoubleMultiplication () { double a ; double b ; double c ; a = Main . $inline$double ( NUMBER_CONSTANT ) ; b = Main . $inline$double ( NUMBER_CONSTANT ) ; c = a * b ; return c ; }
public static void run ( ) throws java.lang.Exception { art.Main . bindAgentJNIForClass ( art.Test904 . class ) ; java.util.ArrayList < java.lang.Object > l = new java.util.ArrayList <> ( NUMBER_CONSTANT ) ; art.Test904 . prefetchClassNames () ; art.Test904 . doTest ( l ) ; }
public java.io.File getFolderPath () { java.io.File genFolder = new java.io.File ( mGenFolder ) ; return new java.io.File ( genFolder , mBuildConfigPackageName . replace ( CHAR_CONS , java.io.File.separatorChar ) ) ; }
@ com.android.tradefed.testtype.HostTestTest.MyAnnotation @ junit.framework.Test public void testPass6 () { metrics . addTestMetric ( STRING_CONSTANT , STRING_CONSTANT ) ; if ( mOption ) { metrics . addTestMetric ( STRING_CONSTANT , STRING_CONSTANT ) ; } HEAD ( NUMBER_CONSTANT ) ; com.android.tradefed.testtype.f Merge ; com.android.tradefed.testtype.changes Ieb3ca670 ; }
@ org.junit.Test public void test002b ( ) throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools . createTempDir () ; try { runTest002 ( jackOutput , false , STRING_CONSTANT ) ; junit.framework.Assert . fail () ; } catch ( com.android.jack.resource.ResourceImportConflictException e ) {} }
public static com.android.ddmlib.IDevice [] getDevices () { return com.android.hierarchyviewerlib.device.DeviceBridge.bridge . getDevices () ; }
private static native boolean findImpl ( long addr , java.lang.String s , int startIndex , int [] offsets ) ;
@ java.lang.Override void setUp () { createChannels () ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_NONE , false , false ) ; status = READY ; delay () ; }
private void assertTombstone ( java.lang.String alias ) { assertTrue ( org.conscrypt.TrustedCertificateStore . isUser ( alias ) ) ; java.io.File file = org.conscrypt.TrustedCertificateStoreTest . file ( alias ) ; assertTrue ( file . exists () ) ; assertEquals ( NUMBER_CONSTANT , file . length () ) ; }
public static void run () { art.Main . bindAgentJNIForClass ( art.Test903 . class ) ; art.Test903 . doTest () ; art.Test903 . testGetTaggedObjects () ; art.Test903 . testTags () ; }
public void testMinimalSizeDocked ( ) throws java.lang.Exception { if ( ( ! ( supportsSplitScreenMultiWindow () ) ) || ( ! ( supportsMultiWindowMode () ) ) ) { com.android.tradefed.log.LogUtil.CLog . logAndDisplay ( com.android.ddmlib.Log.LogLevel.INFO , STRING_CONSTANT ) ; return; } testMinimalSize ( android.server.cts.DOCKED_STACK_ID ) ; }
public com.android.dialer.callintent.CallIntentBuilder setAllowAssistedDial ( boolean allowAssistedDial , @ android.support.annotation.NonNull com.android.dialer.assisteddialing.AssistedDialingMediator assistedDialingMediator ) { this . assistedDialingMediator = com.android.dialer.common.Assert . isNotNull ( assistedDialingMediator ) ; this . allowAssistedDial = allowAssistedDial ; return this ; }
private void writeCharacteristic ( java.lang.String writeValue ) { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.CHARACTERISTIC_UUID ) ; if ( characteristic == null ) return; characteristic . setValue ( writeValue ) ; mBluetoothGatt . writeCharacteristic ( characteristic ) ; }
private boolean checkBundleFilesExist ( java.io.File unpackedContentDir ) throws java.io.IOException { android.util.Slog . i ( logTag , STRING_CONSTANT ) ; return libcore.tzdata.update2.FileUtils . filesExist ( unpackedContentDir , ConfigBundle.TZ_DATA_VERSION_FILE_NAME , ConfigBundle.CHECKSUMS_FILE_NAME , ConfigBundle.ZONEINFO_FILE_NAME , ConfigBundle.ICU_DATA_FILE_NAME ) ; }
boolean runTests ( @ com.android.annotations.NonNull java.lang.String projectName , @ com.android.annotations.NonNull java.lang.String variantName , @ com.android.annotations.NonNull java.io.File testApk , @ com.android.annotations.Nullable java.io.File testedApk , @ com.android.annotations.NonNull com.android.builder.testing.TestData testData , @ com.android.annotations.NonNull java.util.List < ? extends com.android.builder.testing.api.DeviceConnector > deviceList , int maxThreads , int timeout , @ com.android.annotations.NonNull java.io.File resultsDir , @ com.android.annotations.NonNull java.io.File coverageDir , @ com.android.annotations.NonNull com.android.utils.ILogger logger ) throws com.android.builder.testing.TestRunner.NoAuthorizedDeviceFoundException , com.android.builder.testing.api.TestException , java.lang.InterruptedException ;
@ java.lang.Override public int updateCOLR ( int presentation ) throws android.os.RemoteException { return - NUMBER_CONSTANT ; }
private static native int apfSimulate ( byte [] program , byte [] packet , int filter_age ) ;
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady () ; return getServiceInterface ( mBinder ) . createCallSession ( mSlotId , mSupportedFeature , sessionId , profile , listener ) ; } }
public void testDeserializeWasObject ( ) throws java.lang.Exception { final java.lang.String s = STRING_CONSTANT + STRING_CONSTANT ; libcore.java.io.SerializationTest.wasObjectInitializedFlag = false ; try { libcore.util.SerializationTester . deserializeHex ( s ) ; fail () ; } catch ( java.io.InvalidClassException expected ) {} assertFalse ( libcore.java.io.SerializationTest.wasObjectInitializedFlag ) ; }
private proguard.evaluation.value.ReferenceValue generalizeMayBeNull ( boolean mayBeNull ) { return ( this . mayBeNull ) || ( ! mayBeNull ) ? this : new proguard.evaluation.value.ReferenceValue ( this . type , this . referencedClass , true ) ; }
public static void sort ( int [] a ) { java.util.DualPivotQuicksort . sort ( a ) ; }
native long rsnScriptGroup2Create ( long con , java.lang.String cachePath , long [] closures ) ;
private void stopAdvertise () { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) android.util.Log . d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , STRING_CONSTANT ) ; mAdvertiser . stopAdvertising ( mAdvertiseCallback ) ; }
@ org.gradle.api.tasks.InputFile public java.io.File getStoreFile () { return new java.io.File ( getStoreLocation () ) ; }
private void run ( @ javax.annotation.Nonnull com.android.jack.test.runtime.RuntimeTestInfo rti ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( rti ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.ANDROID_MIN_API_LEVEL . getName () , java.lang.String . valueOf ( AndroidCompatibilityChecker.N_API_LEVEL ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain . class ) . compileAndRunTest () ; }
@ java.lang.Override public boolean sameItemAs ( java.lang.Package pkg ) { return pkg instanceof com.android.sdklib.internal.repository.packages.ToolPackage ; }
@ java.lang.Override public void onSessionDestroyed () { android.util.Log . v ( com.android.bluetooth.avrcp.Avrcp.TAG , STRING_CONSTANT ) ; if ( ( mMediaController ) != null ) { removeMediaController ( mMediaController . getWrappedInstance () ) ; } }
@ java.lang.Override @ javax.annotation.Nonnull public com.android.jack.ir.ast.JClass getType () { return com.android.jack.Jack . getSession () . getPhantomLookup () . getClass ( CommonTypes.JAVA_LANG_STRING ) ; }
protected void setResult ( com.android.jack.dx.rop.code.RegisterSpec result ) { if ( result == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } this . result = result ; }
private void testUrlToUriMappingAuthority ( java.lang.String urlString , java.lang.String expectedUriString ) throws java.lang.Exception { java.net.URI authorityUri = backdoorUrlToUri ( new java.net.URL ( urlString ) ) ; assertEquals ( expectedUriString , authorityUri . toString () ) ; }
com.android.apksig.internal.util.Pair < java.lang.String , ? extends java.security.spec.AlgorithmParameterSpec > getJcaSignatureAlgorithmAndParams () { return mJcaSignatureAlgAndParams ; }
boolean isOpened ( int sessionId ) throws android.os.RemoteException ;
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , float [] data ) { validateIsFloat32 () ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; }
@ java.lang.Override public void onScrollChanged ( int l , int t , int oldl , int oldt ) { mWebViewPrivate . setScrollXRaw ( l ) ; mWebViewPrivate . setScrollYRaw ( t ) ; mWebViewPrivate . onScrollChanged ( l , t , oldl , oldt ) ; }
public com.android.jack.dx.io.EncodedValue readEncodedValue () { int start = position ; new com.android.jack.dx.io.EncodedValueReader ( this ) . readValue () ; int end = position ; return new com.android.jack.dx.io.EncodedValue ( java.util.Arrays . copyOfRange ( data , start , end ) ) ; }
private void notifyRegistrantsRilConnectionChanged ( int rilVer ) { mRilVersion = rilVer ; if ( ( mRilConnectedRegistrants ) != null ) { mRilConnectedRegistrants . notifyRegistrants ( new android.os.AsyncResult ( null , new java.lang.Integer ( rilVer ) , null ) ) ; } }
@ java.lang.Override public com.android.tools.lint.client.api.Configuration getConfiguration ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project ) { return new com.android.tools.lint.LintCliClient.CliConfiguration ( mFlags . getDefaultConfiguration () , project ) ; }
android.widget.LayoutParams createOrReuseLayoutParams ( android.view.View v ) { final android.view.ViewGroup.LayoutParams currentLp = v . getLayoutParams () ; if ( currentLp instanceof android.view.ViewGroup.LayoutParams ) { android.widget.LayoutParams lp = ( ( android.widget.LayoutParams ) ( currentLp ) ) ; return lp ; } return new android.view.ViewGroup.LayoutParams ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
static java.math.BigInt modExp ( java.math.BigInt a , java.math.BigInt p , java.math.BigInt m ) { java.math.BigInt r = java.math.BigInt . newBigInt () ; java.math.BigInt . Check ( java.math.NativeBN . BN_mod_exp ( r.bignum , a.bignum , p.bignum , m.bignum ) ) ; return r ; }
private static void run () { Main . clearStats () ; Main . printStats () ; Main . forceGarbageCollection () ; Main . printStats () ; }
private void refresh () { com.android.traceur.Receiver . updateTracing ( getContext () , false ) ; }
public void testRandomization ( ) throws java.lang.Exception { testMappingEntropy ( STRING_CONSTANT ) ; testMappingEntropy ( STRING_CONSTANT ) ; testMappingEntropy ( STRING_CONSTANT ) ; }
@ java.lang.Override public void finish () { final android.content.ComponentName adminComponent = getAdminComponent () ; if ( mDpm . isAdminActive ( adminComponent ) ) { allowAppsControl () ; } super . finish () ; }
@ java.lang.Override public void setToolBar ( org.eclipse.jface.action.IToolBarManager toolBarManager ) { assert false ; }
com.android.bluetooth.gatt.ScanFilterQueue.Entry pop () { if ( isEmpty () ) { return null ; } java.util.Iterator < com.android.bluetooth.gatt.ScanFilterQueue.Entry > iterator = mEntries . iterator () ; com.android.bluetooth.gatt.ScanFilterQueue.Entry entry = iterator . next () ; iterator . remove () ; return entry ; }
@ org.hamcrest.Factory public static < T > org.hamcrest.Matcher < T > anyOf ( org.hamcrest.Matcher < ? extends T > . . . matchers ) { return org.hamcrest.core.AnyOf . anyOf ( java.util.Arrays . asList ( matchers ) ) ; }
private static void closeOutput ( java.io.OutputStream stream ) throws java.io.IOException { if ( stream == null ) { return; } stream . flush () ; if ( stream != ( java.lang.System.out ) ) { stream . close () ; } }
@ java.lang.Override android.car.diagnostic.CarDiagnosticEvent update ( @ android.annotation.NonNull android.car.diagnostic.CarDiagnosticEvent newEvent ) { newEvent = java.util.Objects . requireNonNull ( newEvent ) ; if ( ( null == ( mLastEvent ) ) || ( mLastEvent . isEarlierThan ( newEvent ) ) ) mLastEvent = newEvent ; return mLastEvent ; }
public void testExtractDecodeEditEncodeMuxAudio ( ) throws java.lang.Throwable { setSize ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyAudio () ; setVerifyAudioFormat () ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper . runTest ( this ) ; }
public abstract void flushNow ( boolean sync ) ;
@ java.lang.Override public java.lang.String getMetaZoneDisplayName ( java.lang.String mzID , com.ibm.icu.impl.NameType type ) { if ( ( mzID == null ) || ( ( mzID . length () ) == NUMBER_CONSTANT ) ) { return null ; } return loadMetaZoneNames ( mzID ) . getName ( type ) ; }
@ java.lang.Override protected void engineSetSeed ( byte [] seed ) { if ( seed == null ) { throw new java.lang.NullPointerException ( STRING_CONSTANT ) ; } selfSeedIfNotSeeded () ; org.conscrypt.NativeCrypto . RAND_seed ( seed ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForUser ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Account.Id owner ) throws java.lang.Exception { return newChange ( repo , null , owner , null , null , null ) ; }
private void initSite ( ) throws java.lang.Exception { com.google.gerrit.acceptance.pgm.RebuildNoteDbIT . runGerrit ( STRING_CONSTANT , STRING_CONSTANT , sitePath . getPath () , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
protected void assertBadQuery ( java.lang.Object query ) throws java.lang.Exception { try { newQuery ( query ) . get () ; org.junit.Assert . fail ( ( STRING_CONSTANT + query ) ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) {} }
@ java.lang.Override public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( patchSetId ) , new com.google.gerrit.client.changes.ChangeScreen ( patchSetId ) ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( STRING_CONSTANT , true , true ) ; }
@ org.junit.Test ( expected = java.io.IOException . class ) public void shouldThrowAnExceptionIfAnErrorOccurCreatingSharedDirectory ( ) throws java.lang.Exception { java.io.File configuredDirectory = tempFolder . newFile () ; org.mockito.Mockito . when ( configMock . main () . sharedDirectory () ) . thenReturn ( configuredDirectory . getAbsolutePath () ) ; module . getSharedDirectory ( configMock ) ; }
@ java.lang.Override protected void configure () { factory ( ChangeResource.Factory . class ) ; bind ( com.google.gerrit.server.extensions.events.GitReferenceUpdated . class ) . toInstance ( GitReferenceUpdated.DISABLED ) ; }
@ java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user ( com.google.gerrit.server.CurrentUser user ) { return getUser () . equals ( user ) ? this : forUser ( user ) . asForChange ( cd , db ) ; }
private void assertBadRequest ( com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest < com.google.gerrit.extensions.api.projects.TagInfo > req ) throws java.lang.Exception { try { req . get () ; org.junit.Assert . fail ( STRING_CONSTANT ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) {} }
protected final void logWarn ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.strategy.SubmitStrategyOp.log . isWarnEnabled () ) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log . warn ( ( ( ( STRING_CONSTANT + ( args.submissionId ) ) + STRING_CONSTANT ) + msg ) , t ) ; } }
@ java.lang.Override public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( NUMBER_CONSTANT ) ; }
protected void onExit ( final int rc ) { com.google.gerrit.sshd.commands.ead StreamEvents ; com.google.gerrit.sshd.commands.Fix NPE ; com.google.gerrit.sshd.commands.invoking the ; with ( ( -- ( help ) ) ) ; removeEventListenerRegistration () ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
private static java.lang.String shortenSubject ( java.lang.String subject ) { if ( ( subject . length () ) < NUMBER_CONSTANT ) { return subject ; } else { return ( subject . substring ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) + STRING_CONSTANT ; } }
public void testParentHashCode () { final int id = NUMBER_CONSTANT ; final com.google.gwtorm.client.IntKeyTestCase.Parent p = new com.google.gwtorm.client.IntKeyTestCase.Parent ( id ) ; assertEquals ( id , p . hashCode () ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box , com.google.gerrit.common.changes.Side side ) { diffTable . onRemoveDraftBox ( box , side ) ; }
private com.google.gerrit.server.notedb.RepoSequence newSequence ( java.lang.String name , int start , int batchSize , java.lang.Runnable afterReadRef , com.github.rholder.retry.Retryer < org.eclipse.jgit.lib.RefUpdate.Result > retryer ) { return new com.google.gerrit.server.notedb.RepoSequence ( repoManager , project , name , start , batchSize , afterReadRef , retryer ) ; }
@ java.lang.Override protected void preDisplay ( java.lang.String content ) { setShowTabs ( prefs . showTabs () ) ; initEditor ( content ) ; }
public void setFileHistory ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern . isEmpty () ) ) ) { fileHistory = pattern ; } }
void removeAll () { if ( ( skipBars ) != null ) { for ( com.google.gerrit.client.diff.SkipBar bar : skipBars ) { bar . expandSideAll () ; } getOverviewBar () . refresh () ; skipBars = null ; line0 = null ; } }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { admins = groupCache . get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( STRING_CONSTANT ) ) . getGroupUUID () ; setUpPermissions () ; setUpChanges () ; atrScope . disableDb () ; }
private void detach () { if ( ( lineWidget ) != null ) { lineWidget . clear () ; lineWidget = null ; updateSelection () ; } manager . clearLine ( cm . side () , line ) ; removeFromParent () ; }
public static com.google.common.base.Function < com.google.gerrit.reviewdb.client.Change , com.google.gerrit.reviewdb.client.Change.Id > changeIdFunction () { return com.google.gerrit.reviewdb.server.ReviewDbUtil.CHANGE_ID_FUNCTION ; }
private void problem ( java.lang.String msg ) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo () ; p.message = msg ; problems . add ( p ) ; }
void applySuccess () { com.google.gwt.user.client.rpc.AsyncCallback < T > cb = delegate ; if ( cb != null ) { delegate = null ; cb . onSuccess ( result ) ; result = null ; } }
@ java.lang.Override public void options ( com.google.gerrit.extensions.common.GroupOptionsInfo options ) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions . apply ( rsrc , options ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
private static long round ( long n , long unit ) { long rounded = ( n + ( unit / NUMBER_CONSTANT ) ) / unit ; return rounded ; }
@ java.lang.Override public com.google.gerrit.server.plugins.PluginResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.plugins.Plugin p = loader . get ( id . get () ) ; if ( p == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.plugins.PluginResource ( p ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change . getProject () , change ) ; }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer . deleteDocuments ( term ) ; commit () ; }
public boolean canSee ( final com.google.gerrit.reviewdb.client.Account otherUser ) { return canSee ( otherUser . getId () ) ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; db = createBareRepository () ; util = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.lib.Repository > ( db ) ; }
void init ( com.google.gerrit.client.change.ChangeScreen2.Style style , com.google.gwt.dom.client.Element statusText ) { this . style = style ; this . statusText = statusText ; }
public static void display ( final com.google.gerrit.client.Screen view ) { if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.body . remove ( com.google.gerrit.client.Gerrit.currentScreen ) ; } com.google.gerrit.client.Gerrit.currentScreen = view ; com.google.gerrit.client.Gerrit.body . add ( com.google.gerrit.client.Gerrit.currentScreen , DockPanel.CENTER ) ; }
@ org.junit.Test public void basePathWhenNotConfigured () { com.google.common.truth.Truth . assertThat ( ( ( java.lang.Object ) ( repoCfg . getBasePath ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ) ) ) ) . isNull () ; }
private static void validateDiffMode ( com.googlesource.gerrit.plugins.xdocs.XDocServlet.ResourceKey key , com.googlesource.gerrit.plugins.xdocs.formatter.Formatters.FormatterProvider formatter , eu.medsea.mimeutil.MimeType mimeType ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ( ( key.diffMode ) != ( DiffMode.NO_DIFF ) ) && ( ( key.revisionB ) == null ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException () ; } }
@ java.lang.Override protected void preDisplay ( java.lang.Void result ) { setShowTabs ( prefs . showTabs () ) ; initEditor ( content . text () ) ; content = null ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.index.change.IndexRewriter . class ) ; listener () . to ( com.google.gerrit.server.index.change.ChangeIndexCollection . class ) ; factory ( ChangeIndexer.Factory . class ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.pgm.util.ConsoleUI . class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags . class ) . toInstance ( init.flags ) ; bind ( com.google.gerrit.server.git.GitRepositoryManager . class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager . class ) ; }
@ org.junit.Test public void testCreateGroupWithoutCapability_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( server , user ) . put ( STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_FORBIDDEN , r . getStatusCode () ) ; }
private boolean isCurrentIndexVersionLatest () { return ( ( reindexer ) == null ) || ( ( reindexer . getVersion () ) <= ( indexes . getSearchIndex () . getSchema () . getVersion () ) ) ; }
static com.google.gerrit.server.account.externalids.ExternalId create ( com.google.gerrit.server.account.externalids.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email , @ com.google.gerrit.common.Nullable java.lang.String hashedPassword , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId blobId ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( key , accountId , com.google.common.base.Strings . emptyToNull ( email ) , com.google.common.base.Strings . emptyToNull ( hashedPassword ) , blobId ) ; }
java.lang.String patchPageTitle ( int id , java.lang.String path ) ;
@ org.junit.Test public void listEmptyGroupMembers ( ) throws java.lang.Exception { group ( STRING_CONSTANT , STRING_CONSTANT ) ; org.junit.Assert . assertTrue ( GET ( STRING_CONSTANT ) . isEmpty () ) ; }
@ java.lang.Override public void setHashtags ( com.google.gerrit.extensions.api.changes.HashtagsInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postHashtags . apply ( change , input ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public void tearDown ( ) throws java.lang.Exception { if ( ( openSchemas ) != null ) { for ( com.google.gwtorm.data.PhoneBookDb schema : openSchemas ) { schema . close () ; } openSchemas = null ; } super . tearDown () ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( java.lang.String ignore ) throws java.lang.Exception { return getConfig ( ignore , true , true ) ; }
public static com.google.gerrit.elasticsearch.ElasticIndexModule singleVersionWithExplicitVersions ( java.util.Map < java.lang.String , java.lang.Integer > versions , int threads ) { return new com.google.gerrit.elasticsearch.ElasticIndexModule ( versions , threads ) ; }
public void testCreateDatabaseHandle ( ) throws java.lang.Exception { assertNotNull ( db ) ; }
private static com.google.gerrit.client.rpc.RestApi revision ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String type ) { return com.google.gerrit.client.changes.ChangeApi . revision ( id ) . view ( type ) ; }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , @ com.google.gerrit.common.Nullable java.lang.Throwable err ) throws java.io.IOException { com.google.gerrit.httpd.restapi.RestApiServlet . replyError ( req , res , statusCode , msg , CacheControl.NONE , err ) ; }
@ java.lang.Override protected void configure () { bind ( java.io.File . class ) . annotatedWith ( com.google.gerrit.server.config.SitePath . class ) . toInstance ( sitePath ) ; bind ( com.google.gerrit.server.config.SitePaths . class ) ; }
@ org.junit.Test public void testWithoutSubmodule ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithoutSubmodule () ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator . performValidation ( repo , c ) ; org.junit.Assert . assertEquals ( NUMBER_CONSTANT , m . size () ) ; }
public static com.google.gerrit.extensions.client.Side fromShort ( short s ) { switch ( s ) { case NUMBER_CONSTANT : return com.google.gerrit.extensions.client.Side.PARENT ; case NUMBER_CONSTANT : return com.google.gerrit.extensions.client.Side.REVISION ; } return null ; }
public static void deleteRevision ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi . revision ( id , commit ) . delete ( cb ) ; }
public com.google.common.util.concurrent.CheckedFuture < , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.change.ChangeIndexer.IndexTask ( project , id ) ) : com.google.common.util.concurrent.Futures . < java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > and ( final com.google.gerrit.server.query.Predicate < T > . . . that ) { return new com.google.gerrit.server.query.AndPredicate < T > ( that ) ; }
public static java.lang.String refsStarredChangesPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.reviewdb.client.RefNames . buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_STARRED_CHANGES , accountId ) . toString () ; }
boolean canSubmit ( boolean isChangeOwner ) { if ( RefNames.REFS_CONFIG . equals ( refName ) ) { return projectControl . isOwner () ; } return canPerform ( Permission.SUBMIT , isChangeOwner ) ; }
@ java.lang.Override public java.lang.String getServletPath () { return ( ( javax.servlet.http.HttpServletRequest ) ( getRequest () ) ) . getRequestURI () . substring ( contextPath . length () ) ; }
@ org.junit.Test ( expected = java.lang.IllegalStateException . class ) public void testThatNullBasePathThrowsAnException () { new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , new org.eclipse.jgit.lib.Config () , createNiceMock ( com.google.gerrit.server.notedb.NotesMigration . class ) ) ; }
boolean canRebase () { return ( canPerform ( Permission.REBASE ) ) && ( isProjectStatePermittingWrite () ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAddReviewers ( reviewerIds , id , db , txn ) ; }
@ java.lang.Override protected com.google.gerrit.sshd.SshScope.Context continuingContext ( com.google.gerrit.sshd.SshScope.Context ctx ) { return ctx . subContext ( ctx . getSession () , ctx . getCommandLine () ) ; }
@ java.lang.Override public java.lang.String getAuthorizationUrl () { return oauth . getAuthorizationUrl ( oauth . getScope ( com.google.common.collect.Sets . newHashSet ( config . getDefaultScopes () ) ) , null ) ; }
@ java.lang.Override protected java.lang.Iterable < com.google.gerrit.sshd.SshKeyCacheEntry > missing ( final java.lang.String username ) { return java.util.Collections . emptyList () ; }
protected com.google.gerrit.server.change.ChangeInserter newChange ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo ) throws java.lang.Exception { return newChange ( repo , null , null , null , null , null ) ; }
public boolean canPerform ( java.lang.String permissionName ) { if ( GlobalCapability.ADMINISTRATE_SERVER . equals ( permissionName ) ) { return canAdministrateServer () ; } else { return ! ( access ( permissionName ) . isEmpty () ) ; } }
void setList ( java.lang.String section , java.lang.String subsection , java.lang.String name , java.util.List < java.lang.String > values ) ;
public void checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key , long expectedKeyId , java.lang.String expectedUserId , java.util.List < java.lang.String > problems ) {}
public com.google.gerrit.pgm.init.VersionedAuthorizedKeysOnInit load ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { java.io.File path = getPath () ; if ( path != null ) { try ( org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository ( path ) ) { load ( repo ) ; } } return this ; }
private java.lang.String encode ( java.lang.String segment ) { if ( type () . urlEncode () ) { return com.google.gwt.http.client.URL . encodeQueryString ( type () . replacePathSeparator ( segment ) ) ; } else { return segment ; } }
public void put ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , com.google.gerrit.common.data.GroupReference reference ) { byUUID . put ( uuid , reference ) ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab () { if ( ( relatedChangesTab ) == null ) { relatedChangesTab = createTab ( Resources.C . relatedChanges () , Resources.C . relatedChangesTooltip () ) ; } return relatedChangesTab ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { project = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_CONSTANT ) ; com.google.gerrit.acceptance.GitUtil . createProject ( sshSession , project . get () ) ; setUpChanges () ; setUpPermissions () ; }
@ java.lang.Override public com.google.gerrit.extensions.api.changes.FileApi file ( java.lang.String path ) { return fileApi . create ( files . get () . parse ( revision , com.google.gerrit.extensions.restapi.IdString . fromDecoded ( path ) ) ) ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ReadViewBinder < R > get ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ReadViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.GET , name ) ) ; }
protected < K extends java.io.Serializable , V extends java.io.Serializable > com.google.gerrit.server.cache.UnnamedCacheBinding < K , V > disk ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type ) { return disk ( com.google.inject.Key . get ( type ) ) ; }
private org.eclipse.jgit.lib.PersonIdent getSubmitterIdent () { org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent . get () ; return args.caller . newCommitterIdent ( serverIdent . getWhen () , serverIdent . getTimeZone () ) ; }
@ java.lang.Override public int getCardinality () { throw new java.lang.UnsupportedOperationException () ; }
protected static com.google.gerrit.server.query.change.ChangeData newChangeData ( com.google.gerrit.server.mail.EmailArguments ea , com.google.gerrit.reviewdb.client.Change.Id id ) { return ea.changeDataFactory . create ( ea.db . get () , id ) ; }
long read () { return generation ; }
private final native net.codemirror.lib.LineCharacter setCh ( int ch ) ;
private boolean canCreateCommit ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { if ( canUpdate () ) { return true ; } else if ( isMergedIntoBranchOrTag ( db , repo , commit ) ) { return true ; } return false ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onLineNumbers ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs . showLineNumbers ( e . getValue () ) ; view . setShowLineNumbers ( prefs . showLineNumbers () ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache . checkedGet ( project ) . getConfig () ; com.google.gerrit.server.project.Util . block ( cfg , Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , STRING_CONSTANT ) ; saveProjectConfig ( project , cfg ) ; }
private void allowPushOnRefsTags ( ) throws java.lang.Exception { removePushFromRefsTags () ; grant ( Permission.PUSH , project , STRING_CONSTANT , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
void setChange ( com.google.gerrit.reviewdb.client.Change c ) { change = c ; }
@ java.lang.Override protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result . getCommentLinkProcessor () ; setTheme ( result . getTheme () ) ; renderChangeInfo ( info ) ; loadRevisionInfo () ; }
public java.util.Set < java.lang.String > getNames () { return cfg . getNames ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName ) ; }
public static void getConfig ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfo > cb ) { new com.google.gerrit.client.rpc.RestApi ( STRING_CONSTANT ) . id ( name . get () ) . view ( STRING_CONSTANT ) . get ( cb ) ; }
@ org.junit.Test public void testToString () { org.junit.Assert . assertEquals ( STRING_CONSTANT , com.google.gerrit.server.query.Predicate . not ( com.google.gerrit.server.query.NotPredicateTest . f ( STRING_CONSTANT , STRING_CONSTANT ) ) . toString () ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault () { return new com.google.gerrit.server.index.IndexConfig ( java.lang.Integer.MAX_VALUE ) ; }
@ java.lang.Override public synchronized com.google.gerrit.metrics.Timer0 newTimer ( java.lang.String name , com.google.gerrit.metrics.Description desc ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker . checkTimerDescription ( desc ) ; define ( name , desc ) ; return newTimerImpl ( name ) ; }
@ org.junit.Test public void testCreateProjectWithoutCapability_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = STRING_CONSTANT ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.AuthException . class ) ; }
@ java.lang.Override void onRefReplicatedToAllNodes ( java.lang.String project , java.lang.String ref , int nodesCount ) { com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent event = new com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent ( project , ref , nodesCount ) ; postEvent ( project , event ) ; }
java.lang.String getRemoteDisplayname ( javax.servlet.http.HttpServletRequest req ) { if ( ( displaynameHeader ) != null ) { return com.google.common.base.Strings . emptyToNull ( req . getHeader ( displaynameHeader ) ) ; } else { return null ; } }
private com.google.gerrit.server.change.ChangeJson newChangeJson () { return jsonFactory . create ( java.util.EnumSet . of ( ListChangesOption.CHECK ) ) ; }
@ java.lang.Override protected void configure () { install ( copyConfigModule ) ; install ( cm ) ; install ( sm ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache . get ( key ) ; }
public java.lang.String getName () { return name . get () ; }
@ com.google.gwt.uibinder.client.UiHandler ( value = STRING_CONSTANT ) void onMatchBrackets ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs . matchBrackets ( e . getValue () ) ; if ( ( view ) != null ) { view . getEditor () . setOption ( STRING_CONSTANT , prefs . matchBrackets () ) ; } }
private final native void setSideRaw ( java.lang.String side ) ;
public void init ( final javax.servlet.FilterConfig config ) { this . config = config ; }
@ java.lang.Override public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit . display ( com.google.gerrit.common.PageLinks . toChange ( revision . getParentKey () , revision . getId () ) ) ; }
@ java.lang.Override public void onFailure ( java.lang.Exception reason ) { net.codemirror.lib.Loader . error ( reason ) ; callback . onFailure ( reason ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.Branch > result ) { enableForm ( true ) ; branches . display ( result ) ; branches . finishDisplay ( true ) ; }
com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult delete ( java.lang.String endpoint ) throws java.io.IOException { return httpClient . execute ( new org.apache.http.client.methods.HttpDelete ( ( ( peerInfo . getDirectUrl () ) + endpoint ) ) , new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler () ) ; }
@ java.lang.Override java.lang.Iterable < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > createIterable ( com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data . . . data ) { java.util.List < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > list = java.util.Arrays . asList ( data ) ; return new com.google.gwtorm.server.ListResultSet < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > ( list ) ; }
public AccountGroup.UUID getGroupUUID () { return control . getGroup () . getGroupUUID () ; }
public com.google.gerrit.reviewdb.AccountGroup lookup ( final java.lang.String groupName ) { return byName . get ( new com.google.gerrit.reviewdb.AccountGroup.NameKey ( groupName ) ) ; }
@ java.lang.Override void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update . setChangeMessage ( message . getMessage () ) ; setTopic ( update ) ; setStatus ( update ) ; }
private static java.lang.String describe ( com.google.gerrit.server.CurrentUser user ) { if ( user . isIdentifiedUser () ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId () . toString () ; } return user . toString () ; }
@ java.lang.Override public java.lang.Boolean apply ( com.googlesource.gerrit.plugins.lfs.locks.LfsLock input ) { return input.owner.name . equals ( user . getUserName () ) ; }
@ java.lang.Override public void run () { this . handleEmails () ; }
protected abstract com.google.gerrit.server.notedb.AbstractChangeUpdate.Status applyImpl ( org.eclipse.jgit.lib.CommitBuilder cb , org.eclipse.jgit.lib.ObjectInserter ins ) throws com.google.gwtorm.server.OrmException , java.io.IOException ;
public java.util.List < com.google.gerrit.common.data.GroupReference > run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return suggestAccountGroup ( db , query , limit ) ; }
@ java.lang.Override public void onPluginLoad () { com.google.gerrit.plugin.client.Plugin . get () . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_COMMIT_INFO_BLOCK , new com.googlesource.gerrit.plugins.zuul.client.LabelPanel.Factory () ) ; }
@ java.lang.Override public com.googlecode.prolog_cafe.lang.NumberTerm toFloat () { return new com.googlecode.prolog_cafe.lang.DoubleTerm ( ( ( double ) ( this . val ) ) ) ; }
private static java.lang.String url ( com.google.gerrit.reviewdb.client.PatchSet.Id ps , com.google.gerrit.client.changes.CommentInfo info ) { return com.google.gerrit.client.Dispatcher . toPatch ( null , ps , info . path () ) ; }
@ org.junit.Test public void testCreateProjectWithNameMismatch_BadRequest ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput () ; in.name = STRING_CONSTANT ; com.google.gerrit.acceptance.RestResponse r = adminSession . put ( STRING_CONSTANT , in ) ; org.junit.Assert . assertEquals ( HttpStatus.SC_BAD_REQUEST , r . getStatusCode () ) ; }
@ java.lang.Override public void postEvent ( com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( event , db ) ; }
public void clear () { setCat ( null ) ; setName ( Util.C . defaultAccountGroupName () ) ; setReference ( STRING_CONSTANT ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log . error ( err , e ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator . defaultRuleError () ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator . createRuleError ( err ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) { if ( ( com.google.gerrit.server.query.change.IsReviewedPredicate . getField ( schema ) ) == ( com.google.gerrit.server.index.ChangeField.LEGACY_REVIEWED ) ) { return new com.google.gerrit.server.query.change.LegacyIsReviewedPredicate () ; } return com.google.gerrit.server.query.Predicate . not ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED ) ) ; }
@ java.lang.Override public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx . getUpdate () . setTopic ( magicBranch.topic ) ; }
protected com.google.gerrit.reviewdb.client.Change newChange () { return com.google.gerrit.testutil.TestChanges . newChange ( project , changeOwner ) ; }
public static org.commonmark.node.Node parse ( java.lang.String md ) { return md != null ? com.google.gitiles.doc.GitilesMarkdown.PARSER . parse ( md ) : null ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > post ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.POST , name ) ) ; }
public T get ( I input , com.google.gerrit.server.index.FieldDef.FillArgs args ) throws com.google.gwtorm.server.OrmException { try { return getter . get ( input , args ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
@ org.junit.After public void tearDown () { plugin . stop ( env ) ; env . onStopPlugin ( plugin ) ; }
@ java.lang.Override protected void onInitUI () { super . onInitUI () ; setPageTitle ( Util.C . groupListTitle () ) ; initPageHeader () ; groups = new com.google.gerrit.client.admin.GroupTable ( true , com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) ; add ( groups ) ; }
@ org.junit.Test public void dashboardDoesNotExist ( ) throws java.lang.Exception { exception . expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException . class ) ; gApi . projects () . name ( project . get () ) . dashboard ( STRING_CONSTANT ) . get () ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( final com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory . create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch , destProject . isUseContentMerge () ) ; }
@ java.lang.Override void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line , com.google.gerrit.client.diff.CommentGroup group ) { java.util.SortedMap < java.lang.Integer , com.google.gerrit.client.diff.SideBySideCommentGroup > map = map ( side ) ; if ( ( map . get ( line ) ) == group ) { map . remove ( line ) ; } }
@ java.lang.Override public void remove () { try { filter . destroy () ; } finally { plugins . remove ( name , filter ) ; } }
private org.eclipse.jgit.errors.ConfigInvalidException parseException ( java.lang.String fmt , java.lang.Object . . . args ) { return new org.eclipse.jgit.errors.ConfigInvalidException ( ( ( ( STRING_CONSTANT + ( change . getId () ) ) + STRING_CONSTANT ) + ( java.lang.String . format ( fmt , args ) ) ) ) ; }
public final boolean submittable () { init () ; getMissingLabelIndex () ; return _submittable () ; }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { synchronized ( com.google.gerrit.server.ssh.SshUtil.keys ) { com.google.gerrit.server.ssh.SshUtil.keys . remove ( acct . getPreferredEmail () ) ; } }
com.google.gerrit.server.git.CreateCodeReviewNotes create ( com.google.gerrit.reviewdb.server.ReviewDb reviewDb , org.eclipse.jgit.lib.Repository db ) ;
@ java.lang.Override public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent arg0 ) { editArea . setText ( contentPanelMessage . getText () ) ; setEdit ( ( ! ( isEdit () ) ) ) ; runClickCallback () ; }
private static void execute ( org.eclipse.jgit.lib.BatchRefUpdate bru , org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { bru . execute ( rw , NullProgressMonitor.INSTANCE ) ; } finally { rw . release () ; } }
@ java.lang.Override public void submit ( com.google.gerrit.extensions.api.changes.SubmitInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { submit . get () . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( STRING_CONSTANT , e ) ; } }
@ java.lang.Override public java.lang.String toString () { return body ; }
public java.util.List < com.google.gerrit.server.patch.PatchListEntry > getPatches () { return java.util.Collections . unmodifiableList ( java.util.Arrays . asList ( patches ) ) ; }
@ java.lang.Override public java.util.Optional < com.google.gerrit.reviewdb.client.Account.Id > load ( java.lang.String username ) throws java.lang.Exception { return java.util.Optional . ofNullable ( externalIds . get ( ExternalId.Key . create ( com.google.gerrit.server.account.externalids.ExternalId.SCHEME_GERRIT , username ) ) ) . map ( ExternalId : : accountId ) ; }
public com.google.gerrit.server.project.ProjectState checkedGet ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) throws java.io.IOException ;
public com.google.gerrit.reviewdb.client.SystemConfig getSystemConfig ( ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.server.ReviewDb c = open () ; try { return c . systemConfig () . get ( new com.google.gerrit.reviewdb.client.SystemConfig.Key () ) ; } finally { c . close () ; } }
@ java.lang.Override public void sendRedirect ( java.lang.String msg ) { status = SC_FOUND ; committed = true ; }
public static void commitWithLinks ( int changeId , java.lang.String revision , com.google.gerrit.client.rpc.CallbackGroup.Callback < com.google.gerrit.client.info.ChangeInfo.CommitInfo > callback ) { com.google.gerrit.client.changes.ChangeApi . revision ( changeId , revision ) . view ( STRING_CONSTANT ) . addParameterTrue ( STRING_CONSTANT ) . get ( callback ) ; }
public void login ( com.google.gerrit.server.account.AuthResult res , com.google.gerrit.server.account.AuthMethod meth , boolean rememberMe ) ;
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { com.google.gerrit.common.changes.Side side = getSideFromCm ( cm ) ; com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo . create ( path , side , ( line + NUMBER_CONSTANT ) , null , null ) ; return addDraftBox ( info , false ) ; }
@ java.lang.Override protected java.lang.String getRefName () { return com.google.gerrit.reviewdb.client.RefNames . refsDraftComments ( accountId , getChange () . getId () ) ; }
public void onSuccess ( com.google.gerrit.common.data.AgreementInfo result ) { if ( isAttached () ) { mySigned = new java.util.HashSet < java.lang.String > ( result.accepted ) ; postRPC () ; } }
java.lang.String patchWindowTitle ( int id , java.lang.String file ) ;
@ java.lang.Override public synchronized void evict ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { byId . remove ( accountId ) ; }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers . of ( remotePeer ) , null , id , null ) ; }
private void newChangeFooter () { openFooter () ; if ( ( changeUrl () ) != null ) { body . append ( STRING_CONSTANT ) ; body . append ( changeUrl () ) ; body . append ( STRING_CONSTANT ) ; } }
com.google.gerrit.httpd.rpc.project.ChangeProjectAccess create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.Project.NameKey projectName , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.ObjectId base , @ com.google.inject.assistedinject.Assisted java.util.List < com.google.gerrit.common.data.AccessSection > sectionList , @ javax.annotation.Nullable @ com.google.inject.assistedinject.Assisted java.lang.String message ) ;
com.google.gerrit.gpg.GerritPushCertificateChecker create ( com.google.gerrit.server.IdentifiedUser expectedUser , boolean checkNonce ) ;
public com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > updateAsync ( com.google.gerrit.reviewdb.client.Change change ) { return com.google.common.util.concurrent.Futures . makeChecked ( executor . submit ( new com.google.gerrit.server.change.MergeabilityChecker.ChangeUpdateTask ( schemaFactory , change ) ) , com.google.gerrit.server.change.MergeabilityChecker.MAPPER ) ; }
@ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.NativeString b64 ) { wrapped . onSuccess ( com.google.gerrit.client.changes.ChangeFileApi . b64decode ( b64 . asString () ) ) ; }
@ java.lang.Override protected void configure () { bind ( com.google.gerrit.server.query.change.ChangeQueryRewriter . class ) . to ( com.google.gerrit.server.index.IndexRewriteImpl . class ) ; bind ( com.google.gerrit.server.query.change.BasicChangeRewrites . class ) ; bind ( com.google.gerrit.server.index.IndexCollection . class ) ; listener () . to ( com.google.gerrit.server.index.IndexCollection . class ) ; factory ( ChangeIndexer.Factory . class ) ; }
@ org.junit.Before public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( STRING_CONSTANT ) ) ) ; servlet = com.google.gitiles.TestGitilesServlet . create ( repo ) ; }
@ java.lang.Override protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.AccountGroup > result ) { groups . display ( result ) ; groups . finishDisplay ( true ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.Class < T > classOfT ) throws java.lang.Exception { return new com.google.gson.Gson () . fromJson ( buildJsonRaw ( path , STRING_CONSTANT ) , classOfT ) ; }
@ java.lang.Override public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit . setAccountDiffPreference ( getValue () ) ; setEnabled ( true ) ; }
private static native java.lang.String go ( com.google.gwt.core.client.JavaScriptObject ctx , java.lang.String srcText , java.lang.String srcType , int tabSize ) ;
void postEvent ( com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
private static com.google.gerrit.extensions.common.AccountInfo fromAcountInfo ( com.google.gerrit.extensions.common.AccountInfo i ) { com.google.gerrit.extensions.common.AccountInfo ai = new com.google.gerrit.extensions.common.AccountInfo () ; com.google.gerrit.server.api.changes.ChangeInfoMapper . fromAccount ( i , ai ) ; return ai ; }
private void assertNoProblems ( com.google.gerrit.server.notedb.ChangeNotes notes , @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix ) throws java.lang.Exception { com.google.common.truth.Truth . assertThat ( checker . check ( controlForNotes ( notes ) , fix ) . problems () ) . isEmpty () ; }
public void testEntityNbsp () { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder () ; assertSame ( b , b . nbsp () ) ; assertEquals ( STRING_CONSTANT , b . asString () ) ; }
com.google.gerrit.git.PatchSetImporter create ( com.google.gerrit.client.reviewdb.ReviewDb dstDb , com.google.gerrit.client.reviewdb.Project.NameKey proj , org.spearce.jgit.lib.Repository srcRepo , org.spearce.jgit.revwalk.RevCommit srcCommit , com.google.gerrit.client.reviewdb.PatchSet dstPatchSet , boolean isNewPatchSet ) ;
@ java.lang.Override public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( ( - NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.ProjectAdminServiceImpl ( com.google.gerrit.server.GerritServer . getInstance () ) ; }
private com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData load ( int expectedValue ) throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d = new com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData () ; d . load ( repo ) ; com.google.common.truth.Truth . assertThat ( d . getValue () ) . isEqualTo ( expectedValue ) ; return d ; }
@ java.lang.Override public V get ( K key ) { com.google.gerrit.ehcache.SerializableProtobuf < V > val = cache . get ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) ) ; return val != null ? val . toObject ( valueCodec , valueProvider ) : null ; }
com.google.gitiles.CommitData.Builder setArchiveFormat ( com.google.gitiles.ArchiveFormat archiveFormat ) { this . archiveFormat = com.google.common.base.Preconditions . checkNotNull ( archiveFormat , STRING_CONSTANT ) ; return this ; }
private boolean canRead ( org.eclipse.jgit.lib.ObjectId revId ) throws java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( revId ) ; return projectControl . canReadCommit ( db . get () , rw , commit ) ; } }
@ java.lang.Override protected com.google.gerrit.server.index.QueryOptions createOptions ( com.google.gerrit.server.index.IndexConfig indexConfig , int start , int limit , java.util.Set < java.lang.String > requestedFields ) { return com.google.gerrit.server.index.change.IndexedChangeQuery . createOptions ( indexConfig , start , ( limit + NUMBER_CONSTANT ) , requestedFields ) ; }
@ java.lang.Override com.google.gerrit.server.query.change.ChangeData convert ( com.google.gerrit.reviewdb.client.PatchSetApproval t ) { return new com.google.gerrit.server.query.change.ChangeData ( t . getPatchSetId () . getParentKey () ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { if ( com.google.gerrit.common.data.Permission . hasRange ( permission ) ) { return toRange ( permission , access ( permission ) ) ; } return null ; }
public void setLoggedIn ( boolean b ) { loggedIn = false ; }
private boolean checkAndUpdateArrows () { if ( ( numSkipLines ) <= ( com.google.gerrit.client.diff.SkipBar.UP_DOWN_THRESHOLD ) ) { upArrow . addStyleName ( style . noExpand () ) ; downArrow . addStyleName ( style . noExpand () ) ; return false ; } return true ; }
@ java.lang.Override public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return new com.google.gerrit.server.group.GroupInfo ( resource . getControl () . getGroup () ) ; }
@ org.junit.Test public void testDefaultBehaviour () { com.google.gerrit.common.data.GitWebType gitWebType = com.google.gerrit.common.data.GitWebType . fromName ( null ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , gitWebType . replacePathSeparator ( STRING_CONSTANT ) ) ; }
@ java.lang.Override public com.google.gerrit.server.account.GroupMembership membershipsOf ( com.google.gerrit.server.IdentifiedUser user ) { java.lang.String username = user . getUserName () ; if ( com.google.common.base.Strings . isNullOrEmpty ( username ) ) { return com.google.gerrit.server.account.GroupMembership.EMPTY ; } else { return ghMembershipProvider . get ( username ) ; } }
public static void createGroup ( java.lang.String groupName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject . createObject () ; new com.google.gerrit.client.rpc.RestApi ( STRING_CONSTANT ) . id ( groupName ) . ifNoneMatch () . data ( in ) . put ( cb ) ; }
protected com.google.gerrit.server.IdentifiedUser user ( com.google.gerrit.acceptance.TestAccount testAccount ) { return identifiedUserFactory . create ( com.google.inject.util.Providers . of ( db ) , testAccount . getId () ) ; }
private boolean isRelevantRef ( com.google.gerrit.server.events.RefUpdatedEvent event ) { return ( ! ( isNewRef ( event ) ) ) && ( ( event . getRefName () . startsWith ( org.eclipse.jgit.lib.Constants.R_HEADS ) ) || ( event . getRefName () . startsWith ( org.eclipse.jgit.lib.Constants.R_TAGS ) ) ) ; }
public static java.lang.String toPatch ( java.lang.String type , com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher . toPatch ( type , diffBase , id . getParentKey () , id . get () , null , NUMBER_CONSTANT ) ; }
public void appendBody ( java.lang.String newBody ) { body . append ( newBody ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel flush () { org.ovirt.engine.ui.uicommonweb.models.ListModel model = driver . flush () ; flush ( model ) ; return model ; }
@ org.junit.Before public void testSetup () { mockQuotaDAO () ; mockQuotaHelper () ; }
@ javax.ws.rs.GET public org.ovirt.engine.api.v3.types.V3VM get () { return org.ovirt.engine.api.v3.helpers.V3VmHelper . addDisksLink ( adaptGet ( getDelegate () : : get ) ) ; }
private void assertVmGuestAgentInterfaceForVm ( java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces ) { org.junit.Assert . assertEquals ( interfaces . size () , org.ovirt.engine.core.dao.VmGuestAgentInterfaceDaoTest.VM_GUEST_AGENT_INTERFACES_SIZE ) ; for ( org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface vmGuestAgentInterface : interfaces ) { org.junit.Assert . assertEquals ( org.ovirt.engine.core.dao.VmGuestAgentInterfaceDaoTest.EXISTING_VM_ID , vmGuestAgentInterface . getVmId () ) ; } }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) @ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.DbUser > getAllForVm ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , id ) ; return getCallsHandler () . executeReadList ( STRING_CONSTANT , new org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserRowMapper () , parameterSource ) ; }
@ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model . setSelectedItem ( bookmark ) ; model . setSelectedItems ( java.util.Arrays . asList ( bookmark ) ) ; model . executeCommand ( model . getEditCommand () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { context.dataCenterFoundById = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; rollback2 () ; }
@ java.lang.Override public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( STRING_CONSTANT . equals ( fieldName ) ) { return StringOnlyEqualConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
public static void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.compat.Guid asyncTaskId , java.lang.String message ) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getAsyncTaskDao () . get ( asyncTaskId ) ; org.ovirt.engine.core.bll.tasks.AsyncTaskManager . logAndFailTaskOfCommandWithEmptyVdsmId ( task , message ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.Quota get () { org.ovirt.engine.core.common.queries.GetQuotaByQuotaIdQueryParameters params = new org.ovirt.engine.core.common.queries.GetQuotaByQuotaIdQueryParameters () ; params . setQuotaId ( guid ) ; org.ovirt.engine.api.model.Quota quota = performGet ( VdcQueryType.GetQuotaByQuotaId , params ) ; return quota ; }
void vdsNotResponding ( org.ovirt.engine.core.common.businessentities.VDS vds , long lastUpdate ) ;
@ org.junit.Test public void validateSucceeds () { command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand ( new org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ) ) ; prepareMocks ( command ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
public java.lang.String getNetworkName () { return org.ovirt.engine.core.bll.network.dc.NetworkCommon . getParameters () . getNetwork () . getname () ; }
public void init ( final java.util.List < org.ovirt.engine.core.common.businessentities.VM > externalVms , final org.ovirt.engine.core.compat.Guid storageDomainId ) { super . setItems ( new org.ovirt.engine.ui.frontend.INewAsyncCallback () { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { doInit ( storageDomainId ) ; } } , externalVms ) ; }
@ org.junit.Test public void testIsUp () { validator = mockHostForActivation ( VDSStatus.Up ) ; org.junit.Assert . assertTrue ( validator . isUp () . isValid () ) ; }
@ org.junit.Test public void hasNoStorageDomains () { org.mockito.Mockito . when ( sdDao . getAllForStoragePool ( org.mockito.ArgumentMatchers . any () ) ) . thenReturn ( java.util.Collections . emptyList () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
@ java.lang.Override protected void asyncSearch () { super . asyncSearch () ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend . RegisterSearch ( getSearchString () , SearchType.StorageDomain , getSearchPageSize () ) ) ; setItems ( getAsyncResult () . getData () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.RoleGroupMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.RoleGroupMap entity = new org.ovirt.engine.core.common.businessentities.RoleGroupMap ( org.ovirt.engine.core.common.businessentities.ActionGroup . forValue ( rs . getInt ( STRING_CONSTANT ) ) , getGuidDefaultEmpty ( rs , STRING_CONSTANT ) ) ; return entity ; }
protected java.lang.Object getSessionUser ( java.lang.String sessionID ) { return org.ovirt.engine.core.bll.session.SessionDataContainer . getInstance () . getUser ( sessionID ) ; }
@ org.junit.Test public void testGetInnerJoin () { org.junit.Assert . assertNotNull ( STRING_CONSTANT , comp . getInnerJoin ( STRING_CONSTANT , STRING_CONSTANT ) ) ; }
private static boolean map ( java.lang.String value ) { final org.ovirt.engine.api.model.VnicPassThroughMode vnicPassThroughMode = org.ovirt.engine.api.model.VnicPassThroughMode . fromValue ( value ) ; return ( org.ovirt.engine.api.model.VnicPassThroughMode.ENABLED ) == vnicPassThroughMode ; }
@ java.lang.Override public void updateNotified ( org.ovirt.engine.core.compat.Guid id , boolean notified ) { getCallsHandler () . executeModification ( STRING_CONSTANT , createIdParameterMapper ( id ) . addValue ( STRING_CONSTANT , notified ) ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { getConnectivityTimeout () . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; postOnSetupNetworks () ; }
@ org.junit.Test public void testEvalNegative () { mockExternalNetworkPredicate . setTestResult ( true ) ; org.junit.Assert . assertFalse ( underTest . test ( mockNetwork ) ) ; }
public java.util.Collection < org.ovirt.engine.core.compat.Guid > getGroupIds () { if ( ( groupIds ) == null ) { groupIds = java.util.Collections . emptyList () ; } return new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( groupIds ) ; }
void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool , boolean isNewSpm ) ;
public void setstatus ( org.ovirt.engine.core.common.businessentities.VDSStatus value ) { if ( ( this . mVdsDynamic . getstatus () ) != value ) { this . mVdsDynamic . setstatus ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
@ java.lang.Override public void setUp () { super . setUp () ; generateStorageToDisksMap () ; initDestSDs () ; org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( storageDomainValidator ) . isDomainWithinThresholds () ; }
private void initAddRemoveWidget () { addRemoveVmWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyValueWidget < org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.VmsSelectionModel > ( STRING_CONSTANT ) ; }
@ org.junit.Test public void testGetAllForStoragePoolWithPermissionsDisabledUnprivilegedUser () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . getAllForStoragePool ( org.ovirt.engine.core.dao.StorageDomainDAOTest.EXISTING_STORAGE_POOL_ID , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; org.ovirt.engine.core.dao.StorageDomainDAOTest . assertGetAllForStoragePoolResult ( result ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { _messages . post ( InstallerMessages.Severity.INFO , java.lang.String . format ( STRING_CONSTANT , _parser . cliEnvironmentGet ( CoreEnv.LOG_FILE_NAME ) ) ) ; return null ; }
@ java.lang.Override protected boolean canPerformRollbackUsingCommand ( org.ovirt.engine.core.common.action.VdcActionType commandType , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { return ( org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getDiskImageDAO () . get ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand . getParameters () . getDestinationImageId () ) ) != null ; }
private void initTabAvailabilityListeners ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel vm ) { highAvailabilityTab . setVisible ( true ) ; isStatelessEditor . setVisible ( false ) ; numOfMonitorsEditor . setVisible ( false ) ; allowConsoleReconnectEditor . setVisible ( false ) ; expander . setVisible ( false ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getRemoveVmInterfaceParams ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic ) { return new org.ovirt.engine.core.common.action.RemoveVmInterfaceParameters ( vnic . getVmId () . getValue () , vnic . getId () ) ; }
@ java.lang.Override public int compare ( org.ovirt.engine.core.common.businessentities.VDS o1 , org.ovirt.engine.core.common.businessentities.VDS o2 ) { return java.lang.Integer . valueOf ( org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator . calculateCpuUsage ( o1 ) ) . compareTo ( org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator . calculateCpuUsage ( o2 ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid . newGuid () , name , true , null , null , networkName , true ) ; }
private org.ovirt.engine.core.common.businessentities.storage.LunDisk createLunDisk ( org.ovirt.engine.core.common.businessentities.storage.ScsiGenericIO sgio , boolean isUsingScsiReservation ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest . createLunDisk () ; lunDisk . setSgio ( sgio ) ; lunDisk . setUsingScsiReservation ( isUsingScsiReservation ) ; return lunDisk ; }
@ java.lang.Override public java.lang.String getStorageDomainName () { if ( ( ( storageDomainName ) == null ) && ( ( getStorageDomain () ) != null ) ) { storageDomainName = getStorageDomain () . getStorageName () ; } return org.apache.commons.lang.StringUtils . defaultString ( storageDomainName ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > getFenceAgents () { return getBackendCollection ( VdcQueryType.GetFenceAgentsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( new org.ovirt.engine.core.compat.Guid ( hostId ) ) ) ; }
@ org.junit.Test public void addWithExistingMacAddressSucceed () { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest . createNewInterface () ; runAddAndVerify ( iface , true , org.mockito.Mockito . times ( NUMBER_CONSTANT ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VERSION_3_2 ) ; }
public static boolean hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getDisplayTypes ( osId , version ) . contains ( DisplayType.qxl ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel > lineModelIterator = orderedDisksIterator ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( returnValue ) ) ) ; storeNextDisk ( lineModelIterator , vm ) ; }
@ org.junit.Before public void setUp () { parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.SyncLunsInfoForBlockStorageDomainCommand < org.ovirt.engine.core.common.action.StorageDomainParametersBase > ( parameters , null ) ) ; }
@ org.junit.Test public void sufficientDiskSpace () { final int pctOfSpaceRequired = NUMBER_CONSTANT ; final org.ovirt.engine.core.bll.ImportVmTemplateCommand c = setupDiskSpaceTest ( NUMBER_CONSTANT , pctOfSpaceRequired ) ; org.junit.Assert . assertTrue ( c . canDoAction () ) ; }
@ java.lang.Override protected java.util.List < java.lang.Class < > > getValidationGroups () { if ( getParameters () . isImportAsNewEntity () ) { return org.ovirt.engine.core.bll.ImportVmCommand . addValidationGroup ( org.ovirt.engine.core.common.validation.group.ImportClonedEntity . class ) ; } return org.ovirt.engine.core.bll.ImportVmCommand . addValidationGroup ( org.ovirt.engine.core.common.validation.group.ImportEntity . class ) ; }
@ java.lang.Override public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onSucceeded ( cmdId , childCmdIds ) ; getCommand () . endAction () ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil . removeAllCommandsInHierarchy ( cmdId ) ; }
public static boolean isSpiceFileTransferToggleSupported ( java.lang.String version ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.SpiceFileTransferToggleSupported , version ) ) ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageDomain getEntity () { return ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( super . getEntity () ) ) ; }
private java.util.List < org.ovirt.engine.core.common.action.LiveMigrateDiskParameters > createLiveMigrateVmDisksParameters () { return java.util.Arrays . asList ( new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters ( diskImageId , srcStorageId , dstStorageId , vmId , quotaId ) ) ; }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand command ) { org.mockito.Mockito . doReturn ( glusterUtils ) . when ( command ) . getGlusterUtils () ; org.mockito.Mockito . doReturn ( getUpServers () ) . when ( glusterUtils ) . getAllUpServers ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; }
@ org.junit.Before public void setup () { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap () ; cmd . init () ; org.mockito.Mockito . doReturn ( eventQueue ) . when ( cmd ) . getEventQueue () ; }
public void overrideEngineManagedAttributes ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface sourceNic ) { setLabels ( sourceNic . getLabels () ) ; setQosOverridden ( sourceNic . isQosOverridden () ) ; setCustomProperties ( sourceNic . getCustomProperties () ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Quota > searchQuota () { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = genericSearch ( org.ovirt.engine.core.bll.SearchQuery . getDbFacade () . getQuotaDao () , true , null ) ; org.ovirt.engine.core.bll.quota.QuotaManager . getInstance () . updateUsage ( quotaList ) ; return quotaList ; }
@ java.lang.Override public void onSessionExpired () { if ( ( frontend . getLoginHandler () ) != null ) { frontend . getLoginHandler () . onLogout () ; } Window.Location . reload () ; }
@ org.junit.Test ( expected = java.lang.RuntimeException . class ) public void testInvalidToken2 ( ) throws java.lang.Exception { java.lang.String incoming = STRING_CONSTANT ; org.ovirt.otopi.dialog.MachineDialogParser parser = getParser ( incoming , new java.io.ByteArrayOutputStream () ) ; org.ovirt.otopi.dialog.Event.Base bevent ; bevent = parser . nextEvent () ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object . getvm_name () ; }
@ java.lang.Override @ javax.interceptor.ExcludeClassInterceptors public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.core.bll.job.ExecutionContext executionContext ) { return runMultipleActionsImpl ( actionType , parameters , true , false , executionContext ) ; }
@ java.lang.Override public void hideSuggestions () { suggestionPopup . hide ( false ) ; }
protected boolean setAndValidateDiskProfiles () { return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper . setAndValidateDiskProfiles ( java.util.Collections . singletonMap ( org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand . getParameters () . getDiskImage () , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand . getStorageDomainId () ) , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand . getCurrentUser () ) ) ; }
@ org.junit.Test public void useDefaultMTU () { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer > > validate = validate ( new org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer ( NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( ( ( validate . size () ) == NUMBER_CONSTANT ) ) ; }
@ java.lang.Override protected void executeCommand () { addVmToDb () ; org.ovirt.engine.core.common.businessentities.VM vm = getVm () ; if ( vm . getImages () . isEmpty () ) { endVmRelatedOps () ; } else { processImages () ; } setSucceeded ( true ) ; }
private void mockBackend ( org.ovirt.engine.core.bll.AddVmCommand < > cmd ) { org.mockito.Mockito . when ( backend . getResourceManager () ) . thenReturn ( vdsBrokerFrontend ) ; org.mockito.Mockito . doReturn ( backend ) . when ( cmd ) . getBackend () ; }
@ java.lang.Override public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.scheduling.ClusterPolicy ) ( object ) ) . getName () ; }
public final java.lang.Object getData ( java.lang.String key , boolean refresh ) { java.lang.String sessionId = org.ovirt.engine.core.utils.ThreadLocalParamsContainer . getHttpSessionId () ; if ( sessionId == null ) { return null ; } return getData ( sessionId , key , refresh ) ; }
@ java.lang.Override protected void ExecuteVdsBrokerCommand () { super . ExecuteVdsBrokerCommand () ; updateNetConfigDirtyFlag () ; org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand . persistAndEnforceNetworkCompliance ( org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand . getVds () ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand . ProceedProxyReturnValue () ; }
public static java.lang.Integer getMaxVmNameLengthWin () { java.lang.Integer maxVmNameLengthWindows = ( ( java.lang.Integer ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . getConfigValuePreConverted ( ConfigurationValues.MaxVmNameLengthWindows ) ) ) ; if ( maxVmNameLengthWindows == null ) { return NUMBER_CONSTANT ; } return maxVmNameLengthWindows ; }
@ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { return ! ( org.ovirt.engine.core.compat.StringHelper . isNullOrEmpty ( i . getBondName () ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.VmDiskResource getDiskResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVmDiskResource ( parentId , id , this , updateType , getUpdateParametersProvider () , getRequiredUpdateFields () , subCollections ) ) ; }
@ java.lang.Override public void resizeColumn ( com.google.gwt.user.cellview.client.Column < T , > column , int newWidth ) { setColumnWidth ( column , ( newWidth + STRING_CONSTANT ) ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > getAllForEntity ( org.ovirt.engine.core.compat.Guid id ) { return getAllForEntity ( id , null , false ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView () . setAgentTabVisibility ( ( ( java.lang.Boolean ) ( model . getNeutronAgentModel () . isPluginConfigurationAvailable () . getEntity () ) ) ) ; }
protected void noPaddingNoFixes () { org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor . getValidatedWidgetStyle () . clearPadding () ; getCheckboxWidgetLabel () . removeClassName ( org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.CBE_LABEL_PFLY_FIX ) ; getContentWidgetElement () . removeClassName ( org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.CBE_CHECKBOX_PFLY_FIX ) ; getContentWidgetElement () . removeClassName ( Styles.FORM_CONTROL ) ; removeContentWidgetStyleName ( Styles.FORM_CONTROL ) ; }
public java.lang.Integer calcMaxVCpu () { return org.ovirt.engine.core.common.utils.VmCpuCountHelper . calcMaxVCpu ( vm . getStaticData () , vm . getClusterCompatibilityVersion () ) ; }
@ org.junit.Before public void setup () { org.mockito.Mockito . doReturn ( proxyLocator ) . when ( validator ) . getProxyLocator ( org.mockito.Mockito . any ( org.ovirt.engine.core.common.businessentities.VDS . class ) ) ; org.mockito.Mockito . doReturn ( backend ) . when ( validator ) . getBackend () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; allNetworks = networks ; initNetworkModels () ; initDcNetworkParams () ; queryInterfaces () ; }
@ org.junit.Test public void discardIsTrueWhenDiscardAfterDeleteIsTrueAndDomainSupportsDiscard () { assertDiscardValue ( true , true , true ) ; }
private void updateAlerts () { final org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel . getSelectedItem () ; if ( host == null ) { return; } setUpgradeActionStatus ( host ) ; generalModel . setHasUpgradeAlert ( host . isUpdateAvailable () ) ; generalModel . setHasAnyAlert () ; }
@ org.junit.Test public void testCanDoActionCommand ( ) throws java.lang.Exception { mockStoragePoolDAO () ; org.ovirt.engine.core.bll.RemoveQuotaCommand < org.ovirt.engine.core.common.action.QuotaCRUDParameters > removeQuotaCommand = createCommand () ; junit.framework.Assert . assertTrue ( removeQuotaCommand . canDoAction () ) ; }
@ org.junit.Before public void setup () { validator = new org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.UpdateNetworkValidator ( network , vmDao , interfaceDao ) ; }
public static boolean shouldRemoveNetworkFromHostUponNetworkRemoval ( org.ovirt.engine.core.common.businessentities.network.Network persistedNetwork , org.ovirt.engine.core.compat.Version compatibilityVersion ) { return ( ( ! ( persistedNetwork . isExternal () ) ) && ( org.ovirt.engine.core.utils.NetworkUtils . isLabeled ( persistedNetwork ) ) ) && ( org.ovirt.engine.core.bll.network.cluster.NetworkHelper . setupNetworkSupported ( compatibilityVersion ) ) ; }
@ org.junit.Test public void testGetClusterByClusterPolicyIdNegative () { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao . getClustersByClusterPolicyId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; org.junit.Assert . assertEquals ( result . size () , NUMBER_CONSTANT ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Nic postPopulate ( org.ovirt.engine.api.model.Nic model ) { model . setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper . shuffle ( org.ovirt.engine.api.model.NicInterface . class ) . value () ) ; return model ; }
public boolean contains ( org.ovirt.engine.core.searchbackend.SyntaxContainer res , java.lang.String item ) { boolean returnValue = java.util.Arrays . asList ( res . getCompletionArray () ) . contains ( item ) ; if ( ! returnValue ) { this . dumpCompletionArray ( res ) ; } return returnValue ; }
public java.nio.channels.SelectionKey getSelectionKey ( ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ( this . key ) == null ) { connect () ; } return this . key ; }
@ org.junit.Test public void getNonexistentVariable () { org.junit.Assert . assertNull ( dbFacade . getDwhHistoryTimekeepingDao () . get ( DwhHistoryTimekeepingVariable.UNDEFINED ) ) ; }
private void mockDiskDaoGetAllForVm ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks , boolean onlyPluggedDisks ) { org.mockito.Mockito . doReturn ( disks ) . when ( diskDao ) . getAllForVm ( vm . getId () , onlyPluggedDisks ) ; }
private org.ovirt.engine.core.compat.Guid createTaskImpl ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.lang.String description , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitiesMap ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil . createTask ( taskId , this , asyncTaskCreationInfo , getRootCommandType ( parentCommand ) , description , entitiesMap ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.dal.dbbroker.DbFacade . getInstance () . getVdsGroupDao () . get ( _vds . getVdsGroupId () ) ; _parser . cliEnvironmentSet ( VirtEnv.ENABLE , vdsGroup . supportsVirtService () ) ; return null ; }
@ org.junit.Test public void testValidateSuccess () { org.mockito.Mockito . doReturn ( ValidationResult.VALID ) . when ( diskImagesValidator ) . isQcowVersionSupportedForDcVersion () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateSuccess ( cmd ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.bll.provider.RemoveProviderCommand . getDbFacade () . getProviderDao () . remove ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand . getParameters () . getProvider () . getId () ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand . setSucceeded ( true ) ; }
public static void ClearConfigCache () { if ( ( org.ovirt.engine.ui.uicommonweb.DataProvider.CachedConfigValues ) != null ) { org.ovirt.engine.ui.uicommonweb.DataProvider.CachedConfigValues . clear () ; } org.ovirt.engine.ui.uicommonweb.DataProvider.userActionGroups = null ; org.ovirt.engine.ui.uicommonweb.DataProvider.windowsOsTypes = null ; org.ovirt.engine.ui.uicommonweb.DataProvider.linuxOsTypes = null ; org.ovirt.engine.ui.uicommonweb.DataProvider.x64OsTypes = null ; org.ovirt.engine.ui.uicommonweb.DataProvider.hasAdminSystemPermission = null ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { if ( object . isBoot () ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils . fromSafeConstant ( org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants . bootableDisk () ) ; } return null ; }
public boolean isWanOptionsAvailableForMyVm () { boolean isWindowsVm = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . isWindowsOsType ( getEntity () . getOs () ) ; boolean spiceGuestAgentInstalled = ( getEntity () . getSpiceDriverVersion () ) != null ; return isWindowsVm && spiceGuestAgentInstalled ; }
@ java.lang.Override @ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > getAllWithQuery ( java.lang.String query ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > glusterHooks = getJdbcTemplate () . query ( query , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoImpl.glusterHookRowMapper ) ; return glusterHooks ; }
@ org.junit.Before public void setup () { helper = org.mockito.Mockito . spy ( org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelper . getInstance () ) ; org.mockito.Mockito . doReturn ( connExtDaoMock ) . when ( helper ) . getConnectionExtensionDao () ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.NetworkView object ) { return ( object . getNetwork () . getvlan_id () ) == null ? STRING_CONSTANT : object . getNetwork () . getvlan_id () . toString () ; }
private org.ovirt.engine.core.common.businessentities.storage_domains mockStorageDomain ( org.ovirt.engine.core.compat.Guid storageId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { return mockStorageDomain ( storageId , NUMBER_CONSTANT , NUMBER_CONSTANT , storageType ) ; }
public void updateFormItem ( org.ovirt.engine.ui.common.widget.form.FormItem item ) { updateFormItem ( item , NUMBER_CONSTANT ) ; }
@ org.junit.Before public void testSetup () { mockQuotaDao () ; mockVmDao () ; mockStoragePoolDao () ; mockInjections () ; }
@ com.gwtplatform.mvp.client.annotations.ProxyEvent public void onHostSelectionChange ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.HostSelectionChangeEvent event ) { updateMainTabSelection ( event . getSelectedItems () ) ; currentSelectedHost = event . getSelectedItems () . get ( NUMBER_CONSTANT ) ; updateModel ( currentErrataCountModel ) ; }
@ org.junit.Test public void diskSnapshotsExist () { org.junit.Assert . assertEquals ( validator . diskSnapshotsNotExist ( java.util.Arrays . asList ( disk1 . getImageId () , disk2 . getImageId () ) ) , ValidationResult.VALID ) ; }
public org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters createMaintenanceParams () { org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters params = new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( java.util.Collections . singletonList ( org.ovirt.engine.core.bll.hostdeploy.UpgradeHostCommand . getVdsId () ) , true ) ; return withRootCommandInfo ( params , org.ovirt.engine.core.bll.hostdeploy.UpgradeHostCommand . getActionType () ) ; }
protected T getOldQos () { if ( ( oldQos ) == null ) { oldQos = getQosDao () . get ( qos . getId () ) ; } return oldQos ; }
public void addLinks ( java.util.List < org.ovirt.api.metamodel.concepts.Link > newLinks ) { links . addAll ( newLinks ) ; links . sort ( java.util.Comparator . comparing ( Link : : getName ) ) ; }
private void mockDiskImageDao () { org.mockito.Mockito . when ( diskImageDao . getSnapshotById ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract . getDiskImageList () . get ( NUMBER_CONSTANT ) ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.Template get () { switch ( parent . getStorageDomainType () ) { case Data : case Master : return getFromDataDomain () ; case ImportExport : return getFromExportDomain () ; case ISO : case Unknown : default: return null ; } }
public void enableSinglePCI ( boolean enabled ) { getModel () . getIsSingleQxlEnabled () . setIsChangable ( enabled ) ; getModel () . getIsSingleQxlEnabled () . setEntity ( enabled ) ; }
@ org.junit.Test public void parseLunFromXmlRpcReturnsUnknownForNoField ( ) throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xlun = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct () ; org.ovirt.engine.core.common.businessentities.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand . ParseLunFromXmlRpc ( xlun ) ; org.junit.Assert . assertEquals ( StorageType.UNKNOWN , lun . getLunType () ) ; }
public static < R extends org.ovirt.engine.api.model.BaseResource > R addLinks ( javax.ws.rs.core.UriInfo uriInfo , R model ) { return org.ovirt.engine.api.restapi.util.LinkHelper . addLinks ( uriInfo , model , null ) ; }
private static org.ovirt.engine.api.rsdl.ServiceTreeNode buildTree () { return org.ovirt.engine.api.rsdl.ServiceTree . buildNode ( org.ovirt.engine.api.resource.SystemResource . class , STRING_CONSTANT ) ; }
public void InternalSetVmStatus ( org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VMStatus status , org.ovirt.engine.core.common.businessentities.VmExitStatus exitStatus ) { InternalSetVmStatus ( vm , status , exitStatus , StringUtils.EMPTY , VmExitReason.Unknown , vm . getStatusUpdatedTime () ) ; }
protected void mockStoragePoolDao ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { org.mockito.Mockito . when ( storagePoolDaoMock . get ( org.ovirt.engine.core.bll.storage.domain.AbstractGetStorageDomainsWithAttachedStoragePoolGuidQueryTestCase . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( storagePool ) ; }
@ java.lang.SuppressWarnings ( value = STRING_CONSTANT ) public org.ovirt.vdsm.jsonrpc.client.RequestBuilder withOptionalParameterAsMap ( java.lang.String name , java.util.Map value ) { if ( ( value != null ) && ( value . keySet () . isEmpty () ) ) { return withParameter ( name , value ) ; } return this ; }
private static java.lang.String getResourceBundleName () { return STRING_CONSTANT ; }
private void domainsInMaintenanceCheck ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains , org.ovirt.engine.core.common.businessentities.StoragePool pool ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain domainInDb : storageDomains ) { if ( ( domainInDb . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.PreparingForMaintenance ) ) { queueDomainMaintenanceCheck ( domainInDb , pool ) ; } } }
@ org.junit.Test public void updateWithLowerVersionThanHosts () { createSimpleCommand () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuExists () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuManufacturersMatch () ; VdsExistWithHigherVersion () ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS ) ; }
@ org.junit.Test public void updateStoragePool () { createCommandWithDifferentPool () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuExists () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuManufacturersMatch () ; clusterHasVds () ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest . cpuFlagsNotMissing () ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_CHANGE_STORAGE_POOL ) ; }
@ org.junit.Before public void testSetup () { org.mockito.Mockito . when ( quotaDao . getById ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( mockGeneralStorageQuota () ) ; }
@ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase ) ( result . getState () ) ) ; sanStorageModel . postLogin ( result ) ; }
@ java.lang.Override public java.lang.Void runInTransaction () { getNetworkClusterDAO () . remove ( getParameters () . getVdsGroupId () , getParameters () . getNetwork () . getId () ) ; return null ; }
@ java.lang.Override public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object ) { super . edit ( object ) ; if ( object . getIsNew () ) { object . getNumOfDesktops () . setEntity ( NUMBER_CONSTANT ) ; prestartedVmsEditor . setEnabled ( false ) ; } }
@ org.junit.Before public void setUp () { parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; parameters . setVdsId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; command = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.storage.SyncLunsInfoForBlockStorageDomainCommand < org.ovirt.engine.core.common.action.StorageDomainParametersBase > ( parameters ) ) ; }
private void createCommand () { cmd . init () ; org.mockito.Mockito . doReturn ( vdsDao ) . when ( cmd ) . getVdsDao () ; }
@ org.junit.Test public void testGetMessagesBundle () { java.util.ResourceBundle bundle = testTheme . getMessagesBundle () ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , bundle ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , bundle . getString ( STRING_CONSTANT ) ) ; }
@ org.junit.Test public void validateOkSucceeds ( ) throws java.lang.Exception { setupMock () ; command . getParameters () . setJobId ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ; org.junit.Assert . assertTrue ( command . validate () ) ; }
public static org.ovirt.engine.core.common.queries.ValueObjectMap instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader ) throws com.google.gwt.user.client.rpc.SerializationException { org.ovirt.engine.core.common.queries.ValueObjectMap instance = new org.ovirt.engine.core.common.queries.ValueObjectMap () ; return instance ; }
@ java.lang.Override public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData model , java.lang.Boolean value ) { ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( model ) ) . getClone () . setEntity ( value ) ; table . asEditor () . edit ( importModel ) ; }
void logout ( java.lang.Object userObject , org.ovirt.engine.ui.frontend.communication.UserCallback < > callback ) ;
@ java.lang.Override public java.lang.String render ( org.ovirt.engine.core.compat.RpmVersion version ) { java.lang.String formattedVersion ; formattedVersion = version . getRpmName () ; return new org.ovirt.engine.ui.common.widget.renderer.EmptyValueRenderer < java.lang.String > ( org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider . instance () . getApplicationConstants () . unAvailablePropertyLabel () ) . render ( formattedVersion ) ; }
@ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > getAllWithQuery ( java.lang.String query ) { return new org.springframework.jdbc.core.simple.SimpleJdbcTemplate ( jdbcTemplate ) . query ( query , org.ovirt.engine.core.dao.VdsGroupDAODbFacadeImpl.VdsGroupRowMapper.instance ) ; }
public org.ovirt.engine.core.compat.Guid getSourceStorageDomainId () { return getSourceDomainId () . getValue () ; }
@ java.lang.Override protected java.util.Date getRawValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.Erratum > erratum ) { return erratum . getEntity () . getIssued () ; }
public synchronized void clear () { factoriesByType . clear () ; objectsByName . clear () ; }
public java.lang.Object call ( ) throws java.lang.Exception { if ( ( ( java.lang.Boolean ) ( _parser . cliEnvironmentGet ( VdsmEnv.OVIRT_NODE ) ) ) ) { _messages . post ( InstallerMessages.Severity.INFO , STRING_CONSTANT ) ; _setNode () ; } return null ; }
@ java.lang.Override public void run () { org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.InstallVdsInternal , installVdsParameters , new org.ovirt.engine.core.bll.context.CommandContext ( installCtx ) ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.VDS getEntityObject ( org.ovirt.engine.core.common.businessentities.VDS object ) { if ( object instanceof org.ovirt.engine.core.common.businessentities.VDS ) { return object ; } else { return null ; } }
org.ovirt.engine.ui.uicommonweb.validation.ValidationResult Validate ( T value ) ;
protected java.lang.String cdPathWindowsToLinux ( java.lang.String url ) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler . cdPathWindowsToLinux ( url , org.ovirt.engine.core.bll.RunVmCommand . getVm () . getStoragePoolId () , org.ovirt.engine.core.bll.RunVmCommand . getVdsId () ) ; }
public void setStaticData ( org.ovirt.engine.core.common.businessentities.VmStatic value ) { if ( ( vmStatic ) == null ) { vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic () ; } vmStatic = value ; }
public void setExpectedEngineErrors ( java.util.Set < org.ovirt.engine.core.common.errors.EngineError > errors ) { expectedEngineErrors = java.util.Optional . ofNullable ( errors ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.businessentities.BaseDisk generateNewEntity () { return new org.ovirt.engine.core.common.businessentities.BaseDisk ( org.ovirt.engine.core.compat.Guid . NewGuid () , org.ovirt.engine.core.common.businessentities.DiskInterface.SCSI , true , org.ovirt.engine.core.common.businessentities.PropagateErrors.Off , STRING_CONSTANT , STRING_CONSTANT , false , false , true ) ; }
@ org.junit.Test public void testExistsExisting () { org.junit.Assert . assertTrue ( prepareDao () . exists ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ) ; }
@ org.junit.Test public void poolHasDefaultCluster () { org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.mcr . mockConfigValue ( ConfigValues.AutoRegistrationDefaultVdsGroupID , org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.DEFAULT_VDS_GROUP_ID ) ; addDefaultClusterToPool () ; storagePoolWithLocalFS () ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_VDS_GROUP_CANNOT_BE_LOCALFS . toString () ) ; }
public < T > void bind ( java.lang.Class < T > pureClsType , T instance ) { org.ovirt.engine.core.di.InjectorRule.beansCache . put ( pureClsType . getName () , instance ) ; }
@ java.lang.Override public void removeTabWidget ( com.google.gwt.user.client.ui.IsWidget tabWidget ) { mainTabContainer . getElement () . removeChild ( tabWidget . asWidget () . getElement () ) ; }
@ org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenNoDisks ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid . NewGuid () ; initializeCommand ( storageId ) ; mockVm () ; mockVmNetworks () ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap () ; runAndAssertCanDoActionSuccess () ; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk , org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand . getVmDeviceUtils () ) ; }
private void initializeCommand () { org.ovirt.engine.core.common.action.AdElementParametersBase parameters = createParameters () ; command = org.powermock.api.mockito.PowerMockito . spy ( new org.ovirt.engine.core.bll.RemoveAdGroupCommand < org.ovirt.engine.core.common.action.AdElementParametersBase > ( parameters ) ) ; org.powermock.api.mockito.PowerMockito . mockStatic ( org.ovirt.engine.core.bll.MultiLevelAdministrationHandler . class ) ; }
private void newMacPool () { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.NewSharedMacPoolModel ( this , false ) ; model . setEntity ( new org.ovirt.engine.core.common.businessentities.MacPool () ) ; setWindow ( model ) ; }
@ java.lang.Override protected void asyncSearch () { super . asyncSearch () ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend . RegisterQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.MultilevelAdministrationByAdElementIdParameters ( getEntity () . getuser_id () ) ) ) ; setItems ( getAsyncResult () . getData () ) ; }
@ org.junit.Test public void testGetAllForDc () { org.junit.Assert . assertTrue ( ( ( dao . getAllForStoragePoolId ( FixturesTool.STORAGE_POOL_MIXED_TYPES ) . size () ) == NUMBER_CONSTANT ) ) ; org.junit.Assert . assertTrue ( dao . getAllForStoragePoolId ( FixturesTool.STORAGE_POOL_NFS ) . isEmpty () ) ; }
@ java.lang.Override public org.ovirt.engine.api.model.StorageConnection update ( org.ovirt.engine.api.model.StorageConnection connection ) { validateEnums ( org.ovirt.engine.api.model.StorageConnection . class , connection ) ; return performUpdate ( connection , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionById , org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase . class ) , VdcActionType.UpdateStorageServerConnection , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResource.UpdateParametersProvider () ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getAllImageSnapshots () { return org.ovirt.engine.core.bll.ImagesHandler . getAllImageSnapshots ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand . getImage () . getImageId () , org.ovirt.engine.core.bll.MoveOrCopyDiskCommand . getImage () . getImageTemplateId () ) ; }
public void mockCluster ( org.ovirt.engine.core.compat.Version version ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setCompatibilityVersion ( version ) ; org.mockito.Mockito . when ( clusterDao . get ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( cluster ) ; }
private org.ovirt.engine.core.common.businessentities.storage.LunDisk createISCSILunDisk ( org.ovirt.engine.core.common.businessentities.storage.ScsiGenericIO sgio , boolean isUsingScsiReservation , org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest . createISCSILunDisk () ; disk . setSgio ( sgio ) ; disk . setUsingScsiReservation ( isUsingScsiReservation ) ; disk . setDiskInterface ( diskInterface ) ; return disk ; }
public java.lang.String getNfsVersion () { return ( nfsVersion ) == null ? null : nfsVersion . toString () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > repoImages = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) ( model ) ) . invokeClient ( repoImages ) ; }
@ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.Provider provider ) { return network . isExternal () ? provider . getId () . equals ( network . getProvidedBy () . getProviderId () ) : false ; }
public java.lang.Integer getWarningLowSpaceIndicator () { return staticData . getWarningLowSpaceIndicator () ; }
@ java.lang.Override public void configure ( org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice ) { super . configure ( spice ) ; spice . setWANDisableEffects ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects > () ) ; spice . setWanOptionsEnabled ( false ) ; spice . setSpiceProxyEnabled ( isSpiceProxyDefined () ) ; }
protected javax.ws.rs.core.UriInfo setUpUriInfoExpectations () { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations () ; org.easymock.EasyMock . expect ( uriInfo . getPath () ) . andReturn ( STRING_CONSTANT ) . anyTimes () ; return uriInfo ; }
@ java.lang.Override protected void buildVmVideoCards () { createInfo . put ( VdsProperties.display , vm . getDisplayType () . toString () ) ; createInfo . put ( VdsProperties.num_of_monitors , java.lang.String . valueOf ( vm . getNumOfMonitors () ) ) ; }
private org.ovirt.engine.core.vdsbroker.monitoring.VmStatsRefresher getRefresherForVds ( org.ovirt.engine.core.vdsbroker.VdsManager vdsManager , org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager ) { return new org.ovirt.engine.core.vdsbroker.monitoring.EventVmStatsRefresher ( vdsManager , resourceManager ) ; }
@ java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase getRemoveProfileParams ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile ) { return new org.ovirt.engine.core.common.action.DiskProfileParameters ( profile , profile . getId () ) ; }
@ java.lang.Override public void setTooltipFallback ( com.google.gwt.safehtml.shared.SafeHtml tooltipFallback ) {}
@ java.lang.Override public boolean connectStorageToDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase ( storageDomain . getId () ) ; parameters . setVdsId ( vdsId ) ; org.ovirt.engine.core.bll.Backend . getInstance () . runInternalAction ( VdcActionType.SyncLunsInfoForBlockStorageDomain , parameters ) ; return true ; }
@ org.junit.Test public void testNonExistingStorageDomain () { org.mockito.Mockito . doReturn ( null ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters . class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; }
private org.ovirt.engine.core.common.businessentities.VM setUpVmEntityExpectations ( org.ovirt.engine.core.common.businessentities.VM entity , int index ) { org.easymock.EasyMock . expect ( entity . getId () ) . andReturn ( GUIDS [ index ] ) . anyTimes () ; return entity ; }
boolean isSetParentName ( org.ovirt.engine.api.model.Tag tag ) { return ( ( tag . isSetParent () ) && ( tag . getParent () . isSetTag () ) ) && ( tag . getParent () . getTag () . isSetName () ) ; }
@ org.springframework.context.annotation.Bean public javax.enterprise.inject.Instance < org.ovirt.engine.core.dao.Dao > daos () { java.util.Map < java.lang.String , org.ovirt.engine.core.dao.Dao > daoMap = beanFactory . getBeansOfType ( org.ovirt.engine.core.dao.Dao . class ) ; javax.enterprise.inject.Instance < org.ovirt.engine.core.dao.Dao > daos = new org.ovirt.engine.core.dal.CdiIntegration.InstanceImpl ( daoMap . values () ) ; return daos ; }
protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters buildCreateVmParameters () { org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters ( org.ovirt.engine.core.bll.RunVmCommand . getVdsId () , org.ovirt.engine.core.bll.RunVmCommand . getVm () ) ; parameters . setVmInit ( org.ovirt.engine.core.bll.RunVmCommand . getVm () . getVmInit () ) ; return parameters ; }
@ java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue () { if ( org.ovirt.engine.core.bll.UpdateVdsGroupCommand . getParameters () . getIsInternalCommand () ) { return org.ovirt.engine.core.bll.UpdateVdsGroupCommand . getSucceeded () ? org.ovirt.engine.core.common.AuditLogType.SYSTEM_UPDATE_VDS_GROUP : org.ovirt.engine.core.common.AuditLogType.SYSTEM_UPDATE_VDS_GROUP_FAILED ; } else { return org.ovirt.engine.core.bll.UpdateVdsGroupCommand . getSucceeded () ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VDS_GROUP : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VDS_GROUP_FAILED ; } }
@ org.junit.Test public void testAddWithClonePermissionsClone ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Template model = org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest . getModel ( NUMBER_CONSTANT ) ; model . setPermissions ( new org.ovirt.engine.api.model.Permissions () ) ; model . getPermissions () . setClone ( true ) ; doTestAddWithClonePermissions ( model , true ) ; }
@ javax.ws.rs.Path ( value = STRING_CONSTANT ) public org.ovirt.engine.api.resource.PermitsResource getPermitsResource ( ) ;
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { postPrepareSanStorageForEdit ( model , true ) ; }
private void startGeoRepSession () { performGeoRepAction ( STRING_CONSTANT , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants . geoReplicationStartTitle () , HelpTag.volume_geo_rep_start_confirmation , STRING_CONSTANT , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants . startGeoRep () , VdcActionType.StartGlusterVolumeGeoRep , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants . startGeoRepProgressText () ) ; }
public boolean isSetFile () { return ( this . file ) != null ; }
public org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getBackendNics () { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > backendNics = getBackendCollection ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface . class , VdcQueryType.GetVdsInterfacesByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; return new org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( backendNics ) ; }
@ org.junit.Test public void testCleanNotExpiredUsersSessionsNoUsers () { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container . cleanExpiredUsersSessions () ; org.junit.Assert . assertNotNull ( STRING_CONSTANT , container . GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ) ; org.mockito.Mockito . verifyZeroInteractions ( dbUserDAOMcok ) ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.Permission user ) { if ( ( user . getRoleType () ) == ( org.ovirt.engine.core.common.businessentities.RoleType.ADMIN ) ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils . fromSafeConstant ( org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn.constants . admin () ) ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils . fromSafeConstant ( org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn.constants . user () ) ; }
public static java.lang.String toUpperCase ( java.lang.String candidate ) { return ( java.lang.Character . toUpperCase ( candidate . charAt ( NUMBER_CONSTANT ) ) ) + ( candidate . substring ( NUMBER_CONSTANT ) ) ; }
public void setSELinuxEnforceMode ( java.lang.Integer value ) { this . selinuxEnforceMode = org.ovirt.engine.core.common.businessentities.SELinuxMode . fromValue ( value ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { uniqueOsNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue () ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector . getInstance () . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( uniqueOsNames ) ) ; }
@ org.junit.Test public void testDefaultConfigurationValues () { org.junit.Assert . assertEquals ( org.ovirt.engine.core.common.TimeZoneTypeTest.windows . getDefaultTimeZoneConfigurationKey () , ConfigurationValues.DefaultWindowsTimeZone ) ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.common.TimeZoneTypeTest.general . getDefaultTimeZoneConfigurationKey () , ConfigurationValues.DefaultGeneralTimeZone ) ; }
private static java.lang.String buildUrl ( java.lang.String service , java.lang.String params ) { return ( ( STRING_CONSTANT + ( org.ovirt.engine.ui.frontend.utils.BaseContextPathData . getInstance () . getRelativePath () ) ) + service ) + ( params != null ? params : STRING_CONSTANT ) ; }
public void setmethod_id ( int value ) { this . id . methodId = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; }
public void handleVmsFinishedInitOnVds ( org.ovirt.engine.core.compat.Guid vdsId ) { java.util.HashSet < org.ovirt.engine.core.compat.Guid > vms = vdsAndVmsList . get ( vdsId ) ; if ( vms != null ) { getEventListener () . processOnVmStop ( vms ) ; vdsAndVmsList . remove ( vdsId ) ; } }
public boolean canNetworkCompatabilityBeDecreased () { return ( vmNetworkSetCorrectly () . isValid () ) && ( mtuValid () . isValid () ) ; }
@ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < java.lang.String , java.lang.String > () ; } return source ; }
@ java.lang.Override protected org.ovirt.engine.core.compat.Guid getStoragePoolIdFromSourceImageContainer () { return sourceVmFromDb . getStoragePoolId () . getValue () ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getVmDisksFromDB () { org.ovirt.engine.core.bll.VmHandler . updateDisksFromDb ( org.ovirt.engine.core.bll.AddVmTemplateCommand . getVm () ) ; org.ovirt.engine.core.bll.VmHandler . filterImageDisksForVM ( org.ovirt.engine.core.bll.AddVmTemplateCommand . getVm () , false , false , true ) ; return org.ovirt.engine.core.bll.AddVmTemplateCommand . getVm () . getDiskList () ; }
@ org.junit.Test public void passthroughProfileValidProperties () { passthroughProfileContainsSupportedPropertiesTest ( true , false , null , null ) ; org.junit.Assert . assertThat ( validator . passthroughProfileContainsSupportedProperties ( false ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers . isValid () ) ; }
@ java.lang.Override @ org.junit.Before public void setUp ( ) throws java.lang.Exception { super . setUp () ; dao = prepareDAO ( dbFacade . getJobSubjectEntityDao () ) ; }
private void setAllValidationsValid () { org.mockito.Mockito . doReturn ( true ) . when ( command ) . wasNumOfVfsChanged () ; nicExists ( true ) ; sriovFeatureSupported ( true ) ; nicSriovEnabled ( true ) ; allVfsAreFree ( true ) ; numOfVfsInValidRange ( true ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( STRING_CONSTANT . equalsIgnoreCase ( command . getName () ) ) { onSave () ; } }
@ java.lang.Override public org.ovirt.engine.api.model.NIC update ( org.ovirt.engine.api.model.NIC device ) { validateEnums ( org.ovirt.engine.api.model.NIC . class , device ) ; if ( ( device . isSetPortMirroring () ) || ( device . isSetNetwork () ) ) { validatePortMirroring ( device ) ; } return super . update ( device ) ; }
@ org.junit.Test public void testExecuteQueryWithFilteringLUNsEnabled () { org.ovirt.engine.core.bll.storage.GetDeviceListQueryTest.mcr . mockConfigValue ( ConfigValues.FilteringLUNsEnabled , Version.v3_1 . toString () , true ) ; lunsExpected = java.util.Collections . emptyList () ; internalExecuteQuery () ; }
@ java.lang.Override public void vnicCreated ( org.ovirt.engine.core.compat.Guid vmId ) { getWindow () . stopProgress () ; cancel () ; updateActionAvailability () ; }
public void osTypeChanged ( java.lang.Integer selectedItem ) { isWindowsOS = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider . isWindowsOsType ( selectedItem ) ; getDomain () . setIsAvailable ( ( ( selectedItem != null ) && ( isWindowsOS ) ) ) ; }
@ java.lang.Override protected void initLinked () { if ( hotUpdateSupported ) { getLinked () . setEntity ( true ) ; } else { getLinked () . setEntity ( true ) ; getLinked () . setIsAvailable ( false ) ; } }
@ java.lang.Override protected void setUpQueryExpectations ( java.lang.String query ) throws java.lang.Exception { assert query . equals ( STRING_CONSTANT ) ; setUpGetEntityExpectations ( true ) ; control . replay () ; }
public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap getAll () { return filter ( new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap.Predicate () { @ java.lang.Override public boolean apply ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig config ) { return true ; } } ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateBootSequenceItems () ; bootSequenceBox . setSelectedIndex ( bootSequenceModel . getSelectedItemIndex () ) ; }
@ java.lang.Override public void freeMac ( java.lang.String mac ) { macsStorage . freeMac ( org.ovirt.engine.core.utils.MacAddressRangeUtils . macToLong ( mac ) ) ; }
private boolean isVmMigratingToThisVds () { return ( ( dbVm . getStatus () ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) && ( getVdsManager () . getVdsId () . equals ( dbVm . getMigratingToVds () ) ) ; }
protected boolean isVmDuringInitiating ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( java.lang.Boolean ) ( getBackend () . getResourceManager () . RunVdsCommand ( VDSCommandType.IsVmDuringInitiating , new org.ovirt.engine.core.common.vdscommands.IsVmDuringInitiatingVDSCommandParameters ( vm . getId () ) ) . getReturnValue () ) ) . booleanValue () ; }
public org.ovirt.engine.ui.uicompat.Constants getConstants () { return constants ; }
private boolean supportsGlusterSnapshotFeature ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return ( cluster . supportsGlusterService () ) && ( getGlusterUtil () . isGlusterSnapshotSupported ( cluster . getCompatibilityVersion () , cluster . getId () ) ) ; }
public static void getAllVmTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , final boolean refresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter () ; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase () ; params . setRefresh ( refresh ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetAllVmTemplates , params , aQuery ) ; }
@ java.lang.Override public org.ovirt.engine.api.resource.FilterResource getSubResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendFilterResource ( id , schedulingPolicyId ) ) ; }
public static void getTemplateListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter () ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VdcQueryType.GetVmTemplatesByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void setReportBaseUrl ( java.lang.String reportBaseUrl ) { this . reportBaseUrl = reportBaseUrl ; this . urlInitialized = true ; checkIfInitFinished () ; }
public static < K , V > org.ovirt.engine.core.bll.tasks.CacheWrapper < K , V > getCacheWrapper ( java.lang.String name ) { return new org.ovirt.engine.core.bll.tasks.MapWrapperImpl < K , V > () ; }
public void setUri ( java.lang.String uri ) { if ( org.ovirt.engine.ui.uicommonweb.ReportInit . getInstance () . isCommunityEdition () ) { htmlParams . setParameter ( STRING_CONSTANT , uri ) ; } else { htmlParams . setParameter ( STRING_CONSTANT , uri ) ; } }
public static org.ovirt.engine.core.common.job.Step addStep ( org.ovirt.engine.core.bll.job.ExecutionContext context , org.ovirt.engine.core.common.job.StepEnum stepName , java.lang.String description ) { return org.ovirt.engine.core.bll.job.ExecutionHandler . addStep ( context , stepName , description , false ) ; }
@ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel createModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior ) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster () ; cluster . setCompatibilityVersion ( org.ovirt.engine.ui.uicommonweb.models.vms.CLUSTER_VERSION ) ; org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel ( behavior ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster getSelectedCluster () { return cluster ; } } ; return model ; }
@ java.lang.Override @ org.junit.Test public void testList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setupGetStorageDomainExpectations ( StorageDomainType.ISO ) ; setUpQueryExpectations ( STRING_CONSTANT ) ; collection . setUriInfo ( uriInfo ) ; verifyCollection ( getCollection () ) ; }
@ org.junit.Test public void timeoutObject () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase () ; final java.lang.String s = STRING_CONSTANT ; t . setTimeoutObjectId ( s ) ; org.junit.Assert . assertEquals ( t . getTimeoutObjectId () , s ) ; }
@ java.lang.Override protected boolean validate () { return ( ( validate ( getVfsConfigValidator () . nicExists () ) ) && ( validate ( getVfsConfigValidator () . nicSriovEnabled () ) ) ) && ( validate ( getVfsConfigValidator () . sriovFeatureSupported () ) ) ; }
@ java.lang.Override protected org.ovirt.engine.api.model.Qos postPopulate ( org.ovirt.engine.api.model.Qos model ) { model = super . postPopulate ( model ) ; model . setType ( QosType.NETWORK . name () . toLowerCase () ) ; return model ; }
private boolean validateAttachment () { final org.ovirt.engine.core.bll.network.cluster.UpdateNetworkClusterValidator networkClusterValidator = createNetworkClusterValidator () ; return ( validate ( networkClusterValidator . managementNetworkUnset () ) ) && ( super . validateAttachment ( networkClusterValidator ) ) ; }
@ org.junit.Test public void validateFailsOnVolumeWithoutAsyncTask () { cmd = org.mockito.Mockito . spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithoutAsyncTask , getBricks ( volumeWithoutAsyncTask ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert . assertFalse ( cmd . validate () ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.StoragePool value ) { privateEntity = value ; initSelectedMacPool () ; }
protected void mockVds () { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS () ; vds . setClusterCompatibilityVersion ( org.ovirt.engine.core.compat.Version . getLast () ) ; org.mockito.Mockito . when ( vdsDao . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( vds ) ; }
@ org.junit.Test public void compareWhenSizesAreNotEqual () { attachVmDisksToStorageDomain ( storageDomain1 , vmDisk1 , vmDisk2 ) ; attachVmDisksToStorageDomain ( storageDomain2 , vmDisk3 ) ; initComparator ( vmDisk1 , vmDisk2 , vmDisk3 ) ; assertBiggerThan ( storageDomain1 , storageDomain2 ) ; assertSmallerThan ( storageDomain2 , storageDomain1 ) ; }
private void cancel () { sourceListModel . setWindow ( null ) ; sourceListModel . setConfirmWindow ( null ) ; }
@ java.lang.Override public boolean isInInit () { return ( ( this . nioEngine ) != null ) && ( this . nioEngine . handshakeInProgress () ) ; }
private static java.util.ResourceBundle readMessagesFromBundle () { try { return java.util.ResourceBundle . getBundle ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.APP_ERRORS_MESSAGES_FILE_NAME ) ; } catch ( java.util.MissingResourceException e ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log . error ( ( STRING_CONSTANT + ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.APP_ERRORS_MESSAGES_FILE_NAME ) ) ) ; throw new org.ovirt.engine.core.compat.ApplicationException ( e ) ; } }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > newItems = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue () ; java.util.Collections . sort ( newItems , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator () ) ; setItems ( newItems ) ; }
private void initInfoIcon () { raidParamsInfoIcon = new org.ovirt.engine.ui.common.widget.dialog.InfoIcon ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.templates . italicText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants . raidConfigurationWarning () ) ) ; }
@ org.junit.Before public void testSetup () { org.mockito.Mockito . doReturn ( quotaDao ) . when ( command ) . getQuotaDao () ; org.mockito.Mockito . when ( quotaDao . getById ( org.mockito.Matchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( mockGeneralStorageQuota () ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { context.dataCenterFoundByName = org.ovirt.engine.ui.uicommonweb.Linq . firstOrNull ( ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) ; prepare2 () ; }
@ org.junit.Test public void poolUpdateOvfStoreOnAnyDomainSupported ( ) throws java.lang.Exception { org.mockito.Mockito . doReturn ( true ) . when ( ovfDataUpdater ) . ovfOnAnyDomainSupported ( org.mockito.Matchers . any ( org.ovirt.engine.core.common.businessentities.StoragePool . class ) ) ; ovfDataUpdater . ovfUpdateTimer () ; verify ( java.lang.Boolean.TRUE ) ; }
public org.ovirt.engine.core.common.businessentities.IVdsEventListener getEventListener () { org.ovirt.engine.core.common.businessentities.IVdsEventListener eventListener = org.ovirt.engine.core.utils.ejb.EjbUtils . findBean ( BeanType.VDS_EVENT_LISTENER , BeanProxyType.LOCAL ) ; if ( eventListener != null ) { return eventListener ; } else { return this ; } }
private void setupMock ( ) throws java.lang.Exception { org.mockito.Mockito . doReturn ( jobDaoMock ) . when ( commandMock ) . getJobDao () ; }
@ org.codehaus.jackson.annotate.JsonIgnore @ java.lang.Override public java.lang.String getName () { return getname () ; }
public void setIsDisksAvailable ( boolean value ) { if ( ( isDisksAvailable ) != value ) { isDisksAvailable = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface . getId () , iface . getName () , false , bondName , null , null , true ) ; }
@ java.lang.Override protected void processImages () { processImages ( ( ! ( org.ovirt.engine.core.bll.ImportVmCommand . isImagesAlreadyOnTarget () ) ) ) ; if ( getReturnValue () . getVdsmTaskIdList () . isEmpty () ) { endVmRelatedOps () ; } }
@ java.lang.Override public org.ovirt.engine.core.compat.Guid eval ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return diskImage . getId () . getValue () ; }
@ java.lang.Override protected org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > createCommand () { initVM () ; return new org.ovirt.engine.core.bll.AddVmCommand ( new org.ovirt.engine.core.common.action.AddVmParameters ( vm ) , null ) ; }
@ java.lang.Override public void setTitle ( java.lang.String title ) { org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView . asWidget () . setHeader ( new com.google.gwt.user.client.ui.Label ( title ) ) ; }
@ java.lang.Override public org.ovirt.engine.core.compat.Guid getQuotaId () { return getParameters () . getQuotaId () ; }
public void newNetwork () { if ( ( getWindow () ) != null ) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkModel ( this ) ; setWindow ( networkModel ) ; networkModel . startProgress ( null ) ; initDcList ( networkModel ) ; }
public org.ovirt.engine.core.common.businessentities.VolumeType getSelectedVolumeType () { if ( ( ( java.lang.Boolean ) ( collapseSnapshots . getEntity () ) ) && ( ( selectedVolumeType ) != null ) ) { return selectedVolumeType ; } return getVolumeType () ; }
public java.lang.String getSearchString () { return ( searchString ) + ( ( pagingSearchString ) == null ? STRING_CONSTANT : pagingSearchString ) ; }
private boolean logicalNetworkExists () { if ( ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand . getNetworkDAO () . get ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand . getParameters () . getNetworkCluster () . getnetwork_id () ) ) != null ) { return true ; } addCanDoActionMessage ( VdcBllMessages.NETWORK_NOT_EXISTS ) ; return false ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.GuestContainer row ) { return org.ovirt.engine.ui.uicompat.external.StringUtils . join ( row . getNames () , STRING_CONSTANT ) ; }
private void mockDaos () { mockVmDao () ; mockDiskImageDao () ; mockStorageDomainDao () ; mockStoragePoolDao () ; mockValidators () ; }
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { runMultipleAction ( actionType , parameters , null , null , true , false ) ; }
public void registerProfile ( org.ovirt.engine.core.aaa.AuthenticationProfile profile ) { profiles . put ( profile . getName () , profile ) ; }
void updateColumnsAvailability ( org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model ) { setShowVolumeType ( model . getIsVolumeFormatAvailable () ) ; setShowQuota ( ( ( model . getQuotaEnforcementType () ) != ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) ) ; localize ( constants ) ; }
@ java.lang.Override protected void executeCommand () { org.ovirt.engine.core.compat.Guid secretUuid = getParameters () . getLibvirtSecret () . getId () ; addCustomValue ( STRING_CONSTANT , secretUuid . toString () ) ; getReturnValue () . setActionReturnValue ( secretUuid ) ; }
@ java.lang.Override public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object ) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn () . getValue ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm () ) ; }
@ org.junit.Before public void setup ( ) throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { mockVmPropertiesUtils () ; mockOsRepository () ; org.mockito.Mockito . doReturn ( snapshotValidator ) . when ( runVmValidator ) . getSnapshotValidator () ; }
@ java.lang.Override public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { org.ovirt.engine.core.bll.CommandBase < > commandBase = getCommand ( cmdId ) ; commandBase . getParameters () . setTaskGroupSuccess ( false ) ; endAction ( commandBase , childCmdIds ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain initStorageDomain () { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain () ; storageDomain . setId ( org.ovirt.engine.core.compat.Guid . newGuid () ) ; storageDomain . setStorageDomainType ( StorageDomainType.Data ) ; storageDomain . setStatus ( StorageDomainStatus.Active ) ; return storageDomain ; }
protected java.lang.String clusterVersion () { return java.lang.String . format ( STRING_CONSTANT , version ) ; }
@ java.lang.Override public void updateCommandData ( final org.ovirt.engine.core.compat.Guid commandId , final java.util.Map < java.lang.String , java.io.Serializable > data ) { commandsRepository . getCommandsCache () . updateCommandData ( commandId , data ) ; }
private void isAutoAssign_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getIsAutoAssign () . getEntity () ) == false ) { getDefaultHost () . setIsChangeable ( true ) ; } }
@ org.junit.Test public void testBeanValidations () { initializeMock () ; org.junit.Assert . assertTrue ( cmd . validateInputs () ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Qos model , org.ovirt.engine.core.common.businessentities.qos.QosBase entity ) { org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.qos.QosBase > parameters = new org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.qos.QosBase > () ; parameters . setQosId ( guid ) ; parameters . setQos ( map ( incoming , entity ) ) ; return parameters ; }
public java.util.Map < java.lang.String , java.lang.Object > getDomainMap () { return domainMap ; }
public static boolean checkImagesLocked ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < java.lang.String > messages ) { return org.ovirt.engine.core.bll.ImagesHandler . checkImagesLocked ( vm , messages , org.ovirt.engine.core.bll.ImagesHandler . getImages ( vm , null ) ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability () ; }
@ org.junit.Test public void testVmFailNoDisks () { org.ovirt.engine.core.bll.validator.RunVmValidatorTest . validateResult ( runVmValidator . validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM () , new java.util.ArrayList <> () , null ) , false , EngineMessage.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK ) ; }
protected void failedToMigrate () { try { determineMigrationFailureForAuditLog () ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmCommand . setSucceeded ( false ) ; failedToRunVm () ; } finally { org.ovirt.engine.core.bll.MigrateVmCommand . freeLock () ; } }
public static void log ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable ) { org.ovirt.engine.core.common.AuditLogType logType = auditLogable . getAuditLogTypeValue () ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector . log ( auditLogable , logType ) ; }
@ org.junit.Test public void testStopFence ( ) throws java.lang.Exception { doTestFence ( FenceType.STOP , VdcActionType.StopVds , FenceActionType.STOP ) ; }
@ org.junit.Test public void testValidateUniqueTemplateNameInDC () { org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand command = setupVolumeFormatAndTypeTest ( VolumeFormat.RAW , VolumeType.Preallocated , StorageType.NFS ) ; org.mockito.Mockito . doReturn ( true ) . when ( command ) . isVmTemplateWithSameNameExist () ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS ) ; }
private void hideLabels () { passwordEditor . hideLabel () ; publicKeyEditor . hideLabel () ; overrideIpTablesEditor . hideLabel () ; activateHostAfterInstallEditor . hideLabel () ; }
public abstract boolean equalValues ( org.ovirt.engine.core.common.businessentities.qos.QosBase other ) ;
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { editedVm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) ; vmInitLoaded ( editedVm ) ; }
private void assertGetAllRelevantQuoatsForVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroupId , int expectedQuotas ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = dao . getAllRelevantQuotasForVdsGroup ( vdsGroupId ) ; org.junit.Assert . assertEquals ( STRING_CONSTANT , expectedQuotas , quotas . size () ) ; }
private void mockProxySourcesForFencedHost ( java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType > fenceProxySources ) { org.mockito.Mockito . doReturn ( fenceProxySources ) . when ( fencedHost ) . getFenceProxySources () ; }
public void importVms ( org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback ) { startProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend . getInstance () . runMultipleAction ( VdcActionType.ImportVm , buildImportVmParameters () , callback , this ) ; }
private long getHeartbeatTime () { return ( java.lang.System . currentTimeMillis () ) - ( ( this . lastIncomingHeartbeat ) + ( this . policy . getIncomingHeartbeat () ) ) ; }
@ java.lang.Override public void update ( T entity ) { org.ovirt.engine.core.dao.DefaultGenericDaoDbFacade . getCallsHandler () . executeModification ( getProcedureNameForUpdate () , createFullParametersMapper ( entity ) ) ; }
private void prepareInterfaceMocks () { org.mockito.Mockito . doReturn ( getNetworks () ) . when ( networkDao ) . getAllForCluster ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ; org.mockito.Mockito . doReturn ( getNetworkInterfaces () ) . when ( interfaceDao ) . getAllInterfacesForVds ( serverId ) ; }
public static < T > org.ovirt.engine.ui.common.widget.editor.TakesValueWithChangeHandlersEditor < T > of ( com.google.gwt.user.client.TakesValue < T > peer , com.google.gwt.event.logical.shared.HasValueChangeHandlers < T > peerWithValueChangeHandlers ) { return new org.ovirt.engine.ui.common.widget.editor.TakesValueWithChangeHandlersEditor < T > ( peer , peerWithValueChangeHandlers ) ; }
@ java.lang.Override public org.ovirt.engine.core.common.businessentities.DbGroup getByExternalId ( java.lang.String domain , org.ovirt.engine.core.common.utils.ExternalId externalId ) { return getCallsHandler () . executeRead ( STRING_CONSTANT , org.ovirt.engine.core.dao.DbGroupDAODbFacadeImpl.DbGroupRowMapper.instance , getCustomMapSqlParameterSource () . addValue ( STRING_CONSTANT , domain ) . addValue ( STRING_CONSTANT , externalId . getBytes () ) ) ; }
protected void setSuperItems ( java.lang.Iterable value ) { super . setItems ( value ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > list = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( getItems () ) ) ; }
@ java.lang.Override public void hideAndUnbind () { super . hideAndUnbind () ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget . getView () . cleanup () ; this . model . cleanup () ; this . model = null ; }
public void updateGlusterHookStatus ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) ;
@ org.junit.Test public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations () ) ; setUpGetEntityExpectations ( NUMBER_CONSTANT , true ) ; control . replay () ; verifyModel ( resource . get () , NUMBER_CONSTANT ) ; }
public void setstorage_name ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper . EqOp ( getStorageStaticData () . getstorage_name () , value ) ) ) { getStorageStaticData () . setstorage_name ( value ) ; } }
public static boolean isHotUnpluggable ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { return ( vmDevice . getType () ) != ( org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY ) ; }
@ org.junit.Test public void vdsIdRef () { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase () ; b . setVdsIdRef ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.compat.Guid g = b . getVdsIdRef () ; org.junit.Assert . assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService swiftService = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService ) ( returnValue ) ) ; if ( swiftService != null ) { setGlusterSwiftStatus ( swiftService . getStatus () ) ; } else { setGlusterSwiftStatus ( GlusterServiceStatus.UNKNOWN ) ; } }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getIso () . setIsChangeable ( getAttachDrivers () . getEntity () ) ; updateWindowsWarningMessage () ; }
@ org.junit.Test public void shouldElectActiveSharedDataDomain () { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareSharedStorageDomainForElection ( StorageDomainStatus.Active , STRING_CONSTANT ) ; org.junit.Assert . assertEquals ( domain , cmd . electNewMaster () ) ; }
public void setvds_group_compatibility_version ( org.ovirt.engine.core.compat.Version value ) { if ( org.ovirt.engine.core.compat.Version . OpInequality ( vds_group_compatibility_versionField , value ) ) { this . vds_group_compatibility_versionField = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( STRING_CONSTANT ) ) ; } }
@ java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue () { switch ( org.ovirt.engine.core.bll.RemoveVmTemplateFromImportExportCommand . getActionState () ) { case EXECUTE : return org.ovirt.engine.core.bll.RemoveVmTemplateFromImportExportCommand . getSucceeded () ? org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE : org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE_FAILED ; default: return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED ; } }
public void setRetryPolicy ( org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy policy ) { this . policy = policy ; }
@ java.lang.Override public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VDS , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.GlusterHooksList , new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ( upServer . getId () ) ) ; return new org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VDS , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > ( upServer , returnValue ) ; }
@ org.junit.Test public void canRunVmFailStatelessWhenVmHAwithNullStatelessParam () { org.ovirt.engine.core.bll.RunVmCommandTest . canRunStatelessVmTest ( true , true , null , false ) ; }
public boolean isTaskOfType ( org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport supportObj , org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType type ) { if ( ( ( supportObj . getAsyncTask () ) != null ) && ( ( supportObj . getAsyncTask () . getType () ) == type ) ) { return true ; } return false ; }
@ java.lang.Override public boolean match ( java.lang.String s ) { return vm . getCurrentCd () . equals ( s ) ; }
@ java.lang.Override public boolean matches ( java.lang.Object argument ) { if ( argument instanceof org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ) { return ( ( ( org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ) ( argument ) ) . getConfigValue () ) == configValue ; } return false ; }
public org.ovirt.engine.core.searchbackend.IAutoCompleter getObjectRelationshipAutoCompleter ( java.lang.String obj ) { return StringConditionRelationAutoCompleter.INSTANCE ; }
public abstract com.google.gwt.safehtml.shared.SafeHtml getTooltip ( T object ) ;
private void updateProperties () { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = ( ( org.ovirt.engine.core.common.businessentities.aaa.DbUser ) ( getEntity () ) ) ; setDomain ( user . getDomain () ) ; setEmail ( user . getEmail () ) ; setActive ( user . isActive () ) ; }
protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable < T > getTable () { return table ; }
@ java.lang.Override public void initTable () { getTable () . enableColumnResizing () ; addGeneralTypeColumn () ; addDeviceTypeColumn () ; addAddressColumn () ; addBootOrderColumn () ; addReadOnlyColumn () ; addPluggedColumn () ; addManagedColumn () ; addSpecParamsColumn () ; }
@ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { populateRoles ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Role > ) ( result ) ) ) ; }
private void setNetworks ( java.util.Map < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > networks ) { networkMap = networks ; getNetworksChangedEvent () . raise ( this , EventArgs.EMPTY ) ; }
@ java.lang.Override public java.util.Set < java.lang.String > getConsumedEvents () { java.util.Set < java.lang.String > set = new java.util.HashSet < java.lang.String > () ; set . add ( BrowserEvents.CLICK ) ; set . addAll ( super . getConsumedEvents () ) ; return set ; }
@ org.junit.Test public void testGetAllForStoragePool () { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . getAllForStoragePool ( org.ovirt.engine.core.dao.StorageDomainDAOTest.EXISTING_STORAGE_POOL_ID ) ; org.ovirt.engine.core.dao.StorageDomainDAOTest . assertGetAllForStoragePoolResult ( result ) ; }
@ java.lang.Override public void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.storage_pool storagePool , boolean isNewSpm ) { if ( isNewSpm ) { org.ovirt.engine.core.bll.AsyncTaskManager . getInstance () . StopStoragePoolTasks ( storagePool ) ; } { org.ovirt.engine.core.bll.AsyncTaskManager . getInstance () . AddStoragePoolExistingTasks ( storagePool ) ; } }
@ java.lang.Override protected void ActiveDetailModelChanged () { super . ActiveDetailModelChanged () ; OnCollapseSnapshotsChanged () ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { mappings . setExplanation ( org.ovirt.engine.ui.webadmin.widget.provider.NeutronAgentWidget.templates . italicText ( ( ( java.lang.String ) ( model . getInterfaceMappingsExplanation () . getEntity () ) ) ) ) ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip () { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigPopupView.templates . textForCheckBoxHeader ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigPopupView.constants . attachAll () ) ; }
@ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object ) { return org.ovirt.engine.ui.uicompat.external.StringUtils . join ( object . getDnsServers () , STRING_CONSTANT ) ; }
@ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateSysprepVisibility ( object ) ; updateInitialRunTabVisibility ( object ) ; }
protected java.util.Map [] getVmInfo ( java.util.List < java.lang.String > vmsToUpdate ) { return ( ( java.util.Map [] ) ( new org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand < org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters > ( new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters ( _vds . getId () , vmsToUpdate ) ) . executeWithReturnValue () ) ) ; }
@ org.junit.Test public void testAlreadyExistStorageDomain () { org.mockito.Mockito . when ( storageDomainStaticDao . get ( org.mockito.ArgumentMatchers . any ( org.ovirt.engine.core.compat.Guid . class ) ) ) . thenReturn ( parameters . getStorageDomain () ) ; org.ovirt.engine.core.bll.ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; }
@ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip () { return com.google.gwt.safehtml.shared.SafeHtmlUtils . fromSafeConstant ( org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostVmView.constants . shutDownVm () ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getVmImageDisks () { if ( ( cachedVmImageDisks ) == null ) { cachedVmImageDisks = org.ovirt.engine.core.bll.ImagesHandler . filterImageDisks ( getVmDisks () , true , false ) ; } return cachedVmImageDisks ; }
public static void setEngineSessionId ( javax.servlet.http.HttpSession session , java.lang.String sessionId ) { org.ovirt.engine.api.common.security.auth.SessionUtils.log . debug ( ( STRING_CONSTANT + sessionId ) ) ; session . setAttribute ( org.ovirt.engine.api.common.security.auth.SessionUtils.ENGINE_SESSION_ID_KEY , sessionId ) ; }
@ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper . stringsEqual ( command . getName () , STRING_CONSTANT ) ) { cancel () ; } }
