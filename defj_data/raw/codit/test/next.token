return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
if ( y >= TWO_POWER_53 || y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
final double n1n2prod = n1 * n2 ;
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
{ return getChromosomes () . iterator () ; }
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
if ( divisor.isZero ) { return NaN ; }
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Iterator iter = entries . iterator () ;
Iterator iter = entries . iterator () ;
Iterator iter = entries . iterator () ;
Iterator iter = entries . iterator () ;
double sum = NUMBER_CONSTANT ;
return fit ( guess ) ;
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
{ return solve ( f , min , max ) ; }
{ return getPct ( ( Comparable < > ) v ) ; }
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
final BigDecimal [] out = new BigDecimal [ nRows ] ;
final double [] out = new double [ nRows ] ;
final int cols = problem . getUnboundParameters () . length ;
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
c . canInline ( t . getScope () )
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
options.dependencyOptions . needsManagement () && options.closurePass
cc . addOp ( opStr , true ) ;
if ( ( x < NUMBER_CONSTANT || negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
return TernaryValue.UNKNOWN ;
return false ;
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
Context rhsContext = getContextForNoInOperator ( context ) ;
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
{ return anyCollection () ; }
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
{ return anyMap () ; }
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
{ return anySet () ; }
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
{ return anyList () ; }
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
return getMock ( invocation , returnTypeGenericMetadata ) ;
new Reporter () . smartNullPointerException ( obj , location ) ;
if ( dataset == null ) { return result ; }
{ this ( time , zone , Locale . getDefault () ) ; }
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
setDataset ( dataset ) ;
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
return m != null && m . containsKey ( value ) ;
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
{ escapeJavaStyleString ( out , str , true , true ) ; }
{ return escapeJavaStyleString ( str , true , true ) ; }
{ escapeJavaStyleString ( out , str , false , false ) ; }
{ return escapeJavaStyleString ( str , false , false ) ; }
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
if ( chars [ i ] == CHAR_CONS || chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
{ return availableLocaleList () . contains ( locale ) ; }
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
i < size
i < this . size
int len = size - strLen + NUMBER_CONSTANT ;
String cs
