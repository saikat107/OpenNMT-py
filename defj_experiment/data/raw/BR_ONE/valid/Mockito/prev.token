MockitoOperations . reportControlForStubbing ( null ) ;
MockitoOperations . reportControlForStubbing ( this ) ;
control . replay () ;
control . replay () ;
{ control . verify () ; }
{ mock . simpleMethodWithArgument ( STRING_CONSTANT ) ; mock . simpleMethodWithArgument ( STRING_CONSTANT ) ; control . verify () ; }
public void addInvocation ( MockitoInvocation invocation ) { this . registeredInvocations . add ( invocation ) ; }
behavior . addInvocation ( invocation ) ;
return proxyFactory . createProxy ( toMock , new ObjectMethodsFilter ( toMock , new MockInvocationHandler ( this ) , name ) ) ;
return proxyFactory . createProxy ( toMock , new ObjectMethodsFilter ( toMock , new MockInvocationHandler ( this ) , null ) ) ;
Field methodField = retrieveField ( ObjectMethodsFilter . class , correctMethod . getName () + STRING_CONSTANT ) ;
throw new AssertionErrorWrapper ( new AssertionError ( STRING_CONSTANT + actual . toString ( MockControl.EQUALS_MATCHER ) + STRING_CONSTANT + errorMessage . toString () ) ) ;
if ( returnedType . isPrimitive () ) { returnedType = ToTypeMappings.primitiveToWrapperType . get ( returnedType ) ; }
stub ( mock . oneArg ( Matchers . find ( STRING_CONSTANT ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . threeArgumentMethod ( eq ( NUMBER_CONSTANT ) , Matchers . not ( notNull () ) , eq ( STRING_CONSTANT ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . threeArgumentMethod ( eq ( NUMBER_CONSTANT ) , Matchers . not ( isNull () ) , eq ( STRING_CONSTANT ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . oneArg ( Matchers . or ( eq ( NUMBER_CONSTANT ) , eq ( NUMBER_CONSTANT ) ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . oneArg ( Matchers . cmpEq ( new BigDecimal ( STRING_CONSTANT ) ) ) ) . andReturn ( STRING_CONSTANT ) ;
assertThat ( new ExpectedInvocation ( invocation , null ) . hashCode () , equalTo ( NUMBER_CONSTANT ) ) ;
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return first ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return null ; }
{ LastArguments . reportNot () ; return NUMBER_CONSTANT ; }
{ LastArguments . reportNot () ; return false ; }
{ LastArguments . reportNot () ; return NUMBER_CONSTANT ; }
{ LastArguments . reportNot () ; return NUMBER_CONSTANT ; }
{ LastArguments . reportNot () ; return first ; }
{ LastArguments . reportNot () ; return NUMBER_CONSTANT ; }
{ LastArguments . reportNot () ; return NUMBER_CONSTANT ; }
{ LastArguments . reportNot () ; return NUMBER_CONSTANT ; }
{ LastArguments . reportNot () ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new ArrayEquals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new Find ( regex ) ) ; return null ; }
{ LastArguments . reportMatcher ( new StartsWith ( prefix ) ) ; return null ; }
{ LastArguments . reportMatcher ( new EndsWith ( suffix ) ) ; return null ; }
{ LastArguments . reportMatcher ( new Same ( value ) ) ; return null ; }
{ LastArguments . reportOr ( NUMBER_CONSTANT ) ; return false ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return null ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportAnd ( NUMBER_CONSTANT ) ; return false ; }
{ LastArguments . reportMatcher ( new Contains ( substring ) ) ; return null ; }
public MethodSelector < T > toThrow ( Throwable throwable ) { MockitoOperations . reportThrowableToBeSetOnVoidMethod ( throwable ) ; return this ; }
{ MockitoOperations . reportVerifyingMode ( VerifyingMode . times ( exactNumberOfInvocations ) ) ; return mock ; }
{ MockUtil . validateMock ( mock ) ; MockitoOperations . reportVerifyingMode ( VerifyingMode . anyTimes () ) ; return mock ; }
{ LastArguments . reportMatcher ( new EqualsWithDelta ( value , delta ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new EqualsWithDelta ( value , delta ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Matches ( regex ) ) ; return null ; }
{ LastArguments . reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
{ LastArguments . reportMatcher ( Null.NULL ) ; return null ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return null ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return NUMBER_CONSTANT ; }
{ LastArguments . reportMatcher ( new Equals ( value ) ) ; return false ; }
{ LastArguments . reportMatcher ( new InstanceOf ( clazz ) ) ; return null ; }
{ LastArguments . reportMatcher ( Any.ANY ) ; return null ; }
MockitoExpectation controlToStub = MockitoState . instance () . controlToBeStubbed () ;
public synchronized void verifyingStarted ( VerifyingMode verify ) { verifyingModeLocal . set ( verify ) ; }
assertFalse ( state . mockVerificationScenario () ) ;
public void setMock ( Object mock ) { this . mock = mock ; }
MockitoInvocation lastInvocation = behavior . lastInvocation () ;
assertSame ( mode , mockitoState . verifyingCompleted () ) ;
MockitoInvocation invocation
MockitoInvocation invocation = registeredInvocation . getInvocation () ;
assertNull ( MockitoState . instance () . removeControlToBeStubbed () ) ;
MockitoExpectation controlToStub = MockitoState . instance () . removeControlToBeStubbed () ;
public MethodSelector < T > toThrow ( Throwable throwable ) { mockitoState . reportThrowableToBeSetOnVoidMethod ( throwable ) ; return this ; }
public void withBooleanVarargs ( int value , boolean . . . b ) ;
{ MockitoControl control = lastControl . get () ; lastControl . set ( null ) ; return control ; }
public MockAwareStub () { super ( Object . class , null , null ) ; }
MockVerificationAssertionError expected
MockVerificationAssertionError expected
MockVerificationAssertionError expected
MockVerificationAssertionError expected
catch ( MockVerificationAssertionError e ) {}
try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( MockVerificationAssertionError e ) {}
catch ( MockVerificationAssertionError e ) {}
{ if ( exactNumberOfInvocations < NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } return new VerifyingMode ( exactNumberOfInvocations ) ; }
public NumberOfInvocationsAssertionError ( int expectedInvoked , int actuallyInvoked ) { super ( STRING_CONSTANT + expectedInvoked + STRING_CONSTANT + actuallyInvoked ) ; }
if ( mock == null ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
catch ( MockVerificationAssertionError e ) {}
catch ( IllegalArgumentException e ) { assertEquals ( STRING_CONSTANT , e . getMessage () ) ; }
catch ( IllegalArgumentException e ) { assertEquals ( STRING_CONSTANT , e . getMessage () ) ; }
try { verifyZeroInteractions ( map ) ; fail () ; } catch ( MockVerificationAssertionError e ) {}
try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( MockVerificationAssertionError e ) {}
try { verifyZeroInteractions ( mock ) ; fail () ; } catch ( MockVerificationAssertionError e ) {}
try { Mockito . verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( MockVerificationAssertionError expected ) {}
try { Mockito . verify ( mock ) . add ( STRING_CONSTANT ) ; fail () ; } catch ( MockVerificationAssertionError expected ) {}
try { Mockito . verify ( mock ) . clear () ; fail () ; } catch ( MockVerificationAssertionError expected ) {}
catch ( IllegalArgumentException e ) { assertEquals ( STRING_CONSTANT , e . getMessage () ) ; }
{ verify ( mock ) ; try { verifyZeroInteractions ( mock ) ; fail () ; } catch ( UnfinishedVerificationException e ) {} }
{ verify ( mock ) ; try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( UnfinishedVerificationException e ) {} }
try { verify ( mock ) . get ( NUMBER_CONSTANT ) ; fail () ; } catch ( UnfinishedVerificationException e ) {}
try { mockitoState . verifyingStarted ( VerifyingMode . anyTimes () ) ; fail () ; } catch ( UnfinishedVerificationException e ) {}
public NumberOfInvocationsAssertionError ( int expectedInvoked , int actuallyInvoked ) { super ( STRING_CONSTANT + expectedInvoked + STRING_CONSTANT + actuallyInvoked , new LastClassIsCglibEnchantedFilter () ) ; }
{ if ( actuallyInvoked == NUMBER_CONSTANT ) { throw VerificationAssertionError . createNotInvokedError ( STRING_CONSTANT + STRING_CONSTANT + invocation . toString () ) ; } }
{ String expected = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; assertEquals ( expected , error . getMessage () ) ; }
String expectedMessage = STRING_CONSTANT + STRING_CONSTANT ;
String expectedMessage = STRING_CONSTANT + STRING_CONSTANT ;
{ message += STRING_CONSTANT + expected ; }
String expectedMessage = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
String expectedMessage = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
void simpleMethodWithArgument ( String argument ) ;
throw new VerificationAssertionError ( STRING_CONSTANT + verificationErrorMessage + STRING_CONSTANT + mockName + STRING_CONSTANT + registeredInvocation . toString () ) ;
{ mock . add ( STRING_CONSTANT ) ; }
try { reader . read () ; } catch ( Exception e ) { assertEquals ( ioException , e ) ; }
public InstanceOf ( Class clazz ) { this . clazz = clazz ; }
public static Object newInstance ( Class clazz ) throws InstantiationException { return ObjenesisHelper . newInstance ( clazz ) ; }
Class paramType
public static Object emptyReturnValueFor ( Class type ) { return emptyReturnValueToType . get ( type ) ; }
{ return Mockito . verify ( mock , exactNumberOfInvocations ) ; }
{ if ( this . isLastStackElementToRemove ( trace ) ) { lastToRemove = i ; break; } i ++ ; }
strictly . verify ( list ) . add ( STRING_CONSTANT ) ;
strictly . verify ( list ) . add ( STRING_CONSTANT ) ;
verify ( map ) . put ( anyObject () , anyObject () ) ;
verify ( mock ) . oneArg ( two ) ;
public boolean orderOfInvocationsMatters () { return ! mocksToBeVerifiedInSequence . isEmpty () ; }
state . verifyingStarted ( VerifyingMode . anyTimes () ) ;
{ verifyZeroInteractions ( mock ) ; }
{ verifyNoMoreInteractions ( mock ) ; }
{ verify ( mock ) . simpleMethod () ; }
assertThat ( mock , notNullValue () ) ;
assertThat ( superClass , equalTo ( ClassWithoutConstructor . class ) ) ;
assertThat ( superClass , equalTo ( Object . class ) ) ;
strictly . verifyNoMoreInteractions () ;
boolean invokedAtLeastOnce () { return expectedNumberOfInvocations == null ; }
Invocation lastInvocation = behavior . lastInvocation () ;
invocationWithMatchers . setSequenceNumber ( mockitoState . nextSequenceNumber () ) ;
InvocationWithMatchers invocation
assertThat ( new InvocationWithMatchers ( invocation , null ) . hashCode () , equalTo ( NUMBER_CONSTANT ) ) ;
InvocationWithMatchers expectedInvocation
InvocationWithMatchers expectedInvocation
InvocationWithMatchers expected
InvocationWithMatchers invocation
InvocationWithMatchers expected
InvocationWithMatchers expected
InvocationWithMatchers expected
InvocationWithMatchers expected
InvocationWithMatchers invocation
boolean shouldMarkAsVerified = verifyingMode . atLeastOnceMode () || verifyingMode . getExpectedNumberOfInvocations () >= verifiedSoFar ;
this . expectedNumberOfInvocations = expectedNumberOfInvocations ;
Invocation invocation = new Invocation ( null , m , args ) ;
List < InvocationChunk > chunks = getUnverifiedInvocationChunks ( mode ) ;
Invocation similarInvocation = findSimilarInvocation ( invocation ) ;
int actuallyInvoked = numberOfActualInvocations ( expected ) ;
int actualCount = numberOfActualInvocations ( expected ) ;
markInvocationsAsVerified ( expected , verifyingMode ) ;
{ assert invocationForStubbing != null ; registeredInvocations . remove ( invocationForStubbing . getInvocation () ) ; this . results . put ( invocationForStubbing , result ) ; }
registered . markInvocationsAsVerified ( new ExpectedInvocation ( toLowerCaseInvocation , EMPTY_LIST ) , VerifyingMode . times ( NUMBER_CONSTANT ) ) ;
if ( i . isVerified () ) { continue; }
public void markAllInvocationsAsVerified () { for ( Invocation invocation : invocations ) { invocation . markVerified () ; } }
strictly = strictOrderVerifier ( mockOne , mockTwo , mockThree ) ;
{ if ( mocks.length == NUMBER_CONSTANT ) { throw Exceptions . mocksHaveToBePassedAsArguments () ; } }
strictly = strictOrderVerifier ( mockOne , mockThree ) ;
{ return Mockito . verify ( mock , VerifyingMode . inOrder ( expectedNumberOfInvocations , mocksToBeVerifiedInOrder ) ) ; }
List < InvocationChunk > chunks = registered . unverifiedInvocationChunks ( VerifyingMode . inOrder ( null , asList ( mock ) ) ) ;
registered . unverifiedInvocationChunks ( VerifyingMode . inOrder ( null , dummyMocks ) ) ;
ExpectedInvocation invocation = new ExpectedInvocation ( new InvocationBuilder () . toInvocation () , Collections.EMPTY_LIST ) ;
try { verifyNoMoreInteractions ( mockOne , mockTwo , mockThree ) ; fail () ; } catch ( VerificationAssertionError e ) {}
try { strictly . verify ( mockOne ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
try { strictly . verify ( mockTwo , NUMBER_CONSTANT ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
try { strictly . verify ( mockOne ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
@ Test ( expected = StrictVerificationError . class )
@ Test ( expected = StrictVerificationError . class ) public void shouldFailWhenLastMethodCalledFirst () { strictly . verify ( mockOne ) . simpleMethod ( NUMBER_CONSTANT ) ; }
try { strictly . verify ( mockOne ) . oneArg ( false ) ; fail () ; } catch ( VerificationAssertionError e ) {}
try { strictly . verify ( mockOne ) . simpleMethod ( - NUMBER_CONSTANT ) ; fail () ; } catch ( VerificationAssertionError e ) {}
try { strictly . verify ( mockTwo , NUMBER_CONSTANT ) . oneArg ( true ) ; fail () ; } catch ( StrictVerificationError e ) {}
catch ( StrictVerificationError e ) {}
@ Test ( expected = VerificationAssertionError . class ) public void shouldFailOnFirstMethodBecauseDifferentMethodExpected () { strictly . verify ( mockOne ) . oneArg ( true ) ; }
@ Test ( expected = VerificationAssertionError . class ) public void shouldFailOnFirstMethodBecauseDifferentArgsExpected () { strictly . verify ( mockOne ) . simpleMethod ( NUMBER_CONSTANT ) ; }
try { strictly . verify ( mockOne ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
try { strictly . verify ( mockOne ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
@ Test ( expected = VerificationAssertionError . class )
try { verify ( mockTwo , atLeastOnce () ) . add ( STRING_CONSTANT ) ; fail () ; } catch ( VerificationAssertionError e ) {}
if ( ! atLeastOnce && actuallyInvoked != expectedInvoked ) { throw new NumberOfInvocationsAssertionError ( expectedInvoked , actuallyInvoked , expected ) ; }
catch ( StrictVerificationError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationAssertionError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationAssertionError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationAssertionError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( VerificationAssertionError expected ) {}
try { verify ( mock ) . add ( STRING_CONSTANT ) ; fail () ; } catch ( VerificationAssertionError expected ) {}
@ Test ( expected = VerificationAssertionError . class ) public void shouldFailVerification ( ) throws Exception { verify ( mock ) . clear () ; }
try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( VerificationAssertionError e ) {}
VerificationAssertionError expected
VerificationAssertionError expected
try { strictly . verify ( mockThree ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
try { strictly . verify ( mockThree ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( StrictVerificationError e ) {}
try { verifyNoMoreInteractions ( mockOne , mockTwo , mockThree ) ; fail () ; } catch ( VerificationAssertionError e ) {}
try { verifyNoMoreInteractions ( mockOne , mockTwo , mockThree ) ; fail () ; } catch ( VerificationAssertionError e ) {}
catch ( VerificationAssertionError e ) {}
try { verifyZeroInteractions ( map ) ; fail () ; } catch ( VerificationAssertionError e ) {}
try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( VerificationAssertionError e ) {}
try { verifyZeroInteractions ( mock ) ; fail () ; } catch ( VerificationAssertionError e ) {}
catch ( VerificationAssertionError e ) {}
try { verifyNoMoreInteractions ( mock ) ; fail () ; } catch ( VerificationAssertionError e ) {}
catch ( VerificationAssertionError e ) {}
try { verify ( mock ) . clear () ; fail () ; } catch ( NumberOfInvocationsAssertionError e ) {}
try { strictly . verify ( mockOne , NUMBER_CONSTANT ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( NumberOfInvocationsAssertionError e ) {}
try { strictly . verify ( mockOne , NUMBER_CONSTANT ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( NumberOfInvocationsAssertionError e ) {}
try { strictly . verify ( mockTwo , NUMBER_CONSTANT ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( NumberOfInvocationsAssertionError e ) {}
try { strictly . verify ( mockTwo , NUMBER_CONSTANT ) . simpleMethod ( NUMBER_CONSTANT ) ; fail () ; } catch ( NumberOfInvocationsAssertionError e ) {}
@ Test ( expected = NumberOfInvocationsAssertionError . class )
@ Test ( expected = NumberOfInvocationsAssertionError . class )
try { Mockito . verify ( mock , NUMBER_CONSTANT ) . clear () ; fail () ; } catch ( NumberOfInvocationsAssertionError e ) {}
catch ( NumberOfInvocationsAssertionError e ) { assertTrue ( e . getMessage () . endsWith ( STRING_CONSTANT ) ) ; }
catch ( NumberOfInvocationsAssertionError e ) { assertTrue ( e . getMessage () . endsWith ( STRING_CONSTANT ) ) ; }
NumberOfInvocationsAssertionError e
NumberOfInvocationsAssertionError e
buffer . append ( expected ) ;
if ( mode . expectedCountIsZero () ) { return; }
return matchResult ( ( ( Comparable ) actual ) . compareTo ( expected ) ) ;
{ this . expected = value ; this . delta = delta ; }
{ if ( actual == null ) { return false ; } return operator . matchResult ( comparator . compare ( ( T ) actual , expected ) ) ; }
{ appendQuoting ( buffer ) ; buffer . append ( expected ) ; appendQuoting ( buffer ) ; }
return Mockito . verify ( mock , VerifyingMode . inOrder ( verifyingMode . expectedCount () , mocksToBeVerifiedInOrder ) ) ;
< T > T verify ( T mock , int expectedNumberOfInvocations ) ;
Integer wantedCount () { return wantedInvocationCount ; }
{ reportDiscrepancy ( wanted , chunks . get ( NUMBER_CONSTANT ) . getInvocation () , Exceptions.STRICT_DISCREPANCY ) ; }
if ( actual != null ) { reportDiscrepancy ( wanted , actual , Exceptions.REGULAR_DISCREPANCY ) ; } else { Exceptions . wantedButNotInvoked ( wanted . toString () ) ; }
if ( m . isBridge () ) { if ( m . getName () . equals ( methodName ) ) { System.out . println ( m ) ; return true ; } }
private void print ( BaseMessage message ) { mock . print ( message ) ; }
public void print ( String message ) ;
public void print ( Object message ) ;
if ( unverified != null ) { Exceptions . noMoreInteractionsWanted ( unverified , message ) ; }
{ stub ( mock . add ( STRING_CONSTANT ) ) . andThrows ( new Exception () ) ; }
{ Strictly strictly = createStrictOrderVerifier ( mock ) ; strictly . verify ( mockTwo ) . clear () ; }
public synchronized void verifyingStarted ( VerifyingMode verify ) { checkForUnfinishedVerification () ; verifyingModeLocal . set ( verify ) ; }
MockitoState . instance () . checkForUnfinishedVerification () ;
MockitoState . instance () . checkForUnfinishedVerification () ;
{ assert invocationForStubbing != null ; registeredInvocations . removeLast () ; this . results . put ( invocationForStubbing , result ) ; }
new IAnswer < Object > () { public Object answer ( ) throws Throwable { throw throwable ; } }
void simpleMethod ( String argument ) ;
void simpleMethod ( int argument ) ;
boolean simpleMethod ( String argument ) ;
stub ( mock . oneArg ( CrazyMatchers . find ( STRING_CONSTANT ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . threeArgumentMethod ( eq ( NUMBER_CONSTANT ) , CrazyMatchers . not ( notNull () ) , eq ( STRING_CONSTANT ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . threeArgumentMethod ( eq ( NUMBER_CONSTANT ) , CrazyMatchers . not ( isNull () ) , eq ( STRING_CONSTANT ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . oneArg ( CrazyMatchers . or ( eq ( NUMBER_CONSTANT ) , eq ( NUMBER_CONSTANT ) ) ) ) . andReturn ( STRING_CONSTANT ) ;
stub ( mock . oneArg ( CrazyMatchers . cmpEq ( new BigDecimal ( STRING_CONSTANT ) ) ) ) . andReturn ( STRING_CONSTANT ) ;
@ Test @ Ignore public void shouldCorrectStateAfterDetectingInvalidity () {}
{ assert invocationForStubbing != null ; registeredInvocations . removeLast () ; results . put ( invocationForStubbing , result ) ; }
assertFalse ( call . equals ( newStringObjectShouldNotBeEqual ) ) ;
StringBuffer buffer
StringBuffer result = new StringBuffer () ;
StringBuffer buffer
StringBuffer buffer
StringBuffer buffer
StringBuffer sb = new StringBuffer () ;
StringBuffer buffer
StringBuffer buffer
void appendTo ( StringBuffer buffer ) ;
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT ) ; }
StringBuffer buffer
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT + suffix + STRING_CONSTANT ) ; }
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT ) ; }
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT + wanted + STRING_CONSTANT + delta + STRING_CONSTANT ) ; }
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT + prefix + STRING_CONSTANT ) ; }
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT + clazz . getName () + STRING_CONSTANT ) ; }
public void appendTo ( StringBuffer buffer ) { buffer . append ( getName () + STRING_CONSTANT + wanted + STRING_CONSTANT ) ; }
StringBuffer buffer
StringBuffer buffer
StringBuffer buffer
StringBuffer buffer
StringBuffer buffer
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT + substring + STRING_CONSTANT ) ; }
public void appendTo ( StringBuffer buffer ) { buffer . append ( STRING_CONSTANT ) ; }
public static LastArguments instance () { return INSTANCE ; }
{ mockitoState . stubbingCompleted () ; validateThrowable ( throwable ) ; behavior . addResult ( Result . createThrowResult ( throwable ) ) ; }
{ mockitoState . stubbingCompleted () ; behavior . addResult ( Result . createReturnResult ( value ) ) ; }
public static MockitoState instance () { return INSTANCE ; }
public void verifyingStarted ( VerifyingMode verify ) { validateState () ; verifyingModeLocal = verify ; }
{ if ( ! toAssert ) { reset () ; throw new InvalidUseOfMatchersException ( message ) ; } }
{ verify ( mock ) . oneArray ( nullArray ) ; }
{ map . put ( call , STRING_CONSTANT ) ; }
try { three . simpleMethod ( STRING_CONSTANT ) ; } catch ( RuntimeException e ) {}
{ map . put ( call , STRING_CONSTANT ) ; fail () ; }
catch ( RuntimeException e ) { assertThat ( e , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( MockitoException expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( MockitoException expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( MockitoException expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( MockitoException expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
catch ( VerificationError expected ) { assertThat ( expected , firstMethodOnStackEqualsTo ( STRING_CONSTANT ) ) ; }
this . stackTrace = new MockitoException ( STRING_CONSTANT ) . getStackTrace () ;
MockitoStackTraceFilter filter = new MockitoStackTraceFilter () ;
MockitoStackTraceFilter filter = new MockitoStackTraceFilter () ;
catch ( VerificationError e ) { assertTrue ( e . getMessage () . contains ( STRING_CONSTANT ) ) ; }
MockitoStackTraceFilter filter = new MockitoStackTraceFilter () ;
catch ( VerificationError e ) { assertThat ( e . getCause () . getMessage () , contains ( STRING_CONSTANT ) ) ; }
Invocation actual = registeredInvocations . findSimilarInvocation ( wanted ) ;
catch ( NumberOfInvocationsError e ) {}
{ UndesiredInvocation cause = buildCause ( actualInvocationStackTrace , STRING_CONSTANT , undesired ) ; throw new VerificationError ( join ( STRING_CONSTANT ) , cause ) ; }
{ UndesiredInvocation cause = buildCause ( actualInvocationStackTrace , STRING_CONSTANT , undesired ) ; throw new VerificationError ( join ( STRING_CONSTANT ) , cause ) ; }
catch ( NumberOfInvocationsError e ) { assertThat ( e , messageContains ( STRING_CONSTANT ) ) ; }
try { verify ( mock ) . clear () ; fail () ; } catch ( NumberOfInvocationsError e ) {}
catch ( NumberOfInvocationsError e ) { assertThat ( e , messageContains ( STRING_CONSTANT ) ) ; }
catch ( NumberOfInvocationsError e ) { assertThat ( e , messageContains ( STRING_CONSTANT ) ) ; }
NumberOfInvocationsError e
@ Test ( expected = NumberOfInvocationsError . class )
MockitoErrorTest . class
Exceptions . strictlyWantedInvocationDiffersFromActual ( wanted , actual ) ;
public MethodSelector < T > toThrow ( Throwable throwable ) { throwableToBeSetOnVoidMethod = throwable ; return this ; }
public void setInvocationForPotentialStubbing ( ExpectedInvocation invocation ) { this . invocationForStubbing = invocation ; }
ExpectedInvocation invocationWithMatchers
ExpectedInvocationTest . class
s . setInvocationForPotentialStubbing ( new InvocationBuilder () . toExpecteInvocation () ) ;
ExpectedInvocation wanted
ExpectedInvocation wantedInvocation
ExpectedInvocation wantedInvocation
ExpectedInvocation wanted
ExpectedInvocation wanted
ExpectedInvocation wanted
ExpectedInvocation wanted
public void addInvocation ( ExpectedInvocation invocation ) { this . registeredInvocations . add ( invocation . getInvocation () ) ; }
HasStackTrace firstUndesired = registered . getFirstUndesiredInvocationStackTrace ( new ExpectedInvocation ( simpleMethodInvocation ) , VerifyingMode . times ( NUMBER_CONSTANT ) ) ;
HasStackTrace firstUndesired = registered . getFirstUndesiredInvocationStackTrace ( new ExpectedInvocation ( simpleMethodInvocation ) , VerifyingMode . times ( NUMBER_CONSTANT ) ) ;
HasStackTrace firstUndesired = registered . getFirstUndesiredInvocationStackTrace ( new ExpectedInvocation ( simpleMethodInvocation ) , VerifyingMode . times ( NUMBER_CONSTANT ) ) ;
registered . markInvocationsAsVerified ( new ExpectedInvocation ( null ) , mode ) ;
registered . markInvocationsAsVerified ( new ExpectedInvocation ( simpleMethodInvocation ) , times ( NUMBER_CONSTANT ) ) ;
registered . markInvocationsAsVerified ( new ExpectedInvocation ( simpleMethodInvocation ) , atLeastOnce () ) ;
registered . markInvocationsAsVerified ( new ExpectedInvocation ( simpleMethodInvocation ) , times ( NUMBER_CONSTANT ) ) ;
registered . markInvocationsAsVerified ( new ExpectedInvocation ( simpleMethodInvocation ) , inOrder ( null , asList ( mock ) ) ) ;
ExpectedInvocation wanted
ExpectedInvocation wanted
ExpectedInvocation wanted
ExpectedInvocation wanted
ExpectedInvocation expected
ExpectedInvocation invocation
ToTypeMappingsTest . class
if ( verifyingMode != null ) { behavior . verify ( invocationWithMatchers , verifyingMode ) ; return ToTypeMappings . emptyReturnValueFor ( method . getReturnType () ) ; }
MockitoStateTest . class
assertNull ( MockitoState . instance () . pullControlToBeStubbed () ) ;
{ MockitoState . instance () . stubbingCompleted () ; validateThrowable ( throwable ) ; addResult ( Result . createThrowResult ( throwable ) ) ; }
{ MockitoState . instance () . stubbingCompleted () ; addResult ( Result . createReturnResult ( value ) ) ; }
MockitoState . instance () . validateState () ;
MockitoState . instance () . validateState () ;
{ MockUtil . validateMock ( mock ) ; MockitoState . instance () . verifyingStarted ( mode ) ; return mock ; }
MockControl < T > mockControl = new MockControl < T > ( mockitoState ) ;
MockitoBehaviorTest . class
public void andThrows ( Throwable throwable ) { behavior . lastInvocationWasStubbed () ; stubber . addThrowable ( throwable ) ; }
public void andReturn ( T value ) { behavior . lastInvocationWasStubbed () ; stubber . addReturnValue ( value ) ; }
