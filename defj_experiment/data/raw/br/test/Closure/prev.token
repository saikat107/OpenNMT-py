name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Context rhsContext = Context.OTHER ;
{ return topType ; }
{ if ( assignLhsChild != null ) { return true ; } return false ; }
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
return true ;
return TernaryValue.TRUE ;
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
String code = toSource ( root , sourceMap ) ;
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
cc . listSeparator () ;
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
c . canInline ()
