( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
if ( index < NUMBER_CONSTANT ) { return; }
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
this . dataset = dataset ;
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
if ( dataset != null ) { return result ; }
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Context rhsContext = Context.OTHER ;
{ return topType ; }
{ if ( assignLhsChild != null ) { return true ; } return false ; }
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
return true ;
return TernaryValue.TRUE ;
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
String code = toSource ( root , sourceMap ) ;
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
cc . listSeparator () ;
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
c . canInline ()
int len = thisBuf.length - strLen ;
i < thisBuf.length
i < thisBuf.length
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
{ return cAvailableLocaleSet . contains ( locale ) ; }
{ escapeJavaStyleString ( out , str , true ) ; }
{ return escapeJavaStyleString ( str , true ) ; }
{ escapeJavaStyleString ( out , str , false ) ; }
{ return escapeJavaStyleString ( str , false ) ; }
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
return m . containsKey ( value ) ;
CharSequence cs
Calendar c = new GregorianCalendar ( mTimeZone ) ;
if ( chars [ i ] == CHAR_CONS || chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
final CharSequence result = lookupMap . get ( subSeq ) ;
final int cols = problem . getAllParameters () . length ;
final BigDecimal [] out = new BigDecimal [ v.length ] ;
final double [] out = new double [ v.length ] ;
int start = getNumObjectiveFunctions () ;
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
{ return getCumPct ( ( Comparable < > ) v ) ; }
{ return solve ( min , max ) ; }
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
return fit ( new Gaussian.Parametric () , guess ) ;
int sum = NUMBER_CONSTANT ;
Iterator iter = res.entries . iterator () ;
Iterator iter = res.entries . iterator () ;
Iterator iter = res.entries . iterator () ;
Iterator iter = res.entries . iterator () ;
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
{ return chromosomes . iterator () ; }
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
final int n1n2prod = n1 * n2 ;
if ( y >= TWO_POWER_52 || y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
new Reporter () . smartNullPointerException ( location ) ;
return getMock ( invocation ) ;
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
mockingProgress . verificationStarted ( mode ) ;
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnString () ; }
{ return ( T ) anyObject () ; }
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
return iZone . convertLocalToUTC ( localInstant , false ) ;
return iZone . convertLocalToUTC ( localInstant , false ) ;
return iZone . convertLocalToUTC ( localInstant , false ) ;
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
return iZone . convertLocalToUTC ( localInstant , false ) ;
return iZone . convertLocalToUTC ( localInstant , false ) ;
return iZone . convertLocalToUTC ( localInstant , false ) ;
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
