suite . addTest ( UnivariateImplTest . suite () ) ;
setInitialCapacity ( initialCapacity ) ;
setInitialCapacity ( initialCapacity ) ;
assertTrue ( STRING_CONSTANT , ( ( ExpandableDoubleArray ) da ) . getInternalLength () < ( ( int ) NUMBER_CONSTANT * NUMBER_CONSTANT ) ) ;
protected void setUp ( ) throws Exception { da = new ContractableDoubleArray () ; }
protected void setUp ( ) throws Exception { da = new ExpandableDoubleArray () ; }
public synchronized void clear () { eDA . clear () ; }
System . arraycopy ( eDA . getElements () , NUMBER_CONSTANT , copiedArray , NUMBER_CONSTANT , eDA . getNumElements () ) ;
protected void tearDown ( ) throws Exception { da = null ; ra = null ; }
i < ( numElements + startIndex )
i < ( numElements + startIndex )
void clear ( ) ;
double [] getElements ( ) ;
if ( index < NUMBER_CONSTANT ) { String msg = STRING_CONSTANT ; throw new ArrayIndexOutOfBoundsException ( msg ) ; }
public int getN () { return eDA . getNumElements () ; }
public abstract int getN ( ) ;
double n = ( double ) u . getN () ;
abstract int getWindowSize ( ) ;
windowSize != Univariate.INFINITE_WINDOW
windowSize != Univariate.INFINITE_WINDOW
windowSize != Univariate.INFINITE_WINDOW && windowSize < list . size ()
windowSize != Univariate.INFINITE_WINDOW && windowSize < list . size ()
windowSize != Univariate.INFINITE_WINDOW
public CertifiedDataTest ( String name ) { super ( name ) ; }
return lower + ( int ) ( rand . nextDouble () * ( upper - lower + NUMBER_CONSTANT ) ) ;
{ double actual = t . inverseCummulativeProbability ( p ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = t . cummulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = exp . inverseCummulativeProbability ( p ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = exp . cummulativeProbability ( x ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
int getColumnDimension ( ) ;
int getRowDimension ( ) ;
boolean isSingular ( ) ;
boolean isSquare ( ) ;
double getDeterminant ( ) ;
RealMatrix transpose ( ) ;
{ if ( windowSize != Univariate.INFINITE_WINDOW ) { return super . getVariance () ; } return variance < NUMBER_CONSTANT ? NUMBER_CONSTANT : variance ; }
variance = accum / ( double ) ( values.length - NUMBER_CONSTANT ) ;
{ return sum ( values ) / ( double ) values.length ; }
{ return Math . exp ( sumLog ( values ) / ( double ) values.length ) ; }
{ double actual = Gamma . logGamma ( x ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ if ( n < NUMBER_CONSTANT ) { return Double.NaN ; } return sumYY ; }
{ return geometricMean ( values , NUMBER_CONSTANT , values.length ) ; }
{ return mean . evaluate ( values ) ; }
{ return geoMean . evaluate ( values ) ; }
{ return sumLog . evaluate ( values ) ; }
{ return product . evaluate ( values ) ; }
{ return sumSq . evaluate ( values ) ; }
{ return sum . evaluate ( values , NUMBER_CONSTANT , values.length ) ; }
int getWindowSize ( ) ;
void clear ( ) ;
double getSumsq ( ) ;
double getSum ( ) ;
int getN ( ) ;
double getMin ( ) ;
double getMax ( ) ;
double getStandardDeviation ( ) ;
double getVariance ( ) ;
double getMean ( ) ;
double getKurtosis ( ) ;
{ return sum ( values ) / ( double ) values.length ; }
{ return geometricMean ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sumLog ( values , NUMBER_CONSTANT , values.length ) ; }
{ return product ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sumSq ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sum ( values , NUMBER_CONSTANT , values.length ) ; }
double [] values
variance = ( n < NUMBER_CONSTANT ) ? NUMBER_CONSTANT : m2 / ( double ) ( n - NUMBER_CONSTANT ) ;
{ return Math . exp ( super . evaluate ( values , begin , length ) / ( double ) length ) ; }
public void clear () { value = Double.NaN ; init = true ; }
public void clear () { super . clear () ; }
public void clear () { super . clear () ; lastVar = NUMBER_CONSTANT ; }
public UnivariateImpl () { super(); }
void clear ( ) ;
if ( test ( values , begin , length ) ) { return sum . evaluate ( values ) / ( ( double ) length ) ; }
protected UnivariateRealSolverFactory () {}
for ( int i = begin ; i < l ; i ++ ) { increment ( values [ i ] ) ; }
double root = UnivariateRealSolverUtil . solve ( rootFindingFunction , bracket [ NUMBER_CONSTANT ] , bracket [ NUMBER_CONSTANT ] ) ;
public void increment ( final double d ) { super . increment ( d ) ; }
public void setPropertyName ( final String string ) { propertyName = string ; }
final Object o
public void setPercentile ( final double p ) { percentile = p ; }
final double d
final double d
public MathConfigurationException ( final Throwable throwable ) { super ( throwable ) ; }
public MathConfigurationException ( final String message ) { super ( message ) ; }
final int n
final int n
final int n
final double d
final double d
final double d
final double d
final double d
final double d
final double d
final double d
final double [] values
final double d
final double d
final double [] values
final double [] values
final double [] values
final double [] values
final double [] values
final double [] values
public MathException ( final Throwable throwable ) { super ( throwable ) ; }
public MathException ( final String message ) { super ( message ) ; }
final double d
final double d
{ String msg = STRING_CONSTANT ; throw new ArrayIndexOutOfBoundsException ( msg ) ; }
if ( expansionFactor < NUMBER_CONSTANT ) { String msg = STRING_CONSTANT ; throw new IllegalArgumentException ( msg ) ; }
protected void setUp ( ) throws Exception { super . setUp () ; b = DistributionFactory . newInstance () . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ try { factory . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {} }
{ try { factory . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomialDistribution ( NUMBER_CONSTANT , - NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {} }
{ try { factory . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomialDistribution ( - NUMBER_CONSTANT , NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {} }
public DistributionFactoryImpl () { super(); }
public UnivariateRealSolverFactoryImpl () {}
public BeanListUnivariateImpl ( List list ) { this ( list , null ) ; }
public ConvergenceException ( String message ) { this ( message , null ) ; }
{ super(); setPropertyName ( property ) ; }
{ super(); setName ( name ) ; }
public MathConfigurationException ( final Throwable throwable ) { this ( null , throwable ) ; }
public MathConfigurationException ( final String message ) { this ( message , null ) ; }
{ return min . evaluate ( values ) ; }
{ return max . evaluate ( values ) ; }
{ return variance . evaluate ( values ) ; }
{ return mean . evaluate ( values ) ; }
{ return sumLog . evaluate ( values ) ; }
{ return prod . evaluate ( values ) ; }
{ return sumSq . evaluate ( values ) ; }
{ return sum . evaluate ( values ) ; }
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = new BeanListUnivariateImpl ( patientList ) ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = new ListUnivariateImpl ( list ) ;
DescriptiveStatistics u = new ListUnivariateImpl ( externalList ) ;
DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl () ;
DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl () ;
DescriptiveStatistics u = new ListUnivariateImpl ( externalList , transformers ) ;
return new Complex ( MathUtils . sinh ( a2 ) / d , Math . sin ( b2 ) / d ) ;
return new Complex ( Math . sin ( a2 ) / d , MathUtils . sinh ( b2 ) / d ) ;
public void clear () { value = Double.NaN ; n = NUMBER_CONSTANT ; }
public void clear () { value = Double.NaN ; n = NUMBER_CONSTANT ; }
public void clear () { value = Double.NaN ; n = NUMBER_CONSTANT ; }
public void clear () { value = Double.NaN ; n = NUMBER_CONSTANT ; }
public void clear () { value = Double.NaN ; n = NUMBER_CONSTANT ; }
{ URL url = getClass () . getResource ( STRING_CONSTANT ) ; vs . setValuesFileURL ( url ) ; }
empiricalDistribution . load ( url ) ;
vs . resetReplayFile () ;
SummaryStatistics stats = SummaryStatistics . newInstance () ;
SummaryStatistics u = SummaryStatistics . newInstance () ;
SummaryStatistics u = SummaryStatistics . newInstance () ;
SummaryStatistics u = SummaryStatistics . newInstance () ;
public abstract long getN ( ) ;
StatisticalSummary sampleStats
public void clear () { list . clear () ; }
public AbstractDescriptiveStatistics ( int window ) { setWindowSize ( window ) ; }
public AbstractDescriptiveStatistics () {}
sampleStats = SummaryStatistics . newInstance () ;
new Complex ( Math . abs ( z . getImaginary () ) / ( NUMBER_CONSTANT * t ) , MathUtils . indicator ( b ) * t )
public double getMean () { return new Mean ( secondMoment ) . getResult () ; }
empiricalDistribution . load ( url ) ;
public void testNext ( ) throws Exception { tstGen ( NUMBER_CONSTANT ) ; tstDoubleGen ( NUMBER_CONSTANT ) ; }
fail ( STRING_CONSTANT ) ;
{ return ( ( Number ) PropertyUtils . getProperty ( o , getPropertyName () ) ) . doubleValue () ; }
{ double actual = f . inverseCumulativeProbability ( p ) ; assertEquals ( STRING_CONSTANT + p , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = f . cumulativeProbability ( x ) ; assertEquals ( STRING_CONSTANT + x , expected , actual , NUMBER_CONSTANT ) ; }
double actual = DistributionFactory . newInstance () . createGammaDistribution ( a , b ) . inverseCumulativeProbability ( p ) ;
double actual = DistributionFactory . newInstance () . createGammaDistribution ( a , b ) . cumulativeProbability ( x ) ;
{ double actual = b . cumulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testcumulativeProbability8 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability1 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability001 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
return getSlopeStdErr () * getTDistribution () . inverseCumulativeProbability ( NUMBER_CONSTANT - alpha / NUMBER_CONSTANT ) ;
return NUMBER_CONSTANT - tDistribution . cumulativeProbability ( - t , t ) ;
return NUMBER_CONSTANT - tDistribution . cumulativeProbability ( - t , t ) ;
return NUMBER_CONSTANT - chiSquaredDistribution . cumulativeProbability ( chiSquare ( expected , observed ) ) ;
{ double actual = chiSquare . inverseCumulativeProbability ( p ) ; assertEquals ( STRING_CONSTANT + p , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = chiSquare . cumulativeProbability ( x ) ; assertEquals ( STRING_CONSTANT + x , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = z . inverseCumulativeProbability ( p ) ; assertEquals ( expected , actual , PRECISION ) ; }
assertEquals ( NUMBER_CONSTANT , z . cumulativeProbability ( z . getMean () + z . getStandardDeviation () ) , PRECISION ) ;
assertEquals ( NUMBER_CONSTANT , z . cumulativeProbability ( mu ) , PRECISION ) ;
{ double actual = exp . inverseCumulativeProbability ( p ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = exp . cumulativeProbability ( x ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbabilityPositive () { testValue ( Double.NaN , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbabilityOne () { testValue ( Double.POSITIVE_INFINITY , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbabilityZero () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbabilityZero () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability900 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability950 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability975 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability990 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability999 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability100 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability050 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability025 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability010 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability001 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability900 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability950 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability975 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability990 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability100 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability050 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability025 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability010 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability001 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ double actual = h . cumulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability1 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability0 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ double actual = t . inverseCumulativeProbability ( p ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = t . cumulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testCumulativeProbability999 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCumulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
PolynomialFunction f = new PolynomialFunction ( c ) ;
catch ( MathException e ) { fail ( e . getMessage () ) ; }
catch ( MathException e ) { fail ( e . getMessage () ) ; }
{ bp [ row ] [ col ] = bv [ permutation [ row ] ] [ col ] ; }
{ try { luDecompose () ; return false ; } catch ( InvalidMatrixException ex ) { return true ; } }
{ ( new RealMatrixImpl ( testData2 ) ) . luDecompose () ; fail ( STRING_CONSTANT ) ; }
{ throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( test ( values , begin , length ) ) { return sum . evaluate ( values , begin , length ) / ( ( double ) length ) ; }
protected AbstractDescriptiveStatistics () { super(); }
catch ( Exception ex ) { ex . printStackTrace () ; }
ExpandableDoubleArray eDA3 = newInstance ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
ExpandableDoubleArray eDA2 = newInstance ( NUMBER_CONSTANT ) ;
try { result = freqTable . getCount ( new Character ( v ) ) ; } catch ( ClassCastException ex ) {}
try { result = freqTable . getCount ( new Long ( v ) ) ; } catch ( ClassCastException ex ) {}
try { result = freqTable . getCount ( new Long ( v ) ) ; } catch ( ClassCastException ex ) {}
try { result = freqTable . getCount ( v ) ; } catch ( ClassCastException ex ) {}
TDistribution tDistribution = getDistributionFactory () . createTDistribution ( degreesOfFreedom ) ;
TDistribution tDistribution = getDistributionFactory () . createTDistribution ( n - NUMBER_CONSTANT ) ;
ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory () . createChiSquareDistribution ( df ) ;
ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory () . createChiSquareDistribution ( ( double ) expected.length - NUMBER_CONSTANT ) ;
{ super(); eDA = new ResizableDoubleArray () ; setWindowSize ( window ) ; }
Iterator iter = freqTable . keySet () . iterator () ;
{ freqTable = new TreeMap ( comparator ) ; }
double det = parity ;
public void clear () { super . clear () ; }
if ( moment.n == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; } else { return moment.m2 / ( ( double ) moment.n - NUMBER_CONSTANT ) ; }
{ sumSq += values [ i ] * values [ i ] ; }
{ variance . increment ( d ) ; }
{ variance = new Variance ( m2 ) ; }
catch ( Throwable t ) { return new UnivariateRealSolverFactoryImpl () ; }
catch ( Throwable t ) { return new DistributionFactoryImpl () ; }
catch ( Throwable t ) { return new DescriptiveStatisticsImpl () ; }
long getN ( ) ;
void resetFunctionValueAccuracy ( ) ;
double getFunctionValueAccuracy ( ) ;
void resetRelativeAccuracy ( ) ;
double getRelativeAccuracy ( ) ;
void resetAbsoluteAccuracy ( ) ;
double getAbsoluteAccuracy ( ) ;
int getMaximalIterationCount ( ) ;
{ return Math . exp ( sumOfLogs . evaluate ( values , begin , length ) / ( double ) length ) ; }
{ sumOfLogs . increment ( d ) ; }
{ os += m . getEntry ( i , j ) + STRING_CONSTANT ; }
{ os += m . getEntry ( i , j ) + STRING_CONSTANT ; }
{ return getInstance () . format ( c ) ; }
public InvalidMatrixException ( String message ) { super ( message ) ; }
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( DEFAULT_TEST_POISSON_PARAMETER ) ;
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( NUMBER_CONSTANT ) ;
double t = Math . abs ( homoscedasticT ( m1 , m2 , v1 , v2 , n1 , n2 ) ) ;
public RandomDataTest ( String name ) { super ( name ) ; randomData = new RandomDataImpl () ; }
{ if ( rand == null ) { rand = new JDKRandomGenerator () ; } rand . setSeed ( System . currentTimeMillis () ) ; }
{ if ( rand == null ) { rand = new JDKRandomGenerator () ; } rand . setSeed ( seed ) ; }
RandomGenerator rand = getRan () ;
RandomGenerator rand = getRan () ;
RandomGenerator rand = getRan () ;
RandomGenerator rand = getRan () ;
RandomGenerator rand = getRan () ;
RandomGenerator ran = getRan () ;
{ return solve ( MatrixUtils . createBigIdentityMatrix ( this . getRowDimension () ) ) ; }
{ return solve ( MatrixUtils . createRealIdentityMatrix ( this . getRowDimension () ) ) ; }
private MathUtils () { super(); }
float sign = indicator ( x ) ;
double sign = indicator ( x ) ;
if ( numberOfSuccesses > populationSize ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
x < a || a < NUMBER_CONSTANT
a >= NUMBER_CONSTANT && x > a
public AbstractRandomGeneratorTest ( String name ) { super ( name ) ; randomData = new RandomDataImpl ( testGenerator ) ; }
if ( fm * fmin > NUMBER_CONSTANT ) { min = m ; } else { max = m ; }
z = new Complex ( nan , NUMBER_CONSTANT ) ;
double result = Math . sqrt ( getRSquare () ) ;
{ return sumYY - sumXY * sumXY / sumXX ; }
Number number = format . parse ( source , pos ) ;
{ format . format ( value , toAppendTo , pos ) ; }
public FastSineTransformer () { super(); }
public FastFourierTransformer () { super(); }
public FastCosineTransformer () { super(); }
{ return new Rotation ( - q0 , q1 , q2 , q3 , false ) ; }
public int eventOccurred ( double t , double [] y ) { sign = - sign ; return SwitchingFunction.RESET_STATE ; }
v = Vector3D . multiply ( NUMBER_CONSTANT , v ) ;
v1 = Vector3D . add ( v1 , v2 ) ;
v1 = Vector3D . subtract ( v1 , v2 ) ;
p = ( Polynomial.Rational ) p . multiply ( lcm ) ;
{ u . setElement ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; u . solve ( b , NUMBER_CONSTANT ) ; }
double [] mean = sample . getMean () ;
public VectorialSampleStatisticsTest ( String name ) { super ( name ) ; points = null ; }
public double [] getArray () { return ( double [] ) internalArray . clone () ; }
String name = Integer . toString ( k ) ;
return ( TestProblem [] ) problems . toArray ( new TestProblem [ problems . size () ] ) ;
{ d . setElement ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; d . solve ( b , NUMBER_CONSTANT ) ; }
simplex [ i ] . cost > pointCostPair.cost
{ return ( PointCostPair [] ) minima . clone () ; }
{ simplex [ i ] = new PointCostPair ( vertices [ i ] , Double.NaN ) ; }
simplex [ i ] = new PointCostPair ( vertex , Double.NaN ) ;
RandomVectorGenerator rvg = new CorrelatedRandomVectorGenerator ( statistics . getMean () , statistics . getCovarianceMatrix ( null ) , new UniformRandomGenerator ( seed ) ) ;
return ( largest.cost - smallest.cost ) < threshold ;
BilinearPattern pattern
WeightedMeasurement m = new MyMeasurement ( NUMBER_CONSTANT , theoretical () + NUMBER_CONSTANT , this ) ;
WeightedMeasurement m = new MyMeasurement ( NUMBER_CONSTANT , theoretical () + NUMBER_CONSTANT , this ) ;
WeightedMeasurement m = new MyMeasurement ( NUMBER_CONSTANT , theoretical () + NUMBER_CONSTANT , this ) ;
public void tearDown () { fitter = null ; }
public AbstractCurveFitterTest ( String name ) { super ( name ) ; fitter = null ; }
fail ( STRING_CONSTANT + r + STRING_CONSTANT ) ;
try { while ( true ) { sum = sampler . nextSamplePoint () . y ; } } catch ( ExhaustedSampleException e ) {}
double [] data = mapper . getDataArray () ;
double [] data = mapper . getDataArray () ;
assertTrue ( mapper . getDataArray () . length == size ) ;
try { while ( true ) { sum = sampler . nextSamplePoint () . y ; } } catch ( ExhaustedSampleException e ) {}
double originalCost = original [ NUMBER_CONSTANT ] . cost ;
{ return ( EstimatedParameter [] ) coefficients . clone () ; }
{ return ( EstimatedParameter [] ) coefficients . clone () ; }
estimator . estimate ( this ) ;
return ( largest.cost - smallest.cost ) < threshold ;
assertTrue ( optimum.cost > NUMBER_CONSTANT ) ;
assertTrue ( optimum.cost > NUMBER_CONSTANT ) ;
double [] estimatedMean = sample . getMean () ;
{ l . setElement ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; l . solve ( b , NUMBER_CONSTANT ) ; }
double [] estimatedMean = sample . getMean () ;
RationalNumber newCoeff = a [ i ] . multiply ( lcm ) ;
{ return ( double [] ) interpolatedState . clone () ; }
public ScalarSampleStatisticsTest ( String name ) { super ( name ) ; points = null ; }
public SwitchingFunction [] getSwitchingFunctions () { return new SwitchingFunction [ NUMBER_CONSTANT ] ; }
{ throw new MaxIterationsExceededException ( maxIterations ) ; }
throw new ConvergenceException () ;
super ( buildMessage ( pattern , arguments , Locale.US ) ) ;
super ( buildMessage ( pattern , arguments , Locale.US ) ) ;
{ return ( new BigDecimal ( Double . toString ( x ) ) . setScale ( scale , roundingMethod ) ) . doubleValue () ; }
return getSlopeStdErr () * distribution . inverseCumulativeProbability ( NUMBER_CONSTANT - alpha / NUMBER_CONSTANT ) ;
{ this ( p , new NormalDistributionImpl () ) ; }
HypergeometricDistribution dist = new HypergeometricDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
setDistribution ( new HypergeometricDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( new HypergeometricDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( new HypergeometricDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( new ChiSquaredDistributionImpl ( NUMBER_CONSTANT ) ) ;
setDistribution ( new PascalDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( new PascalDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
PoissonDistribution dist = new PoissonDistributionImpl ( NUMBER_CONSTANT ) ;
PoissonDistribution dist = new PoissonDistributionImpl ( NUMBER_CONSTANT ) ;
PoissonDistribution dist = new PoissonDistributionImpl ( DEFAULT_TEST_POISSON_PARAMETER ) ;
PoissonDistribution dist = new PoissonDistributionImpl ( DEFAULT_TEST_POISSON_PARAMETER ) ;
PoissonDistribution dist = new PoissonDistributionImpl ( NUMBER_CONSTANT ) ;
setDistribution ( new BinomialDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( new BinomialDistributionImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( new TDistributionImpl ( NUMBER_CONSTANT ) ) ;
public void setUp () { super . setUp () ; testStatistic = TestUtils . getTTest () ; }
public void setUp () { super . setUp () ; testStatistic = TestUtils . getChiSquareTest () ; }
try { m . operate ( testVector ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { ; }
{ MathUtils . factorial ( test ) ; }
FastFourierTransformer . scaleArray ( x2 , NUMBER_CONSTANT / Math . sqrt ( x2.length ) ) ;
try { new Percentile ( NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {}
{ return ( internalArray.length / ( ( float ) numElements ) ) > contractionCriteria ; }
if ( normProduct == NUMBER_CONSTANT ) { throw new ArithmeticException ( STRING_CONSTANT ) ; }
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics stats = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
DescriptiveStatistics u = createDescriptiveStatistics () ;
RungeKuttaStepInterpolator rki = ( RungeKuttaStepInterpolator ) prototype . copy () ;
RungeKuttaStepInterpolator rki = ( RungeKuttaStepInterpolator ) prototype . copy () ;
setSafety ( NUMBER_CONSTANT ) ;
setSafety ( NUMBER_CONSTANT ) ;
{ super ( c , a , b , new ThreeEighthesStepInterpolator () , step ) ; }
{ super ( c , a , b , new EulerStepInterpolator () , step ) ; }
{ super ( c , a , b , new MidpointStepInterpolator () , step ) ; }
{ super ( c , a , b , new GillStepInterpolator () , step ) ; }
{ super ( c , a , b , new ClassicalRungeKuttaStepInterpolator () , step ) ; }
public double getCurrentSignedStepsize () { return stepSize ; }
public double getCurrentSignedStepsize () { return stepSize ; }
TestProblemHandler handler = new TestProblemHandler ( pb , integ ) ;
TestProblemHandler handler = new TestProblemHandler ( pb , integ ) ;
TestProblemHandler handler = new TestProblemHandler ( pb , integ ) ;
TestProblemHandler handler = new TestProblemHandler ( pb , integ ) ;
integ . addSwitchingFunction ( stepProblem , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
integ . addSwitchingFunction ( stepProblem , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
integ . addSwitchingFunction ( stepProblem , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
{ if ( isNaN () ) { return NaN ; } return createComplex ( - real , - imaginary ) ; }
{ if ( isNaN () ) { return NaN ; } return createComplex ( real , - imaginary ) ; }
{ SummaryStatistics stats = new SummaryStatistics () ; binStats . add ( i , stats ) ; }
sampleStats = new SummaryStatistics () ;
sampleStats = new SummaryStatistics () ;
SummaryStatistics stats = new SummaryStatistics () ;
SummaryStatistics stats = new SummaryStatistics () ;
SummaryStatistics u = new SummaryStatistics () ;
DescriptiveStatistics u = new DescriptiveStatistics () ;
SummaryStatistics oneSidedPStats = new SummaryStatistics () ;
sampleStats = new SummaryStatistics () ;
SummaryStatistics oneSidedPStats = new SummaryStatistics () ;
sampleStats = new SummaryStatistics () ;
DescriptiveStatistics u = new DescriptiveStatistics () ;
BufferedReader in = new BufferedReader ( new InputStreamReader ( CertifiedDataTest . class . getResourceAsStream ( resource ) ) ) ;
{ return ( Object [] ) arguments . clone () ; }
Object [] parts
Object [] parts
{ throw new ConvergenceException ( STRING_CONSTANT + STRING_CONSTANT , new Object [] { Integer . toString ( starts ) } ) ; }
double originalCost = original [ NUMBER_CONSTANT ] . getCost () ;
simplex [ i ] . getCost () > pointCostPair . getCost ()
return ( largest . getCost () - smallest . getCost () ) < threshold ;
assertTrue ( optimum . getCost () > NUMBER_CONSTANT ) ;
assertTrue ( optimum . getCost () > NUMBER_CONSTANT ) ;
return ( largest . getCost () - smallest . getCost () ) < threshold ;
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { new Integer ( maxCostEval ) } ) ; }
double c = NUMBER_CONSTANT / ( n * ( isBiasCorrected ? ( n - NUMBER_CONSTANT ) : n ) ) ;
VectorialCovariance stat = new VectorialCovariance ( points [ NUMBER_CONSTANT ] . length , true ) ;
VectorialCovariance stat = new VectorialCovariance ( NUMBER_CONSTANT , true ) ;
{ new VectorialCovariance ( NUMBER_CONSTANT , true ) . increment ( new double [ NUMBER_CONSTANT ] ) ; fail ( STRING_CONSTANT ) ; }
VectorialCovariance covStat = new VectorialCovariance ( vertices [ NUMBER_CONSTANT ] . length , true ) ;
VectorialCovariance covStat = new VectorialCovariance ( mean.length , true ) ;
VectorialCovariance covStat = new VectorialCovariance ( mean.length , true ) ;
{ return ( StorelessUnivariateStatistic [] ) meanImpl . clone () ; }
{ return ( StorelessUnivariateStatistic [] ) geoMeanImpl . clone () ; }
{ return ( StorelessUnivariateStatistic [] ) sumLogImpl . clone () ; }
{ return ( StorelessUnivariateStatistic [] ) maxImpl . clone () ; }
{ return ( StorelessUnivariateStatistic [] ) minImpl . clone () ; }
{ return ( StorelessUnivariateStatistic [] ) sumSqImpl . clone () ; }
{ return ( StorelessUnivariateStatistic [] ) sumImpl . clone () ; }
try { u . setMeanImpl ( new Sum () ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalStateException ex ) {}
incrementJacobianEvaluationsCounter () ;
incrementJacobianEvaluationsCounter () ;
catch ( IllegalArgumentException e ) {}
catch ( IllegalArgumentException e ) {}
Object [] parts
return NUMBER_CONSTANT * distribution . cumulativeProbability ( - t ) ;
return NUMBER_CONSTANT * distribution . cumulativeProbability ( - t ) ;
return NUMBER_CONSTANT * distribution . cumulativeProbability ( - t ) ;
certifiedValues = new HashMap < String , Double > () ;
{ switchesHandler . addSwitchingFunction ( function , maxCheckInterval , convergence , maxIterationCount ) ; }
ListUnivariateImpl u = new ListUnivariateImpl ( new ArrayList < Object > () ) ;
Class < > key
Class < > key
{ switchesHandler . addSwitchingFunction ( function , maxCheckInterval , convergence , maxIterationCount ) ; }
{ functions = new ArrayList < SwitchState > () ; first = null ; initialized = false ; }
Collection < double [] > categoryData
Collection < double [] > categoryData
Collection < double [] > categoryData
Collection < > c
Collection < double [] > categoryData
Collection < double [] > categoryData
Collection < double [] > categoryData
List < Object > list
List < Object > list
public ListUnivariateImpl () { this ( new ArrayList < Object > () ) ; }
{ this . binCount = binCount ; binStats = new ArrayList < SummaryStatistics > () ; }
public EmpiricalDistributionImpl () { binStats = new ArrayList < SummaryStatistics > () ; }
points = new ArrayList < PointModel > () ;
{ return steps . get ( index ) . getInterpolatedState () ; }
{ return steps . get ( index ) . getInterpolatedTime () ; }
public ContinuousOutputModel () { steps = new ArrayList < StepInterpolator > () ; reset () ; }
Collection < double [] > categoryData
Collection < double [] > categoryData
Collection < double [] > categoryData
points = new ArrayList < PointModel > () ;
Collection < > c
ListUnivariateImpl u = new ListUnivariateImpl ( new ArrayList < Object > () , transformers ) ;
ListUnivariateImpl u = new ListUnivariateImpl ( new ArrayList < Object > () , transformers ) ;
DescriptiveStatistics u = new ListUnivariateImpl ( new ArrayList < Object > () , transformers ) ;
{ return solve ( MatrixUtils . createBigIdentityMatrix ( getRowDimension () ) ) ; }
public BigMatrix copy () { return new BigMatrixImpl ( this . copyOut () , false ) ; }
final int nRows = v.length ;
{ return solve ( MatrixUtils . createRealIdentityMatrix ( getRowDimension () ) ) ; }
{ new Rotation ( u , Vector3D.ZERO ) ; fail ( STRING_CONSTANT ) ; }
{ Vector3D . angle ( Vector3D.ZERO , Vector3D.PLUS_I ) ; fail ( STRING_CONSTANT ) ; }
{ Vector3D.ZERO . normalize () ; fail ( STRING_CONSTANT ) ; }
assertTrue ( Math . abs ( Vector3D.ZERO . getNorm () ) < NUMBER_CONSTANT ) ;
Object [] parts
if ( offset > NUMBER_CONSTANT ) { throw new SwitchException ( STRING_CONSTANT , new Object [] { Double . valueOf ( t ) } ) ; }
{ super ( STRING_CONSTANT , new Object [] { Integer . valueOf ( maxIterations ) } ) ; this . maxIterations = maxIterations ; }
Object [] arguments = { Integer . valueOf ( NUMBER_CONSTANT ) , Integer . valueOf ( NUMBER_CONSTANT ) } ;
Object [] arguments = { Integer . valueOf ( NUMBER_CONSTANT ) , Integer . valueOf ( NUMBER_CONSTANT ) } ;
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { Integer . valueOf ( m ) , Integer . valueOf ( p ) } ) ; }
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { Integer . valueOf ( maxCostEval ) } ) ; }
super ( STRING_CONSTANT , new Object [] { Integer . valueOf ( dimension1 ) , Integer . valueOf ( dimension2 ) } ) ;
dynaBean . set ( propertyName , Double . valueOf ( v ) ) ;
Integer input = Integer . valueOf ( NUMBER_CONSTANT ) ;
Double input = Double . valueOf ( expected ) ;
{ return Double . valueOf ( o . toString () ) . doubleValue () ; }
list . add ( Double . valueOf ( one ) ) ;
new Object [] { Double . valueOf ( NUMBER_CONSTANT ) }
new Object [] { Double . valueOf ( p ) }
{ return getCumPct ( Long . valueOf ( v ) ) ; }
{ return getCumPct ( Long . valueOf ( v ) ) ; }
{ return getCumFreq ( Long . valueOf ( v ) ) ; }
{ return getCumFreq ( Long . valueOf ( v ) ) ; }
{ return getPct ( Long . valueOf ( v ) ) ; }
{ return getPct ( Long . valueOf ( v ) ) ; }
{ return getCount ( Long . valueOf ( v ) ) ; }
{ return getCount ( Long . valueOf ( v ) ) ; }
{ addValue ( Long . valueOf ( v . longValue () ) ) ; }
Object [] arguments = { Integer . valueOf ( NUMBER_CONSTANT ) , Integer . valueOf ( NUMBER_CONSTANT ) } ;
Object [] arguments = { Integer . valueOf ( NUMBER_CONSTANT ) , Integer . valueOf ( NUMBER_CONSTANT ) } ;
Object [] arguments = { Double . valueOf ( NUMBER_CONSTANT ) } ;
Object [] arguments = { Double . valueOf ( NUMBER_CONSTANT ) } ;
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { Integer . valueOf ( rows ) , Integer . valueOf ( cols ) } ) ; }
Object [] arguments = { Integer . valueOf ( NUMBER_CONSTANT ) , Integer . valueOf ( NUMBER_CONSTANT ) } ;
Object [] arguments = { Integer . valueOf ( NUMBER_CONSTANT ) , Integer . valueOf ( NUMBER_CONSTANT ) } ;
{ ret = Double . valueOf ( value ) ; pos . setIndex ( endIndex ) ; }
{ super ( STRING_CONSTANT , new Object [] { Double . valueOf ( argument ) } ) ; this . argument = argument ; }
assertFalse ( zero . equals ( Double . valueOf ( NUMBER_CONSTANT ) ) ) ;
assertFalse ( u . equals ( Double . valueOf ( NUMBER_CONSTANT ) ) ) ;
return Double . valueOf ( newA ) ;
return Double . valueOf ( newA ) ;
return Double . valueOf ( newA ) ;
return Double . valueOf ( newA ) ;
assertFalse ( STRING_CONSTANT , u . equals ( Double . valueOf ( NUMBER_CONSTANT ) ) ) ;
{ super ( STRING_CONSTANT , new Object [] { Double . valueOf ( value ) , Integer . valueOf ( maxIterations ) } ) ; }
Double pi = Double . valueOf ( Math.PI ) ;
assertFalse ( STRING_CONSTANT , u . equals ( Double . valueOf ( NUMBER_CONSTANT ) ) ) ;
Double value = Double . valueOf ( valueString ) ;
double delta = ( max - min ) / ( Double . valueOf ( binCount ) ) . doubleValue () ;
{ val = Double . valueOf ( str ) . doubleValue () ; sampleStats . addValue ( val ) ; }
