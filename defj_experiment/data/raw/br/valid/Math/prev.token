suite . addTest ( UnivariateTest . suite () ) ;
this . initialCapacity = initialCapacity ;
this . initialCapacity = initialCapacity ;
assertTrue ( STRING_CONSTANT , eDA . getInternalLength () < ( ( int ) NUMBER_CONSTANT * NUMBER_CONSTANT ) ) ;
protected void setUp ( ) throws Exception { eDA = new ContractableDoubleArray () ; }
protected void setUp ( ) throws Exception { eDA = new ExpandableDoubleArray () ; }
public void clear () { eDA . clear () ; }
System . arraycopy ( eDA . getValues () , NUMBER_CONSTANT , copiedArray , NUMBER_CONSTANT , eDA . getNumElements () ) ;
protected void tearDown ( ) throws Exception { da = null ; }
i < numElements
i < numElements
public abstract void clear ( ) ;
public abstract double [] getElements ( ) ;
if ( index < NUMBER_CONSTANT ) { String msg = STRING_CONSTANT ; throw new IllegalArgumentException ( msg ) ; }
public double getN () { return eDA . getNumElements () ; }
public abstract double getN ( ) ;
double n = u . getN () ;
public abstract int getWindowSize ( ) ;
windowSize != Univariate.INIFINTE_WINDOW
windowSize != Univariate.INIFINTE_WINDOW
windowSize != Univariate.INIFINTE_WINDOW && windowSize < list . size ()
windowSize != Univariate.INIFINTE_WINDOW && windowSize < list . size ()
windowSize != Univariate.INIFINTE_WINDOW
public CertifiedDataTest ( String name ) { super ( name ) ; setUp () ; }
return lower + ( int ) ( Math . random () * ( upper - lower + NUMBER_CONSTANT ) ) ;
{ double actual = t . inverseCummulativeProbability ( p ) ; assertEquals ( STRING_CONSTANT + p , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = t . cummulativeProbability ( x ) ; assertEquals ( STRING_CONSTANT + x , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = exp . inverseCummulativeProbability ( p ) ; assertEquals ( STRING_CONSTANT + p , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = exp . cummulativeProbability ( x ) ; assertEquals ( STRING_CONSTANT + x , expected , actual , NUMBER_CONSTANT ) ; }
public int getColumnDimension ( ) ;
public int getRowDimension ( ) ;
public boolean isSingular ( ) ;
public boolean isSquare ( ) ;
public double getDeterminant ( ) ;
public RealMatrix transpose ( ) ;
{ if ( windowSize != Univariate.INFINITE_WINDOW ) { return super . getVariance () ; } return variance ; }
variance = accum / ( values.length - NUMBER_CONSTANT ) ;
{ return sum ( values ) / values.length ; }
{ return Math . pow ( product ( values ) , ( NUMBER_CONSTANT / values.length ) ) ; }
{ double actual = Gamma . logGamma ( x , NUMBER_CONSTANT , Integer.MAX_VALUE ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ if ( n < NUMBER_CONSTANT ) { return Double.NaN ; } return sumSqY - sumY * sumY / ( double ) n ; }
{ return Math . exp ( sumLog ( values ) / ( double ) values.length ) ; }
{ return sum ( values ) / ( double ) values.length ; }
{ return geometricMean ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sumLog ( values , NUMBER_CONSTANT , values.length ) ; }
{ return product ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sumSq ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sum ( values , NUMBER_CONSTANT , values.length ) ; }
abstract int getWindowSize ( ) ;
abstract void clear ( ) ;
abstract double getSumsq ( ) ;
abstract double getSum ( ) ;
abstract int getN ( ) ;
abstract double getMin ( ) ;
abstract double getMax ( ) ;
abstract double getStandardDeviation ( ) ;
abstract double getVariance ( ) ;
abstract double getMean ( ) ;
public abstract double getKurtosis ( ) ;
{ return mean . evaluate ( values ) ; }
{ return geoMean . evaluate ( values ) ; }
{ return sumLog . evaluate ( values ) ; }
{ return product . evaluate ( values ) ; }
{ return sumSq . evaluate ( values ) ; }
{ return sum . evaluate ( values , NUMBER_CONSTANT , values.length ) ; }
double [] d
variance = ( n <= NUMBER_CONSTANT ) ? NUMBER_CONSTANT : m2 / ( double ) ( n - NUMBER_CONSTANT ) ;
{ return Math . exp ( sumLog . evaluate ( values , begin , length ) / ( double ) length ) ; }
public void clear () { value = Double.NaN ; }
public void clear () { super . clear () ; std = Double.NaN ; }
public void clear () { super . clear () ; }
public UnivariateImpl () {}
public void clear ( ) ;
if ( test ( values , begin , length ) ) { return super . evaluate ( values , begin , length ) / ( ( double ) length ) ; }
private UnivariateRealSolverFactory () {}
for ( int i = begin ; i < begin + length ; i ++ ) { increment ( values [ i ] ) ; }
double root = UnivariateRealSolverFactory . solve ( rootFindingFunction , bracket [ NUMBER_CONSTANT ] , bracket [ NUMBER_CONSTANT ] ) ;
public void increment ( double d ) { super . increment ( d ) ; }
public void setPropertyName ( String string ) { propertyName = string ; }
Object o
public void setPercentile ( double p ) { percentile = p ; }
double d
double d
public MathConfigurationException ( Throwable throwable ) { super ( throwable ) ; }
public MathConfigurationException ( String message ) { super ( message ) ; }
int n
int n
int n
double d
double d
double d
double d
double d
double d
double d
double d
double [] values
double d
double d
double [] values
double [] values
double [] values
double [] values
double [] values
double [] values
public MathException ( Throwable throwable ) { super ( throwable ) ; }
public MathException ( String message ) { super ( message ) ; }
double d
double d
{ String msg = STRING_CONSTANT + STRING_CONSTANT ; throw new ArrayIndexOutOfBoundsException ( msg ) ; }
if ( expansionFactor < NUMBER_CONSTANT ) { String msg = STRING_CONSTANT + STRING_CONSTANT ; throw new IllegalArgumentException ( msg ) ; }
protected void setUp ( ) throws Exception { super . setUp () ; b = DistributionFactory . newInstance () . createBinomailDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ try { factory . createBinomailDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {} }
{ try { factory . createBinomailDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomailDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomailDistribution ( NUMBER_CONSTANT , - NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {} }
{ try { factory . createBinomailDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomailDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { fail ( STRING_CONSTANT ) ; } }
{ try { factory . createBinomailDistribution ( - NUMBER_CONSTANT , NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {} }
DistributionFactoryImpl () { super(); }
UnivariateRealSolverFactoryImpl () {}
public BeanListUnivariateImpl ( List list ) { super ( list ) ; }
public ConvergenceException ( String message ) { super ( message ) ; }
{ this . propertyName = property ; }
{ super(); this . name = name ; }
public MathConfigurationException ( final Throwable throwable ) { super ( throwable ) ; }
public MathConfigurationException ( final String message ) { super ( message ) ; }
{ return min ( values , NUMBER_CONSTANT , values.length ) ; }
{ return max ( values , NUMBER_CONSTANT , values.length ) ; }
{ return variance ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sum ( values ) / ( double ) values.length ; }
{ return sumLog ( values , NUMBER_CONSTANT , values.length ) ; }
{ return product ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sumSq ( values , NUMBER_CONSTANT , values.length ) ; }
{ return sum ( values , NUMBER_CONSTANT , values.length ) ; }
StoreUnivariateImpl u = new StoreUnivariateImpl () ;
StoreUnivariateImpl u = new StoreUnivariateImpl () ;
StoreUnivariateImpl u = new StoreUnivariateImpl () ;
StoreUnivariate u = new StoreUnivariateImpl () ;
StoreUnivariate u = new StoreUnivariateImpl () ;
StoreUnivariate u = new StoreUnivariateImpl () ;
StoreUnivariate u = new BeanListUnivariateImpl ( patientList ) ;
StoreUnivariate u = new StoreUnivariateImpl () ;
StoreUnivariate u = new ListUnivariateImpl ( list ) ;
StoreUnivariate u = new ListUnivariateImpl ( externalList ) ;
Univariate stats = new UnivariateImpl () ;
Univariate u = new UnivariateImpl () ;
StoreUnivariate u = new ListUnivariateImpl ( externalList , transformers ) ;
return new Complex ( MathUtils . sinh ( a2 ) / d , Math . sin ( b2 ) / NUMBER_CONSTANT ) ;
return new Complex ( Math . sin ( a2 ) / d , MathUtils . sinh ( b2 ) / NUMBER_CONSTANT ) ;
public void clear () { value = Double.NaN ; }
public void clear () { value = Double.NaN ; }
public void clear () { value = Double.NaN ; }
public void clear () { value = Double.NaN ; }
public void clear () { value = Double.NaN ; }
{ URL url = getClass () . getResource ( STRING_CONSTANT ) ; vs . setValuesFileURL ( url . toExternalForm () ) ; }
empiricalDistribution . load ( file ) ;
vs . openReplayFile () ;
DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl () ;
StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl () ;
StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl () ;
DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl () ;
public abstract int getN ( ) ;
DescriptiveStatistics sampleStats
public void clear () { super . clear () ; list . clear () ; }
public AbstractDescriptiveStatistics ( int window ) { super ( window ) ; }
public AbstractDescriptiveStatistics () { super(); }
sampleStats = new StorelessDescriptiveStatisticsImpl () ;
new Complex ( Math . abs ( z . getImaginary () ) / ( NUMBER_CONSTANT * t ) , MathUtils . sign ( b ) * t )
public double getMean () { return new Mean ( firstMoment ) . getResult () ; }
empiricalDistribution . load ( file ) ;
public void testNext ( ) throws Exception { tstGen ( NUMBER_CONSTANT ) ; }
fail () ;
{ return ( ( Number ) org.apache.commons.beanutils.PropertyUtils . getProperty ( o , getPropertyName () ) ) . doubleValue () ; }
{ double actual = f . inverseCummulativeProbability ( p ) ; assertEquals ( STRING_CONSTANT + p , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = f . cummulativeProbability ( x ) ; assertEquals ( STRING_CONSTANT + x , expected , actual , NUMBER_CONSTANT ) ; }
double actual = DistributionFactory . newInstance () . createGammaDistribution ( a , b ) . inverseCummulativeProbability ( p ) ;
double actual = DistributionFactory . newInstance () . createGammaDistribution ( a , b ) . cummulativeProbability ( x ) ;
{ double actual = b . cummulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability8 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability1 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability001 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
return getSlopeStdErr () * getTDistribution () . inverseCummulativeProbability ( NUMBER_CONSTANT - alpha / NUMBER_CONSTANT ) ;
return NUMBER_CONSTANT - tDistribution . cummulativeProbability ( - t , t ) ;
return NUMBER_CONSTANT - tDistribution . cummulativeProbability ( - t , t ) ;
return NUMBER_CONSTANT - chiSquaredDistribution . cummulativeProbability ( chiSquare ( expected , observed ) ) ;
{ double actual = chiSquare . inverseCummulativeProbability ( p ) ; assertEquals ( STRING_CONSTANT + p , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = chiSquare . cummulativeProbability ( x ) ; assertEquals ( STRING_CONSTANT + x , expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = z . inverseCummulativeProbability ( p ) ; assertEquals ( expected , actual , PRECISION ) ; }
assertEquals ( NUMBER_CONSTANT , z . cummulativeProbability ( z . getMean () + z . getStandardDeviation () ) , PRECISION ) ;
assertEquals ( NUMBER_CONSTANT , z . cummulativeProbability ( mu ) , PRECISION ) ;
{ double actual = exp . inverseCummulativeProbability ( p ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = exp . cummulativeProbability ( x ) ; TestUtils . assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbabilityPositive () { testValue ( Double.NaN , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbabilityOne () { testValue ( Double.POSITIVE_INFINITY , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbabilityZero () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbabilityZero () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability900 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability950 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability975 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability990 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability999 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability100 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability050 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability025 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability010 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability001 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability900 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability950 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability975 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability990 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability100 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability050 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability025 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability010 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability001 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ double actual = h . cummulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability1 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability0 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ double actual = t . inverseCummulativeProbability ( p ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
{ double actual = t . cummulativeProbability ( x ) ; assertEquals ( expected , actual , NUMBER_CONSTANT ) ; }
public void testCummulativeProbability999 () { testProbability ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
public void testInverseCummulativeProbability999 () { testValue ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
UnivariateRealFunction f = new PolynomialFunction ( c ) ;
catch ( MathException e ) { e . printStackTrace () ; }
catch ( MathException e ) { e . printStackTrace () ; }
{ bp [ row ] [ col ] = bv [ pivot [ row ] ] [ col ] ; }
{ try { LUDecompose () ; return false ; } catch ( InvalidMatrixException ex ) { return true ; } }
{ ( new RealMatrixImpl ( testData2 ) ) . LUDecompose () ; fail ( STRING_CONSTANT ) ; }
{ throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
if ( test ( values , begin , length ) ) { return sum . evaluate ( values ) / ( ( double ) length ) ; }
public AbstractDescriptiveStatistics () {}
catch ( Exception ex ) {}
ExpandableDoubleArray eDA3 = new ExpandableDoubleArray ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
ExpandableDoubleArray eDA2 = new ExpandableDoubleArray ( NUMBER_CONSTANT ) ;
try { result = freqTable . getCount ( new Character ( v ) ) ; } catch ( Exception ex ) {}
try { result = freqTable . getCount ( new Long ( v ) ) ; } catch ( Exception ex ) {}
try { result = freqTable . getCount ( new Long ( v ) ) ; } catch ( Exception ex ) {}
try { result = freqTable . getCount ( v ) ; } catch ( Exception ex ) {}
TDistribution tDistribution = DistributionFactory . newInstance () . createTDistribution ( degreesOfFreedom ) ;
TDistribution tDistribution = DistributionFactory . newInstance () . createTDistribution ( n - NUMBER_CONSTANT ) ;
ChiSquaredDistribution chiSquaredDistribution = DistributionFactory . newInstance () . createChiSquareDistribution ( df ) ;
ChiSquaredDistribution chiSquaredDistribution = DistributionFactory . newInstance () . createChiSquareDistribution ( ( double ) expected.length - NUMBER_CONSTANT ) ;
{ super(); eDA = new ContractableDoubleArray () ; setWindowSize ( window ) ; }
Iterator iter = freqTable . uniqueSet () . iterator () ;
{ freqTable = new TreeBag ( comparator ) ; }
double det = ( double ) parity ;
public void clear () { super . clear () ; lastVar = NUMBER_CONSTANT ; }
if ( moment.n == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; } else { return moment.m2 / ( moment.n0 - NUMBER_CONSTANT ) ; }
{ sumSq += Math . pow ( values [ i ] , NUMBER_CONSTANT ) ; }
{ super . increment ( d ) ; }
{ super ( m2 ) ; }
catch ( Exception ex ) {}
catch ( Exception ex ) {}
catch ( Exception ex ) { ex . printStackTrace () ; }
double getN ( ) ;
public void resetFunctionValueAccuracy ( ) ;
public double getFunctionValueAccuracy ( ) ;
public void resetRelativeAccuracy ( ) ;
public double getRelativeAccuracy ( ) ;
public void resetAbsoluteAccuracy ( ) ;
public double getAbsoluteAccuracy ( ) ;
public int getMaximalIterationCount ( ) ;
{ return Math . exp ( super . evaluate ( values , begin , length ) / ( double ) length ) ; }
{ n ++ ; super . increment ( d ) ; }
{ os += m . getEntry ( i + NUMBER_CONSTANT , j + NUMBER_CONSTANT ) + STRING_CONSTANT ; }
{ os += m . getEntry ( i + NUMBER_CONSTANT , j + NUMBER_CONSTANT ) + STRING_CONSTANT ; }
{ return DEFAULT . format ( c ) ; }
public InvalidMatrixException ( String message ) { this ( message , null ) ; }
PoissonDistribution dist = new PoissonDistributionImpl ( DEFAULT_TEST_POISSON_PARAMETER ) ;
PoissonDistribution dist = new PoissonDistributionImpl ( NUMBER_CONSTANT ) ;
double t = Math . abs ( t ( m1 , m2 , v1 , v2 , n1 , n2 ) ) ;
public RandomDataTest ( String name ) { super ( name ) ; }
{ if ( rand == null ) { rand = new Random () ; } rand . setSeed ( System . currentTimeMillis () ) ; }
{ if ( rand == null ) { rand = new Random () ; } rand . setSeed ( seed ) ; }
Random rand = getRan () ;
Random rand = getRan () ;
Random rand = getRan () ;
Random rand = getRan () ;
Random rand = getRan () ;
Random ran = getRan () ;
{ return solve ( getIdentity ( this . getRowDimension () ) ) ; }
{ return solve ( getIdentity ( this . getRowDimension () ) ) ; }
private MathUtils () {}
float sign = sign ( x ) ;
double sign = sign ( x ) ;
if ( numberOfSuccesses > populationSize ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
x < a || a <= NUMBER_CONSTANT
a > NUMBER_CONSTANT && x > a
public AbstractRandomGeneratorTest ( String name ) { super ( name ) ; randomData = new RandomDataImpl ( new TestRandomGenerator () ) ; }
if ( fm * fmin > NUMBER_CONSTANT ) { min = m ; fmin = fm ; } else { max = m ; }
z = new Complex ( Double.NaN , NUMBER_CONSTANT ) ;
double result = Math . sqrt ( getRSquare ( b1 ) ) ;
{ return getSumSquaredErrors ( getSlope () ) ; }
Number number = getRealFormat () . parse ( source , pos ) ;
{ getRealFormat () . format ( value , toAppendTo , pos ) ; }
FastSineTransformer () { super(); }
FastFourierTransformer () { super(); }
FastCosineTransformer () { super(); }
{ return new Rotation ( - q0 , q1 , q2 , q3 ) ; }
public int eventOccurred ( double t , double [] y ) { sign = - sign ; return SwitchingFunction.RESET ; }
v . multiplySelf ( NUMBER_CONSTANT ) ;
v1 . addToSelf ( v2 ) ;
v1 . subtractFromSelf ( v2 ) ;
p . multiplySelf ( lcm ) ;
{ u . setElement ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; result = u . solve ( b , NUMBER_CONSTANT ) ; }
double [] mean = sample . getMean ( null ) ;
public VectorialSampleStatisticsTest ( String name ) { super ( name ) ; }
public double [] getArray () { return internalArray ; }
String name = new Integer ( k ) . toString () ;
return ( TestProblem [] ) problems . toArray ( new TestProblem [ NUMBER_CONSTANT ] ) ;
{ d . setElement ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; result = d . solve ( b , NUMBER_CONSTANT ) ; }
simplex [ i ] . getCost () > pointCostPair . getCost ()
{ return minima ; }
{ simplex [ i ] = new PointCostPair ( vertices [ i ] ) ; }
simplex [ i ] = new PointCostPair ( vertex ) ;
RandomVectorGenerator rvg = new CorrelatedRandomVectorGenerator ( statistics . getMean ( null ) , statistics . getCovarianceMatrix ( null ) , new UniformRandomGenerator ( seed ) ) ;
return ( largest . getCost () - smallest . getCost () ) < threshold ;
ElementPattern pattern
WeightedMeasurement m = new MyMeasurement ( NUMBER_CONSTANT , theoretical () + NUMBER_CONSTANT ) ;
WeightedMeasurement m = new MyMeasurement ( NUMBER_CONSTANT , theoretical () + NUMBER_CONSTANT ) ;
WeightedMeasurement m = new MyMeasurement ( NUMBER_CONSTANT , theoretical () + NUMBER_CONSTANT ) ;
public void tearOff () { fitter = null ; }
public AbstractCurveFitterTest ( String name ) { super ( name ) ; }
fail ( STRING_CONSTANT ) ;
try { while ( true ) { sum = sampler . nextSamplePoint () . getY () ; } } catch ( ExhaustedSampleException e ) {}
double [] data = mapper . getInternalDataArray () ;
double [] data = mapper . getInternalDataArray () ;
assertTrue ( mapper . getInternalDataArray () . length == size ) ;
try { while ( true ) { sum = sampler . nextSamplePoint () . getY () ; } } catch ( ExhaustedSampleException e ) {}
double originalCost = original [ NUMBER_CONSTANT ] . getCost () ;
{ return coefficients ; }
{ return coefficients ; }
new GaussNewtonEstimator ( maxIterations , convergence , steadyStateThreshold , epsilon ) . estimate ( this ) ;
return ( largest . getCost () - smallest . getCost () ) < threshold ;
assertTrue ( optimum . getCost () > NUMBER_CONSTANT ) ;
assertTrue ( optimum . getCost () > NUMBER_CONSTANT ) ;
double [] estimatedMean = sample . getMean ( null ) ;
{ l . setElement ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; result = l . solve ( b , NUMBER_CONSTANT ) ; }
double [] estimatedMean = sample . getMean ( null ) ;
RationalNumber newCoeff = RationalNumber . multiply ( a [ i ] , lcm ) ;
{ return interpolatedState ; }
public ScalarSampleStatisticsTest ( String name ) { super ( name ) ; }
public SwitchingFunction [] getSwitchingFunctions () { return null ; }
{ throw new ConvergenceException ( STRING_CONSTANT ) ; }
throw new ConvergenceException ( STRING_CONSTANT ) ;
super ( new MessageFormat ( pattern , Locale.US ) . format ( arguments ) ) ;
super ( new MessageFormat ( pattern , Locale.US ) . format ( arguments ) ) ;
{ return ( new BigDecimal ( new Double ( x ) . toString () ) . setScale ( scale , roundingMethod ) ) . doubleValue () ; }
return getSlopeStdErr () * getTDistribution () . inverseCumulativeProbability ( NUMBER_CONSTANT - alpha / NUMBER_CONSTANT ) ;
{ super(); setMean ( p ) ; }
HypergeometricDistribution dist = DistributionFactory . newInstance () . createHypergeometricDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
setDistribution ( DistributionFactory . newInstance () . createHypergeometricDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createHypergeometricDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createHypergeometricDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createChiSquareDistribution ( NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createPascalDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createPascalDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( NUMBER_CONSTANT ) ;
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( NUMBER_CONSTANT ) ;
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( DEFAULT_TEST_POISSON_PARAMETER ) ;
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( DEFAULT_TEST_POISSON_PARAMETER ) ;
PoissonDistribution dist = DistributionFactory . newInstance () . createPoissonDistribution ( NUMBER_CONSTANT ) ;
setDistribution ( DistributionFactory . newInstance () . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createBinomialDistribution ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
setDistribution ( DistributionFactory . newInstance () . createTDistribution ( NUMBER_CONSTANT ) ) ;
public void setUp () { testStatistic = TestUtils . getTTest () ; }
public void setUp () { testStatistic = TestUtils . getChiSquareTest () ; }
try { x = m . operate ( testVector ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) { ; }
{ double x = MathUtils . factorial ( test ) ; }
transformer . scaleArray ( x2 , NUMBER_CONSTANT / Math . sqrt ( x2.length ) ) ;
try { percentile = new Percentile ( NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException ex ) {}
{ return ( internalArray.length / numElements ) > contractionCriteria ; }
if ( normProduct < NUMBER_CONSTANT ) { throw new ArithmeticException ( STRING_CONSTANT ) ; }
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics stats = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
RungeKuttaStepInterpolator rki = ( RungeKuttaStepInterpolator ) prototype . clone () ;
RungeKuttaStepInterpolator rki = ( RungeKuttaStepInterpolator ) prototype . clone () ;
this . safety = NUMBER_CONSTANT ;
this . safety = NUMBER_CONSTANT ;
{ super ( false , c , a , b , new ThreeEighthesStepInterpolator () , step ) ; }
{ super ( false , c , a , b , new EulerStepInterpolator () , step ) ; }
{ super ( false , c , a , b , new MidpointStepInterpolator () , step ) ; }
{ super ( false , c , a , b , new GillStepInterpolator () , step ) ; }
{ super ( false , c , a , b , new ClassicalRungeKuttaStepInterpolator () , step ) ; }
public double getCurrentStepsize () { return stepSize ; }
public double getCurrentStepsize () { return stepSize ; }
TestProblemHandler handler = new TestProblemHandler ( pb ) ;
TestProblemHandler handler = new TestProblemHandler ( pb ) ;
TestProblemHandler handler = new TestProblemHandler ( pb ) ;
TestProblemHandler handler = new TestProblemHandler ( pb ) ;
integ . addSwitchingFunction ( stepProblem , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
integ . addSwitchingFunction ( stepProblem , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
integ . addSwitchingFunction ( stepProblem , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
{ if ( isNaN () ) { return NaN ; } return new Complex ( - real , - imaginary ) ; }
{ if ( isNaN () ) { return NaN ; } return new Complex ( real , - imaginary ) ; }
{ SummaryStatistics stats = SummaryStatistics . newInstance () ; binStats . add ( i , stats ) ; }
sampleStats = SummaryStatistics . newInstance () ;
sampleStats = SummaryStatistics . newInstance () ;
SummaryStatistics stats = SummaryStatistics . newInstance () ;
SummaryStatistics stats = SummaryStatistics . newInstance () ;
SummaryStatistics u = SummaryStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
SummaryStatistics oneSidedPStats = SummaryStatistics . newInstance () ;
sampleStats = SummaryStatistics . newInstance () ;
SummaryStatistics oneSidedPStats = SummaryStatistics . newInstance () ;
sampleStats = SummaryStatistics . newInstance () ;
DescriptiveStatistics u = DescriptiveStatistics . newInstance () ;
BufferedReader in = new BufferedReader ( new InputStreamReader ( getClass () . getResourceAsStream ( resource ) ) ) ;
{ return arguments ; }
String [] parts
String [] parts
{ throw new ConvergenceException ( STRING_CONSTANT + STRING_CONSTANT , new String [] { Integer . toString ( starts ) } ) ; }
double originalCost = original [ NUMBER_CONSTANT ] . cost ;
simplex [ i ] . cost > pointCostPair.cost
return ( largest.cost - smallest.cost ) < threshold ;
assertTrue ( optimum.cost > NUMBER_CONSTANT ) ;
assertTrue ( optimum.cost > NUMBER_CONSTANT ) ;
return ( largest.cost - smallest.cost ) < threshold ;
{ throw new EstimationException ( STRING_CONSTANT , new String [] { Integer . toString ( maxCostEval ) } ) ; }
double c = NUMBER_CONSTANT / ( n * ( n - NUMBER_CONSTANT ) ) ;
VectorialCovariance stat = new VectorialCovariance ( points [ NUMBER_CONSTANT ] . length ) ;
VectorialCovariance stat = new VectorialCovariance ( NUMBER_CONSTANT ) ;
{ new VectorialCovariance ( NUMBER_CONSTANT ) . increment ( new double [ NUMBER_CONSTANT ] ) ; fail ( STRING_CONSTANT ) ; }
VectorialCovariance covStat = new VectorialCovariance ( vertices [ NUMBER_CONSTANT ] . length ) ;
VectorialCovariance covStat = new VectorialCovariance ( mean.length ) ;
VectorialCovariance covStat = new VectorialCovariance ( mean.length ) ;
{ return meanImpl ; }
{ return geoMeanImpl ; }
{ return sumLogImpl ; }
{ return maxImpl ; }
{ return minImpl ; }
{ return sumSqImpl ; }
{ return sumImpl ; }
try { u . setMeanImpl ( new sumMean () ) ; fail ( STRING_CONSTANT ) ; } catch ( IllegalStateException ex ) {}
++ jacobianEvaluations ;
++ jacobianEvaluations ;
catch ( ArithmeticException e ) {}
catch ( ArithmeticException e ) {}
String [] parts
return NUMBER_CONSTANT - distribution . cumulativeProbability ( - t , t ) ;
return NUMBER_CONSTANT - distribution . cumulativeProbability ( - t , t ) ;
return NUMBER_CONSTANT - distribution . cumulativeProbability ( - t , t ) ;
certifiedValues = new HashMap () ;
{ switchesHandler . add ( function , maxCheckInterval , convergence , maxIterationCount ) ; }
ListUnivariateImpl u = new ListUnivariateImpl ( new ArrayList () ) ;
Class key
Class key
{ switchesHandler . add ( function , maxCheckInterval , convergence , maxIterationCount ) ; }
{ functions = new ArrayList () ; first = null ; initialized = false ; }
Collection categoryData
Collection categoryData
Collection categoryData
Collection c
Collection categoryData
Collection categoryData
Collection categoryData
List list
List list
public ListUnivariateImpl () { this ( new ArrayList () ) ; }
{ this . binCount = binCount ; binStats = new ArrayList () ; }
public EmpiricalDistributionImpl () { binStats = new ArrayList () ; }
points = new ArrayList () ;
{ return ( ( StepInterpolator ) steps . get ( index ) ) . getInterpolatedState () ; }
{ return ( ( StepInterpolator ) steps . get ( index ) ) . getInterpolatedTime () ; }
public ContinuousOutputModel () { steps = new ArrayList () ; reset () ; }
Collection categoryData
Collection categoryData
Collection categoryData
points = new ArrayList () ;
Collection c
ListUnivariateImpl u = new ListUnivariateImpl ( new ArrayList () , transformers ) ;
ListUnivariateImpl u = new ListUnivariateImpl ( new ArrayList () , transformers ) ;
DescriptiveStatistics u = new ListUnivariateImpl ( new ArrayList () , transformers ) ;
{ return solve ( MatrixUtils . createBigIdentityMatrix ( this . getRowDimension () ) ) ; }
public BigMatrix copy () { return new BigMatrixImpl ( this . copyOut () ) ; }
int nRows = v.length ;
{ return solve ( MatrixUtils . createRealIdentityMatrix ( this . getRowDimension () ) ) ; }
{ new Rotation ( u , new Vector3D () ) ; fail ( STRING_CONSTANT ) ; }
{ Vector3D . angle ( new Vector3D () , Vector3D.plusI ) ; fail ( STRING_CONSTANT ) ; }
{ new Vector3D () . normalize () ; fail ( STRING_CONSTANT ) ; }
assertTrue ( Math . abs ( new Vector3D () . getNorm () ) < NUMBER_CONSTANT ) ;
String [] parts
if ( offset > NUMBER_CONSTANT ) { throw new SwitchException ( STRING_CONSTANT , new Object [] { new Double ( t ) } ) ; }
{ super ( STRING_CONSTANT , new Object [] { new Integer ( maxIterations ) } ) ; this . maxIterations = maxIterations ; }
Object [] arguments = { new Integer ( NUMBER_CONSTANT ) , new Integer ( NUMBER_CONSTANT ) } ;
Object [] arguments = { new Integer ( NUMBER_CONSTANT ) , new Integer ( NUMBER_CONSTANT ) } ;
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { new Integer ( m ) , new Integer ( p ) } ) ; }
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { new Integer ( maxCostEval ) } ) ; }
super ( STRING_CONSTANT , new Object [] { new Integer ( dimension1 ) , new Integer ( dimension2 ) } ) ;
dynaBean . set ( propertyName , new Double ( v ) ) ;
Integer input = new Integer ( NUMBER_CONSTANT ) ;
Double input = new Double ( expected ) ;
{ return new Double ( o . toString () ) . doubleValue () ; }
list . add ( new Double ( one ) ) ;
new Object [] { new Double ( NUMBER_CONSTANT ) }
new Object [] { new Double ( p ) }
{ return getCumPct ( new Long ( v ) ) ; }
{ return getCumPct ( new Long ( v ) ) ; }
{ return getCumFreq ( new Long ( v ) ) ; }
{ return getCumFreq ( new Long ( v ) ) ; }
{ return getPct ( new Long ( v ) ) ; }
{ return getPct ( new Long ( v ) ) ; }
{ return getCount ( new Long ( v ) ) ; }
{ return getCount ( new Long ( v ) ) ; }
{ addValue ( new Long ( v . longValue () ) ) ; }
Object [] arguments = { new Integer ( NUMBER_CONSTANT ) , new Integer ( NUMBER_CONSTANT ) } ;
Object [] arguments = { new Integer ( NUMBER_CONSTANT ) , new Integer ( NUMBER_CONSTANT ) } ;
Object [] arguments = { new Double ( NUMBER_CONSTANT ) } ;
Object [] arguments = { new Double ( NUMBER_CONSTANT ) } ;
{ throw new EstimationException ( STRING_CONSTANT , new Object [] { new Integer ( rows ) , new Integer ( cols ) } ) ; }
Object [] arguments = { new Integer ( NUMBER_CONSTANT ) , new Integer ( NUMBER_CONSTANT ) } ;
Object [] arguments = { new Integer ( NUMBER_CONSTANT ) , new Integer ( NUMBER_CONSTANT ) } ;
{ ret = new Double ( value ) ; pos . setIndex ( endIndex ) ; }
{ super ( STRING_CONSTANT , new Object [] { new Double ( argument ) } ) ; this . argument = argument ; }
assertFalse ( zero . equals ( new Double ( NUMBER_CONSTANT ) ) ) ;
assertFalse ( u . equals ( new Double ( NUMBER_CONSTANT ) ) ) ;
return new Double ( newA ) ;
return new Double ( newA ) ;
return new Double ( newA ) ;
return new Double ( newA ) ;
assertFalse ( STRING_CONSTANT , u . equals ( new Double ( NUMBER_CONSTANT ) ) ) ;
{ super ( STRING_CONSTANT , new Object [] { new Double ( value ) , new Integer ( maxIterations ) } ) ; }
Double pi = new Double ( Math.PI ) ;
assertFalse ( STRING_CONSTANT , u . equals ( new Double ( NUMBER_CONSTANT ) ) ) ;
Double value = new Double ( valueString ) ;
double delta = ( max - min ) / ( new Double ( binCount ) ) . doubleValue () ;
{ val = new Double ( str ) . doubleValue () ; sampleStats . addValue ( val ) ; }
