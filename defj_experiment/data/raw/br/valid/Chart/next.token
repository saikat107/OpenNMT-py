catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( Exception e ) { e . printStackTrace () ; }
timeline . setStartTime ( firstMondayAfter1900 () + NUMBER_CONSTANT * timeline . getSegmentSize () ) ;
{ SegmentedTimeline timeline = new SegmentedTimeline ( DAY_SEGMENT_SIZE , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; timeline . setStartTime ( firstMondayAfter1900 () ) ; return timeline ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
catch ( Exception e ) { e . printStackTrace () ; }
if ( index < NUMBER_CONSTANT || index >= getDatasetCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT + index + STRING_CONSTANT ) ; }
if ( index < NUMBER_CONSTANT || index >= getDatasetCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT + index + STRING_CONSTANT ) ; }
if ( index < NUMBER_CONSTANT || index > NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT + index + STRING_CONSTANT ) ; }
if ( index < NUMBER_CONSTANT || index > NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT + index + STRING_CONSTANT ) ; }
clone.seriesShapesVisible = ( BooleanList ) this . seriesShapesVisible . clone () ;
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( Exception e ) { e . printStackTrace () ; }
int pos = getIndex ( key ) ;
{ return new Range ( this . minimumRangeValue , this . maximumRangeValue ) ; }
g2 . setPaint ( getVolumePaint () ) ;
if ( this . gap != that.gap ) { return false ; }
return super . equals ( obj ) ;
return super . equals ( obj ) ;
return super . equals ( obj ) ;
return super . equals ( obj ) ;
return super . equals ( obj ) ;
return super . equals ( obj ) ;
return super . equals ( obj ) ;
MessageBox messageBox = new MessageBox ( this . canvas . getShell () , SWT.OK | SWT.ICON_ERROR ) ;
SWTChartEditor editor = new SWTChartEditor ( this . canvas . getDisplay () , this . chart ) ;
{ this . switchColors () ; this . gc . fillRectangle ( x , y , width , height ) ; this . switchColors () ; }
{ this . gc . drawLine ( x1 , y1 , x2 , y2 ) ; }
this . gc . setClipping ( clipPath ) ;
{ this . gc . setClipping ( x , y , width , height ) ; }
{ org.eclipse.swt.graphics.Rectangle clip = this . gc . getClipping () ; return new Rectangle ( clip.x , clip.y , clip.width , clip.height ) ; }
{ Path path = toSwtPath ( s ) ; this . gc . setClipping ( path ) ; path . dispose () ; }
{ org.eclipse.swt.graphics.Font swtFont = getSwtFontFromPool ( font ) ; this . gc . setFont ( swtFont ) ; }
this . gc . setForeground ( swtColor ) ;
public void setTransform ( AffineTransform Tx ) { this . gc . setTransform ( toSwtTransform ( Tx ) ) ; }
{ this . gc . drawImage ( image , x , y ) ; }
{ Path path = toSwtPath ( shape ) ; this . gc . drawPath ( path ) ; path . dispose () ; }
swtColor = SWTUtils . toSwtColor ( this . gc . getDevice () , awtColor ) ;
protected DialPointer () { this ( NUMBER_CONSTANT ) ; }
DialValueIndicator i1 = new DialValueIndicator ( NUMBER_CONSTANT ) ;
DialValueIndicator i1 = new DialValueIndicator ( NUMBER_CONSTANT ) ;
this . dialFrame = new ArcDialFrame () ;
suite . addTestSuite ( ArcDialFrameTests . class ) ;
public Color getColor () { return this . myColor ; }
{ if ( this . myColor != null ) { this . myColor . dispose () ; } this . myColor = color ; }
e.gc . setBackground ( SWTPaintCanvas . this . myColor ) ;
this . drawBarOutline = false ;
suite . addTestSuite ( XYSplineRendererTests . class ) ;
suite . addTestSuite ( StandardDialFrameTests . class ) ;
Comparable name
Comparable name
Comparable name
{ this . axis . resizeRange ( factor ) ; }
if ( values != null ) { return Collections . unmodifiableList ( values ) ; } else { return Collections.EMPTY_LIST ; }
{ PeriodAxisLabelInfo clone = ( PeriodAxisLabelInfo ) super . clone () ; return clone ; }
{ return SWTUtils . toAwtFont ( getDisplay () , this . tickLabelFont , true ) ; }
public Stroke getStroke () { return this . strokeCanvas . getStroke () ; }
public Color getOutlinePaint () { return this . outlinePaintCanvas . getColor () ; }
public Color getBackGroundPaint () { return this . backgroundPaintCanvas . getColor () ; }
if ( radius <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( p == null ) { return NUMBER_CONSTANT ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
{ CategoryPlot plot = ( CategoryPlot ) iterator . next () ; plot . setFixedRangeAxisSpace ( space , false ) ; }
{ CategoryPlot plot = ( CategoryPlot ) iterator . next () ; plot . setFixedDomainAxisSpace ( space , false ) ; }
this . canvas = new Canvas ( this , SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND ) ;
fireChangeEvent () ;
if ( this . baseShapesVisible != flag ) { this . baseShapesVisible = flag ; fireChangeEvent () ; }
{ this . legendItemToolTipGenerator = generator ; fireChangeEvent () ; }
{ this . baseToolTipGenerator = generator ; fireChangeEvent () ; }
{ this . toolTipGenerator = generator ; fireChangeEvent () ; }
{ this . baseItemLabelGenerator = generator ; fireChangeEvent () ; }
{ this . itemLabelGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ this . itemLabelGenerator = generator ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
try { new ComparableObjectSeries ( null ) ; } catch ( IllegalArgumentException e ) { pass = true ; }
{ this . errorIndicatorPaint = paint ; fireChangeEvent () ; }
{ this . errorIndicatorStroke = stroke ; fireChangeEvent () ; }
{ this . renderAsPercentages = asPercentages ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
{ this . plotLines = draw ; fireChangeEvent () ; }
{ this . legendItemURLGenerator = generator ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . itemMargin = margin ; fireChangeEvent () ; }
{ this . fillBox = flag ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . useSeriesOffset = offset ; fireChangeEvent () ; }
{ this . useFillPaint = flag ; fireChangeEvent () ; }
{ this . baseShapesFilled = flag ; fireChangeEvent () ; }
{ this . seriesShapesFilled . setBoolean ( series , filled ) ; fireChangeEvent () ; }
{ this . shapesFilled = filled ; fireChangeEvent () ; }
{ this . useOutlinePaint = use ; fireChangeEvent () ; }
{ this . drawOutlines = flag ; fireChangeEvent () ; }
{ this . baseShapesVisible = flag ; fireChangeEvent () ; }
{ this . seriesShapesVisible . setBoolean ( series , flag ) ; fireChangeEvent () ; }
{ this . shapesVisible = visible ; fireChangeEvent () ; }
{ this . baseLinesVisible = flag ; fireChangeEvent () ; }
{ this . seriesLinesVisible . setBoolean ( series , flag ) ; fireChangeEvent () ; }
{ this . linesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . yOffset = yOffset ; fireChangeEvent () ; }
{ this . xOffset = xOffset ; fireChangeEvent () ; }
{ this . maxItemWidth = percent ; fireChangeEvent () ; }
fireChangeEvent () ;
if ( this . includeBaseInRange != include ) { this . includeBaseInRange = include ; fireChangeEvent () ; }
{ this . negativeItemLabelPositionFallback = position ; fireChangeEvent () ; }
{ this . positiveItemLabelPositionFallback = position ; fireChangeEvent () ; }
{ this . gradientPaintTransformer = transformer ; fireChangeEvent () ; }
{ this . minimumBarLength = min ; fireChangeEvent () ; }
{ this . maximumBarWidth = percent ; fireChangeEvent () ; }
{ this . drawBarOutline = draw ; fireChangeEvent () ; }
{ this . itemMargin = percent ; fireChangeEvent () ; }
{ this . base = base ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . renderAsPercentages = asPercentages ; fireChangeEvent () ; }
{ this . useFillPaint = flag ; fireChangeEvent () ; }
{ this . drawOutlines = flag ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . useSeriesOffset = offset ; fireChangeEvent () ; }
{ this . renderAsPercentages = asPercentages ; fireChangeEvent () ; }
{ this . stagger = shouldStagger ; fireChangeEvent () ; }
{ this . useOutlinePaint = flag ; fireChangeEvent () ; }
{ this . useFillPaint = flag ; fireChangeEvent () ; }
{ this . drawOutlines = flag ; fireChangeEvent () ; }
{ this . baseShapesFilled = flag ; fireChangeEvent () ; }
{ this . seriesShapesFilled . setBoolean ( series , flag ) ; fireChangeEvent () ; }
{ this . shapesFilled = filled ; fireChangeEvent () ; }
{ this . baseShapesVisible = flag ; fireChangeEvent () ; }
{ this . seriesShapesVisible . setBoolean ( series , flag ) ; fireChangeEvent () ; }
{ this . shapesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . baseLinesVisible = flag ; fireChangeEvent () ; }
{ this . seriesLinesVisible . setBoolean ( series , flag ) ; fireChangeEvent () ; }
{ this . linesVisible = visible ; fireChangeEvent () ; }
{ this . yOffset = yOffset ; fireChangeEvent () ; }
{ this . xOffset = xOffset ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
{ this . negativeItemLabelPositionFallback = position ; fireChangeEvent () ; }
{ this . positiveItemLabelPositionFallback = position ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . gradientPaintTransformer = transformer ; fireChangeEvent () ; }
{ this . drawBarOutline = draw ; fireChangeEvent () ; }
{ this . margin = margin ; fireChangeEvent () ; }
if ( this . useYInterval != use ) { this . useYInterval = use ; fireChangeEvent () ; }
{ this . base = base ; fireChangeEvent () ; }
{ this . renderAsPercentages = asPercentages ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . showOutline = show ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . drawVolume != flag ) { this . drawVolume = flag ; fireChangeEvent () ; }
{ this . downPaint = paint ; fireChangeEvent () ; }
{ this . upPaint = paint ; fireChangeEvent () ; }
if ( this . autoWidthFactor != autoWidthFactor ) { this . autoWidthFactor = autoWidthFactor ; fireChangeEvent () ; }
{ this . legendItemURLGenerator = generator ; fireChangeEvent () ; }
{ this . legendItemToolTipGenerator = generator ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . foregroundAnnotations . clear () ; this . backgroundAnnotations . clear () ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . baseToolTipGenerator = generator ; fireChangeEvent () ; }
{ this . toolTipGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ this . toolTipGenerator = generator ; fireChangeEvent () ; }
{ this . baseItemLabelGenerator = generator ; fireChangeEvent () ; }
{ this . itemLabelGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ this . itemLabelGenerator = generator ; fireChangeEvent () ; }
{ this . fillBox = flag ; fireChangeEvent () ; }
{ this . boxPaint = paint ; fireChangeEvent () ; }
if ( width != this . boxWidth ) { this . boxWidth = width ; fireChangeEvent () ; }
{ this . shapesVisible = flag ; fireChangeEvent () ; }
{ this . showOutline = show ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . showOutline = show ; fireChangeEvent () ; }
{ this . roundXCoordinates = round ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . closeTickPaint = paint ; fireChangeEvent () ; }
{ this . openTickPaint = paint ; fireChangeEvent () ; }
{ this . drawCloseTicks = draw ; fireChangeEvent () ; }
{ this . drawOpenTicks = draw ; fireChangeEvent () ; }
{ this . roundXCoordinates = round ; fireChangeEvent () ; }
fireChangeEvent () ;
{ this . capLength = length ; fireChangeEvent () ; }
if ( this . drawYError != draw ) { this . drawYError = draw ; fireChangeEvent () ; }
{ this . drawXError = draw ; fireChangeEvent () ; }
org.eclipse.swt.graphics.Image im = new org.eclipse.swt.graphics.Image ( this . gc . getDevice () , SWTUtils . convertToSWT ( image ) ) ;
{ XYPlot plot = ( XYPlot ) iterator . next () ; plot . setFixedRangeAxisSpace ( space , false ) ; }
{ XYPlot plot = ( XYPlot ) iterator . next () ; plot . setFixedDomainAxisSpace ( space , false ) ; }
sb . append ( STRING_CONSTANT + htmlEscape ( name ) + STRING_CONSTANT + htmlEscape ( name ) + STRING_CONSTANT ) ;
BufferedImage image = new BufferedImage ( imageWidth , imageHeight , BufferedImage.TYPE_INT_ARGB ) ;
{ return createBufferedImage ( width , height , BufferedImage.TYPE_INT_ARGB , info ) ; }
{ return STRING_CONSTANT + URLUtilities . encode ( urlText , STRING_CONSTANT ) + STRING_CONSTANT ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
{ this ( time , zone , Locale . getDefault () ) ; }
this . seriesToGroupMap . getGroupIndex ( this . seriesToGroupMap . getGroup ( plot . getDataset ( plot . getIndexOf ( this ) ) . getRowKey ( row ) ) )
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
BufferedImage image = chart . createBufferedImage ( width , height , BufferedImage.TYPE_INT_RGB , info ) ;
BufferedImage image = chart . createBufferedImage ( width , height , BufferedImage.TYPE_INT_RGB , info ) ;
Comparable key
double seriesGap = dataArea . getHeight () * getItemMargin () / ( categoryCount * ( seriesCount - NUMBER_CONSTANT ) ) ;
catch ( Exception e ) { e . printStackTrace () ; }
if ( this . showBase ) { result . append ( this . baseLabel ) ; result . append ( this . powerLabel ) ; }
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . rangeGridlinesVisible != visible ) { this . rangeGridlinesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . domainGridlinesVisible != visible ) { this . domainGridlinesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
{ this . data = data ; fireChangeEvent () ; }
{ this . fixedLegendItems = items ; fireChangeEvent () ; }
{ this . fixedRangeAxisSpace = space ; if ( notify ) { fireChangeEvent () ; } }
{ this . fixedDomainAxisSpace = space ; if ( notify ) { fireChangeEvent () ; } }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . rangeCrosshairValue = value ; if ( isRangeCrosshairVisible () && notify ) { fireChangeEvent () ; } }
if ( this . rangeCrosshairLockedOnData != flag ) { this . rangeCrosshairLockedOnData = flag ; fireChangeEvent () ; }
if ( this . rangeCrosshairVisible != flag ) { this . rangeCrosshairVisible = flag ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . domainCrosshairValue = value ; if ( isDomainCrosshairVisible () && notify ) { fireChangeEvent () ; } }
if ( this . domainCrosshairLockedOnData != flag ) { this . domainCrosshairLockedOnData = flag ; fireChangeEvent () ; }
if ( this . domainCrosshairVisible != flag ) { this . domainCrosshairVisible = flag ; fireChangeEvent () ; }
{ fireChangeEvent () ; }
{ this . annotations . clear () ; fireChangeEvent () ; }
if ( removed && notify ) { fireChangeEvent () ; }
if ( notify ) { fireChangeEvent () ; }
if ( removed && notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( removed && notify ) { fireChangeEvent () ; }
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
{ this . rangeTickBandPaint = paint ; fireChangeEvent () ; }
{ this . domainTickBandPaint = paint ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . rangeZeroBaselineVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . domainZeroBaselineVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . rangeGridlinesVisible != visible ) { this . rangeGridlinesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . domainGridlinesVisible != visible ) { this . domainGridlinesVisible = visible ; fireChangeEvent () ; }
{ this . weight = weight ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( orientation != this . orientation ) { this . orientation = orientation ; fireChangeEvent () ; }
{ fireChangeEvent () ; }
{ fireChangeEvent () ; }
if ( this . foregroundAlpha != alpha ) { this . foregroundAlpha = alpha ; fireChangeEvent () ; }
{ this . outlineVisible = visible ; fireChangeEvent () ; }
{ this . backgroundImageAlpha = alpha ; fireChangeEvent () ; }
if ( this . backgroundImageAlignment != alignment ) { this . backgroundImageAlignment = alignment ; fireChangeEvent () ; }
{ this . backgroundImage = image ; fireChangeEvent () ; }
{ this . drawingSupplier = supplier ; fireChangeEvent () ; }
if ( this . backgroundAlpha != alpha ) { this . backgroundAlpha = alpha ; fireChangeEvent () ; }
{ this . insets = insets ; if ( notify ) { fireChangeEvent () ; } }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . noDataMessage = message ; fireChangeEvent () ; }
{ this . anchorValue = value ; if ( notify ) { fireChangeEvent () ; } }
{ this . drawSharedDomainAxis = draw ; fireChangeEvent () ; }
{ this . fixedRangeAxisSpace = space ; if ( notify ) { fireChangeEvent () ; } }
{ this . fixedDomainAxisSpace = space ; if ( notify ) { fireChangeEvent () ; } }
{ this . weight = weight ; fireChangeEvent () ; }
{ this . annotations . clear () ; fireChangeEvent () ; }
if ( removed && notify ) { fireChangeEvent () ; }
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
{ this . rangeCrosshairValue = value ; if ( isRangeCrosshairVisible () && notify ) { fireChangeEvent () ; } }
if ( this . rangeCrosshairLockedOnData != flag ) { this . rangeCrosshairLockedOnData = flag ; fireChangeEvent () ; }
if ( this . rangeCrosshairVisible != flag ) { this . rangeCrosshairVisible = flag ; fireChangeEvent () ; }
if ( removed && notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
if ( removed && notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
{ this . fixedLegendItems = items ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . rangeGridlinesVisible != visible ) { this . rangeGridlinesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
if ( this . domainGridlinesVisible != visible ) { this . domainGridlinesVisible = visible ; fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
if ( notify ) { fireChangeEvent () ; }
fireChangeEvent () ;
fireChangeEvent () ;
