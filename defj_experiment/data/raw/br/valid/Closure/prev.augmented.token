rhs|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
rootNameNode|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
Node|800 newVar|204 =|800 IR|235 .|802 declaration|214 (|800 child|234 ,|800 n|235 .|802 getType|216 ()|215 )|235 .|802 srcref|214 (|800 n|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
notChild|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 CALL|226 :|802 annotateCalls|214 (|800 n|215 )|227 ;|500 break;|500 default:|500 break;|219 }|219 }|-1
assertThat|214 (|800 enumTypeNode|235 .|802 getType|216 ()|215 )|235 .|802 isEqualTo|214 (|40 Token.BANG|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 CALL|226 :|802 visitCall|214 (|800 t|234 ,|800 n|215 )|227 ;|500 break;|500 default:|500 break;|219 }|219 }|-1
if|214 (|800 typeExprNode|235 .|802 getType|216 ()|236 ==|40 Token.QMARK|249 &&|207 !|800 typeExprNode|235 .|802 hasChildren|216 ()|215 )|218 {|329 return|9 true|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
assertEquals|214 (|40 Token.VAR|234 ,|800 var|235 .|802 getType|216 ()|215 )|227 ;|-1
n|235 .|802 getType|216 ()|236 ==|800 type|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
definitionParent|235 .|802 getType|216 ()|-1
throw|304 new|801 RuntimeException|214 (|45 STRING_CONSTANT|200 +|800 defSite|235 .|802 getType|216 ()|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Preconditions|235 .|802 checkState|214 (|800 nameNode|235 .|802 isGetProp|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 nameNode|235 .|802 getType|216 ()|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
Token|800 exprKind|204 =|800 expr|235 .|802 getType|216 ()|227 ;|-1
expr|235 .|802 getType|216 ()|-1
insideQualifiedName|250 |||800 propAccessNode|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|242 !=|40 Token.ASSIGN|-1
expr|235 .|802 getType|216 ()|-1
lvalue|235 .|802 getType|216 ()|-1
Token|800 tokenType|204 =|800 expr|235 .|802 getType|216 ()|227 ;|-1
{|802 warnInvalidOperand|214 (|800 expr|234 ,|800 expr|235 .|802 getType|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 lhsType|200 +|45 STRING_CONSTANT|200 +|800 rhsType|215 )|227 ;|219 }|-1
if|214 (|207 !|800 commonTypes|235 .|802 isNumberScalarOrObj|214 (|40 pair.type|215 )|215 )|218 {|802 warnInvalidOperand|214 (|800 child|234 ,|800 expr|235 .|802 getType|216 ()|234 ,|40 JSType.NUMBER|234 ,|40 pair.type|215 )|227 ;|219 }|-1
Token|800 exprKind|204 =|800 expr|235 .|802 getType|216 ()|227 ;|-1
{|800 warnings|235 .|802 add|214 (|800 JSError|235 .|802 make|214 (|800 expr|234 ,|800 UNKNOWN_EXPR_TYPE|234 ,|800 expr|235 .|802 getType|216 ()|235 .|802 toString|216 ()|215 )|215 )|227 ;|219 }|-1
dn|235 .|802 getValue|216 ()|235 .|802 getType|216 ()|-1
assertThat|214 (|800 cont|235 .|802 getType|216 ()|215 )|235 .|802 isSameAs|214 (|40 Token.CONTINUE|215 )|227 ;|-1
assertThat|214 (|800 breakStm|235 .|802 getType|216 ()|215 )|235 .|802 isSameAs|214 (|40 Token.BREAK|215 )|227 ;|-1
value|235 .|802 getType|216 ()|-1
!|800 registerFunc|235 .|802 isValidNodeType|214 (|800 valueNode|235 .|802 getType|216 ()|215 )|-1
!|800 registerFunc|235 .|802 isValidNodeType|214 (|800 value|235 .|802 getType|216 ()|215 )|-1
n|235 .|802 getType|216 ()|-1
changed|204 =|800 changed|250 |||800 finalValue|235 .|802 getType|216 ()|242 !=|40 info.initialValue|235 .|802 getType|216 ()|250 |||207 !|800 finalValue|235 .|802 isEquivalentTo|214 (|40 info.initialValue|215 )|227 ;|-1
{|313 if|214 (|800 blockNode|235 .|802 getChildCount|216 ()|236 ==|34 NUMBER_CONSTANT|249 &&|800 blockNode|235 .|802 getFirstChild|216 ()|235 .|802 getType|216 ()|236 ==|40 Token.THROW|215 )|218 {|329 return|9 true|227 ;|219 }|329 return|9 false|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
arg|235 .|802 getType|216 ()|242 !=|800 desiredType|-1
val|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
lhs|235 .|802 getType|216 ()|-1
Token|800 parentType|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 HOOK|226 :|326 case|800 AND|226 :|326 case|800 OR|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
expr|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Token|800 type|204 =|800 ancestor|235 .|802 getType|216 ()|227 ;|-1
node|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Token|800 actualType|204 =|800 cfgNodes|235 .|802 get|214 (|800 i|215 )|235 .|802 getValue|216 ()|235 .|802 getType|216 ()|227 ;|-1
if|214 (|800 source|235 .|802 getType|216 ()|236 ==|800 startToken|215 )|218 {|802 assertFalse|214 (|45 STRING_CONSTANT|200 +|800 startToken|200 +|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|234 ,|800 cfg|235 .|802 isImplicitReturn|214 (|800 dest|215 )|215 )|227 ;|500 return;|219 }|-1
if|214 (|800 source|235 .|802 getType|216 ()|236 ==|800 startToken|249 &&|800 cfg|235 .|802 isImplicitReturn|214 (|800 dest|215 )|215 )|218 {|500 return;|219 }|-1
return|800 enclosingNode|242 !=|500 null|249 &&|800 enclosingNode|235 .|802 getType|216 ()|242 !=|40 Token.FUNCTION|227 ;|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
expr|235 .|802 getRoot|216 ()|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
refParent|235 .|802 getType|216 ()|-1
anc|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
grandparent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 AND|226 :|326 case|800 OR|226 :|326 case|800 HOOK|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
assertEquals|214 (|40 Token.STRING|234 ,|800 n|235 .|802 getType|216 ()|215 )|227 ;|-1
{|802 assertEquals|214 (|40 Token.STRING|234 ,|800 n|235 .|802 getType|216 ()|215 )|227 ;|800 visited|235 .|802 append|214 (|800 n|235 .|802 getString|216 ()|215 )|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
input|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
next|235 .|802 getType|216 ()|-1
value|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
return|800 parent|242 !=|500 null|249 &&|800 parent|235 .|802 getType|216 ()|236 ==|40 Token.EXPONENT|249 &&|800 parent|235 .|802 getFirstChild|216 ()|236 ==|800 n|227 ;|-1
{|329 return|800 NodeUtil|235 .|802 precedence|214 (|800 n|235 .|802 getType|216 ()|215 )|230 <|800 minPrecedence|227 ;|219 }|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 LET|226 :|326 case|800 CONST|226 :|326 case|800 FUNCTION|226 :|326 case|800 CLASS|226 :|326 case|800 DO|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
while|214 (|800 firstNonOperator|235 .|802 getType|216 ()|236 ==|800 op|215 )|218 {|800 firstNonOperator|204 =|800 firstNonOperator|235 .|802 getFirstChild|216 ()|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
c|235 .|802 getType|216 ()|-1
last|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 FUNCTION|226 :|313 if|214 (|800 n|235 .|802 isArrowFunction|216 ()|215 )|218 {|802 visitArrowFunction|214 (|800 t|234 ,|800 n|215 )|227 ;|219 }|500 break;|500 default:|500 break;|219 }|-1
value|235 .|802 getType|216 ()|-1
{|801 Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|329 return|214 (|800 type|236 ==|40 Token.INC|250 |||800 type|236 ==|40 Token.DEC|215 )|227 ;|219 }|-1
{|320 throw|304 new|801 IllegalArgumentException|214 (|45 STRING_CONSTANT|200 +|800 node|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
Token|800 declarationType|204 =|800 declarationNode|235 .|802 getType|216 ()|227 ;|-1
{|800 newNode|204 =|800 IR|235 .|802 declaration|214 (|800 newLHS|234 ,|800 newRHS|234 ,|800 parent|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
{|800 newNode|204 =|800 IR|235 .|802 declaration|214 (|800 newLHS|234 ,|800 newRHS|234 ,|800 parent|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
int|800 parentPrecedence|204 =|800 NodeUtil|235 .|802 precedence|214 (|800 n|235 .|802 getType|216 ()|215 )|227 ;|-1
node|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
if|214 (|800 isSimpleOp|215 )|218 {|800 msg|204 =|45 STRING_CONSTANT|200 +|800 n|235 .|802 getType|216 ()|235 .|802 toString|216 ()|235 .|802 toLowerCase|216 ()|200 +|45 STRING_CONSTANT|227 ;|219 }|-1
assertEquals|214 (|40 Token.SCRIPT|234 ,|800 global|235 .|802 getDeclaration|216 ()|235 .|802 getNode|216 ()|235 .|802 getType|216 ()|215 )|227 ;|-1
assertEquals|214 (|40 Token.GETPROP|234 ,|800 refs|235 .|802 get|214 (|34 NUMBER_CONSTANT|215 )|235 .|802 getNode|216 ()|235 .|802 getType|216 ()|215 )|227 ;|-1
assertEquals|214 (|40 Token.GETPROP|234 ,|800 refs|235 .|802 get|214 (|34 NUMBER_CONSTANT|215 )|235 .|802 getNode|216 ()|235 .|802 getType|216 ()|215 )|227 ;|-1
assertEquals|214 (|40 Token.NAME|234 ,|800 refs|235 .|802 get|214 (|34 NUMBER_CONSTANT|215 )|235 .|802 getNode|216 ()|235 .|802 getType|216 ()|215 )|227 ;|-1
if|214 (|207 !|800 propName|235 .|802 isString|216 ()|215 )|218 {|320 throw|304 new|801 IllegalStateException|214 (|45 STRING_CONSTANT|200 +|800 propName|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
if|214 (|207 !|800 propName|235 .|802 isString|216 ()|215 )|218 {|320 throw|304 new|801 IllegalStateException|214 (|45 STRING_CONSTANT|200 +|800 propName|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
Token|800 parentType|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
parent|235 .|802 getType|216 ()|-1
Token|800 nodeType|204 =|800 input|235 .|802 getType|216 ()|227 ;|-1
Token|800 type|204 =|800 current|235 .|802 getType|216 ()|227 ;|-1
type|242 !=|500 null|249 &&|800 type|235 .|802 getType|216 ()|242 !=|40 Token.ARRAY_TYPE|-1
if|214 (|800 invalidInitializers|235 .|802 contains|214 (|800 initializer|235 .|802 getType|216 ()|215 )|215 )|218 {|800 errorReporter|235 .|802 error|214 (|45 STRING_CONSTANT|234 ,|800 sourceName|234 ,|802 lineno|214 (|40 loopNode.initializer|215 )|234 ,|802 charno|214 (|40 loopNode.initializer|215 )|215 )|227 ;|219 }|-1
if|214 (|800 invalidInitializers|235 .|802 contains|214 (|800 initializer|235 .|802 getType|216 ()|215 )|215 )|218 {|800 errorReporter|235 .|802 error|214 (|45 STRING_CONSTANT|234 ,|800 sourceName|234 ,|802 lineno|214 (|40 loopNode.initializer|215 )|234 ,|802 charno|214 (|40 loopNode.initializer|215 )|215 )|227 ;|219 }|-1
Token|800 nType|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 FOR|226 :|326 case|800 FOR_OF|226 :|326 case|800 WHILE|226 :|326 case|800 DO|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 FOR|226 :|326 case|800 FOR_OF|226 :|326 case|800 WHILE|226 :|326 case|800 DO|226 :|326 case|800 SWITCH|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 GETPROP|226 :|329 return|800 n|235 .|802 getLastChild|216 ()|235 .|802 getString|216 ()|227 ;|326 case|800 MEMBER_FUNCTION_DEF|226 :|329 return|800 n|235 .|802 getString|216 ()|227 ;|500 default:|500 break;|219 }|-1
expr|235 .|802 getType|216 ()|-1
expr|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
getType|216 ()|-1
getType|216 ()|-1
getType|216 ()|-1
getType|216 ()|-1
Preconditions|235 .|802 checkArgument|214 (|800 source|236 ==|500 null|250 |||40 Token.FUNCTION|236 ==|800 source|235 .|802 getType|216 ()|215 )|227 ;|-1
Preconditions|235 .|802 checkArgument|214 (|800 source|236 ==|500 null|250 |||40 Token.FUNCTION|236 ==|800 source|235 .|802 getType|216 ()|215 )|227 ;|-1
int|800 expectedArity|204 =|800 Token|235 .|802 arity|214 (|800 n|235 .|802 getType|216 ()|215 )|227 ;|-1
switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 NAME|226 :|802 validateName|214 (|800 n|215 )|227 ;|500 break;|326 case|800 GETPROP|226 :|802 validateGetProp|214 (|800 n|215 )|227 ;|500 break;|500 default:|500 break;|219 }|-1
catch|214 (|801 UnsupportedOperationException|800 e|215 )|218 {|802 violation|214 (|45 STRING_CONSTANT|200 +|800 n|235 .|802 getType|216 ()|234 ,|800 n|215 )|227 ;|219 }|-1
{|802 validateChildCount|214 (|800 n|234 ,|34 NUMBER_CONSTANT|215 )|227 ;|802 validateNameDeclarationHelper|214 (|800 n|235 .|802 getType|216 ()|234 ,|800 n|215 )|227 ;|219 }|-1
{|313 if|214 (|800 NodeUtil|235 .|802 isNameDeclaration|214 (|800 n|215 )|215 )|218 {|802 validateNameDeclarationHelper|214 (|800 n|235 .|802 getType|216 ()|234 ,|800 n|215 )|227 ;|219 }|322 else|218 {|802 validateOptionalExpression|214 (|800 n|215 )|227 ;|219 }|219 }|-1
if|214 (|800 body|235 .|802 getType|216 ()|236 ==|40 Token.BLOCK|215 )|218 {|802 validateBlock|214 (|800 body|215 )|227 ;|219 }|322 else|218 {|802 validateExpression|214 (|800 body|215 )|227 ;|219 }|-1
n|235 .|802 getFirstChild|216 ()|235 .|802 getType|216 ()|236 ==|40 Token.EXPORT_SPECS|-1
secondChild|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
control|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
switch|214 (|800 n|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|215 )|218 {|326 case|800 VAR|226 :|326 case|800 CATCH|226 :|800 names|235 .|802 add|214 (|800 n|235 .|802 getString|216 ()|215 )|227 ;|500 break;|500 default:|500 break;|219 }|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
switch|214 (|800 c|235 .|802 getType|216 ()|215 )|218 {|326 case|800 FUNCTION|226 :|326 case|800 AND|226 :|326 case|800 OR|226 :|326 case|800 HOOK|226 :|329 return|9 true|227 ;|500 default:|500 break;|219 }|-1
cArg|235 .|802 getType|216 ()|-1
Token|800 type|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
{|208 @|800 Override|83 public|39 boolean|802 apply|214 (|801 Node|800 n|215 )|218 {|329 return|800 type|236 ==|800 n|235 .|802 getType|216 ()|227 ;|219 }|219 }|-1
n|235 .|802 getType|216 ()|-1
FlowScope|800 rightScope|204 =|800 reverseInterpreter|235 .|802 getPreciserScopeKnowingConditionOutcome|214 (|800 left|234 ,|800 leftOutcome|235 .|802 getOutcomeFlowScope|214 (|800 left|235 .|802 getType|216 ()|234 ,|800 nIsAnd|215 )|234 ,|800 nIsAnd|215 )|227 ;|-1
left|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
newScope|204 =|800 reverseInterpreter|235 .|802 getPreciserScopeKnowingConditionOutcome|214 (|800 condition|234 ,|800 conditionOutcomes|235 .|802 getOutcomeFlowScope|214 (|800 condition|235 .|802 getType|216 ()|234 ,|800 branch|236 ==|40 Branch.ON_TRUE|215 )|234 ,|800 branch|236 ==|40 Branch.ON_TRUE|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
namedImports|235 .|802 getType|216 ()|236 ==|40 Token.IMPORT_SPECS|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
{|802 assertEquals|214 (|40 Token.FUNCTION|234 ,|800 function|235 .|802 getType|216 ()|215 )|227 ;|802 assertEquals|214 (|800 name|234 ,|800 NodeUtil|235 .|802 getName|214 (|800 function|215 )|215 )|227 ;|219 }|-1
n|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|-1
arg|235 .|802 getType|216 ()|-1
isASTNormalized|216 ()|249 &&|40 Token.NAME|236 ==|800 constructorNameNode|235 .|802 getType|216 ()|-1
result|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
Token|800 parentType|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
export|235 .|802 getFirstChild|216 ()|235 .|802 getType|216 ()|236 ==|40 Token.EXPORT_SPECS|-1
Token|800 type|204 =|800 nextNode|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
{|313 if|214 (|800 typeNode|235 .|802 getType|216 ()|236 ==|40 Token.BANG|215 )|218 {|800 typeNode|204 =|800 typeNode|235 .|802 getFirstChild|216 ()|227 ;|219 }|329 return|800 typeNode|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Node|800 decl|204 =|800 IR|235 .|802 declaration|214 (|40 cls.name|235 .|802 cloneTree|216 ()|234 ,|40 cls.constructor.value|234 ,|800 exprRoot|235 .|802 getType|216 ()|215 )|235 .|802 srcref|214 (|800 exprRoot|215 )|227 ;|-1
parent|235 .|802 getType|216 ()|-1
if|214 (|800 fieldTypeNode|235 .|802 getType|216 ()|236 ==|40 Token.COLON|215 )|218 {|800 fieldNameNode|204 =|800 fieldTypeNode|235 .|802 getFirstChild|216 ()|227 ;|800 hasType|204 =|9 true|227 ;|219 }|-1
Token|800 pType|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
assertEquals|214 (|40 Token.NEW|234 ,|800 callsiteNode|235 .|802 getType|216 ()|215 )|227 ;|-1
assertEquals|214 (|40 Token.CALL|234 ,|800 callsiteNode|235 .|802 getType|216 ()|215 )|227 ;|-1
assertEquals|214 (|40 Token.CALL|234 ,|800 callsiteNode|235 .|802 getType|216 ()|215 )|227 ;|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
parent|235 .|802 getType|216 ()|236 ==|40 Token.PARAM_LIST|-1
aliasReference|235 .|802 getType|216 ()|236 ==|40 Token.STRING_KEY|-1
n|235 .|802 getType|216 ()|-1
{|313 if|214 (|800 n|235 .|802 getType|216 ()|236 ==|40 Token.INSTANCEOF|215 )|218 {|802 reportIfNonObject|214 (|800 t|234 ,|800 n|235 .|802 getFirstChild|216 ()|234 ,|800 SUSPICIOUS_INSTANCEOF_LEFT_OPERAND|215 )|227 ;|219 }|219 }|-1
{|313 if|214 (|800 n|235 .|802 getType|216 ()|236 ==|40 Token.IN|215 )|218 {|802 reportIfNonObject|214 (|800 t|234 ,|800 n|235 .|802 getLastChild|216 ()|234 ,|800 SUSPICIOUS_IN_OPERATOR|215 )|227 ;|219 }|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Token|800 operatorToken|204 =|800 condition|235 .|802 getType|216 ()|227 ;|-1
builder|235 .|802 append|214 (|800 n|235 .|802 getType|216 ()|235 .|802 toString|216 ()|215 )|227 ;|-1
decl.node|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|-1
Preconditions|235 .|802 checkArgument|214 (|800 n|235 .|802 isGetProp|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 n|235 .|802 getType|216 ()|234 ,|800 n|215 )|227 ;|-1
Token|800 nType|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
val|235 .|802 getType|216 ()|236 ==|40 Token.OR|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
if|214 (|800 typeNode|235 .|802 getType|216 ()|242 !=|40 Token.EQUALS|215 )|218 {|802 report|214 (|800 typeNode|234 ,|800 DEFAULT_PARAM_MUST_BE_MARKED_OPTIONAL|215 )|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
typeNode|242 !=|500 null|249 &&|800 typeNode|235 .|802 getType|216 ()|236 ==|40 Token.STRING|-1
c|235 .|802 getType|216 ()|-1
left|235 .|802 getType|216 ()|-1
TernaryValue|800 result|204 =|802 evaluateComparison|214 (|800 n|235 .|802 getType|216 ()|234 ,|800 left|234 ,|800 right|234 ,|800 shouldUseTypes|215 )|227 ;|-1
Node|800 result|204 =|802 performArithmeticOp|214 (|800 n|235 .|802 getType|216 ()|234 ,|800 left|234 ,|800 right|215 )|227 ;|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
argumentNode|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
subtree|235 .|802 getType|216 ()|-1
subtree|235 .|802 getType|216 ()|-1
while|214 (|800 moveIt|235 .|802 hasNext|216 ()|215 )|218 {|800 actualTokens|235 .|802 add|214 (|800 moveIt|235 .|802 next|216 ()|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
node|235 .|802 getType|216 ()|236 ==|40 Token.CALL|-1
Token|800 parentType|204 =|800 useParent|235 .|802 getType|216 ()|227 ;|-1
Token|800 nodeType|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
Token|800 parentNodeType|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
key|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Token|800 type|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
{|800 Preconditions|235 .|802 checkState|214 (|800 sourceName|242 !=|500 null|215 )|227 ;|800 Preconditions|235 .|802 checkState|214 (|800 n|235 .|802 getType|216 ()|236 ==|800 type|234 ,|800 n|215 )|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
assertEquals|214 (|40 Token.FUNCTION|234 ,|800 fooNode|235 .|802 getType|216 ()|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
{|305 switch|214 (|800 n|235 .|802 getFirstChild|216 ()|235 .|802 getType|216 ()|215 )|218 {|326 case|800 HOOK|226 :|326 case|800 AND|226 :|326 case|800 OR|226 :|329 return|9 true|227 ;|500 default:|500 break;|219 }|219 }|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 BREAK|226 :|326 case|800 CONTINUE|226 :|326 case|800 RETURN|226 :|326 case|800 THROW|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
blockChild|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
subtree|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
ancestor|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
if|214 (|800 node|235 .|802 getType|216 ()|236 ==|800 type|215 )|218 {|800 matchingNodes|235 .|802 add|214 (|800 node|215 )|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
declType|204 =|800 variable|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|-1
Preconditions|235 .|802 checkArgument|214 (|800 node|235 .|802 isNew|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 node|235 .|802 getType|216 ()|215 )|227 ;|-1
Preconditions|235 .|802 checkArgument|214 (|800 node|235 .|802 isCall|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 node|235 .|802 getType|216 ()|215 )|227 ;|-1
Preconditions|235 .|802 checkArgument|214 (|800 node|235 .|802 isHook|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 node|235 .|802 getType|216 ()|215 )|227 ;|-1
Preconditions|235 .|802 checkArgument|214 (|214 (|800 node|235 .|802 isAnd|216 ()|215 )|250 |||214 (|800 node|235 .|802 isOr|216 ()|215 )|234 ,|45 STRING_CONSTANT|234 ,|800 node|235 .|802 getType|216 ()|215 )|227 ;|-1
Preconditions|235 .|802 checkArgument|214 (|800 hook|235 .|802 isHook|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 hook|235 .|802 getType|216 ()|215 )|227 ;|-1
Preconditions|235 .|802 checkArgument|214 (|214 (|800 original|235 .|802 isAnd|216 ()|215 )|250 |||214 (|800 original|235 .|802 isOr|216 ()|215 )|234 ,|45 STRING_CONSTANT|234 ,|800 original|235 .|802 getType|216 ()|215 )|227 ;|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
Token|800 secondArgumentType|204 =|800 secondArgument|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
int|800 offset|204 =|802 getSourceInfoOffset|214 (|800 provideStringNode|215 )|227 ;|-1
{|329 return|207 !|800 type|235 .|802 isNoResolvedType|216 ()|227 ;|219 }|-1
return|802 isKnown|214 (|800 n|215 )|249 &&|207 !|802 isAllType|214 (|800 n|215 )|249 &&|802 isClassType|214 (|800 n|215 )|249 &&|207 !|802 isNativeObjectType|214 (|800 n|215 )|249 &&|207 !|802 isWhitelistedType|214 (|800 n|215 )|227 ;|-1
!|802 isTemplateType|214 (|800 n|215 )|-1
!|802 isTemplateType|214 (|800 n|215 )|-1
if|214 (|800 type|236 ==|500 null|250 |||800 type|235 .|802 isUnknownType|216 ()|250 |||800 type|235 .|802 isAllType|216 ()|215 )|218 {|329 return|304 new|801 MatchResult|214 (|800 allowLooseMatches|234 ,|800 allowLooseMatches|215 )|227 ;|219 }|-1
options|235 .|802 setPreserveGoogRequires|214 (|9 true|215 )|227 ;|-1
compilerOptions|235 .|802 setPreserveGoogRequires|214 (|9 true|215 )|227 ;|-1
importNode|235 .|802 copyInformationFrom|214 (|800 export|215 )|227 ;|-1
n|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 stringKey|204 =|800 IR|235 .|800 stringKey|214 (|800 name|234 ,|800 memberDef|235 .|802 getFirstChild|216 ()|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
if|214 (|800 parent|235 .|802 isExprResult|216 ()|215 )|218 {|800 parent|235 .|802 detachFromParent|216 ()|227 ;|219 }|322 else|218 {|800 parent|235 .|802 replaceChild|214 (|800 n|234 ,|800 elemValue|215 )|227 ;|219 }|-1
{|800 parent|235 .|802 getParent|216 ()|235 .|802 detachFromParent|216 ()|227 ;|800 compiler|235 .|802 reportCodeChange|216 ()|227 ;|219 }|-1
{|313 if|214 (|800 n|235 .|802 getParent|216 ()|242 !=|500 null|215 )|218 {|800 n|235 .|802 detachFromParent|216 ()|227 ;|800 compiler|235 .|802 reportCodeChange|216 ()|227 ;|219 }|219 }|-1
Node|800 body|204 =|800 IR|235 .|802 block|214 (|800 IR|235 .|802 returnNode|214 (|800 returnValue|235 .|802 detachFromParent|216 ()|215 )|215 )|227 ;|-1
parent|235 .|802 replaceChild|214 (|800 export|234 ,|800 declaration|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
newBlock|235 .|802 detachFromParent|216 ()|227 ;|-1
typeString|235 .|802 detachFromParent|216 ()|227 ;|-1
if|214 (|800 rep|235 .|802 isExprResult|216 ()|215 )|218 {|800 rep|204 =|800 rep|235 .|802 getFirstChild|216 ()|227 ;|800 rep|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
{|800 changeProxy|235 .|802 replaceWith|214 (|800 grandparent|234 ,|800 parent|234 ,|800 parent|235 .|802 getLastChild|216 ()|235 .|802 detachFromParent|216 ()|215 )|227 ;|219 }|-1
Node|800 replacement|204 =|800 firstArg|235 .|802 detachFromParent|216 ()|227 ;|-1
{|800 rhs|235 .|802 detachFromParent|216 ()|227 ;|800 ancestor|235 .|802 replaceChild|214 (|800 last|234 ,|800 rhs|215 )|227 ;|219 }|-1
rhs|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 child|204 =|800 n|235 .|802 getLastChild|216 ()|235 .|802 detachFromParent|216 ()|227 ;|-1
argNode|235 .|802 detachFromParent|216 ()|227 ;|-1
assignmentValue|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 simplified|204 =|304 new|801 Node|214 (|800 type|234 ,|800 condition|235 .|802 detachFromParent|216 ()|234 ,|802 simplifyShortCircuitBranch|214 (|800 body|215 )|215 )|235 .|802 useSourceInfoIfMissingFrom|214 (|800 hook|215 )|227 ;|-1
{|313 if|214 (|800 original|235 .|802 getParent|216 ()|242 !=|500 null|215 )|218 {|800 original|235 .|802 detachFromParent|216 ()|227 ;|219 }|800 replacements|235 .|802 add|214 (|800 original|215 )|227 ;|219 }|-1
Node|800 newGetProp|204 =|800 IR|235 .|802 getprop|214 (|800 target|235 .|802 detachFromParent|216 ()|234 ,|800 prop|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
if|214 (|800 i|236 ==|34 NUMBER_CONSTANT|249 &&|800 first|235 .|802 getString|216 ()|235 .|802 isEmpty|216 ()|215 )|218 {|800 add|204 =|800 add|235 .|802 getSecondChild|216 ()|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
for|214 (|801 PrototypeMemberDeclaration|800 declar|226 :|40 instance.declarations|215 )|218 {|800 block|235 .|802 addChildToBack|214 (|40 declar.node|235 .|802 detachFromParent|216 ()|215 )|227 ;|219 }|-1
{|313 if|214 (|800 preserveGoogProvidesAndRequires|249 &&|800 explicitNode|235 .|802 hasChildren|216 ()|215 )|218 {|500 return;|219 }|800 explicitNode|235 .|802 detachFromParent|216 ()|227 ;|800 compiler|235 .|802 reportCodeChange|216 ()|227 ;|219 }|-1
if|214 (|800 typeDeclaration|242 !=|500 null|215 )|218 {|800 compiler|235 .|802 forwardDeclareType|214 (|800 typeDeclaration|215 )|227 ;|800 parent|235 .|802 detachFromParent|216 ()|227 ;|800 compiler|235 .|802 reportCodeChange|216 ()|227 ;|219 }|-1
Node|800 value|204 =|800 n|235 .|802 getChildAtIndex|214 (|34 NUMBER_CONSTANT|215 )|235 .|802 detachFromParent|216 ()|227 ;|-1
for|214 (|801 Node|800 closureRequire|226 :|800 requiresToBeRemoved|215 )|218 {|800 closureRequire|235 .|802 detachFromParent|216 ()|227 ;|800 compiler|235 .|802 reportCodeChange|216 ()|227 ;|219 }|-1
arg|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 method|204 =|800 member|235 .|802 getLastChild|216 ()|235 .|802 detachFromParent|216 ()|227 ;|-1
stringKey|204 =|800 IR|235 .|800 stringKey|214 (|214 (|800 member|235 .|802 isGetterDef|216 ()|250 |||800 member|235 .|802 getBooleanProp|214 (|40 Node.COMPUTED_PROP_GETTER|215 )|215 )|233 ?|45 STRING_CONSTANT|226 :|45 STRING_CONSTANT|234 ,|800 function|235 .|802 detachFromParent|216 ()|215 )|-1
constructor|204 =|800 member|235 .|802 getFirstChild|216 ()|235 .|802 detachFromParent|216 ()|227 ;|-1
for|214 (|801 Node|800 child|226 :|800 functionBody|235 .|802 children|216 ()|215 )|218 {|800 newBlock|235 .|802 addChildToBack|214 (|800 child|235 .|802 detachFromParent|216 ()|215 )|227 ;|219 }|-1
Node|800 stringKey|204 =|800 IR|235 .|800 stringKey|214 (|800 name|234 ,|800 n|235 .|802 getFirstChild|216 ()|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
if|214 (|800 subtree|235 .|802 getChildCount|216 ()|236 ==|34 NUMBER_CONSTANT|215 )|218 {|800 subtree|235 .|802 getLastChild|216 ()|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
{|303 for|214 (|801 Node|800 c|226 :|800 externs|235 .|802 children|216 ()|215 )|218 {|313 if|214 (|207 !|800 c|235 .|802 hasChildren|216 ()|215 )|218 {|800 c|235 .|802 detachFromParent|216 ()|227 ;|219 }|219 }|219 }|-1
if|214 (|800 expected|242 !=|500 null|215 )|218 {|800 expectedRoot|204 =|802 parseExpectedJs|214 (|800 expected|215 )|227 ;|800 expectedRoot|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
{|801 Node|800 ancParent|204 =|800 ancestor|235 .|802 getParent|216 ()|227 ;|800 ancParent|235 .|802 replaceChild|214 (|800 ancestor|234 ,|800 ancestor|235 .|802 getLastChild|216 ()|235 .|802 detachFromParent|216 ()|215 )|227 ;|500 break;|219 }|-1
node|235 .|802 detachFromParent|216 ()|227 ;|-1
{|313 if|214 (|800 node|242 !=|500 null|249 &&|800 node|235 .|802 getParent|216 ()|242 !=|500 null|215 )|218 {|800 node|235 .|802 detachFromParent|216 ()|227 ;|219 }|329 return|800 node|227 ;|219 }|-1
{|800 compiler|235 .|802 report|214 (|800 JSError|235 .|802 make|214 (|800 requireNode|234 ,|40 MISSING_MODULE_OR_PROVIDE.level|234 ,|800 MISSING_MODULE_OR_PROVIDE|234 ,|800 legacyNamespace|215 )|215 )|227 ;|800 NodeUtil|235 .|802 getEnclosingStatement|214 (|800 requireNode|215 )|235 .|802 detachFromParent|216 ()|227 ;|500 continue;|219 }|-1
moduleBlockNode|235 .|802 detachFromParent|216 ()|227 ;|-1
returnStatementNode|235 .|802 detachFromParent|216 ()|227 ;|-1
{|800 NodeUtil|235 .|802 getEnclosingStatement|214 (|800 call|215 )|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
private|39 void|802 updateGoogDeclareLegacyNamespace|214 (|801 Node|800 call|215 )|218 {|800 NodeUtil|235 .|802 getEnclosingStatement|214 (|800 call|215 )|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
if|214 (|207 !|40 currentScript.declareLegacyNamespace|215 )|218 {|800 NodeUtil|235 .|802 getEnclosingStatement|214 (|800 call|215 )|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
if|214 (|800 secondExpr|242 !=|800 firstExpr|215 )|218 {|800 secondExpr|235 .|802 detachFromParent|216 ()|227 ;|219 }|322 else|218 {|800 secondExpr|204 =|800 IR|235 .|802 nullNode|216 ()|227 ;|219 }|-1
bind.target|235 .|802 detachFromParent|216 ()|227 ;|-1
declParent|235 .|802 detachFromParent|216 ()|227 ;|-1
{|313 if|214 (|800 value|242 !=|500 null|215 )|218 {|800 value|235 .|802 detachFromParent|216 ()|227 ;|219 }|800 varNode|204 =|800 parent|227 ;|219 }|-1
callbackFunction|235 .|802 detachFromParent|216 ()|227 ;|-1
{|800 objlit|235 .|802 removeChild|214 (|800 key|215 )|227 ;|800 value|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
Node|800 replacement|204 =|800 value|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 destObj|204 =|800 n|235 .|802 getSecondChild|216 ()|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 newNode|204 =|304 new|801 Node|214 (|800 newType|234 ,|800 left|235 .|802 detachFromParent|216 ()|234 ,|800 newRight|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
if|214 (|800 NodeUtil|235 .|802 isNumericResult|214 (|800 left|215 )|215 )|218 {|800 parent|235 .|802 replaceChild|214 (|800 n|234 ,|800 left|235 .|802 detachFromParent|216 ()|215 )|227 ;|802 reportCodeChange|216 ()|227 ;|329 return|800 left|227 ;|219 }|-1
if|214 (|800 root|242 !=|500 null|215 )|218 {|800 root|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
callNode|235 .|802 getParent|216 ()|235 .|802 replaceChild|214 (|800 callNode|234 ,|800 replacementNode|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
clinitAssignedValue|235 .|802 detachFromParent|216 ()|227 ;|-1
if|214 (|800 follow|236 ==|500 null|250 |||802 areMatchingExits|214 (|800 n|234 ,|800 follow|215 )|215 )|218 {|800 n|235 .|802 detachFromParent|216 ()|227 ;|802 reportCodeChange|216 ()|227 ;|329 return|500 null|227 ;|219 }|-1
{|800 block|235 .|802 replaceChild|214 (|800 maybeIf|234 ,|800 maybeIf|235 .|802 getLastChild|216 ()|235 .|802 detachFromParent|216 ()|215 )|227 ;|219 }|-1
colon|235 .|802 addChildToBack|214 (|800 member|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
n|235 .|802 detachFromParent|216 ()|227 ;|-1
for|214 (|801 Node|800 child|226 :|800 stringKeys|215 )|218 {|800 child|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
member|235 .|802 detachFromParent|216 ()|227 ;|-1
indexSignature|235 .|802 detachFromParent|216 ()|227 ;|-1
comma|235 .|802 addChildToBack|214 (|800 leftMostChild|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
Node|800 condStatement|204 =|800 IR|235 .|802 exprResult|214 (|800 cond|235 .|802 detachFromParent|216 ()|215 )|235 .|802 srcref|214 (|800 cond|215 )|227 ;|-1
Node|800 statement|204 =|800 IR|235 .|802 exprResult|214 (|800 cond|235 .|802 detachFromParent|216 ()|215 )|235 .|802 useSourceInfoIfMissingFrom|214 (|800 cond|215 )|227 ;|-1
n|235 .|802 getParent|216 ()|235 .|802 replaceChild|214 (|800 n|234 ,|800 caseBlock|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
{|800 maybeBreak|235 .|802 detachFromParent|216 ()|227 ;|802 reportCodeChange|216 ()|227 ;|219 }|-1
{|800 subtree|235 .|802 detachFromParent|216 ()|227 ;|800 subtree|204 =|500 null|227 ;|219 }|-1
{|800 subtree|235 .|802 getParent|216 ()|235 .|802 replaceChild|214 (|800 subtree|234 ,|800 right|235 .|802 detachFromParent|216 ()|215 )|227 ;|802 reportCodeChange|216 ()|227 ;|329 return|800 right|227 ;|219 }|-1
{|800 n|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
var|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 newDeclaration|204 =|800 IR|235 .|802 var|214 (|800 name|235 .|802 detachFromParent|216 ()|215 )|235 .|802 useSourceInfoFrom|214 (|800 declarationList|215 )|227 ;|-1
inlineValue|214 (|800 v|234 ,|800 ref|234 ,|800 value|235 .|802 detachFromParent|216 ()|215 )|227 ;|-1
Node|800 opDetached|204 =|800 op|235 .|802 detachFromParent|216 ()|227 ;|-1
potentialCallee|235 .|802 detachFromParent|216 ()|227 ;|-1
{|800 expectedRoot|204 =|802 parseExpectedJs|214 (|800 ImmutableList|235 .|802 of|214 (|800 SourceFile|235 .|802 fromCode|214 (|45 STRING_CONSTANT|234 ,|800 expected|215 )|215 )|215 )|227 ;|800 expectedRoot|235 .|802 detachFromParent|216 ()|227 ;|219 }|-1
if|214 (|207 !|800 t|235 .|802 inGlobalScope|216 ()|249 &&|800 NodeUtil|235 .|802 isHoistedFunctionDeclaration|214 (|800 value|215 )|215 )|218 {|800 parent|235 .|802 addChildToFront|214 (|800 value|235 .|802 detachFromParent|216 ()|215 )|227 ;|219 }|-1
body|235 .|802 detachFromParent|216 ()|227 ;|-1
Node|800 decl|204 =|800 IR|235 .|802 declaration|214 (|800 pattern|235 .|802 detachFromParent|216 ()|234 ,|800 IR|235 .|802 name|214 (|800 tempVarName|215 )|234 ,|800 declarationType|215 )|227 ;|-1
List|230 <|800 Node|231 >|800 assignments|204 =|304 new|801 ArrayList|230 <|800 Node|231 >|216 ()|227 ;|-1
List|230 <|800 Node|231 >|800 nodes|204 =|304 new|801 ArrayList|230 <|800 Node|231 >|216 ()|227 ;|-1
public|800 JSType|802 getJSTypeBeforeCast|216 ()|218 {|329 return|214 (|800 JSType|215 )|802 getProp|214 (|800 TYPE_BEFORE_CAST|215 )|227 ;|219 }|-1
String|800 externs|204 =|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|227 ;|-1
@|800 Override|83 public|801 TypeI|802 evaluateTypeExpressionInGlobalScope|214 (|801 JSTypeExpression|800 expr|215 )|218 {|320 throw|304 new|801 UnsupportedOperationException|214 (|45 STRING_CONSTANT|215 )|227 ;|219 }|-1
@|800 Override|83 public|39 boolean|802 isInstanceType|216 ()|218 {|800 Preconditions|235 .|802 checkState|214 (|315 this|235 .|802 isSingletonObj|216 ()|215 )|227 ;|329 return|315 this|235 .|802 getNominalTypeIfSingletonObj|216 ()|235 .|802 isClass|216 ()|227 ;|219 }|-1
@|800 Override|83 public|39 boolean|802 isUnknownType|216 ()|218 {|329 return|802 isUnknown|216 ()|227 ;|219 }|-1
return|800 fn|235 .|802 isLooseSubtypeOf|214 (|40 other.fn|234 ,|800 subSuperMap|215 )|227 ;|-1
UpdateThisAndArgumentsReferences|800 updater|204 =|304 new|801 UpdateThisAndArgumentsReferences|216 ()|227 ;|-1
{|315 this|235 .|800 passUnderTest|204 =|304 new|801 NameBasedDefinitionProvider|214 (|800 compiler|215 )|227 ;|315 this|235 .|800 compiler|204 =|800 compiler|227 ;|219 }|-1
NameBasedDefinitionProvider|800 defFinder|204 =|304 new|801 NameBasedDefinitionProvider|214 (|800 compiler|215 )|227 ;|-1
public|39 void|802 testHookOperators4|214 (|215 )|301 throws|800 Exception|218 {|802 checkMarkedCalls|214 (|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|234 ,|800 ImmutableList|235 .|230 <|800 String|231 >|802 of|216 ()|215 )|227 ;|219 }|-1
public|802 DefinitionUseSiteFinder|214 (|801 AbstractCompiler|800 compiler|215 )|218 {|349 super|214 (|800 compiler|215 )|227 ;|315 this|235 .|800 nameUseSiteMultimap|204 =|800 LinkedHashMultimap|235 .|802 create|216 ()|227 ;|219 }|-1
defFinder|204 =|304 new|801 NameBasedDefinitionProvider|214 (|800 compiler|215 )|227 ;|-1
NameBasedDefinitionProvider|800 defFinder|204 =|304 new|801 NameBasedDefinitionProvider|214 (|800 compiler|215 )|227 ;|-1
NameBasedDefinitionProvider|800 defFinder|204 =|304 new|801 NameBasedDefinitionProvider|214 (|800 compiler|215 )|227 ;|-1
typeCheck|214 (|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|234 ,|40 NewTypeInference.INEXISTENT_PROPERTY|215 )|227 ;|-1
typeCheck|214 (|45 STRING_CONSTANT|234 ,|40 NewTypeInference.PROPERTY_ACCESS_ON_NONOBJECT|215 )|227 ;|-1
if|214 (|800 testMode|215 )|218 {|329 return|304 new|801 StringWriter|216 ()|227 ;|219 }|-1
if|214 (|800 testMode|215 )|218 {|329 return|304 new|801 StringWriter|216 ()|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 root|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|802 process|214 (|500 null|234 ,|800 scriptRoot|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
phaseopt|235 .|802 process|214 (|800 externsNode|234 ,|800 n|215 )|227 ;|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
passes|235 .|802 add|214 (|800 checkVariableReferences|215 )|227 ;|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
if|214 (|800 J2clSourceFileChecker|235 .|802 shouldSkipExecution|214 (|800 compiler|215 )|215 )|218 {|500 return;|219 }|-1
if|214 (|800 J2clSourceFileChecker|235 .|802 shouldSkipExecution|214 (|800 compiler|215 )|215 )|218 {|500 return;|219 }|-1
{|313 if|214 (|800 J2clSourceFileChecker|235 .|802 shouldSkipExecution|214 (|800 compiler|215 )|215 )|218 {|500 return;|219 }|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 root|234 ,|315 this|215 )|227 ;|219 }|-1
if|214 (|800 J2clSourceFileChecker|235 .|802 shouldSkipExecution|214 (|800 compiler|215 )|215 )|218 {|500 return;|219 }|-1
{|802 testSame|214 (|800 Lists|235 .|802 newArrayList|214 (|800 NO_J2CL_SOURCE_FILE|234 ,|800 NO_J2CL_SOURCE_FILE2|215 )|215 )|227 ;|802 assertThat|214 (|800 compiler|235 .|802 getAnnotation|214 (|40 J2clSourceFileChecker.HAS_J2CL_ANNOTATION_KEY|215 )|215 )|235 .|802 isEqualTo|214 (|40 Boolean.FALSE|215 )|227 ;|219 }|-1
{|802 testSame|214 (|800 Lists|235 .|802 newArrayList|214 (|800 NO_J2CL_SOURCE_FILE|234 ,|800 J2CL_SOURCE_FILE|234 ,|800 NO_J2CL_SOURCE_FILE2|215 )|215 )|227 ;|802 assertThat|214 (|800 compiler|235 .|802 getAnnotation|214 (|40 J2clSourceFileChecker.HAS_J2CL_ANNOTATION_KEY|215 )|215 )|235 .|802 isEqualTo|214 (|40 Boolean.TRUE|215 )|227 ;|219 }|-1
{|313 if|214 (|800 J2clSourceFileChecker|235 .|802 shouldSkipExecution|214 (|800 compiler|215 )|215 )|218 {|500 return;|219 }|304 new|801 StaticFieldGetterSetterInliner|214 (|800 root|215 )|235 .|802 run|216 ()|227 ;|219 }|-1
{|800 recvType|204 =|800 recvType|235 .|802 withProperty|214 (|800 pname|234 ,|40 JSType.TOP_OBJECT|235 .|802 withLoose|216 ()|215 )|227 ;|800 inEnv|204 =|802 updateLvalueTypeInEnv|214 (|800 inEnv|234 ,|800 obj|234 ,|40 recvLvalue.ptr|234 ,|800 recvType|215 )|227 ;|219 }|-1
String|800 js|204 =|45 STRING_CONSTANT|227 ;|-1
testSame|214 (|800 code|200 +|45 STRING_CONSTANT|215 )|227 ;|-1
RefactoringDriver|800 driver|204 =|304 new|40 RefactoringDriver.Builder|214 (|800 scanner|215 )|235 .|802 addExternsFromCode|214 (|800 externs|215 )|235 .|802 addInputsFromCode|214 (|800 originalCode|215 )|235 .|802 build|216 ()|227 ;|-1
ImmutableList|235 .|802 of|214 (|800 SourceFile|235 .|802 fromCode|214 (|45 STRING_CONSTANT|234 ,|800 externs|215 )|215 )|-1
n|235 .|802 getTypeI|216 ()|235 .|802 isSomeUnknownType|216 ()|-1
{|800 tracker|204 =|304 new|801 PerformanceTracker|214 (|800 jsRoot|234 ,|40 options.tracer|234 ,|315 this|235 .|800 outStream|215 )|227 ;|802 addChangeHandler|214 (|800 tracker|235 .|802 getCodeChangeHandler|216 ()|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 processCheck|214 (|800 compiler|234 ,|800 root|234 ,|315 this|215 )|227 ;|219 }|-1
phaseopt|235 .|802 process|214 (|800 externsNode|234 ,|800 externAndJsRoot|215 )|227 ;|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapCheck|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
passes|235 .|802 add|214 (|800 checkVariableReferencesForTranspileOnly|215 )|227 ;|-1
public|83 static|801 ResourceBundle|802 getBundle|214 (|801 String|800 baseName|234 ,|801 Locale|800 locale|215 )|218 {|329 return|304 new|801 ResourceBundle|216 ()|227 ;|219 }|-1
{|800 Preconditions|235 .|802 checkState|214 (|207 !|315 this|235 .|800 isFinalized|215 )|227 ;|349 super|235 .|802 addUndeclaredProperty|214 (|800 pname|234 ,|800 defSite|234 ,|40 JSType.UNKNOWN|234 ,|9 false|215 )|227 ;|219 }|-1
if|214 (|800 type|236 ==|500 null|249 &&|800 isConstant|215 )|218 {|800 type|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
this|235 .|800 randomProps|235 .|802 with|214 (|800 pname|234 ,|800 Property|235 .|802 make|214 (|800 type|236 ==|500 null|233 ?|40 JSType.UNKNOWN|226 :|800 type|234 ,|800 type|215 )|215 )|-1
if|214 (|207 !|800 t|235 .|802 isUnknown|216 ()|249 &&|207 !|800 t|235 .|802 equals|214 (|800 JSType|235 .|802 fromTypeVar|214 (|800 typeVar|215 )|215 )|215 )|218 {|329 return|9 false|227 ;|219 }|-1
if|214 (|800 typeMap|235 .|802 isEmpty|216 ()|215 )|218 {|329 return|800 Property|235 .|802 make|214 (|40 JSType.UNKNOWN|234 ,|500 null|215 )|227 ;|219 }|-1
{|801 NominalType|800 thisWithoutTypemap|204 =|315 this|235 .|800 rawType|235 .|802 getAsNominalType|216 ()|227 ;|329 return|800 thisWithoutTypemap|235 .|802 instantiateGenerics|214 (|40 JSType.MAP_TO_UNKNOWN|215 )|227 ;|219 }|-1
JSType|800 result|204 =|40 JSType.TOP|227 ;|-1
JSType|800 result|204 =|40 JSType.BOTTOM|227 ;|-1
if|214 (|207 !|802 isGeneric|216 ()|250 |||40 JSType.MAP_TO_UNKNOWN|235 .|802 equals|214 (|800 concreteTypes|215 )|215 )|218 {|329 return|802 substituteNominalGenerics|214 (|800 concreteTypes|215 )|227 ;|219 }|-1
FunctionTypeBuilder|800 builder|204 =|304 new|801 FunctionTypeBuilder|216 ()|227 ;|-1
{|313 if|214 (|207 !|800 f|235 .|802 isGeneric|216 ()|215 )|218 {|329 return|800 f|227 ;|219 }|329 return|800 f|235 .|802 instantiateGenerics|214 (|40 JSType.MAP_TO_UNKNOWN|215 )|227 ;|219 }|-1
if|214 (|207 !|40 FunctionType.allowMethodsAsFunctions|249 &&|315 this|235 .|800 receiverType|242 !=|500 null|249 &&|40 other.receiverType|236 ==|500 null|215 )|218 {|329 return|9 false|227 ;|219 }|-1
FunctionTypeBuilder|800 builder|204 =|304 new|801 FunctionTypeBuilder|216 ()|227 ;|-1
optionalFormals|235 .|802 add|214 (|800 JSType|235 .|802 join|214 (|800 t|234 ,|40 JSType.UNDEFINED|215 )|215 )|227 ;|-1
this|236 ==|800 other|250 |||40 other.ns|242 !=|500 null|250 |||207 !|800 other|235 .|802 getNominalType|216 ()|235 .|802 equals|214 (|800 builtinObject|215 )|-1
if|214 (|800 other|236 ==|800 TOP_OBJECT|215 )|218 {|329 return|9 true|227 ;|219 }|-1
if|214 (|800 other|236 ==|800 TOP_OBJECT|215 )|218 {|329 return|9 true|227 ;|219 }|-1
if|214 (|800 newPropType|235 .|802 isBottom|216 ()|215 )|218 {|329 return|800 BOTTOM_MAP|227 ;|219 }|-1
JSType|800 result|204 =|40 JSType.BOTTOM|227 ;|-1
if|214 (|800 callee|235 .|802 matchesQualifiedName|214 (|45 STRING_CONSTANT|215 )|215 )|218 {|329 return|40 JSType.STRING|227 ;|219 }|-1
recvType|204 =|800 recvType|235 .|802 removeType|214 (|40 JSType.NULL|215 )|227 ;|-1
if|214 (|800 propInferredFunType|242 !=|500 null|215 )|218 {|800 rawType|235 .|802 addUndeclaredClassProperty|214 (|800 pname|234 ,|800 propInferredFunType|234 ,|800 getProp|215 )|227 ;|219 }|322 else|218 {|800 rawType|235 .|802 addUndeclaredClassProperty|214 (|800 pname|234 ,|40 JSType.UNKNOWN|234 ,|800 getProp|215 )|227 ;|219 }|-1
if|214 (|800 t|236 ==|500 null|215 )|218 {|800 t|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
FunctionType|800 getInstanceFunType|204 =|214 (|304 new|801 FunctionTypeBuilder|216 ()|215 )|235 .|802 addRetType|214 (|800 instanceType|215 )|235 .|802 buildFunction|216 ()|227 ;|-1
if|214 (|800 t|236 ==|500 null|215 )|218 {|800 t|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
{|315 this|235 .|800 currentScope|235 .|802 addLocal|214 (|800 varName|234 ,|40 JSType.UNKNOWN|234 ,|9 false|234 ,|9 false|215 )|227 ;|219 }|-1
JSType|800 resultType|204 =|40 JSType.TOP|227 ;|-1
for|214 (|801 String|800 typedefName|226 :|800 localTypedefs|235 .|802 keySet|216 ()|215 )|218 {|800 locals|235 .|802 put|214 (|800 typedefName|234 ,|40 JSType.UNDEFINED|215 )|227 ;|219 }|-1
{|800 isTypeVar|204 =|9 true|227 ;|800 type|204 =|800 JSType|235 .|802 fromTypeVar|214 (|800 declaredType|235 .|802 getTypeVariableDefinedLocally|214 (|800 name|215 )|215 )|227 ;|219 }|-1
{|802 addNamespace|214 (|800 qnameNode|234 ,|304 new|801 NamespaceLit|214 (|802 getCommonTypes|216 ()|234 ,|800 qnameNode|235 .|802 getQualifiedName|216 ()|234 ,|800 qnameNode|215 )|215 )|227 ;|219 }|-1
{|315 this|235 .|800 root|235 .|802 setTypeI|214 (|802 getCommonTypes|216 ()|235 .|802 fromFunctionType|214 (|800 declaredType|235 .|802 toFunctionType|216 ()|215 )|215 )|227 ;|219 }|-1
{|313 if|214 (|800 anyNumOrStr|236 ==|500 null|215 )|218 {|329 return|800 t|235 .|802 isSubtypeOf|214 (|40 JSType.NUM_OR_STR|215 )|227 ;|219 }|329 return|800 t|235 .|802 isSubtypeOf|214 (|800 anyNumOrStr|215 )|227 ;|219 }|-1
{|313 if|214 (|800 numberOrNumber|236 ==|500 null|215 )|218 {|329 return|800 t|235 .|802 isSubtypeOf|214 (|40 JSType.STRING|215 )|227 ;|219 }|329 return|800 t|235 .|802 isSubtypeOf|214 (|800 stringOrString|215 )|227 ;|219 }|-1
{|313 if|214 (|800 numberOrNumber|236 ==|500 null|215 )|218 {|329 return|800 t|235 .|802 isSubtypeOf|214 (|40 JSType.NUMBER|215 )|227 ;|219 }|329 return|800 t|235 .|802 isSubtypeOf|214 (|800 numberOrNumber|215 )|227 ;|219 }|-1
stringOrString|204 =|800 JSType|235 .|802 join|214 (|40 JSType.STRING|234 ,|800 stringInstance|215 )|227 ;|-1
numberOrNumber|204 =|800 JSType|235 .|802 join|214 (|40 JSType.NUMBER|234 ,|800 numberInstance|215 )|227 ;|-1
ObjectType|802 getStringInstanceObjType|216 ()|218 {|329 return|800 stringInstanceObjtype|242 !=|500 null|233 ?|800 stringInstanceObjtype|226 :|40 ObjectType.TOP_OBJECT|227 ;|219 }|-1
ObjectType|802 getBooleanInstanceObjType|216 ()|218 {|329 return|800 booleanInstanceObjtype|242 !=|500 null|233 ?|800 booleanInstanceObjtype|226 :|40 ObjectType.TOP_OBJECT|227 ;|219 }|-1
ObjectType|802 getNumberInstanceObjType|216 ()|218 {|329 return|800 numberInstanceObjtype|242 !=|500 null|233 ?|800 numberInstanceObjtype|226 :|40 ObjectType.TOP_OBJECT|227 ;|219 }|-1
public|801 JSType|802 getStringInstance|216 ()|218 {|329 return|800 stringInstance|242 !=|500 null|233 ?|800 stringInstance|226 :|40 JSType.STRING|227 ;|219 }|-1
public|801 JSType|802 getBooleanInstance|216 ()|218 {|329 return|800 booleanInstance|242 !=|500 null|233 ?|800 booleanInstance|226 :|40 JSType.BOOLEAN|227 ;|219 }|-1
public|801 JSType|802 getNumberInstance|216 ()|218 {|329 return|800 numberInstance|242 !=|500 null|233 ?|800 numberInstance|226 :|40 JSType.NUMBER|227 ;|219 }|-1
public|801 JSType|802 getRegexpType|216 ()|218 {|329 return|800 regexpInstance|242 !=|500 null|233 ?|800 regexpInstance|226 :|40 JSType.UNKNOWN|227 ;|219 }|-1
if|214 (|315 this|235 .|800 arguments|236 ==|500 null|215 )|218 {|329 return|40 JSType.UNKNOWN|227 ;|219 }|-1
if|214 (|800 arrayType|236 ==|500 null|215 )|218 {|329 return|40 JSType.UNKNOWN|227 ;|219 }|-1
return|800 commonTypes|235 .|802 fromFunctionType|214 (|800 ctorType|215 )|227 ;|-1
ObjectType|800 arrayType|204 =|800 commonTypes|235 .|802 getArrayInstance|216 ()|235 .|802 getObjTypeIfSingletonObj|216 ()|227 ;|-1
if|214 (|802 isTrueOrTruthy|216 ()|215 )|218 {|329 return|800 FALSY|227 ;|219 }|322 else|313 if|214 (|802 isFalseOrFalsy|216 ()|215 )|218 {|329 return|800 TRUTHY|227 ;|219 }|-1
return|802 makeType|214 (|800 newtype|215 )|227 ;|-1
{|801 JSType|800 maybeScalar|204 =|800 ObjectType|235 .|802 mayTurnLooseObjectToScalar|214 (|800 t|234 ,|40 JSType.commonTypes|215 )|227 ;|313 if|214 (|800 t|242 !=|800 maybeScalar|215 )|218 {|329 return|800 maybeScalar|227 ;|219 }|219 }|-1
JSType|800 result|204 =|800 BOTTOM|227 ;|-1
JSType|800 result|204 =|800 TOP|227 ;|-1
boolean|800 noCycles|204 =|800 constructorType|235 .|802 addInterfaces|214 (|800 extendedInterfaces|235 .|802 isEmpty|216 ()|233 ?|800 ImmutableSet|235 .|802 of|214 (|800 registry|235 .|802 getCommonTypes|216 ()|235 .|802 getObjectType|216 ()|215 )|226 :|800 extendedInterfaces|215 )|227 ;|-1
NominalType|800 builtinObject|204 =|800 registry|235 .|802 getCommonTypes|216 ()|235 .|802 getObjectType|216 ()|227 ;|-1
{|800 builder|235 .|802 addRetType|214 (|40 JSType.UNDEFINED|215 )|227 ;|219 }|-1
builder|235 .|802 addRestFormals|214 (|800 t|242 !=|500 null|233 ?|800 t|226 :|40 JSType.UNKNOWN|215 )|227 ;|-1
return|800 t|235 .|802 isSingletonObjWithNull|216 ()|233 ?|800 t|235 .|802 removeType|214 (|40 JSType.NULL|215 )|226 :|800 t|227 ;|-1
tdType|204 =|40 JSType.UNKNOWN|227 ;|-1
try|218 {|329 return|802 getTypeFromCommentHelper|214 (|800 n|234 ,|800 registry|234 ,|800 typeParameters|215 )|227 ;|219 }|331 catch|214 (|801 UnknownTypeException|800 e|215 )|218 {|329 return|40 JSType.UNKNOWN|227 ;|219 }|-1
lvalue.type|204 =|40 lvalue.type|235 .|802 mayHaveProp|214 (|800 pname|215 )|233 ?|40 lvalue.type|235 .|802 getProp|214 (|800 pname|215 )|226 :|40 JSType.UNKNOWN|227 ;|-1
if|214 (|800 doSlicing|215 )|218 {|40 pair.env|204 =|802 envPutType|214 (|40 pair.env|234 ,|800 name|234 ,|800 declType|242 !=|500 null|233 ?|800 declType|226 :|40 JSType.UNKNOWN|215 )|227 ;|219 }|-1
!|800 lvalueType|235 .|802 isSubtypeOf|214 (|40 JSType.TOP_OBJECT|215 )|-1
if|214 (|800 requiredType|235 .|802 mayHaveProp|214 (|800 pname|215 )|215 )|218 {|800 reqPtype|204 =|800 requiredType|235 .|802 getProp|214 (|800 pname|215 )|227 ;|219 }|322 else|218 {|800 reqPtype|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
return|304 new|801 EnvTypePair|214 (|800 env|234 ,|40 JSType.UNKNOWN|215 )|227 ;|-1
if|214 (|800 formalType|235 .|802 isBottom|216 ()|215 )|218 {|800 formalType|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
pair.type|204 =|40 JSType.BOOLEAN|227 ;|-1
JSType|800 operandType|204 =|800 requiredType|235 .|802 isNumber|216 ()|233 ?|40 JSType.NUMBER|226 :|40 JSType.UNKNOWN|227 ;|-1
private|801 EnvTypePair|802 analyzeExprBwd|214 (|801 Node|800 expr|234 ,|801 TypeEnv|800 outEnv|215 )|218 {|329 return|802 analyzeExprBwd|214 (|800 expr|234 ,|800 outEnv|234 ,|40 JSType.UNKNOWN|215 )|227 ;|219 }|-1
if|214 (|800 outerType|236 ==|500 null|215 )|218 {|800 outerType|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
{|801 JSType|800 tmp|204 =|800 t|235 .|802 getIndexedType|216 ()|227 ;|329 return|800 tmp|236 ==|500 null|233 ?|40 JSType.UNKNOWN|226 :|800 tmp|227 ;|219 }|-1
{|800 reqPtype|204 =|800 specPtype|204 =|40 JSType.UNKNOWN|227 ;|219 }|-1
if|214 (|207 !|800 currentScope|235 .|802 hasThis|216 ()|215 )|218 {|802 mayWarnAboutGlobalThis|214 (|800 expr|234 ,|800 currentScope|215 )|227 ;|329 return|304 new|801 EnvTypePair|214 (|800 inEnv|234 ,|40 JSType.UNKNOWN|215 )|227 ;|219 }|-1
return|304 new|801 EnvTypePair|214 (|800 env|234 ,|40 JSType.UNKNOWN|215 )|227 ;|-1
funType|235 .|802 isOptionalArg|214 (|800 i|215 )|249 &&|40 pair.type|235 .|802 equals|214 (|40 JSType.UNDEFINED|215 )|-1
rhsPair.type|204 =|40 JSType.BOOLEAN|227 ;|-1
{|329 return|802 analyzeExprFwd|214 (|800 expr|234 ,|800 inEnv|234 ,|40 JSType.UNKNOWN|234 ,|40 JSType.UNKNOWN|215 )|227 ;|219 }|-1
if|214 (|800 rootNs|242 !=|500 null|249 &&|800 rootNs|235 .|802 isSubtypeOf|214 (|40 JSType.TOP_OBJECT|215 )|215 )|218 {|800 namespaceType|204 =|800 rootNs|235 .|802 getProp|214 (|800 qname|235 .|802 getAllButLeftmost|216 ()|215 )|227 ;|219 }|-1
return|800 ImmutableList|235 .|802 copyOf|214 (|800 out|215 )|227 ;|-1
EnvTypePair|800 lhsPair|204 =|802 analyzeExprBwd|214 (|800 lhs|234 ,|40 rhsPair.env|215 )|227 ;|-1
{|802 process|214 (|500 null|234 ,|800 scriptRoot|215 )|227 ;|219 }|-1
passes|235 .|802 add|214 (|800 checkVariableReferences|215 )|227 ;|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 root|234 ,|315 this|215 )|227 ;|219 }|-1
phaseopt|235 .|802 process|214 (|800 externsNode|234 ,|800 n|215 )|227 ;|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
this|235 .|800 rawType|235 .|800 name|235 .|802 equals|214 (|45 STRING_CONSTANT|215 )|249 &&|800 NUMERIC_PATTERN|235 .|802 matcher|214 (|800 pname|215 )|235 .|802 matches|216 ()|-1
test|214 (|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|227 ;|-1
test|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|227 ;|-1
public|802 ProcessDefinesTest|216 ()|218 {|349 super|214 (|45 STRING_CONSTANT|215 )|227 ;|802 allowSourcelessWarnings|216 ()|227 ;|219 }|-1
assertThat|214 (|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|235 .|802 isEqualTo|214 (|800 output|215 )|227 ;|-1
assertEquals|214 (|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
assertEquals|214 (|45 STRING_CONSTANT|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
assertEquals|214 (|45 STRING_CONSTANT|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
assertEquals|214 (|45 STRING_CONSTANT|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
assertEquals|214 (|45 STRING_CONSTANT|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
assertEquals|214 (|45 STRING_CONSTANT|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
assertEquals|214 (|45 STRING_CONSTANT|234 ,|800 JSDocInfoPrinter|235 .|802 print|214 (|800 info|215 )|215 )|227 ;|-1
phaseopt|235 .|802 process|214 (|800 externsNode|234 ,|800 externAndJsRoot|215 )|227 ;|-1
{|800 TranspilationPasses|235 .|802 hotSwapCheck|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 processCheck|214 (|800 compiler|234 ,|800 root|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
passes|235 .|802 add|214 (|800 checkVariableReferencesForTranspileOnly|215 )|227 ;|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 TranspilationPasses|235 .|802 hotSwapTranspile|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
long|802 stop|216 ()|218 {|329 return|800 System|235 .|802 currentTimeMillis|216 ()|200 +|800 start|227 ;|219 }|-1
replacement|235 .|802 setTypeI|214 (|800 nativeStringType|215 )|227 ;|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 root|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
phaseopt|235 .|802 process|214 (|800 externsNode|234 ,|800 n|215 )|227 ;|-1
{|801 FindStaticMembers|800 findStaticMembers|204 =|304 new|801 FindStaticMembers|216 ()|227 ;|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|800 findStaticMembers|215 )|227 ;|802 processInherits|214 (|40 findStaticMembers.inheritsCalls|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
passes|235 .|802 add|214 (|800 checkVariableReferences|215 )|227 ;|-1
{|802 process|214 (|500 null|234 ,|800 scriptRoot|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
{|800 NodeTraversal|235 .|802 traverseEs6|214 (|800 compiler|234 ,|800 scriptRoot|234 ,|315 this|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 create|214 (|801 AbstractCompiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clEqualitySameRewriterPass|214 (|800 compiler|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 create|214 (|801 AbstractCompiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clConstantHoisterPass|214 (|800 compiler|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 create|214 (|801 AbstractCompiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clClinitPrunerPass|214 (|800 compiler|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|83 final|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clConstantHoisterPass|214 (|800 compiler|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clClinitPrunerPass|214 (|800 compiler|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clEqualitySameRewriterPass|214 (|800 compiler|215 )|227 ;|219 }|-1
Node|800 moduleNode|204 =|304 new|801 Node|214 (|40 Token.MODULE_BODY|215 )|227 ;|-1
Node|800 lhs|204 =|800 node|235 .|802 getFirstChild|216 ()|235 .|802 getFirstChild|216 ()|227 ;|-1
Node|800 clinitFunction|204 =|800 multiExpression|235 .|802 getFirstChild|216 ()|235 .|802 getFirstChild|216 ()|227 ;|-1
Node|800 methodName|204 =|800 member|235 .|802 getFirstChild|216 ()|235 .|802 getFirstChild|216 ()|227 ;|-1
options|235 .|802 setWarningLevel|214 (|40 DiagnosticGroups.LINT_CHECKS|234 ,|40 CheckLevel.WARNING|215 )|227 ;|-1
public|39 void|802 disable_testClassMethodUnused2|216 ()|218 {|315 this|235 .|802 disableTypeCheck|216 ()|227 ;|802 unused|214 (|45 STRING_CONSTANT|215 )|227 ;|802 used|214 (|45 STRING_CONSTANT|215 )|227 ;|219 }|-1
public|39 void|802 testClassMethodUnused1|216 ()|218 {|315 this|235 .|802 disableTypeCheck|216 ()|227 ;|802 unused|214 (|45 STRING_CONSTANT|215 )|227 ;|802 used|214 (|45 STRING_CONSTANT|215 )|227 ;|219 }|-1
{|800 passes|235 .|802 add|214 (|800 flowSensitiveInlineVariables|215 )|227 ;|313 if|214 (|40 options.removeUnusedVars|250 |||40 options.removeUnusedLocalVars|215 )|218 {|800 passes|235 .|802 add|214 (|802 getRemoveUnusedVars|214 (|45 STRING_CONSTANT|234 ,|9 false|215 )|215 )|227 ;|219 }|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 create|214 (|801 AbstractCompiler|800 compiler|215 )|218 {|329 return|304 new|801 UnreachableCodeElimination|214 (|800 compiler|234 ,|9 true|215 )|227 ;|219 }|-1
options|235 .|802 setRemoveDeadCode|214 (|9 true|215 )|227 ;|-1
options|235 .|802 setRemoveDeadCode|214 (|9 true|215 )|227 ;|-1
@|800 Override|83 protected|801 CompilerPass|802 create|214 (|801 AbstractCompiler|800 compiler|215 )|218 {|329 return|304 new|801 UnreachableCodeElimination|214 (|800 compiler|234 ,|9 false|215 )|227 ;|219 }|-1
options|235 .|802 setFoldConstants|214 (|9 true|215 )|227 ;|-1
options|235 .|802 setFoldConstants|214 (|9 true|215 )|227 ;|-1
options|235 .|802 setWarningLevel|214 (|40 DiagnosticGroups.ANALYZER_CHECKS|234 ,|40 CheckLevel.WARNING|215 )|227 ;|-1
options|235 .|802 setWarningLevel|214 (|40 DiagnosticGroups.LINT_CHECKS|234 ,|40 CheckLevel.WARNING|215 )|227 ;|-1
public|39 void|802 testInvalidAnnotation5|214 (|215 )|301 throws|800 Exception|218 {|802 testError|214 (|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|234 ,|800 INVALID_NO_SIDE_EFFECT_ANNOTATION|215 )|227 ;|219 }|-1
public|39 void|802 testInvalidAnnotation4|214 (|215 )|301 throws|800 Exception|218 {|802 testError|214 (|45 STRING_CONSTANT|200 +|45 STRING_CONSTANT|234 ,|800 INVALID_NO_SIDE_EFFECT_ANNOTATION|215 )|227 ;|219 }|-1
public|801 String|802 toModuleName|216 ()|218 {|329 return|800 ModuleNames|235 .|802 toModuleName|214 (|800 uri|215 )|227 ;|219 }|-1
public|801 String|802 toJSIdentifier|216 ()|218 {|329 return|800 ModuleNames|235 .|802 toJSIdentifier|214 (|800 uri|215 )|227 ;|219 }|-1
{|800 requires|235 .|802 add|214 (|800 fileUri|235 .|802 resolveEs6Module|214 (|800 arg|215 )|235 .|802 toModuleName|216 ()|215 )|227 ;|219 }|-1
String|800 globalModuleName|204 =|800 t|235 .|802 getInput|216 ()|235 .|802 getUri|216 ()|235 .|802 resolveEs6Module|214 (|800 moduleName|215 )|235 .|802 toModuleName|216 ()|227 ;|-1
String|800 moduleName|204 =|800 t|235 .|802 getInput|216 ()|235 .|802 getUri|216 ()|235 .|802 toModuleName|216 ()|227 ;|-1
String|800 moduleName|204 =|800 t|235 .|802 getInput|216 ()|235 .|802 getUri|216 ()|235 .|802 resolveEs6Module|214 (|800 moduleIdentifier|235 .|802 getString|216 ()|215 )|235 .|802 toModuleName|216 ()|227 ;|-1
{|800 moduleName|204 =|800 t|235 .|802 getInput|216 ()|235 .|802 getUri|216 ()|235 .|802 resolveEs6Module|214 (|800 importName|215 )|235 .|802 toModuleName|216 ()|227 ;|219 }|-1
ModuleLoader.ModuleUri|800 actual|-1
String|800 moduleName|204 =|800 t|235 .|802 getInput|216 ()|235 .|802 getUri|216 ()|235 .|802 toModuleName|216 ()|227 ;|-1
TemplateTypeMapReplacer|800 replacer|204 =|304 new|801 TemplateTypeMapReplacer|214 (|800 registry|234 ,|315 this|215 )|227 ;|-1
{|800 errorReporter|235 .|802 warning|214 (|45 STRING_CONSTANT|200 +|800 SimpleErrorReporter|235 .|802 getMessage0|214 (|800 messageId|215 )|234 ,|802 getSourceName|216 ()|234 ,|800 lineno|234 ,|800 charno|215 )|227 ;|219 }|-1
{|800 errorReporter|235 .|802 warning|214 (|45 STRING_CONSTANT|200 +|800 SimpleErrorReporter|235 .|802 getMessage1|214 (|800 messageId|234 ,|800 messageArg|215 )|234 ,|802 getSourceName|216 ()|234 ,|800 lineno|234 ,|800 charno|215 )|227 ;|219 }|-1
assertWarning|214 (|45 STRING_CONSTANT|234 ,|40 RhinoErrorReporter.JSDOC_MISSING_BRACES_WARNING|234 ,|45 STRING_CONSTANT|215 )|227 ;|-1
{|801 SourceMapObject|800 sourceMapObject|204 =|304 new|801 SourceMapObject|214 (|800 contents|215 )|227 ;|802 parse|214 (|800 sourceMapObject|234 ,|500 null|215 )|227 ;|219 }|-1
SourceMapObject|800 sourceMapObject|204 =|304 new|801 SourceMapObject|214 (|800 contents|215 )|227 ;|-1
{|303 for|214 (|801 MemberDefinition|800 prop|226 :|800 PolymerPassStaticUtils|235 .|802 extractProperties|214 (|800 objLit|215 )|215 )|218 {|40 prop.name|235 .|802 removeProp|214 (|40 Node.JSDOC_INFO_PROP|215 )|227 ;|219 }|219 }|-1
PolymerPassStaticUtils|235 .|802 extractProperties|214 (|800 objLit|215 )|-1
overwriteMembersIfPresent|214 (|800 allProperties|234 ,|800 PolymerPassStaticUtils|235 .|802 extractProperties|214 (|800 descriptor|215 )|215 )|227 ;|-1
{|800 GwtProperties|800 p|204 =|800 GwtProperties|235 .|802 load|214 (|45 STRING_CONSTANT|215 )|227 ;|802 assertTrue|214 (|800 p|235 .|802 propertyNames|216 ()|235 .|802 isEmpty|216 ()|215 )|227 ;|219 }|-1
return|800 MODULE_JOINER|235 .|802 join|214 (|800 Arrays|235 .|802 copyOfRange|214 (|800 buffer|234 ,|34 NUMBER_CONSTANT|234 ,|800 position|215 )|215 )|227 ;|-1
if|214 (|40 options.coalesceVariableNames|215 )|218 {|800 passes|235 .|802 add|214 (|800 coalesceVariableNames|215 )|227 ;|313 if|214 (|40 options.foldConstants|215 )|218 {|800 passes|235 .|802 add|214 (|800 peepholeOptimizations|215 )|227 ;|219 }|219 }|-1
test|214 (|800 options|234 ,|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|234 ,|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|215 )|227 ;|-1
{|800 Preconditions|235 .|802 checkState|214 (|802 hasInstanceType|216 ()|215 )|227 ;|329 return|800 typeOfThis|235 .|802 toObjectType|216 ()|227 ;|219 }|-1
{|313 if|214 (|800 sideEffectInfo|235 .|802 taintedLocals|216 ()|235 .|802 contains|214 (|800 v|215 )|215 )|218 {|800 sideEffectInfo|235 .|802 setTaintsUnknown|216 ()|227 ;|800 sideEffectInfo|235 .|802 resetLocalVars|216 ()|227 ;|500 break;|219 }|219 }|-1
if|214 (|800 defs|236 ==|500 null|215 )|218 {|800 functionInfo|235 .|802 setTaintsUnknown|216 ()|227 ;|500 break;|219 }|-1
test|214 (|800 options|234 ,|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|234 ,|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|215 )|227 ;|-1
String|800 currentJsSource|204 =|802 toSource|216 ()|227 ;|-1
Config|800 config|204 =|800 ParserRunner|235 .|802 createConfig|214 (|800 mode|234 ,|40 Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE|234 ,|40 Config.RunMode.KEEP_GOING|234 ,|500 null|215 )|227 ;|-1
return|304 new|801 ParseResult|214 (|800 root|234 ,|800 comments|234 ,|800 features|215 )|227 ;|-1
{|329 return|802 createConfig|214 (|800 languageMode|234 ,|40 JsDocParsing.TYPES_ONLY|234 ,|40 RunMode.STOP_AFTER_ERROR|234 ,|800 extraAnnotationNames|215 )|227 ;|219 }|-1
{|315 this|214 (|800 config|234 ,|800 errorReporter|234 ,|800 source|234 ,|800 offset|234 ,|9 false|215 )|227 ;|219 }|-1
{|315 this|214 (|800 annotationWhitelist|234 ,|40 JsDocParsing.TYPES_ONLY|234 ,|40 RunMode.STOP_AFTER_ERROR|234 ,|800 suppressionNames|234 ,|800 languageMode|215 )|227 ;|219 }|-1
Config|800 config|204 =|304 new|801 Config|214 (|800 extraAnnotations|234 ,|800 parseDocumentation|234 ,|40 RunMode.STOP_AFTER_ERROR|234 ,|800 extraSuppressions|234 ,|40 LanguageMode.ECMASCRIPT3|215 )|227 ;|-1
Config|800 config|204 =|304 new|801 Config|214 (|800 extraAnnotations|234 ,|40 JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE|234 ,|40 RunMode.KEEP_GOING|234 ,|800 extraSuppressions|234 ,|40 LanguageMode.ECMASCRIPT3|215 )|227 ;|-1
n|235 .|802 getType|216 ()|236 ==|40 Token.DIV|249 &&|800 n|235 .|802 getFirstChild|216 ()|235 .|802 isNumber|216 ()|249 &&|800 n|235 .|802 getFirstChild|216 ()|235 .|802 getDouble|216 ()|236 ==|34 NUMBER_CONSTANT|-1
parent|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
value|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
ancestor|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 node|235 .|802 getType|216 ()|215 )|218 {|326 case|800 GETTER_DEF|226 :|326 case|800 SETTER_DEF|226 :|329 return|9 true|227 ;|500 default:|500 break;|219 }|329 return|9 false|227 ;|219 }|-1
switch|214 (|800 key|235 .|802 getType|216 ()|215 )|218 {|326 case|800 STRING_KEY|226 :|326 case|800 GETTER_DEF|226 :|326 case|800 SETTER_DEF|226 :|326 case|800 MEMBER_FUNCTION_DEF|226 :|329 return|800 key|235 .|802 getString|216 ()|227 ;|500 default:|500 break;|219 }|-1
{|305 switch|214 (|800 node|235 .|802 getType|216 ()|215 )|218 {|326 case|800 STRING_KEY|226 :|326 case|800 GETTER_DEF|226 :|326 case|800 SETTER_DEF|226 :|326 case|800 MEMBER_FUNCTION_DEF|226 :|329 return|9 true|227 ;|500 default:|500 break;|219 }|329 return|9 false|227 ;|219 }|-1
return|800 parent|242 !=|500 null|249 &&|800 parent|235 .|802 getType|216 ()|236 ==|40 Token.ASSIGN|249 &&|800 parent|235 .|802 getFirstChild|216 ()|236 ==|800 n|227 ;|-1
current|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 parent|235 .|802 getType|216 ()|215 )|218 {|326 case|800 DECLARE|226 :|326 case|800 EXPORT|226 :|329 return|9 true|227 ;|500 default:|329 return|802 isStatementParent|214 (|800 parent|215 )|227 ;|219 }|219 }|-1
switch|214 (|800 parent|235 .|802 getType|216 ()|215 )|218 {|326 case|800 SCRIPT|226 :|326 case|800 MODULE_BODY|226 :|326 case|800 BLOCK|226 :|326 case|800 LABEL|226 :|326 case|800 NAMESPACE_ELEMENTS|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 FOR|226 :|326 case|800 FOR_OF|226 :|326 case|800 DO|226 :|326 case|800 WHILE|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
n|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|-1
{|208 @|800 Override|83 public|39 boolean|802 apply|214 (|801 Node|800 n|215 )|218 {|329 return|800 n|235 .|802 getType|216 ()|236 ==|800 type|227 ;|219 }|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 VOID|226 :|329 return|9 true|227 ;|326 case|800 NAME|226 :|329 return|800 n|235 .|802 getString|216 ()|235 .|802 equals|214 (|45 STRING_CONSTANT|215 )|227 ;|500 default:|500 break;|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
Preconditions|235 .|802 checkArgument|214 (|800 callNode|235 .|802 isNew|216 ()|234 ,|45 STRING_CONSTANT|234 ,|800 callNode|235 .|802 getType|216 ()|215 )|227 ;|-1
n|235 .|802 getType|216 ()|-1
val|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 GT|226 :|326 case|800 GE|226 :|326 case|800 LT|226 :|326 case|800 LE|226 :|329 return|9 true|227 ;|500 default:|500 break;|219 }|329 return|9 false|227 ;|219 }|-1
switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 EQ|226 :|326 case|800 NE|226 :|326 case|800 SHEQ|226 :|326 case|800 SHNE|226 :|326 case|800 MUL|226 :|329 return|9 true|227 ;|500 default:|500 break;|219 }|-1
n|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
valueNode|235 .|802 getType|216 ()|-1
node|235 .|802 getType|216 ()|-1
Token|800 pType|204 =|800 root|235 .|802 getParent|216 ()|235 .|802 getType|216 ()|227 ;|-1
Token|800 parentType|204 =|800 parent|235 .|802 getType|216 ()|227 ;|-1
return|800 DECLARATION_PARENTS|235 .|802 contains|214 (|800 parent|235 .|802 getType|216 ()|215 )|227 ;|-1
parent|235 .|802 getType|216 ()|-1
propdef|235 .|802 setType|214 (|40 Token.STRING|215 )|227 ;|-1
op|235 .|802 setType|214 (|800 assignOp|215 )|227 ;|-1
if|214 (|802 canFoldStandardConstructors|214 (|800 n|215 )|215 )|218 {|800 n|235 .|802 setType|214 (|40 Token.CALL|215 )|227 ;|800 n|235 .|802 putBooleanProp|214 (|40 Node.FREE_CALL|234 ,|9 true|215 )|227 ;|802 reportCodeChange|216 ()|227 ;|219 }|-1
Token|800 type|204 =|800 n|235 .|802 getType|216 ()|227 ;|-1
{|329 return|800 include|236 ==|800 nodeTypes|235 .|802 contains|214 (|800 n|235 .|802 getType|216 ()|215 )|227 ;|219 }|-1
Token|800 type|204 =|800 valueNode|235 .|802 getType|216 ()|227 ;|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
parent|235 .|802 setType|214 (|40 Token.ASSIGN|215 )|227 ;|-1
newOperator|235 .|802 setType|214 (|800 complementOperator|215 )|227 ;|-1
shorthand|235 .|802 setType|214 (|800 NodeUtil|235 .|802 getOpFromAssignmentOp|214 (|800 shorthand|215 )|215 )|227 ;|-1
n|235 .|802 setType|214 (|40 Token.FOR|215 )|227 ;|-1
node|235 .|802 getType|216 ()|-1
{|305 switch|214 (|800 n|235 .|802 getType|216 ()|215 )|218 {|326 case|800 FOR|226 :|326 case|800 FOR_OF|226 :|326 case|800 DO|226 :|326 case|800 WHILE|226 :|329 return|9 true|227 ;|500 default:|329 return|9 false|227 ;|219 }|219 }|-1
n|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
{|303 for|214 (|801 Token|800 type|226 :|800 types|215 )|218 {|313 if|214 (|800 c|235 .|802 getType|216 ()|236 ==|800 type|215 )|218 {|329 return|800 c|227 ;|219 }|219 }|219 }|-1
n|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 getType|216 ()|-1
{|313 if|214 (|800 n|235 .|802 isConst|216 ()|215 )|218 {|802 handleDeclarationList|214 (|800 n|234 ,|800 n|235 .|802 getParent|216 ()|215 )|227 ;|219 }|800 n|235 .|802 setType|214 (|40 Token.VAR|215 )|227 ;|219 }|-1
declarationList|235 .|802 setType|214 (|40 Token.VAR|215 )|227 ;|-1
{|800 currentProp|235 .|802 setType|214 (|40 Token.STRING|215 )|227 ;|800 newProp|204 =|800 IR|235 .|802 getprop|214 (|800 objectToExtend|235 .|802 cloneTree|216 ()|234 ,|800 currentProp|215 )|235 .|802 srcref|214 (|800 currentProp|215 )|227 ;|219 }|-1
n|235 .|802 getType|216 ()|-1
member|235 .|802 setType|214 (|40 Token.STRING_KEY|215 )|227 ;|-1
c|235 .|802 setType|214 (|40 Token.VAR|215 )|227 ;|-1
{|801 Node|800 dollarChildProp|204 =|800 n|235 .|802 getGrandparent|216 ()|227 ;|800 dollarChildProp|235 .|802 setType|214 (|40 Token.GETELEM|215 )|227 ;|800 compiler|235 .|802 reportCodeChange|216 ()|227 ;|219 }|-1
switch|214 (|800 node|235 .|802 getType|216 ()|215 )|218 {|326 case|800 NAME|226 :|326 case|800 STRING|226 :|326 case|800 STRING_KEY|226 :|329 return|800 node|235 .|802 getString|216 ()|227 ;|500 default:|329 return|800 compiler|235 .|802 toSource|214 (|800 node|215 )|227 ;|219 }|-1
{|801 Token|800 inverseOperator|204 =|800 NodeUtil|235 .|802 getInverseOperator|214 (|800 subtree|235 .|802 getToken|216 ()|215 )|227 ;|800 subtree|235 .|802 setType|214 (|800 inverseOperator|215 )|227 ;|219 }|-1
jsdoc|235 .|802 getType|216 ()|-1
return|800 jsdocNode|242 !=|500 null|249 &&|800 jsdocNode|235 .|802 getType|216 ()|236 ==|40 Token.ELLIPSIS|227 ;|-1
Preconditions|235 .|802 checkState|214 (|800 thisRoot|235 .|802 getType|216 ()|236 ==|40 Token.BANG|215 )|227 ;|-1
boolean|800 isPropDeclared|204 =|800 propNode|235 .|802 getType|216 ()|236 ==|40 Token.COLON|227 ;|-1
importedName|235 .|802 setType|214 (|40 Token.NAME|215 )|227 ;|-1
key|235 .|802 setType|214 (|40 Token.STRING_KEY|215 )|227 ;|-1
key|235 .|802 setType|214 (|40 Token.SETTER_DEF|215 )|227 ;|-1
key|235 .|802 setType|214 (|40 Token.GETTER_DEF|215 )|227 ;|-1
{|800 irNode|235 .|802 setType|214 (|40 Token.BLOCK|215 )|227 ;|219 }|-1
name|235 .|802 getType|216 ()|-1
parent|235 .|802 getType|216 ()|-1
n|235 .|802 setType|214 (|800 TEMPLATE_LOCAL_NAME|215 )|227 ;|-1
n|235 .|802 setType|214 (|800 TEMPLATE_TYPE_PARAM|215 )|227 ;|-1
keyNode|235 .|802 setType|214 (|40 Token.STRING_KEY|215 )|227 ;|-1
keyNode|235 .|802 setType|214 (|40 Token.STRING_KEY|215 )|227 ;|-1
(|800 n|236 ==|800 jsRoot|250 |||800 n|235 .|802 isFunction|216 ()|215 )|249 &&|800 comp|235 .|802 hasScopeChanged|214 (|800 n|215 )|-1
private|39 boolean|802 taintsThis|216 ()|218 {|329 return|802 getMask|214 (|800 TAINTS_THIS_MASK|215 )|227 ;|219 }|-1
private|39 boolean|802 taintsGlobalState|216 ()|218 {|329 return|802 getMask|214 (|800 TAINTS_GLOBAL_STATE_MASK|215 )|227 ;|219 }|-1
private|39 boolean|802 pureFunction|216 ()|218 {|329 return|802 getMask|214 (|800 PURE_FUNCTION_MASK|215 )|227 ;|219 }|-1
{|313 if|214 (|800 node|235 .|802 isFunction|216 ()|215 )|218 {|802 visitFunction|214 (|800 node|234 ,|800 parent|215 )|227 ;|219 }|329 return|9 true|227 ;|219 }|-1
Collection|230 <|800 Definition|231 >|800 defs|204 =|802 getCallableDefinitions|214 (|800 definitionProvider|234 ,|800 callSite|235 .|802 getFirstChild|216 ()|215 )|227 ;|-1
this|235 .|800 functionSideEffectMap|204 =|304 new|801 HashMap|232 <>|216 ()|227 ;|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|83 final|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 MinimizeExitPoints|214 (|800 compiler|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clClinitPrunerPass|214 (|800 compiler|234 ,|500 null|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|83 final|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clConstantHoisterPass|214 (|800 compiler|234 ,|500 null|215 )|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerPass|802 getProcessor|214 (|801 Compiler|800 compiler|215 )|218 {|329 return|304 new|801 J2clEqualitySameRewriterPass|214 (|800 compiler|234 ,|500 null|215 )|227 ;|219 }|-1
testSame|214 (|800 LINE_JOINER|235 .|802 join|214 (|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|234 ,|45 STRING_CONSTANT|215 )|234 ,|800 OPTIONAL_TYPE_NOT_USING_OPTIONAL_NAME|215 )|227 ;|-1
this|235 .|800 compiler|204 =|800 compiler|227 ;|-1
boolean|800 useTypesForOptimization|204 =|800 compiler|235 .|802 getOptions|216 ()|235 .|800 useTypesForOptimization|227 ;|-1
boolean|802 shouldAmbiguateProperties|216 ()|218 {|329 return|315 this|235 .|800 useTypesForOptimization|250 |||315 this|235 .|800 ambiguateProperties|227 ;|219 }|-1
boolean|802 shouldDisambiguateProperties|216 ()|218 {|329 return|315 this|235 .|800 useTypesForOptimization|250 |||315 this|235 .|800 disambiguateProperties|227 ;|219 }|-1
@|800 Override|83 protected|801 CompilerOptions|802 getOptions|214 (|801 CompilerOptions|800 options|215 )|218 {|40 options.useTypesForOptimization|204 =|9 true|227 ;|329 return|349 super|235 .|802 getOptions|214 (|800 options|215 )|227 ;|219 }|-1
CompilerPass|800 peepholePass|204 =|304 new|801 PeepholeOptimizationsPass|214 (|800 compiler|234 ,|304 new|801 PeepholeFoldConstants|214 (|800 late|234 ,|800 compiler|235 .|802 getOptions|216 ()|235 .|800 useTypesForOptimization|215 )|215 )|227 ;|-1
compiler|235 .|802 getOptions|216 ()|235 .|800 useTypesForOptimization|-1
final|39 boolean|800 useTypesForOptimization|204 =|800 compiler|235 .|802 getOptions|216 ()|235 .|800 useTypesForOptimization|227 ;|-1
if|214 (|207 !|800 compiler|235 .|802 getOptions|216 ()|235 .|800 useTypesForOptimization|215 )|218 {|500 return;|219 }|-1
{|801 CompilerOptions|800 options|204 =|349 super|235 .|802 getOptions|216 ()|227 ;|40 options.useTypesForOptimization|204 =|800 useTypesForOptimization|227 ;|800 options|235 .|802 setJ2clPass|214 (|40 CompilerOptions.J2clPassMode.ON|215 )|227 ;|329 return|800 options|227 ;|219 }|-1
