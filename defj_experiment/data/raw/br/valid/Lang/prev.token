suite . addTest ( HashCodeUtilsTest . suite () ) ;
if ( index == NUMBER_CONSTANT ) { return ( Throwable ) this . cause ; }
Throwable throwables [] = this . getThrowables () ;
Throwable nestedCause = cause . getCause () ;
{ this . cause = cause ; }
ArrayList list = new ArrayList () ;
{ return ExceptionUtils . indexOfThrowable ( this . cause , type , fromIndex ) ; }
{ return ExceptionUtils . getThrowables ( this . cause ) ; }
if ( index == NUMBER_CONSTANT ) { return this . cause ; }
Throwable nestedCause = ExceptionUtils . getCause ( this . cause ) ;
n = new NestableExceptionTester1 ( getThrowable ( msgs [ NUMBER_CONSTANT ] ) ) ;
public static Test suite () { return new TestSuite ( ANestableExceptionTestCase . class ) ; }
{ return new NestableRuntimeExceptionTester1 ( msg , ( Throwable ) n ) ; }
public static Test suite () { return new TestSuite ( NestableExceptionTestCase . class ) ; }
private RandomStringUtils () {}
public String getSummaryObjectEndText () { return summaryObjectEndText ; }
public String getSummaryObjectStartText () { return summaryObjectStartText ; }
public String getSizeEndText () { return sizeEndText ; }
public String getSizeStartText () { return sizeStartText ; }
public String getNullText () { return nullText ; }
public String getFieldSeparator () { return fieldSeparator ; }
public String getFieldNameValueSeparator () { return fieldNameValueSeparator ; }
public String getContentEnd () { return contentEnd ; }
public String getContentStart () { return contentStart ; }
public String getArraySeparator () { return arraySeparator ; }
public String getArrayEnd () { return arrayEnd ; }
public String getArrayStart () { return arrayStart ; }
public void setArrayContentDetail ( boolean arrayContentDetail ) { this . arrayContentDetail = arrayContentDetail ; }
public void setDefaultFullDetail ( boolean defaultFullDetail ) { this . defaultFullDetail = defaultFullDetail ; }
public void setUseFieldNames ( boolean useFieldNames ) { this . useFieldNames = useFieldNames ; }
public void setUseIdentityHashCode ( boolean useIdentityHashCode ) { this . useIdentityHashCode = useIdentityHashCode ; }
public void setShortClassName ( boolean shortClassName ) { this . useShortClassName = shortClassName ; }
public void setUseClassName ( boolean useClassName ) { this . useClassName = useClassName ; }
if ( style == null ) { style = ToStringStyle.DEFAULT_STYLE ; }
String linebreak = System . getProperty ( STRING_CONSTANT ) ;
if ( entry == null ) { return Collections.EMPTY_MAP ; }
catch ( ExceptionInInitializerError ex ) { assertTrue ( ex . getCause () instanceof IllegalArgumentException ) ; }
catch ( ExceptionInInitializerError ex ) { assertTrue ( ex . getCause () instanceof IllegalArgumentException ) ; }
catch ( ExceptionInInitializerError ex ) { assertTrue ( ex . getCause () instanceof IllegalArgumentException ) ; }
suite . addTest ( TestClosureUtils . suite () ) ;
public Number getMaximum () { return min ; }
{ if ( member == null ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } return Modifier . isStatic ( member . getModifiers () ) ; }
! isAssignmentCompatible ( methodsParams [ n ] , parameterTypes [ n ] )
! ReflectionUtils . isCompatable ( parameterTypes [ n ] , methodsParams [ n ] )
methods [ i ] . getName () . equals ( methodName ) && ReflectionUtils . isCompatable ( paramTypes , methods [ i ] . getParameterTypes () )
catch ( NoSuchMethodException e ) {}
private DefaultToStringStyle () { super(); }
DefaultToStringStyle () { super(); }
{ try { ExecutorUtils . switchMapExecutor ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { ExecutorUtils . switchExecutor ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { TransformerUtils . switchMapTransformer ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { TransformerUtils . switchTransformer ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { ExecutorUtils . switchMapExecutor ( EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { ExecutorUtils . switchExecutor ( EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { TransformerUtils . switchMapTransformer ( EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { TransformerUtils . switchTransformer ( EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
this . clss = clss ;
Method method = getMatchingAccessibleMethod ( object . getClass () , methodName , parameterTypes ) ;
{ try { ExecutorUtils . switchMapExecutor ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { ExecutorUtils . switchExecutor ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { TransformerUtils . switchMapTransformer ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
{ try { TransformerUtils . switchTransformer ( Collections.EMPTY_MAP ) ; } catch ( IllegalArgumentException ex ) { return; } fail () ; }
buf . append ( ClassUtils . getShortClassName ( th ) ) ;
withoutCause = new ExceptionWithoutCause () ;
{ ByteArrayOutputStream baos = new ByteArrayOutputStream () ; serialize ( obj , baos ) ; return baos . toByteArray () ; }
return ( cls . getDeclaringClass () != null ) ;
String shortName = getClass () . getName () ;
String shortName = getClass () . getName () ;
{ frames . add ( STRING_CONSTANT + throwables [ i ] . toString () ) ; }
String shortName = Enum . getEnumClassName ( getClass () ) ;
Entry entry = ( Entry ) cEnumClasses . get ( Enum . getEnumClassName ( getClass () ) ) ;
private Null () {}
reverseArray ( strs ) ;
{ return join ( array , STRING_CONSTANT ) ; }
ArrayUtils . reverseArray ( strs ) ;
{ iso = ( Integer ) e2i . get ( entity ) ; }
{ return ( int ) Math . random () * n ; }
public long nextLong () { return ( long ) Math . random () * Long.MAX_VALUE ; }
{ return ( int ) Math . random () * n ; }
{ return random ( count , NUMBER_CONSTANT , set.length - NUMBER_CONSTANT , false , false , set ) ; }
public void printPartialStackTrace ( PrintWriter out ) {}
{ return ( String ) STRING_ALPHANUMERIC_IDENTIFIER_FACTORY . create () ; }
{ return ( String ) STRING_NUMERIC_IDENTIFIER_FACTORY . create () ; }
{ return ( Long ) LONG_IDENTIFIER_FACTORY . create () ; }
return ( cls . getName () . indexOf ( CHAR_CONS ) >= NUMBER_CONSTANT ) ;
int i = className . lastIndexOf ( CHAR_CONS ) ;
ToStringBuilder . isRegistered ( value ) && ! ( value instanceof Number || value instanceof Boolean || value instanceof Character )
assertTrue ( ToStringBuilder . getReflectionRegistry () . isEmpty () ) ;
end = ( int ) CHAR_CONS ;
if ( lastIdx == NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , object , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
{ style . append ( buffer , fieldName , array , new Boolean ( fullDetail ) ) ; return this ; }
assertEquals ( STRING_CONSTANT , cal , DateUtils . trunc ( cal , Calendar.DATE ) , NUMBER_CONSTANT ) ;
Object array
Object array
public BinaryIntMap ( int growBy ) { super ( growBy ) ; }
{ return unescapeEntities ( str , Entities.XML ) ; }
{ return escapeEntities ( str , Entities.XML ) ; }
{ return unescapeEntities ( str , Entities.HTML40 ) ; }
{ return escapeEntities ( str , Entities.HTML40 ) ; }
{ entities . entityName ( html40value ( i ) ) ; }
{ buf . append ( STRING_CONSTANT ) ; char ch = html40value ( i ) ; buf . append ( ch ) ; }
if ( pads > PAD_LIMIT ) { return leftPad ( str , size , STRING_CONSTANT ) ; }
if ( pads > PAD_LIMIT ) { return rightPad ( str , size , STRING_CONSTANT ) ; }
assertEquals ( - NUMBER_CONSTANT , ArrayUtils . lastIndexOf ( array , STRING_CONSTANT ) ) ;
assertEquals ( - NUMBER_CONSTANT , ArrayUtils . indexOf ( array , STRING_CONSTANT ) ) ;
{ appendAsObjectToString ( buffer , value ) ; }
{ this . getStyle () . appendAsObjectToString ( this . getStringBuffer () , object ) ; return this ; }
assertEquals ( false , StringUtils . isNotEmptyTrimmed ( null ) ) ;
assertEquals ( true , StringUtils . isEmptyTrimmed ( null ) ) ;
assertEquals ( false , StringUtils . isNotEmpty ( null ) ) ;
assertEquals ( true , StringUtils . isEmpty ( null ) ) ;
if ( pads > PAD_LIMIT ) { return leftPad ( str , size , CHAR_CONS ) ; }
Field . setAccessible ( fields , true ) ;
try { SerializationUtils . deserialize ( ( byte [] ) null ) ; } catch ( NullPointerException ex ) { return; }
try { SerializationUtils . deserialize ( ( InputStream ) null ) ; } catch ( NullPointerException ex ) { return; }
try { SerializationUtils . serialize ( null , null ) ; } catch ( NullPointerException ex ) { return; }
try { SerializationUtils . serialize ( iMap , null ) ; } catch ( NullPointerException ex ) { return; }
if ( StringUtils . isEmptyOrNull ( className ) ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( StringUtils . isEmptyOrNull ( className ) ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( StringUtils . isEmptyOrNull ( name ) ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( StringUtils . isEmptyOrNull ( className ) ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Field . setAccessible ( fields , true ) ;
Field . setAccessible ( fields , true ) ;
Field . setAccessible ( fields , true ) ;
try { method = interfaces [ i ] . getDeclaredMethod ( methodName , parameterTypes ) ; } catch ( NoSuchMethodException e ) { ; }
{ try { RandomUtils.JVM_RANDOM . setSeed ( NUMBER_CONSTANT ) ; fail ( STRING_CONSTANT ) ; } catch ( UnsupportedOperationException ex ) { ; } }
catch ( NumberFormatException ex ) { ; }
catch ( NumberFormatException ex ) { ; }
catch ( NumberFormatException ex ) { ; }
catch ( NumberFormatException ex ) { ; }
catch ( NumberFormatException ex ) { ; }
catch ( NumberFormatException ex ) { ; }
{ if ( comparison != NUMBER_CONSTANT ) { return this ; } comparison = superHashCode ; return this ; }
{ rule = new StringLiteral ( new String ( sub ) ) ; }
{ iTotal = iTotal * iConstant + ( int ) value ; return this ; }
{ iTotal = iTotal * iConstant + ( int ) value ; return this ; }
{ iTotal = iTotal * iConstant + ( int ) value ; return this ; }
assertEquals ( ( int ) CHAR_CONS , Entities.XML . entityValue ( STRING_CONSTANT ) ) ;
String entityValue = Entities.iso8859_1 [ i % Entities.iso8859_1.length ] [ NUMBER_CONSTANT ] ;
String entityValue = Entities.html40 [ i % Entities.html40.length ] [ NUMBER_CONSTANT ] ;
{ if ( str == null ) { return null ; } return new BigDecimal ( str ) ; }
{ if ( str == null ) { return null ; } return new BigInteger ( str ) ; }
{ if ( str == null ) { return null ; } return Long . valueOf ( str ) ; }
{ if ( str == null ) { return null ; } return Integer . decode ( str ) ; }
{ if ( str == null ) { return null ; } return Double . valueOf ( str ) ; }
{ if ( str == null ) { return null ; } return Float . valueOf ( str ) ; }
{ if ( ! validateNumber ( str ) ) { return null ; } return new BigInteger ( str ) ; }
{ if ( ! validateNumber ( str ) ) { return null ; } return Long . valueOf ( str ) ; }
{ if ( ! validateNumber ( str ) ) { return null ; } return Integer . decode ( str ) ; }
{ if ( ! validateNumber ( str ) ) { return null ; } return Double . valueOf ( str ) ; }
{ if ( ! validateNumber ( str ) ) { return null ; } return Float . valueOf ( str ) ; }
assertEquals ( STRING_CONSTANT , f . nextStringIdentifier () ) ;
{ return random ( count , start , end , letters , numbers , null ) ; }
if ( out == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( out == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( array1 == null || array2 == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( causeFrames == null || wrapperFrames == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( writer == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( stream == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( objectData == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( inputStream == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
if ( outputStream == null ) { throw new NullArgumentException ( STRING_CONSTANT ) ; }
{ Validate . notNull ( null ) ; }
{ Validate . isTrue ( false ) ; }
{ String shortName = ClassUtils . getShortClassName ( iEnumClass ) ; iToString = shortName + STRING_CONSTANT + getName () + STRING_CONSTANT ; }
return Collections . unmodifiableList ( entry.list ) ;
return Collections . unmodifiableMap ( entry.map ) ;
text = DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT . format ( cal ) ;
{ return format ( date , pattern , DateUtils.UTC_TIMEZONE , locale ) ; }
{ return format ( new Date ( millis ) , pattern , DateUtils.UTC_TIMEZONE , locale ) ; }
{ return format ( date , pattern , DateUtils.UTC_TIMEZONE , null ) ; }
{ return format ( new Date ( millis ) , pattern , DateUtils.UTC_TIMEZONE , null ) ; }
if ( at == - NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
{ return ( str == null ? STRING_CONSTANT : str ) ; }
if ( repeat <= NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
if ( lastIdx <= NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
if ( strLen < NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
if ( idx != - NUMBER_CONSTANT ) { return str . substring ( NUMBER_CONSTANT , idx + sep . length () ) ; } else { return STRING_CONSTANT ; }
if ( idx != - NUMBER_CONSTANT ) { return str . substring ( idx ) ; } else { return STRING_CONSTANT ; }
if ( ch == CHAR_CONS || ch == CHAR_CONS ) { return STRING_CONSTANT ; } else { return str ; }
if ( overlay == null ) { overlay = STRING_CONSTANT ; }
if ( separator == null ) { separator = STRING_CONSTANT ; }
if ( separator . length () == NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
if ( len < NUMBER_CONSTANT || pos > str . length () ) { return STRING_CONSTANT ; }
if ( len < NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
if ( len < NUMBER_CONSTANT ) { return STRING_CONSTANT ; }
if ( start > end ) { return STRING_CONSTANT ; }
if ( start > str . length () ) { return STRING_CONSTANT ; }
{ return ( str == null ? STRING_CONSTANT : strip ( str , null ) ) ; }
{ return ( str == null ? STRING_CONSTANT : str . trim () ) ; }
{ return ( str == null ? STRING_CONSTANT : str . trim () ) ; }
int gcd = greatestCommonDenominator ( Math . abs ( numerator ) , denominator ) ;
int gcd = greatestCommonDenominator ( Math . abs ( numerator ) , denominator ) ;
{ try { Fraction . getFraction ( null ) ; } catch ( IllegalArgumentException ex ) {} }
assertEquals ( STRING_CONSTANT , STRING_CONSTANT , StringUtils . overlayString ( SENTENCE , FOO , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
int at = differenceAt ( str1 , str2 ) ;
{ int index = binarySearch ( value ) ; if ( index < NUMBER_CONSTANT ) return null ; return names [ index ] ; }
if ( insertAt > NUMBER_CONSTANT ) return;
if ( value == null ) return - NUMBER_CONSTANT ;
if ( value == null ) return - NUMBER_CONSTANT ;
if ( escapeSingleQuote ) out . write ( CHAR_CONS ) ;
{ return toString ( object , style , outputTransients , null ) ; }
{ return toString ( object , style , false , null ) ; }
{ return toString ( object , null , false , null ) ; }
{ return ReflectionToStringBuilder . toString ( object , style , outputTransients , reflectUpToClass ) ; }
{ return ReflectionToStringBuilder . toString ( object , style , outputTransients , null ) ; }
List list = ColorEnum . getEnumList () ;
{ flush () ; return ( ( StringWriter ) out ) . toString () ; }
if ( StringUtils . isEmpty ( str ) || StringUtils . isEmpty ( searchChars ) ) { return str ; }
if ( StringUtils . isEmpty ( str ) || StringUtils . isEmpty ( remove ) ) { return str ; }
if ( StringUtils . isEmpty ( str ) || StringUtils . isEmpty ( remove ) ) { return str ; }
if ( StringUtils . isEmpty ( str ) || StringUtils . isEmpty ( searchChars ) ) { return - NUMBER_CONSTANT ; }
if ( StringUtils . isEmpty ( str ) || searchChars == null || searchChars.length == NUMBER_CONSTANT ) { return - NUMBER_CONSTANT ; }
{ if ( isASCIINumeric ( ch ) == false ) { return defaultValue ; } return ( ch - NUMBER_CONSTANT ) ; }
if ( isASCIINumeric ( ch ) == false ) { throw new IllegalArgumentException ( STRING_CONSTANT + ch + STRING_CONSTANT ) ; }
{ if ( ch < NUMBER_CONSTANT ) { return CHAR_ARRAY [ ch ] ; } else { return new Character ( ch ) ; } }
{ super(); this . value = value ; }
{ return super . equals ( obj ) ; }
MutableNumber () { super(); }
{ super(); this . value = value ; }
{ super(); this . value = value ; }
{ super(); setValue ( value ) ; }
{ super(); this . value = value ; }
{ super(); this . value = value ; }
{ super(); setValue ( new Long ( value ) ) ; }
{ return this . value . equals ( obj ) ; }
public MutableNumber () { super(); }
public Object getValue () { return new Float ( this . value ) ; }
GregorianCalendar gval = new GregorianCalendar () ;
GregorianCalendar gval = new GregorianCalendar () ;
GregorianCalendar gval = new GregorianCalendar () ;
suite . addTest ( MutableIntegerTest . suite () ) ;
{ return split ( str , separatorChars , - NUMBER_CONSTANT ) ; }
final byte holder
final short holder
final int holder
final byte holder
final short holder
final int holder
final int holder
final int holder
final short holder
final int holder
final short holder
final int holder
final int mask
final Object array
final boolean [] array
final float [] array
final double [] array
final byte [] array
final char [] array
final short [] array
final int [] array
final long [] array
final Object [] array
final boolean [] array
final Boolean [] array
final float [] array
final Float [] array
final double [] array
final Double [] array
final byte [] array
final Byte [] array
final short [] array
final Short [] array
final int [] array
final Integer [] array
final long [] array
final Long [] array
final boolean [] array
final float [] array
final double [] array
final byte [] array
final char [] array
final short [] array
final int [] array
final long [] array
final Object [] array
final Object array
final Object array
final boolean [] array
final float [] array
final double [] array
final byte [] array
final char [] array
final short [] array
final long [] array
final Object [] array
final Object [] array
final Object array
final Object array
public EqualsBuilder () { super(); isEquals = true ; }
{ addToken ( tokens , new String () ) ; }
{ this . value = value ; ; }
{ ++ nEntries ; markers . add ( marker ) ; sources . add ( source ) ; }
long splitTime = watch . getTime () ;
if ( tokenLen >= NUMBER_CONSTANT ) { rule = UnpaddedNumberField.INSTANCE_YEAR ; } else { rule = TwoDigitYearField.INSTANCE ; }
{ return format ( millis , format , true ) ; }
{ if ( throwables [ i ] . getClass () . equals ( type ) ) { return i ; } }
{ if ( throwables [ i ] . getClass () . equals ( type ) ) { return i ; } }
{ if ( type . isAssignableFrom ( throwables [ i ] . getClass () ) ) { return i ; } }
{ if ( type . isAssignableFrom ( throwables [ i ] . getClass () ) ) { return i ; } }
public Class getThrowableClass () { return Exception . class ; }
{ return new Exception ( msg ) ; }
public Class getThrowableClass () { return Error . class ; }
{ return new Error ( msg ) ; }
public Class getThrowableClass () { return RuntimeException . class ; }
{ return new RuntimeException ( msg ) ; }
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
newArray [ lastIndex ( newArray ) ] = element ;
{ super ( argName + STRING_CONSTANT ) ; }
{ return DurationFormatUtils . formatISO ( getSplitTime () ) ; }
public String toString () { return DurationFormatUtils . formatISO ( getTime () ) ; }
public DurationFormatUtils () {}
assertFalse ( STRING_CONSTANT , token . equals ( new DurationFormatUtils.Token ( new Object () , NUMBER_CONSTANT ) ) ) ;
{ if ( arrayStart == null ) { arrayStart = STRING_CONSTANT ; } this . arrayEnd = arrayEnd ; }
return ( Object [] ) add ( ( Object ) array , index , element , clss ) ;
{ return ( str == null ? defaultStr : str ) ; }
{ return ( str == null ? EMPTY : str ) ; }
{ return ( str == null ? EMPTY : str . trim () ) ; }
{ String ts = trim ( str ) ; return ( isEmpty ( ts ) ? null : ts ) ; }
{ return ( str == null ? null : str . trim () ) ; }
{ return ( str == null ? EMPTY : str . trim () ) ; }
{ return ( text [ pos ] <= NUMBER_CONSTANT ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ; }
{ return ( ch == text [ pos ] ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ; }
public int previousIndex () { return ( tokenPos - NUMBER_CONSTANT ) ; }
public boolean hasPrevious () { tokenize () ; return ( tokenPos > NUMBER_CONSTANT ) ; }
public boolean hasNext () { tokenize () ; return ( tokenPos < tokens.length ) ; }
{ return ( indexOf ( str , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ) ; }
{ super(); if ( initialCapacity <= NUMBER_CONSTANT ) { initialCapacity = NUMBER_CONSTANT ; } buf = new char [ initialCapacity ] ; }
return ( min == range.min && max == range.max ) ;
{ return ( value >= min && value <= max ) ; }
return ( this . stopTime - this . startTime ) ;
return ( min == range.min && max == range.max ) ;
{ return ( value >= min && value <= max ) ; }
{ if ( str == null || searchStr == null ) { return false ; } return ( str . indexOf ( searchStr ) >= NUMBER_CONSTANT ) ; }
{ if ( isEmpty ( str ) ) { return false ; } return ( str . indexOf ( searchChar ) >= NUMBER_CONSTANT ) ; }
return ( str . length () == NUMBER_CONSTANT ? null : str ) ;
return ( date1 . getTime () == date2 . getTime () ) ;
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , valueToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( indexOf ( array , objectToFind ) != - NUMBER_CONSTANT ) ; }
{ return ( obj == null ? nullStr : obj . toString () ) ; }
{ return ( obj == null ? STRING_CONSTANT : obj . toString () ) ; }
{ return ( object != null ? object : defaultValue ) ; }
{ return ( ch >= CHAR_CONS && ch <= CHAR_CONS ) ; }
{ return ( ch >= CHAR_CONS && ch <= CHAR_CONS ) ; }
{ return ( ch >= CHAR_CONS && ch <= CHAR_CONS ) ; }
{ return ( ch < NUMBER_CONSTANT || ch == NUMBER_CONSTANT ) ; }
{ return ( ch >= NUMBER_CONSTANT && ch < NUMBER_CONSTANT ) ; }
{ return ( ch < NUMBER_CONSTANT ) ; }
{ if ( isAsciiNumeric ( ch ) == false ) { return defaultValue ; } return ( ch - NUMBER_CONSTANT ) ; }
return ( ch - NUMBER_CONSTANT ) ;
{ if ( cls == null ) { return false ; } return ( cls . getName () . indexOf ( INNER_CLASS_SEPARATOR_CHAR ) >= NUMBER_CONSTANT ) ; }
{ return ( value == null ? STRING_CONSTANT : value . toString () ) ; }
public int hashCode () { return ( value == null ? NUMBER_CONSTANT : value . hashCode () ) ; }
public boolean nextBoolean () { return ( Math . random () > NUMBER_CONSTANT ) ; }
{ return ( value >= min && value <= max ) ; }
return ( compareMin <= NUMBER_CONSTANT && compareMax >= NUMBER_CONSTANT ) ;
return ( compareMin <= NUMBER_CONSTANT && compareMax >= NUMBER_CONSTANT ) ;
public static boolean isThrowableNested () { return ( THROWABLE_CAUSE_METHOD != null ) ; }
return ( xor ( primitive ) ? Boolean.TRUE : Boolean.FALSE ) ;
{ return ( bool ? trueString : falseString ) ; }
{ if ( bool == null ) { return nullString ; } return ( bool . booleanValue () ? trueString : falseString ) ; }
{ if ( bool == null ) { return nullValue ; } return ( bool . booleanValue () ? trueValue : falseValue ) ; }
{ return ( bool ? trueValue : falseValue ) ; }
{ if ( bool == null ) { return nullValue ; } return ( bool . booleanValue () ? trueValue : falseValue ) ; }
{ return ( bool ? trueValue : falseValue ) ; }
{ if ( bool == null ) { return null ; } return ( bool . booleanValue () ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO ) ; }
{ return ( bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO ) ; }
{ return ( bool ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ; }
{ if ( value == null ) { return null ; } return ( value . intValue () == NUMBER_CONSTANT ? Boolean.FALSE : Boolean.TRUE ) ; }
{ return ( value == NUMBER_CONSTANT ? Boolean.FALSE : Boolean.TRUE ) ; }
{ return ( value == NUMBER_CONSTANT ? false : true ) ; }
{ if ( bool == null ) { return valueIfNull ; } return ( bool . booleanValue () ? true : false ) ; }
{ if ( bool == null ) { return false ; } return ( bool . booleanValue () ? true : false ) ; }
{ return ( bool ? Boolean.TRUE : Boolean.FALSE ) ; }
{ if ( bool == null ) { return false ; } return ( bool . booleanValue () ? false : true ) ; }
{ if ( bool == null ) { return false ; } return ( bool . booleanValue () ? true : false ) ; }
{ return ( value >= min && value <= max ) ; }
{ return ( JAVA_VERSION_INT >= requiredVersion ) ; }
{ return ( JAVA_VERSION_FLOAT >= requiredVersion ) ; }
return ( compareMin <= NUMBER_CONSTANT && compareMax >= NUMBER_CONSTANT ) ;
{ return ( holder & _mask ) ; }
return ( set . equals ( other.set ) ) ;
