new Reporter () . smartNullPointerException ( location ) ;
return getMock ( invocation ) ;
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
mockingProgress . verificationStarted ( mode ) ;
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnList () ; }
{ return reportMatcher ( Any.ANY ) . returnString () ; }
{ return ( T ) anyObject () ; }
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
