notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . gap = gap ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . radiusGridlinePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . radiusGridlineStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . radiusGridlinesVisible != visible ) { this . radiusGridlinesVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . angleGridlinePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . angleGridlineStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . angleGridlinesVisible != visible ) { this . angleGridlinesVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
if ( this . angleLabelsVisible != visible ) { this . angleLabelsVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . cornerTextItems . clear () ; this . notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( removed ) { this . notifyListeners ( new PlotChangeEvent ( this ) ) ; }
this . notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . sectionDepth = sectionDepth ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . outerSeparatorExtension = percent ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . innerSeparatorExtension = percent ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . separatorsVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . drawBorder = status ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
if ( this . labelType != type ) { this . labelType = type ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ super . setFixedRangeAxisSpace ( space ) ; setFixedRangeAxisSpaceForSubplots ( space ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . gap = gap ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . intervals . clear () ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . dialOutlinePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . drawBorder = draw ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . dialBackgroundPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . tickLabelPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . tickLabelFont = font ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . tickLabelsVisible != visible ) { this . tickLabelsVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . units = units ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . legendLabelURLGenerator = generator ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . legendLabelToolTipGenerator = generator ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . urlGenerator = generator ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . toolTipGenerator = generator ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . simpleLabels = simple ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . labelShadowPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . labelOutlineStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . labelOutlinePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . labelBackgroundPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . labelLinkMargin = margin ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . labelLinksVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . maximumLabelWidth = width ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . labelGap = gap ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . labelGenerator = generator ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . shadowYOffset = offset ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . shadowXOffset = offset ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . shadowPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . sectionOutlineStrokeMap . put ( key , stroke ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . sectionOutlineStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . sectionOutlinePaintMap . put ( key , paint ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . sectionOutlinePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . sectionOutlinesVisible = visible ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . sectionPaintMap . put ( key , paint ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . sectionPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . ignoreZeroValues = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . ignoreNullValues = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . circular = circular ; if ( notify ) { notifyListeners ( new PlotChangeEvent ( this ) ) ; } }
if ( this . interiorGap != percent ) { this . interiorGap = percent ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . startAngle = angle ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . rangeCrosshairPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . rangeCrosshairStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . rangeCrosshairValue = value ; if ( isRangeCrosshairVisible () && notify ) { notifyListeners ( new PlotChangeEvent ( this ) ) ; } }
if ( this . rangeCrosshairLockedOnData != flag ) { this . rangeCrosshairLockedOnData = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . rangeCrosshairVisible != flag ) { this . rangeCrosshairVisible = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . domainCrosshairPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . domainCrosshairStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . domainCrosshairValue = value ; if ( isDomainCrosshairVisible () && notify ) { notifyListeners ( new PlotChangeEvent ( this ) ) ; } }
if ( this . domainCrosshairLockedOnData != flag ) { this . domainCrosshairLockedOnData = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . domainCrosshairVisible != flag ) { this . domainCrosshairVisible = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . annotations != null ) { this . annotations . clear () ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
if ( this . rangeMarkers != null ) { this . rangeMarkers . clear () ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
if ( this . domainMarkers != null ) { this . domainMarkers . clear () ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . colorBar = axis ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . colorBarLocation = edge ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . gap = gap ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . urlGenerator = generator ; this . notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . toolTipGenerator = generator ; this . notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . seriesOutlineStrokeList . setStroke ( series , stroke ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . seriesOutlineStroke = stroke ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . seriesOutlinePaintList . setPaint ( series , paint ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . seriesOutlinePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . seriesPaintList . setPaint ( series , paint ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . seriesPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . axisLabelGap = gap ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . interiorGap != percent ) { this . interiorGap = percent ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . maxValue = value ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . startAngle = angle ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . headPercent = percent ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . webFilled = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . darkerSides = darker ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . depthFactor = factor ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . gap = gap ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . columnRadius = r ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . bulbRadius = r ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . useSubrangePaint = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . followDataInSubranges = flag ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . subrangePaint [ range ] = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . showValueLines = b ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . valuePaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . valueFont = f ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . axisLocation = location ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . valueLocation = location ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
if ( this . units != u ) { this . units = u ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ if ( paint != null ) { this . thermometerPaint = paint ; notifyListeners ( new PlotChangeEvent ( this ) ) ; } }
{ if ( s != null ) { this . thermometerStroke = s ; notifyListeners ( new PlotChangeEvent ( this ) ) ; } }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . limit = limit ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
{ this . renderingHints . put ( RenderingHints.KEY_TEXT_ANTIALIASING , val ) ; this . notifyListeners ( new ChartChangeEvent ( this ) ) ; }
{ this . notifyListeners ( new PlotChangeEvent ( this ) ) ; }
{ this . datasetToScaleMap . set ( index , new Integer ( scaleIndex ) ) ; notifyListeners ( new PlotChangeEvent ( this ) ) ; }
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
notifyListeners ( new PlotChangeEvent ( this ) ) ;
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
{ result = iterateXYRangeBounds ( dataset ) ; }
{ result = iterateCategoryRangeBounds ( dataset , includeInterval ) ; }
public void datasetChanged ( DatasetChangeEvent event ) { this . notifyListeners ( event ) ; }
double gap = Math . max ( NUMBER_CONSTANT , height - sumOfLabelHeights ) ;
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
Range r = DatasetUtilities . findRangeBounds ( d , false ) ;
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
double delta = NUMBER_CONSTANT ;
XYSeries series = new XYSeries ( STRING_CONSTANT ) ;
{ if ( stroke instanceof BasicStroke ) { this . setData ( stroke ) ; } else { throw new RuntimeException ( STRING_CONSTANT ) ; } }
double maxWidth = space * getMaxItemWidth () ;
{ super(); setBaseToolTipGenerator ( toolTipGenerator ) ; setURLGenerator ( urlGenerator ) ; setShapesVisible ( false ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
public Date getUpperDate () { return this . upperDate ; }
public Date getLowerDate () { return this . lowerDate ; }
public long getSerialIndex () { return this . time . getTime () ; }
{ return this . time . getTime () ; }
public long getMiddleMillisecond () { return this . time . getTime () ; }
{ return this . time . getTime () ; }
public long getLastMillisecond () { return this . time . getTime () ; }
{ return this . time . getTime () ; }
public long getFirstMillisecond () { return this . time . getTime () ; }
difference = this . time . getTime () - t1.time . getTime () ;
public int hashCode () { return this . time . hashCode () ; }
{ FixedMillisecond m = ( FixedMillisecond ) object ; return this . time . equals ( m . getTime () ) ; }
long t = this . time . getTime () ;
long t = this . time . getTime () ;
public Date getTime () { return this . time ; }
{ this . time = time ; }
entities != null && dataArea . contains ( xx , yy )
public Date getEnd () { return this . end ; }
public Date getStart () { return this . start ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
RelativeDateFormat rdf = new RelativeDateFormat ( c0 . getTimeInMillis () ) ;
{ throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
final long skip
if ( pointCount < NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
if ( periodCount < NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
this . setChart ( chart ) ;
this . setLayout ( layout ) ;
this . setLayout ( layout ) ;
this . setLayout ( layout ) ;
{ this ( parent , style ) ; this . setColor ( color ) ; }
if ( dataset != null ) { this . setDataset ( dataset ) ; }
Paint paint = lookupSectionPaint ( key , true ) ;
Paint paint = lookupSectionPaint ( key , true ) ;
Paint paint = lookupSectionPaint ( key , true ) ;
SWTEventListener listener
if ( currentGridBandIsDark ) { g2 . setPaint ( this . gridBandPaint ) ; } else { g2 . setPaint ( Color.white ) ; }
if ( currentGridBandIsDark ) { g2 . setPaint ( this . gridBandPaint ) ; } else { g2 . setPaint ( Color.white ) ; }
this . autoPopulateSeriesStroke = false ;
g2 . setPaint ( Color.gray ) ;
Paint paint = renderer . getItemPaint ( row , column ) ;
g2 . setPaint ( Color.gray ) ;
new Object [] { new Integer ( - s ) , new Double ( negBase ) }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
final TimeZone zone
{ if ( this . year < SerialDate.MAXIMUM_YEAR_SUPPORTED ) { return new Year ( this . year + NUMBER_CONSTANT ) ; } else { return null ; } }
if ( ( year < SerialDate.MINIMUM_YEAR_SUPPORTED ) || ( year > SerialDate.MAXIMUM_YEAR_SUPPORTED ) ) { throw new IllegalArgumentException ( STRING_CONSTANT + year + STRING_CONSTANT ) ; }
{ return createStandardDateTickUnits ( TimeZone . getDefault () ) ; }
Calendar calendar = Calendar . getInstance ( this . timeZone ) ;
Calendar calendar = Calendar . getInstance ( this . timeZone ) ;
assertEquals ( false , r . getAutoPopulateSeriesStroke () ) ;
if ( item == dataset . getItemCount ( series ) - NUMBER_CONSTANT ) { drawFirstPassShape ( g2 , pass , series , item , s.seriesPath ) ; }
this . minorTickCount = NUMBER_CONSTANT ;
{ this . minorTickMarkOutsideLength = length ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . minorTickMarkInsideLength = length ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
{ this . tickMarkStroke = stroke ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . tickMarkOutsideLength = length ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . tickMarkInsideLength = length ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( flag != this . tickMarksVisible ) { this . tickMarksVisible = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . tickLabelInsets = insets ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
{ this . tickLabelFont = font ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( flag != this . minorTickMarksVisible ) { this . minorTickMarksVisible = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( flag != this . tickLabelsVisible ) { this . tickLabelsVisible = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
{ this . axisLineVisible = visible ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . labelAngle = angle ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . labelInsets = insets ; if ( notify ) { notifyListeners ( new AxisChangeEvent ( this ) ) ; } }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
{ this . labelFont = font ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( flag != this . visible ) { this . visible = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
public static Test suite () { return new TestSuite ( CategoryAxisTests . class ) ; }
catch ( Exception e ) { success = false ; }
catch ( Exception e ) { success = false ; }
renderer1 . setToolTipGenerator ( StandardXYToolTipGenerator . getTimeSeriesInstance () ) ;
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
ResourceBundle resources = ResourceBundle . getBundle ( baseResourceClass ) ;
this . shell . setText ( ResourceBundle . getBundle ( STRING_CONSTANT ) . getString ( STRING_CONSTANT ) ) ;
ResourceBundle resources = ResourceBundle . getBundle ( baseName ) ;
result = NUMBER_CONSTANT * result + this . unit ;
TimeSeries overwritten = new TimeSeries ( STRING_CONSTANT + getKey () , series . getTimePeriodClass () ) ;
{ throw new SeriesException ( STRING_CONSTANT ) ; }
{ this ( name , DEFAULT_DOMAIN_DESCRIPTION , DEFAULT_RANGE_DESCRIPTION , Day . class ) ; }
drawZoomRectangle ( g2 ) ;
if ( ! useBuffer ) { drawZoomRectangle ( g2 , true ) ; }
{ return zoomFillPaint ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; System.err . println ( STRING_CONSTANT ) ; }
return new Color ( g , g , g ) ;
this . shadowsVisible = true ;
this . shadowsVisible = true ;
if ( dataset == null ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Calendar calendar = Calendar . getInstance ( zone ) ;
catch ( CloneNotSupportedException e ) { System.err . println ( STRING_CONSTANT ) ; }
Paint paint = renderer . getItemPaint ( row , column ) ;
StrokeChooserPanel panel = new StrokeChooserPanel ( null , this . availableStrokeSamples ) ;
StrokeChooserPanel panel = new StrokeChooserPanel ( null , this . availableStrokeSamples ) ;
{ this ( time , TimeZone . getDefault () ) ; }
{ this ( time , TimeZone . getDefault () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
{ this ( time , TimeZone . getDefault () ) ; }
{ this ( time , TimeZone . getDefault () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
{ this ( label , first , last , TimeZone . getDefault () ) ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
{ this ( time , TimeZone . getDefault () ) ; }
TimeSeries result = new TimeSeries ( name , source . getTimePeriodClass () ) ;
TimeSeries series1 = new TimeSeries ( STRING_CONSTANT , Month . class ) ;
calendar . add ( unit . getCalendarField () , unit . getCount () ) ;
public boolean isOutlineVisible () { return outlineVisible ; }
{ return maxY ; }
{ return minY ; }
{ return maxX ; }
{ return minX ; }
clone.zValues = DataUtilities . clone ( zValues ) ;
public Stroke getLabelOutlineStroke () { return labelOutlineStroke ; }
s1 . updateByIndex ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
s1 . updateByIndex ( NUMBER_CONSTANT , - NUMBER_CONSTANT ) ;
rangeAxis . resizeRange ( factor , anchorY ) ;
rangeAxis . resizeRange ( factor , anchorY ) ;
domainAxis . resizeRange ( factor , anchorX ) ;
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
{ if ( ! Double . isNaN ( hiY ) ) { result = Math . min ( result , hiY ) ; } }
this . domainAxis . resizeRange ( factor , anchorX ) ;
{ super ( renderer ) ; this . renderer = renderer ; }
this . rangePannable = true ;
( mods & InputEvent.CTRL_MASK ) == InputEvent.CTRL_MASK
if ( entities != null ) { addItemEntity ( entities , dataset , row , column , hotspot ) ; }
public NumberAxis3D ( String label ) { super ( label ) ; setAxisLineVisible ( false ) ; }
this . stripOutlineVisible = false ;
TimeSeries series = new TimeSeries ( name , start . getClass () ) ;
catch ( Exception e ) { success = false ; }
Line2D line = new Line2D.Double ( startX , startY , endX , endY ) ;
if ( this . showBase ) { result . append ( this . baseLabel ) ; result . append ( STRING_CONSTANT ) ; }
{ this . legendShape . setShape ( series , shape ) ; fireChangeEvent () ; }
{ return this . legendShape . getShape ( series ) ; }
return super . hashCode () ;
double ol = getTickMarkOutsideLength () ;
double transY0 = restrictValueToDataArea ( getRangeBase () , plot , dataArea ) ;
Paint seriesPaint = getFirstBarPaint () ;
double value = Double.NaN ;
Rectangle2D titleArea = new Rectangle2D.Double () ;
double x0 = dataArea . getX () ;
TimeSeriesDataItem item = series . getDataItem ( i ) ;
{ return getDataItem ( index ) . getValue () ; }
{ return getDataItem ( index ) . getPeriod () ; }
XYDataItem item = getDataItem ( index ) ;
{ return getDataItem ( index ) . getY () ; }
{ return getDataItem ( index ) . getX () ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
{ return this . coefficients . clone () ; }
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
double maxRadius = plot . getMaxRadius () ;
{ return this . dataset ; }
notifyListeners ( new DatasetChangeEvent ( this , this ) ) ;
catch ( Exception e ) { System.out . println ( e . toString () ) ; }
Line2D line = new Line2D.Double ( startX , startY , endX , endY ) ;
{ super ( info ) ; this . area = new Polygon () ; this . line = new Line2D.Double () ; }
{ this . shapesVisible = shapesVisible ; }
JPopupMenu result = new JPopupMenu ( STRING_CONSTANT ) ;
String text = STRING_CONSTANT ;
public boolean isCounterClockwise () { return counterClockwise ; }
public double getAngleOffset () { return angleOffset ; }
outlinePaint != null && outlineStroke != null
{ XYSeriesCollection c1 = new XYSeriesCollection () ; assertTrue ( c1 instanceof PublicCloneable ) ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( PropertyVetoException e ) { throw new IllegalArgumentException ( e . getMessage () , e ) ; }
this . shadowGenerator = new DefaultShadowGenerator () ;
this . shadowGenerator = new DefaultShadowGenerator () ;
this . maxY = minIgnoreNaN ( this . maxY , yy ) ;
if ( ! file . exists () ) { throw new ServletException ( STRING_CONSTANT + file . getAbsolutePath () + STRING_CONSTANT ) ; }
public boolean isRadiusMinorGridlinesVisible () { return radiusMinorGridlinesVisible ; }
assertTrue ( plot != null ) ;
catch ( Exception e ) { fail ( e . toString () ) ; }
catch ( Exception e ) { fail ( e . toString () ) ; }
catch ( Exception e ) { fail ( e . toString () ) ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; System.err . println ( STRING_CONSTANT ) ; }
result = Range . combine ( result , r ) ;
boolean include = true ;
{ setItemLabelsVisible ( BooleanUtilities . valueOf ( visible ) ) ; }
{ setBaseItemLabelsVisible ( BooleanUtilities . valueOf ( visible ) ) ; }
{ setSeriesItemLabelsVisible ( series , BooleanUtilities . valueOf ( visible ) ) ; }
{ setSeriesShapesFilled ( series , BooleanUtilities . valueOf ( flag ) ) ; }
{ setShapesFilled ( BooleanUtilities . valueOf ( filled ) ) ; }
{ setSeriesShapesVisible ( series , BooleanUtilities . valueOf ( visible ) ) ; }
{ setShapesVisible ( BooleanUtilities . valueOf ( visible ) ) ; }
{ setSeriesLinesVisible ( series , BooleanUtilities . valueOf ( visible ) ) ; }
{ setLinesVisible ( BooleanUtilities . valueOf ( visible ) ) ; }
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return c . getTime () . getTime () - NUMBER_CONSTANT ;
return c . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
return calendar . getTime () . getTime () ;
if ( dimension > NUMBER_CONSTANT ) { space . ensureAtLeast ( dimension , edge ) ; }
return c . getTimeInMillis () ;
if ( counterClockwise ) angleDegrees = - angleDegrees ;
if ( sectionKeys . size () == NUMBER_CONSTANT ) { return; }
{ this . stepped = stepped ; return; }
{ this . paletteName = paletteName ; return; }
catch ( Exception e ) { e . printStackTrace () ; }
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
LegendItem result = null ;
if ( this . data . size () == NUMBER_CONSTANT ) { return; }
ValueAxis valueAxis = null ;
double dim = NUMBER_CONSTANT ;
Line2D line = null ;
Line2D line = null ;
boolean paintLine = false ;
ValueAxis valueAxis = null ;
ValueAxis valueAxis = null ;
Range adjusted = null ;
AxisState state = null ;
Rectangle2D bounds = null ;
CategoryToolTipGenerator result = null ;
try { clone = super . clone () ; } catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
Range adjusted = null ;
EntityBlockParams ebp = null ;
ToolTipTagFragmentGenerator toolTipTagFragmentGenerator = null ;
int result = NUMBER_CONSTANT ;
catch ( CloneNotSupportedException e ) { e . printStackTrace () ; }
public void valueBound ( HttpSessionBindingEvent event ) { return; }
public void init ( ) throws ServletException { return; }
float l = NUMBER_CONSTANT ;
double result = NUMBER_CONSTANT ;
catch ( Exception e ) { e . printStackTrace () ; }
catch ( PropertyVetoException e ) { throw new IllegalArgumentException ( e ) ; }
{ ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ; this . tickMarkPosition = position ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
double result = Double.NaN ;
{ this . labelInfo = info ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . minorTickMarkOutsideLength = length ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . minorTickMarkInsideLength = length ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . minorTickMarkPaint = paint ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . minorTickMarkStroke = stroke ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ; this . minorTickTimePeriodClass = c ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . minorTickMarksVisible = visible ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ; this . majorTickTimePeriodClass = c ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ; this . autoRangeTimePeriodClass = c ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
this . dateFormat = dateFormat ;
{ this . categoryLabelToolTips . clear () ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
{ ParamChecks . nullNotPermitted ( positions , STRING_CONSTANT ) ; this . categoryLabelPositions = positions ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . maximumCategoryLabelWidthRatio = ratio ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . maximumCategoryLabelLines = lines ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . categoryMargin = margin ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . upperMargin = margin ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . lowerMargin = margin ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
Range adjusted = null ;
{ this . minorTickCount = count ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . standardTickUnits = source ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . autoTickUnitSelection = flag ; if ( notify ) { notifyListeners ( new AxisChangeEvent ( this ) ) ; } }
if ( notify ) { notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
{ ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ; this . defaultAutoRange = range ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( notify ) { notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( notify ) { notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( this . inverted != flag ) { this . inverted = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . rightArrow = arrow ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . leftArrow = arrow ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . downArrow = arrow ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . upArrow = arrow ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . negativeArrowVisible = visible ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . positiveArrowVisible = visible ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( this . verticalTickLabels != flag ) { this . verticalTickLabels = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . gridBandAlternatePaint = paint ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . gridBandPaint = paint ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( this . gridBandsVisible != flag ) { this . gridBandsVisible = flag ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ this . numberFormatOverride = formatter ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
if ( notify ) { notifyListeners ( new AxisChangeEvent ( this ) ) ; }
notifyListeners ( new AxisChangeEvent ( this ) ) ;
notifyListeners ( new AxisChangeEvent ( this ) ) ;
Date result = null ;
@ Override public int hashCode () { return super . hashCode () ; }
assertTrue ( url2 == url1 ) ;
assertTrue ( tt2 == tt ) ;
assertTrue ( url2 == url1 ) ;
assertTrue ( tt2 == tt ) ;
{ return ChartFactory . createPieChart3D ( STRING_CONSTANT , dataset , true , true , false ) ; }
return ChartFactory . createPieChart ( STRING_CONSTANT , data , true , true , false ) ;
{ return createXYAreaChart ( title , xAxisLabel , yAxisLabel , dataset ) ; }
try { series2 . setKey ( STRING_CONSTANT ) ; } catch ( IllegalArgumentException e ) {}
this . maxY = minIgnoreNaN ( this . maxY , yy ) ;
double gap = hh * getInteriorGap () ;
Date result = null ;
Line2D line = null ;
Line2D line = null ;
boolean paintLine = false ;
CategoryAxis axis = null ;
RectangleEdge result = null ;
ItemLabelPosition position = null ;
ItemLabelPosition position = null ;
( float ) regions [ NUMBER_CONSTANT ] . getMaxX ()
double result = NUMBER_CONSTANT ;
StringBuffer tag = new StringBuffer () ;
StringBuffer result = new StringBuffer () ;
StringBuffer result = new StringBuffer () ;
StringBuffer result = new StringBuffer () ;
StringBuffer sb = new StringBuffer () ;
ToolTipTagFragmentGenerator toolTipTagFragmentGenerator = null ;
ItemLabelPosition position = null ;
Shape box = null ;
Shape box = null ;
ItemLabelPosition position = null ;
double space = NUMBER_CONSTANT ;
int historyIdx = NUMBER_CONSTANT ;
Range result = null ;
String result = null ;
double startX = NUMBER_CONSTANT ;
BlockContainer result = null ;
DrawingSupplier result = null ;
String label = null ;
Arc2D notch = null ;
int izV = NUMBER_CONSTANT ;
int izV = NUMBER_CONSTANT ;
boolean paintLine = false ;
boolean include = true ;
double space = NUMBER_CONSTANT ;
double yyAverage = NUMBER_CONSTANT ;
double aRadius = NUMBER_CONSTANT ;
int series = NUMBER_CONSTANT ;
int series = NUMBER_CONSTANT ;
double rectWidth = NUMBER_CONSTANT ;
double rectHeight = NUMBER_CONSTANT ;
Line2D line = null ;
Line2D line = null ;
Paint p = null ;
boolean visible = false ;
@ Test
DefaultXYDataset d = new DefaultXYDataset () { public DomainOrder getDomainOrder () { return DomainOrder.DESCENDING ; } } ;
DefaultXYDataset d = new DefaultXYDataset () { public DomainOrder getDomainOrder () { return DomainOrder.ASCENDING ; } } ;
DefaultXYDataset d = new DefaultXYDataset () { public DomainOrder getDomainOrder () { return DomainOrder.DESCENDING ; } } ;
DefaultXYDataset d = new DefaultXYDataset () { public DomainOrder getDomainOrder () { return DomainOrder.ASCENDING ; } } ;
boolean success = false ;
boolean success = false ;
boolean success = false ;
boolean success = false ;
boolean success = false ;
boolean success = false ;
boolean success = false ;
new Rectangle2D.Double ( Math . min ( x1 , x2 ) , dataArea . getMinY () , Math . abs ( x2 - x1 ) , dataArea . getWidth () )
return DIRECTIONS [ index ] ;
{ if ( y <= this . minY || y >= this . maxY ) { findBoundsByIteration () ; } }
findBoundsByIteration () ;
if ( removed ) { findBoundsByIteration () ; if ( notify ) { fireSeriesChanged () ; } }
if ( removed ) { findBoundsByIteration () ; if ( notify ) { fireSeriesChanged () ; } }
{ findBoundsByIteration () ; }
{ findBoundsByIteration () ; }
Line2D extendedSeparator = extendLine ( separator , this . innerSeparatorExtension , this . outerSeparatorExtension ) ;
setRange ( calculateValue ( log1 ) , calculateValue ( log2 ) ) ;
{ this . attributedLabels . set ( section , label ) ; }
{ super ( labelFormat , numberFormat , percentFormat ) ; this . attributedLabels = new ObjectList () ; }
CategoryPlot p2 = null ;
CategoryPlot p2 = null ;
CategoryPlot p2 = null ;
this . datasets . set ( index , dataset ) ;
this . rangeAxisLocations . set ( index , location ) ;
int result = this . rangeAxes . indexOf ( axis ) ;
this . rangeAxes . set ( index , axis ) ;
this . domainAxisLocations . set ( index , location ) ;
this . domainAxes . set ( index , axis ) ;
{ this . toolTipGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ return ( XYToolTipGenerator ) this . toolTipGeneratorList . get ( series ) ; }
{ this . itemLabelGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ return ( XYItemLabelGenerator ) this . itemLabelGeneratorList . get ( series ) ; }
{ this . legendTextFont . set ( series , font ) ; fireChangeEvent () ; }
{ return ( Font ) this . legendTextFont . get ( series ) ; }
{ this . negativeItemLabelPositionList . set ( series , position ) ; if ( notify ) { fireChangeEvent () ; } }
{ this . positiveItemLabelPositionList . set ( series , position ) ; if ( notify ) { fireChangeEvent () ; } }
{ this . itemLabelFontList . set ( series , font ) ; if ( notify ) { fireChangeEvent () ; } }
{ return ( Font ) this . itemLabelFontList . get ( series ) ; }
{ this . itemURLGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ this . toolTipGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
{ return ( CategoryToolTipGenerator ) this . toolTipGeneratorList . get ( series ) ; }
{ this . itemLabelGeneratorList . set ( series , generator ) ; fireChangeEvent () ; }
int result = this . rangeAxes . indexOf ( axis ) ;
int result = this . domainAxes . indexOf ( axis ) ;
this . renderers . set ( index , renderer ) ;
this . datasets . set ( index , dataset ) ;
this . rangeAxisLocations . set ( index , location ) ;
this . rangeAxes . set ( index , axis ) ;
this . rangeAxes . set ( NUMBER_CONSTANT , axis ) ;
this . domainAxisLocations . set ( index , location ) ;
this . domainAxes . set ( index , axis ) ;
try { copy . add ( clone ) ; } catch ( SeriesException e ) { e . printStackTrace () ; }
if ( nDataPoints > this . valueHistory . length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
try { copy . add ( clone ) ; } catch ( SeriesException e ) { System.err . println ( STRING_CONSTANT ) ; }
{ super ( null , null , rangeAxis , null ) ; this . subplots = new java.util.ArrayList () ; }
{ super ( null , domainAxis , null , null ) ; this . subplots = new java.util.ArrayList () ; }
double adj = - percent * length ;
{ return this . fmImage . createGraphics () . getFontRenderContext () ; }
ChartPanel chartPanel = new ChartPanel ( chart ) ;
public FixedMillisecond ( long millisecond ) { this ( new Date ( millisecond ) ) ; }
int response = JOptionPane . showConfirmDialog ( this , fileExists , STRING_CONSTANT , JOptionPane.OK_CANCEL_OPTION ) ;
int response = JOptionPane . showConfirmDialog ( this , fileExists , STRING_CONSTANT , JOptionPane.OK_CANCEL_OPTION ) ;
XYDataset data
ChartPanel panel = new ChartPanel ( chart ) ;
ChartPanel panel = new ChartPanel ( chart ) ;
this . panel = new ChartPanel ( this . chart ) ;
r1 . setBaseLegendTextPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.green ) ) ;
g2 . draw ( new Line2D.Double ( xxMin , yymid - halfW , xxMin , yy + halfW ) ) ;
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . chartMouseListeners . remove ( listener ) ; }
if ( ! this . hasUniqueID ( handler ) ) { throw new IllegalArgumentException ( STRING_CONSTANT + handler . getID () + STRING_CONSTANT ) ; }
viewer . hideZoomRectangle () ;
viewer . showZoomRectangle ( x , y , w , h ) ;
ValueAxis xAxis = this . getDomainAxisForDataset ( datasetIndex ) ;
updateCrosshairValues ( crosshairState , x , y , datasetIndex , block . getCenterX () , block . getCenterX () , orientation ) ;
if ( entities != null ) { addEntity ( entities , block , dataset , series , item , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendLine , stream ) ; }
{ stream . defaultReadObject () ; this . legendLine = SerialUtilities . readShape ( stream ) ; }
if ( this . legendLine != null ) { clone.legendLine = ShapeUtilities . clone ( this . legendLine ) ; }
if ( ! ObjectUtilities . equal ( this . additionalItemLabelGenerator , that.additionalItemLabelGenerator ) ) { return false ; }
RefineryUtilities . centerFrameOnScreen ( demo ) ;
if ( ! ObjectUtilities . equal ( this . image , that.image ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . data , that.data ) ) { return false ; }
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . defaultGroup , that.defaultGroup ) ) { return false ; }
{ stream . defaultReadObject () ; this . wallPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . wallPaint , stream ) ; }
if ( ! PaintUtilities . equal ( this . wallPaint , that.wallPaint ) ) { return false ; }
{ stream . defaultReadObject () ; this . bounds = ( Rectangle2D ) SerialUtilities . readShape ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . bounds , stream ) ; }
clone.bounds = ( Rectangle2D ) ShapeUtilities . clone ( this . bounds ) ;
if ( ! ObjectUtilities . equal ( this . id , that.id ) ) { return false ; }
{ ValueDataset vd = ( ValueDataset ) obj ; return ObjectUtilities . equal ( this . value , vd . getValue () ) ; }
RefineryUtilities . centerFrameOnScreen ( demo ) ;
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
clone.items = ( List ) ObjectUtilities . deepClone ( this . items ) ;
{ StandardEntityCollection that = ( StandardEntityCollection ) obj ; return ObjectUtilities . equal ( this . entities , that.entities ) ; }
Object toAdd = ObjectUtilities . deepClone ( entry ) ;
{ anchor = ShapeUtilities . getPointInRectangle ( anchor . getX () , anchor . getY () , dataArea ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendLine , stream ) ; }
{ stream . defaultReadObject () ; this . legendLine = SerialUtilities . readShape ( stream ) ; }
clone.legendLine = ShapeUtilities . clone ( this . legendLine ) ;
{ setShapesFilled ( BooleanUtilities . valueOf ( filled ) ) ; }
RefineryUtilities . centerFrameOnScreen ( demo ) ;
if ( ! ObjectUtilities . equal ( this . seriesKey , that.seriesKey ) ) { return false ; }
clone.legendItemShape = ShapeUtilities . clone ( this . legendItemShape ) ;
if ( ! ObjectUtilities . equal ( this . seriesShapesFilled , that.seriesShapesFilled ) ) { return false ; }
{ this . seriesShapesFilled . setBoolean ( series , BooleanUtilities . valueOf ( filled ) ) ; fireChangeEvent () ; }
if ( ! ObjectUtilities . equal ( this . drawable , that.drawable ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . image , that.image ) ) { return false ; }
Paint paint = SerialUtilities . readPaint ( stream ) ;
SerialUtilities . writePaint ( paint , stream ) ;
if ( ! PaintUtilities . equal ( p1 , p2 ) ) { return false ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendArea , stream ) ; }
{ stream . defaultReadObject () ; this . legendArea = SerialUtilities . readShape ( stream ) ; }
if ( ! ShapeUtilities . equal ( this . legendArea , that.legendArea ) ) { return false ; }
clone.legendArea = ShapeUtilities . clone ( this . legendArea ) ;
{ this . drawShapes = BooleanUtilities . valueOf ( this . drawShapesCheckBox . isSelected () ) ; }
{ this . drawLines = BooleanUtilities . valueOf ( this . drawLinesCheckBox . isSelected () ) ; }
clone.bins = ( List ) ObjectUtilities . deepClone ( this . bins ) ;
if ( this . data != null ) { clone.data = ArrayUtilities . clone ( this . data ) ; }
{ if ( ! ShapeUtilities . equal ( s1 [ i ] , s2 [ i ] ) ) { return false ; } }
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
{ DefaultBoxAndWhiskerCategoryDataset dataset = ( DefaultBoxAndWhiskerCategoryDataset ) obj ; return ObjectUtilities . equal ( this . data , dataset.data ) ; }
Shape shadowArc = ShapeUtilities . createTranslatedShape ( path , ( float ) shadowXOffset , ( float ) shadowYOffset ) ;
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
{ stream . defaultReadObject () ; setArea ( SerialUtilities . readShape ( stream ) ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( getArea () , stream ) ; }
if ( ! PaintUtilities . equal ( this . backgroundPaint , that.backgroundPaint ) ) { return false ; }
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . image , that.image ) ) { return false ; }
{ stream . defaultReadObject () ; this . shadowPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . shadowPaint , stream ) ; }
hash = NUMBER_CONSTANT * hash + ObjectUtilities . hashCode ( this . seriesKey ) ;
{ stream . defaultReadObject () ; this . subLabelPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . subLabelPaint , stream ) ; }
clone.rows = ( List ) ObjectUtilities . deepClone ( this . rows ) ;
if ( ! ObjectUtilities . equal ( this . gradientPaintTransformer , that.gradientPaintTransformer ) ) { return false ; }
{ stream . defaultReadObject () ; setArea ( SerialUtilities . readShape ( stream ) ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( getArea () , stream ) ; }
{ stream . defaultReadObject () ; this . backgroundPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . backgroundPaint , stream ) ; }
if ( ! PaintUtilities . equal ( this . backgroundPaint , that.backgroundPaint ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . data , that.data ) ) { return false ; }
return ObjectUtilities . equal ( this . data , that.data ) ;
final Shape shape = ShapeUtilities . createTranslatedShape ( getItemShape ( seriesIndex , i ++ ) , x , y ) ;
{ this . seriesFilled . setBoolean ( series , BooleanUtilities . valueOf ( filled ) ) ; }
if ( ! ObjectUtilities . equal ( this . y , that.y ) ) { return false ; }
{ setSeriesShapesFilled ( series , BooleanUtilities . valueOf ( filled ) ) ; }
{ setSeriesShapesVisible ( series , BooleanUtilities . valueOf ( visible ) ) ; }
{ setShapesVisible ( BooleanUtilities . valueOf ( visible ) ) ; }
{ setSeriesLinesVisible ( series , BooleanUtilities . valueOf ( visible ) ) ; }
{ setLinesVisible ( BooleanUtilities . valueOf ( visible ) ) ; }
clone.seriesList = ( List ) ObjectUtilities . deepClone ( this . seriesList ) ;
{ MatrixSeriesCollection c = ( MatrixSeriesCollection ) obj ; return ObjectUtilities . equal ( this . seriesList , c.seriesList ) ; }
if ( ! PaintUtilities . equal ( p1 , p2 ) ) { return false ; }
Paint paint = SerialUtilities . readPaint ( in ) ;
Shape rotatedBox = ShapeUtilities . rotateShape ( box , position . getAngle () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Shape rotatedBox = ShapeUtilities . rotateShape ( box , position . getAngle () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
if ( ! ObjectUtilities . equal ( this . arrowStroke , that.arrowStroke ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . formatter , that.formatter ) ) { return false ; }
clone.rangeAxis = ( ValueAxis ) ObjectUtilities . clone ( this . rangeAxis ) ;
if ( ! PaintUtilities . equal ( this . groupPaint , that.groupPaint ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . indexParamName , that.indexParamName ) ) { return false ; }
clone.tasks = ( List ) ObjectUtilities . deepClone ( this . tasks ) ;
if ( ! ObjectUtilities . equal ( this . formatter , that.formatter ) ) { return false ; }
{ addEntity ( info , ShapeUtilities . createLineRegion ( line , NUMBER_CONSTANT ) , rendererIndex , toolTip , url ) ; }
clone.legendLine = ShapeUtilities . clone ( this . legendLine ) ;
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
clone.legendItemShape = ShapeUtilities . clone ( this . legendItemShape ) ;
{ stream . defaultReadObject () ; this . wallPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . wallPaint , stream ) ; }
if ( ! PaintUtilities . equal ( this . wallPaint , that.wallPaint ) ) { return false ; }
result.subplots = ( List ) ObjectUtilities . deepClone ( this . subplots ) ;
if ( ! ObjectUtilities . equal ( this . subplots , that.subplots ) ) { return false ; }
if ( ! ObjectUtilities . equal ( getDescription () , that . getDescription () ) ) { return false ; }
result.subplots = ( List ) ObjectUtilities . deepClone ( this . subplots ) ;
if ( ! ObjectUtilities . equal ( this . subplots , that.subplots ) ) { return false ; }
{ stream . defaultReadObject () ; this . sublabelPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . sublabelPaint , stream ) ; }
if ( ! PaintUtilities . equal ( this . sublabelPaint , that.sublabelPaint ) ) { return false ; }
{ stream . defaultReadObject () ; this . chartArea = ( Rectangle2D ) SerialUtilities . readShape ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . chartArea , stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendArea , stream ) ; }
{ stream . defaultReadObject () ; this . legendArea = SerialUtilities . readShape ( stream ) ; }
clone.legendArea = ShapeUtilities . clone ( this . legendArea ) ;
if ( ! ShapeUtilities . equal ( this . legendArea , that.legendArea ) ) { return false ; }
{ stream . defaultReadObject () ; this . defaultPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . defaultPaint , stream ) ; }
if ( ! PaintUtilities . equal ( this . defaultPaint , that.defaultPaint ) ) { return false ; }
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . data , that.data ) ) { return false ; }
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
if ( ! ObjectUtilities . equal ( this . data , that.data ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . title , that.title ) ) { return false ; }
{ result . put ( key , ObjectUtilities . clone ( value ) ) ; }
{ result . add ( ObjectUtilities . clone ( obj ) ) ; }
if ( ! ObjectUtilities . equal ( this . arrowStroke , that.arrowStroke ) ) { return false ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . wallPaint , stream ) ; }
{ stream . defaultReadObject () ; this . wallPaint = SerialUtilities . readPaint ( stream ) ; }
if ( ! PaintUtilities . equal ( this . wallPaint , that.wallPaint ) ) { return false ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendBar , stream ) ; }
{ stream . defaultReadObject () ; this . legendBar = SerialUtilities . readShape ( stream ) ; }
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
return ObjectUtilities . equal ( this . data , that.data ) ;
{ stream . defaultReadObject () ; setArea ( SerialUtilities . readShape ( stream ) ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( getArea () , stream ) ; }
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
return ObjectUtilities . equal ( this . data , that.data ) ;
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendShape , stream ) ; }
{ stream . defaultReadObject () ; this . legendShape = SerialUtilities . readShape ( stream ) ; }
if ( ! ShapeUtilities . equal ( this . legendShape , that.legendShape ) ) { return false ; }
if ( ! ObjectUtilities . equal ( this . gradientPaintTransformer , that.gradientPaintTransformer ) ) { return false ; }
{ new Integer ( series ) , faces [ NUMBER_CONSTANT ] . getBounds2D () , BooleanUtilities . valueOf ( v0 < getBase () ) }
{ new Integer ( series ) , faces [ NUMBER_CONSTANT ] . getBounds2D () , BooleanUtilities . valueOf ( v0 < getBase () ) }
if ( ! ObjectUtilities . equal ( this . data , that.data ) ) { return false ; }
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
return ObjectUtilities . equal ( this . data , that.data ) ;
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
if ( ! ObjectUtilities . equal ( this . data , that.data ) ) { return false ; }
{ stream . defaultReadObject () ; setArea ( SerialUtilities . readShape ( stream ) ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( getArea () , stream ) ; }
result.subplots = ( List ) ObjectUtilities . deepClone ( this . subplots ) ;
if ( ! ObjectUtilities . equal ( this . subplots , that.subplots ) ) { return false ; }
Stroke stroke = SerialUtilities . readStroke ( stream ) ;
SerialUtilities . writeStroke ( stroke , stream ) ;
if ( ! ObjectUtilities . equal ( s1 , s2 ) ) { return false ; }
{ stream . defaultReadObject () ; this . area = SerialUtilities . readShape ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . area , stream ) ; }
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
return ObjectUtilities . equal ( this . data , that.data ) ;
if ( ! ObjectUtilities . equal ( this . obj , that.obj ) ) { return false ; }
result = NUMBER_CONSTANT * result + ObjectUtilities . hashCode ( this . fillPaint ) ;
if ( ! ObjectUtilities . equal ( this . date , that.date ) ) { return false ; }
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
result.subplots = ( List ) ObjectUtilities . deepClone ( this . subplots ) ;
if ( ! ObjectUtilities . equal ( this . subplots , that.subplots ) ) { return false ; }
{ stream . defaultReadObject () ; this . artifactPaint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . artifactPaint , stream ) ; }
if ( ! PaintUtilities . equal ( this . artifactPaint , that.artifactPaint ) ) { return false ; }
{ stream . defaultWriteObject () ; SerialUtilities . writeShape ( this . legendLine , stream ) ; }
{ stream . defaultReadObject () ; this . legendLine = SerialUtilities . readShape ( stream ) ; }
if ( ! ShapeUtilities . equal ( this . legendLine , that.legendLine ) ) { return false ; }
if ( this . legendLine != null ) { clone.legendLine = ShapeUtilities . clone ( this . legendLine ) ; }
clone.data = ( List ) ObjectUtilities . deepClone ( this . data ) ;
return ObjectUtilities . equal ( this . data , that.data ) ;
if ( ! ObjectUtilities . equal ( this . key , that.key ) ) { return false ; }
{ stream . defaultReadObject () ; this . paint = SerialUtilities . readPaint ( stream ) ; }
{ stream . defaultWriteObject () ; SerialUtilities . writePaint ( this . paint , stream ) ; }
if ( ! PaintUtilities . equal ( this . paint , that.paint ) ) { return false ; }
TimeSeries series1 = new TimeSeries ( STRING_CONSTANT , Day . class ) ;
TimeSeries series = new TimeSeries ( STRING_CONSTANT , Day . class ) ;
TimeSeries s1 = new TimeSeries ( STRING_CONSTANT , Year . class ) ;
Week w = new Week ( gc . getTime () , zone ) ;
boolean interval = includeInterval || this . domainIsPointsInTime ;
{ this ( label , TimeZone . getDefault () ) ; }
DateTickUnit a1 = new DateTickUnit ( DateTickUnit.DAY , NUMBER_CONSTANT ) ;
axis . setTickUnit ( new DateTickUnit ( DateTickUnit.MONTH , NUMBER_CONSTANT , sdf ) ) ;
{ this ( time , TimeZone . getDefault () ) ; }
{ this ( time , TimeZone . getDefault () ) ; }
{ this ( time , TimeZone . getDefault () ) ; }
{ setMaxItemWidth ( percent ) ; }
public double getMaximumItemWidth () { return getMaxItemWidth () ; }
setBaseToolTipGenerator ( toolTipGenerator ) ;
r1 . setBaseItemLabelGenerator ( new StandardCategoryItemLabelGenerator () ) ;
setBaseToolTipGenerator ( labelGenerator ) ;
r1 . setBasePaint ( Color.red ) ;
r1 . setBaseItemLabelGenerator ( new StandardCategoryItemLabelGenerator () ) ;
if ( result == null ) { result = this . baseLegendTextPaint ; }
if ( result == null ) { result = this . baseLegendTextFont ; }
if ( result == null ) { result = this . baseLegendShape ; }
if ( position == null ) { position = this . baseNegativeItemLabelPosition ; }
if ( position == null ) { position = this . basePositiveItemLabelPosition ; }
if ( result == null ) { result = this . baseItemLabelPaint ; }
if ( result == null ) { result = this . baseShape ; }
if ( result == null ) { result = this . baseOutlineStroke ; }
if ( result == null ) { result = this . baseStroke ; }
if ( seriesOutlinePaint == null ) { seriesOutlinePaint = this . baseOutlinePaint ; }
if ( seriesFillPaint == null ) { seriesFillPaint = this . baseFillPaint ; }
if ( generator == null ) { generator = this . baseToolTipGenerator ; }
if ( generator == null ) { generator = this . baseItemLabelGenerator ; }
setBaseToolTipGenerator ( toolTipGenerator ) ;
setBaseToolTipGenerator ( toolTipGenerator ) ;
if ( tooltips ) { renderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator () ) ; }
renderer . setBaseToolTipGenerator ( new BoxAndWhiskerToolTipGenerator () ) ;
if ( tooltips ) { renderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator () ) ; }
if ( tooltips ) { renderer . setBaseToolTipGenerator ( new StandardXYZToolTipGenerator () ) ; }
renderer . setBaseToolTipGenerator ( new HighLowItemLabelGenerator () ) ;
renderer . setBaseToolTipGenerator ( new HighLowItemLabelGenerator () ) ;
renderer . setBaseToolTipGenerator ( toolTipGenerator ) ;
if ( tooltips ) { renderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator () ) ; }
renderer . setBaseToolTipGenerator ( tt ) ;
renderer . setBaseToolTipGenerator ( toolTipGenerator ) ;
setBaseToolTipGenerator ( new BoxAndWhiskerXYToolTipGenerator () ) ;
setBaseLegendShape ( this . legendLine ) ;
renderer1 . setBaseToolTipGenerator ( StandardXYToolTipGenerator . getTimeSeriesInstance () ) ;
setBaseToolTipGenerator ( toolTipGenerator ) ;
if ( generator == null ) { generator = this . baseItemURLGenerator ; }
if ( result == null ) { result = this . baseToolTipGenerator ; }
if ( generator == null ) { generator = this . baseItemLabelGenerator ; }
assertEquals ( Color.GRAY , r . getBaseOutlinePaint () ) ;
assertEquals ( Color.WHITE , r . getBaseFillPaint () ) ;
assertEquals ( Color.BLUE , r . getBasePaint () ) ;
if ( ! dataAreaHotspot . isEmpty () ) { addEntity ( entities , dataAreaHotspot , dataset , series , item , transX1 , transY1 ) ; }
if ( entities != null ) { addEntity ( entities , hotspot , dataset , series , item , transX , transY ) ; }
r1 . setErrorPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white ) ) ;
r1 . setErrorPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white ) ) ;
{ this ( new RectangleInsets ( top , left , bottom , right ) , Color.black ) ; }
chart . setBackgroundPaint ( Color.white ) ;
this . noDataMessagePaint = Color.black ;
public DialBackground () { this ( Color.white ) ; }
m1 = new CategoryMarker ( STRING_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow ) , new BasicStroke ( NUMBER_CONSTANT ) )
m1 = new CategoryMarker ( STRING_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow ) , new BasicStroke ( NUMBER_CONSTANT ) )
renderer . setSeriesPaint ( NUMBER_CONSTANT , Color.black ) ;
public StandardDialRange () { this ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white ) ; }
g2 . setPaint ( Color.gray ) ;
p1 . setSubrangePaint ( NUMBER_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ) ;
baseline . setPaint ( Color.black ) ;
{ this ( label , Color.black ) ; }
this . arrowPaint = Color.black ;
{ this ( x0 , y0 , x1 , y1 , new BasicStroke ( NUMBER_CONSTANT ) , Color.black ) ; }
{ this ( x1 , y1 , x2 , y2 , new BasicStroke ( NUMBER_CONSTANT ) , Color.black ) ; }
this . arrowPaint = Color.black ;
a1 . setAxisLinePaint ( Color.red ) ;
this . outlinePaint = Color.black ;
{ this ( shape , new BasicStroke ( NUMBER_CONSTANT ) , Color.black ) ; }
{ this ( polygon , new BasicStroke ( NUMBER_CONSTANT ) , Color.black ) ; }
g2 . setPaint ( Color.black ) ;
this . sublabelPaint = Color.black ;
this . labelPaint = Color.black ;
public Crosshair ( double value ) { this ( value , Color.black , new BasicStroke ( NUMBER_CONSTANT ) ) ; }
LegendGraphic g1 = new LegendGraphic ( r , Color.black ) ;
LegendGraphic g1 = new LegendGraphic ( r , Color.black ) ;
g2 . setColor ( Color.black ) ;
this . defaultSectionPaint = Color.gray ;
this . paint = Color.black ;
g2 . setPaint ( Color.blue ) ;
{ super ( datasetIndex ) ; this . paint = Color.red ; this . stroke = new BasicStroke ( NUMBER_CONSTANT , BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
this . axisLinePaint = Color.black ;
this . shadowPaint = Color.gray ;
this . artifactPaint = Color.black ;
final ObjectInputStream stream
final ObjectOutputStream stream
final Graphics2D g2
final TextBlock block
final double offset
final double offset
final Paint paint
final Paint paint
final RectangleInsets gap
final Stroke stroke
final Paint paint
final ObjectInputStream stream
final ObjectOutputStream stream
this . boxPaint = Color.green ;
final Graphics2D g2
TextUtilities . drawAlignedString ( valueStr , g2 , x , y , TextAnchor.TOP_CENTER ) ;
Rectangle2D tickLabelBounds = TextUtilities . getTextBounds ( tickLabel , g2 , fm ) ;
{ FontMetrics fm = g2 . getFontMetrics ( getLabelFont () ) ; bounds = TextUtilities . getTextBounds ( axisLabel , g2 , fm ) ; }
Rectangle2D bounds = TextUtilities . getTextBounds ( getText () , g2 , fm ) ;
Rectangle2D bounds = TextUtilities . getTextBounds ( getText () , g2 , fm ) ;
Rectangle2D r = TextUtilities . getTextBounds ( text , g2 , fm ) ;
if ( tick . getText () != null ) { labelBounds = TextUtilities . getTextBounds ( tick . getText () , g2 , fm ) ; }
if ( tick . getText () != null ) { labelBounds = TextUtilities . getTextBounds ( tick . getText () , g2 , fm ) ; }
this . label = TextUtilities . createTextBlock ( this . text , font , this . paint ) ;
this . label = TextUtilities . createTextBlock ( text , font , this . paint ) ;
Rectangle2D r = TextUtilities . getTextBounds ( this . internalMarkerCycleBoundTick . getText () , g2 , fm ) ;
Rectangle2D bounds = TextUtilities . getTextBounds ( this . text , g2 , fm ) ;
Rectangle2D bounds = TextUtilities . getTextBounds ( tickLabel , g2 , g2 . getFontMetrics () ) ;
Rectangle2D bounds = TextUtilities . getTextBounds ( tickLabel , g2 , g2 . getFontMetrics () ) ;
TextUtilities . drawRotatedString ( label , g2 , xx , yy , TextAnchor.CENTER , NUMBER_CONSTANT , TextAnchor.CENTER ) ;
Rectangle2D bounds = TextUtilities . getTextBounds ( label , g2 , fm ) ;
Rectangle2D bounds = TextUtils . getTextBounds ( text , g2 , fm ) ;
public DefaultShadowGenerator () { this ( NUMBER_CONSTANT , Color.black , NUMBER_CONSTANT , NUMBER_CONSTANT , - Math.PI / NUMBER_CONSTANT ) ; }
final Paint paint
renderer . setSeriesPaint ( NUMBER_CONSTANT , Color.black ) ;
c = JColorChooser . showDialog ( this , localizationResources . getString ( STRING_CONSTANT ) , Color.blue ) ;
c = JColorChooser . showDialog ( this , localizationResources . getString ( STRING_CONSTANT ) , Color.blue ) ;
f1 . setBackgroundPaint ( Color.blue ) ;
r1 . setDefaultPaint ( Color.red ) ;
a1 . setPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ) ;
t1 . setBackgroundPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ) ;
t1 . setBackgroundPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow ) ) ;
p1 . setAggregatedItemsPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red ) ) ;
new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow )
GradientPaint gp = new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ;
c = JColorChooser . showDialog ( this , localizationResources . getString ( STRING_CONSTANT ) , Color.blue ) ;
this . gridPaintSample = new PaintSample ( Color.blue ) ;
c = JColorChooser . showDialog ( this , localizationResources . getString ( STRING_CONSTANT ) , Color.blue ) ;
XYDifferenceRenderer r1 = new XYDifferenceRenderer ( Color.red , Color.blue , false ) ;
XYDifferenceRenderer r1 = new XYDifferenceRenderer ( Color.red , Color.blue , false ) ;
GradientPaint gp = new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red ) ;
GradientPaint gp = new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red ) ;
a1 . setSubLabelPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ) ;
Color defaultColor = ( p instanceof Color ? ( Color ) p : Color.blue ) ;
a1 . setTickLabelPaint ( STRING_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white ) ) ;
r1 . setShapePaint ( Color.red ) ;
this . downPaint = Color.red ;
t1 . setBackgroundPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow ) ) ;
this . paint = Color.red ;
c1 = new Crosshair ( NUMBER_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.BLUE ) , new BasicStroke ( NUMBER_CONSTANT ) )
c1 = new Crosshair ( NUMBER_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.BLUE ) , new BasicStroke ( NUMBER_CONSTANT ) )
b1 . setPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.green ) ) ;
b1 . setPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.green ) ) ;
a1 . setOutlinePaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ) ;
XYLineAnnotation a1 = new XYLineAnnotation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , stroke , Color.blue ) ;
XYLineAnnotation a1 = new XYLineAnnotation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , stroke , Color.blue ) ;
XYLineAnnotation a1 = new XYLineAnnotation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , stroke , Color.blue ) ;
o1 . addRangeCrosshair ( new Crosshair ( NUMBER_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) , new BasicStroke ( NUMBER_CONSTANT ) ) )
o1 . addRangeCrosshair ( new Crosshair ( NUMBER_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) , new BasicStroke ( NUMBER_CONSTANT ) ) )
new BlockBorder ( new RectangleInsets ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow ) )
GradientPaint gp = new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ;
GradientPaint gp = new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.blue ) ;
r1 . setSeriesPaint ( NUMBER_CONSTANT , new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.yellow ) ) ;
{ this ( label , range , Color.yellow , new BasicStroke ( NUMBER_CONSTANT ) , null ) ; }
g2 . setPaint ( Color.blue ) ;
c = JColorChooser . showDialog ( this , localizationResources . getString ( STRING_CONSTANT ) , Color.blue ) ;
s1 . setMajorTickPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white ) ) ;
s1 . setMajorTickPaint ( new GradientPaint ( NUMBER_CONSTANT , NUMBER_CONSTANT , Color.red , NUMBER_CONSTANT , NUMBER_CONSTANT , Color.white ) ) ;
this . incompletePaint = Color.red ;
this . zoomOutlinePaint = Color.blue ;
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . paint ) ;
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . paint ) ;
@ Override public int hashCode () { return HashUtilities . hashCodeForDoubleArray ( this . coefficients ) ; }
{ int result = NUMBER_CONSTANT ; result = HashUtilities . hashCode ( result , this . radius ) ; return result ; }
{ return HashUtilities . hashCode ( super . hashCode () , this . stepPoint ) ; }
{ int result = NUMBER_CONSTANT ; result = HashUtilities . hashCode ( result , this . visible ) ; return result ; }
result = result * NUMBER_CONSTANT + HashUtilities . hashCodeForPaint ( this . arrowPaint ) ;
{ int result = NUMBER_CONSTANT ; result = HashUtilities . hashCode ( result , this . formatPattern ) ; return result ; }
{ int result = NUMBER_CONSTANT ; result = HashUtilities . hashCode ( result , this . formatPattern ) ; return result ; }
{ int result = super . hashCode () ; result = HashUtilities . hashCode ( result , this . isArrowAtTop ) ; return result ; }
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . paint ) ;
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . paint ) ;
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . paint ) ;
{ int result = super . hashCode () ; result = HashUtilities . hashCode ( result , this . key ) ; return result ; }
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . arrowPaint ) ;
{ int hash = super . hashCode () ; hash = HashUtilities . hashCode ( hash , this . errorIndicatorPaint ) ; return hash ; }
result = NUMBER_CONSTANT * result + HashUtilities . hashCodeForPaint ( this . paint ) ;
ChartUtilities . saveChartAsJPEG ( tempFile , chart , width , height , info ) ;
ChartUtilities . saveChartAsPNG ( tempFile , chart , width , height , info ) ;
{ return STRING_CONSTANT + ImageMapUtilities . javascriptEscape ( toolTipText ) + STRING_CONSTANT ; }
{ return ImageMapUtilities . getImageMap ( name , info , toolTipTagFragmentGenerator , urlTagFragmentGenerator ) ; }
{ writer . println ( ImageMapUtilities . getImageMap ( name , info , toolTipTagFragmentGenerator , urlTagFragmentGenerator ) ) ; }
ImageMapUtilities . writeImageMap ( writer , name , info , toolTipTagFragmentGenerator , new StandardURLTagFragmentGenerator () ) ;
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Line2D extendedSeparator = LineUtilities . extendLine ( separator , this . innerSeparatorExtension , this . outerSeparatorExtension ) ;
visible = LineUtilities . clipLine ( state.workingLine , dataArea ) ;
boolean visible = LineUtilities . clipLine ( line , dataArea ) ;
boolean visible = LineUtilities . clipLine ( line , dataArea ) ;
if ( this . renderAsPercentages ) { return new Range ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } else { return DatasetUtilities . findStackedRangeBounds ( dataset , getBase () ) ; }
if ( this . renderAsPercentages ) { return new Range ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } else { return DatasetUtilities . findStackedRangeBounds ( dataset ) ; }
! DatasetUtilities . isEmptyOrNull ( dataset )
Range range = DatasetUtilities . findDomainBounds ( this . dataset , false ) ;
CategoryDataset dataset = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
CategoryDataset newData = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
{ total = DatasetUtilities . calculateStackTotal ( ( TableXYDataset ) dataset , item ) ; value = value / total ; }
if ( this . renderAsPercentages ) { return new Range ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } else { return DatasetUtilities . findStackedRangeBounds ( ( TableXYDataset ) dataset ) ; }
{ if ( dataset != null ) { return DatasetUtilities . findRangeBounds ( dataset , true ) ; } else { return null ; } }
{ if ( includeInterval ) { return this . intervalDelegate . getDomainBounds ( includeInterval ) ; } else { return DatasetUtilities . iterateDomainBounds ( this , includeInterval ) ; } }
CategoryDataset dataset = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
CategoryDataset newData = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
boolean hasData = ! DatasetUtilities . isEmptyOrNull ( currentDataset ) ;
Range r = DatasetUtilities . findRangeBounds ( d , true ) ;
CategoryDataset dataset = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
CategoryDataset newData = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
{ final XYDataset dataset = plot . getDataset ( i ) ; if ( ! DatasetUtilities . isEmptyOrNull ( dataset ) ) { return false ; } }
! DatasetUtilities . isEmptyOrNull ( this . dataset )
double total = DatasetUtilities . calculatePieDatasetTotal ( dataset ) ;
double totalValue = DatasetUtilities . calculatePieDatasetTotal ( this . dataset ) ;
! DatasetUtilities . isEmptyOrNull ( this . dataset )
if ( this . dataset != null ) { state . setTotal ( DatasetUtilities . calculatePieDatasetTotal ( plot . getDataset () ) ) ; }
{ if ( dataset != null ) { return DatasetUtilities . findZBounds ( dataset ) ; } else { return null ; } }
Range r = DatasetUtilities . findRangeBounds ( dataset , false ) ;
Range r = DatasetUtilities . findDomainBounds ( dataset , false ) ;
{ if ( dataset != null ) { return DatasetUtilities . findStackedRangeBounds ( ( TableXYDataset ) dataset ) ; } else { return null ; } }
Range r = DatasetUtilities . findStackedRangeBounds ( dataset , this . seriesToGroupMap ) ;
if ( d != null ) { result = Range . combine ( result , DatasetUtilities . findRangeBounds ( d ) ) ; }
! DatasetUtilities . isEmptyOrNull ( dataset )
CategoryDataset dataset = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
CategoryDataset newData = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
Range r = DatasetUtilities . findRangeBounds ( dataset , false ) ;
Range r = DatasetUtilities . findDomainBounds ( dataset , false ) ;
{ if ( includeInterval ) { return this . intervalDelegate . getDomainBounds ( includeInterval ) ; } else { return DatasetUtilities . iterateDomainBounds ( this , includeInterval ) ; } }
CategoryDataset dataset = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
CategoryDataset newData = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
CategoryDataset dataset = DatasetUtilities . createCategoryDataset ( STRING_CONSTANT , STRING_CONSTANT , data ) ;
{ total = DataUtilities . calculateColumnTotal ( dataset , column , state . getVisibleSeriesArray () ) ; value = value / total ; }
{ this ( DataUtilities . createNumberArray2D ( starts ) , DataUtilities . createNumberArray2D ( ends ) ) ; }
clone.zValues = DataUtilities . clone ( this . zValues ) ;
if ( ! DataUtilities . equal ( this . zValues , that.zValues ) ) { return false ; }
double total = DataUtilities . calculateColumnTotal ( dataset , column ) ;
if ( this . renderAsPercentages ) { total = DataUtilities . calculateColumnTotal ( dataset , index , validRows ) ; }
OHLCItem item2 = ( OHLCItem ) TestUtilities . serialised ( item1 ) ;
XYLineAnnotation a2 = ( XYLineAnnotation ) TestUtilities . serialised ( a1 ) ;
Hour h2 = ( Hour ) TestUtilities . serialised ( h1 ) ;
CustomXYToolTipGenerator g2 = ( CustomXYToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
BoxAndWhiskerToolTipGenerator g2 = ( BoxAndWhiskerToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
StandardCategoryToolTipGenerator g2 = ( StandardCategoryToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
BarRenderer r2 = ( BarRenderer ) TestUtilities . serialised ( r1 ) ;
XYTaskDataset d2 = ( XYTaskDataset ) TestUtilities . serialised ( d1 ) ;
ClusteredXYBarRenderer r2 = ( ClusteredXYBarRenderer ) TestUtilities . serialised ( r1 ) ;
YInterval i2 = ( YInterval ) TestUtilities . serialised ( i1 ) ;
XYBubbleRenderer r2 = ( XYBubbleRenderer ) TestUtilities . serialised ( r1 ) ;
WindItemRenderer r2 = ( WindItemRenderer ) TestUtilities . serialised ( r1 ) ;
LineNeedle n2 = ( LineNeedle ) TestUtilities . serialised ( n1 ) ;
SpiderWebPlot p2 = ( SpiderWebPlot ) TestUtilities . serialised ( p1 ) ;
assertFalse ( TestUtilities . containsInstanceOf ( ec . getEntities () , XYItemEntity . class ) ) ;
StandardXYItemRenderer r2 = ( StandardXYItemRenderer ) TestUtilities . serialised ( r1 ) ;
DateTickMarkPosition p2 = ( DateTickMarkPosition ) TestUtilities . serialised ( p1 ) ;
DialValueIndicator i2 = ( DialValueIndicator ) TestUtilities . serialised ( i1 ) ;
XIntervalSeriesCollection c2 = ( XIntervalSeriesCollection ) TestUtilities . serialised ( c1 ) ;
CategoryAxis a2 = ( CategoryAxis ) TestUtilities . serialised ( a1 ) ;
PiePlot p2 = ( PiePlot ) TestUtilities . serialised ( p1 ) ;
NumberTickUnit t2 = ( NumberTickUnit ) TestUtilities . serialised ( t1 ) ;
XYDrawableAnnotation a2 = ( XYDrawableAnnotation ) TestUtilities . serialised ( a1 ) ;
IntervalCategoryItemLabelGenerator g2 = ( IntervalCategoryItemLabelGenerator ) TestUtilities . serialised ( g1 ) ;
ItemLabelAnchor a2 = ( ItemLabelAnchor ) TestUtilities . serialised ( a1 ) ;
MeterPlot p2 = ( MeterPlot ) TestUtilities . serialised ( p1 ) ;
MeterPlot p2 = ( MeterPlot ) TestUtilities . serialised ( p1 ) ;
TimePeriodValues s2 = ( TimePeriodValues ) TestUtilities . serialised ( s1 ) ;
CategoryToPieDataset d2 = ( CategoryToPieDataset ) TestUtilities . serialised ( d1 ) ;
Vector v2 = ( Vector ) TestUtilities . serialised ( v1 ) ;
WaterfallBarRenderer r2 = ( WaterfallBarRenderer ) TestUtilities . serialised ( r1 ) ;
XYIntervalSeries s2 = ( XYIntervalSeries ) TestUtilities . serialised ( s1 ) ;
XYInterval i2 = ( XYInterval ) TestUtilities . serialised ( i1 ) ;
HighLowRenderer r2 = ( HighLowRenderer ) TestUtilities . serialised ( r1 ) ;
CombinedDomainCategoryPlot plot2 = ( CombinedDomainCategoryPlot ) TestUtilities . serialised ( plot1 ) ;
LabelBlock b2 = ( LabelBlock ) TestUtilities . serialised ( b1 ) ;
DeviationRenderer r2 = ( DeviationRenderer ) TestUtilities . serialised ( r1 ) ;
PowerFunction2D f2 = ( PowerFunction2D ) TestUtilities . serialised ( f1 ) ;
StandardTickUnitSource t2 = ( StandardTickUnitSource ) TestUtilities . serialised ( t1 ) ;
Minute m2 = ( Minute ) TestUtilities . serialised ( m1 ) ;
PieSectionEntity e2 = ( PieSectionEntity ) TestUtilities . serialised ( e1 ) ;
CombinedRangeCategoryPlot plot2 = ( CombinedRangeCategoryPlot ) TestUtilities . serialised ( plot1 ) ;
StandardXYZToolTipGenerator g2 = ( StandardXYZToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
ValueMarker m2 = ( ValueMarker ) TestUtilities . serialised ( m1 ) ;
ValueMarker m2 = ( ValueMarker ) TestUtilities . serialised ( m1 ) ;
CategoryPlot p2 = ( CategoryPlot ) TestUtilities . serialised ( p1 ) ;
JFreeChart chart2 = ( JFreeChart ) TestUtilities . serialised ( chart ) ;
JFreeChart chart2 = ( JFreeChart ) TestUtilities . serialised ( chart ) ;
CategoryPlot p2 = ( CategoryPlot ) TestUtilities . serialised ( p1 ) ;
CategoryPlot p2 = ( CategoryPlot ) TestUtilities . serialised ( p1 ) ;
DefaultKeyedValues v2 = ( DefaultKeyedValues ) TestUtilities . serialised ( v1 ) ;
LayeredBarRenderer r2 = ( LayeredBarRenderer ) TestUtilities . serialised ( r1 ) ;
BoxAndWhiskerXYToolTipGenerator g2 = ( BoxAndWhiskerXYToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
TimeTableXYDataset d2 = ( TimeTableXYDataset ) TestUtilities . serialised ( d1 ) ;
Quarter q2 = ( Quarter ) TestUtilities . serialised ( q1 ) ;
JFreeChart c2 = ( JFreeChart ) TestUtilities . serialised ( c1 ) ;
JFreeChart c2 = ( JFreeChart ) TestUtilities . serialised ( c1 ) ;
JFreeChart c2 = ( JFreeChart ) TestUtilities . serialised ( c1 ) ;
JFreeChart c2 = ( JFreeChart ) TestUtilities . serialised ( c1 ) ;
PlumNeedle n2 = ( PlumNeedle ) TestUtilities . serialised ( n1 ) ;
SlidingCategoryDataset d2 = ( SlidingCategoryDataset ) TestUtilities . serialised ( d1 ) ;
GanttRenderer r2 = ( GanttRenderer ) TestUtilities . serialised ( r1 ) ;
LongNeedle n2 = ( LongNeedle ) TestUtilities . serialised ( n1 ) ;
StackedXYAreaRenderer r2 = ( StackedXYAreaRenderer ) TestUtilities . serialised ( r1 ) ;
BorderArrangement b2 = ( BorderArrangement ) TestUtilities . serialised ( b1 ) ;
StandardDialFrame f2 = ( StandardDialFrame ) TestUtilities . serialised ( f1 ) ;
ItemLabelPosition p2 = ( ItemLabelPosition ) TestUtilities . serialised ( p1 ) ;
EmptyBlock b2 = ( EmptyBlock ) TestUtilities . serialised ( b1 ) ;
CategoryAnchor a2 = ( CategoryAnchor ) TestUtilities . serialised ( a1 ) ;
XYShapeRenderer r2 = ( XYShapeRenderer ) TestUtilities . serialised ( r1 ) ;
XYBarDataset bd2 = ( XYBarDataset ) TestUtilities . serialised ( bd1 ) ;
VectorRenderer r2 = ( VectorRenderer ) TestUtilities . serialised ( r1 ) ;
XYBarRenderer r2 = ( XYBarRenderer ) TestUtilities . serialised ( r1 ) ;
XYBarRenderer r2 = ( XYBarRenderer ) TestUtilities . serialised ( r1 ) ;
CategoryLabelEntity e2 = ( CategoryLabelEntity ) TestUtilities . serialised ( e1 ) ;
PlotOrientation orientation2 = ( PlotOrientation ) TestUtilities . serialised ( orientation1 ) ;
CategoryLabelWidthType w2 = ( CategoryLabelWidthType ) TestUtilities . serialised ( w1 ) ;
XYIntervalSeriesCollection c2 = ( XYIntervalSeriesCollection ) TestUtilities . serialised ( c1 ) ;
StandardXYURLGenerator g2 = ( StandardXYURLGenerator ) TestUtilities . serialised ( g1 ) ;
XYIntervalDataItem item2 = ( XYIntervalDataItem ) TestUtilities . serialised ( item1 ) ;
CategoryItemEntity e2 = ( CategoryItemEntity ) TestUtilities . serialised ( e1 ) ;
PolynomialFunction2D f2 = ( PolynomialFunction2D ) TestUtilities . serialised ( f1 ) ;
StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) TestUtilities . serialised ( r1 ) ;
DefaultPieDataset d2 = ( DefaultPieDataset ) TestUtilities . serialised ( d1 ) ;
DateTick t2 = ( DateTick ) TestUtilities . serialised ( t1 ) ;
ShipNeedle n2 = ( ShipNeedle ) TestUtilities . serialised ( n1 ) ;
XYDataItem i2 = ( XYDataItem ) TestUtilities . serialised ( i1 ) ;
GradientBarPainter p2 = ( GradientBarPainter ) TestUtilities . serialised ( p1 ) ;
StandardDialRange r2 = ( StandardDialRange ) TestUtilities . serialised ( r1 ) ;
StrokeMap m2 = ( StrokeMap ) TestUtilities . serialised ( m1 ) ;
StrokeMap m2 = ( StrokeMap ) TestUtilities . serialised ( m1 ) ;
LogFormat f2 = ( LogFormat ) TestUtilities . serialised ( f1 ) ;
StackedBarRenderer r2 = ( StackedBarRenderer ) TestUtilities . serialised ( r1 ) ;
OHLCSeries s2 = ( OHLCSeries ) TestUtilities . serialised ( s1 ) ;
DefaultIntervalCategoryDataset d2 = ( DefaultIntervalCategoryDataset ) TestUtilities . serialised ( d1 ) ;
MyComparableObjectSeries s2 = ( MyComparableObjectSeries ) TestUtilities . serialised ( s1 ) ;
VectorSeriesCollection c2 = ( VectorSeriesCollection ) TestUtilities . serialised ( c1 ) ;
IntervalBarRenderer r2 = ( IntervalBarRenderer ) TestUtilities . serialised ( r1 ) ;
KeyedValuesDataset d2 = ( KeyedValuesDataset ) TestUtilities . serialised ( d1 ) ;
DialCap c2 = ( DialCap ) TestUtilities . serialised ( c1 ) ;
PointerNeedle n2 = ( PointerNeedle ) TestUtilities . serialised ( n1 ) ;
DateAxis a2 = ( DateAxis ) TestUtilities . serialised ( a1 ) ;
IntervalCategoryToolTipGenerator g2 = ( IntervalCategoryToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
XYItemEntity e2 = ( XYItemEntity ) TestUtilities . serialised ( e1 ) ;
FixedMillisecond m2 = ( FixedMillisecond ) TestUtilities . serialised ( m1 ) ;
DefaultOHLCDataset d2 = ( DefaultOHLCDataset ) TestUtilities . serialised ( d1 ) ;
SymbolicXYItemLabelGenerator g2 = ( SymbolicXYItemLabelGenerator ) TestUtilities . serialised ( g1 ) ;
LevelRenderer r2 = ( LevelRenderer ) TestUtilities . serialised ( r1 ) ;
PeriodAxis a2 = ( PeriodAxis ) TestUtilities . serialised ( a1 ) ;
DatasetGroup g2 = ( DatasetGroup ) TestUtilities . serialised ( g1 ) ;
Axis a2 = ( Axis ) TestUtilities . serialised ( a1 ) ;
VectorDataItem v2 = ( VectorDataItem ) TestUtilities . serialised ( v1 ) ;
StandardCategoryItemLabelGenerator g2 = ( StandardCategoryItemLabelGenerator ) TestUtilities . serialised ( g1 ) ;
KeyToGroupMap m2 = ( KeyToGroupMap ) TestUtilities . serialised ( m1 ) ;
MatrixSeriesCollection c2 = ( MatrixSeriesCollection ) TestUtilities . serialised ( c1 ) ;
Year y2 = ( Year ) TestUtilities . serialised ( y1 ) ;
XYStepRenderer r2 = ( XYStepRenderer ) TestUtilities . serialised ( r1 ) ;
SimpleTimePeriod p2 = ( SimpleTimePeriod ) TestUtilities . serialised ( p1 ) ;
DefaultMultiValueCategoryDataset d2 = ( DefaultMultiValueCategoryDataset ) TestUtilities . serialised ( d1 ) ;
XYSeries s2 = ( XYSeries ) TestUtilities . serialised ( s1 ) ;
CombinedRangeXYPlot plot2 = ( CombinedRangeXYPlot ) TestUtilities . serialised ( plot1 ) ;
CategoryTableXYDataset d2 = ( CategoryTableXYDataset ) TestUtilities . serialised ( d1 ) ;
YIntervalRenderer r2 = ( YIntervalRenderer ) TestUtilities . serialised ( r1 ) ;
TaskSeriesCollection c2 = ( TaskSeriesCollection ) TestUtilities . serialised ( c1 ) ;
SimpleHistogramBin b2 = ( SimpleHistogramBin ) TestUtilities . serialised ( b1 ) ;
DefaultCategoryDataset d2 = ( DefaultCategoryDataset ) TestUtilities . serialised ( d1 ) ;
BubbleXYItemLabelGenerator g2 = ( BubbleXYItemLabelGenerator ) TestUtilities . serialised ( g1 ) ;
PaintScaleLegend l2 = ( PaintScaleLegend ) TestUtilities . serialised ( l1 ) ;
OHLCDataItem i2 = ( OHLCDataItem ) TestUtilities . serialised ( i1 ) ;
AreaRendererEndType t2 = ( AreaRendererEndType ) TestUtilities . serialised ( t1 ) ;
BoxAndWhiskerRenderer r2 = ( BoxAndWhiskerRenderer ) TestUtilities . serialised ( r1 ) ;
HistogramDataset d2 = ( HistogramDataset ) TestUtilities . serialised ( d1 ) ;
MiddlePinNeedle n2 = ( MiddlePinNeedle ) TestUtilities . serialised ( n1 ) ;
CombinedDomainXYPlot plot2 = ( CombinedDomainXYPlot ) TestUtilities . serialised ( plot1 ) ;
IntervalXYDelegate d2 = ( IntervalXYDelegate ) TestUtilities . serialised ( d1 ) ;
XYDifferenceRenderer r2 = ( XYDifferenceRenderer ) TestUtilities . serialised ( r1 ) ;
StandardCategoryURLGenerator g2 = ( StandardCategoryURLGenerator ) TestUtilities . serialised ( g1 ) ;
StandardPieURLGenerator g2 = ( StandardPieURLGenerator ) TestUtilities . serialised ( g1 ) ;
Millisecond m2 = ( Millisecond ) TestUtilities . serialised ( m1 ) ;
TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities . serialised ( item1 ) ;
YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ;
XYTextAnnotation a2 = ( XYTextAnnotation ) TestUtilities . serialised ( a1 ) ;
SubCategoryAxis a2 = ( SubCategoryAxis ) TestUtilities . serialised ( a1 ) ;
GrayPaintScale g2 = ( GrayPaintScale ) TestUtilities . serialised ( g1 ) ;
YIntervalSeriesCollection c2 = ( YIntervalSeriesCollection ) TestUtilities . serialised ( c1 ) ;
StandardXYBarPainter p2 = ( StandardXYBarPainter ) TestUtilities . serialised ( p1 ) ;
LineBorder b2 = ( LineBorder ) TestUtilities . serialised ( b1 ) ;
XYAreaRenderer r2 = ( XYAreaRenderer ) TestUtilities . serialised ( r1 ) ;
XYDotRenderer r2 = ( XYDotRenderer ) TestUtilities . serialised ( r1 ) ;
GradientXYBarPainter p2 = ( GradientXYBarPainter ) TestUtilities . serialised ( p1 ) ;
MatrixSeries m2 = ( MatrixSeries ) TestUtilities . serialised ( m1 ) ;
XYPlot p2 = ( XYPlot ) TestUtilities . serialised ( p1 ) ;
JFreeChart chart2 = ( JFreeChart ) TestUtilities . serialised ( chart ) ;
JFreeChart chart2 = ( JFreeChart ) TestUtilities . serialised ( chart ) ;
XYPlot p2 = ( XYPlot ) TestUtilities . serialised ( p1 ) ;
XYPlot p2 = ( XYPlot ) TestUtilities . serialised ( p1 ) ;
CustomCategoryURLGenerator g2 = ( CustomCategoryURLGenerator ) TestUtilities . serialised ( g1 ) ;
StandardXYToolTipGenerator g2 = ( StandardXYToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
XIntervalDataItem item2 = ( XIntervalDataItem ) TestUtilities . serialised ( item1 ) ;
MarkerAxisBand a2 = ( MarkerAxisBand ) TestUtilities . serialised ( a1 ) ;
HistogramBin b2 = ( HistogramBin ) TestUtilities . serialised ( b1 ) ;
TimeSeriesCollection c2 = ( TimeSeriesCollection ) TestUtilities . serialised ( c1 ) ;
ThermometerPlot p2 = ( ThermometerPlot ) TestUtilities . serialised ( p1 ) ;
ThermometerPlot p2 = ( ThermometerPlot ) TestUtilities . serialised ( p1 ) ;
FlowArrangement f2 = ( FlowArrangement ) TestUtilities . serialised ( f1 ) ;
CategoryTick t2 = ( CategoryTick ) TestUtilities . serialised ( t1 ) ;
ArrowNeedle n2 = ( ArrowNeedle ) TestUtilities . serialised ( n1 ) ;
ArcDialFrame f2 = ( ArcDialFrame ) TestUtilities . serialised ( f1 ) ;
XYBlockRenderer r2 = ( XYBlockRenderer ) TestUtilities . serialised ( r1 ) ;
AxisLocation location2 = ( AxisLocation ) TestUtilities . serialised ( location1 ) ;
FlowArrangement f2 = ( FlowArrangement ) TestUtilities . serialised ( f1 ) ;
XYBoxAnnotation a2 = ( XYBoxAnnotation ) TestUtilities . serialised ( a1 ) ;
GroupedStackedBarRenderer r2 = ( GroupedStackedBarRenderer ) TestUtilities . serialised ( r1 ) ;
NormalDistributionFunction2D f2 = ( NormalDistributionFunction2D ) TestUtilities . serialised ( f1 ) ;
SimpleHistogramDataset d2 = ( SimpleHistogramDataset ) TestUtilities . serialised ( d1 ) ;
KeyedObjects2D ko2D2 = ( KeyedObjects2D ) TestUtilities . serialised ( ko2D1 ) ;
PolarPlot p2 = ( PolarPlot ) TestUtilities . serialised ( p1 ) ;
DomainOrder d2 = ( DomainOrder ) TestUtilities . serialised ( d1 ) ;
VectorSeries s2 = ( VectorSeries ) TestUtilities . serialised ( s1 ) ;
ColorBlock b2 = ( ColorBlock ) TestUtilities . serialised ( b1 ) ;
PieLabelRecord p2 = ( PieLabelRecord ) TestUtilities . serialised ( p1 ) ;
DefaultPolarItemRenderer r2 = ( DefaultPolarItemRenderer ) TestUtilities . serialised ( r1 ) ;
XYPointerAnnotation a2 = ( XYPointerAnnotation ) TestUtilities . serialised ( a1 ) ;
LegendItemEntity e2 = ( LegendItemEntity ) TestUtilities . serialised ( e1 ) ;
TaskSeries s2 = ( TaskSeries ) TestUtilities . serialised ( s1 ) ;
DefaultCategoryItemRenderer r2 = ( DefaultCategoryItemRenderer ) TestUtilities . serialised ( r1 ) ;
Range r2 = ( Range ) TestUtilities . serialised ( r1 ) ;
ExtendedCategoryAxis a2 = ( ExtendedCategoryAxis ) TestUtilities . serialised ( a1 ) ;
DefaultDrawingSupplier r2 = ( DefaultDrawingSupplier ) TestUtilities . serialised ( r1 ) ;
Month m2 = ( Month ) TestUtilities . serialised ( m1 ) ;
PinNeedle n2 = ( PinNeedle ) TestUtilities . serialised ( n1 ) ;
XYErrorRenderer r2 = ( XYErrorRenderer ) TestUtilities . serialised ( r1 ) ;
XYErrorRenderer r2 = ( XYErrorRenderer ) TestUtilities . serialised ( r1 ) ;
CustomXYURLGenerator g2 = ( CustomXYURLGenerator ) TestUtilities . serialised ( g1 ) ;
LineFunction2D f2 = ( LineFunction2D ) TestUtilities . serialised ( f1 ) ;
XYSeriesCollection c2 = ( XYSeriesCollection ) TestUtilities . serialised ( c1 ) ;
StandardPieSectionLabelGenerator g2 = ( StandardPieSectionLabelGenerator ) TestUtilities . serialised ( g1 ) ;
Second s2 = ( Second ) TestUtilities . serialised ( s1 ) ;
BarRenderer r2 = ( BarRenderer ) TestUtilities . serialised ( r1 ) ;
DefaultTableXYDataset d2 = ( DefaultTableXYDataset ) TestUtilities . serialised ( d1 ) ;
CompassPlot p2 = ( CompassPlot ) TestUtilities . serialised ( p1 ) ;
DefaultTableXYDataset d2 = ( DefaultTableXYDataset ) TestUtilities . serialised ( d1 ) ;
MultipleXYSeriesLabelGenerator g2 = ( MultipleXYSeriesLabelGenerator ) TestUtilities . serialised ( g1 ) ;
CategoryTextAnnotation a2 = ( CategoryTextAnnotation ) TestUtilities . serialised ( a1 ) ;
StandardCategorySeriesLabelGenerator g2 = ( StandardCategorySeriesLabelGenerator ) TestUtilities . serialised ( g1 ) ;
CategoryMarker m2 = ( CategoryMarker ) TestUtilities . serialised ( m1 ) ;
Day d2 = ( Day ) TestUtilities . serialised ( d1 ) ;
DateTitle t2 = ( DateTitle ) TestUtilities . serialised ( t1 ) ;
Week w2 = ( Week ) TestUtilities . serialised ( w1 ) ;
AreaRenderer r2 = ( AreaRenderer ) TestUtilities . serialised ( r1 ) ;
TickUnits t2 = ( TickUnits ) TestUtilities . serialised ( t1 ) ;
BoxAndWhiskerItem i2 = ( BoxAndWhiskerItem ) TestUtilities . serialised ( i1 ) ;
TimePeriodAnchor a2 = ( TimePeriodAnchor ) TestUtilities . serialised ( a1 ) ;
PaintMap m2 = ( PaintMap ) TestUtilities . serialised ( m1 ) ;
PaintMap m2 = ( PaintMap ) TestUtilities . serialised ( m1 ) ;
RingPlot p2 = ( RingPlot ) TestUtilities . serialised ( p1 ) ;
StandardBarPainter p2 = ( StandardBarPainter ) TestUtilities . serialised ( p1 ) ;
LegendItemCollection c2 = ( LegendItemCollection ) TestUtilities . serialised ( c1 ) ;
RangeType r2 = ( RangeType ) TestUtilities . serialised ( r1 ) ;
StatisticalBarRenderer r2 = ( StatisticalBarRenderer ) TestUtilities . serialised ( r1 ) ;
DefaultKeyedValue v2 = ( DefaultKeyedValue ) TestUtilities . serialised ( v1 ) ;
OHLC i2 = ( OHLC ) TestUtilities . serialised ( i1 ) ;
StandardXYItemLabelGenerator g2 = ( StandardXYItemLabelGenerator ) TestUtilities . serialised ( g1 ) ;
BlockContainer c2 = ( BlockContainer ) TestUtilities . serialised ( c1 ) ;
NumberAxis a2 = ( NumberAxis ) TestUtilities . serialised ( a1 ) ;
LogAxis a2 = ( LogAxis ) TestUtilities . serialised ( a1 ) ;
CategoryStepRenderer r2 = ( CategoryStepRenderer ) TestUtilities . serialised ( r1 ) ;
CustomPieURLGenerator g2 = ( CustomPieURLGenerator ) TestUtilities . serialised ( g1 ) ;
PeriodAxisLabelInfo info2 = ( PeriodAxisLabelInfo ) TestUtilities . serialised ( info1 ) ;
DefaultHighLowDataset d2 = ( DefaultHighLowDataset ) TestUtilities . serialised ( d1 ) ;
DialPointer i2 = ( DialPointer ) TestUtilities . serialised ( i1 ) ;
DialPointer i2 = ( DialPointer ) TestUtilities . serialised ( i1 ) ;
KeyedObject ko2 = ( KeyedObject ) TestUtilities . serialised ( ko1 ) ;
BlockBorder b2 = ( BlockBorder ) TestUtilities . serialised ( b1 ) ;
MultiplePiePlot p2 = ( MultiplePiePlot ) TestUtilities . serialised ( p1 ) ;
XYSplineRenderer r2 = ( XYSplineRenderer ) TestUtilities . serialised ( r1 ) ;
XYShapeAnnotation a2 = ( XYShapeAnnotation ) TestUtilities . serialised ( a1 ) ;
YWithXInterval i2 = ( YWithXInterval ) TestUtilities . serialised ( i1 ) ;
DefaultBoxAndWhiskerCategoryDataset d2 = ( DefaultBoxAndWhiskerCategoryDataset ) TestUtilities . serialised ( d1 ) ;
CompositeTitle t2 = ( CompositeTitle ) TestUtilities . serialised ( t1 ) ;
CategoryPointerAnnotation a2 = ( CategoryPointerAnnotation ) TestUtilities . serialised ( a1 ) ;
XYPolygonAnnotation a2 = ( XYPolygonAnnotation ) TestUtilities . serialised ( a1 ) ;
Task t2 = ( Task ) TestUtilities . serialised ( t1 ) ;
DialPlot p2 = ( DialPlot ) TestUtilities . serialised ( p1 ) ;
XYTitleAnnotation a2 = ( XYTitleAnnotation ) TestUtilities . serialised ( a1 ) ;
DefaultKeyedValues2D kv2D2 = ( DefaultKeyedValues2D ) TestUtilities . serialised ( kv2D1 ) ;
StackedAreaRenderer r2 = ( StackedAreaRenderer ) TestUtilities . serialised ( r1 ) ;
TimePeriodValue tpv2 = ( TimePeriodValue ) TestUtilities . serialised ( tpv1 ) ;
DefaultHeatMapDataset d2 = ( DefaultHeatMapDataset ) TestUtilities . serialised ( d1 ) ;
XYLineAndShapeRenderer r2 = ( XYLineAndShapeRenderer ) TestUtilities . serialised ( r1 ) ;
XYStepAreaRenderer r2 = ( XYStepAreaRenderer ) TestUtilities . serialised ( r1 ) ;
YIntervalSeries s2 = ( YIntervalSeries ) TestUtilities . serialised ( s1 ) ;
GridArrangement f2 = ( GridArrangement ) TestUtilities . serialised ( f1 ) ;
XYAreaRenderer2 r2 = ( XYAreaRenderer2 ) TestUtilities . serialised ( r1 ) ;
WindNeedle n2 = ( WindNeedle ) TestUtilities . serialised ( n1 ) ;
HighLowItemLabelGenerator g2 = ( HighLowItemLabelGenerator ) TestUtilities . serialised ( g1 ) ;
DefaultBoxAndWhiskerXYDataset d2 = ( DefaultBoxAndWhiskerXYDataset ) TestUtilities . serialised ( d1 ) ;
TimeSeriesURLGenerator g2 = ( TimeSeriesURLGenerator ) TestUtilities . serialised ( g1 ) ;
LogarithmicAxis a2 = ( LogarithmicAxis ) TestUtilities . serialised ( a1 ) ;
StandardPieToolTipGenerator g2 = ( StandardPieToolTipGenerator ) TestUtilities . serialised ( g1 ) ;
CyclicNumberAxis a2 = ( CyclicNumberAxis ) TestUtilities . serialised ( a1 ) ;
KeyedObjects ko2 = ( KeyedObjects ) TestUtilities . serialised ( ko1 ) ;
CandlestickRenderer r2 = ( CandlestickRenderer ) TestUtilities . serialised ( r1 ) ;
MonthDateFormat mf2 = ( MonthDateFormat ) TestUtilities . serialised ( mf1 ) ;
XYBoxAndWhiskerRenderer r2 = ( XYBoxAndWhiskerRenderer ) TestUtilities . serialised ( r1 ) ;
ChartRenderingInfo i2 = ( ChartRenderingInfo ) TestUtilities . serialised ( i1 ) ;
ChartRenderingInfo i2 = ( ChartRenderingInfo ) TestUtilities . serialised ( i1 ) ;
XYCoordinate v2 = ( XYCoordinate ) TestUtilities . serialised ( v1 ) ;
StandardEntityCollection c2 = ( StandardEntityCollection ) TestUtilities . serialised ( c1 ) ;
CrosshairOverlay o2 = ( CrosshairOverlay ) TestUtilities . serialised ( o1 ) ;
PiePlot3D p2 = ( PiePlot3D ) TestUtilities . serialised ( p1 ) ;
FastScatterPlot p2 = ( FastScatterPlot ) TestUtilities . serialised ( p1 ) ;
DefaultKeyedValueDataset d2 = ( DefaultKeyedValueDataset ) TestUtilities . serialised ( d1 ) ;
TextTitle t2 = ( TextTitle ) TestUtilities . serialised ( t1 ) ;
ComparableObjectItem item2 = ( ComparableObjectItem ) TestUtilities . serialised ( item1 ) ;
TimeSeries s2 = ( TimeSeries ) TestUtilities . serialised ( s1 ) ;
TimePeriodValuesCollection c2 = ( TimePeriodValuesCollection ) TestUtilities . serialised ( c1 ) ;
LegendItem item2 = ( LegendItem ) TestUtilities . serialised ( item1 ) ;
item2 = ( LegendItem ) TestUtilities . serialised ( item1 ) ;
LineAndShapeRenderer r2 = ( LineAndShapeRenderer ) TestUtilities . serialised ( r1 ) ;
EmptyBlock b2 = ( EmptyBlock ) TestUtilities . serialised ( b1 ) ;
StackedXYBarRenderer r2 = ( StackedXYBarRenderer ) TestUtilities . serialised ( r1 ) ;
MinMaxCategoryRenderer r2 = ( MinMaxCategoryRenderer ) TestUtilities . serialised ( r1 ) ;
StandardChartTheme t2 = ( StandardChartTheme ) TestUtilities . serialised ( t1 ) ;
SlidingGanttCategoryDataset d2 = ( SlidingGanttCategoryDataset ) TestUtilities . serialised ( d1 ) ;
QuarterDateFormat qf2 = ( QuarterDateFormat ) TestUtilities . serialised ( qf1 ) ;
StackedXYAreaRenderer2 r2 = ( StackedXYAreaRenderer2 ) TestUtilities . serialised ( r1 ) ;
IntervalMarker m2 = ( IntervalMarker ) TestUtilities . serialised ( m1 ) ;
DefaultStatisticalCategoryDataset d2 = ( DefaultStatisticalCategoryDataset ) TestUtilities . serialised ( d1 ) ;
DefaultStatisticalCategoryDataset d2 = ( DefaultStatisticalCategoryDataset ) TestUtilities . serialised ( d1 ) ;
MeterInterval m2 = ( MeterInterval ) TestUtilities . serialised ( m1 ) ;
LegendTitle t2 = ( LegendTitle ) TestUtilities . serialised ( t1 ) ;
ScatterRenderer r2 = ( ScatterRenderer ) TestUtilities . serialised ( r1 ) ;
OHLCSeriesCollection c2 = ( OHLCSeriesCollection ) TestUtilities . serialised ( c1 ) ;
PlotRenderingInfo p2 = ( PlotRenderingInfo ) TestUtilities . serialised ( p1 ) ;
ModuloAxis a2 = ( ModuloAxis ) TestUtilities . serialised ( a1 ) ;
MeanAndStandardDeviation m2 = ( MeanAndStandardDeviation ) TestUtilities . serialised ( m1 ) ;
DateTickUnit a2 = ( DateTickUnit ) TestUtilities . serialised ( a1 ) ;
CategoryLabelPositions p2 = ( CategoryLabelPositions ) TestUtilities . serialised ( p1 ) ;
CategoryLabelPosition p2 = ( CategoryLabelPosition ) TestUtilities . serialised ( p1 ) ;
ShortTextTitle t2 = ( ShortTextTitle ) TestUtilities . serialised ( t1 ) ;
DateRange r2 = ( DateRange ) TestUtilities . serialised ( r1 ) ;
XIntervalSeries s2 = ( XIntervalSeries ) TestUtilities . serialised ( s1 ) ;
CategoryLineAnnotation a2 = ( CategoryLineAnnotation ) TestUtilities . serialised ( a1 ) ;
StandardXYSeriesLabelGenerator g2 = ( StandardXYSeriesLabelGenerator ) TestUtilities . serialised ( g1 ) ;
Crosshair c2 = ( Crosshair ) TestUtilities . serialised ( c1 ) ;
LegendGraphic g2 = ( LegendGraphic ) TestUtilities . serialised ( g1 ) ;
SymbolAxis a2 = ( SymbolAxis ) TestUtilities . serialised ( a1 ) ;
DefaultKeyedValues2DDataset d2 = ( DefaultKeyedValues2DDataset ) TestUtilities . serialised ( d1 ) ;
TickLabelEntity e2 = ( TickLabelEntity ) TestUtilities . serialised ( e1 ) ;
entities != null && isPointInRect ( dataArea , xx , yy )
entities != null && isPointInRect ( dataArea , xx , yy )
final Rectangle2D area
final float s
final float s
final float s
final Shape shape
entities != null && AbstractXYItemRenderer . isPointInRect ( dataArea , x , y )
final ObjectInputStream stream
final ObjectOutputStream stream
final Graphics2D g2
final TextFragment fragment
final TextFragment fragment
public TextLine ( final String text ) { this ( text , TextFragment.DEFAULT_FONT ) ; }
final int month
final int code
final boolean shortened
final int weekday
final String title
final Object o
final String name
final Font font
final Font font
final Font font
final Font font
final Font font
final double height
final double height
final double width
final double width
final double width
final double width
final double width
final double width
final double height
final double height
final double height
final double height
final int d
final int serial
final String name
final String name
final Dialog dialog
final Window frame
final Window frame
final String name
final double height
final double width
final int maxrows
final TextLine line
final String name
final int index
final ObjectOutputStream stream
final int index
public ObjectList ( final int initialCapacity ) { super ( initialCapacity ) ; }
final String name
final Object object
final String classLoaderSource
final RectangleEdge edge
final String name
final int targetDOW
final int targetDOW
final int targetDOW
final int serial
final int relative
final int count
final String name
final int index
final int index
final String name
final Number value
final String name
final ObjectInputStream stream
final ObjectOutputStream stream
final Object object
protected AbstractObjectList ( final int initialCapacity ) { this ( initialCapacity , initialCapacity ) ; }
final String name
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( file , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( chart , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( fillType , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( type , STRING_CONSTANT ) ; this . type = type ; fireDatasetChanged () ; }
ParamChecks . nullNotPermitted ( group , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( defaultGroup , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . stroke = stroke ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; this . category2 = category ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; this . category1 = category ; fireAnnotationChanged () ; }
ParamChecks . nullNotPermitted ( zone , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( generator , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . listenerList . remove ( RendererChangeListener . class , listener ) ; }
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . listenerList . add ( RendererChangeListener . class , listener ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . defaultLegendTextFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ; this . defaultNegativeItemLabelPosition = position ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ; this . defaultPositiveItemLabelPosition = position ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . defaultItemLabelPaint = paint ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; setDefaultItemLabelFont ( font , true ) ; }
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . defaultShape = shape ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . defaultOutlineStroke = stroke ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . defaultStroke = stroke ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . defaultOutlinePaint = paint ; if ( notify ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . defaultFillPaint = paint ; if ( notify ) { fireChangeEvent () ; } }
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . arrowPaint = paint ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . arrowStroke = stroke ; fireAnnotationChanged () ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ; return this . data . indexOf ( series ) ; }
ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeCrosshairPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeCrosshairStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainCrosshairStroke = stroke ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainCrosshairPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( marker , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeMinorGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeMinorGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeZeroBaselinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeZeroBaselineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ; this . domainGridlinePosition = position ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . rowRenderingOrder = order ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . columnRenderingOrder = order ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . renderingOrder = order ; fireChangeEvent () ; }
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( offset , STRING_CONSTANT ) ; this . axisOffset = offset ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ; this . orientation = orientation ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; this . key = key ; this . value = value ; }
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( values , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( values , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( values , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( scale , STRING_CONSTANT ) ; this . paintScale = scale ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( renderer , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( renderer , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( plot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( chart , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( supplier , STRING_CONSTANT ) ; this . drawingSupplier = supplier ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . gridBandAlternatePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . gridBandPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . errorIndicatorPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . thermometerPaint = paint ; }
{ ParamChecks . nullNotPermitted ( painter , STRING_CONSTANT ) ; this . xyBarPainter = painter ; }
{ ParamChecks . nullNotPermitted ( painter , STRING_CONSTANT ) ; this . barPainter = painter ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . shadowPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . itemLabelPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . tickLabelPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . axisLabelPaint = paint ; }
{ ParamChecks . nullNotPermitted ( offset , STRING_CONSTANT ) ; this . axisOffset = offset ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . crosshairPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . baselinePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeGridlinePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainGridlinePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . labelLinkPaint = paint ; }
{ ParamChecks . nullNotPermitted ( style , STRING_CONSTANT ) ; this . labelLinkStyle = style ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . plotOutlinePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . plotBackgroundPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . legendItemPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . legendBackgroundPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . chartBackgroundPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . subtitlePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . titlePaint = paint ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . smallFont = font ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . regularFont = font ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . largeFont = font ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . extraLargeFont = font ; }
ParamChecks . nullNotPermitted ( name , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( seriesKeys , STRING_CONSTANT ) ;
{ super ( area , toolTipText , urlText ) ; ParamChecks . nullNotPermitted ( chart , STRING_CONSTANT ) ; this . chart = chart ; }
{ ParamChecks . nullNotPermitted ( line , STRING_CONSTANT ) ; this . legendLine = line ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ; return this . data . indexOf ( series ) ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . gridBandAlternatePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . gridBandPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; return this . data . getValue ( key ) ; }
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( location , STRING_CONSTANT ) ; this . shapeLocation = location ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . shapeAnchor = anchor ; }
{ ParamChecks . nullNotPermitted ( transformer , STRING_CONSTANT ) ; this . fillPaintTransformer = transformer ; }
{ ParamChecks . nullNotPermitted ( x , STRING_CONSTANT ) ; this . x = x ; this . obj = y ; }
ParamChecks . nullNotPermitted ( unit , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . baseFormatter = formatter ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . separatorPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . separatorStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( color , STRING_CONSTANT ) ; this . centerTextColor = color ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . centerTextFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . centerTextFormatter = formatter ; }
{ ParamChecks . nullNotPermitted ( mode , STRING_CONSTANT ) ; this . centerTextMode = mode ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ; Range result = iterateToFindZBounds ( dataset , visibleSeriesKeys , xRange , includeInterval ) ; return result ; }
{ ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ; Range result = iterateZBounds ( dataset , includeInterval ) ; return result ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . negativeBarPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . positiveBarPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . lastBarPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . firstBarPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( radialAxis , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( line , STRING_CONSTANT ) ; this . legendLine = line ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( composite , STRING_CONSTANT ) ; this . fillComposite = composite ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . guideLineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . guideLinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( scale , STRING_CONSTANT ) ; this . paintScale = scale ; notifyListeners ( new RendererChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; this . key = key ; }
{ ParamChecks . nullNotPermitted ( icon , STRING_CONSTANT ) ; this . minIcon = icon ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( icon , STRING_CONSTANT ) ; this . maxIcon = icon ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( icon , STRING_CONSTANT ) ; this . objectIcon = icon ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . groupStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . groupPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ; this . xPosition = position ; }
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( interval , STRING_CONSTANT ) ; this . intervals . add ( interval ) ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . valuePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . valueFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( format , STRING_CONSTANT ) ; this . tickLabelFormat = format ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . needlePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . tickPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . shape = shape ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( polygon , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( line , STRING_CONSTANT ) ; this . legendLine = line ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( thresholdType , STRING_CONSTANT ) ; this . gapThresholdType = thresholdType ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( name , STRING_CONSTANT ) ; this . name = name ; }
ParamChecks . nullNotPermitted ( line , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( period , STRING_CONSTANT ) ; this . period = period ; this . value = value ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; this . key = key ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( period , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ; this . tickMarkPosition = position ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( maximumDate , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( date , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( locale , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( zone , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . chartMouseListeners . add ( ChartMouseListener . class , listener ) ; }
ParamChecks . nullNotPermitted ( file , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( overlay , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( overlay , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . zoomFillPaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . incompletePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . completePaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( values , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( values , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . rotationAnchor = anchor ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . textAnchor = anchor ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . font = font ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ; this . text = text ; fireAnnotationChanged () ; }
ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . labelTextAnchor = anchor ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( adj , STRING_CONSTANT ) ; this . labelOffsetType = adj ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( offset , STRING_CONSTANT ) ; this . labelOffset = offset ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . labelAnchor = anchor ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( color , STRING_CONSTANT ) ; this . labelBackgroundColor = color ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . labelPaint = paint ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . labelFont = font ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . stroke = stroke ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; notifyListeners ( new MarkerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( arrangement , STRING_CONSTANT ) ; this . arrangement = arrangement ; }
ParamChecks . nullNotPermitted ( arrangement , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . stroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . foregroundPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . backgroundPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( x , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( period , STRING_CONSTANT ) ; this . period = period ; this . value = value ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . categoryAnchor = anchor ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; this . category = category ; fireAnnotationChanged () ; }
ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( subtask , STRING_CONSTANT ) ; this . subtasks . add ( subtask ) ; }
{ ParamChecks . nullNotPermitted ( description , STRING_CONSTANT ) ; this . description = description ; }
ParamChecks . nullNotPermitted ( description , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . stripOutlineStroke = stroke ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . stripOutlinePaint = paint ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( location , STRING_CONSTANT ) ; this . axisLocation = location ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( scale , STRING_CONSTANT ) ; this . scale = scale ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( serialDate , STRING_CONSTANT ) ; this . serialDate = serialDate ; peg ( Calendar . getInstance () ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . arrowPaint = paint ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . arrowStroke = stroke ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ; this . rangeAxis = axis ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ; this . domainAxis = axis ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( axisIndex , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ; this . cornerTextItems . add ( text ) ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . angleLabelPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . angleLabelFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( unit , STRING_CONSTANT ) ; this . angleTickUnit = unit ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( location , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( type , STRING_CONSTANT ) ; this . endType = type ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . sortOrder = order ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( padding , STRING_CONSTANT ) ; this . itemLabelPadding = padding ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . itemPaint = paint ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . itemFont = font ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( padding , STRING_CONSTANT ) ; this . legendItemGraphicPadding = padding ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . legendItemGraphicAnchor = anchor ; }
{ ParamChecks . nullNotPermitted ( edge , STRING_CONSTANT ) ; this . legendItemGraphicEdge = edge ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( sources , STRING_CONSTANT ) ; this . sources = sources ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . outlinePaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . fillPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . stroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ super ( area , toolTipText , urlText ) ; ParamChecks . nullNotPermitted ( title , STRING_CONSTANT ) ; this . title = title ; }
{ super ( area , toolTipText , urlText ) ; ParamChecks . nullNotPermitted ( plot , STRING_CONSTANT ) ; this . plot = plot ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . volumePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . changeListeners . remove ( ChartChangeListener . class , listener ) ; }
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . changeListeners . add ( ChartChangeListener . class , listener ) ; }
ParamChecks . nullNotPermitted ( subtitle , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subtitle , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( padding , STRING_CONSTANT ) ; this . padding = padding ; notifyListeners ( new ChartChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( renderingHints , STRING_CONSTANT ) ; this . renderingHints = renderingHints ; fireChartChanged () ; }
ParamChecks . nullNotPermitted ( plot , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; this . store . put ( key , stroke ) ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; return ( Stroke ) this . store . get ( key ) ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . artifactPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( t , STRING_CONSTANT ) ; this . gradientPaintTransformer = t ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( transformer , STRING_CONSTANT ) ; this . gradientTransformer = transformer ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( area , STRING_CONSTANT ) ; this . legendArea = area ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . outlineStroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . outlinePaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . fillPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ; this . dataset = dataset ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . anchor = anchor ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . font = font ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( label , STRING_CONSTANT ) ; this . label = label ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( label , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( edge , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( generator , STRING_CONSTANT ) ; this . legendItemLabelGenerator = generator ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( drawable , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( alignment , STRING_CONSTANT ) ; this . textAlignment = alignment ; notifyListeners ( new TitleChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( alignment , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( alignment , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( position , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( rectangle , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( area , STRING_CONSTANT ) ; this . area = area ; }
ParamChecks . nullNotPermitted ( area , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( hour , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . artifactPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( coefficients , STRING_CONSTANT ) ; this . coefficients = ( double [] ) coefficients . clone () ; }
ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( state , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . subLabelPaint = paint ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . subLabelFont = font ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( subCategory , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( f , STRING_CONSTANT ) ; factory = f ; }
{ ParamChecks . nullNotPermitted ( container , STRING_CONSTANT ) ; this . container = container ; }
{ ParamChecks . nullNotPermitted ( container , STRING_CONSTANT ) ; this . container = container ; this . backgroundPaint = null ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( format , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . changeListeners . remove ( OverlayChangeListener . class , listener ) ; }
{ ParamChecks . nullNotPermitted ( listener , STRING_CONSTANT ) ; this . changeListeners . add ( OverlayChangeListener . class , listener ) ; }
{ ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ; setRange ( Range . expand ( range , getLowerMargin () , getUpperMargin () ) , turnOffAutoRange , notify ) ; }
ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ; this . defaultAutoRange = range ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . rightArrow = arrow ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . leftArrow = arrow ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . downArrow = arrow ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( arrow , STRING_CONSTANT ) ; this . upArrow = arrow ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . outlineStroke = stroke ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . outlinePaint = paint ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . rotationAnchor = anchor ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . textAnchor = anchor ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . font = font ; fireAnnotationChanged () ; }
{ ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ; this . text = text ; fireAnnotationChanged () ; }
ParamChecks . nullNotPermitted ( text , STRING_CONSTANT ) ;
{ super ( formatString , xFormat , yFormat ) ; ParamChecks . nullNotPermitted ( zFormat , STRING_CONSTANT ) ; this . zDateFormat = zFormat ; }
{ super ( formatString , xFormat , yFormat ) ; ParamChecks . nullNotPermitted ( zFormat , STRING_CONSTANT ) ; this . zFormat = zFormat ; }
{ ParamChecks . nullNotPermitted ( x , STRING_CONSTANT ) ; this . x = x ; this . y = y ; }
ParamChecks . nullNotPermitted ( location , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( tickType , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeCrosshairPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeCrosshairStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainCrosshairPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainCrosshairStroke = stroke ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( axisIndex , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( axisIndex , STRING_CONSTANT ) ;
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( origin , STRING_CONSTANT ) ; this . quadrantOrigin = origin ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeZeroBaselinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeZeroBaselineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainZeroBaselinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainZeroBaselineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeMinorGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeMinorGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rangeGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . rangeGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainMinorGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . domainGridlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainMinorGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . domainGridlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . seriesRenderingOrder = order ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . datasetRenderingOrder = order ; fireChangeEvent () ; }
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
ParamChecks . requireNonNegative ( index , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( offset , STRING_CONSTANT ) ; this . axisOffset = offset ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . mercuryPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . valueFormat = formatter ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( f , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( padding , STRING_CONSTANT ) ; this . padding = padding ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; this . store . put ( key , paint ) ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; return ( Paint ) this . store . get ( key ) ; }
ParamChecks . nullNotPermitted ( chart , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( chart , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( prefix , STRING_CONSTANT ) ; ServletUtilities.tempOneTimeFilePrefix = prefix ; }
{ ParamChecks . nullNotPermitted ( prefix , STRING_CONSTANT ) ; ServletUtilities.tempFilePrefix = prefix ; }
ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . legendShape = shape ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( period , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( extract , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( generator , STRING_CONSTANT ) ; this . labelGenerator = generator ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . labelPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . labelFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . legendItemShape = shape ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . baseSeriesOutlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . baseSeriesOutlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . baseSeriesPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . axisLineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . axisLinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( direction , STRING_CONSTANT ) ; this . direction = direction ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . dataExtractOrder = order ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( extract , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . legendItemShape = shape ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . aggregatedItemsPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; this . aggregatedItemsKey = key ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ; this . dataExtractOrder = order ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( pieChart , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( directions , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( array , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( columnKey , STRING_CONSTANT ) ; return getCategoryIndex ( columnKey ) ; }
ParamChecks . nullNotPermitted ( categoryKeys , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( seriesKeys , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . contentAlignmentPoint = anchor ; }
ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . advanceLineStroke = stroke ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . advanceLinePaint = paint ; }
ParamChecks . nullNotPermitted ( day , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( state , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( categories , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; if ( this . categoryLabelURLs . remove ( category ) != null ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; return ( String ) this . categoryLabelURLs . get ( category ) ; }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; this . categoryLabelURLs . put ( category , url ) ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; if ( this . categoryLabelToolTips . remove ( category ) != null ) { fireChangeEvent () ; } }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; return ( String ) this . categoryLabelToolTips . get ( category ) ; }
{ ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ; this . categoryLabelToolTips . put ( category , tooltip ) ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( category , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( positions , STRING_CONSTANT ) ; this . categoryLabelPositions = positions ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( columnKey , STRING_CONSTANT ) ; return this . keys . indexOf ( columnKey ) ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . stroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . foregroundPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . backgroundPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( painter , STRING_CONSTANT ) ; this . barPainter = painter ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( bar , STRING_CONSTANT ) ; this . legendBar = bar ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( painter , STRING_CONSTANT ) ; XYBarRenderer.defaultBarPainter = painter ; }
ParamChecks . nullNotPermitted ( columnKey , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( rowKey , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; return this . columnKeys . indexOf ( key ) ; }
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( color , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( hotspot , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( generator , STRING_CONSTANT ) ; this . legendItemLabelGenerator = generator ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( plot , STRING_CONSTANT ) ; this . plot = plot ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( format , STRING_CONSTANT ) ; this . formatPattern = format ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . textAnchor = anchor ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . valueAnchor = anchor ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( insets , STRING_CONSTANT ) ; this . insets = insets ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . outlinePaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . outlineStroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . backgroundPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . paint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . font = font ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . formatter = formatter ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( value , STRING_CONSTANT ) ; this . templateValue = value ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( anchor , STRING_CONSTANT ) ; this . frameAnchor = anchor ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ super ( area , toolTipText , urlText ) ; ParamChecks . nullNotPermitted ( axis , STRING_CONSTANT ) ; this . axis = axis ; }
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( insets , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . noDataMessagePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . noDataMessageFont = font ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( subplot , STRING_CONSTANT ) ;
{ super ( source ) ; ParamChecks . nullNotPermitted ( annotation , STRING_CONSTANT ) ; this . annotation = annotation ; }
{ ParamChecks . nullNotPermitted ( transformer , STRING_CONSTANT ) ; this . fillPaintTransformer = transformer ; }
{ ParamChecks . nullNotPermitted ( line , STRING_CONSTANT ) ; this . line = line ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . outlineStroke = stroke ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . outlinePaint = paint ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . linePaint = paint ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . lineStroke = stroke ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . fillPaint = paint ; }
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . shape = shape ; }
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( format , STRING_CONSTANT ) ; this . formatter = format ; }
{ ParamChecks . nullNotPermitted ( area , STRING_CONSTANT ) ; this . legendArea = area ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . sublabelPaint = paint ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . sublabelFont = font ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
ParamChecks . nullNotPermitted ( image , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( crosshair , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( crosshair , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( crosshair , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( crosshair , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( prefix , STRING_CONSTANT ) ; this . prefix = prefix ; }
ParamChecks . nullNotPermitted ( defaultPaint , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . roseHighlightPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . roseCenterPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . rosePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . labelFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( entity , STRING_CONSTANT ) ; this . entities . add ( entity ) ; }
ParamChecks . nullNotPermitted ( rect , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( scale , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( pointer , STRING_CONSTANT ) ; return this . pointers . indexOf ( pointer ) ; }
ParamChecks . nullNotPermitted ( pointer , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( layer , STRING_CONSTANT ) ; return this . layers . indexOf ( layer ) ; }
ParamChecks . nullNotPermitted ( layer , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( frame , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( task , STRING_CONSTANT ) ; this . tasks . add ( task ) ; fireSeriesChanged () ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . secondFormatter = formatter ; }
{ ParamChecks . nullNotPermitted ( suffix , STRING_CONSTANT ) ; this . secondSuffix = suffix ; }
{ ParamChecks . nullNotPermitted ( suffix , STRING_CONSTANT ) ; this . minuteSuffix = suffix ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . minuteFormatter = formatter ; }
{ ParamChecks . nullNotPermitted ( suffix , STRING_CONSTANT ) ; this . hourSuffix = suffix ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . hourFormatter = formatter ; }
{ ParamChecks . nullNotPermitted ( suffix , STRING_CONSTANT ) ; this . daySuffix = suffix ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . dayFormatter = formatter ; }
{ ParamChecks . nullNotPermitted ( prefix , STRING_CONSTANT ) ; this . positivePrefix = prefix ; }
{ ParamChecks . nullNotPermitted ( map , STRING_CONSTANT ) ; this . seriesToGroupMap = map ; fireChangeEvent () ; }
{ super ( formatString , xFormat , yFormat ) ; ParamChecks . nullNotPermitted ( zFormat , STRING_CONSTANT ) ; this . zDateFormat = zFormat ; }
{ super ( formatString , xFormat , yFormat ) ; ParamChecks . nullNotPermitted ( zFormat , STRING_CONSTANT ) ; this . zFormat = zFormat ; }
{ ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . tickLabelFormatter = formatter ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . tickLabelPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . tickLabelFont = font ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . minorTickStroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . minorTickPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . majorTickStroke = stroke ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . majorTickPaint = paint ; notifyListeners ( new DialLayerChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; return this . columnKeys . indexOf ( key ) ; }
{ ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ; return this . rowKeys . indexOf ( key ) ; }
ParamChecks . nullNotPermitted ( item , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( date , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . shadowPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( painter , STRING_CONSTANT ) ; this . barPainter = painter ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( painter , STRING_CONSTANT ) ; BarRenderer.defaultBarPainter = painter ; }
ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( bounds , STRING_CONSTANT ) ; this . bounds = bounds ; }
{ ParamChecks . nullNotPermitted ( padding , STRING_CONSTANT ) ; this . padding = padding ; }
{ ParamChecks . nullNotPermitted ( frame , STRING_CONSTANT ) ; this . frame = frame ; }
{ ParamChecks . nullNotPermitted ( margin , STRING_CONSTANT ) ; this . margin = margin ; }
ParamChecks . nullNotPermitted ( unit , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( rangeType , STRING_CONSTANT ) ; this . rangeType = rangeType ; notifyListeners ( new AxisChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( group , STRING_CONSTANT ) ; this . group = group ; }
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( orientation , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( locale , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( order , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( theme , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( data , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( source , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( input , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( input , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( line , STRING_CONSTANT ) ; this . legendLine = line ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . negativePaint = paint ; notifyListeners ( new RendererChangeEvent ( this ) ) ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . positivePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( id , STRING_CONSTANT ) ; this . id = id ; }
ParamChecks . nullNotPermitted ( locale , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( tasks , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( state , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( state , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . tickMarkPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( insets , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . tickLabelPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . axisLineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . axisLinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( location , STRING_CONSTANT ) ; this . labelLocation = location ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( insets , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . labelPaint = paint ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ; return this . data . indexOf ( series ) ; }
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . minorTickMarkPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . minorTickMarkStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ; this . minorTickTimePeriodClass = c ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ; this . majorTickTimePeriodClass = c ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( c , STRING_CONSTANT ) ; this . autoRangeTimePeriodClass = c ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( zone , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( last , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( first , STRING_CONSTANT ) ;
{ super ( size , minorTickCount ) ; ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . formatter = formatter ; }
{ super ( size ) ; ParamChecks . nullNotPermitted ( formatter , STRING_CONSTANT ) ; this . formatter = formatter ; }
{ ParamChecks . nullNotPermitted ( seriesKey , STRING_CONSTANT ) ; this . seriesKey = seriesKey ; this . itemIndex = itemIndex ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( format , STRING_CONSTANT ) ; this . formatPattern = format ; }
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( record , STRING_CONSTANT ) ; this . labels . add ( record ) ; }
ParamChecks . nullNotPermitted ( base , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( base , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( range , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
ParamChecks . nullNotPermitted ( series , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( generator , STRING_CONSTANT ) ; this . legendLabelGenerator = generator ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( shape , STRING_CONSTANT ) ; this . legendItemShape = shape ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( distributor , STRING_CONSTANT ) ; this . labelDistributor = distributor ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( offset , STRING_CONSTANT ) ; this . simpleLabelOffset = offset ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( padding , STRING_CONSTANT ) ; this . labelPadding = padding ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . labelPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( font , STRING_CONSTANT ) ; this . labelFont = font ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . labelLinkStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . labelLinkPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( style , STRING_CONSTANT ) ; this . labelLinkStyle = style ; fireChangeEvent () ; }
ParamChecks . nullNotPermitted ( key , STRING_CONSTANT ) ;
{ ParamChecks . nullNotPermitted ( stroke , STRING_CONSTANT ) ; this . defaultSectionOutlineStroke = stroke ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . defaultSectionOutlinePaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( paint , STRING_CONSTANT ) ; this . defaultSectionPaint = paint ; fireChangeEvent () ; }
{ ParamChecks . nullNotPermitted ( direction , STRING_CONSTANT ) ; this . direction = direction ; fireChangeEvent () ; }
String name
Point2D anchorPoint = RectangleAnchor . coordinates ( titleRect , this . anchor ) ;
return RectangleAnchor . coordinates ( anchorRect , anchor ) ;
return RectangleAnchor . coordinates ( anchorRect , anchor ) ;
Point2D pt2 = RectangleAnchor . coordinates ( bounds , this . valueAnchor ) ;
Point2D anchorPoint = RectangleAnchor . coordinates ( area , position . getCategoryAnchor () ) ;
return RectangleAnchor . coordinates ( anchorRect , anchor ) ;
return RectangleAnchor . coordinates ( anchorRect , anchor ) ;
Point2D anchorPoint = RectangleAnchor . coordinates ( shape . getBounds2D () , anchor ) ;
Point2D pt = RectangleAnchor . coordinates ( area , this . textAnchor ) ;
Point2D anchorPoint = RectangleAnchor . coordinates ( imageRect , this . anchor ) ;
g2 . setXORMode ( Color.orange ) ;
g2 . setXORMode ( Color.orange ) ;
if ( xor ) { g2 . setXORMode ( Color.gray ) ; }
this . overlays = new java.util.ArrayList () ;
if ( mep > NUMBER_CONSTANT ) { ep = getExplodePercent ( section ) / mep ; }
if ( ! isOrsonPDFAvailable () ) { throw new IllegalStateException ( STRING_CONSTANT ) ; }
chart.subtitles = new ArrayList () ;
return ( Title ) this . subtitles . get ( index ) ;
this . subtitles = new ArrayList () ;
this . chartPanel = new ChartPanel ( chart ) ;
if ( tooltips ) { plot . setToolTipGenerator ( new StandardPieToolTipGenerator ( StandardPieToolTipGenerator.DEFAULT_SECTION_LABEL_FORMAT ) ) ; }
if ( tooltips ) { plot . setToolTipGenerator ( new StandardPieToolTipGenerator ( StandardPieToolTipGenerator.DEFAULT_SECTION_LABEL_FORMAT ) ) ; }
