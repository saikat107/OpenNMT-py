(AST_ROOT_SC2NF (32 (800{val=rhs}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=rootNameNode}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=newVar}) (204{val==}) (32 (32 (800{val=IR}) (235{val=.}) (802{val=declaration}) (214{val=(}) (800{val=child}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=srcref}) (214{val=(}) (800{val=n}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=notChild}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=CALL}) (226{val=:})) (21 (32 (802{val=annotateCalls}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (500{val=break;}) (500{val=default:}) (500{val=break;}) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=enumTypeNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=isEqualTo}) (214{val=(}) (40{val=Token.BANG}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=CALL}) (226{val=:})) (21 (32 (802{val=visitCall}) (214{val=(}) (800{val=t}) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})) (500{val=break;}) (500{val=default:}) (500{val=break;}) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (32 (800{val=typeExprNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.QMARK})) (249{val=&&}) (38 (207{val=!}) (32 (800{val=typeExprNode}) (235{val=.}) (802{val=hasChildren}) (216{val=()})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.VAR}) (234{val=,}) (32 (800{val=var}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (27 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=type})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=definitionParent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=RuntimeException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=defSite}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (32 (800{val=nameNode}) (235{val=.}) (802{val=isGetProp}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=nameNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=exprKind}) (204{val==}) (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (27 (800{val=insideQualifiedName}) (250{val=||}) (27 (32 (32 (800{val=propAccessNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (242{val=!=}) (40{val=Token.ASSIGN}))))
(AST_ROOT_SC2NF (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=lvalue}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=tokenType}) (204{val==}) (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=warnInvalidOperand}) (214{val=(}) (800{val=expr}) (234{val=,}) (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (27 (800{val=lhsType}) (200{val=+}) (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=rhsType})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=commonTypes}) (235{val=.}) (802{val=isNumberScalarOrObj}) (214{val=(}) (40{val=pair.type}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=warnInvalidOperand}) (214{val=(}) (800{val=child}) (234{val=,}) (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (40{val=JSType.NUMBER}) (234{val=,}) (40{val=pair.type}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=exprKind}) (204{val==}) (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=warnings}) (235{val=.}) (802{val=add}) (214{val=(}) (32 (800{val=JSError}) (235{val=.}) (802{val=make}) (214{val=(}) (800{val=expr}) (234{val=,}) (800{val=UNKNOWN_EXPR_TYPE}) (234{val=,}) (32 (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (32 (800{val=dn}) (235{val=.}) (802{val=getValue}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=cont}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=isSameAs}) (214{val=(}) (40{val=Token.CONTINUE}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=breakStm}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=isSameAs}) (214{val=(}) (40{val=Token.BREAK}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=value}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=registerFunc}) (235{val=.}) (802{val=isValidNodeType}) (214{val=(}) (32 (800{val=valueNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))))
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=registerFunc}) (235{val=.}) (802{val=isValidNodeType}) (214{val=(}) (32 (800{val=value}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (7 (800{val=changed}) (204{val==}) (27 (27 (800{val=changed}) (250{val=||}) (27 (32 (800{val=finalValue}) (235{val=.}) (802{val=getToken}) (216{val=()})) (242{val=!=}) (32 (40{val=info.initialValue}) (235{val=.}) (802{val=getToken}) (216{val=()})))) (250{val=||}) (38 (207{val=!}) (32 (800{val=finalValue}) (235{val=.}) (802{val=isEquivalentTo}) (214{val=(}) (40{val=info.initialValue}) (215{val=)}))))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (27 (32 (800{val=blockNode}) (235{val=.}) (802{val=getChildCount}) (216{val=()})) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (32 (32 (800{val=blockNode}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.THROW}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (27 (32 (800{val=arg}) (235{val=.}) (802{val=getToken}) (216{val=()})) (242{val=!=}) (800{val=desiredType})))
(AST_ROOT_SC2NF (32 (800{val=val}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=lhs}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=parentType}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=HOOK}) (226{val=:})) (49 (326{val=case}) (800{val=AND}) (226{val=:})) (49 (326{val=case}) (800{val=OR}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=ancestor}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=actualType}) (204{val==}) (32 (32 (32 (800{val=cfgNodes}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=i}) (215{val=)})) (235{val=.}) (802{val=getValue}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=source}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=startToken})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=assertFalse}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=startToken}) (200{val=+}) (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=cfg}) (235{val=.}) (802{val=isImplicitReturn}) (214{val=(}) (800{val=dest}) (215{val=)})) (215{val=)})) (227{val=;})) (500{val=return;}) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (32 (800{val=source}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=startToken})) (249{val=&&}) (32 (800{val=cfg}) (235{val=.}) (802{val=isImplicitReturn}) (214{val=(}) (800{val=dest}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=enclosingNode}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=enclosingNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (242{val=!=}) (40{val=Token.FUNCTION}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (32 (800{val=expr}) (235{val=.}) (802{val=getRoot}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=refParent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=anc}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=grandparent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=AND}) (226{val=:})) (49 (326{val=case}) (800{val=OR}) (226{val=:})) (49 (326{val=case}) (800{val=HOOK}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.STRING}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.STRING}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})) (21 (32 (800{val=visited}) (235{val=.}) (802{val=append}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getString}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=input}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=next}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=value}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.EXPONENT}))) (249{val=&&}) (27 (32 (800{val=parent}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (236{val===}) (800{val=n}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (32 (800{val=NodeUtil}) (235{val=.}) (802{val=precedence}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (230{val=<}) (800{val=minPrecedence})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=LET}) (226{val=:})) (49 (326{val=case}) (800{val=CONST}) (226{val=:})) (49 (326{val=case}) (800{val=FUNCTION}) (226{val=:})) (49 (326{val=case}) (800{val=CLASS}) (226{val=:})) (49 (326{val=case}) (800{val=DO}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (61 (350{val=while}) (214{val=(}) (27 (32 (800{val=firstNonOperator}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=op})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=firstNonOperator}) (204{val==}) (32 (800{val=firstNonOperator}) (235{val=.}) (802{val=getFirstChild}) (216{val=()}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=last}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=FUNCTION}) (226{val=:})) (25 (313{val=if}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=isArrowFunction}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=visitArrowFunction}) (214{val=(}) (800{val=t}) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (500{val=break;}) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=value}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})) (41 (329{val=return}) (36 (214{val=(}) (27 (27 (800{val=type}) (236{val===}) (40{val=Token.INC})) (250{val=||}) (27 (800{val=type}) (236{val===}) (40{val=Token.DEC}))) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=declarationType}) (204{val==}) (32 (800{val=declarationNode}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=newNode}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (802{val=declaration}) (214{val=(}) (800{val=newLHS}) (234{val=,}) (800{val=newRHS}) (234{val=,}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=newNode}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (802{val=declaration}) (214{val=(}) (800{val=newLHS}) (234{val=,}) (800{val=newRHS}) (234{val=,}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=parentPrecedence}) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=precedence}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (800{val=isSimpleOp}) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=msg}) (204{val==}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (32 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (235{val=.}) (802{val=toString}) (216{val=()})) (235{val=.}) (802{val=toLowerCase}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.SCRIPT}) (234{val=,}) (32 (32 (32 (800{val=global}) (235{val=.}) (802{val=getDeclaration}) (216{val=()})) (235{val=.}) (802{val=getNode}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.GETPROP}) (234{val=,}) (32 (32 (32 (800{val=refs}) (235{val=.}) (802{val=get}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (215{val=)})) (235{val=.}) (802{val=getNode}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.GETPROP}) (234{val=,}) (32 (32 (32 (800{val=refs}) (235{val=.}) (802{val=get}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (215{val=)})) (235{val=.}) (802{val=getNode}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.NAME}) (234{val=,}) (32 (32 (32 (800{val=refs}) (235{val=.}) (802{val=get}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (215{val=)})) (235{val=.}) (802{val=getNode}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=propName}) (235{val=.}) (802{val=isString}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalStateException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=propName}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=propName}) (235{val=.}) (802{val=isString}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalStateException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=propName}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=parentType}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=nodeType}) (204{val==}) (32 (800{val=input}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=current}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (27 (27 (800{val=type}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=type}) (235{val=.}) (802{val=getToken}) (216{val=()})) (242{val=!=}) (40{val=Token.ARRAY_TYPE}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=invalidInitializers}) (235{val=.}) (802{val=contains}) (214{val=(}) (32 (800{val=initializer}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=errorReporter}) (235{val=.}) (802{val=error}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (800{val=sourceName}) (234{val=,}) (32 (802{val=lineno}) (214{val=(}) (40{val=loopNode.initializer}) (215{val=)})) (234{val=,}) (32 (802{val=charno}) (214{val=(}) (40{val=loopNode.initializer}) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=invalidInitializers}) (235{val=.}) (802{val=contains}) (214{val=(}) (32 (800{val=initializer}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=errorReporter}) (235{val=.}) (802{val=error}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (800{val=sourceName}) (234{val=,}) (32 (802{val=lineno}) (214{val=(}) (40{val=loopNode.initializer}) (215{val=)})) (234{val=,}) (32 (802{val=charno}) (214{val=(}) (40{val=loopNode.initializer}) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=nType}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=FOR}) (226{val=:})) (49 (326{val=case}) (800{val=FOR_OF}) (226{val=:})) (49 (326{val=case}) (800{val=WHILE}) (226{val=:})) (49 (326{val=case}) (800{val=DO}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=FOR}) (226{val=:})) (49 (326{val=case}) (800{val=FOR_OF}) (226{val=:})) (49 (326{val=case}) (800{val=WHILE}) (226{val=:})) (49 (326{val=case}) (800{val=DO}) (226{val=:})) (49 (326{val=case}) (800{val=SWITCH}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=GETPROP}) (226{val=:})) (41 (329{val=return}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=getString}) (216{val=()})) (227{val=;})) (49 (326{val=case}) (800{val=MEMBER_FUNCTION_DEF}) (226{val=:})) (41 (329{val=return}) (32 (800{val=n}) (235{val=.}) (802{val=getString}) (216{val=()})) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=expr}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (315{val=this}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (315{val=this}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (315{val=this}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (315{val=this}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (27 (27 (800{val=source}) (236{val===}) (500{val=null})) (250{val=||}) (27 (40{val=Token.FUNCTION}) (236{val===}) (32 (800{val=source}) (235{val=.}) (802{val=getToken}) (216{val=()})))) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (27 (27 (800{val=source}) (236{val===}) (500{val=null})) (250{val=||}) (27 (40{val=Token.FUNCTION}) (236{val===}) (32 (800{val=source}) (235{val=.}) (802{val=getToken}) (216{val=()})))) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=expectedArity}) (204{val==}) (32 (800{val=Token}) (235{val=.}) (802{val=arity}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=NAME}) (226{val=:})) (21 (32 (802{val=validateName}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (500{val=break;}) (49 (326{val=case}) (800{val=GETPROP}) (226{val=:})) (21 (32 (802{val=validateGetProp}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (500{val=break;}) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=UnsupportedOperationException})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=violation}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=validateChildCount}) (214{val=(}) (800{val=n}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (215{val=)})) (227{val=;})) (21 (32 (802{val=validateNameDeclarationHelper}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isNameDeclaration}) (214{val=(}) (800{val=n}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=validateNameDeclarationHelper}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=validateOptionalExpression}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=body}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.BLOCK})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=validateBlock}) (214{val=(}) (800{val=body}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=validateExpression}) (214{val=(}) (800{val=body}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (27 (32 (32 (800{val=n}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.EXPORT_SPECS})))
(AST_ROOT_SC2NF (32 (800{val=secondChild}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=control}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=VAR}) (226{val=:})) (49 (326{val=case}) (800{val=CATCH}) (226{val=:})) (21 (32 (800{val=names}) (235{val=.}) (802{val=add}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getString}) (216{val=()})) (215{val=)})) (227{val=;})) (500{val=break;}) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=c}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=FUNCTION}) (226{val=:})) (49 (326{val=case}) (800{val=AND}) (226{val=:})) (49 (326{val=case}) (800{val=OR}) (226{val=:})) (49 (326{val=case}) (800{val=HOOK}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=cArg}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (1 (218{val={}) (31 (78 (208{val=@}) (800{val=Override})) (83{val=public}) (39{val=boolean}) (802{val=apply}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=n})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=type}) (236{val===}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=FlowScope})) (59 (800{val=rightScope}) (204{val==}) (32 (800{val=reverseInterpreter}) (235{val=.}) (802{val=getPreciserScopeKnowingConditionOutcome}) (214{val=(}) (800{val=left}) (234{val=,}) (32 (800{val=leftOutcome}) (235{val=.}) (802{val=getOutcomeFlowScope}) (214{val=(}) (32 (800{val=left}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (800{val=nIsAnd}) (215{val=)})) (234{val=,}) (800{val=nIsAnd}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=left}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (7 (800{val=newScope}) (204{val==}) (32 (800{val=reverseInterpreter}) (235{val=.}) (802{val=getPreciserScopeKnowingConditionOutcome}) (214{val=(}) (800{val=condition}) (234{val=,}) (32 (800{val=conditionOutcomes}) (235{val=.}) (802{val=getOutcomeFlowScope}) (214{val=(}) (32 (800{val=condition}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (27 (800{val=branch}) (236{val===}) (40{val=Branch.ON_TRUE})) (215{val=)})) (234{val=,}) (27 (800{val=branch}) (236{val===}) (40{val=Branch.ON_TRUE})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (27 (32 (800{val=namedImports}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.IMPORT_SPECS})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.FUNCTION}) (234{val=,}) (32 (800{val=function}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})) (21 (32 (802{val=assertEquals}) (214{val=(}) (800{val=name}) (234{val=,}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getName}) (214{val=(}) (800{val=function}) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=arg}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (27 (32 (802{val=isASTNormalized}) (216{val=()})) (249{val=&&}) (27 (40{val=Token.NAME}) (236{val===}) (32 (800{val=constructorNameNode}) (235{val=.}) (802{val=getToken}) (216{val=()})))))
(AST_ROOT_SC2NF (32 (800{val=result}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=parentType}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (27 (32 (32 (800{val=export}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.EXPORT_SPECS})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=nextNode}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=typeNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.BANG})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=typeNode}) (204{val==}) (32 (800{val=typeNode}) (235{val=.}) (802{val=getFirstChild}) (216{val=()}))) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (800{val=typeNode}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=decl}) (204{val==}) (32 (32 (800{val=IR}) (235{val=.}) (802{val=declaration}) (214{val=(}) (32 (40{val=cls.name}) (235{val=.}) (802{val=cloneTree}) (216{val=()})) (234{val=,}) (40{val=cls.constructor.value}) (234{val=,}) (32 (800{val=exprRoot}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=srcref}) (214{val=(}) (800{val=exprRoot}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=fieldTypeNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.COLON})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=fieldNameNode}) (204{val==}) (32 (800{val=fieldTypeNode}) (235{val=.}) (802{val=getFirstChild}) (216{val=()}))) (227{val=;})) (21 (7 (800{val=hasType}) (204{val==}) (9{val=true})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=pType}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.NEW}) (234{val=,}) (32 (800{val=callsiteNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.CALL}) (234{val=,}) (32 (800{val=callsiteNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.CALL}) (234{val=,}) (32 (800{val=callsiteNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (27 (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.PARAM_LIST})))
(AST_ROOT_SC2NF (27 (32 (800{val=aliasReference}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.STRING_KEY})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.INSTANCEOF})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=reportIfNonObject}) (214{val=(}) (800{val=t}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (234{val=,}) (800{val=SUSPICIOUS_INSTANCEOF_LEFT_OPERAND}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.IN})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=reportIfNonObject}) (214{val=(}) (800{val=t}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (234{val=,}) (800{val=SUSPICIOUS_IN_OPERATOR}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=operatorToken}) (204{val==}) (32 (800{val=condition}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=builder}) (235{val=.}) (802{val=append}) (214{val=(}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (32 (40{val=decl.node}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=isGetProp}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=nType}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (27 (32 (800{val=val}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.OR})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=typeNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (242{val=!=}) (40{val=Token.EQUALS})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=report}) (214{val=(}) (800{val=typeNode}) (234{val=,}) (800{val=DEFAULT_PARAM_MUST_BE_MARKED_OPTIONAL}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (27 (27 (800{val=typeNode}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=typeNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.STRING}))))
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=left}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=TernaryValue})) (59 (800{val=result}) (204{val==}) (32 (802{val=evaluateComparison}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (800{val=left}) (234{val=,}) (800{val=right}) (234{val=,}) (800{val=shouldUseTypes}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=result}) (204{val==}) (32 (802{val=performArithmeticOp}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (234{val=,}) (800{val=left}) (234{val=,}) (800{val=right}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=argumentNode}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=subtree}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=subtree}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (61 (350{val=while}) (214{val=(}) (32 (800{val=moveIt}) (235{val=.}) (802{val=hasNext}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=actualTokens}) (235{val=.}) (802{val=add}) (214{val=(}) (32 (32 (800{val=moveIt}) (235{val=.}) (802{val=next}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (27 (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.CALL})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=parentType}) (204{val==}) (32 (800{val=useParent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=nodeType}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=parentNodeType}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=key}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (27 (800{val=sourceName}) (242{val=!=}) (500{val=null})) (215{val=)})) (227{val=;})) (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (27 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=type})) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (40{val=Token.FUNCTION}) (234{val=,}) (32 (800{val=fooNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=HOOK}) (226{val=:})) (49 (326{val=case}) (800{val=AND}) (226{val=:})) (49 (326{val=case}) (800{val=OR}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=BREAK}) (226{val=:})) (49 (326{val=case}) (800{val=CONTINUE}) (226{val=:})) (49 (326{val=case}) (800{val=RETURN}) (226{val=:})) (49 (326{val=case}) (800{val=THROW}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=blockChild}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=subtree}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=ancestor}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=type})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=matchingNodes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=node}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (7 (800{val=declType}) (204{val==}) (32 (800{val=variable}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=isNew}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=isCall}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=isHook}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (27 (36 (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=isAnd}) (216{val=()})) (215{val=)})) (250{val=||}) (36 (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=isOr}) (216{val=()})) (215{val=)}))) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (32 (800{val=hook}) (235{val=.}) (802{val=isHook}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=hook}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (27 (36 (214{val=(}) (32 (800{val=original}) (235{val=.}) (802{val=isAnd}) (216{val=()})) (215{val=)})) (250{val=||}) (36 (214{val=(}) (32 (800{val=original}) (235{val=.}) (802{val=isOr}) (216{val=()})) (215{val=)}))) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=original}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=secondArgumentType}) (204{val==}) (32 (800{val=secondArgument}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=offset}) (204{val==}) (16 (27 (800{val=provideStringNode}) (236{val===}) (500{val=null})) (233{val=?}) (34{val=NUMBER_CONSTANT}) (226{val=:}) (32 (802{val=getSourceInfoOffset}) (216{val=()})))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isUnresolved}) (216{val=()}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (32 (802{val=isKnown}) (214{val=(}) (800{val=n}) (215{val=)})) (249{val=&&}) (38 (207{val=!}) (32 (802{val=isTop}) (214{val=(}) (800{val=n}) (215{val=)}))) (249{val=&&}) (32 (802{val=isClassType}) (214{val=(}) (800{val=n}) (215{val=)})) (249{val=&&}) (38 (207{val=!}) (32 (802{val=isNativeObjectType}) (214{val=(}) (800{val=n}) (215{val=)}))) (249{val=&&}) (38 (207{val=!}) (32 (802{val=isWhitelistedType}) (214{val=(}) (800{val=n}) (215{val=)})))) (227{val=;})))
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (802{val=isTypeVariable}) (214{val=(}) (800{val=n}) (215{val=)}))))
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (802{val=isTypeVariable}) (214{val=(}) (800{val=n}) (215{val=)}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (27 (800{val=type}) (236{val===}) (500{val=null})) (250{val=||}) (32 (800{val=type}) (235{val=.}) (802{val=isUnknownType}) (216{val=()}))) (250{val=||}) (32 (800{val=type}) (235{val=.}) (802{val=isTop}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=MatchResult})) (214{val=(}) (800{val=allowLooseMatches}) (234{val=,}) (800{val=allowLooseMatches}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setPreserveGoogProvidesAndRequires}) (214{val=(}) (9{val=true}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=compilerOptions}) (235{val=.}) (802{val=setPreserveGoogProvidesAndRequires}) (214{val=(}) (9{val=true}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=importNode}) (235{val=.}) (802{val=useSourceInfoFrom}) (214{val=(}) (800{val=export}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=n}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=stringKey}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (800{val=stringKey}) (214{val=(}) (800{val=name}) (234{val=,}) (32 (32 (800{val=memberDef}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=parent}) (235{val=.}) (802{val=isExprResult}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=parent}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (800{val=parent}) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=elemValue}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (32 (800{val=parent}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=n}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=body}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (802{val=block}) (214{val=(}) (32 (800{val=IR}) (235{val=.}) (802{val=returnNode}) (214{val=(}) (32 (800{val=returnValue}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=parent}) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=export}) (234{val=,}) (32 (800{val=declaration}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=newBlock}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=typeString}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=rep}) (235{val=.}) (802{val=isExprResult}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=rep}) (204{val==}) (32 (800{val=rep}) (235{val=.}) (802{val=getFirstChild}) (216{val=()}))) (227{val=;})) (21 (32 (800{val=rep}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=changeProxy}) (235{val=.}) (802{val=replaceWith}) (214{val=(}) (800{val=grandparent}) (234{val=,}) (800{val=parent}) (234{val=,}) (32 (32 (800{val=parent}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=replacement}) (204{val==}) (32 (800{val=firstArg}) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=rhs}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (800{val=ancestor}) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=last}) (234{val=,}) (800{val=rhs}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=rhs}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=child}) (204{val==}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=argNode}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=assignmentValue}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=simplified}) (204{val==}) (32 (14 (304{val=new}) (43 (801{val=Node})) (214{val=(}) (800{val=type}) (234{val=,}) (32 (800{val=condition}) (235{val=.}) (802{val=detach}) (216{val=()})) (234{val=,}) (32 (802{val=simplifyShortCircuitBranch}) (214{val=(}) (800{val=body}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=useSourceInfoIfMissingFrom}) (214{val=(}) (800{val=hook}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=original}) (235{val=.}) (802{val=getParent}) (216{val=()})) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=original}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))) (21 (32 (800{val=replacements}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=original}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=newGetProp}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (802{val=getprop}) (214{val=(}) (32 (800{val=target}) (235{val=.}) (802{val=detach}) (216{val=()})) (234{val=,}) (32 (800{val=prop}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=i}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (32 (32 (800{val=first}) (235{val=.}) (802{val=getString}) (216{val=()})) (235{val=.}) (802{val=isEmpty}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=add}) (204{val==}) (32 (32 (800{val=add}) (235{val=.}) (802{val=getSecondChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=PrototypeMemberDeclaration})) (800{val=declar})) (226{val=:}) (40{val=instance.declarations}) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=block}) (235{val=.}) (802{val=addChildToBack}) (214{val=(}) (32 (40{val=declar.node}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=preserveGoogProvidesAndRequires}) (249{val=&&}) (32 (800{val=explicitNode}) (235{val=.}) (802{val=hasChildren}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))) (21 (32 (800{val=explicitNode}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=typeDeclaration}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=forwardDeclareType}) (214{val=(}) (800{val=typeDeclaration}) (215{val=)})) (227{val=;})) (21 (32 (800{val=parent}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=value}) (204{val==}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getChildAtIndex}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (215{val=)})) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=closureRequire})) (226{val=:}) (800{val=requiresToBeRemoved}) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=closureRequire}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=arg}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=method}) (204{val==}) (32 (32 (800{val=member}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (59 (800{val=stringKey}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (800{val=stringKey}) (214{val=(}) (16 (36 (214{val=(}) (27 (32 (800{val=member}) (235{val=.}) (802{val=isGetterDef}) (216{val=()})) (250{val=||}) (32 (800{val=member}) (235{val=.}) (802{val=getBooleanProp}) (214{val=(}) (40{val=Node.COMPUTED_PROP_GETTER}) (215{val=)}))) (215{val=)})) (233{val=?}) (45{val=STRING_CONSTANT}) (226{val=:}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=function}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)}))))
(AST_ROOT_SC2NF (21 (7 (800{val=constructor}) (204{val==}) (32 (32 (800{val=member}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=child})) (226{val=:}) (32 (800{val=functionBody}) (235{val=.}) (802{val=children}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=newBlock}) (235{val=.}) (802{val=addChildToBack}) (214{val=(}) (32 (800{val=child}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=stringKey}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (800{val=stringKey}) (214{val=(}) (800{val=name}) (234{val=,}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=subtree}) (235{val=.}) (802{val=getChildCount}) (216{val=()})) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (32 (800{val=subtree}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=c})) (226{val=:}) (32 (800{val=externs}) (235{val=.}) (802{val=children}) (216{val=()})) (215{val=)}) (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=c}) (235{val=.}) (802{val=hasChildren}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=c}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=expected}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=expectedRoot}) (204{val==}) (32 (802{val=parseExpectedJs}) (214{val=(}) (800{val=expected}) (215{val=)}))) (227{val=;})) (21 (32 (800{val=expectedRoot}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=Node})) (59 (800{val=ancParent}) (204{val==}) (32 (800{val=ancestor}) (235{val=.}) (802{val=getParent}) (216{val=()}))) (227{val=;})) (21 (32 (800{val=ancParent}) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=ancestor}) (234{val=,}) (32 (32 (800{val=ancestor}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=node}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=node}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=node}) (235{val=.}) (802{val=getParent}) (216{val=()})) (242{val=!=}) (500{val=null}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=node}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (800{val=node}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=report}) (214{val=(}) (32 (800{val=JSError}) (235{val=.}) (802{val=make}) (214{val=(}) (800{val=requireNode}) (234{val=,}) (40{val=MISSING_MODULE_OR_PROVIDE.level}) (234{val=,}) (800{val=MISSING_MODULE_OR_PROVIDE}) (234{val=,}) (800{val=legacyNamespace}) (215{val=)})) (215{val=)})) (227{val=;})) (21 (32 (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getEnclosingStatement}) (214{val=(}) (800{val=requireNode}) (215{val=)})) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (500{val=continue;}) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=moduleBlockNode}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=returnStatementNode}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getEnclosingStatement}) (214{val=(}) (800{val=call}) (215{val=)})) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (31 (83{val=private}) (39{val=void}) (802{val=updateGoogDeclareLegacyNamespace}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=call})) (215{val=)}) (8 (218{val={}) (21 (32 (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getEnclosingStatement}) (214{val=(}) (800{val=call}) (215{val=)})) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (40{val=currentScript.declareLegacyNamespace})) (215{val=)}) (8 (218{val={}) (21 (32 (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getEnclosingStatement}) (214{val=(}) (800{val=call}) (215{val=)})) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=secondExpr}) (242{val=!=}) (800{val=firstExpr})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=secondExpr}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=secondExpr}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (802{val=nullNode}) (216{val=()}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (40{val=bind.target}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=declParent}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=value}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=value}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))) (21 (7 (800{val=varNode}) (204{val==}) (800{val=parent})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=callbackFunction}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=objlit}) (235{val=.}) (802{val=removeChild}) (214{val=(}) (800{val=key}) (215{val=)})) (227{val=;})) (21 (32 (800{val=value}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=replacement}) (204{val==}) (32 (800{val=value}) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=destObj}) (204{val==}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getSecondChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=newNode}) (204{val==}) (14 (304{val=new}) (43 (801{val=Node})) (214{val=(}) (800{val=newType}) (234{val=,}) (32 (800{val=left}) (235{val=.}) (802{val=detach}) (216{val=()})) (234{val=,}) (32 (800{val=newRight}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isNumericResult}) (214{val=(}) (800{val=left}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=parent}) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=n}) (234{val=,}) (32 (800{val=left}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (21 (32 (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (800{val=left}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=root}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=root}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (32 (800{val=callNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=callNode}) (234{val=,}) (32 (800{val=replacementNode}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=clinitAssignedValue}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=follow}) (236{val===}) (500{val=null})) (250{val=||}) (32 (802{val=areMatchingExits}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=follow}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=n}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (500{val=null}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=block}) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=maybeIf}) (234{val=,}) (32 (32 (800{val=maybeIf}) (235{val=.}) (802{val=getLastChild}) (216{val=()})) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=colon}) (235{val=.}) (802{val=addChildToBack}) (214{val=(}) (32 (800{val=member}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=n}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=child})) (226{val=:}) (800{val=stringKeys}) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=child}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=member}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=indexSignature}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=comma}) (235{val=.}) (802{val=addChildToBack}) (214{val=(}) (32 (800{val=leftMostChild}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=condStatement}) (204{val==}) (32 (32 (800{val=IR}) (235{val=.}) (802{val=exprResult}) (214{val=(}) (32 (800{val=cond}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=srcref}) (214{val=(}) (800{val=cond}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=statement}) (204{val==}) (32 (32 (800{val=IR}) (235{val=.}) (802{val=exprResult}) (214{val=(}) (32 (800{val=cond}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=useSourceInfoIfMissingFrom}) (214{val=(}) (800{val=cond}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=n}) (234{val=,}) (32 (800{val=caseBlock}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=maybeBreak}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (32 (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=subtree}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (21 (7 (800{val=subtree}) (204{val==}) (500{val=null})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (32 (800{val=subtree}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=replaceChild}) (214{val=(}) (800{val=subtree}) (234{val=,}) (32 (800{val=right}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (21 (32 (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (800{val=right}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=n}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=var}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=newDeclaration}) (204{val==}) (32 (32 (800{val=IR}) (235{val=.}) (802{val=var}) (214{val=(}) (32 (800{val=name}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=useSourceInfoFrom}) (214{val=(}) (800{val=declarationList}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=inlineValue}) (214{val=(}) (800{val=v}) (234{val=,}) (800{val=ref}) (234{val=,}) (32 (800{val=value}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=opDetached}) (204{val==}) (32 (800{val=op}) (235{val=.}) (802{val=detach}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=potentialCallee}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=expectedRoot}) (204{val==}) (32 (802{val=parseExpectedJs}) (214{val=(}) (32 (800{val=ImmutableList}) (235{val=.}) (802{val=of}) (214{val=(}) (32 (800{val=SourceFile}) (235{val=.}) (802{val=fromCode}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (800{val=expected}) (215{val=)})) (215{val=)})) (215{val=)}))) (227{val=;})) (21 (32 (800{val=expectedRoot}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (38 (207{val=!}) (32 (800{val=t}) (235{val=.}) (802{val=inGlobalScope}) (216{val=()}))) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isHoistedFunctionDeclaration}) (214{val=(}) (800{val=value}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=parent}) (235{val=.}) (802{val=addChildToFront}) (214{val=(}) (32 (800{val=value}) (235{val=.}) (802{val=detach}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=body}) (235{val=.}) (802{val=detach}) (216{val=()})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=decl}) (204{val==}) (32 (800{val=IR}) (235{val=.}) (802{val=declaration}) (214{val=(}) (32 (800{val=pattern}) (235{val=.}) (802{val=detach}) (216{val=()})) (234{val=,}) (32 (800{val=IR}) (235{val=.}) (802{val=name}) (214{val=(}) (800{val=tempVarName}) (215{val=)})) (234{val=,}) (800{val=declarationType}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (74 (43 (800{val=List})) (230{val=<}) (43 (800{val=Node})) (231{val=>})) (59 (800{val=assignments}) (204{val==}) (14 (304{val=new}) (74 (43 (801{val=ArrayList})) (232{val=<>})) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (74 (43 (800{val=List})) (230{val=<}) (43 (800{val=Node})) (231{val=>})) (59 (800{val=nodes}) (204{val==}) (14 (304{val=new}) (74 (43 (801{val=ArrayList})) (232{val=<>})) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (800{val=JSType})) (802{val=getJSTypeBeforeCast}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=JSType})) (215{val=)}) (32 (802{val=getTypeIBeforeCast}) (216{val=()}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=externs}) (204{val==}) (27 (800{val=DEFAULT_EXTERNS}) (200{val=+}) (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=public}) (43 (801{val=TypeI})) (802{val=evaluateTypeExpressionInGlobalScope}) (214{val=(}) (44 (43 (801{val=JSTypeExpression})) (800{val=expr})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=createTypeFromCommentNode}) (214{val=(}) (32 (800{val=expr}) (235{val=.}) (802{val=getRoot}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=public}) (39{val=boolean}) (802{val=isInstanceType}) (216{val=()}) (8 (218{val={}) (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (32 (315{val=this}) (235{val=.}) (802{val=isSingletonObj}) (216{val=()})) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (32 (315{val=this}) (235{val=.}) (802{val=getNominalTypeIfSingletonObj}) (216{val=()})) (235{val=.}) (802{val=isClassy}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=public}) (39{val=boolean}) (802{val=isUnresolved}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=isUnknown}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=fn}) (235{val=.}) (802{val=isLooseSubtypeOf}) (214{val=(}) (40{val=other.fn}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=UpdateThisAndArgumentsReferences})) (59 (800{val=updater}) (204{val==}) (14 (304{val=new}) (43 (801{val=UpdateThisAndArgumentsReferences})) (214{val=(}) (800{val=compiler}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=passUnderTest})) (204{val==}) (14 (304{val=new}) (43 (801{val=NameBasedDefinitionProvider})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=compiler})) (204{val==}) (800{val=compiler})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=NameBasedDefinitionProvider})) (59 (800{val=defFinder}) (204{val==}) (14 (304{val=new}) (43 (801{val=NameBasedDefinitionProvider})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=public}) (39{val=void}) (802{val=testHookOperators4}) (214{val=(}) (215{val=)}) (301{val=throws}) (43 (800{val=Exception})) (8 (218{val={}) (21 (32 (802{val=checkMarkedCalls}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=ImmutableList}) (235{val=.}) (230{val=<}) (43 (800{val=String})) (231{val=>}) (802{val=of}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (802{val=DefinitionUseSiteFinder}) (214{val=(}) (44 (43 (801{val=AbstractCompiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=false}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=nameUseSiteMultimap})) (204{val==}) (32 (800{val=LinkedHashMultimap}) (235{val=.}) (802{val=create}) (216{val=()}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (7 (800{val=defFinder}) (204{val==}) (14 (304{val=new}) (43 (801{val=NameBasedDefinitionProvider})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=NameBasedDefinitionProvider})) (59 (800{val=defFinder}) (204{val==}) (14 (304{val=new}) (43 (801{val=NameBasedDefinitionProvider})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=NameBasedDefinitionProvider})) (59 (800{val=defFinder}) (204{val==}) (14 (304{val=new}) (43 (801{val=NameBasedDefinitionProvider})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=typeCheck}) (214{val=(}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (234{val=,}) (40{val=NewTypeInference.ADDING_PROPERTY_TO_NON_OBJECT}) (234{val=,}) (40{val=NewTypeInference.INEXISTENT_PROPERTY}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=typeCheck}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (40{val=NewTypeInference.ADDING_PROPERTY_TO_NON_OBJECT}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (802{val=isInTestMode}) (216{val=()})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=StringWriter})) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (802{val=isInTestMode}) (216{val=()})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=StringWriter})) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=processCheck}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=root}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapCheck}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=phaseopt}) (235{val=.}) (802{val=process}) (214{val=(}) (800{val=externsNode}) (234{val=,}) (800{val=externAndJsRoot}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=checkVariableReferencesForTranspileOnly}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=J2clSourceFileChecker}) (235{val=.}) (802{val=shouldRunJ2clPasses}) (214{val=(}) (800{val=compiler}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=J2clSourceFileChecker}) (235{val=.}) (802{val=shouldRunJ2clPasses}) (214{val=(}) (800{val=compiler}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=J2clSourceFileChecker}) (235{val=.}) (802{val=shouldRunJ2clPasses}) (214{val=(}) (800{val=compiler}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=root}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=J2clSourceFileChecker}) (235{val=.}) (802{val=shouldRunJ2clPasses}) (214{val=(}) (800{val=compiler}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=testSame}) (214{val=(}) (32 (800{val=ImmutableList}) (235{val=.}) (802{val=of}) (214{val=(}) (800{val=NO_J2CL_SOURCE_FILE}) (234{val=,}) (800{val=NO_J2CL_SOURCE_FILE2}) (215{val=)})) (215{val=)})) (227{val=;})) (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=compiler}) (235{val=.}) (802{val=getAnnotation}) (214{val=(}) (40{val=J2clSourceFileChecker.HAS_J2CL_ANNOTATION_KEY}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=isEqualTo}) (214{val=(}) (40{val=Boolean.FALSE}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=testSame}) (214{val=(}) (32 (800{val=ImmutableList}) (235{val=.}) (802{val=of}) (214{val=(}) (800{val=NO_J2CL_SOURCE_FILE}) (234{val=,}) (800{val=J2CL_SOURCE_FILE}) (234{val=,}) (800{val=NO_J2CL_SOURCE_FILE2}) (215{val=)})) (215{val=)})) (227{val=;})) (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=compiler}) (235{val=.}) (802{val=getAnnotation}) (214{val=(}) (40{val=J2clSourceFileChecker.HAS_J2CL_ANNOTATION_KEY}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=isEqualTo}) (214{val=(}) (40{val=Boolean.TRUE}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=J2clSourceFileChecker}) (235{val=.}) (802{val=shouldRunJ2clPasses}) (214{val=(}) (800{val=compiler}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))) (21 (32 (14 (304{val=new}) (43 (801{val=StaticFieldGetterSetterInliner})) (214{val=(}) (800{val=root}) (215{val=)})) (235{val=.}) (802{val=run}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=recvType}) (204{val==}) (32 (800{val=recvType}) (235{val=.}) (802{val=withProperty}) (214{val=(}) (800{val=pname}) (234{val=,}) (40{val=JSType.UNKNOWN}) (215{val=)}))) (227{val=;})) (21 (7 (800{val=inEnv}) (204{val==}) (32 (802{val=updateLvalueTypeInEnv}) (214{val=(}) (800{val=inEnv}) (234{val=,}) (800{val=obj}) (234{val=,}) (40{val=recvLvalue.ptr}) (234{val=,}) (800{val=recvType}) (215{val=)}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=js}) (204{val==}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=testSame}) (214{val=(}) (27 (800{val=EXTERNS}) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (27 (800{val=code}) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=RefactoringDriver})) (59 (800{val=driver}) (204{val==}) (32 (32 (32 (14 (304{val=new}) (43 (40{val=RefactoringDriver.Builder})) (214{val=(}) (800{val=scanner}) (215{val=)})) (235{val=.}) (802{val=addExternsFromCode}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=externs})) (215{val=)})) (235{val=.}) (802{val=addInputsFromCode}) (214{val=(}) (800{val=originalCode}) (215{val=)})) (235{val=.}) (802{val=build}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=ImmutableList}) (235{val=.}) (802{val=of}) (214{val=(}) (32 (800{val=SourceFile}) (235{val=.}) (802{val=fromCode}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=externs})) (215{val=)})) (215{val=)})))
(AST_ROOT_SC2NF (32 (802{val=isSomeUnknownType}) (214{val=(}) (800{val=n}) (215{val=)})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=tracker}) (204{val==}) (14 (304{val=new}) (43 (801{val=PerformanceTracker})) (214{val=(}) (800{val=externsRoot}) (234{val=,}) (800{val=jsRoot}) (234{val=,}) (40{val=options.tracer}) (234{val=,}) (22 (315{val=this}) (235{val=.}) (800{val=outStream})) (215{val=)}))) (227{val=;})) (21 (32 (802{val=addChangeHandler}) (214{val=(}) (32 (800{val=tracker}) (235{val=.}) (802{val=getCodeChangeHandler}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=root}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=phaseopt}) (235{val=.}) (802{val=process}) (214{val=(}) (800{val=externsNode}) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=process}) (214{val=(}) (500{val=null}) (234{val=,}) (800{val=scriptRoot}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=checkVariableReferences}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=public}) (83{val=static}) (43 (801{val=ResourceBundle})) (802{val=getBundle}) (214{val=(}) (44 (43 (801{val=String})) (800{val=baseName})) (234{val=,}) (44 (43 (801{val=Locale})) (800{val=locale})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getBundle}) (214{val=(}) (800{val=baseName}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (38 (207{val=!}) (22 (315{val=this}) (235{val=.}) (800{val=isFinalized}))) (215{val=)})) (227{val=;})) (21 (48 (349{val=super}) (235{val=.}) (802{val=addUndeclaredProperty}) (214{val=(}) (800{val=pname}) (234{val=,}) (800{val=defSite}) (234{val=,}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNKNOWN})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=type}) (236{val===}) (500{val=null})) (249{val=&&}) (800{val=isConstant})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNKNOWN}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (32 (22 (315{val=this}) (235{val=.}) (800{val=randomProps})) (235{val=.}) (802{val=with}) (214{val=(}) (800{val=pname}) (234{val=,}) (32 (800{val=Property}) (235{val=.}) (802{val=make}) (214{val=(}) (16 (27 (800{val=type}) (236{val===}) (500{val=null})) (233{val=?}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNKNOWN})) (226{val=:}) (800{val=type})) (234{val=,}) (800{val=type}) (215{val=)})) (215{val=)})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (38 (207{val=!}) (32 (800{val=t}) (235{val=.}) (802{val=isUnknown}) (216{val=()}))) (249{val=&&}) (38 (207{val=!}) (32 (800{val=t}) (235{val=.}) (802{val=equals}) (214{val=(}) (32 (800{val=JSType}) (235{val=.}) (802{val=fromTypeVar}) (214{val=(}) (32 (802{val=getCommonTypes}) (216{val=()})) (234{val=,}) (800{val=typeVar}) (215{val=)})) (215{val=)})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=typeMap}) (235{val=.}) (802{val=isEmpty}) (216{val=()})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (800{val=Property}) (235{val=.}) (802{val=make}) (214{val=(}) (22 (32 (802{val=getCommonTypes}) (216{val=()})) (235{val=.}) (800{val=UNKNOWN})) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=NominalType})) (59 (800{val=thisWithoutTypemap}) (204{val==}) (32 (22 (315{val=this}) (235{val=.}) (800{val=rawType})) (235{val=.}) (802{val=getAsNominalType}) (216{val=()}))) (227{val=;})) (41 (329{val=return}) (32 (800{val=thisWithoutTypemap}) (235{val=.}) (802{val=instantiateGenerics}) (214{val=(}) (22 (32 (802{val=getCommonTypes}) (216{val=()})) (235{val=.}) (800{val=MAP_TO_UNKNOWN})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=result}) (204{val==}) (22 (32 (802{val=getCommonTypes}) (216{val=()})) (235{val=.}) (800{val=TOP}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=result}) (204{val==}) (22 (32 (802{val=getCommonTypes}) (216{val=()})) (235{val=.}) (800{val=BOTTOM}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (38 (207{val=!}) (32 (802{val=isGeneric}) (216{val=()}))) (250{val=||}) (32 (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=MAP_TO_UNKNOWN})) (235{val=.}) (802{val=equals}) (214{val=(}) (800{val=concreteTypes}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=substituteNominalGenerics}) (214{val=(}) (800{val=concreteTypes}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=FunctionTypeBuilder})) (59 (800{val=builder}) (204{val==}) (14 (304{val=new}) (43 (801{val=FunctionTypeBuilder})) (214{val=(}) (40{val=f1.commonTypes}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=f}) (235{val=.}) (802{val=isGeneric}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=f}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (800{val=f}) (235{val=.}) (802{val=instantiateGenerics}) (214{val=(}) (40{val=f.commonTypes.MAP_TO_UNKNOWN}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (38 (207{val=!}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=allowMethodsAsFunctions}))) (249{val=&&}) (27 (22 (315{val=this}) (235{val=.}) (800{val=receiverType})) (242{val=!=}) (500{val=null}))) (249{val=&&}) (27 (40{val=other.receiverType}) (236{val===}) (500{val=null}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=FunctionTypeBuilder})) (59 (800{val=builder}) (204{val==}) (14 (304{val=new}) (43 (801{val=FunctionTypeBuilder})) (214{val=(}) (40{val=f1.commonTypes}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=optionalFormals}) (235{val=.}) (802{val=add}) (214{val=(}) (32 (800{val=JSType}) (235{val=.}) (802{val=join}) (214{val=(}) (800{val=t}) (234{val=,}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNDEFINED})) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (27 (27 (27 (315{val=this}) (236{val===}) (800{val=other})) (250{val=||}) (27 (40{val=other.ns}) (242{val=!=}) (500{val=null}))) (250{val=||}) (38 (207{val=!}) (32 (32 (800{val=other}) (235{val=.}) (802{val=getNominalType}) (216{val=()})) (235{val=.}) (802{val=equals}) (214{val=(}) (32 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (802{val=getObjectType}) (216{val=()})) (215{val=)})))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=other}) (236{val===}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=TOP_OBJECTTYPE}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=other}) (236{val===}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=TOP_OBJECTTYPE}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=newPropType}) (235{val=.}) (802{val=isBottom}) (216{val=()})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (22 (32 (800{val=newPropType}) (235{val=.}) (802{val=getCommonTypes}) (216{val=()})) (235{val=.}) (800{val=BOTTOM_PROPERTY_MAP})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=result}) (204{val==}) (40{val=commonTypes.BOTTOM})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=callee}) (235{val=.}) (802{val=matchesQualifiedName}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (40{val=commonTypes.STRING}) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (7 (800{val=recvType}) (204{val==}) (32 (800{val=recvType}) (235{val=.}) (802{val=removeType}) (214{val=(}) (40{val=commonTypes.NULL}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=propInferredFunType}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=rawType}) (235{val=.}) (802{val=addUndeclaredClassProperty}) (214{val=(}) (800{val=pname}) (234{val=,}) (800{val=propInferredFunType}) (234{val=,}) (800{val=getProp}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (800{val=rawType}) (235{val=.}) (802{val=addUndeclaredClassProperty}) (214{val=(}) (800{val=pname}) (234{val=,}) (40{val=commonTypes.UNKNOWN}) (234{val=,}) (800{val=getProp}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=t}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=t}) (204{val==}) (40{val=commonTypes.UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=FunctionType})) (59 (800{val=getInstanceFunType}) (204{val==}) (32 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=FunctionTypeBuilder})) (214{val=(}) (800{val=commonTypes}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=addRetType}) (214{val=(}) (800{val=instanceType}) (215{val=)})) (235{val=.}) (802{val=buildFunction}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=t}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=t}) (204{val==}) (40{val=commonTypes.UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (22 (315{val=this}) (235{val=.}) (800{val=currentScope})) (235{val=.}) (802{val=addLocal}) (214{val=(}) (800{val=varName}) (234{val=,}) (40{val=commonTypes.UNKNOWN}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=resultType}) (204{val==}) (40{val=commonTypes.TOP})) (227{val=;})))
(AST_ROOT_SC2NF (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=String})) (800{val=typedefName})) (226{val=:}) (32 (800{val=localTypedefs}) (235{val=.}) (802{val=keySet}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=locals}) (235{val=.}) (802{val=put}) (214{val=(}) (800{val=typedefName}) (234{val=,}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNDEFINED})) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=isTypeVar}) (204{val==}) (9{val=true})) (227{val=;})) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=JSType}) (235{val=.}) (802{val=fromTypeVar}) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (234{val=,}) (32 (800{val=declaredType}) (235{val=.}) (802{val=getTypeVariableDefinedLocally}) (214{val=(}) (800{val=name}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=addNamespace}) (214{val=(}) (800{val=qnameNode}) (234{val=,}) (14 (304{val=new}) (43 (801{val=NamespaceLit})) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (234{val=,}) (32 (800{val=qnameNode}) (235{val=.}) (802{val=getQualifiedName}) (216{val=()})) (234{val=,}) (800{val=qnameNode}) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (22 (315{val=this}) (235{val=.}) (800{val=root})) (235{val=.}) (802{val=setTypeI}) (214{val=(}) (32 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (802{val=fromFunctionType}) (214{val=(}) (32 (800{val=declaredType}) (235{val=.}) (802{val=toFunctionType}) (216{val=()})) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=anyNumOrStr}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (800{val=t}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=NUMBER_OR_STRING})) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (800{val=t}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (800{val=anyNumOrStr}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=numberOrNumber}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (800{val=t}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=STRING})) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (800{val=t}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (800{val=stringOrString}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=numberOrNumber}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (800{val=t}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=NUMBER})) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (800{val=t}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (800{val=numberOrNumber}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (7 (800{val=stringOrString}) (204{val==}) (32 (800{val=JSType}) (235{val=.}) (802{val=join}) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=STRING})) (234{val=,}) (800{val=stringInstance}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (7 (800{val=numberOrNumber}) (204{val==}) (32 (800{val=JSType}) (235{val=.}) (802{val=join}) (214{val=(}) (22 (315{val=this}) (235{val=.}) (800{val=NUMBER})) (234{val=,}) (800{val=numberInstance}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (43 (801{val=ObjectType})) (802{val=getStringInstanceObjType}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=stringInstanceObjtype}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=stringInstanceObjtype}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=TOP_OBJECTTYPE}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (43 (801{val=ObjectType})) (802{val=getBooleanInstanceObjType}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=booleanInstanceObjtype}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=booleanInstanceObjtype}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=TOP_OBJECTTYPE}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (43 (801{val=ObjectType})) (802{val=getNumberInstanceObjType}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=numberInstanceObjtype}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=numberInstanceObjtype}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=TOP_OBJECTTYPE}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (801{val=JSType})) (802{val=getStringInstance}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=stringInstance}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=stringInstance}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=STRING}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (801{val=JSType})) (802{val=getBooleanInstance}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=booleanInstance}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=booleanInstance}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=BOOLEAN}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (801{val=JSType})) (802{val=getNumberInstance}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=numberInstance}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=numberInstance}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=NUMBER}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (801{val=JSType})) (802{val=getRegexpType}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (16 (27 (800{val=regexpInstance}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=regexpInstance}) (226{val=:}) (22 (315{val=this}) (235{val=.}) (800{val=UNKNOWN}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=arguments})) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (22 (315{val=this}) (235{val=.}) (800{val=UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=arrayType}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (22 (315{val=this}) (235{val=.}) (800{val=UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (802{val=fromFunctionType}) (214{val=(}) (800{val=ctorType}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=ObjectType})) (59 (800{val=arrayType}) (204{val==}) (32 (32 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (802{val=getArrayInstance}) (216{val=()})) (235{val=.}) (802{val=getObjTypeIfSingletonObj}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (802{val=isTrueOrTruthy}) (216{val=()})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=FALSY})) (227{val=;})) (219{val=}})) (322{val=else}) (25 (313{val=if}) (214{val=(}) (32 (802{val=isFalseOrFalsy}) (216{val=()})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=TRUTHY}) (227{val=;})) (219{val=}})))))
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=makeType}) (214{val=(}) (40{val=lhs.commonTypes}) (234{val=,}) (800{val=newtype}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=JSType})) (59 (800{val=maybeScalar}) (204{val==}) (32 (800{val=ObjectType}) (235{val=.}) (802{val=mayTurnLooseObjectToScalar}) (214{val=(}) (800{val=t}) (234{val=,}) (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (215{val=)}))) (227{val=;})) (25 (313{val=if}) (214{val=(}) (27 (800{val=t}) (242{val=!=}) (800{val=maybeScalar})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=maybeScalar}) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=result}) (204{val==}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=BOTTOM}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=result}) (204{val==}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=TOP}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (39{val=boolean}) (59 (800{val=noCycles}) (204{val==}) (32 (800{val=constructorType}) (235{val=.}) (802{val=addInterfaces}) (214{val=(}) (16 (32 (800{val=extendedInterfaces}) (235{val=.}) (802{val=isEmpty}) (216{val=()})) (233{val=?}) (32 (800{val=ImmutableSet}) (235{val=.}) (802{val=of}) (214{val=(}) (32 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (802{val=getObjectType}) (216{val=()})) (215{val=)})) (226{val=:}) (800{val=extendedInterfaces})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=NominalType})) (59 (800{val=builtinObject}) (204{val==}) (32 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (802{val=getObjectType}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=builder}) (235{val=.}) (802{val=addRetType}) (214{val=(}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNDEFINED})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=builder}) (235{val=.}) (802{val=addRestFormals}) (214{val=(}) (16 (27 (800{val=t}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=t}) (226{val=:}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNKNOWN}))) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (41 (329{val=return}) (16 (32 (800{val=t}) (235{val=.}) (802{val=isSingletonObjWithNull}) (216{val=()})) (233{val=?}) (32 (800{val=t}) (235{val=.}) (802{val=removeType}) (214{val=(}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=NULL})) (215{val=)})) (226{val=:}) (800{val=t})) (227{val=;})))
(AST_ROOT_SC2NF (21 (7 (800{val=tdType}) (204{val==}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNKNOWN}))) (227{val=;})))
(AST_ROOT_SC2NF (54 (335{val=try}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getTypeFromCommentHelper}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=registry}) (234{val=,}) (800{val=typeParameters}) (215{val=)})) (227{val=;})) (219{val=}})) (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=UnknownTypeException})) (800{val=e})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (22 (22 (315{val=this}) (235{val=.}) (800{val=commonTypes})) (235{val=.}) (800{val=UNKNOWN})) (227{val=;})) (219{val=}})))))
(AST_ROOT_SC2NF (21 (7 (40{val=lvalue.type}) (204{val==}) (16 (32 (40{val=lvalue.type}) (235{val=.}) (802{val=mayHaveProp}) (214{val=(}) (800{val=pname}) (215{val=)})) (233{val=?}) (32 (40{val=lvalue.type}) (235{val=.}) (802{val=getProp}) (214{val=(}) (800{val=pname}) (215{val=)})) (226{val=:}) (800{val=UNKNOWN}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (800{val=doSlicing}) (215{val=)}) (8 (218{val={}) (21 (7 (40{val=pair.env}) (204{val==}) (32 (802{val=envPutType}) (214{val=(}) (40{val=pair.env}) (234{val=,}) (800{val=name}) (234{val=,}) (16 (27 (800{val=declType}) (242{val=!=}) (500{val=null})) (233{val=?}) (800{val=declType}) (226{val=:}) (800{val=UNKNOWN})) (215{val=)}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=lvalueType}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (800{val=TOP_OBJECT}) (215{val=)}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=requiredType}) (235{val=.}) (802{val=mayHaveProp}) (214{val=(}) (800{val=pname}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=reqPtype}) (204{val==}) (32 (800{val=requiredType}) (235{val=.}) (802{val=getProp}) (214{val=(}) (800{val=pname}) (215{val=)}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=reqPtype}) (204{val==}) (800{val=UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=EnvTypePair})) (214{val=(}) (800{val=env}) (234{val=,}) (800{val=UNKNOWN}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (800{val=formalType}) (235{val=.}) (802{val=isBottom}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=formalType}) (204{val==}) (800{val=UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (7 (40{val=pair.type}) (204{val==}) (800{val=BOOLEAN})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=JSType})) (59 (800{val=operandType}) (204{val==}) (16 (32 (800{val=requiredType}) (235{val=.}) (802{val=isNumber}) (216{val=()})) (233{val=?}) (800{val=NUMBER}) (226{val=:}) (800{val=UNKNOWN}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=private}) (43 (801{val=EnvTypePair})) (802{val=analyzeExprBwd}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=expr})) (234{val=,}) (44 (43 (801{val=TypeEnv})) (800{val=outEnv})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=analyzeExprBwd}) (214{val=(}) (800{val=expr}) (234{val=,}) (800{val=outEnv}) (234{val=,}) (800{val=UNKNOWN}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=outerType}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=outerType}) (204{val==}) (800{val=UNKNOWN})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=JSType})) (59 (800{val=tmp}) (204{val==}) (32 (800{val=t}) (235{val=.}) (802{val=getIndexedType}) (216{val=()}))) (227{val=;})) (41 (329{val=return}) (16 (27 (800{val=tmp}) (236{val===}) (500{val=null})) (233{val=?}) (800{val=UNKNOWN}) (226{val=:}) (800{val=tmp})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=reqPtype}) (204{val==}) (7 (800{val=specPtype}) (204{val==}) (800{val=UNKNOWN}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (32 (800{val=currentScope}) (235{val=.}) (802{val=hasThis}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=mayWarnAboutGlobalThis}) (214{val=(}) (800{val=expr}) (234{val=,}) (800{val=currentScope}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=EnvTypePair})) (214{val=(}) (800{val=inEnv}) (234{val=,}) (800{val=UNKNOWN}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=EnvTypePair})) (214{val=(}) (800{val=env}) (234{val=,}) (800{val=UNKNOWN}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (27 (32 (800{val=funType}) (235{val=.}) (802{val=isOptionalArg}) (214{val=(}) (800{val=i}) (215{val=)})) (249{val=&&}) (32 (40{val=pair.type}) (235{val=.}) (802{val=equals}) (214{val=(}) (800{val=UNDEFINED}) (215{val=)}))))
(AST_ROOT_SC2NF (21 (7 (40{val=rhsPair.type}) (204{val==}) (800{val=BOOLEAN})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=analyzeExprFwd}) (214{val=(}) (800{val=expr}) (234{val=,}) (800{val=inEnv}) (234{val=,}) (800{val=UNKNOWN}) (234{val=,}) (800{val=UNKNOWN}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=rootNs}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=rootNs}) (235{val=.}) (802{val=isSubtypeOf}) (214{val=(}) (800{val=TOP_OBJECT}) (215{val=)}))) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=namespaceType}) (204{val==}) (32 (800{val=rootNs}) (235{val=.}) (802{val=getProp}) (214{val=(}) (32 (800{val=qname}) (235{val=.}) (802{val=getAllButLeftmost}) (216{val=()})) (215{val=)}))) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (41 (329{val=return}) (800{val=out}) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=EnvTypePair})) (59 (800{val=lhsPair}) (204{val==}) (32 (802{val=analyzeExprBwd}) (214{val=(}) (800{val=lhs}) (234{val=,}) (800{val=outEnv}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapCheck}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=checkVariableReferencesForTranspileOnly}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=processCheck}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=root}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=phaseopt}) (235{val=.}) (802{val=process}) (214{val=(}) (800{val=externsNode}) (234{val=,}) (800{val=externAndJsRoot}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (27 (32 (22 (315{val=this}) (235{val=.}) (800{val=rawType})) (235{val=.}) (802{val=isBuiltinWithName}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (249{val=&&}) (32 (32 (800{val=NUMERIC_PATTERN}) (235{val=.}) (802{val=matcher}) (214{val=(}) (800{val=pname}) (215{val=)})) (235{val=.}) (802{val=matches}) (216{val=()}))))
(AST_ROOT_SC2NF (21 (32 (802{val=test}) (214{val=(}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=test}) (214{val=(}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=public}) (802{val=ProcessDefinesTest}) (216{val=()}) (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (27 (800{val=DEFAULT_EXTERNS}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)}) (227{val=;})) (21 (32 (802{val=allowSourcelessWarnings}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=isEqualTo}) (214{val=(}) (800{val=output}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertEquals}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=jsDocInfoPrinter}) (235{val=.}) (802{val=print}) (214{val=(}) (800{val=info}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=phaseopt}) (235{val=.}) (802{val=process}) (214{val=(}) (800{val=externsNode}) (234{val=,}) (800{val=n}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=process}) (214{val=(}) (500{val=null}) (234{val=,}) (800{val=scriptRoot}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=root}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=checkVariableReferences}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=NodeTraversal}) (235{val=.}) (802{val=traverseEs6}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (31 (39{val=long}) (802{val=stop}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (27 (32 (800{val=System}) (235{val=.}) (802{val=currentTimeMillis}) (216{val=()})) (201{val=-}) (800{val=start})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=replacement}) (235{val=.}) (802{val=setTypeI}) (214{val=(}) (32 (802{val=getNativeStringType}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=processCheck}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=root}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=phaseopt}) (235{val=.}) (802{val=process}) (214{val=(}) (800{val=externsNode}) (234{val=,}) (800{val=externAndJsRoot}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=FindStaticMembers})) (59 (800{val=findStaticMembers}) (204{val==}) (14 (304{val=new}) (43 (801{val=FindStaticMembers})) (216{val=()}))) (227{val=;})) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=processTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (800{val=findStaticMembers}) (215{val=)})) (227{val=;})) (21 (32 (802{val=processInherits}) (214{val=(}) (40{val=findStaticMembers.inheritsCalls}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=checkVariableReferencesForTranspileOnly}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapCheck}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=TranspilationPasses}) (235{val=.}) (802{val=hotSwapTranspile}) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=scriptRoot}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=create}) (214{val=(}) (44 (43 (801{val=AbstractCompiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clEqualitySameRewriterPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=j2clChangeTracker}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=create}) (214{val=(}) (44 (43 (801{val=AbstractCompiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clConstantHoisterPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=j2clChangeTracker}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=create}) (214{val=(}) (44 (43 (801{val=AbstractCompiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clClinitPrunerPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (800{val=j2clChangeTracker}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (83{val=final}) (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clConstantHoisterPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clClinitPrunerPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clEqualitySameRewriterPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=moduleNode}) (204{val==}) (32 (802{val=newNode}) (214{val=(}) (40{val=Token.MODULE_BODY}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=lhs}) (204{val==}) (32 (800{val=node}) (235{val=.}) (802{val=getFirstFirstChild}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=clinitFunction}) (204{val==}) (32 (800{val=multiExpression}) (235{val=.}) (802{val=getFirstFirstChild}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=methodName}) (204{val==}) (32 (800{val=member}) (235{val=.}) (802{val=getFirstFirstChild}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setWarningLevel}) (214{val=(}) (40{val=DiagnosticGroups.ANALYZER_CHECKS}) (234{val=,}) (40{val=CheckLevel.WARNING}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=public}) (39{val=void}) (802{val=disable_testClassMethodUnused2}) (216{val=()}) (8 (218{val={}) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=mode})) (204{val==}) (40{val=TypeInferenceMode.NEITHER})) (227{val=;})) (21 (32 (802{val=unused}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (21 (32 (802{val=used}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (39{val=void}) (802{val=testClassMethodUnused1}) (216{val=()}) (8 (218{val={}) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=mode})) (204{val==}) (40{val=TypeInferenceMode.NEITHER})) (227{val=;})) (21 (32 (802{val=unused}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (21 (32 (802{val=used}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=flowSensitiveInlineVariables}) (215{val=)})) (227{val=;})) (25 (313{val=if}) (214{val=(}) (27 (40{val=options.removeUnusedVars}) (250{val=||}) (40{val=options.removeUnusedLocalVars})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (32 (802{val=lastRemoveUnusedVars}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=create}) (214{val=(}) (44 (43 (801{val=AbstractCompiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=UnreachableCodeElimination})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setFoldConstants}) (214{val=(}) (9{val=true}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setFoldConstants}) (214{val=(}) (9{val=true}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=create}) (214{val=(}) (44 (43 (801{val=AbstractCompiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=UnreachableCodeElimination})) (214{val=(}) (800{val=compiler}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setRemoveDeadCode}) (214{val=(}) (9{val=true}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setRemoveDeadCode}) (214{val=(}) (9{val=true}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setWarningLevel}) (214{val=(}) (40{val=DiagnosticGroups.LINT_CHECKS}) (234{val=,}) (40{val=CheckLevel.WARNING}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=options}) (235{val=.}) (802{val=setWarningLevel}) (214{val=(}) (40{val=DiagnosticGroups.ANALYZER_CHECKS}) (234{val=,}) (40{val=CheckLevel.WARNING}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (31 (83{val=public}) (39{val=void}) (802{val=testInvalidAnnotation5}) (214{val=(}) (215{val=)}) (301{val=throws}) (43 (800{val=Exception})) (8 (218{val={}) (21 (32 (802{val=testWarning}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (800{val=INVALID_NO_SIDE_EFFECT_ANNOTATION}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (39{val=void}) (802{val=testInvalidAnnotation4}) (214{val=(}) (215{val=)}) (301{val=throws}) (43 (800{val=Exception})) (8 (218{val={}) (21 (32 (802{val=testWarning}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (800{val=INVALID_NO_SIDE_EFFECT_ANNOTATION}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (801{val=String})) (802{val=toModuleName}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (32 (800{val=ModuleNames}) (235{val=.}) (802{val=toModuleName}) (214{val=(}) (800{val=path}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (83{val=public}) (43 (801{val=String})) (802{val=toJSIdentifier}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (32 (800{val=ModuleNames}) (235{val=.}) (802{val=toJSIdentifier}) (214{val=(}) (800{val=path}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=requires}) (235{val=.}) (802{val=add}) (214{val=(}) (32 (32 (800{val=file}) (235{val=.}) (802{val=resolveEs6Module}) (214{val=(}) (800{val=arg}) (215{val=)})) (235{val=.}) (802{val=toModuleName}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=globalModuleName}) (204{val==}) (32 (32 (32 (32 (800{val=t}) (235{val=.}) (802{val=getInput}) (216{val=()})) (235{val=.}) (802{val=getPath}) (216{val=()})) (235{val=.}) (802{val=resolveEs6Module}) (214{val=(}) (800{val=moduleName}) (215{val=)})) (235{val=.}) (802{val=toModuleName}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (32 (32 (800{val=t}) (235{val=.}) (802{val=getInput}) (216{val=()})) (235{val=.}) (802{val=getPath}) (216{val=()})) (235{val=.}) (802{val=toModuleName}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (32 (32 (32 (800{val=t}) (235{val=.}) (802{val=getInput}) (216{val=()})) (235{val=.}) (802{val=getPath}) (216{val=()})) (235{val=.}) (802{val=resolveEs6Module}) (214{val=(}) (32 (800{val=moduleIdentifier}) (235{val=.}) (802{val=getString}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=toModuleName}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=moduleName}) (204{val==}) (32 (32 (32 (32 (800{val=t}) (235{val=.}) (802{val=getInput}) (216{val=()})) (235{val=.}) (802{val=getPath}) (216{val=()})) (235{val=.}) (802{val=resolveEs6Module}) (214{val=(}) (800{val=importName}) (215{val=)})) (235{val=.}) (802{val=toModuleName}) (216{val=()}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (44 (43 (40{val=ModuleLoader.ModulePath})) (800{val=actual})))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (32 (32 (800{val=t}) (235{val=.}) (802{val=getInput}) (216{val=()})) (235{val=.}) (802{val=getPath}) (216{val=()})) (235{val=.}) (802{val=toModuleName}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=TemplateTypeMapReplacer})) (59 (800{val=replacer}) (204{val==}) (14 (304{val=new}) (43 (801{val=TemplateTypeMapReplacer})) (214{val=(}) (800{val=registry}) (234{val=,}) (315{val=this}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=errorReporter}) (235{val=.}) (802{val=warning}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=SimpleErrorReporter}) (235{val=.}) (802{val=getMessage0}) (214{val=(}) (800{val=messageId}) (215{val=)})) (200{val=+}) (800{val=BAD_TYPE_WIKI_LINK})) (234{val=,}) (32 (802{val=getSourceName}) (216{val=()})) (234{val=,}) (800{val=lineno}) (234{val=,}) (800{val=charno}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=errorReporter}) (235{val=.}) (802{val=warning}) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=SimpleErrorReporter}) (235{val=.}) (802{val=getMessage1}) (214{val=(}) (800{val=messageId}) (234{val=,}) (800{val=messageArg}) (215{val=)})) (200{val=+}) (800{val=BAD_TYPE_WIKI_LINK})) (234{val=,}) (32 (802{val=getSourceName}) (216{val=()})) (234{val=,}) (800{val=lineno}) (234{val=,}) (800{val=charno}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (802{val=assertWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (40{val=RhinoErrorReporter.JSDOC_MISSING_BRACES_WARNING}) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=SourceMapObject})) (59 (800{val=sourceMapObject}) (204{val==}) (32 (800{val=SourceMapObjectParser}) (235{val=.}) (802{val=parse}) (214{val=(}) (800{val=contents}) (215{val=)}))) (227{val=;})) (21 (32 (802{val=parse}) (214{val=(}) (800{val=sourceMapObject}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=SourceMapObject})) (59 (800{val=sourceMapObject}) (204{val==}) (32 (800{val=SourceMapObjectParser}) (235{val=.}) (802{val=parse}) (214{val=(}) (800{val=contents}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=MemberDefinition})) (800{val=prop})) (226{val=:}) (32 (800{val=PolymerPassStaticUtils}) (235{val=.}) (802{val=extractProperties}) (214{val=(}) (800{val=objLit}) (234{val=,}) (800{val=compiler}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (40{val=prop.name}) (235{val=.}) (802{val=removeProp}) (214{val=(}) (40{val=Node.JSDOC_INFO_PROP}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=PolymerPassStaticUtils}) (235{val=.}) (802{val=extractProperties}) (214{val=(}) (800{val=objLit}) (234{val=,}) (800{val=compiler}) (215{val=)})))
(AST_ROOT_SC2NF (21 (32 (802{val=overwriteMembersIfPresent}) (214{val=(}) (800{val=allProperties}) (234{val=,}) (32 (800{val=PolymerPassStaticUtils}) (235{val=.}) (802{val=extractProperties}) (214{val=(}) (800{val=descriptor}) (234{val=,}) (800{val=compiler}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (800{val=GwtProperties})) (59 (800{val=p}) (204{val==}) (32 (800{val=GwtProperties}) (235{val=.}) (802{val=load}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)}))) (227{val=;})) (21 (32 (32 (802{val=assertThat}) (214{val=(}) (32 (800{val=p}) (235{val=.}) (802{val=propertyNames}) (216{val=()})) (215{val=)})) (235{val=.}) (802{val=isEmpty}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=MODULE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (32 (800{val=Arrays}) (235{val=.}) (802{val=copyOf}) (214{val=(}) (800{val=buffer}) (234{val=,}) (800{val=position}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=options.coalesceVariableNames}) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=coalesceVariableNames}) (215{val=)})) (227{val=;})) (25 (313{val=if}) (214{val=(}) (40{val=options.foldConstants}) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=passes}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=peepholeOptimizationsOnce}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (802{val=test}) (214{val=(}) (800{val=options}) (234{val=,}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (234{val=,}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (32 (802{val=hasInstanceType}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (315{val=this}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (800{val=typeOfThis}) (235{val=.}) (802{val=toObjectType}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (32 (32 (800{val=sideEffectInfo}) (235{val=.}) (802{val=taintedLocals}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=v}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sideEffectInfo}) (235{val=.}) (802{val=setTaintsGlobalState}) (216{val=()})) (227{val=;})) (21 (32 (800{val=sideEffectInfo}) (235{val=.}) (802{val=resetLocalVars}) (216{val=()})) (227{val=;})) (500{val=break;}) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=defs}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=functionInfo}) (235{val=.}) (802{val=setTaintsGlobalState}) (216{val=()})) (227{val=;})) (500{val=break;}) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (802{val=test}) (214{val=(}) (800{val=options}) (234{val=,}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (234{val=,}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=currentJsSource}) (204{val==}) (32 (802{val=getCurrentJsSource}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Config})) (59 (800{val=config}) (204{val==}) (32 (800{val=ParserRunner}) (235{val=.}) (802{val=createConfig}) (214{val=(}) (800{val=mode}) (234{val=,}) (40{val=Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE}) (234{val=,}) (40{val=Config.RunMode.KEEP_GOING}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=ParseResult})) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=comments}) (234{val=,}) (800{val=features}) (234{val=,}) (32 (800{val=p}) (235{val=.}) (802{val=getInlineSourceMap}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=createConfig}) (214{val=(}) (800{val=languageMode}) (234{val=,}) (40{val=JsDocParsing.TYPES_ONLY}) (234{val=,}) (40{val=RunMode.STOP_AFTER_ERROR}) (234{val=,}) (800{val=extraAnnotationNames}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=config}) (234{val=,}) (800{val=errorReporter}) (234{val=,}) (800{val=source}) (234{val=,}) (800{val=offset}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=true}) (215{val=)}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=annotationWhitelist}) (234{val=,}) (40{val=JsDocParsing.TYPES_ONLY}) (234{val=,}) (40{val=RunMode.STOP_AFTER_ERROR}) (234{val=,}) (800{val=suppressionNames}) (234{val=,}) (800{val=languageMode}) (234{val=,}) (9{val=false}) (215{val=)}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Config})) (59 (800{val=config}) (204{val==}) (14 (304{val=new}) (43 (801{val=Config})) (214{val=(}) (800{val=extraAnnotations}) (234{val=,}) (800{val=parseDocumentation}) (234{val=,}) (40{val=RunMode.STOP_AFTER_ERROR}) (234{val=,}) (800{val=extraSuppressions}) (234{val=,}) (40{val=LanguageMode.ECMASCRIPT3}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Config})) (59 (800{val=config}) (204{val==}) (14 (304{val=new}) (43 (801{val=Config})) (214{val=(}) (800{val=extraAnnotations}) (234{val=,}) (40{val=JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE}) (234{val=,}) (40{val=RunMode.KEEP_GOING}) (234{val=,}) (800{val=extraSuppressions}) (234{val=,}) (40{val=LanguageMode.ECMASCRIPT3}) (234{val=,}) (9{val=true}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (27 (27 (27 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.DIV})) (249{val=&&}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=isNumber}) (216{val=()}))) (249{val=&&}) (27 (32 (32 (800{val=n}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (235{val=.}) (802{val=getDouble}) (216{val=()})) (236{val===}) (34{val=NUMBER_CONSTANT}))))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=value}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=ancestor}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=GETTER_DEF}) (226{val=:})) (49 (326{val=case}) (800{val=SETTER_DEF}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=key}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=STRING_KEY}) (226{val=:})) (49 (326{val=case}) (800{val=GETTER_DEF}) (226{val=:})) (49 (326{val=case}) (800{val=SETTER_DEF}) (226{val=:})) (49 (326{val=case}) (800{val=MEMBER_FUNCTION_DEF}) (226{val=:})) (41 (329{val=return}) (32 (800{val=key}) (235{val=.}) (802{val=getString}) (216{val=()})) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=STRING_KEY}) (226{val=:})) (49 (326{val=case}) (800{val=GETTER_DEF}) (226{val=:})) (49 (326{val=case}) (800{val=SETTER_DEF}) (226{val=:})) (49 (326{val=case}) (800{val=MEMBER_FUNCTION_DEF}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.ASSIGN}))) (249{val=&&}) (27 (32 (800{val=parent}) (235{val=.}) (802{val=getFirstChild}) (216{val=()})) (236{val===}) (800{val=n}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=current}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=DECLARE}) (226{val=:})) (49 (326{val=case}) (800{val=EXPORT}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (32 (802{val=isStatementParent}) (214{val=(}) (800{val=parent}) (215{val=)})) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=SCRIPT}) (226{val=:})) (49 (326{val=case}) (800{val=MODULE_BODY}) (226{val=:})) (49 (326{val=case}) (800{val=BLOCK}) (226{val=:})) (49 (326{val=case}) (800{val=LABEL}) (226{val=:})) (49 (326{val=case}) (800{val=NAMESPACE_ELEMENTS}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=FOR}) (226{val=:})) (49 (326{val=case}) (800{val=FOR_OF}) (226{val=:})) (49 (326{val=case}) (800{val=DO}) (226{val=:})) (49 (326{val=case}) (800{val=WHILE}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (32 (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (1 (218{val={}) (31 (78 (208{val=@}) (800{val=Override})) (83{val=public}) (39{val=boolean}) (802{val=apply}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=n})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=type})) (227{val=;})) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=VOID}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (49 (326{val=case}) (800{val=NAME}) (226{val=:})) (41 (329{val=return}) (32 (32 (800{val=n}) (235{val=.}) (802{val=getString}) (216{val=()})) (235{val=.}) (802{val=equals}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkArgument}) (214{val=(}) (32 (800{val=callNode}) (235{val=.}) (802{val=isNew}) (216{val=()})) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (32 (800{val=callNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=val}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=GT}) (226{val=:})) (49 (326{val=case}) (800{val=GE}) (226{val=:})) (49 (326{val=case}) (800{val=LT}) (226{val=:})) (49 (326{val=case}) (800{val=LE}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=EQ}) (226{val=:})) (49 (326{val=case}) (800{val=NE}) (226{val=:})) (49 (326{val=case}) (800{val=SHEQ}) (226{val=:})) (49 (326{val=case}) (800{val=SHNE}) (226{val=:})) (49 (326{val=case}) (800{val=MUL}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (500{val=break;}) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=valueNode}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=pType}) (204{val==}) (32 (32 (800{val=root}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=parentType}) (204{val==}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=DECLARATION_PARENTS}) (235{val=.}) (802{val=contains}) (214{val=(}) (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=propdef}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.STRING}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=op}) (235{val=.}) (802{val=setToken}) (214{val=(}) (800{val=assignOp}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (32 (802{val=canFoldStandardConstructors}) (214{val=(}) (800{val=n}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=n}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.CALL}) (215{val=)})) (227{val=;})) (21 (32 (800{val=n}) (235{val=.}) (802{val=putBooleanProp}) (214{val=(}) (40{val=Node.FREE_CALL}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (32 (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (800{val=include}) (236{val===}) (32 (800{val=nodeTypes}) (235{val=.}) (802{val=contains}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (43 (801{val=Token})) (59 (800{val=type}) (204{val==}) (32 (800{val=valueNode}) (235{val=.}) (802{val=getToken}) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=parent}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.ASSIGN}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=newOperator}) (235{val=.}) (802{val=setToken}) (214{val=(}) (800{val=complementOperator}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=shorthand}) (235{val=.}) (802{val=setToken}) (214{val=(}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getOpFromAssignmentOp}) (214{val=(}) (800{val=shorthand}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=n}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.FOR}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (50 (305{val=switch}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=FOR}) (226{val=:})) (49 (326{val=case}) (800{val=FOR_OF}) (226{val=:})) (49 (326{val=case}) (800{val=DO}) (226{val=:})) (49 (326{val=case}) (800{val=WHILE}) (226{val=:})) (41 (329{val=return}) (9{val=true}) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Token})) (800{val=type})) (226{val=:}) (800{val=types}) (215{val=)}) (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=c}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (800{val=type})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=c}) (227{val=;})) (219{val=}}))) (219{val=}}))) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (32 (800{val=n}) (235{val=.}) (802{val=isConst}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=handleDeclarationList}) (214{val=(}) (800{val=n}) (234{val=,}) (32 (800{val=n}) (235{val=.}) (802{val=getParent}) (216{val=()})) (215{val=)})) (227{val=;})) (219{val=}}))) (21 (32 (800{val=n}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.VAR}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (21 (32 (800{val=declarationList}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.VAR}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=currentProp}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.STRING}) (215{val=)})) (227{val=;})) (21 (7 (800{val=newProp}) (204{val==}) (32 (32 (800{val=IR}) (235{val=.}) (802{val=getprop}) (214{val=(}) (32 (800{val=objectToExtend}) (235{val=.}) (802{val=cloneTree}) (216{val=()})) (234{val=,}) (800{val=currentProp}) (215{val=)})) (235{val=.}) (802{val=srcref}) (214{val=(}) (800{val=currentProp}) (215{val=)}))) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=n}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=member}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.STRING_KEY}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=c}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.VAR}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=Node})) (59 (800{val=dollarChildProp}) (204{val==}) (32 (800{val=n}) (235{val=.}) (802{val=getGrandparent}) (216{val=()}))) (227{val=;})) (21 (32 (800{val=dollarChildProp}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.GETELEM}) (215{val=)})) (227{val=;})) (21 (32 (800{val=compiler}) (235{val=.}) (802{val=reportCodeChange}) (216{val=()})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (50 (305{val=switch}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}) (218{val={}) (49 (326{val=case}) (800{val=NAME}) (226{val=:})) (49 (326{val=case}) (800{val=STRING}) (226{val=:})) (49 (326{val=case}) (800{val=STRING_KEY}) (226{val=:})) (41 (329{val=return}) (32 (800{val=node}) (235{val=.}) (802{val=getString}) (216{val=()})) (227{val=;})) (500{val=default:}) (41 (329{val=return}) (32 (800{val=compiler}) (235{val=.}) (802{val=toSource}) (214{val=(}) (800{val=node}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=Token})) (59 (800{val=inverseOperator}) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=getInverseOperator}) (214{val=(}) (32 (800{val=subtree}) (235{val=.}) (802{val=getToken}) (216{val=()})) (215{val=)}))) (227{val=;})) (21 (32 (800{val=subtree}) (235{val=.}) (802{val=setToken}) (214{val=(}) (800{val=inverseOperator}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=jsdoc}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=jsdocNode}) (242{val=!=}) (500{val=null})) (249{val=&&}) (27 (32 (800{val=jsdocNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.ELLIPSIS}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkState}) (214{val=(}) (27 (32 (800{val=thisRoot}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.BANG})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (60 (39{val=boolean}) (59 (800{val=isPropDeclared}) (204{val==}) (27 (32 (800{val=propNode}) (235{val=.}) (802{val=getToken}) (216{val=()})) (236{val===}) (40{val=Token.COLON}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=importedName}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.NAME}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=key}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.STRING_KEY}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=key}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.SETTER_DEF}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=key}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.GETTER_DEF}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=irNode}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.BLOCK}) (215{val=)})) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (32 (800{val=name}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (32 (800{val=parent}) (235{val=.}) (802{val=getToken}) (216{val=()})))
(AST_ROOT_SC2NF (21 (32 (800{val=n}) (235{val=.}) (802{val=setToken}) (214{val=(}) (800{val=TEMPLATE_LOCAL_NAME}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=n}) (235{val=.}) (802{val=setToken}) (214{val=(}) (800{val=TEMPLATE_TYPE_PARAM}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=keyNode}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.STRING_KEY}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (32 (800{val=keyNode}) (235{val=.}) (802{val=setToken}) (214{val=(}) (40{val=Token.STRING_KEY}) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (27 (36 (214{val=(}) (27 (32 (800{val=n}) (235{val=.}) (802{val=isScript}) (216{val=()})) (250{val=||}) (32 (800{val=n}) (235{val=.}) (802{val=isFunction}) (216{val=()}))) (215{val=)})) (249{val=&&}) (32 (800{val=comp}) (235{val=.}) (802{val=hasScopeChanged}) (214{val=(}) (800{val=n}) (215{val=)}))))
(AST_ROOT_SC2NF (31 (39{val=boolean}) (802{val=taintsThis}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getMask}) (214{val=(}) (800{val=TAINTS_THIS_MASK}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (39{val=boolean}) (802{val=taintsGlobalState}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getMask}) (214{val=(}) (800{val=TAINTS_GLOBAL_STATE_MASK}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (39{val=boolean}) (802{val=pureFunction}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getMask}) (214{val=(}) (800{val=PURE_FUNCTION_MASK}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (32 (800{val=node}) (235{val=.}) (802{val=isFunction}) (216{val=()})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=functionSideEffectMap}) (235{val=.}) (802{val=put}) (214{val=(}) (800{val=node}) (234{val=,}) (32 (802{val=createFunctionInfo}) (214{val=(}) (800{val=node}) (234{val=,}) (800{val=parent}) (215{val=)})) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}})))
(AST_ROOT_SC2NF (60 (74 (43 (800{val=Collection})) (230{val=<}) (43 (800{val=Definition})) (231{val=>})) (59 (800{val=defs}) (204{val==}) (32 (802{val=getFunctionDefinitions}) (214{val=(}) (800{val=definitionProvider}) (234{val=,}) (800{val=callSite}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=functionSideEffectMap})) (204{val==}) (14 (304{val=new}) (74 (43 (801{val=LinkedHashMap})) (232{val=<>})) (216{val=()}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (83{val=final}) (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (14 (304{val=new}) (43 (801{val=MinimizeExitPoints})) (214{val=(}) (800{val=compiler}) (215{val=)})) (235{val=.}) (802{val=asCompilerPass}) (216{val=()})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clClinitPrunerPass})) (214{val=(}) (800{val=compiler}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (83{val=final}) (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clConstantHoisterPass})) (214{val=(}) (800{val=compiler}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerPass})) (802{val=getProcessor}) (214{val=(}) (44 (43 (801{val=Compiler})) (800{val=compiler})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (14 (304{val=new}) (43 (801{val=J2clEqualitySameRewriterPass})) (214{val=(}) (800{val=compiler}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (21 (32 (802{val=testSame}) (214{val=(}) (32 (800{val=LINE_JOINER}) (235{val=.}) (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (234{val=,}) (45{val=STRING_CONSTANT}) (215{val=)})) (215{val=)})) (227{val=;})))
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=compiler})) (204{val==}) (32 (800{val=Preconditions}) (235{val=.}) (802{val=checkNotNull}) (214{val=(}) (800{val=compiler}) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (60 (39{val=boolean}) (59 (800{val=useTypesForOptimization}) (204{val==}) (22 (32 (800{val=compiler}) (235{val=.}) (802{val=getOptions}) (216{val=()})) (235{val=.}) (800{val=useTypesForLocalOptimization}))) (227{val=;})))
(AST_ROOT_SC2NF (31 (39{val=boolean}) (802{val=shouldAmbiguateProperties}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (22 (315{val=this}) (235{val=.}) (800{val=ambiguateProperties})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (39{val=boolean}) (802{val=shouldDisambiguateProperties}) (216{val=()}) (8 (218{val={}) (41 (329{val=return}) (22 (315{val=this}) (235{val=.}) (800{val=disambiguateProperties})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (31 (78 (208{val=@}) (800{val=Override})) (83{val=protected}) (43 (801{val=CompilerOptions})) (802{val=getOptions}) (214{val=(}) (44 (43 (801{val=CompilerOptions})) (800{val=options})) (215{val=)}) (8 (218{val={}) (21 (7 (40{val=options.useTypesForLocalOptimization}) (204{val==}) (9{val=true})) (227{val=;})) (41 (329{val=return}) (48 (349{val=super}) (235{val=.}) (802{val=getOptions}) (214{val=(}) (800{val=options}) (215{val=)})) (227{val=;})) (219{val=}}))))
(AST_ROOT_SC2NF (60 (43 (801{val=CompilerPass})) (59 (800{val=peepholePass}) (204{val==}) (14 (304{val=new}) (43 (801{val=PeepholeOptimizationsPass})) (214{val=(}) (800{val=compiler}) (234{val=,}) (14 (304{val=new}) (43 (801{val=PeepholeFoldConstants})) (214{val=(}) (800{val=late}) (234{val=,}) (22 (32 (800{val=compiler}) (235{val=.}) (802{val=getOptions}) (216{val=()})) (235{val=.}) (800{val=useTypesForLocalOptimization})) (215{val=)})) (215{val=)}))) (227{val=;})))
(AST_ROOT_SC2NF (22 (32 (800{val=compiler}) (235{val=.}) (802{val=getOptions}) (216{val=()})) (235{val=.}) (800{val=useTypesForLocalOptimization})))
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=boolean}) (59 (800{val=useTypesForOptimization}) (204{val==}) (22 (32 (800{val=compiler}) (235{val=.}) (802{val=getOptions}) (216{val=()})) (235{val=.}) (800{val=useTypesForLocalOptimization}))) (227{val=;})))
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (38 (207{val=!}) (22 (32 (800{val=compiler}) (235{val=.}) (802{val=getOptions}) (216{val=()})) (235{val=.}) (800{val=useTypesForLocalOptimization}))) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
(AST_ROOT_SC2NF (8 (218{val={}) (60 (43 (801{val=CompilerOptions})) (59 (800{val=options}) (204{val==}) (48 (349{val=super}) (235{val=.}) (802{val=getOptions}) (216{val=()}))) (227{val=;})) (21 (7 (40{val=options.useTypesForLocalOptimization}) (204{val==}) (800{val=useTypesForOptimization})) (227{val=;})) (21 (32 (800{val=options}) (235{val=.}) (802{val=setJ2clPass}) (214{val=(}) (40{val=CompilerOptions.J2clPassMode.ON}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (800{val=options}) (227{val=;})) (219{val=}})))
