========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	(
Code	(
Distance : 23

1
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

2
Tree	compiler
Code	compiler
Distance : 24

3
Tree	null
Code	null
Distance : 24

4
Tree	new
Code	new
Distance : 24

5
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 24

6
Tree	Math
Code	Math
Distance : 24

7
Tree	SimpleDependencyInfo
Code	SimpleDependencyInfo
Distance : 24

8
Tree	==
Code	==
Distance : 24

9
Tree	preloadEs6RuntimeFunction
Code	preloadEs6RuntimeFunction
Distance : 24

10
Tree	int
Code	int
Distance : 23

11
Tree	<
Code	<
Distance : 24

12
Tree	return
Code	return
Distance : 24

13
Tree	-
Code	-
Distance : 23

14
Tree	assertType
Code	assertType
Distance : 24

15
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 24

16
Tree	{
Code	{
Distance : 24

17
Tree	!
Code	!
Distance : 24

18
Tree	testTypes
Code	testTypes
Distance : 24

19
Tree	node
Code	node
Distance : 24

20
Tree	()
Code	()
Distance : 24

21
Tree	removeUnusedProperties
Code	removeUnusedProperties
Distance : 24

22
Tree	isGoogScopeFunctionBody
Code	isGoogScopeFunctionBody
Distance : 24

23
Tree	dataRI
Code	dataRI
Distance : 24

24
Tree	setUpInterpolator
Code	setUpInterpolator
Distance : 24

25
Tree	,
Code	,
Distance : 24

26
Tree	replaceSymbol
Code	replaceSymbol
Distance : 24

27
Tree	CompositeFormat
Code	CompositeFormat
Distance : 24

28
Tree	crossP
Code	crossP
Distance : 24

29
Tree	>
Code	>
Distance : 24

30
Tree	Assert
Code	Assert
Distance : 24

31
Tree	logBeta
Code	logBeta
Distance : 24

32
Tree	if
Code	if
Distance : 24

33
Tree	do
Code	do
Distance : 24

34
Tree	FastFourierTransformer
Code	FastFourierTransformer
Distance : 24

35
Tree	)
Code	)
Distance : 23

36
Tree	try
Code	try
Distance : 24

37
Tree	this
Code	this
Distance : 23

38
Tree	deleteWhitespaceBefore
Code	deleteWhitespaceBefore
Distance : 24

39
Tree	testModules
Code	testModules
Distance : 24

40
Tree	flipAllIfWarranted
Code	flipAllIfWarranted
Distance : 24

41
Tree	handleGet
Code	handleGet
Distance : 24

42
Tree	tree
Code	tree
Distance : 24

43
Tree	:
Code	:
Distance : 24

44
Tree	=
Code	=
Distance : 24

45
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 24

46
Tree	double
Code	double
Distance : 24

47
Tree	Args
Code	Args
Distance : 24

48
Tree	key
Code	key
Distance : 24

49
Tree	doAnswer
Code	doAnswer
Distance : 24

50
Tree	public
Code	public
Distance : 24

51
Tree	LinkedDurationField
Code	LinkedDurationField
Distance : 24

52
Tree	n
Code	n
Distance : 24

53
Tree	Streams
Code	Streams
Distance : 24

54
Tree	}
Code	}
Distance : 24

55
Tree	assertFalse
Code	assertFalse
Distance : 24

56
Tree	fireDatasetChanged
Code	fireDatasetChanged
Distance : 24

57
Tree	String
Code	String
Distance : 24

58
Tree	tightenNameTypeAndDontWarn
Code	tightenNameTypeAndDontWarn
Distance : 24

59
Tree	computeEscapedEs6
Code	computeEscapedEs6
Distance : 24

60
Tree	step
Code	step
Distance : 24

61
Tree	]
Code	]
Distance : 24

62
Tree	false
Code	false
Distance : 24

63
Tree	mockitoStubber
Code	mockitoStubber
Distance : 24

64
Tree	sampleSize
Code	sampleSize
Distance : 24

65
Tree	separator
Code	separator
Distance : 24

66
Tree	rings
Code	rings
Distance : 24

67
Tree	bp
Code	bp
Distance : 24

68
Tree	TransformUtils
Code	TransformUtils
Distance : 24

69
Tree	Object
Code	Object
Distance : 24

70
Tree	isMultiline
Code	isMultiline
Distance : 24

71
Tree	RunnerFactory
Code	RunnerFactory
Distance : 24

72
Tree	assertTrue
Code	assertTrue
Distance : 24

73
Tree	getLastArguments
Code	getLastArguments
Distance : 24

74
Tree	parent
Code	parent
Distance : 24

75
Tree	class
Code	class
Distance : 24

76
Tree	for
Code	for
Distance : 24

77
Tree	assertNode
Code	assertNode
Distance : 24

78
Tree	beta
Code	beta
Distance : 24

79
Tree	assertPatternsEqual
Code	assertPatternsEqual
Distance : 24

80
Tree	Preconditions
Code	Preconditions
Distance : 24

81
Tree	Arguments
Code	Arguments
Distance : 24

82
Tree	isNullOrEmpty
Code	isNullOrEmpty
Distance : 24

83
Tree	fold
Code	fold
Distance : 24

84
Tree	static
Code	static
Distance : 24

85
Tree	catch
Code	catch
Distance : 24

86
Tree	getPeriodType
Code	getPeriodType
Distance : 24

87
Tree	msgNode
Code	msgNode
Distance : 24

88
Tree	assertEquals
Code	assertEquals
Distance : 24

89
Tree	mockingProgress
Code	mockingProgress
Distance : 24

90
Tree	NumberOfInvocationsChecker
Code	NumberOfInvocationsChecker
Distance : 24

91
Tree	index
Code	index
Distance : 24

92
Tree	invalidationMap
Code	invalidationMap
Distance : 24

93
Tree	testClass
Code	testClass
Distance : 24

94
Tree	maybeTemporarilyLiveNodes
Code	maybeTemporarilyLiveNodes
Distance : 24

95
Tree	;
Code	;
Distance : 24

96
Tree	<=
Code	<=
Distance : 24

97
Tree	p
Code	p
Distance : 24

98
Tree	YearWeekType
Code	YearWeekType
Distance : 24

99
Tree	getInvalidationsErrors
Code	getInvalidationsErrors
Distance : 24

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ super ( paint ) ; this . value = value ; }
Code	{ super ( paint ) ; this . value = value ; }
Distance : 8

1
Tree	{ super ( stroke ) ; this . value = value ; }
Code	{ super ( stroke ) ; this . value = value ; }
Distance : 8

2
Tree	{ super ( alpha ) ; this . value = value ; }
Code	{ super ( alpha ) ; this . value = value ; }
Distance : 8

3
Tree	{ super ( outlineStroke ) ; this . value = value ; }
Code	{ super ( outlineStroke ) ; this . value = value ; }
Distance : 8

4
Tree	{ super ( value ) ; this . value = value ; }
Code	{ super ( value ) ; this . value = value ; }
Distance : 9

5
Tree	{ super ( paint ) ; this . stroke = value ; }
Code	{ super ( paint ) ; this . stroke = value ; }
Distance : 9

6
Tree	{ super ( paint ) ; this . value = alpha ; }
Code	{ super ( paint ) ; this . value = alpha ; }
Distance : 9

7
Tree	{ super ( outlinePaint ) ; this . value = value ; }
Code	{ super ( outlinePaint ) ; this . value = value ; }
Distance : 8

8
Tree	{ super ( paint ) ; this . value = stroke ; }
Code	{ super ( paint ) ; this . value = stroke ; }
Distance : 9

9
Tree	{ super ( paint ) ; this . value = paint ; }
Code	{ super ( paint ) ; this . value = paint ; }
Distance : 9

10
Tree	{ super ( paint ) ; this . paint = value ; }
Code	{ super ( paint ) ; this . paint = value ; }
Distance : 9

11
Tree	{ super ( paint ) ; this . alpha = value ; }
Code	{ super ( paint ) ; this . alpha = value ; }
Distance : 9

12
Tree	{ super ( paint ) ; this . outlineStroke = value ; }
Code	{ super ( paint ) ; this . outlineStroke = value ; }
Distance : 9

13
Tree	{ super ( stroke ) ; this . stroke = value ; }
Code	{ super ( stroke ) ; this . stroke = value ; }
Distance : 9

14
Tree	{ super ( stroke ) ; this . value = alpha ; }
Code	{ super ( stroke ) ; this . value = alpha ; }
Distance : 9

15
Tree	{ super ( alpha ) ; this . stroke = value ; }
Code	{ super ( alpha ) ; this . stroke = value ; }
Distance : 9

16
Tree	{ super ( stroke ) ; this . value = stroke ; }
Code	{ super ( stroke ) ; this . value = stroke ; }
Distance : 9

17
Tree	{ super ( alpha ) ; this . value = alpha ; }
Code	{ super ( alpha ) ; this . value = alpha ; }
Distance : 9

18
Tree	{ super ( alpha ) ; this . value = stroke ; }
Code	{ super ( alpha ) ; this . value = stroke ; }
Distance : 9

19
Tree	{ super ( paint ) ; this . value = outlineStroke ; }
Code	{ super ( paint ) ; this . value = outlineStroke ; }
Distance : 9

20
Tree	{ super ( stroke ) ; this . value = paint ; }
Code	{ super ( stroke ) ; this . value = paint ; }
Distance : 9

21
Tree	{ super ( paint ) ; this . outlinePaint = value ; }
Code	{ super ( paint ) ; this . outlinePaint = value ; }
Distance : 9

22
Tree	{ super ( outlineStroke ) ; this . stroke = value ; }
Code	{ super ( outlineStroke ) ; this . stroke = value ; }
Distance : 9

23
Tree	{ super ( outlineStroke ) ; this . value = alpha ; }
Code	{ super ( outlineStroke ) ; this . value = alpha ; }
Distance : 9

24
Tree	{ super ( alpha ) ; this . value = paint ; }
Code	{ super ( alpha ) ; this . value = paint ; }
Distance : 9

25
Tree	{ super ( outlineStroke ) ; this . value = stroke ; }
Code	{ super ( outlineStroke ) ; this . value = stroke ; }
Distance : 9

26
Tree	{ super ( stroke ) ; this . paint = value ; }
Code	{ super ( stroke ) ; this . paint = value ; }
Distance : 9

27
Tree	{ super ( alpha ) ; this . paint = value ; }
Code	{ super ( alpha ) ; this . paint = value ; }
Distance : 9

28
Tree	{ super ( outlineStroke ) ; this . value = paint ; }
Code	{ super ( outlineStroke ) ; this . value = paint ; }
Distance : 9

29
Tree	{ super ( value ) ; this . stroke = value ; }
Code	{ super ( value ) ; this . stroke = value ; }
Distance : 10

30
Tree	{ super ( stroke ) ; this . alpha = value ; }
Code	{ super ( stroke ) ; this . alpha = value ; }
Distance : 9

31
Tree	{ super ( value ) ; this . value = alpha ; }
Code	{ super ( value ) ; this . value = alpha ; }
Distance : 10

32
Tree	{ super ( value ) ; this . value = stroke ; }
Code	{ super ( value ) ; this . value = stroke ; }
Distance : 10

33
Tree	{ super ( alpha ) ; this . alpha = value ; }
Code	{ super ( alpha ) ; this . alpha = value ; }
Distance : 9

34
Tree	{ super ( outlineStroke ) ; this . paint = value ; }
Code	{ super ( outlineStroke ) ; this . paint = value ; }
Distance : 9

35
Tree	{ super ( value ) ; this . value = paint ; }
Code	{ super ( value ) ; this . value = paint ; }
Distance : 10

36
Tree	{ super ( outlineStroke ) ; this . alpha = value ; }
Code	{ super ( outlineStroke ) ; this . alpha = value ; }
Distance : 9

37
Tree	{ super ( value ) ; this . paint = value ; }
Code	{ super ( value ) ; this . paint = value ; }
Distance : 10

38
Tree	{ super ( value ) ; this . alpha = value ; }
Code	{ super ( value ) ; this . alpha = value ; }
Distance : 10

39
Tree	{ super ( paint ) ; this . value = outlinePaint ; }
Code	{ super ( paint ) ; this . value = outlinePaint ; }
Distance : 9

40
Tree	{ super ( outlinePaint ) ; this . stroke = value ; }
Code	{ super ( outlinePaint ) ; this . stroke = value ; }
Distance : 9

41
Tree	{ super ( paint ) ; this . stroke = alpha ; }
Code	{ super ( paint ) ; this . stroke = alpha ; }
Distance : 10

42
Tree	{ super ( outlinePaint ) ; this . value = alpha ; }
Code	{ super ( outlinePaint ) ; this . value = alpha ; }
Distance : 9

43
Tree	{ super ( paint ) ; this . stroke = stroke ; }
Code	{ super ( paint ) ; this . stroke = stroke ; }
Distance : 10

44
Tree	{ super ( stroke ) ; this . outlineStroke = value ; }
Code	{ super ( stroke ) ; this . outlineStroke = value ; }
Distance : 9

45
Tree	{ super ( outlinePaint ) ; this . value = stroke ; }
Code	{ super ( outlinePaint ) ; this . value = stroke ; }
Distance : 9

46
Tree	{ super ( alpha ) ; this . outlineStroke = value ; }
Code	{ super ( alpha ) ; this . outlineStroke = value ; }
Distance : 9

47
Tree	{ super ( paint ) ; this . stroke = paint ; }
Code	{ super ( paint ) ; this . stroke = paint ; }
Distance : 10

48
Tree	{ super ( outlinePaint ) ; this . value = paint ; }
Code	{ super ( outlinePaint ) ; this . value = paint ; }
Distance : 9

49
Tree	{ super ( outlineStroke ) ; this . outlineStroke = value ; }
Code	{ super ( outlineStroke ) ; this . outlineStroke = value ; }
Distance : 9

50
Tree	{ super ( outlinePaint ) ; this . paint = value ; }
Code	{ super ( outlinePaint ) ; this . paint = value ; }
Distance : 9

51
Tree	{ super ( paint ) ; this . paint = alpha ; }
Code	{ super ( paint ) ; this . paint = alpha ; }
Distance : 10

52
Tree	{ super ( paint ) ; this . paint = stroke ; }
Code	{ super ( paint ) ; this . paint = stroke ; }
Distance : 10

53
Tree	{ super ( paint ) ; this . alpha = alpha ; }
Code	{ super ( paint ) ; this . alpha = alpha ; }
Distance : 10

54
Tree	{ super ( outlinePaint ) ; this . alpha = value ; }
Code	{ super ( outlinePaint ) ; this . alpha = value ; }
Distance : 9

55
Tree	{ super ( paint ) ; this . alpha = stroke ; }
Code	{ super ( paint ) ; this . alpha = stroke ; }
Distance : 10

56
Tree	{ super ( value ) ; this . outlineStroke = value ; }
Code	{ super ( value ) ; this . outlineStroke = value ; }
Distance : 10

57
Tree	{ super ( paint ) ; this . paint = paint ; }
Code	{ super ( paint ) ; this . paint = paint ; }
Distance : 10

58
Tree	{ super ( paint ) ; this . alpha = paint ; }
Code	{ super ( paint ) ; this . alpha = paint ; }
Distance : 10

59
Tree	{ super ( stroke ) ; this . value = outlineStroke ; }
Code	{ super ( stroke ) ; this . value = outlineStroke ; }
Distance : 9

60
Tree	{ super ( stroke ) ; this . outlinePaint = value ; }
Code	{ super ( stroke ) ; this . outlinePaint = value ; }
Distance : 9

61
Tree	{ super ( alpha ) ; this . value = outlineStroke ; }
Code	{ super ( alpha ) ; this . value = outlineStroke ; }
Distance : 9

62
Tree	{ super ( alpha ) ; this . outlinePaint = value ; }
Code	{ super ( alpha ) ; this . outlinePaint = value ; }
Distance : 9

63
Tree	{ super ( outlineStroke ) ; this . value = outlineStroke ; }
Code	{ super ( outlineStroke ) ; this . value = outlineStroke ; }
Distance : 9

64
Tree	{ super ( paint ) ; this . outlineStroke = alpha ; }
Code	{ super ( paint ) ; this . outlineStroke = alpha ; }
Distance : 10

65
Tree	{ super ( outlinePaint ) ; this . outlineStroke = value ; }
Code	{ super ( outlinePaint ) ; this . outlineStroke = value ; }
Distance : 9

66
Tree	{ super ( outlineStroke ) ; this . outlinePaint = value ; }
Code	{ super ( outlineStroke ) ; this . outlinePaint = value ; }
Distance : 9

67
Tree	{ super ( paint ) ; this . outlineStroke = stroke ; }
Code	{ super ( paint ) ; this . outlineStroke = stroke ; }
Distance : 10

68
Tree	{ super ( paint ) ; this . outlineStroke = paint ; }
Code	{ super ( paint ) ; this . outlineStroke = paint ; }
Distance : 10

69
Tree	{ super ( value ) ; this . value = outlineStroke ; }
Code	{ super ( value ) ; this . value = outlineStroke ; }
Distance : 10

70
Tree	{ super ( value ) ; this . outlinePaint = value ; }
Code	{ super ( value ) ; this . outlinePaint = value ; }
Distance : 10

71
Tree	{ super ( stroke ) ; this . value = outlinePaint ; }
Code	{ super ( stroke ) ; this . value = outlinePaint ; }
Distance : 9

72
Tree	{ super ( stroke ) ; this . stroke = alpha ; }
Code	{ super ( stroke ) ; this . stroke = alpha ; }
Distance : 10

73
Tree	{ super ( alpha ) ; this . value = outlinePaint ; }
Code	{ super ( alpha ) ; this . value = outlinePaint ; }
Distance : 9

74
Tree	{ super ( stroke ) ; this . stroke = stroke ; }
Code	{ super ( stroke ) ; this . stroke = stroke ; }
Distance : 10

75
Tree	{ super ( alpha ) ; this . stroke = alpha ; }
Code	{ super ( alpha ) ; this . stroke = alpha ; }
Distance : 10

76
Tree	{ super ( alpha ) ; this . stroke = stroke ; }
Code	{ super ( alpha ) ; this . stroke = stroke ; }
Distance : 10

77
Tree	{ super ( paint ) ; this . stroke = outlineStroke ; }
Code	{ super ( paint ) ; this . stroke = outlineStroke ; }
Distance : 10

78
Tree	{ super ( outlineStroke ) ; this . value = outlinePaint ; }
Code	{ super ( outlineStroke ) ; this . value = outlinePaint ; }
Distance : 9

79
Tree	{ super ( stroke ) ; this . stroke = paint ; }
Code	{ super ( stroke ) ; this . stroke = paint ; }
Distance : 10

80
Tree	{ super ( outlinePaint ) ; this . value = outlineStroke ; }
Code	{ super ( outlinePaint ) ; this . value = outlineStroke ; }
Distance : 9

81
Tree	{ super ( outlinePaint ) ; this . outlinePaint = value ; }
Code	{ super ( outlinePaint ) ; this . outlinePaint = value ; }
Distance : 9

82
Tree	{ super ( paint ) ; this . outlinePaint = alpha ; }
Code	{ super ( paint ) ; this . outlinePaint = alpha ; }
Distance : 10

83
Tree	{ super ( outlineStroke ) ; this . stroke = alpha ; }
Code	{ super ( outlineStroke ) ; this . stroke = alpha ; }
Distance : 10

84
Tree	{ super ( alpha ) ; this . stroke = paint ; }
Code	{ super ( alpha ) ; this . stroke = paint ; }
Distance : 10

85
Tree	{ super ( paint ) ; this . outlinePaint = stroke ; }
Code	{ super ( paint ) ; this . outlinePaint = stroke ; }
Distance : 10

86
Tree	{ super ( outlineStroke ) ; this . stroke = stroke ; }
Code	{ super ( outlineStroke ) ; this . stroke = stroke ; }
Distance : 10

87
Tree	{ super ( stroke ) ; this . paint = alpha ; }
Code	{ super ( stroke ) ; this . paint = alpha ; }
Distance : 10

88
Tree	{ super ( value ) ; this . value = outlinePaint ; }
Code	{ super ( value ) ; this . value = outlinePaint ; }
Distance : 10

89
Tree	{ super ( paint ) ; this . outlinePaint = paint ; }
Code	{ super ( paint ) ; this . outlinePaint = paint ; }
Distance : 10

90
Tree	{ super ( outlineStroke ) ; this . stroke = paint ; }
Code	{ super ( outlineStroke ) ; this . stroke = paint ; }
Distance : 10

91
Tree	{ super ( stroke ) ; this . paint = stroke ; }
Code	{ super ( stroke ) ; this . paint = stroke ; }
Distance : 10

92
Tree	{ super ( alpha ) ; this . paint = alpha ; }
Code	{ super ( alpha ) ; this . paint = alpha ; }
Distance : 10

93
Tree	{ super ( value ) ; this . stroke = alpha ; }
Code	{ super ( value ) ; this . stroke = alpha ; }
Distance : 11

94
Tree	{ super ( stroke ) ; this . alpha = alpha ; }
Code	{ super ( stroke ) ; this . alpha = alpha ; }
Distance : 10

95
Tree	{ super ( alpha ) ; this . paint = stroke ; }
Code	{ super ( alpha ) ; this . paint = stroke ; }
Distance : 10

96
Tree	{ super ( value ) ; this . stroke = stroke ; }
Code	{ super ( value ) ; this . stroke = stroke ; }
Distance : 11

97
Tree	{ super ( stroke ) ; this . alpha = stroke ; }
Code	{ super ( stroke ) ; this . alpha = stroke ; }
Distance : 10

98
Tree	{ super ( alpha ) ; this . alpha = alpha ; }
Code	{ super ( alpha ) ; this . alpha = alpha ; }
Distance : 10

99
Tree	{ super ( paint ) ; this . paint = outlineStroke ; }
Code	{ super ( paint ) ; this . paint = outlineStroke ; }
Distance : 10

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( index . abs ( index ) ) { return; }
Code	if ( index . abs ( index ) ) { return; }
Distance : 14

1
Tree	if ( index . toBooleanObject ( index ) ) { return; }
Code	if ( index . toBooleanObject ( index ) ) { return; }
Distance : 14

2
Tree	if ( index . getParent ( index ) ) { return; }
Code	if ( index . getParent ( index ) ) { return; }
Distance : 14

3
Tree	if ( index . isNaN ( index ) ) { return; }
Code	if ( index . isNaN ( index ) ) { return; }
Distance : 14

4
Tree	if ( index . valueOf ( index ) ) { return; }
Code	if ( index . valueOf ( index ) ) { return; }
Distance : 14

5
Tree	if ( index . isHoistScope ( index ) ) { return; }
Code	if ( index . isHoistScope ( index ) ) { return; }
Distance : 14

6
Tree	if ( index . index ( index ) ) { return; }
Code	if ( index . index ( index ) ) { return; }
Distance : 14

7
Tree	if ( index . isEnhancedFor ( index ) ) { return; }
Code	if ( index . isEnhancedFor ( index ) ) { return; }
Distance : 14

8
Tree	if ( index . equal ( index ) ) { return; }
Code	if ( index . equal ( index ) ) { return; }
Distance : 14

9
Tree	if ( index . getDataset ( index ) ) { return; }
Code	if ( index . getDataset ( index ) ) { return; }
Distance : 14

10
Tree	if ( index . isGlobal ( index ) ) { return; }
Code	if ( index . isGlobal ( index ) ) { return; }
Distance : 14

11
Tree	if ( index . size ( index ) ) { return; }
Code	if ( index . size ( index ) ) { return; }
Distance : 14

12
Tree	if ( index . annotation ( index ) ) { return; }
Code	if ( index . annotation ( index ) ) { return; }
Distance : 14

13
Tree	if ( index . getRandomGenerator ( index ) ) { return; }
Code	if ( index . getRandomGenerator ( index ) ) { return; }
Distance : 14

14
Tree	if ( index . getDaysInYearMax ( index ) ) { return; }
Code	if ( index . getDaysInYearMax ( index ) ) { return; }
Distance : 14

15
Tree	if ( index . getTolerance ( index ) ) { return; }
Code	if ( index . getTolerance ( index ) ) { return; }
Distance : 14

16
Tree	if ( index . getDimension ( index ) ) { return; }
Code	if ( index . getDimension ( index ) ) { return; }
Distance : 14

17
Tree	if ( index . reportOr ( index ) ) { return; }
Code	if ( index . reportOr ( index ) ) { return; }
Distance : 14

18
Tree	if ( index . getTime ( index ) ) { return; }
Code	if ( index . getTime ( index ) ) { return; }
Distance : 14

19
Tree	if ( index . coefficients ( index ) ) { return; }
Code	if ( index . coefficients ( index ) ) { return; }
Distance : 14

20
Tree	if ( index . copySelf ( index ) ) { return; }
Code	if ( index . copySelf ( index ) ) { return; }
Distance : 14

21
Tree	if ( index . getGoalType ( index ) ) { return; }
Code	if ( index . getGoalType ( index ) ) { return; }
Distance : 14

22
Tree	if ( index . instance ( index ) ) { return; }
Code	if ( index . instance ( index ) ) { return; }
Distance : 14

23
Tree	if ( index . dayOfWeek ( index ) ) { return; }
Code	if ( index . dayOfWeek ( index ) ) { return; }
Distance : 14

24
Tree	if ( index . compare ( index ) ) { return; }
Code	if ( index . compare ( index ) ) { return; }
Distance : 14

25
Tree	if ( index . isInterface ( index ) ) { return; }
Code	if ( index . isInterface ( index ) ) { return; }
Distance : 14

26
Tree	if ( index . isAbstract ( index ) ) { return; }
Code	if ( index . isAbstract ( index ) ) { return; }
Distance : 14

27
Tree	if ( index . explicitMode ( index ) ) { return; }
Code	if ( index . explicitMode ( index ) ) { return; }
Distance : 14

28
Tree	if ( index . dataset ( index ) ) { return; }
Code	if ( index . dataset ( index ) ) { return; }
Distance : 14

29
Tree	if ( index . getBounds2D ( index ) ) { return; }
Code	if ( index . getBounds2D ( index ) ) { return; }
Distance : 14

30
Tree	if ( index . isEmptyType ( index ) ) { return; }
Code	if ( index . isEmptyType ( index ) ) { return; }
Distance : 14

31
Tree	if ( index . returnChar ( index ) ) { return; }
Code	if ( index . returnChar ( index ) ) { return; }
Distance : 14

32
Tree	if ( index . getDefaultNumberFormat ( index ) ) { return; }
Code	if ( index . getDefaultNumberFormat ( index ) ) { return; }
Distance : 14

33
Tree	if ( index . isGeneric ( index ) ) { return; }
Code	if ( index . isGeneric ( index ) ) { return; }
Distance : 14

34
Tree	if ( index . currentTimeMillis ( index ) ) { return; }
Code	if ( index . currentTimeMillis ( index ) ) { return; }
Distance : 14

35
Tree	if ( index . noDefaultConstructor ( index ) ) { return; }
Code	if ( index . noDefaultConstructor ( index ) ) { return; }
Distance : 14

36
Tree	if ( index . linearCombination ( index ) ) { return; }
Code	if ( index . linearCombination ( index ) ) { return; }
Distance : 14

37
Tree	if ( index . returnZero ( index ) ) { return; }
Code	if ( index . returnZero ( index ) ) { return; }
Distance : 14

38
Tree	if ( index . hotSwapTranspile ( index ) ) { return; }
Code	if ( index . hotSwapTranspile ( index ) ) { return; }
Distance : 14

39
Tree	if ( index . createsScope ( index ) ) { return; }
Code	if ( index . createsScope ( index ) ) { return; }
Distance : 14

40
Tree	if ( index . isParamList ( index ) ) { return; }
Code	if ( index . isParamList ( index ) ) { return; }
Distance : 14

41
Tree	if ( index . visible ( index ) ) { return; }
Code	if ( index . visible ( index ) ) { return; }
Distance : 14

42
Tree	if ( index . tolerance ( index ) ) { return; }
Code	if ( index . tolerance ( index ) ) { return; }
Distance : 14

43
Tree	if ( index . isAssign ( index ) ) { return; }
Code	if ( index . isAssign ( index ) ) { return; }
Distance : 14

44
Tree	if ( index . getBytes ( index ) ) { return; }
Code	if ( index . getBytes ( index ) ) { return; }
Distance : 14

45
Tree	if ( index . getParentNode ( index ) ) { return; }
Code	if ( index . getParentNode ( index ) ) { return; }
Distance : 14

46
Tree	if ( index . getRandomProvider ( index ) ) { return; }
Code	if ( index . getRandomProvider ( index ) ) { return; }
Distance : 14

47
Tree	if ( index . getGrandparent ( index ) ) { return; }
Code	if ( index . getGrandparent ( index ) ) { return; }
Distance : 14

48
Tree	if ( index . u ( index ) ) { return; }
Code	if ( index . u ( index ) ) { return; }
Distance : 14

49
Tree	if ( index . axis ( index ) ) { return; }
Code	if ( index . axis ( index ) ) { return; }
Distance : 14

50
Tree	if ( index . isExprResult ( index ) ) { return; }
Code	if ( index . isExprResult ( index ) ) { return; }
Distance : 14

51
Tree	if ( index . create ( index ) ) { return; }
Code	if ( index . create ( index ) ) { return; }
Distance : 14

52
Tree	if ( index . IEEEremainder ( index ) ) { return; }
Code	if ( index . IEEEremainder ( index ) ) { return; }
Distance : 14

53
Tree	if ( index . wholeSpace ( index ) ) { return; }
Code	if ( index . wholeSpace ( index ) ) { return; }
Distance : 14

54
Tree	if ( index . isChanged ( index ) ) { return; }
Code	if ( index . isChanged ( index ) ) { return; }
Distance : 14

55
Tree	if ( index . wantedNumberOfInvocations ( index ) ) { return; }
Code	if ( index . wantedNumberOfInvocations ( index ) ) { return; }
Distance : 14

56
Tree	if ( index . getPrinter ( index ) ) { return; }
Code	if ( index . getPrinter ( index ) ) { return; }
Distance : 14

57
Tree	if ( index . getY ( index ) ) { return; }
Code	if ( index . getY ( index ) ) { return; }
Distance : 14

58
Tree	if ( index . charAt ( index ) ) { return; }
Code	if ( index . charAt ( index ) ) { return; }
Distance : 14

59
Tree	if ( index . getReal ( index ) ) { return; }
Code	if ( index . getReal ( index ) ) { return; }
Distance : 14

60
Tree	if ( index . newScope ( index ) ) { return; }
Code	if ( index . newScope ( index ) ) { return; }
Distance : 14

61
Tree	if ( index . isVar ( index ) ) { return; }
Code	if ( index . isVar ( index ) ) { return; }
Distance : 14

62
Tree	if ( index . center ( index ) ) { return; }
Code	if ( index . center ( index ) ) { return; }
Distance : 14

63
Tree	if ( index . mapLookup ( index ) ) { return; }
Code	if ( index . mapLookup ( index ) ) { return; }
Distance : 14

64
Tree	if ( index . ArrayRealVector ( index ) ) { return; }
Code	if ( index . ArrayRealVector ( index ) ) { return; }
Distance : 14

65
Tree	if ( index . point ( index ) ) { return; }
Code	if ( index . point ( index ) ) { return; }
Distance : 14

66
Tree	if ( index . rhs.isNaN ( index ) ) { return; }
Code	if ( index . rhs.isNaN ( index ) ) { return; }
Distance : 14

67
Tree	if ( index . isName ( index ) ) { return; }
Code	if ( index . isName ( index ) ) { return; }
Distance : 14

68
Tree	if ( index . getChangedScopeNodesForPass ( index ) ) { return; }
Code	if ( index . getChangedScopeNodesForPass ( index ) ) { return; }
Distance : 14

69
Tree	if ( index . LocalizedFormats.FUNCTION ( index ) ) { return; }
Code	if ( index . LocalizedFormats.FUNCTION ( index ) ) { return; }
Distance : 14

70
Tree	if ( index . getClass ( index ) ) { return; }
Code	if ( index . getClass ( index ) ) { return; }
Distance : 14

71
Tree	if ( index . isJavaVersionAtLeast ( index ) ) { return; }
Code	if ( index . isJavaVersionAtLeast ( index ) ) { return; }
Distance : 14

72
Tree	if ( index . real ( index ) ) { return; }
Code	if ( index . real ( index ) ) { return; }
Distance : 14

73
Tree	if ( index . returnFalse ( index ) ) { return; }
Code	if ( index . returnFalse ( index ) ) { return; }
Distance : 14

74
Tree	if ( index . instanceof ( index ) ) { return; }
Code	if ( index . instanceof ( index ) ) { return; }
Distance : 14

75
Tree	if ( index . expm1 ( index ) ) { return; }
Code	if ( index . expm1 ( index ) ) { return; }
Distance : 14

76
Tree	if ( index . getDateTimeInstance ( index ) ) { return; }
Code	if ( index . getDateTimeInstance ( index ) ) { return; }
Distance : 14

77
Tree	if ( index . getScopeRoot ( index ) ) { return; }
Code	if ( index . getScopeRoot ( index ) ) { return; }
Distance : 14

78
Tree	if ( index . maxY ( index ) ) { return; }
Code	if ( index . maxY ( index ) ) { return; }
Distance : 14

79
Tree	if ( index . array ( index ) ) { return; }
Code	if ( index . array ( index ) ) { return; }
Distance : 14

80
Tree	if ( index . getAnchorPoint ( index ) ) { return; }
Code	if ( index . getAnchorPoint ( index ) ) { return; }
Distance : 14

81
Tree	if ( index . getPrototypeObject ( index ) ) { return; }
Code	if ( index . getPrototypeObject ( index ) ) { return; }
Distance : 14

82
Tree	if ( index . booleanValue ( index ) ) { return; }
Code	if ( index . booleanValue ( index ) ) { return; }
Distance : 14

83
Tree	if ( index . types ( index ) ) { return; }
Code	if ( index . types ( index ) ) { return; }
Distance : 14

84
Tree	if ( index . x2 ( index ) ) { return; }
Code	if ( index . x2 ( index ) ) { return; }
Distance : 14

85
Tree	if ( index . isScript ( index ) ) { return; }
Code	if ( index . isScript ( index ) ) { return; }
Distance : 14

86
Tree	if ( index . isPowerOf2 ( index ) ) { return; }
Code	if ( index . isPowerOf2 ( index ) ) { return; }
Distance : 14

87
Tree	if ( index . matcher ( index ) ) { return; }
Code	if ( index . matcher ( index ) ) { return; }
Distance : 14

88
Tree	if ( index . doubleValue ( index ) ) { return; }
Code	if ( index . doubleValue ( index ) ) { return; }
Distance : 14

89
Tree	if ( index . regularizedGammaP ( index ) ) { return; }
Code	if ( index . regularizedGammaP ( index ) ) { return; }
Distance : 14

90
Tree	if ( index . provider ( index ) ) { return; }
Code	if ( index . provider ( index ) ) { return; }
Distance : 14

91
Tree	if ( index . vector ( index ) ) { return; }
Code	if ( index . vector ( index ) ) { return; }
Distance : 14

92
Tree	if ( index . nullNotPermitted ( index ) ) { return; }
Code	if ( index . nullNotPermitted ( index ) ) { return; }
Distance : 14

93
Tree	if ( index . scaleArray ( index ) ) { return; }
Code	if ( index . scaleArray ( index ) ) { return; }
Distance : 14

94
Tree	if ( index . other ( index ) ) { return; }
Code	if ( index . other ( index ) ) { return; }
Distance : 14

95
Tree	if ( index . plot ( index ) ) { return; }
Code	if ( index . plot ( index ) ) { return; }
Distance : 14

96
Tree	if ( index . getTree ( index ) ) { return; }
Code	if ( index . getTree ( index ) ) { return; }
Distance : 14

97
Tree	if ( index . getSolver ( index ) ) { return; }
Code	if ( index . getSolver ( index ) ) { return; }
Distance : 14

98
Tree	if ( index . Boolean ( index ) ) { return; }
Code	if ( index . Boolean ( index ) ) { return; }
Distance : 14

99
Tree	if ( index . upper ( index ) ) { return; }
Code	if ( index . upper ( index ) ) { return; }
Distance : 14

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } i
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } i
Distance : 19

1
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } createIllegalArgumentException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } createIllegalArgumentException
Distance : 19

2
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } checkArgument
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } checkArgument
Distance : 19

3
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } data
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } data
Distance : 19

4
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } add
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } add
Distance : 19

5
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } paint
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } paint
Distance : 19

6
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } m
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } m
Distance : 19

7
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } join
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } join
Distance : 19

8
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } NodeTraversal
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } NodeTraversal
Distance : 19

9
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } fail
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } fail
Distance : 19

10
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } List
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } List
Distance : 19

11
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <>
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <>
Distance : 19

12
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Args
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Args
Distance : 19

13
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } :
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } :
Distance : 19

14
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } try
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } try
Distance : 19

15
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } result
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } result
Distance : 19

16
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } *
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } *
Distance : 19

17
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } assertThat
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } assertThat
Distance : 19

18
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } str
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } str
Distance : 19

19
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } x
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } x
Distance : 19

20
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } LINE_JOINER
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } LINE_JOINER
Distance : 19

21
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } parent
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } parent
Distance : 19

22
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } testSame
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } testSame
Distance : 19

23
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ArrayList
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ArrayList
Distance : 19

24
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } expected
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } expected
Distance : 19

25
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } int
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } int
Distance : 19

26
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } invocation
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } invocation
Distance : 19

27
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } FastMath
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } FastMath
Distance : 19

28
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } t
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } t
Distance : 19

29
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } reportCodeChange
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } reportCodeChange
Distance : 19

30
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } field
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } field
Distance : 19

31
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } boolean
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } boolean
Distance : 19

32
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } fireChangeEvent
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } fireChangeEvent
Distance : 19

33
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } serialised
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } serialised
Distance : 19

34
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } type
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } type
Distance : 19

35
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } getInstance
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } getInstance
Distance : 19

36
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } false
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } false
Distance : 19

37
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } !=
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } !=
Distance : 19

38
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } checkState
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } checkState
Distance : 19

39
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } super
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } super
Distance : 19

40
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } !
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } !
Distance : 19

41
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } nullNotPermitted
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } nullNotPermitted
Distance : 19

42
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ==
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ==
Distance : 19

43
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } []
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } []
Distance : 19

44
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } @
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } @
Distance : 19

45
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } assertEquals
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } assertEquals
Distance : 19

46
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } test
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } test
Distance : 19

47
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } IllegalArgumentException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } IllegalArgumentException
Distance : 19

48
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Object
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Object
Distance : 19

49
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

50
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ]
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ]
Distance : 19

51
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Preconditions
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Preconditions
Distance : 19

52
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } &&
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } &&
Distance : 19

53
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Distance : 19

54
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Distance : 19

55
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ParamChecks
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ParamChecks
Distance : 19

56
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Distance : 19

57
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Distance : 19

58
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Distance : 19

59
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Distance : 19

60
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

61
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

62
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } name
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } name
Distance : 19

63
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Distance : 19

64
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Distance : 19

65
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Distance : 19

66
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Distance : 19

67
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Distance : 19

68
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } +
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } +
Distance : 19

69
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } n
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } n
Distance : 19

70
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } catch
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } catch
Distance : 19

71
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <
Distance : 19

72
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } final
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } final
Distance : 19

73
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } true
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } true
Distance : 19

74
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } return
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } return
Distance : 19

75
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } >
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } >
Distance : 19

76
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } this
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } this
Distance : 19

77
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } if
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } if
Distance : 19

78
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } public
Distance : 19

79
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } String
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } String
Distance : 19

80
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } }
Distance : 19

81
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } .
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } .
Distance : 19

82
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } (
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } (
Distance : 19

83
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ;
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ;
Distance : 19

84
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <blank>
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <blank>
Distance : 19

85
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Distance : 19

86
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } double
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } double
Distance : 19

87
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <s>
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <s>
Distance : 19

88
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } STRING_CONSTANT
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } STRING_CONSTANT
Distance : 19

89
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } {
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } {
Distance : 19

90
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ,
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ,
Distance : 19

91
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ()
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ()
Distance : 19

92
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } new
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } new
Distance : 19

93
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } =
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } =
Distance : 19

94
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } NUMBER_CONSTANT
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } NUMBER_CONSTANT
Distance : 19

95
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } null
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } null
Distance : 19

96
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } {}
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } {}
Distance : 19

97
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } value
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } value
Distance : 19

98
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } )
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } )
Distance : 19

99
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mode
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mode
Distance : 19

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	this . dataset = dataset . setDataset ( dataset ) ; i
Code	this . dataset = dataset . setDataset ( dataset ) ; i
Distance : 7

1
Tree	this . dataset = dataset . setDataset ( dataset ) ; createIllegalArgumentException
Code	this . dataset = dataset . setDataset ( dataset ) ; createIllegalArgumentException
Distance : 7

2
Tree	this . dataset = dataset . setDataset ( dataset ) ; checkArgument
Code	this . dataset = dataset . setDataset ( dataset ) ; checkArgument
Distance : 7

3
Tree	this . dataset = dataset . setDataset ( dataset ) ; data
Code	this . dataset = dataset . setDataset ( dataset ) ; data
Distance : 7

4
Tree	this . dataset = dataset . setDataset ( dataset ) ; add
Code	this . dataset = dataset . setDataset ( dataset ) ; add
Distance : 7

5
Tree	this . dataset = dataset . setDataset ( dataset ) ; paint
Code	this . dataset = dataset . setDataset ( dataset ) ; paint
Distance : 7

6
Tree	this . dataset = dataset . setDataset ( dataset ) ; m
Code	this . dataset = dataset . setDataset ( dataset ) ; m
Distance : 7

7
Tree	this . dataset = dataset . setDataset ( dataset ) ; join
Code	this . dataset = dataset . setDataset ( dataset ) ; join
Distance : 7

8
Tree	this . dataset = dataset . setDataset ( dataset ) ; NodeTraversal
Code	this . dataset = dataset . setDataset ( dataset ) ; NodeTraversal
Distance : 7

9
Tree	this . dataset = dataset . setDataset ( dataset ) ; fail
Code	this . dataset = dataset . setDataset ( dataset ) ; fail
Distance : 7

10
Tree	this . dataset = dataset . setDataset ( dataset ) ; List
Code	this . dataset = dataset . setDataset ( dataset ) ; List
Distance : 7

11
Tree	this . dataset = dataset . setDataset ( dataset ) ; <>
Code	this . dataset = dataset . setDataset ( dataset ) ; <>
Distance : 7

12
Tree	this . dataset = dataset . setDataset ( dataset ) ; Args
Code	this . dataset = dataset . setDataset ( dataset ) ; Args
Distance : 7

13
Tree	this . dataset = dataset . setDataset ( dataset ) ; :
Code	this . dataset = dataset . setDataset ( dataset ) ; :
Distance : 7

14
Tree	this . dataset = dataset . setDataset ( dataset ) ; try
Code	this . dataset = dataset . setDataset ( dataset ) ; try
Distance : 7

15
Tree	this . dataset = dataset . setDataset ( dataset ) ; result
Code	this . dataset = dataset . setDataset ( dataset ) ; result
Distance : 7

16
Tree	this . dataset = dataset . setDataset ( dataset ) ; *
Code	this . dataset = dataset . setDataset ( dataset ) ; *
Distance : 7

17
Tree	this . dataset = dataset . setDataset ( dataset ) ; assertThat
Code	this . dataset = dataset . setDataset ( dataset ) ; assertThat
Distance : 7

18
Tree	this . dataset = dataset . setDataset ( dataset ) ; str
Code	this . dataset = dataset . setDataset ( dataset ) ; str
Distance : 7

19
Tree	this . dataset = dataset . setDataset ( dataset ) ; x
Code	this . dataset = dataset . setDataset ( dataset ) ; x
Distance : 7

20
Tree	this . dataset = dataset . setDataset ( dataset ) ; LINE_JOINER
Code	this . dataset = dataset . setDataset ( dataset ) ; LINE_JOINER
Distance : 7

21
Tree	this . dataset = dataset . setDataset ( dataset ) ; parent
Code	this . dataset = dataset . setDataset ( dataset ) ; parent
Distance : 7

22
Tree	this . dataset = dataset . setDataset ( dataset ) ; testSame
Code	this . dataset = dataset . setDataset ( dataset ) ; testSame
Distance : 7

23
Tree	this . dataset = dataset . setDataset ( dataset ) ; ArrayList
Code	this . dataset = dataset . setDataset ( dataset ) ; ArrayList
Distance : 7

24
Tree	this . dataset = dataset . setDataset ( dataset ) ; expected
Code	this . dataset = dataset . setDataset ( dataset ) ; expected
Distance : 7

25
Tree	this . dataset = dataset . setDataset ( dataset ) ; int
Code	this . dataset = dataset . setDataset ( dataset ) ; int
Distance : 7

26
Tree	this . dataset = dataset . setDataset ( dataset ) ; invocation
Code	this . dataset = dataset . setDataset ( dataset ) ; invocation
Distance : 7

27
Tree	this . dataset = dataset . setDataset ( dataset ) ; FastMath
Code	this . dataset = dataset . setDataset ( dataset ) ; FastMath
Distance : 7

28
Tree	this . dataset = dataset . setDataset ( dataset ) ; t
Code	this . dataset = dataset . setDataset ( dataset ) ; t
Distance : 7

29
Tree	this . dataset = dataset . setDataset ( dataset ) ; reportCodeChange
Code	this . dataset = dataset . setDataset ( dataset ) ; reportCodeChange
Distance : 7

30
Tree	this . dataset = dataset . setDataset ( dataset ) ; field
Code	this . dataset = dataset . setDataset ( dataset ) ; field
Distance : 7

31
Tree	this . dataset = dataset . setDataset ( dataset ) ; boolean
Code	this . dataset = dataset . setDataset ( dataset ) ; boolean
Distance : 7

32
Tree	this . dataset = dataset . setDataset ( dataset ) ; fireChangeEvent
Code	this . dataset = dataset . setDataset ( dataset ) ; fireChangeEvent
Distance : 7

33
Tree	this . dataset = dataset . setDataset ( dataset ) ; serialised
Code	this . dataset = dataset . setDataset ( dataset ) ; serialised
Distance : 7

34
Tree	this . dataset = dataset . setDataset ( dataset ) ; type
Code	this . dataset = dataset . setDataset ( dataset ) ; type
Distance : 7

35
Tree	this . dataset = dataset . setDataset ( dataset ) ; getInstance
Code	this . dataset = dataset . setDataset ( dataset ) ; getInstance
Distance : 7

36
Tree	this . dataset = dataset . setDataset ( dataset ) ; false
Code	this . dataset = dataset . setDataset ( dataset ) ; false
Distance : 7

37
Tree	this . dataset = dataset . setDataset ( dataset ) ; !=
Code	this . dataset = dataset . setDataset ( dataset ) ; !=
Distance : 7

38
Tree	this . dataset = dataset . setDataset ( dataset ) ; checkState
Code	this . dataset = dataset . setDataset ( dataset ) ; checkState
Distance : 7

39
Tree	this . dataset = dataset . setDataset ( dataset ) ; super
Code	this . dataset = dataset . setDataset ( dataset ) ; super
Distance : 7

40
Tree	this . dataset = dataset . setDataset ( dataset ) ; !
Code	this . dataset = dataset . setDataset ( dataset ) ; !
Distance : 7

41
Tree	this . dataset = dataset . setDataset ( dataset ) ; nullNotPermitted
Code	this . dataset = dataset . setDataset ( dataset ) ; nullNotPermitted
Distance : 7

42
Tree	this . dataset = dataset . setDataset ( dataset ) ; ==
Code	this . dataset = dataset . setDataset ( dataset ) ; ==
Distance : 7

43
Tree	this . dataset = dataset . setDataset ( dataset ) ; []
Code	this . dataset = dataset . setDataset ( dataset ) ; []
Distance : 7

44
Tree	this . dataset = dataset . setDataset ( dataset ) ; @
Code	this . dataset = dataset . setDataset ( dataset ) ; @
Distance : 7

45
Tree	this . dataset = dataset . setDataset ( dataset ) ; assertEquals
Code	this . dataset = dataset . setDataset ( dataset ) ; assertEquals
Distance : 7

46
Tree	this . dataset = dataset . setDataset ( dataset ) ; test
Code	this . dataset = dataset . setDataset ( dataset ) ; test
Distance : 7

47
Tree	this . dataset = dataset . setDataset ( dataset ) ; IllegalArgumentException
Code	this . dataset = dataset . setDataset ( dataset ) ; IllegalArgumentException
Distance : 7

48
Tree	this . dataset = dataset . setDataset ( dataset ) ; Object
Code	this . dataset = dataset . setDataset ( dataset ) ; Object
Distance : 7

49
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

50
Tree	this . dataset = dataset . setDataset ( dataset ) ; ]
Code	this . dataset = dataset . setDataset ( dataset ) ; ]
Distance : 7

51
Tree	this . dataset = dataset . setDataset ( dataset ) ; Preconditions
Code	this . dataset = dataset . setDataset ( dataset ) ; Preconditions
Distance : 7

52
Tree	this . dataset = dataset . setDataset ( dataset ) ; &&
Code	this . dataset = dataset . setDataset ( dataset ) ; &&
Distance : 7

53
Tree	this . dataset = dataset . setDataset ( dataset ) ; -
Code	this . dataset = dataset . setDataset ( dataset ) ; -
Distance : 7

54
Tree	this . dataset = dataset . setDataset ( dataset ) ; [
Code	this . dataset = dataset . setDataset ( dataset ) ; [
Distance : 7

55
Tree	this . dataset = dataset . setDataset ( dataset ) ; ParamChecks
Code	this . dataset = dataset . setDataset ( dataset ) ; ParamChecks
Distance : 7

56
Tree	this . dataset = dataset . setDataset ( dataset ) ; Override
Code	this . dataset = dataset . setDataset ( dataset ) ; Override
Distance : 7

57
Tree	this . dataset = dataset . setDataset ( dataset ) ; MathRuntimeException
Code	this . dataset = dataset . setDataset ( dataset ) ; MathRuntimeException
Distance : 7

58
Tree	this . dataset = dataset . setDataset ( dataset ) ; mock
Code	this . dataset = dataset . setDataset ( dataset ) ; mock
Distance : 7

59
Tree	this . dataset = dataset . setDataset ( dataset ) ; f
Code	this . dataset = dataset . setDataset ( dataset ) ; f
Distance : 7

60
Tree	this . dataset = dataset . setDataset ( dataset ) ; class
Code	this . dataset = dataset . setDataset ( dataset ) ; class
Distance : 7

61
Tree	this . dataset = dataset . setDataset ( dataset ) ; array
Code	this . dataset = dataset . setDataset ( dataset ) ; array
Distance : 7

62
Tree	this . dataset = dataset . setDataset ( dataset ) ; name
Code	this . dataset = dataset . setDataset ( dataset ) ; name
Distance : 7

63
Tree	this . dataset = dataset . setDataset ( dataset ) ; T
Code	this . dataset = dataset . setDataset ( dataset ) ; T
Distance : 7

64
Tree	this . dataset = dataset . setDataset ( dataset ) ; void
Code	this . dataset = dataset . setDataset ( dataset ) ; void
Distance : 7

65
Tree	this . dataset = dataset . setDataset ( dataset ) ; compiler
Code	this . dataset = dataset . setDataset ( dataset ) ; compiler
Distance : 7

66
Tree	this . dataset = dataset . setDataset ( dataset ) ; throw
Code	this . dataset = dataset . setDataset ( dataset ) ; throw
Distance : 7

67
Tree	this . dataset = dataset . setDataset ( dataset ) ; e
Code	this . dataset = dataset . setDataset ( dataset ) ; e
Distance : 7

68
Tree	this . dataset = dataset . setDataset ( dataset ) ; +
Code	this . dataset = dataset . setDataset ( dataset ) ; +
Distance : 7

69
Tree	this . dataset = dataset . setDataset ( dataset ) ; n
Code	this . dataset = dataset . setDataset ( dataset ) ; n
Distance : 7

70
Tree	this . dataset = dataset . setDataset ( dataset ) ; catch
Code	this . dataset = dataset . setDataset ( dataset ) ; catch
Distance : 7

71
Tree	this . dataset = dataset . setDataset ( dataset ) ; <
Code	this . dataset = dataset . setDataset ( dataset ) ; <
Distance : 7

72
Tree	this . dataset = dataset . setDataset ( dataset ) ; final
Code	this . dataset = dataset . setDataset ( dataset ) ; final
Distance : 7

73
Tree	this . dataset = dataset . setDataset ( dataset ) ; true
Code	this . dataset = dataset . setDataset ( dataset ) ; true
Distance : 7

74
Tree	this . dataset = dataset . setDataset ( dataset ) ; return
Code	this . dataset = dataset . setDataset ( dataset ) ; return
Distance : 7

75
Tree	this . dataset = dataset . setDataset ( dataset ) ; >
Code	this . dataset = dataset . setDataset ( dataset ) ; >
Distance : 7

76
Tree	this . dataset = dataset . setDataset ( dataset ) ; this
Code	this . dataset = dataset . setDataset ( dataset ) ; this
Distance : 7

77
Tree	this . dataset = dataset . setDataset ( dataset ) ; if
Code	this . dataset = dataset . setDataset ( dataset ) ; if
Distance : 7

78
Tree	this . dataset = dataset . setDataset ( dataset ) ; public
Code	this . dataset = dataset . setDataset ( dataset ) ; public
Distance : 7

79
Tree	this . dataset = dataset . setDataset ( dataset ) ; String
Code	this . dataset = dataset . setDataset ( dataset ) ; String
Distance : 7

80
Tree	this . dataset = dataset . setDataset ( dataset ) ; }
Code	this . dataset = dataset . setDataset ( dataset ) ; }
Distance : 7

81
Tree	this . dataset = dataset . setDataset ( dataset ) ; .
Code	this . dataset = dataset . setDataset ( dataset ) ; .
Distance : 7

82
Tree	this . dataset = dataset . setDataset ( dataset ) ; (
Code	this . dataset = dataset . setDataset ( dataset ) ; (
Distance : 7

83
Tree	this . dataset = dataset . setDataset ( dataset ) ; ;
Code	this . dataset = dataset . setDataset ( dataset ) ; ;
Distance : 7

84
Tree	this . dataset = dataset . setDataset ( dataset ) ; <blank>
Code	this . dataset = dataset . setDataset ( dataset ) ; <blank>
Distance : 7

85
Tree	this . dataset = dataset . setDataset ( dataset ) ; this
Code	this . dataset = dataset . setDataset ( dataset ) ; this
Distance : 7

86
Tree	this . dataset = dataset . setDataset ( dataset ) ; double
Code	this . dataset = dataset . setDataset ( dataset ) ; double
Distance : 7

87
Tree	this . dataset = dataset . setDataset ( dataset ) ; <s>
Code	this . dataset = dataset . setDataset ( dataset ) ; <s>
Distance : 7

88
Tree	this . dataset = dataset . setDataset ( dataset ) ; STRING_CONSTANT
Code	this . dataset = dataset . setDataset ( dataset ) ; STRING_CONSTANT
Distance : 7

89
Tree	this . dataset = dataset . setDataset ( dataset ) ; {
Code	this . dataset = dataset . setDataset ( dataset ) ; {
Distance : 7

90
Tree	this . dataset = dataset . setDataset ( dataset ) ; ,
Code	this . dataset = dataset . setDataset ( dataset ) ; ,
Distance : 7

91
Tree	this . dataset = dataset . setDataset ( dataset ) ; ()
Code	this . dataset = dataset . setDataset ( dataset ) ; ()
Distance : 7

92
Tree	this . dataset = dataset . setDataset ( dataset ) ; new
Code	this . dataset = dataset . setDataset ( dataset ) ; new
Distance : 7

93
Tree	this . dataset = dataset . setDataset ( dataset ) ; =
Code	this . dataset = dataset . setDataset ( dataset ) ; =
Distance : 7

94
Tree	this . dataset = dataset . setDataset ( dataset ) ; NUMBER_CONSTANT
Code	this . dataset = dataset . setDataset ( dataset ) ; NUMBER_CONSTANT
Distance : 7

95
Tree	this . dataset = dataset . setDataset ( dataset ) ; null
Code	this . dataset = dataset . setDataset ( dataset ) ; null
Distance : 7

96
Tree	this . dataset = dataset . setDataset ( dataset ) ; {}
Code	this . dataset = dataset . setDataset ( dataset ) ; {}
Distance : 7

97
Tree	this . dataset = dataset . setDataset ( dataset ) ; value
Code	this . dataset = dataset . setDataset ( dataset ) ; value
Distance : 7

98
Tree	this . dataset = dataset . setDataset ( dataset ) ; )
Code	this . dataset = dataset . setDataset ( dataset ) ; )
Distance : 7

99
Tree	this . dataset = dataset . setDataset ( dataset ) ; mode
Code	this . dataset = dataset . setDataset ( dataset ) ; mode
Distance : 7

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

1
Tree	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Distance : 3

2
Tree	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Distance : 3

3
Tree	PathIterator p2 = p2 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( continue; ) ;
Distance : 2

4
Tree	PathIterator iterator2 = p2 . getPathIterator ( default: ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( default: ) ;
Distance : 1

5
Tree	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Distance : 3

6
Tree	PathIterator p1 = p2 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( continue; ) ;
Distance : 2

7
Tree	PathIterator p2 = p2 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( break; ) ;
Distance : 2

8
Tree	PathIterator p2 = p2 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( return; ) ;
Distance : 2

9
Tree	PathIterator p1 = p2 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( break; ) ;
Distance : 2

10
Tree	PathIterator p1 = p2 . getPathIterator ( return; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( return; ) ;
Distance : 2

11
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Distance : 2

12
Tree	PathIterator p2 = p2 . getPathIterator ( default: ) ;
Code	PathIterator p2 = p2 . getPathIterator ( default: ) ;
Distance : 2

13
Tree	PathIterator p1 = p2 . getPathIterator ( default: ) ;
Code	PathIterator p1 = p2 . getPathIterator ( default: ) ;
Distance : 2

14
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Distance : 2

15
Tree	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Distance : 3

16
Tree	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Distance : 3

17
Tree	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Distance : 2

18
Tree	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Distance : 2

19
Tree	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Distance : 3

20
Tree	PathIterator iterator2 = p2 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( return; ) ;
Distance : 1

21
Tree	PathIterator iterator2 = p2 . getPathIterator ( break; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( break; ) ;
Distance : 1

22
Tree	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Distance : 3

23
Tree	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Distance : 3

24
Tree	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Distance : 0

25
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

26
Tree	PathIterator p2 = p2 . getPathIterator ( null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null ) ;
Distance : 1

27
Tree	PathIterator p1 = p2 . getPathIterator ( null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null ) ;
Distance : 1

28
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Distance : 2

29
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

30
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Distance : 2

31
Tree	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Distance : 3

32
Tree	PathIterator p1 = p2 . getPathIterator ( super(); ) ;
Code	PathIterator p1 = p2 . getPathIterator ( super(); ) ;
Distance : 2

33
Tree	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Distance : 3

34
Tree	PathIterator iterator2 = p2 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( super(); ) ;
Distance : 1

35
Tree	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Distance : 2

36
Tree	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Distance : 2

37
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

38
Tree	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Distance : 3

39
Tree	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Distance : 2

40
Tree	PathIterator iterator2 = p2 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( continue; ) ;
Distance : 1

41
Tree	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Distance : 3

42
Tree	PathIterator p2 = p2 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p2 . getPathIterator ( super(); ) ;
Distance : 2

43
Tree	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Distance : 3

44
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

45
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

46
Tree	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Distance : 2

47
Tree	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Distance : 3

48
Tree	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Distance : 3

49
Tree	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Distance : 3

50
Tree	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Distance : 3

51
Tree	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Distance : 3

52
Tree	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Distance : 3

53
Tree	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Distance : 3

54
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; null
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; null
Distance : 2

55
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; throw
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; throw
Distance : 2

56
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; this
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; this
Distance : 2

57
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; final
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; final
Distance : 2

58
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; nullNotPermitted
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; nullNotPermitted
Distance : 2

59
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; []
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; []
Distance : 2

60
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; void
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; void
Distance : 2

61
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ==
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ==
Distance : 2

62
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; compiler
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; compiler
Distance : 2

63
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; String
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; String
Distance : 2

64
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; catch
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; catch
Distance : 2

65
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; @
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; @
Distance : 2

66
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; test
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; test
Distance : 2

67
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; return
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; return
Distance : 2

68
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !
Distance : 2

69
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertEquals
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertEquals
Distance : 2

70
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; false
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; false
Distance : 2

71
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; int
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; int
Distance : 2

72
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; double
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; double
Distance : 2

73
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkState
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkState
Distance : 2

74
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; n
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; n
Distance : 2

75
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; e
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; e
Distance : 2

76
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NUMBER_CONSTANT
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NUMBER_CONSTANT
Distance : 2

77
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; }
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; }
Distance : 2

78
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; =
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; =
Distance : 2

79
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; {
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; {
Distance : 2

80
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !=
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !=
Distance : 2

81
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; super
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; super
Distance : 2

82
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; new
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; new
Distance : 2

83
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; STRING_CONSTANT
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; STRING_CONSTANT
Distance : 2

84
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; i
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; i
Distance : 2

85
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; value
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; value
Distance : 2

86
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; if
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; if
Distance : 2

87
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <
Distance : 2

88
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; >
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; >
Distance : 2

89
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; public
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; public
Distance : 2

90
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Distance : 2

91
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; )
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; )
Distance : 2

92
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <s>
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <s>
Distance : 2

93
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; (
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; (
Distance : 2

94
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ,
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ,
Distance : 2

95
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; .
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; .
Distance : 2

96
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <blank>
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <blank>
Distance : 2

97
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Distance : 2

98
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ()
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ()
Distance : 2

99
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; +
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; +
Distance : 2

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } value
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } value
Distance : 7

1
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ParamChecks
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ParamChecks
Distance : 7

2
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } class
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } class
Distance : 7

3
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Override
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Override
Distance : 7

4
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ArrayList
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ArrayList
Distance : 7

5
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } IllegalArgumentException
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } IllegalArgumentException
Distance : 7

6
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } FastMath
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } FastMath
Distance : 7

7
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } expected
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } expected
Distance : 7

8
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } reportCodeChange
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } reportCodeChange
Distance : 7

9
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } List
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } List
Distance : 7

10
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Args
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Args
Distance : 7

11
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } fail
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } fail
Distance : 7

12
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } try
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } try
Distance : 7

13
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } fireChangeEvent
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } fireChangeEvent
Distance : 7

14
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } mock
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } mock
Distance : 7

15
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } getInstance
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } getInstance
Distance : 7

16
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } serialised
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } serialised
Distance : 7

17
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } join
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } join
Distance : 7

18
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } paint
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } paint
Distance : 7

19
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } *
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } *
Distance : 7

20
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } type
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } type
Distance : 7

21
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } i
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } i
Distance : 7

22
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ==
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ==
Distance : 7

23
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Object
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Object
Distance : 7

24
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } void
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } void
Distance : 7

25
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } throw
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } throw
Distance : 7

26
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

27
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

28
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

29
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 5

30
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

31
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 6

32
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } super
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } super
Distance : 7

33
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } array
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } array
Distance : 7

34
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <>
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <>
Distance : 7

35
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } m
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } m
Distance : 7

36
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } boolean
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } boolean
Distance : 7

37
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } :
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } :
Distance : 7

38
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } result
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } result
Distance : 7

39
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } checkState
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } checkState
Distance : 7

40
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } double
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } double
Distance : 7

41
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } e
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } e
Distance : 7

42
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } !=
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } !=
Distance : 7

43
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } compiler
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } compiler
Distance : 7

44
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } String
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } String
Distance : 7

45
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } f
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } f
Distance : 7

46
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } n
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } n
Distance : 7

47
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } catch
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } catch
Distance : 7

48
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ]
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ]
Distance : 7

49
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

50
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Preconditions
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Preconditions
Distance : 7

51
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } final
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } final
Distance : 7

52
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

53
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } -
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } -
Distance : 7

54
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } null
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } null
Distance : 7

55
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } mode
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } mode
Distance : 7

56
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } true
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } true
Distance : 7

57
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } {}
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } {}
Distance : 7

58
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } MathRuntimeException
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } MathRuntimeException
Distance : 7

59
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } T
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } T
Distance : 7

60
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } x
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } x
Distance : 7

61
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } parent
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } parent
Distance : 7

62
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } createIllegalArgumentException
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } createIllegalArgumentException
Distance : 7

63
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } str
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } str
Distance : 7

64
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } LINE_JOINER
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } LINE_JOINER
Distance : 7

65
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } assertThat
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } assertThat
Distance : 7

66
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } invocation
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } invocation
Distance : 7

67
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } false
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } false
Distance : 7

68
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } int
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } int
Distance : 7

69
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } testSame
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } testSame
Distance : 7

70
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } &&
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } &&
Distance : 7

71
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } >
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } >
Distance : 7

72
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } NUMBER_CONSTANT
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } NUMBER_CONSTANT
Distance : 7

73
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } public
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } public
Distance : 7

74
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } this
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } this
Distance : 7

75
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <
Distance : 7

76
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } if
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } if
Distance : 7

77
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } (
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } (
Distance : 7

78
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } return
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } return
Distance : 7

79
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } {
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } {
Distance : 7

80
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <blank>
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <blank>
Distance : 7

81
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ;
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ;
Distance : 7

82
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <s>
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } <s>
Distance : 7

83
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } .
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } .
Distance : 7

84
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ,
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ,
Distance : 7

85
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } =
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } =
Distance : 7

86
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } }
Distance : 7

87
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ()
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } ()
Distance : 7

88
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } {
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } {
Distance : 7

89
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } new
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } new
Distance : 7

90
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } STRING_CONSTANT
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } STRING_CONSTANT
Distance : 7

91
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } )
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } )
Distance : 7

92
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } @
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } @
Distance : 7

93
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } test
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } test
Distance : 7

94
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } nullNotPermitted
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } nullNotPermitted
Distance : 7

95
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } []
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } []
Distance : 7

96
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } !
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } !
Distance : 7

97
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } assertEquals
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } assertEquals
Distance : 7

98
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } +
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } +
Distance : 7

99
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } [
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } [
Distance : 7

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

1
Tree	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

2
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

3
Tree	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

4
Tree	{ this ( time , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

5
Tree	{ this ( time , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

6
Tree	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

7
Tree	{ this ( time , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

8
Tree	{ this ( time , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

9
Tree	{ this ( time , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

10
Tree	{ this ( time , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

11
Tree	{ this ( time , Locale , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

12
Tree	{ this ( time , time , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

13
Tree	{ this ( time , zone , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

14
Tree	{ this ( time , Locale , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

15
Tree	{ this ( time , time , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

16
Tree	{ this ( time , zone , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

17
Tree	{ this ( time , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

18
Tree	{ this ( time , time , time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

19
Tree	{ this ( time , time , zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

20
Tree	{ this ( time , zone , time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

21
Tree	{ this ( time , Locale , time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

22
Tree	{ this ( time , zone , zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

23
Tree	{ this ( time , Locale , zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

24
Tree	{ this ( time , time , zone , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , zone , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

25
Tree	{ this ( time , zone , zone , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , zone , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

26
Tree	{ this ( time , Locale , zone , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , zone , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

27
Tree	{ this ( time , time , Locale , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 8

28
Tree	{ this ( zone , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

29
Tree	{ this ( time , zone , Locale , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 7

30
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 8

31
Tree	{ this ( zone , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

32
Tree	{ this ( zone , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 9

33
Tree	{ this ( Locale , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

34
Tree	{ this ( Locale , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

35
Tree	{ this ( Locale , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 9

36
Tree	{ this ( time , time , Locale , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , time . getDefault () ) ; }
Distance : 8

37
Tree	{ this ( time , time , time , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 8

38
Tree	{ this ( zone , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

39
Tree	{ this ( time , zone , Locale , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , time . getDefault () ) ; }
Distance : 7

40
Tree	{ this ( time , zone , time , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 7

41
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , time . getDefault () ) ; }
Distance : 8

42
Tree	{ this ( time , Locale , time , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 8

43
Tree	{ this ( zone , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

44
Tree	{ this ( zone , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

45
Tree	{ this ( time , time , Locale , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () , zone . getDefault () ) ; }
Distance : 8

46
Tree	{ this ( time , time , zone , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , zone , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 7

47
Tree	{ this ( Locale , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

48
Tree	{ this ( zone , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

49
Tree	{ this ( zone , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

50
Tree	{ this ( time , zone , Locale , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , Locale , time . getDefault () , zone . getDefault () ) ; }
Distance : 7

51
Tree	{ this ( time , zone , zone , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , zone , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 7

52
Tree	{ this ( time , Locale , Locale , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , time . getDefault () , zone . getDefault () ) ; }
Distance : 8

53
Tree	{ this ( time , Locale , zone , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , zone , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 7

54
Tree	{ this ( Locale , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

55
Tree	{ this ( zone , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

56
Tree	{ this ( time , time , Locale , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , Locale , zone . getDefault () , zone . getDefault () ) ; }
Distance : 8

57
Tree	{ this ( Locale , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

58
Tree	{ this ( zone , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

59
Tree	{ this ( zone , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 9

60
Tree	{ this ( zone , Locale , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

61
Tree	{ this ( zone , time , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

62
Tree	{ this ( time , time , time , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , time . getDefault () ) ; }
Distance : 8

63
Tree	{ this ( Locale , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

64
Tree	{ this ( time , zone , Locale , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , Locale , zone . getDefault () , zone . getDefault () ) ; }
Distance : 7

65
Tree	{ this ( Locale , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

66
Tree	{ this ( time , Locale , Locale , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , zone . getDefault () , zone . getDefault () ) ; }
Distance : 8

67
Tree	{ this ( zone , zone , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 8

68
Tree	{ this ( time , zone , time , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale . getDefault () , time . getDefault () ) ; }
Distance : 7

69
Tree	{ this ( Locale , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

70
Tree	{ this ( zone , Locale , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 8

71
Tree	{ this ( time , Locale , time , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () , time . getDefault () ) ; }
Distance : 8

72
Tree	{ this ( Locale , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

73
Tree	{ this ( Locale , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 9

74
Tree	{ this ( Locale , Locale , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , Locale , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

75
Tree	{ this ( Locale , time , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

76
Tree	{ this ( time , time , Locale , time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () , time . getDefault () ) ; }
Distance : 8

77
Tree	{ this ( time , time , zone , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , time , zone , Locale . getDefault () , time . getDefault () ) ; }
Distance : 7

78
Tree	{ this ( time , time , time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , time , time . getDefault () , zone . getDefault () ) ; }
Distance : 9

79
Tree	{ this ( Locale , zone , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , zone , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 8

80
Tree	{ this ( zone , time , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

81
Tree	{ this ( Locale , Locale , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , Locale , Locale , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 8

82
Tree	{ this ( time , zone , Locale , time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , zone , Locale , time . getDefault () , time . getDefault () ) ; }
Distance : 7

83
Tree	{ this ( time , zone , zone , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , zone , zone , Locale . getDefault () , time . getDefault () ) ; }
Distance : 7

84
Tree	{ this ( time , zone , time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , time , time . getDefault () , zone . getDefault () ) ; }
Distance : 8

85
Tree	{ this ( time , Locale , Locale , time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , time . getDefault () , time . getDefault () ) ; }
Distance : 8

86
Tree	{ this ( time , Locale , time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , time , time . getDefault () , zone . getDefault () ) ; }
Distance : 9

87
Tree	{ this ( time , Locale , zone , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , Locale , zone , Locale . getDefault () , time . getDefault () ) ; }
Distance : 7

88
Tree	{ this ( time , time , Locale , zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , time , Locale , zone . getDefault () , time . getDefault () ) ; }
Distance : 8

89
Tree	{ this ( zone , zone , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

90
Tree	{ this ( time , time , time , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , time , zone . getDefault () , zone . getDefault () ) ; }
Distance : 8

91
Tree	{ this ( zone , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

92
Tree	{ this ( zone , time , time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

93
Tree	{ this ( time , time , zone , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time , zone , time . getDefault () , zone . getDefault () ) ; }
Distance : 8

94
Tree	{ this ( time , zone , Locale , zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , zone , Locale , zone . getDefault () , time . getDefault () ) ; }
Distance : 7

95
Tree	{ this ( Locale , time , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

96
Tree	{ this ( time , zone , time , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone , time , zone . getDefault () , zone . getDefault () ) ; }
Distance : 8

97
Tree	{ this ( time , Locale , Locale , zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , zone . getDefault () , time . getDefault () ) ; }
Distance : 8

98
Tree	{ this ( zone , time , zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time , zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

99
Tree	{ this ( time , Locale , time , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale , time , zone . getDefault () , zone . getDefault () ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( dataset != null ) { return result ; } nullNotPermitted
Code	if ( dataset != null ) { return result ; } nullNotPermitted
Distance : 2

1
Tree	if ( dataset != null ) { return result ; } false
Code	if ( dataset != null ) { return result ; } false
Distance : 2

2
Tree	if ( dataset != null ) { return result ; } !=
Code	if ( dataset != null ) { return result ; } !=
Distance : 2

3
Tree	if ( dataset != null ) { return result ; } super
Code	if ( dataset != null ) { return result ; } super
Distance : 2

4
Tree	if ( dataset != null ) { return result ; } i
Code	if ( dataset != null ) { return result ; } i
Distance : 2

5
Tree	if ( dataset != null ) { return result ; } checkState
Code	if ( dataset != null ) { return result ; } checkState
Distance : 2

6
Tree	if ( dataset != null ) { return result ; } value
Code	if ( dataset != null ) { return result ; } value
Distance : 2

7
Tree	if ( dataset != null ) { return result ; } T
Code	if ( dataset != null ) { return result ; } T
Distance : 2

8
Tree	if ( dataset != null ) { return result ; } &&
Code	if ( dataset != null ) { return result ; } &&
Distance : 2

9
Tree	if ( dataset != null ) { return result ; } @
Code	if ( dataset != null ) { return result ; } @
Distance : 2

10
Tree	if ( dataset != null ) { return result ; } join
Code	if ( dataset != null ) { return result ; } join
Distance : 2

11
Tree	if ( dataset != null ) { return result ; } mode
Code	if ( dataset != null ) { return result ; } mode
Distance : 2

12
Tree	if ( dataset != null ) { return result ; } true
Code	if ( dataset != null ) { return result ; } true
Distance : 2

13
Tree	if ( dataset != null ) { return result ; } {}
Code	if ( dataset != null ) { return result ; } {}
Distance : 2

14
Tree	if ( dataset != null ) { return result ; } MathRuntimeException
Code	if ( dataset != null ) { return result ; } MathRuntimeException
Distance : 2

15
Tree	if ( dataset != null ) { return result ; } ]
Code	if ( dataset != null ) { return result ; } ]
Distance : 2

16
Tree	if ( dataset != null ) { return result ; } [
Code	if ( dataset != null ) { return result ; } [
Distance : 2

17
Tree	if ( dataset != null ) { return result ; } Preconditions
Code	if ( dataset != null ) { return result ; } Preconditions
Distance : 2

18
Tree	if ( dataset != null ) { return result ; } -
Code	if ( dataset != null ) { return result ; } -
Distance : 2

19
Tree	if ( dataset != null ) { return result ; } type
Code	if ( dataset != null ) { return result ; } type
Distance : 2

20
Tree	if ( dataset != null ) { return result ; } *
Code	if ( dataset != null ) { return result ; } *
Distance : 2

21
Tree	if ( dataset != null ) { return result ; } paint
Code	if ( dataset != null ) { return result ; } paint
Distance : 2

22
Tree	if ( dataset != null ) { return result ; } int
Code	if ( dataset != null ) { return result ; } int
Distance : 2

23
Tree	if ( dataset != null ) { return result ; } []
Code	if ( dataset != null ) { return result ; } []
Distance : 2

24
Tree	if ( dataset != null ) { return result ; } double
Code	if ( dataset != null ) { return result ; } double
Distance : 2

25
Tree	if ( result != default: ) { return dataset ; }
Code	if ( result != default: ) { return dataset ; }
Distance : 4

26
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

27
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

28
Tree	if ( dataset != continue; ) { return result ; }
Code	if ( dataset != continue; ) { return result ; }
Distance : 2

29
Tree	if ( dataset != null ) { return dataset ; }
Code	if ( dataset != null ) { return dataset ; }
Distance : 2

30
Tree	if ( dataset != break; ) { return result ; }
Code	if ( dataset != break; ) { return result ; }
Distance : 2

31
Tree	if ( dataset != default: ) { return result ; }
Code	if ( dataset != default: ) { return result ; }
Distance : 2

32
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

33
Tree	if ( result != super(); ) { return result ; }
Code	if ( result != super(); ) { return result ; }
Distance : 3

34
Tree	if ( result != continue; ) { return result ; }
Code	if ( result != continue; ) { return result ; }
Distance : 3

35
Tree	if ( result != null ) { return dataset ; }
Code	if ( result != null ) { return dataset ; }
Distance : 3

36
Tree	if ( result != break; ) { return result ; }
Code	if ( result != break; ) { return result ; }
Distance : 3

37
Tree	if ( dataset != return; ) { return dataset ; }
Code	if ( dataset != return; ) { return dataset ; }
Distance : 3

38
Tree	if ( result != default: ) { return result ; }
Code	if ( result != default: ) { return result ; }
Distance : 3

39
Tree	if ( dataset != super(); ) { return dataset ; }
Code	if ( dataset != super(); ) { return dataset ; }
Distance : 3

40
Tree	if ( dataset != continue; ) { return dataset ; }
Code	if ( dataset != continue; ) { return dataset ; }
Distance : 3

41
Tree	if ( dataset != break; ) { return dataset ; }
Code	if ( dataset != break; ) { return dataset ; }
Distance : 3

42
Tree	if ( dataset != default: ) { return dataset ; }
Code	if ( dataset != default: ) { return dataset ; }
Distance : 3

43
Tree	if ( result != return; ) { return dataset ; }
Code	if ( result != return; ) { return dataset ; }
Distance : 4

44
Tree	if ( result != super(); ) { return dataset ; }
Code	if ( result != super(); ) { return dataset ; }
Distance : 4

45
Tree	if ( result != continue; ) { return dataset ; }
Code	if ( result != continue; ) { return dataset ; }
Distance : 4

46
Tree	if ( result != break; ) { return dataset ; }
Code	if ( result != break; ) { return dataset ; }
Distance : 4

47
Tree	if ( dataset != null ) { return result ; } test
Code	if ( dataset != null ) { return result ; } test
Distance : 2

48
Tree	if ( dataset != null ) { return result ; } <>
Code	if ( dataset != null ) { return result ; } <>
Distance : 2

49
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

50
Tree	if ( dataset != null ) { return result ; } ParamChecks
Code	if ( dataset != null ) { return result ; } ParamChecks
Distance : 2

51
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

52
Tree	if ( dataset != null ) { return result ; } new
Code	if ( dataset != null ) { return result ; } new
Distance : 2

53
Tree	if ( dataset != null ) { return result ; } !
Code	if ( dataset != null ) { return result ; } !
Distance : 2

54
Tree	if ( dataset != null ) { return result ; } assertEquals
Code	if ( dataset != null ) { return result ; } assertEquals
Distance : 2

55
Tree	if ( dataset != null ) { return result ; } (
Code	if ( dataset != null ) { return result ; } (
Distance : 2

56
Tree	if ( dataset != null ) { return result ; } <s>
Code	if ( dataset != null ) { return result ; } <s>
Distance : 2

57
Tree	if ( dataset != null ) { return result ; } if
Code	if ( dataset != null ) { return result ; } if
Distance : 2

58
Tree	if ( dataset != null ) { return result ; } <blank>
Code	if ( dataset != null ) { return result ; } <blank>
Distance : 2

59
Tree	if ( dataset != null ) { return result ; } ;
Code	if ( dataset != null ) { return result ; } ;
Distance : 2

60
Tree	if ( dataset != null ) { return result ; } )
Code	if ( dataset != null ) { return result ; } )
Distance : 2

61
Tree	if ( dataset != null ) { return result ; } .
Code	if ( dataset != null ) { return result ; } .
Distance : 2

62
Tree	if ( dataset != null ) { return result ; } ,
Code	if ( dataset != null ) { return result ; } ,
Distance : 2

63
Tree	if ( dataset != null ) { return result ; } ()
Code	if ( dataset != null ) { return result ; } ()
Distance : 2

64
Tree	if ( dataset != null ) { return result ; } String
Code	if ( dataset != null ) { return result ; } String
Distance : 2

65
Tree	if ( dataset != null ) { return result ; } {
Code	if ( dataset != null ) { return result ; } {
Distance : 2

66
Tree	if ( dataset != null ) { return result ; } STRING_CONSTANT
Code	if ( dataset != null ) { return result ; } STRING_CONSTANT
Distance : 2

67
Tree	if ( dataset != null ) { return result ; } return
Code	if ( dataset != null ) { return result ; } return
Distance : 2

68
Tree	if ( dataset != null ) { return result ; } ==
Code	if ( dataset != null ) { return result ; } ==
Distance : 2

69
Tree	if ( dataset != null ) { return result ; } NUMBER_CONSTANT
Code	if ( dataset != null ) { return result ; } NUMBER_CONSTANT
Distance : 2

70
Tree	if ( dataset != null ) { return result ; } catch
Code	if ( dataset != null ) { return result ; } catch
Distance : 2

71
Tree	if ( dataset != null ) { return result ; } throw
Code	if ( dataset != null ) { return result ; } throw
Distance : 2

72
Tree	if ( dataset != null ) { return result ; } n
Code	if ( dataset != null ) { return result ; } n
Distance : 2

73
Tree	if ( dataset != null ) { return result ; } e
Code	if ( dataset != null ) { return result ; } e
Distance : 2

74
Tree	if ( dataset != null ) { return result ; } void
Code	if ( dataset != null ) { return result ; } void
Distance : 2

75
Tree	if ( dataset != null ) { return result ; } compiler
Code	if ( dataset != null ) { return result ; } compiler
Distance : 2

76
Tree	if ( dataset != null ) { return result ; } f
Code	if ( dataset != null ) { return result ; } f
Distance : 2

77
Tree	if ( dataset != null ) { return result ; } }
Code	if ( dataset != null ) { return result ; } }
Distance : 2

78
Tree	if ( dataset != null ) { return result ; } Override
Code	if ( dataset != null ) { return result ; } Override
Distance : 2

79
Tree	if ( dataset != null ) { return result ; } mock
Code	if ( dataset != null ) { return result ; } mock
Distance : 2

80
Tree	if ( dataset != null ) { return result ; } Object
Code	if ( dataset != null ) { return result ; } Object
Distance : 2

81
Tree	if ( dataset != null ) { return result ; } class
Code	if ( dataset != null ) { return result ; } class
Distance : 2

82
Tree	if ( dataset != null ) { return result ; } try
Code	if ( dataset != null ) { return result ; } try
Distance : 2

83
Tree	if ( dataset != null ) { return result ; } fail
Code	if ( dataset != null ) { return result ; } fail
Distance : 2

84
Tree	if ( dataset != null ) { return result ; } Args
Code	if ( dataset != null ) { return result ; } Args
Distance : 2

85
Tree	if ( dataset != null ) { return result ; } List
Code	if ( dataset != null ) { return result ; } List
Distance : 2

86
Tree	if ( dataset != null ) { return result ; } result
Code	if ( dataset != null ) { return result ; } result
Distance : 2

87
Tree	if ( dataset != null ) { return result ; } :
Code	if ( dataset != null ) { return result ; } :
Distance : 2

88
Tree	if ( dataset != null ) { return result ; } boolean
Code	if ( dataset != null ) { return result ; } boolean
Distance : 2

89
Tree	if ( dataset != null ) { return result ; } m
Code	if ( dataset != null ) { return result ; } m
Distance : 2

90
Tree	if ( dataset != null ) { return result ; } +
Code	if ( dataset != null ) { return result ; } +
Distance : 2

91
Tree	if ( dataset != null ) { return result ; } null
Code	if ( dataset != null ) { return result ; } null
Distance : 2

92
Tree	if ( dataset != null ) { return result ; } >
Code	if ( dataset != null ) { return result ; } >
Distance : 2

93
Tree	if ( dataset != null ) { return result ; } public
Code	if ( dataset != null ) { return result ; } public
Distance : 2

94
Tree	if ( dataset != null ) { return result ; } final
Code	if ( dataset != null ) { return result ; } final
Distance : 2

95
Tree	if ( dataset != null ) { return result ; } this
Code	if ( dataset != null ) { return result ; } this
Distance : 2

96
Tree	if ( dataset != null ) { return result ; } <
Code	if ( dataset != null ) { return result ; } <
Distance : 2

97
Tree	if ( dataset != null ) { return result ; } if
Code	if ( dataset != null ) { return result ; } if
Distance : 2

98
Tree	if ( dataset != null ) { return result ; } =
Code	if ( dataset != null ) { return result ; } =
Distance : 2

99
Tree	if ( dataset != null ) { return result ; } array
Code	if ( dataset != null ) { return result ; } array
Distance : 2

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	! name.localSets && name.localSets == null && super
Code	! name.localSets && name.localSets == null && super
Distance : 9

1
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

2
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

3
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

4
Tree	! name.localSets && name.localSets == null && else
Code	! name.localSets && name.localSets == null && else
Distance : 9

5
Tree	! name.localSets && name.localSets == null && ^
Code	! name.localSets && name.localSets == null && ^
Distance : 9

6
Tree	! name.localSets && name.localSets == null && ++
Code	! name.localSets && name.localSets == null && ++
Distance : 9

7
Tree	! name.localSets && name.localSets == null && >=
Code	! name.localSets && name.localSets == null && >=
Distance : 9

8
Tree	! name.localSets && name.localSets == null && /=
Code	! name.localSets && name.localSets == null && /=
Distance : 9

9
Tree	! name.localSets && name.localSets == null && &
Code	! name.localSets && name.localSets == null && &
Distance : 9

10
Tree	! name.localSets && name.localSets == null && {}
Code	! name.localSets && name.localSets == null && {}
Distance : 9

11
Tree	! name.localSets && name.localSets == null && []
Code	! name.localSets && name.localSets == null && []
Distance : 9

12
Tree	! name.localSets && name.localSets == null && :
Code	! name.localSets && name.localSets == null && :
Distance : 9

13
Tree	! name.localSets && name.localSets == null && <=
Code	! name.localSets && name.localSets == null && <=
Distance : 9

14
Tree	! name.localSets && name.localSets == null && !=
Code	! name.localSets && name.localSets == null && !=
Distance : 9

15
Tree	! name.localSets && name.localSets == null && /
Code	! name.localSets && name.localSets == null && /
Distance : 9

16
Tree	! name.localSets && name.localSets == null && instanceof
Code	! name.localSets && name.localSets == null && instanceof
Distance : 9

17
Tree	! name.localSets && name.localSets == null && %
Code	! name.localSets && name.localSets == null && %
Distance : 9

18
Tree	! name.localSets && name.localSets == null && +=
Code	! name.localSets && name.localSets == null && +=
Distance : 9

19
Tree	! name.localSets && name.localSets == null && !
Code	! name.localSets && name.localSets == null && !
Distance : 9

20
Tree	! name.localSets && name.localSets == null && private
Code	! name.localSets && name.localSets == null && private
Distance : 9

21
Tree	! name.localSets && name.localSets == null && &=
Code	! name.localSets && name.localSets == null && &=
Distance : 9

22
Tree	! name.localSets && name.localSets == null && boolean
Code	! name.localSets && name.localSets == null && boolean
Distance : 9

23
Tree	! name.localSets && name.localSets == null && synchronized
Code	! name.localSets && name.localSets == null && synchronized
Distance : 9

24
Tree	! name.localSets && name.localSets == null && case
Code	! name.localSets && name.localSets == null && case
Distance : 9

25
Tree	! name.localSets && name.localSets == null && ?
Code	! name.localSets && name.localSets == null && ?
Distance : 9

26
Tree	! name.localSets && name.localSets == null && break;
Code	! name.localSets && name.localSets == null && break;
Distance : 9

27
Tree	! name.localSets && name.localSets == null && if
Code	! name.localSets && name.localSets == null && if
Distance : 9

28
Tree	! name.localSets && name.localSets == null && throws
Code	! name.localSets && name.localSets == null && throws
Distance : 9

29
Tree	! name.localSets && name.localSets == null && long
Code	! name.localSets && name.localSets == null && long
Distance : 9

30
Tree	! name.localSets && name.localSets == null && isLiteralObject
Code	! name.localSets && name.localSets == null && isLiteralObject
Distance : 9

31
Tree	! name.localSets && name.localSets == null && assert
Code	! name.localSets && name.localSets == null && assert
Distance : 9

32
Tree	! name.localSets && name.localSets == null && public
Code	! name.localSets && name.localSets == null && public
Distance : 9

33
Tree	! name.localSets && name.localSets == null && continue;
Code	! name.localSets && name.localSets == null && continue;
Distance : 9

34
Tree	! name.localSets && name.localSets == null && false
Code	! name.localSets && name.localSets == null && false
Distance : 9

35
Tree	! name.localSets && name.localSets == null && getBooleanProp
Code	! name.localSets && name.localSets == null && getBooleanProp
Distance : 9

36
Tree	! name.localSets && name.localSets == null && abstract
Code	! name.localSets && name.localSets == null && abstract
Distance : 9

37
Tree	! name.localSets && name.localSets == null && hasErrors
Code	! name.localSets && name.localSets == null && hasErrors
Distance : 9

38
Tree	! name.localSets && name.localSets == null && isPointInRect
Code	! name.localSets && name.localSets == null && isPointInRect
Distance : 9

39
Tree	! name.localSets && name.localSets == null && +
Code	! name.localSets && name.localSets == null && +
Distance : 9

40
Tree	! name.localSets && name.localSets == null && *
Code	! name.localSets && name.localSets == null && *
Distance : 9

41
Tree	! name.localSets && name.localSets == null && int
Code	! name.localSets && name.localSets == null && int
Distance : 9

42
Tree	! name.localSets && name.localSets == null && getLanguageOut
Code	! name.localSets && name.localSets == null && getLanguageOut
Distance : 9

43
Tree	! name.localSets && name.localSets == continue; && super
Code	! name.localSets && name.localSets == continue; && super
Distance : 9

44
Tree	! name.localSets && name.localSets == null && class
Code	! name.localSets && name.localSets == null && class
Distance : 9

45
Tree	! name.localSets && name.localSets == null && isRead
Code	! name.localSets && name.localSets == null && isRead
Distance : 9

46
Tree	! name.localSets && name.localSets == null && TypeInferenceMode.BOTH
Code	! name.localSets && name.localSets == null && TypeInferenceMode.BOTH
Distance : 9

47
Tree	! name.localSets && name.localSets == null && isMismatchesReported
Code	! name.localSets && name.localSets == null && isMismatchesReported
Distance : 9

48
Tree	! name.localSets && name.localSets == null && float
Code	! name.localSets && name.localSets == null && float
Distance : 9

49
Tree	! name.localSets && name.localSets == null && stubbingLookupListener
Code	! name.localSets && name.localSets == null && stubbingLookupListener
Distance : 9

50
Tree	! name.localSets && name.localSets == null && AbstractScope
Code	! name.localSets && name.localSets == null && AbstractScope
Distance : 9

51
Tree	! name.localSets && name.localSets == null && *=
Code	! name.localSets && name.localSets == null && *=
Distance : 9

52
Tree	! name.localSets && name.localSets == null && static
Code	! name.localSets && name.localSets == null && static
Distance : 9

53
Tree	! name.localSets && name.localSets == null && throw
Code	! name.localSets && name.localSets == null && throw
Distance : 9

54
Tree	! name.localSets && name.localSets == null && options.skipTranspilationAndCrash
Code	! name.localSets && name.localSets == null && options.skipTranspilationAndCrash
Distance : 9

55
Tree	! name.localSets && name.localSets == null && hasSingleThrow
Code	! name.localSets && name.localSets == null && hasSingleThrow
Distance : 9

56
Tree	! name.localSets && name.localSets == null && %=
Code	! name.localSets && name.localSets == null && %=
Distance : 9

57
Tree	! name.localSets && name.localSets == null && byte
Code	! name.localSets && name.localSets == null && byte
Distance : 9

58
Tree	! name.localSets && name.localSets == null && isReturnTypeNullable
Code	! name.localSets && name.localSets == null && isReturnTypeNullable
Distance : 9

59
Tree	! name.localSets && name.localSets == null && for
Code	! name.localSets && name.localSets == null && for
Distance : 9

60
Tree	! name.localSets && name.localSets == null && getUnknownType
Code	! name.localSets && name.localSets == null && getUnknownType
Distance : 9

61
Tree	! name.localSets && name.localSets == null && try
Code	! name.localSets && name.localSets == null && try
Distance : 9

62
Tree	! name.localSets && name.localSets == null && isVanillaFunction
Code	! name.localSets && name.localSets == null && isVanillaFunction
Distance : 9

63
Tree	! name.localSets && name.localSets == null && objType.nominalType
Code	! name.localSets && name.localSets == null && objType.nominalType
Distance : 9

64
Tree	! name.localSets && name.localSets == null && return;
Code	! name.localSets && name.localSets == null && return;
Distance : 9

65
Tree	! name.localSets && name.localSets == null && isDotPrototype
Code	! name.localSets && name.localSets == null && isDotPrototype
Distance : 9

66
Tree	! name.localSets && name.localSets == null && return
Code	! name.localSets && name.localSets == null && return
Distance : 9

67
Tree	! name.localSets && name.localSets == null && isLoose
Code	! name.localSets && name.localSets == null && isLoose
Distance : 9

68
Tree	! name.localSets && name.localSets == null && MatchResult.NO_MATCH
Code	! name.localSets && name.localSets == null && MatchResult.NO_MATCH
Distance : 9

69
Tree	! name.localSets && name.localSets == null && delimiters.length
Code	! name.localSets && name.localSets == null && delimiters.length
Distance : 9

70
Tree	! name.localSets && name.localSets == null && anyStringNull
Code	! name.localSets && name.localSets == null && anyStringNull
Distance : 9

71
Tree	! name.localSets && name.localSets == null && options.checksOnly
Code	! name.localSets && name.localSets == null && options.checksOnly
Distance : 9

72
Tree	! name.localSets && name.localSets == null && getOutputFeatureSet
Code	! name.localSets && name.localSets == null && getOutputFeatureSet
Distance : 9

73
Tree	! name.localSets && name.localSets == null && -=
Code	! name.localSets && name.localSets == null && -=
Distance : 9

74
Tree	! name.localSets && name.localSets == null && --
Code	! name.localSets && name.localSets == null && --
Distance : 9

75
Tree	! name.localSets && name.localSets == null && getRunOTIafterNTI
Code	! name.localSets && name.localSets == null && getRunOTIafterNTI
Distance : 9

76
Tree	! name.localSets && name.localSets == null && matchesStringContext
Code	! name.localSets && name.localSets == null && matchesStringContext
Distance : 9

77
Tree	! name.localSets && name.localSets == null && shouldPreserve
Code	! name.localSets && name.localSets == null && shouldPreserve
Distance : 9

78
Tree	! name.localSets && name.localSets == null && default:
Code	! name.localSets && name.localSets == null && default:
Distance : 9

79
Tree	! name.localSets && name.localSets == null && hasSameMethod
Code	! name.localSets && name.localSets == null && hasSameMethod
Distance : 9

80
Tree	! name.localSets && name.localSets == null && <>
Code	! name.localSets && name.localSets == null && <>
Distance : 9

81
Tree	! name.localSets && name.localSets == null && JsdocUtil
Code	! name.localSets && name.localSets == null && JsdocUtil
Distance : 9

82
Tree	! name.localSets && name.localSets == null && LanguageMode.TYPESCRIPT
Code	! name.localSets && name.localSets == null && LanguageMode.TYPESCRIPT
Distance : 9

83
Tree	! name.localSets && name.localSets == null && MockitoMock
Code	! name.localSets && name.localSets == null && MockitoMock
Distance : 9

84
Tree	! name.localSets && name.localSets == return; && super
Code	! name.localSets && name.localSets == return; && super
Distance : 9

85
Tree	! name.localSets && name.localSets == null && orderingContext
Code	! name.localSets && name.localSets == null && orderingContext
Distance : 9

86
Tree	! name.localSets && name.localSets == null && funType
Code	! name.localSets && name.localSets == null && funType
Distance : 9

87
Tree	! name.localSets && name.localSets == null && DecompositionType.UNDECOMPOSABLE
Code	! name.localSets && name.localSets == null && DecompositionType.UNDECOMPOSABLE
Distance : 9

88
Tree	! name.localSets && name.localSets == null && Config.StrictMode.SLOPPY
Code	! name.localSets && name.localSets == null && Config.StrictMode.SLOPPY
Distance : 9

89
Tree	! name.localSets && name.localSets == null && checkNotNull
Code	! name.localSets && name.localSets == null && checkNotNull
Distance : 9

90
Tree	! name.localSets && name.localSets == null && isPropertyDeclarationOnThis
Code	! name.localSets && name.localSets == null && isPropertyDeclarationOnThis
Distance : 9

91
Tree	! name.localSets && name.localSets == null && getMask
Code	! name.localSets && name.localSets == null && getMask
Distance : 9

92
Tree	! name.localSets && name.localSets == continue; && CHAR_CONS
Code	! name.localSets && name.localSets == continue; && CHAR_CONS
Distance : 9

93
Tree	! name.localSets && name.localSets == null && getHistogram2
Code	! name.localSets && name.localSets == null && getHistogram2
Distance : 9

94
Tree	! name.localSets && name.localSets == null && PropertyRenamingPolicy.ALL_UNQUOTED
Code	! name.localSets && name.localSets == null && PropertyRenamingPolicy.ALL_UNQUOTED
Distance : 9

95
Tree	! name.localSets && name.localSets == null && LocalizedFormats.EULER_ANGLES_SINGULARITY
Code	! name.localSets && name.localSets == null && LocalizedFormats.EULER_ANGLES_SINGULARITY
Distance : 9

96
Tree	! name.localSets && name.localSets == null && isLastMatcherVarargMatcher
Code	! name.localSets && name.localSets == null && isLastMatcherVarargMatcher
Distance : 9

97
Tree	! name.localSets && name.localSets == null && getMatcher
Code	! name.localSets && name.localSets == null && getMatcher
Distance : 9

98
Tree	! name.localSets && name.localSets == null && getLanguageIn
Code	! name.localSets && name.localSets == null && getLanguageIn
Distance : 9

99
Tree	! name.localSets && name.localSets == null && ADDITIVE_MODE
Code	! name.localSets && name.localSets == null && ADDITIVE_MODE
Distance : 9

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Context rhsContext = Context.OTHER ; !=
Code	Context rhsContext = Context.OTHER ; !=
Distance : 5

1
Tree	Context rhsContext = Context.OTHER ; createIllegalArgumentException
Code	Context rhsContext = Context.OTHER ; createIllegalArgumentException
Distance : 5

2
Tree	Context rhsContext = Context.OTHER ; add
Code	Context rhsContext = Context.OTHER ; add
Distance : 5

3
Tree	Context rhsContext = Context.OTHER ; name
Code	Context rhsContext = Context.OTHER ; name
Distance : 5

4
Tree	Context rhsContext = Context.OTHER ; m
Code	Context rhsContext = Context.OTHER ; m
Distance : 5

5
Tree	Context rhsContext = Context.OTHER ; boolean
Code	Context rhsContext = Context.OTHER ; boolean
Distance : 5

6
Tree	Context rhsContext = Context.OTHER ; checkArgument
Code	Context rhsContext = Context.OTHER ; checkArgument
Distance : 5

7
Tree	Context rhsContext = Context.OTHER ; data
Code	Context rhsContext = Context.OTHER ; data
Distance : 5

8
Tree	Context rhsContext = Context.OTHER ; List
Code	Context rhsContext = Context.OTHER ; List
Distance : 5

9
Tree	Context rhsContext = Context.OTHER ; Args
Code	Context rhsContext = Context.OTHER ; Args
Distance : 5

10
Tree	Context rhsContext = Context.OTHER ; array
Code	Context rhsContext = Context.OTHER ; array
Distance : 5

11
Tree	Context rhsContext = Context.OTHER ; <>
Code	Context rhsContext = Context.OTHER ; <>
Distance : 5

12
Tree	Context rhsContext = Context.OTHER ; try
Code	Context rhsContext = Context.OTHER ; try
Distance : 5

13
Tree	Context rhsContext = Context.OTHER ; fail
Code	Context rhsContext = Context.OTHER ; fail
Distance : 5

14
Tree	Context rhsContext = Context.OTHER ; paint
Code	Context rhsContext = Context.OTHER ; paint
Distance : 5

15
Tree	Context rhsContext = Context.OTHER ; join
Code	Context rhsContext = Context.OTHER ; join
Distance : 5

16
Tree	Context rhsContext = Context.OTHER ; str
Code	Context rhsContext = Context.OTHER ; str
Distance : 5

17
Tree	Context rhsContext = Context.OTHER ; LINE_JOINER
Code	Context rhsContext = Context.OTHER ; LINE_JOINER
Distance : 5

18
Tree	Context rhsContext = Context.OTHER ; testSame
Code	Context rhsContext = Context.OTHER ; testSame
Distance : 5

19
Tree	Context rhsContext = Context.OTHER ; x
Code	Context rhsContext = Context.OTHER ; x
Distance : 5

20
Tree	Context rhsContext = Context.OTHER ; ArrayList
Code	Context rhsContext = Context.OTHER ; ArrayList
Distance : 5

21
Tree	Context rhsContext = Context.OTHER ; fireChangeEvent
Code	Context rhsContext = Context.OTHER ; fireChangeEvent
Distance : 5

22
Tree	Context rhsContext = Context.OTHER ; super
Code	Context rhsContext = Context.OTHER ; super
Distance : 5

23
Tree	Context rhsContext = Context.OTHER ; parent
Code	Context rhsContext = Context.OTHER ; parent
Distance : 5

24
Tree	Context rhsContext = Context.OTHER ; IllegalArgumentException
Code	Context rhsContext = Context.OTHER ; IllegalArgumentException
Distance : 5

25
Tree	Context rhsContext = Context.OTHER ; test
Code	Context rhsContext = Context.OTHER ; test
Distance : 5

26
Tree	Context rhsContext = Context.OTHER ; int
Code	Context rhsContext = Context.OTHER ; int
Distance : 5

27
Tree	Context rhsContext = Context.OTHER ; invocation
Code	Context rhsContext = Context.OTHER ; invocation
Distance : 5

28
Tree	Context rhsContext = Context.OTHER ; reportCodeChange
Code	Context rhsContext = Context.OTHER ; reportCodeChange
Distance : 5

29
Tree	Context rhsContext = Context.OTHER ; expected
Code	Context rhsContext = Context.OTHER ; expected
Distance : 5

30
Tree	Context rhsContext = Context.OTHER ; :
Code	Context rhsContext = Context.OTHER ; :
Distance : 5

31
Tree	Context rhsContext = Context.OTHER ; result
Code	Context rhsContext = Context.OTHER ; result
Distance : 5

32
Tree	Context rhsContext = Context.OTHER ; serialised
Code	Context rhsContext = Context.OTHER ; serialised
Distance : 5

33
Tree	Context rhsContext = Context.OTHER ; getInstance
Code	Context rhsContext = Context.OTHER ; getInstance
Distance : 5

34
Tree	Context rhsContext = Context.OTHER ; *
Code	Context rhsContext = Context.OTHER ; *
Distance : 5

35
Tree	Context rhsContext = Context.OTHER ; type
Code	Context rhsContext = Context.OTHER ; type
Distance : 5

36
Tree	Context rhsContext = Context.OTHER ; false
Code	Context rhsContext = Context.OTHER ; false
Distance : 5

37
Tree	Context rhsContext = Context.OTHER ; double
Code	Context rhsContext = Context.OTHER ; double
Distance : 5

38
Tree	Context rhsContext = Context.OTHER ; FastMath
Code	Context rhsContext = Context.OTHER ; FastMath
Distance : 5

39
Tree	Context rhsContext = Context.OTHER ; checkState
Code	Context rhsContext = Context.OTHER ; checkState
Distance : 5

40
Tree	Context rhsContext = Context.OTHER ; nullNotPermitted
Code	Context rhsContext = Context.OTHER ; nullNotPermitted
Distance : 5

41
Tree	Context rhsContext = Context.OTHER ; []
Code	Context rhsContext = Context.OTHER ; []
Distance : 5

42
Tree	Context rhsContext = Context.OTHER ; void
Code	Context rhsContext = Context.OTHER ; void
Distance : 5

43
Tree	Context rhsContext = Context.OTHER ; ==
Code	Context rhsContext = Context.OTHER ; ==
Distance : 5

44
Tree	Context rhsContext = Context.OTHER ; assertEquals
Code	Context rhsContext = Context.OTHER ; assertEquals
Distance : 5

45
Tree	Context rhsContext = Context.OTHER ; !
Code	Context rhsContext = Context.OTHER ; !
Distance : 5

46
Tree	Context rhsContext = Context.OTHER ; @
Code	Context rhsContext = Context.OTHER ; @
Distance : 5

47
Tree	Context rhsContext = Context.OTHER ; assertThat
Code	Context rhsContext = Context.OTHER ; assertThat
Distance : 5

48
Tree	Context rhsContext = Context.OTHER ; Override
Code	Context rhsContext = Context.OTHER ; Override
Distance : 5

49
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

50
Tree	Context rhsContext = Context.OTHER ; [
Code	Context rhsContext = Context.OTHER ; [
Distance : 5

51
Tree	Context rhsContext = Context.OTHER ; this
Code	Context rhsContext = Context.OTHER ; this
Distance : 5

52
Tree	Context rhsContext = Context.OTHER ; &&
Code	Context rhsContext = Context.OTHER ; &&
Distance : 5

53
Tree	Context rhsContext = Context.OTHER ; T
Code	Context rhsContext = Context.OTHER ; T
Distance : 5

54
Tree	Context rhsContext = Context.OTHER ; Preconditions
Code	Context rhsContext = Context.OTHER ; Preconditions
Distance : 5

55
Tree	Context rhsContext = Context.OTHER ; -
Code	Context rhsContext = Context.OTHER ; -
Distance : 5

56
Tree	Context rhsContext = Context.OTHER ; class
Code	Context rhsContext = Context.OTHER ; class
Distance : 5

57
Tree	Context rhsContext = Context.OTHER ; Object
Code	Context rhsContext = Context.OTHER ; Object
Distance : 5

58
Tree	Context rhsContext = Context.OTHER ; {}
Code	Context rhsContext = Context.OTHER ; {}
Distance : 5

59
Tree	Context rhsContext = Context.OTHER ; MathRuntimeException
Code	Context rhsContext = Context.OTHER ; MathRuntimeException
Distance : 5

60
Tree	Context rhsContext = Context.OTHER ; ParamChecks
Code	Context rhsContext = Context.OTHER ; ParamChecks
Distance : 5

61
Tree	Context rhsContext = Context.OTHER ; f
Code	Context rhsContext = Context.OTHER ; f
Distance : 5

62
Tree	Context rhsContext = Context.OTHER ; t
Code	Context rhsContext = Context.OTHER ; t
Distance : 5

63
Tree	Context rhsContext = Context.OTHER ; field
Code	Context rhsContext = Context.OTHER ; field
Distance : 5

64
Tree	Context rhsContext = Context.OTHER ; value
Code	Context rhsContext = Context.OTHER ; value
Distance : 5

65
Tree	Context rhsContext = Context.OTHER ; i
Code	Context rhsContext = Context.OTHER ; i
Distance : 5

66
Tree	Context rhsContext = Context.OTHER ; throw
Code	Context rhsContext = Context.OTHER ; throw
Distance : 5

67
Tree	Context rhsContext = Context.OTHER ; catch
Code	Context rhsContext = Context.OTHER ; catch
Distance : 5

68
Tree	Context rhsContext = Context.OTHER ; +
Code	Context rhsContext = Context.OTHER ; +
Distance : 5

69
Tree	Context rhsContext = Context.OTHER ; null
Code	Context rhsContext = Context.OTHER ; null
Distance : 5

70
Tree	Context rhsContext = Context.OTHER ; String
Code	Context rhsContext = Context.OTHER ; String
Distance : 5

71
Tree	Context rhsContext = Context.OTHER ; compiler
Code	Context rhsContext = Context.OTHER ; compiler
Distance : 5

72
Tree	Context rhsContext = Context.OTHER ; ]
Code	Context rhsContext = Context.OTHER ; ]
Distance : 5

73
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

74
Tree	Context rhsContext = Context.OTHER ; NUMBER_CONSTANT
Code	Context rhsContext = Context.OTHER ; NUMBER_CONSTANT
Distance : 5

75
Tree	Context rhsContext = Context.OTHER ; true
Code	Context rhsContext = Context.OTHER ; true
Distance : 5

76
Tree	Context rhsContext = Context.OTHER ; return
Code	Context rhsContext = Context.OTHER ; return
Distance : 5

77
Tree	Context rhsContext = Context.OTHER ; <
Code	Context rhsContext = Context.OTHER ; <
Distance : 5

78
Tree	Context rhsContext = Context.OTHER ; e
Code	Context rhsContext = Context.OTHER ; e
Distance : 5

79
Tree	Context rhsContext = Context.OTHER ; n
Code	Context rhsContext = Context.OTHER ; n
Distance : 5

80
Tree	Context rhsContext = Context.OTHER ; {
Code	Context rhsContext = Context.OTHER ; {
Distance : 5

81
Tree	Context rhsContext = Context.OTHER ; ()
Code	Context rhsContext = Context.OTHER ; ()
Distance : 5

82
Tree	Context rhsContext = Context.OTHER ; ;
Code	Context rhsContext = Context.OTHER ; ;
Distance : 4

83
Tree	Context rhsContext = Context.OTHER ; )
Code	Context rhsContext = Context.OTHER ; )
Distance : 4

84
Tree	Context rhsContext = Context.OTHER ; =
Code	Context rhsContext = Context.OTHER ; =
Distance : 5

85
Tree	Context rhsContext = Context.OTHER ; if
Code	Context rhsContext = Context.OTHER ; if
Distance : 5

86
Tree	Context rhsContext = Context.OTHER ; <blank>
Code	Context rhsContext = Context.OTHER ; <blank>
Distance : 5

87
Tree	Context rhsContext = Context.OTHER ; (
Code	Context rhsContext = Context.OTHER ; (
Distance : 5

88
Tree	Context rhsContext = Context.OTHER ; =
Code	Context rhsContext = Context.OTHER ; =
Distance : 5

89
Tree	Context rhsContext = Context.OTHER ; }
Code	Context rhsContext = Context.OTHER ; }
Distance : 5

90
Tree	Context rhsContext = Context.OTHER ; .
Code	Context rhsContext = Context.OTHER ; .
Distance : 5

91
Tree	Context rhsContext = Context.OTHER ; ,
Code	Context rhsContext = Context.OTHER ; ,
Distance : 5

92
Tree	Context rhsContext = Context.OTHER ; STRING_CONSTANT
Code	Context rhsContext = Context.OTHER ; STRING_CONSTANT
Distance : 5

93
Tree	Context rhsContext = Context.OTHER ; new
Code	Context rhsContext = Context.OTHER ; new
Distance : 5

94
Tree	Context rhsContext = Context.OTHER ; >
Code	Context rhsContext = Context.OTHER ; >
Distance : 5

95
Tree	Context rhsContext = Context.OTHER ; public
Code	Context rhsContext = Context.OTHER ; public
Distance : 5

96
Tree	Context rhsContext = Context.OTHER ; mode
Code	Context rhsContext = Context.OTHER ; mode
Distance : 5

97
Tree	Context rhsContext = Context.OTHER ; <s>
Code	Context rhsContext = Context.OTHER ; <s>
Distance : 5

98
Tree	Context rhsContext = Context.OTHER ; final
Code	Context rhsContext = Context.OTHER ; final
Distance : 5

99
Tree	Context rhsContext = Context.OTHER ; mock
Code	Context rhsContext = Context.OTHER ; mock
Distance : 5

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ARRAY_TYPE ; } !=
Code	{ return ARRAY_TYPE ; } !=
Distance : 11

1
Tree	{ return ARRAY_TYPE ; } createIllegalArgumentException
Code	{ return ARRAY_TYPE ; } createIllegalArgumentException
Distance : 11

2
Tree	{ return ARRAY_TYPE ; } add
Code	{ return ARRAY_TYPE ; } add
Distance : 11

3
Tree	{ return ARRAY_TYPE ; } name
Code	{ return ARRAY_TYPE ; } name
Distance : 11

4
Tree	{ return ARRAY_TYPE ; } m
Code	{ return ARRAY_TYPE ; } m
Distance : 11

5
Tree	{ return ARRAY_TYPE ; } boolean
Code	{ return ARRAY_TYPE ; } boolean
Distance : 11

6
Tree	{ return ARRAY_TYPE ; } checkArgument
Code	{ return ARRAY_TYPE ; } checkArgument
Distance : 11

7
Tree	{ return ARRAY_TYPE ; } data
Code	{ return ARRAY_TYPE ; } data
Distance : 11

8
Tree	{ return ARRAY_TYPE ; } List
Code	{ return ARRAY_TYPE ; } List
Distance : 11

9
Tree	{ return ARRAY_TYPE ; } Args
Code	{ return ARRAY_TYPE ; } Args
Distance : 11

10
Tree	{ return ARRAY_TYPE ; } array
Code	{ return ARRAY_TYPE ; } array
Distance : 11

11
Tree	{ return ARRAY_TYPE ; } <>
Code	{ return ARRAY_TYPE ; } <>
Distance : 11

12
Tree	{ return ARRAY_TYPE ; } try
Code	{ return ARRAY_TYPE ; } try
Distance : 11

13
Tree	{ return ARRAY_TYPE ; } fail
Code	{ return ARRAY_TYPE ; } fail
Distance : 11

14
Tree	{ return ARRAY_TYPE ; } paint
Code	{ return ARRAY_TYPE ; } paint
Distance : 11

15
Tree	{ return ARRAY_TYPE ; } join
Code	{ return ARRAY_TYPE ; } join
Distance : 11

16
Tree	{ return ARRAY_TYPE ; } str
Code	{ return ARRAY_TYPE ; } str
Distance : 11

17
Tree	{ return ARRAY_TYPE ; } LINE_JOINER
Code	{ return ARRAY_TYPE ; } LINE_JOINER
Distance : 11

18
Tree	{ return ARRAY_TYPE ; } testSame
Code	{ return ARRAY_TYPE ; } testSame
Distance : 11

19
Tree	{ return ARRAY_TYPE ; } x
Code	{ return ARRAY_TYPE ; } x
Distance : 11

20
Tree	{ return ARRAY_TYPE ; } ArrayList
Code	{ return ARRAY_TYPE ; } ArrayList
Distance : 11

21
Tree	{ return ARRAY_TYPE ; } fireChangeEvent
Code	{ return ARRAY_TYPE ; } fireChangeEvent
Distance : 11

22
Tree	{ return ARRAY_TYPE ; } super
Code	{ return ARRAY_TYPE ; } super
Distance : 11

23
Tree	{ return ARRAY_TYPE ; } parent
Code	{ return ARRAY_TYPE ; } parent
Distance : 11

24
Tree	{ return ARRAY_TYPE ; } IllegalArgumentException
Code	{ return ARRAY_TYPE ; } IllegalArgumentException
Distance : 11

25
Tree	{ return ARRAY_TYPE ; } test
Code	{ return ARRAY_TYPE ; } test
Distance : 11

26
Tree	{ return ARRAY_TYPE ; } int
Code	{ return ARRAY_TYPE ; } int
Distance : 11

27
Tree	{ return ARRAY_TYPE ; } invocation
Code	{ return ARRAY_TYPE ; } invocation
Distance : 11

28
Tree	{ return ARRAY_TYPE ; } reportCodeChange
Code	{ return ARRAY_TYPE ; } reportCodeChange
Distance : 11

29
Tree	{ return ARRAY_TYPE ; } expected
Code	{ return ARRAY_TYPE ; } expected
Distance : 11

30
Tree	{ return ARRAY_TYPE ; } :
Code	{ return ARRAY_TYPE ; } :
Distance : 11

31
Tree	{ return ARRAY_TYPE ; } result
Code	{ return ARRAY_TYPE ; } result
Distance : 11

32
Tree	{ return ARRAY_TYPE ; } serialised
Code	{ return ARRAY_TYPE ; } serialised
Distance : 11

33
Tree	{ return ARRAY_TYPE ; } getInstance
Code	{ return ARRAY_TYPE ; } getInstance
Distance : 11

34
Tree	{ return ARRAY_TYPE ; } *
Code	{ return ARRAY_TYPE ; } *
Distance : 11

35
Tree	{ return ARRAY_TYPE ; } type
Code	{ return ARRAY_TYPE ; } type
Distance : 11

36
Tree	{ return ARRAY_TYPE ; } false
Code	{ return ARRAY_TYPE ; } false
Distance : 11

37
Tree	{ return ARRAY_TYPE ; } double
Code	{ return ARRAY_TYPE ; } double
Distance : 11

38
Tree	{ return ARRAY_TYPE ; } FastMath
Code	{ return ARRAY_TYPE ; } FastMath
Distance : 11

39
Tree	{ return ARRAY_TYPE ; } checkState
Code	{ return ARRAY_TYPE ; } checkState
Distance : 11

40
Tree	{ return ARRAY_TYPE ; } nullNotPermitted
Code	{ return ARRAY_TYPE ; } nullNotPermitted
Distance : 11

41
Tree	{ return ARRAY_TYPE ; } []
Code	{ return ARRAY_TYPE ; } []
Distance : 11

42
Tree	{ return ARRAY_TYPE ; } void
Code	{ return ARRAY_TYPE ; } void
Distance : 11

43
Tree	{ return ARRAY_TYPE ; } ==
Code	{ return ARRAY_TYPE ; } ==
Distance : 11

44
Tree	{ return ARRAY_TYPE ; } assertEquals
Code	{ return ARRAY_TYPE ; } assertEquals
Distance : 11

45
Tree	{ return ARRAY_TYPE ; } !
Code	{ return ARRAY_TYPE ; } !
Distance : 11

46
Tree	{ return ARRAY_TYPE ; } @
Code	{ return ARRAY_TYPE ; } @
Distance : 11

47
Tree	{ return ARRAY_TYPE ; } assertThat
Code	{ return ARRAY_TYPE ; } assertThat
Distance : 11

48
Tree	{ return ARRAY_TYPE ; } Override
Code	{ return ARRAY_TYPE ; } Override
Distance : 11

49
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

50
Tree	{ return ARRAY_TYPE ; } [
Code	{ return ARRAY_TYPE ; } [
Distance : 11

51
Tree	{ return ARRAY_TYPE ; } this
Code	{ return ARRAY_TYPE ; } this
Distance : 11

52
Tree	{ return ARRAY_TYPE ; } &&
Code	{ return ARRAY_TYPE ; } &&
Distance : 11

53
Tree	{ return ARRAY_TYPE ; } T
Code	{ return ARRAY_TYPE ; } T
Distance : 11

54
Tree	{ return ARRAY_TYPE ; } Preconditions
Code	{ return ARRAY_TYPE ; } Preconditions
Distance : 11

55
Tree	{ return ARRAY_TYPE ; } -
Code	{ return ARRAY_TYPE ; } -
Distance : 11

56
Tree	{ return ARRAY_TYPE ; } class
Code	{ return ARRAY_TYPE ; } class
Distance : 11

57
Tree	{ return ARRAY_TYPE ; } Object
Code	{ return ARRAY_TYPE ; } Object
Distance : 11

58
Tree	{ return ARRAY_TYPE ; } {}
Code	{ return ARRAY_TYPE ; } {}
Distance : 11

59
Tree	{ return ARRAY_TYPE ; } MathRuntimeException
Code	{ return ARRAY_TYPE ; } MathRuntimeException
Distance : 11

60
Tree	{ return ARRAY_TYPE ; } ParamChecks
Code	{ return ARRAY_TYPE ; } ParamChecks
Distance : 11

61
Tree	{ return ARRAY_TYPE ; } f
Code	{ return ARRAY_TYPE ; } f
Distance : 11

62
Tree	{ return ARRAY_TYPE ; } t
Code	{ return ARRAY_TYPE ; } t
Distance : 11

63
Tree	{ return ARRAY_TYPE ; } field
Code	{ return ARRAY_TYPE ; } field
Distance : 11

64
Tree	{ return ARRAY_TYPE ; } value
Code	{ return ARRAY_TYPE ; } value
Distance : 11

65
Tree	{ return ARRAY_TYPE ; } i
Code	{ return ARRAY_TYPE ; } i
Distance : 11

66
Tree	{ return ARRAY_TYPE ; } throw
Code	{ return ARRAY_TYPE ; } throw
Distance : 11

67
Tree	{ return ARRAY_TYPE ; } catch
Code	{ return ARRAY_TYPE ; } catch
Distance : 11

68
Tree	{ return ARRAY_TYPE ; } +
Code	{ return ARRAY_TYPE ; } +
Distance : 11

69
Tree	{ return ARRAY_TYPE ; } null
Code	{ return ARRAY_TYPE ; } null
Distance : 11

70
Tree	{ return ARRAY_TYPE ; } String
Code	{ return ARRAY_TYPE ; } String
Distance : 11

71
Tree	{ return ARRAY_TYPE ; } compiler
Code	{ return ARRAY_TYPE ; } compiler
Distance : 11

72
Tree	{ return ARRAY_TYPE ; } ]
Code	{ return ARRAY_TYPE ; } ]
Distance : 11

73
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

74
Tree	{ return ARRAY_TYPE ; } NUMBER_CONSTANT
Code	{ return ARRAY_TYPE ; } NUMBER_CONSTANT
Distance : 11

75
Tree	{ return ARRAY_TYPE ; } true
Code	{ return ARRAY_TYPE ; } true
Distance : 11

76
Tree	{ return ARRAY_TYPE ; } return
Code	{ return ARRAY_TYPE ; } return
Distance : 11

77
Tree	{ return ARRAY_TYPE ; } <
Code	{ return ARRAY_TYPE ; } <
Distance : 11

78
Tree	{ return ARRAY_TYPE ; } e
Code	{ return ARRAY_TYPE ; } e
Distance : 11

79
Tree	{ return ARRAY_TYPE ; } n
Code	{ return ARRAY_TYPE ; } n
Distance : 11

80
Tree	{ return ARRAY_TYPE ; } {
Code	{ return ARRAY_TYPE ; } {
Distance : 11

81
Tree	{ return ARRAY_TYPE ; } ()
Code	{ return ARRAY_TYPE ; } ()
Distance : 11

82
Tree	{ return ARRAY_TYPE ; } ;
Code	{ return ARRAY_TYPE ; } ;
Distance : 11

83
Tree	{ return ARRAY_TYPE ; } )
Code	{ return ARRAY_TYPE ; } )
Distance : 11

84
Tree	{ return ARRAY_TYPE ; } {
Code	{ return ARRAY_TYPE ; } {
Distance : 11

85
Tree	{ return ARRAY_TYPE ; } if
Code	{ return ARRAY_TYPE ; } if
Distance : 11

86
Tree	{ return ARRAY_TYPE ; } <blank>
Code	{ return ARRAY_TYPE ; } <blank>
Distance : 11

87
Tree	{ return ARRAY_TYPE ; } (
Code	{ return ARRAY_TYPE ; } (
Distance : 11

88
Tree	{ return ARRAY_TYPE ; } =
Code	{ return ARRAY_TYPE ; } =
Distance : 11

89
Tree	{ return ARRAY_TYPE ; } }
Code	{ return ARRAY_TYPE ; } }
Distance : 11

90
Tree	{ return ARRAY_TYPE ; } .
Code	{ return ARRAY_TYPE ; } .
Distance : 11

91
Tree	{ return ARRAY_TYPE ; } ,
Code	{ return ARRAY_TYPE ; } ,
Distance : 11

92
Tree	{ return ARRAY_TYPE ; } STRING_CONSTANT
Code	{ return ARRAY_TYPE ; } STRING_CONSTANT
Distance : 11

93
Tree	{ return ARRAY_TYPE ; } new
Code	{ return ARRAY_TYPE ; } new
Distance : 11

94
Tree	{ return ARRAY_TYPE ; } >
Code	{ return ARRAY_TYPE ; } >
Distance : 11

95
Tree	{ return ARRAY_TYPE ; } public
Code	{ return ARRAY_TYPE ; } public
Distance : 11

96
Tree	{ return ARRAY_TYPE ; } mode
Code	{ return ARRAY_TYPE ; } mode
Distance : 11

97
Tree	{ return ARRAY_TYPE ; } <s>
Code	{ return ARRAY_TYPE ; } <s>
Distance : 11

98
Tree	{ return ARRAY_TYPE ; } final
Code	{ return ARRAY_TYPE ; } final
Distance : 11

99
Tree	{ return ARRAY_TYPE ; } mock
Code	{ return ARRAY_TYPE ; } mock
Distance : 11

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } checkState
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } checkState
Distance : 18

1
Tree	{ if ( ! isGet ( parent , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( parent , NodeUtil ) ) { return false ; } return true ; }
Distance : 18

2
Tree	{ if ( ! isGet ( assignLhsChild , null ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , null ) ) { return true ; } return true ; }
Distance : 15

3
Tree	{ if ( ! isGet ( parent , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , NodeUtil ) ) { return true ; } return true ; }
Distance : 17

4
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return false ; } return true ; }
Distance : 18

5
Tree	{ if ( ! isGet ( parent , null ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( parent , null ) ) { return false ; } return true ; }
Distance : 17

6
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return true ; }
Distance : 17

7
Tree	{ if ( ! isGet ( parent , null ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , null ) ) { return true ; } return true ; }
Distance : 16

8
Tree	{ if ( ! isGet ( NodeUtil , != ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , != ) ) { return false ; } return true ; }
Distance : 17

9
Tree	{ if ( ! isGet ( NodeUtil , null ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , null ) ) { return true ; } return true ; }
Distance : 16

10
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } int
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } int
Distance : 18

11
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } test
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } test
Distance : 18

12
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } @
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } @
Distance : 18

13
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } double
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } double
Distance : 18

14
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } false
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } false
Distance : 18

15
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } catch
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } catch
Distance : 18

16
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } throw
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } throw
Distance : 18

17
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } f
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } f
Distance : 18

18
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } void
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } void
Distance : 18

19
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ==
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ==
Distance : 18

20
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <>
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <>
Distance : 18

21
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } array
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } array
Distance : 18

22
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return true ; }
Distance : 17

23
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ParamChecks
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ParamChecks
Distance : 18

24
Tree	{ if ( ! isGet ( assignLhsChild , null ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , null ) ) { return false ; } return true ; }
Distance : 16

25
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 17

26
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 17

27
Tree	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 18

28
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Distance : 16

29
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 17

30
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return false ; } return false ; }
Distance : 18

31
Tree	{ if ( ! isGet ( assignLhsChild , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , null ) ) { return false ; } return false ; }
Distance : 16

32
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 17

33
Tree	{ if ( ! isGet ( parent , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil ) ) { return false ; } return false ; }
Distance : 18

34
Tree	{ if ( ! isGet ( assignLhsChild , null ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , null ) ) { return true ; } return false ; }
Distance : 15

35
Tree	{ if ( ! isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

36
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return false ; } return false ; }
Distance : 18

37
Tree	{ if ( ! isGet ( parent , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , null ) ) { return false ; } return false ; }
Distance : 17

38
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

39
Tree	{ if ( ! isGet ( parent , null ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , null ) ) { return true ; } return false ; }
Distance : 16

40
Tree	{ if ( ! isGet ( NodeUtil , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , null ) ) { return false ; } return false ; }
Distance : 17

41
Tree	{ if ( ! isGet ( NodeUtil , null ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , null ) ) { return true ; } return false ; }
Distance : 16

42
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return true ; }
Distance : 17

43
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Distance : 16

44
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return true ; }
Distance : 17

45
Tree	{ if ( ! isGet ( parent , parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return false ; } return true ; }
Distance : 18

46
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return true ; }
Distance : 16

47
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return false ; } return true ; }
Distance : 18

48
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ]
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ]
Distance : 18

49
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 17

50
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } Preconditions
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } Preconditions
Distance : 18

51
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } NUMBER_CONSTANT
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } NUMBER_CONSTANT
Distance : 18

52
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } STRING_CONSTANT
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } STRING_CONSTANT
Distance : 18

53
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } new
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } new
Distance : 18

54
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } public
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } public
Distance : 18

55
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } >
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } >
Distance : 18

56
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } return
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } return
Distance : 18

57
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } +
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } +
Distance : 18

58
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } null
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } null
Distance : 18

59
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } (
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } (
Distance : 18

60
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

61
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } .
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } .
Distance : 18

62
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ,
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ,
Distance : 18

63
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } )
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } )
Distance : 18

64
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } n
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } n
Distance : 18

65
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } e
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } e
Distance : 18

66
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } String
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } String
Distance : 18

67
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } compiler
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } compiler
Distance : 18

68
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } Override
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } Override
Distance : 18

69
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } mock
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } mock
Distance : 18

70
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } Object
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } Object
Distance : 18

71
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } class
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } class
Distance : 18

72
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } !=
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } !=
Distance : 18

73
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } super
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } super
Distance : 18

74
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ;
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ;
Distance : 18

75
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <s>
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <s>
Distance : 18

76
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } -
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } -
Distance : 18

77
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ;
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ;
Distance : 18

78
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } value
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } value
Distance : 18

79
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } i
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } i
Distance : 18

80
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } T
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } T
Distance : 18

81
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } &&
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } &&
Distance : 18

82
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } MathRuntimeException
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } MathRuntimeException
Distance : 18

83
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } {}
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } {}
Distance : 18

84
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } true
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } true
Distance : 18

85
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } mode
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } mode
Distance : 18

86
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } nullNotPermitted
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } nullNotPermitted
Distance : 18

87
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } []
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } []
Distance : 18

88
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } !
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } !
Distance : 18

89
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } assertEquals
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } assertEquals
Distance : 18

90
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } if
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } if
Distance : 18

91
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <
Distance : 18

92
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } this
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } this
Distance : 18

93
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } final
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } final
Distance : 18

94
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } =
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } =
Distance : 18

95
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } }
Distance : 18

96
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ()
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } ()
Distance : 18

97
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } {
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } {
Distance : 18

98
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <blank>
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } <blank>
Distance : 18

99
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } [
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; } [
Distance : 18

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

1
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

2
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

4
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

5
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

6
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

7
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

8
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

9
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

10
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

11
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

12
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

13
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

14
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

15
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

16
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

17
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

18
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

20
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

21
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

22
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

23
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

24
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

25
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

26
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

27
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

28
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

29
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

30
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

31
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

32
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

33
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

34
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

35
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

36
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

37
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

38
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

39
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

40
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

41
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

42
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

43
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

44
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

45
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

46
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

47
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

48
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

49
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

51
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

52
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

53
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

54
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

55
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

56
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

57
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

58
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

59
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

60
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

61
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

62
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

63
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

64
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

65
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

66
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

68
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

69
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

70
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

71
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

72
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Distance : 2

73
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Distance : 2

74
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Distance : 2

75
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Distance : 2

76
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Distance : 2

77
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

78
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Distance : 2

79
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

80
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Distance : 2

81
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Distance : 2

82
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Distance : 2

83
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Distance : 2

84
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Distance : 2

85
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Distance : 2

86
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Distance : 2

87
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Distance : 2

88
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Distance : 2

89
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Distance : 2

90
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Distance : 2

91
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Distance : 2

92
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Distance : 2

93
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Distance : 2

94
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Distance : 2

95
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Distance : 2

96
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Distance : 2

97
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Distance : 2

98
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Distance : 2

99
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Distance : 2

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

1
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

2
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

4
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

5
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

6
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

7
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

8
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

9
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

10
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

11
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

12
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

13
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

14
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

15
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

16
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

17
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

18
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

20
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

21
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

22
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

23
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

24
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

25
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

26
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

27
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

28
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

29
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

30
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

31
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

32
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

33
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

34
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

35
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

36
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

37
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

38
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

39
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

40
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

41
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

42
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

43
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

44
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

45
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

46
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

47
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

48
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

49
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

51
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

52
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

53
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

54
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

55
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

56
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

57
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

58
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

59
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

60
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

61
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

62
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

63
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

64
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

65
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

66
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

68
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

69
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

70
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

71
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

72
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Distance : 2

73
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Distance : 2

74
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Distance : 2

75
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Distance : 2

76
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Distance : 2

77
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

78
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Distance : 2

79
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

80
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Distance : 2

81
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Distance : 2

82
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Distance : 2

83
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Distance : 2

84
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Distance : 2

85
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Distance : 2

86
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Distance : 2

87
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Distance : 2

88
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Distance : 2

89
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Distance : 2

90
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Distance : 2

91
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Distance : 2

92
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Distance : 2

93
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Distance : 2

94
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Distance : 2

95
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Distance : 2

96
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Distance : 2

97
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Distance : 2

98
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Distance : 2

99
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Distance : 2

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

1
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

2
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

3
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

4
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

5
Tree	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

6
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 4

7
Tree	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

8
Tree	! type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

9
Tree	! type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

10
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

11
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 4

12
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

13
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 4

14
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 4

15
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

16
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 5

17
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

18
Tree	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 5

19
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 4

20
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 5

21
Tree	! type . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

22
Tree	! type . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 4

23
Tree	! type . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 6

24
Tree	! type . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 5

25
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

26
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

27
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 5

28
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 5

29
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

30
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 5

31
Tree	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

32
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Distance : 5

33
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Distance : 5

34
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 6

35
Tree	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

36
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

37
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 5

38
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 5

39
Tree	! type . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 5

40
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

41
Tree	! type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 6

42
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

43
Tree	! type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 5

44
Tree	! type . getNativeType ( type . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( type . getNativeType ( typeRegistry ) )
Distance : 6

45
Tree	! type . getNativeType ( typeRegistry . isSubtype ( type ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( type ) )
Distance : 6

46
Tree	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

47
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

48
Tree	! type . isSubtype ( type . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( type . getNativeType ( typeRegistry ) )
Distance : 5

49
Tree	! type . isSubtype ( typeRegistry . isSubtype ( type ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( type ) )
Distance : 5

50
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

51
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 6

52
Tree	! type . getNativeType ( type . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 6

53
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 5

54
Tree	! type . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 5

55
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 5

56
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

57
Tree	! type . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

58
Tree	! type . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

59
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

60
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

61
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 6

62
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( type ) )
Distance : 5

63
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 6

64
Tree	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

65
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

66
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 5

67
Tree	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

68
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

69
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

70
Tree	! typeRegistry . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 6

71
Tree	! type . restrictByNotNullOrUndefined ( type . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( type . isSubtype ( typeRegistry ) )
Distance : 6

72
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

73
Tree	! type . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 7

74
Tree	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

75
Tree	! type . getNativeType ( type . getNativeType ( type ) )
Code	! type . getNativeType ( type . getNativeType ( type ) )
Distance : 6

76
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

77
Tree	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

78
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

79
Tree	! type . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 6

80
Tree	! type . isSubtype ( type . getNativeType ( type ) )
Code	! type . isSubtype ( type . getNativeType ( type ) )
Distance : 5

81
Tree	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

82
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

83
Tree	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

84
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 6

85
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

86
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

87
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

88
Tree	! type . getNativeType ( type . isSubtype ( typeRegistry ) )
Code	! type . getNativeType ( type . isSubtype ( typeRegistry ) )
Distance : 7

89
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 5

90
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

91
Tree	! type . isSubtype ( type . isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( type . isSubtype ( typeRegistry ) )
Distance : 6

92
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

93
Tree	! type . getNativeType ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . getNativeType ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

94
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

95
Tree	! typeRegistry . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

96
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 6

97
Tree	! type . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

98
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 5

99
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( type ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( type ) )
Distance : 6

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return FastFourierTransformer ;
Code	return FastFourierTransformer ;
Distance : 1

1
Tree	return parent ;
Code	return parent ;
Distance : 1

2
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

3
Tree	return tolerance ;
Code	return tolerance ;
Distance : 1

4
Tree	return TransformUtils ;
Code	return TransformUtils ;
Distance : 1

5
Tree	return val ;
Code	return val ;
Distance : 1

6
Tree	return warningsGuard ;
Code	return warningsGuard ;
Distance : 1

7
Tree	return randomData ;
Code	return randomData ;
Distance : 1

8
Tree	return FastMath ;
Code	return FastMath ;
Distance : 1

9
Tree	return ArithmeticUtils ;
Code	return ArithmeticUtils ;
Distance : 1

10
Tree	return callNode ;
Code	return callNode ;
Distance : 1

11
Tree	return scopeCreator ;
Code	return scopeCreator ;
Distance : 1

12
Tree	return height ;
Code	return height ;
Distance : 1

13
Tree	return DurationType ;
Code	return DurationType ;
Distance : 1

14
Tree	return tableau ;
Code	return tableau ;
Distance : 1

15
Tree	return NOT_FOUND ;
Code	return NOT_FOUND ;
Distance : 1

16
Tree	return forward ;
Code	return forward ;
Distance : 1

17
Tree	return n ;
Code	return n ;
Distance : 1

18
Tree	return EqCache ;
Code	return EqCache ;
Distance : 1

19
Tree	return tol ;
Code	return tol ;
Distance : 1

20
Tree	return qnameNode ;
Code	return qnameNode ;
Distance : 1

21
Tree	return getProp ;
Code	return getProp ;
Distance : 1

22
Tree	return range ;
Code	return range ;
Distance : 1

23
Tree	return cls ;
Code	return cls ;
Distance : 1

24
Tree	return scopeRoot ;
Code	return scopeRoot ;
Distance : 1

25
Tree	return replacement ;
Code	return replacement ;
Distance : 1

26
Tree	return Math ;
Code	return Math ;
Distance : 1

27
Tree	return s ;
Code	return s ;
Distance : 1

28
Tree	return step ;
Code	return step ;
Distance : 1

29
Tree	return transformed ;
Code	return transformed ;
Distance : 1

30
Tree	return rawType ;
Code	return rawType ;
Distance : 1

31
Tree	return MatrixUtils ;
Code	return MatrixUtils ;
Distance : 1

32
Tree	return obj2 ;
Code	return obj2 ;
Distance : 1

33
Tree	return n0 ;
Code	return n0 ;
Distance : 1

34
Tree	return VIRTUAL_FILE ;
Code	return VIRTUAL_FILE ;
Distance : 1

35
Tree	return PlaneAngleRadians ;
Code	return PlaneAngleRadians ;
Distance : 1

36
Tree	return res ;
Code	return res ;
Distance : 1

37
Tree	return RealVector ;
Code	return RealVector ;
Distance : 1

38
Tree	return scale ;
Code	return scale ;
Distance : 1

39
Tree	return setKey ;
Code	return setKey ;
Distance : 1

40
Tree	return threshold ;
Code	return threshold ;
Distance : 1

41
Tree	return ref ;
Code	return ref ;
Distance : 1

42
Tree	return INDEX_NOT_FOUND ;
Code	return INDEX_NOT_FOUND ;
Distance : 1

43
Tree	return MOCKITO_PROXY_MARKER ;
Code	return MOCKITO_PROXY_MARKER ;
Distance : 1

44
Tree	return Objects ;
Code	return Objects ;
Distance : 1

45
Tree	return epsilon ;
Code	return epsilon ;
Distance : 1

46
Tree	return csti ;
Code	return csti ;
Distance : 1

47
Tree	return tree ;
Code	return tree ;
Distance : 1

48
Tree	return fn ;
Code	return fn ;
Distance : 1

49
Tree	return subtree ;
Code	return subtree ;
Distance : 1

50
Tree	return dateFormat ;
Code	return dateFormat ;
Distance : 1

51
Tree	return Strings ;
Code	return Strings ;
Distance : 1

52
Tree	return point ;
Code	return point ;
Distance : 1

53
Tree	return nameNode ;
Code	return nameNode ;
Distance : 1

54
Tree	return oneOverN ;
Code	return oneOverN ;
Distance : 1

55
Tree	return singularValues ;
Code	return singularValues ;
Distance : 1

56
Tree	return cond ;
Code	return cond ;
Distance : 1

57
Tree	return INDEX_OFFSET ;
Code	return INDEX_OFFSET ;
Distance : 1

58
Tree	return definitionProvider ;
Code	return definitionProvider ;
Distance : 1

59
Tree	return includeInterval ;
Code	return includeInterval ;
Distance : 1

60
Tree	return iChronology ;
Code	return iChronology ;
Distance : 1

61
Tree	return state ;
Code	return state ;
Distance : 1

62
Tree	return blind ;
Code	return blind ;
Distance : 1

63
Tree	return recvType ;
Code	return recvType ;
Distance : 1

64
Tree	return pb ;
Code	return pb ;
Distance : 1

65
Tree	return x2 ;
Code	return x2 ;
Distance : 1

66
Tree	return Gamma ;
Code	return Gamma ;
Distance : 1

67
Tree	return DatasetUtils ;
Code	return DatasetUtils ;
Distance : 1

68
Tree	return optimizer ;
Code	return optimizer ;
Distance : 1

69
Tree	return decomposition ;
Code	return decomposition ;
Distance : 1

70
Tree	return voidType ;
Code	return voidType ;
Distance : 1

71
Tree	return typeExpr ;
Code	return typeExpr ;
Distance : 1

72
Tree	return TOl ;
Code	return TOl ;
Distance : 1

73
Tree	return h ;
Code	return h ;
Distance : 1

74
Tree	return Deprecated ;
Code	return Deprecated ;
Distance : 1

75
Tree	return column ;
Code	return column ;
Distance : 1

76
Tree	return caseType ;
Code	return caseType ;
Distance : 1

77
Tree	return isMinimize ;
Code	return isMinimize ;
Distance : 1

78
Tree	return qualifiedName ;
Code	return qualifiedName ;
Distance : 1

79
Tree	return MathUtils ;
Code	return MathUtils ;
Distance : 1

80
Tree	return sourceName ;
Code	return sourceName ;
Distance : 1

81
Tree	return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST ;
Code	return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST ;
Distance : 1

82
Tree	return expr ;
Code	return expr ;
Distance : 1

83
Tree	return hasIntercept ;
Code	return hasIntercept ;
Distance : 1

84
Tree	return mu ;
Code	return mu ;
Distance : 1

85
Tree	return jacobianEvaluations ;
Code	return jacobianEvaluations ;
Distance : 1

86
Tree	return mode ;
Code	return mode ;
Distance : 1

87
Tree	return removeOnlyLocals ;
Code	return removeOnlyLocals ;
Distance : 1

88
Tree	return superType ;
Code	return superType ;
Distance : 1

89
Tree	return inputId ;
Code	return inputId ;
Distance : 1

90
Tree	return trimmerMatcher ;
Code	return trimmerMatcher ;
Distance : 1

91
Tree	return degreesOfFreedom ;
Code	return degreesOfFreedom ;
Distance : 1

92
Tree	return functionSideEffectMap ;
Code	return functionSideEffectMap ;
Distance : 1

93
Tree	return defaultCleaner ;
Code	return defaultCleaner ;
Distance : 1

94
Tree	return NaN ;
Code	return NaN ;
Distance : 1

95
Tree	return trimmer ;
Code	return trimmer ;
Distance : 1

96
Tree	return obj ;
Code	return obj ;
Distance : 1

97
Tree	return currentDerivative ;
Code	return currentDerivative ;
Distance : 1

98
Tree	return restrictToNonNegative ;
Code	return restrictToNonNegative ;
Distance : 1

99
Tree	return parts.length ;
Code	return parts.length ;
Distance : 1

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	return TernaryValue.UNKNOWN ; !=
Code	return TernaryValue.UNKNOWN ; !=
Distance : 1

1
Tree	return TernaryValue.UNKNOWN ; createIllegalArgumentException
Code	return TernaryValue.UNKNOWN ; createIllegalArgumentException
Distance : 1

2
Tree	return TernaryValue.UNKNOWN ; add
Code	return TernaryValue.UNKNOWN ; add
Distance : 1

3
Tree	return TernaryValue.UNKNOWN ; name
Code	return TernaryValue.UNKNOWN ; name
Distance : 1

4
Tree	return TernaryValue.UNKNOWN ; m
Code	return TernaryValue.UNKNOWN ; m
Distance : 1

5
Tree	return TernaryValue.UNKNOWN ; boolean
Code	return TernaryValue.UNKNOWN ; boolean
Distance : 1

6
Tree	return TernaryValue.UNKNOWN ; checkArgument
Code	return TernaryValue.UNKNOWN ; checkArgument
Distance : 1

7
Tree	return TernaryValue.UNKNOWN ; data
Code	return TernaryValue.UNKNOWN ; data
Distance : 1

8
Tree	return TernaryValue.UNKNOWN ; List
Code	return TernaryValue.UNKNOWN ; List
Distance : 1

9
Tree	return TernaryValue.UNKNOWN ; Args
Code	return TernaryValue.UNKNOWN ; Args
Distance : 1

10
Tree	return TernaryValue.UNKNOWN ; array
Code	return TernaryValue.UNKNOWN ; array
Distance : 1

11
Tree	return TernaryValue.UNKNOWN ; <>
Code	return TernaryValue.UNKNOWN ; <>
Distance : 1

12
Tree	return TernaryValue.UNKNOWN ; try
Code	return TernaryValue.UNKNOWN ; try
Distance : 1

13
Tree	return TernaryValue.UNKNOWN ; fail
Code	return TernaryValue.UNKNOWN ; fail
Distance : 1

14
Tree	return TernaryValue.UNKNOWN ; paint
Code	return TernaryValue.UNKNOWN ; paint
Distance : 1

15
Tree	return TernaryValue.UNKNOWN ; join
Code	return TernaryValue.UNKNOWN ; join
Distance : 1

16
Tree	return TernaryValue.UNKNOWN ; str
Code	return TernaryValue.UNKNOWN ; str
Distance : 1

17
Tree	return TernaryValue.UNKNOWN ; LINE_JOINER
Code	return TernaryValue.UNKNOWN ; LINE_JOINER
Distance : 1

18
Tree	return TernaryValue.UNKNOWN ; testSame
Code	return TernaryValue.UNKNOWN ; testSame
Distance : 1

19
Tree	return TernaryValue.UNKNOWN ; x
Code	return TernaryValue.UNKNOWN ; x
Distance : 1

20
Tree	return TernaryValue.UNKNOWN ; ArrayList
Code	return TernaryValue.UNKNOWN ; ArrayList
Distance : 1

21
Tree	return TernaryValue.UNKNOWN ; fireChangeEvent
Code	return TernaryValue.UNKNOWN ; fireChangeEvent
Distance : 1

22
Tree	return TernaryValue.UNKNOWN ; super
Code	return TernaryValue.UNKNOWN ; super
Distance : 1

23
Tree	return TernaryValue.UNKNOWN ; parent
Code	return TernaryValue.UNKNOWN ; parent
Distance : 1

24
Tree	return TernaryValue.UNKNOWN ; IllegalArgumentException
Code	return TernaryValue.UNKNOWN ; IllegalArgumentException
Distance : 1

25
Tree	return TernaryValue.UNKNOWN ; test
Code	return TernaryValue.UNKNOWN ; test
Distance : 1

26
Tree	return TernaryValue.UNKNOWN ; int
Code	return TernaryValue.UNKNOWN ; int
Distance : 1

27
Tree	return TernaryValue.UNKNOWN ; invocation
Code	return TernaryValue.UNKNOWN ; invocation
Distance : 1

28
Tree	return TernaryValue.UNKNOWN ; reportCodeChange
Code	return TernaryValue.UNKNOWN ; reportCodeChange
Distance : 1

29
Tree	return TernaryValue.UNKNOWN ; expected
Code	return TernaryValue.UNKNOWN ; expected
Distance : 1

30
Tree	return TernaryValue.UNKNOWN ; :
Code	return TernaryValue.UNKNOWN ; :
Distance : 1

31
Tree	return TernaryValue.UNKNOWN ; result
Code	return TernaryValue.UNKNOWN ; result
Distance : 1

32
Tree	return TernaryValue.UNKNOWN ; serialised
Code	return TernaryValue.UNKNOWN ; serialised
Distance : 1

33
Tree	return TernaryValue.UNKNOWN ; getInstance
Code	return TernaryValue.UNKNOWN ; getInstance
Distance : 1

34
Tree	return TernaryValue.UNKNOWN ; *
Code	return TernaryValue.UNKNOWN ; *
Distance : 1

35
Tree	return TernaryValue.UNKNOWN ; type
Code	return TernaryValue.UNKNOWN ; type
Distance : 1

36
Tree	return TernaryValue.UNKNOWN ; false
Code	return TernaryValue.UNKNOWN ; false
Distance : 1

37
Tree	return TernaryValue.UNKNOWN ; double
Code	return TernaryValue.UNKNOWN ; double
Distance : 1

38
Tree	return TernaryValue.UNKNOWN ; FastMath
Code	return TernaryValue.UNKNOWN ; FastMath
Distance : 1

39
Tree	return TernaryValue.UNKNOWN ; checkState
Code	return TernaryValue.UNKNOWN ; checkState
Distance : 1

40
Tree	return TernaryValue.UNKNOWN ; nullNotPermitted
Code	return TernaryValue.UNKNOWN ; nullNotPermitted
Distance : 1

41
Tree	return TernaryValue.UNKNOWN ; []
Code	return TernaryValue.UNKNOWN ; []
Distance : 1

42
Tree	return TernaryValue.UNKNOWN ; void
Code	return TernaryValue.UNKNOWN ; void
Distance : 1

43
Tree	return TernaryValue.UNKNOWN ; ==
Code	return TernaryValue.UNKNOWN ; ==
Distance : 1

44
Tree	return TernaryValue.UNKNOWN ; assertEquals
Code	return TernaryValue.UNKNOWN ; assertEquals
Distance : 1

45
Tree	return TernaryValue.UNKNOWN ; !
Code	return TernaryValue.UNKNOWN ; !
Distance : 1

46
Tree	return TernaryValue.UNKNOWN ; @
Code	return TernaryValue.UNKNOWN ; @
Distance : 1

47
Tree	return TernaryValue.UNKNOWN ; assertThat
Code	return TernaryValue.UNKNOWN ; assertThat
Distance : 1

48
Tree	return TernaryValue.UNKNOWN ; Override
Code	return TernaryValue.UNKNOWN ; Override
Distance : 1

49
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

50
Tree	return TernaryValue.UNKNOWN ; [
Code	return TernaryValue.UNKNOWN ; [
Distance : 1

51
Tree	return TernaryValue.UNKNOWN ; this
Code	return TernaryValue.UNKNOWN ; this
Distance : 1

52
Tree	return TernaryValue.UNKNOWN ; &&
Code	return TernaryValue.UNKNOWN ; &&
Distance : 1

53
Tree	return TernaryValue.UNKNOWN ; T
Code	return TernaryValue.UNKNOWN ; T
Distance : 1

54
Tree	return TernaryValue.UNKNOWN ; Preconditions
Code	return TernaryValue.UNKNOWN ; Preconditions
Distance : 1

55
Tree	return TernaryValue.UNKNOWN ; -
Code	return TernaryValue.UNKNOWN ; -
Distance : 1

56
Tree	return TernaryValue.UNKNOWN ; class
Code	return TernaryValue.UNKNOWN ; class
Distance : 1

57
Tree	return TernaryValue.UNKNOWN ; Object
Code	return TernaryValue.UNKNOWN ; Object
Distance : 1

58
Tree	return TernaryValue.UNKNOWN ; {}
Code	return TernaryValue.UNKNOWN ; {}
Distance : 1

59
Tree	return TernaryValue.UNKNOWN ; MathRuntimeException
Code	return TernaryValue.UNKNOWN ; MathRuntimeException
Distance : 1

60
Tree	return TernaryValue.UNKNOWN ; ParamChecks
Code	return TernaryValue.UNKNOWN ; ParamChecks
Distance : 1

61
Tree	return TernaryValue.UNKNOWN ; f
Code	return TernaryValue.UNKNOWN ; f
Distance : 1

62
Tree	return TernaryValue.UNKNOWN ; t
Code	return TernaryValue.UNKNOWN ; t
Distance : 1

63
Tree	return TernaryValue.UNKNOWN ; field
Code	return TernaryValue.UNKNOWN ; field
Distance : 1

64
Tree	return TernaryValue.UNKNOWN ; value
Code	return TernaryValue.UNKNOWN ; value
Distance : 1

65
Tree	return TernaryValue.UNKNOWN ; i
Code	return TernaryValue.UNKNOWN ; i
Distance : 1

66
Tree	return TernaryValue.UNKNOWN ; throw
Code	return TernaryValue.UNKNOWN ; throw
Distance : 1

67
Tree	return TernaryValue.UNKNOWN ; catch
Code	return TernaryValue.UNKNOWN ; catch
Distance : 1

68
Tree	return TernaryValue.UNKNOWN ; +
Code	return TernaryValue.UNKNOWN ; +
Distance : 1

69
Tree	return TernaryValue.UNKNOWN ; null
Code	return TernaryValue.UNKNOWN ; null
Distance : 1

70
Tree	return TernaryValue.UNKNOWN ; String
Code	return TernaryValue.UNKNOWN ; String
Distance : 1

71
Tree	return TernaryValue.UNKNOWN ; compiler
Code	return TernaryValue.UNKNOWN ; compiler
Distance : 1

72
Tree	return TernaryValue.UNKNOWN ; ]
Code	return TernaryValue.UNKNOWN ; ]
Distance : 1

73
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

74
Tree	return TernaryValue.UNKNOWN ; NUMBER_CONSTANT
Code	return TernaryValue.UNKNOWN ; NUMBER_CONSTANT
Distance : 1

75
Tree	return TernaryValue.UNKNOWN ; true
Code	return TernaryValue.UNKNOWN ; true
Distance : 1

76
Tree	return TernaryValue.UNKNOWN ; return
Code	return TernaryValue.UNKNOWN ; return
Distance : 1

77
Tree	return TernaryValue.UNKNOWN ; <
Code	return TernaryValue.UNKNOWN ; <
Distance : 1

78
Tree	return TernaryValue.UNKNOWN ; e
Code	return TernaryValue.UNKNOWN ; e
Distance : 1

79
Tree	return TernaryValue.UNKNOWN ; n
Code	return TernaryValue.UNKNOWN ; n
Distance : 1

80
Tree	return TernaryValue.UNKNOWN ; {
Code	return TernaryValue.UNKNOWN ; {
Distance : 1

81
Tree	return TernaryValue.UNKNOWN ; ()
Code	return TernaryValue.UNKNOWN ; ()
Distance : 1

82
Tree	return TernaryValue.UNKNOWN ; ;
Code	return TernaryValue.UNKNOWN ; ;
Distance : 1

83
Tree	return TernaryValue.UNKNOWN ; )
Code	return TernaryValue.UNKNOWN ; )
Distance : 1

84
Tree	return TernaryValue.UNKNOWN ; return
Code	return TernaryValue.UNKNOWN ; return
Distance : 1

85
Tree	return TernaryValue.UNKNOWN ; if
Code	return TernaryValue.UNKNOWN ; if
Distance : 1

86
Tree	return TernaryValue.UNKNOWN ; <blank>
Code	return TernaryValue.UNKNOWN ; <blank>
Distance : 1

87
Tree	return TernaryValue.UNKNOWN ; (
Code	return TernaryValue.UNKNOWN ; (
Distance : 1

88
Tree	return TernaryValue.UNKNOWN ; =
Code	return TernaryValue.UNKNOWN ; =
Distance : 1

89
Tree	return TernaryValue.UNKNOWN ; }
Code	return TernaryValue.UNKNOWN ; }
Distance : 1

90
Tree	return TernaryValue.UNKNOWN ; .
Code	return TernaryValue.UNKNOWN ; .
Distance : 1

91
Tree	return TernaryValue.UNKNOWN ; ,
Code	return TernaryValue.UNKNOWN ; ,
Distance : 1

92
Tree	return TernaryValue.UNKNOWN ; STRING_CONSTANT
Code	return TernaryValue.UNKNOWN ; STRING_CONSTANT
Distance : 1

93
Tree	return TernaryValue.UNKNOWN ; new
Code	return TernaryValue.UNKNOWN ; new
Distance : 1

94
Tree	return TernaryValue.UNKNOWN ; >
Code	return TernaryValue.UNKNOWN ; >
Distance : 1

95
Tree	return TernaryValue.UNKNOWN ; public
Code	return TernaryValue.UNKNOWN ; public
Distance : 1

96
Tree	return TernaryValue.UNKNOWN ; mode
Code	return TernaryValue.UNKNOWN ; mode
Distance : 1

97
Tree	return TernaryValue.UNKNOWN ; <s>
Code	return TernaryValue.UNKNOWN ; <s>
Distance : 1

98
Tree	return TernaryValue.UNKNOWN ; final
Code	return TernaryValue.UNKNOWN ; final
Distance : 1

99
Tree	return TernaryValue.UNKNOWN ; mock
Code	return TernaryValue.UNKNOWN ; mock
Distance : 1

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

1
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

2
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

3
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

4
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 6

5
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 7

6
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

7
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

8
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

9
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

10
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

11
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

12
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

13
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 6

14
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

15
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

16
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

17
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

18
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

19
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Distance : 7

20
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

21
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

22
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 7

23
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 8

24
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

25
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

26
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

27
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

28
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

29
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 7

30
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

31
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 8

32
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 5

33
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 6

34
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , c ) ; }
Distance : 7

35
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , sb ) ; }
Distance : 7

36
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

37
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

38
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 7

39
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 8

40
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

41
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

42
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 6

43
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 7

44
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

45
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

46
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

47
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

48
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

49
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 7

50
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

51
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

52
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

53
Tree	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

54
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

55
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 7

56
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 5

57
Tree	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

58
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

59
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

60
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

61
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

62
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

63
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

64
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

65
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

66
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 7

67
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

68
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

69
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

70
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

71
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 6

72
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

73
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

74
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

75
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Distance : 8

76
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

77
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

78
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

79
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { append ( c , sb ) ; }
Distance : 8

80
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , sb ) ; }
Distance : 6

81
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , sb ) ; }
Distance : 8

82
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

83
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Distance : 8

84
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

85
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , sb ) ; }
Distance : 7

86
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

87
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

88
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 8

89
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 6

90
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

91
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 8

92
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

93
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 6

94
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 9

95
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 7

96
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , c ) ; }
Distance : 8

97
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , sb ) ; }
Distance : 8

98
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

99
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

1
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

2
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

3
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

4
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

5
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

6
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

7
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

8
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

9
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

10
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

11
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

12
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

13
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

14
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

15
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

16
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

17
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

18
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

19
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

20
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 11

21
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

22
Tree	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

23
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

24
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 10

25
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

26
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

27
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

28
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

29
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 10

30
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

31
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

32
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 11

33
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 10

34
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 9

35
Tree	{ functionNode . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

36
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

37
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

38
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

39
Tree	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

40
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 10

41
Tree	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

42
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 11

43
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 9

44
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

45
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

46
Tree	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

47
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 10

48
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 11

49
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 9

50
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 10

51
Tree	{ defineSlot . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

52
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

53
Tree	{ astParameter . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

54
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

55
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

56
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 10

57
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 9

58
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 10

59
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 10

60
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 8

61
Tree	{ astParameter . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

62
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

63
Tree	{ functionNode . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

64
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 10

65
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

66
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

67
Tree	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

68
Tree	{ functionNode . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

69
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 11

70
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 10

71
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 9

72
Tree	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

73
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 9

74
Tree	{ astParameter . getNext ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . getNext ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

75
Tree	{ functionNode . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

76
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

77
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

78
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 9

79
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 10

80
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 10

81
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 9

82
Tree	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

83
Tree	{ functionNode . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

84
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

85
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

86
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 9

87
Tree	{ defineSlot . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

88
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

89
Tree	{ astParameter . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

90
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 10

91
Tree	{ defineSlot . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

92
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 8

93
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 11

94
Tree	{ functionNode . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

95
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 9

96
Tree	{ astParameter . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

97
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 10

98
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

99
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getJSType () ; }
Distance : 9

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } &&
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } &&
Distance : 10

1
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } str
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } str
Distance : 10

2
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Object
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Object
Distance : 10

3
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } LINE_JOINER
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } LINE_JOINER
Distance : 10

4
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } reportCodeChange
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } reportCodeChange
Distance : 10

5
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } expected
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } expected
Distance : 10

6
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } f
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } f
Distance : 10

7
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ParamChecks
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ParamChecks
Distance : 10

8
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } t
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } t
Distance : 10

9
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } field
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } field
Distance : 10

10
Tree	if ( token != null ) { return token . ( ( token , JsDocToken.LP ) ; } try
Code	if ( token != null ) { return token . ( ( token , JsDocToken.LP ) ; } try
Distance : 10

11
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } fail
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } fail
Distance : 10

12
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } :
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } :
Distance : 10

13
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } result
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } result
Distance : 10

14
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } createIllegalArgumentException
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } createIllegalArgumentException
Distance : 10

15
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } parent
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } parent
Distance : 10

16
Tree	if ( token != null ) { return token . ( ( token , JsDocToken.LP ) ; } fireChangeEvent
Code	if ( token != null ) { return token . ( ( token , JsDocToken.LP ) ; } fireChangeEvent
Distance : 10

17
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ArrayList
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ArrayList
Distance : 10

18
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } type
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } type
Distance : 10

19
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } *
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } *
Distance : 10

20
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } getInstance
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } getInstance
Distance : 10

21
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } serialised
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } serialised
Distance : 10

22
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <>
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <>
Distance : 10

23
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } T
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } T
Distance : 10

24
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } nullNotPermitted
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } nullNotPermitted
Distance : 10

25
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } void
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } void
Distance : 10

26
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

27
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

28
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

29
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

30
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } @
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } @
Distance : 10

31
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } array
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } array
Distance : 10

32
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Args
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Args
Distance : 10

33
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } List
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } List
Distance : 10

34
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } join
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } join
Distance : 10

35
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } paint
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } paint
Distance : 10

36
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } boolean
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } boolean
Distance : 10

37
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } m
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } m
Distance : 10

38
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !=
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !=
Distance : 10

39
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } super
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } super
Distance : 10

40
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } catch
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } catch
Distance : 10

41
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } test
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } test
Distance : 10

42
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } throw
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } throw
Distance : 10

43
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } class
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } class
Distance : 10

44
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } String
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } String
Distance : 10

45
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } compiler
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } compiler
Distance : 10

46
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ==
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ==
Distance : 10

47
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } []
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } []
Distance : 10

48
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mode
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mode
Distance : 10

49
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

50
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } [
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } [
Distance : 10

51
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

52
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ]
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ]
Distance : 10

53
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } STRING_CONSTANT
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } STRING_CONSTANT
Distance : 10

54
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } MathRuntimeException
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } MathRuntimeException
Distance : 10

55
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } {}
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } {}
Distance : 10

56
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Distance : 10

57
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Distance : 10

58
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mock
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mock
Distance : 10

59
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Override
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Override
Distance : 10

60
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } testSame
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } testSame
Distance : 10

61
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } x
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } x
Distance : 10

62
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } invocation
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } invocation
Distance : 10

63
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } assertThat
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } assertThat
Distance : 10

64
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } FastMath
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } FastMath
Distance : 10

65
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } IllegalArgumentException
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } IllegalArgumentException
Distance : 10

66
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } checkState
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } checkState
Distance : 10

67
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } double
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } double
Distance : 10

68
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } int
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } int
Distance : 10

69
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } false
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } false
Distance : 10

70
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } if
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } if
Distance : 10

71
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Preconditions
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Preconditions
Distance : 10

72
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } null
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } null
Distance : 10

73
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } final
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } final
Distance : 10

74
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } +
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } +
Distance : 10

75
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <
Distance : 10

76
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } >
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } >
Distance : 10

77
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } public
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } public
Distance : 10

78
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ;
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ;
Distance : 10

79
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } )
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } )
Distance : 10

80
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } -
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } -
Distance : 10

81
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } (
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } (
Distance : 10

82
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ,
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ,
Distance : 10

83
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <s>
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <s>
Distance : 10

84
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <blank>
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } <blank>
Distance : 10

85
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } }
Distance : 10

86
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ()
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ()
Distance : 10

87
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } {
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } {
Distance : 10

88
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } }
Distance : 10

89
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } =
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } =
Distance : 10

90
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } return
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } return
Distance : 10

91
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } NUMBER_CONSTANT
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } NUMBER_CONSTANT
Distance : 10

92
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } this
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } this
Distance : 10

93
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } .
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } .
Distance : 10

94
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } assertEquals
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } assertEquals
Distance : 10

95
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !
Distance : 10

96
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } n
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } n
Distance : 10

97
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } e
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } e
Distance : 10

98
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } new
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } new
Distance : 10

99
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } true
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } true
Distance : 10

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } throw
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } throw
Distance : 6

1
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , continue; ) ; }
Distance : 5

2
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Distance : 7

3
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Distance : 6

4
Tree	{ toSource () ; return toSource ( n . null ( n ) , continue; ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , continue; ) ; }
Distance : 6

5
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Distance : 7

6
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , break; ) ; }
Distance : 5

7
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , break; ) ; }
Distance : 6

8
Tree	{ toSource () ; return toSource ( n . , ( n ) , break; ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , break; ) ; }
Distance : 6

9
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , break; ) ; }
Distance : 5

10
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , break; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , break; ) ; }
Distance : 7

11
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , break; ) ; }
Distance : 6

12
Tree	{ toSource () ; return toSource ( n . , ( n ) , break; ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , break; ) ; }
Distance : 6

13
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , break; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , break; ) ; }
Distance : 7

14
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , default: ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , default: ) ; }
Distance : 5

15
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , default: ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , default: ) ; }
Distance : 6

16
Tree	{ toSource () ; return toSource ( n . null ( n ) , default: ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , default: ) ; }
Distance : 6

17
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , default: ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , default: ) ; }
Distance : 5

18
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , default: ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , default: ) ; }
Distance : 7

19
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , default: ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , default: ) ; }
Distance : 6

20
Tree	{ toSource () ; return toSource ( n . null ( n ) , default: ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , default: ) ; }
Distance : 6

21
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , default: ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , default: ) ; }
Distance : 7

22
Tree	{ toSource () ; return toSource ( n . null ( n ) , continue; ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , continue; ) ; }
Distance : 6

23
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } catch
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } catch
Distance : 6

24
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , continue; ) ; }
Distance : 6

25
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Distance : 7

26
Tree	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 6

27
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

28
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

29
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

30
Tree	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 6

31
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

32
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , return; ) ; }
Distance : 5

33
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 6

34
Tree	{ toSource () ; return toSource ( n . null ( n ) , return; ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , return; ) ; }
Distance : 6

35
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , return; ) ; }
Distance : 5

36
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , super(); ) ; }
Distance : 5

37
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 7

38
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 6

39
Tree	{ toSource () ; return toSource ( n . , ( n ) , return; ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , return; ) ; }
Distance : 6

40
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Distance : 6

41
Tree	{ toSource () ; return toSource ( n . null ( n ) , super(); ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , super(); ) ; }
Distance : 6

42
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , super(); ) ; }
Distance : 5

43
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 7

44
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Distance : 7

45
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , super(); ) ; }
Distance : 6

46
Tree	{ toSource () ; return toSource ( n . null ( n ) , super(); ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , super(); ) ; }
Distance : 6

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , continue; ) ; }
Distance : 5

48
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } -
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } -
Distance : 6

49
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

50
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } [
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } [
Distance : 6

51
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

52
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } {
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } {
Distance : 6

53
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } STRING_CONSTANT
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } STRING_CONSTANT
Distance : 6

54
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } NUMBER_CONSTANT
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } NUMBER_CONSTANT
Distance : 6

55
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } return
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } return
Distance : 6

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } false
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } false
Distance : 6

57
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } int
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } int
Distance : 6

58
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } @
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } @
Distance : 6

59
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } test
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } test
Distance : 6

60
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } nullNotPermitted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } nullNotPermitted
Distance : 6

61
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } []
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } []
Distance : 6

62
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } !
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } !
Distance : 6

63
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } assertEquals
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } assertEquals
Distance : 6

64
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } !=
Distance : 6

65
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } super
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } super
Distance : 6

66
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } double
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } double
Distance : 6

67
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } checkState
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } checkState
Distance : 6

68
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } value
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } value
Distance : 6

69
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } i
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } i
Distance : 6

70
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } T
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } T
Distance : 6

71
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } &&
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } &&
Distance : 6

72
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ==
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ==
Distance : 6

73
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } void
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } void
Distance : 6

74
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } new
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } new
Distance : 6

75
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ()
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ()
Distance : 6

76
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ]
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ]
Distance : 6

77
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } }
Distance : 6

78
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } n
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } n
Distance : 6

79
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } e
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } e
Distance : 6

80
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } String
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } String
Distance : 6

81
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } compiler
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } compiler
Distance : 6

82
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } if
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } if
Distance : 6

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } <
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } <
Distance : 6

84
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } this
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } this
Distance : 6

85
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } final
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } final
Distance : 6

86
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } public
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } public
Distance : 6

87
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } >
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } >
Distance : 6

88
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } null
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } null
Distance : 6

89
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } +
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } +
Distance : 6

90
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ,
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ,
Distance : 6

91
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } .
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } .
Distance : 6

92
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } )
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } )
Distance : 6

93
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ;
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ;
Distance : 6

94
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } <blank>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } <blank>
Distance : 6

95
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } }
Distance : 6

96
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } <s>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } <s>
Distance : 6

97
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } (
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } (
Distance : 6

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } =
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } =
Distance : 6

99
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } Preconditions
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } Preconditions
Distance : 6

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

1
Tree	String root = toSource ( code , code ) ;
Code	String root = toSource ( code , code ) ;
Distance : 7

2
Tree	String sourceMap = toSource ( code , sourceMap ) ;
Code	String sourceMap = toSource ( code , sourceMap ) ;
Distance : 6

3
Tree	String sourceMap = toSource ( code , code ) ;
Code	String sourceMap = toSource ( code , code ) ;
Distance : 7

4
Tree	String root = toSource ( sourceMap , sourceMap ) ;
Code	String root = toSource ( sourceMap , sourceMap ) ;
Distance : 6

5
Tree	String root = toSource ( sourceMap , code ) ;
Code	String root = toSource ( sourceMap , code ) ;
Distance : 6

6
Tree	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Distance : 6

7
Tree	String root = toSource ( code , sourceMap ) ;
Code	String root = toSource ( code , sourceMap ) ;
Distance : 6

8
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

9
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

10
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

11
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

12
Tree	String root = toSource ( code , root ) ;
Code	String root = toSource ( code , root ) ;
Distance : 7

13
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

14
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

15
Tree	String sourceMap = toSource ( sourceMap , code ) ;
Code	String sourceMap = toSource ( sourceMap , code ) ;
Distance : 6

16
Tree	String code = toSource ( sourceMap , root ) ;
Code	String code = toSource ( sourceMap , root ) ;
Distance : 5

17
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

18
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

19
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

20
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

21
Tree	String root = toSource ( root , code ) ;
Code	String root = toSource ( root , code ) ;
Distance : 6

22
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

23
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

24
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

25
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

26
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

27
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

28
Tree	String code = toSource ( sourceMap , code ) ;
Code	String code = toSource ( sourceMap , code ) ;
Distance : 5

29
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

30
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

31
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

32
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

33
Tree	String sourceMap = toSource ( root , root ) ;
Code	String sourceMap = toSource ( root , root ) ;
Distance : 6

34
Tree	String root = toSource ( root , root ) ;
Code	String root = toSource ( root , root ) ;
Distance : 6

35
Tree	String code = toSource ( code , root ) ;
Code	String code = toSource ( code , root ) ;
Distance : 6

36
Tree	String sourceMap = toSource ( code , root ) ;
Code	String sourceMap = toSource ( code , root ) ;
Distance : 7

37
Tree	String root = toSource ( root , code ) ;
Code	String root = toSource ( root , code ) ;
Distance : 6

38
Tree	String root = toSource ( sourceMap , root ) ;
Code	String root = toSource ( sourceMap , root ) ;
Distance : 6

39
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

40
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

41
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

42
Tree	String sourceMap = toSource ( sourceMap , root ) ;
Code	String sourceMap = toSource ( sourceMap , root ) ;
Distance : 6

43
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

44
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

45
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

46
Tree	String code = toSource ( sourceMap , code ) ;
Code	String code = toSource ( sourceMap , code ) ;
Distance : 5

47
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

48
Tree	String root = toSource ( code , sourceMap ) ;
Code	String root = toSource ( code , sourceMap ) ;
Distance : 6

49
Tree	String root = toSource ( root , root ) ;
Code	String root = toSource ( root , root ) ;
Distance : 6

50
Tree	String sourceMap = toSource ( code , sourceMap ) ;
Code	String sourceMap = toSource ( code , sourceMap ) ;
Distance : 6

51
Tree	String sourceMap = toSource ( root , root ) ;
Code	String sourceMap = toSource ( root , root ) ;
Distance : 6

52
Tree	String root = toSource ( sourceMap , sourceMap ) ;
Code	String root = toSource ( sourceMap , sourceMap ) ;
Distance : 6

53
Tree	String code = toSource ( code , root ) ;
Code	String code = toSource ( code , root ) ;
Distance : 6

54
Tree	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Distance : 6

55
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

56
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

57
Tree	String code = toSource ( sourceMap , root ) ;
Code	String code = toSource ( sourceMap , root ) ;
Distance : 5

58
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

59
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

60
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

61
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

62
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

63
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

64
Tree	String code = toSource ( root , sourceMap ) ; this
Code	String code = toSource ( root , sourceMap ) ; this
Distance : 5

65
Tree	String code = toSource ( root , sourceMap ) ; if
Code	String code = toSource ( root , sourceMap ) ; if
Distance : 5

66
Tree	String code = toSource ( root , sourceMap ) ; <
Code	String code = toSource ( root , sourceMap ) ; <
Distance : 5

67
Tree	String code = toSource ( root , sourceMap ) ; STRING_CONSTANT
Code	String code = toSource ( root , sourceMap ) ; STRING_CONSTANT
Distance : 5

68
Tree	String code = toSource ( root , sourceMap ) ; final
Code	String code = toSource ( root , sourceMap ) ; final
Distance : 5

69
Tree	String code = toSource ( root , sourceMap ) ; public
Code	String code = toSource ( root , sourceMap ) ; public
Distance : 5

70
Tree	String code = toSource ( root , sourceMap ) ; String
Code	String code = toSource ( root , sourceMap ) ; String
Distance : 5

71
Tree	String code = toSource ( root , sourceMap ) ; compiler
Code	String code = toSource ( root , sourceMap ) ; compiler
Distance : 5

72
Tree	String code = toSource ( root , sourceMap ) ; return
Code	String code = toSource ( root , sourceMap ) ; return
Distance : 5

73
Tree	String code = toSource ( root , sourceMap ) ; e
Code	String code = toSource ( root , sourceMap ) ; e
Distance : 5

74
Tree	String code = toSource ( root , sourceMap ) ; n
Code	String code = toSource ( root , sourceMap ) ; n
Distance : 5

75
Tree	String code = toSource ( root , sourceMap ) ; throw
Code	String code = toSource ( root , sourceMap ) ; throw
Distance : 5

76
Tree	String code = toSource ( root , sourceMap ) ; catch
Code	String code = toSource ( root , sourceMap ) ; catch
Distance : 5

77
Tree	String code = toSource ( root , sourceMap ) ; void
Code	String code = toSource ( root , sourceMap ) ; void
Distance : 5

78
Tree	String code = toSource ( root , sourceMap ) ; ==
Code	String code = toSource ( root , sourceMap ) ; ==
Distance : 5

79
Tree	String code = toSource ( root , sourceMap ) ; null
Code	String code = toSource ( root , sourceMap ) ; null
Distance : 5

80
Tree	String code = toSource ( root , sourceMap ) ; NUMBER_CONSTANT
Code	String code = toSource ( root , sourceMap ) ; NUMBER_CONSTANT
Distance : 5

81
Tree	String code = toSource ( root , sourceMap ) ; >
Code	String code = toSource ( root , sourceMap ) ; >
Distance : 5

82
Tree	String code = toSource ( root , sourceMap ) ; ;
Code	String code = toSource ( root , sourceMap ) ; ;
Distance : 5

83
Tree	String code = toSource ( root , sourceMap ) ; +
Code	String code = toSource ( root , sourceMap ) ; +
Distance : 5

84
Tree	String code = toSource ( root , sourceMap ) ; }
Code	String code = toSource ( root , sourceMap ) ; }
Distance : 5

85
Tree	String code = toSource ( root , sourceMap ) ; nullNotPermitted
Code	String code = toSource ( root , sourceMap ) ; nullNotPermitted
Distance : 5

86
Tree	String code = toSource ( root , sourceMap ) ; []
Code	String code = toSource ( root , sourceMap ) ; []
Distance : 5

87
Tree	String code = toSource ( root , sourceMap ) ; !
Code	String code = toSource ( root , sourceMap ) ; !
Distance : 5

88
Tree	String code = toSource ( root , sourceMap ) ; assertEquals
Code	String code = toSource ( root , sourceMap ) ; assertEquals
Distance : 5

89
Tree	String code = toSource ( root , sourceMap ) ; {
Code	String code = toSource ( root , sourceMap ) ; {
Distance : 5

90
Tree	String code = toSource ( root , sourceMap ) ; ()
Code	String code = toSource ( root , sourceMap ) ; ()
Distance : 5

91
Tree	String code = toSource ( root , sourceMap ) ; =
Code	String code = toSource ( root , sourceMap ) ; =
Distance : 5

92
Tree	String code = toSource ( root , sourceMap ) ; ,
Code	String code = toSource ( root , sourceMap ) ; ,
Distance : 5

93
Tree	String code = toSource ( root , sourceMap ) ; (
Code	String code = toSource ( root , sourceMap ) ; (
Distance : 5

94
Tree	String code = toSource ( root , sourceMap ) ; <s>
Code	String code = toSource ( root , sourceMap ) ; <s>
Distance : 5

95
Tree	String code = toSource ( root , sourceMap ) ; <blank>
Code	String code = toSource ( root , sourceMap ) ; <blank>
Distance : 5

96
Tree	String code = toSource ( root , sourceMap ) ; ;
Code	String code = toSource ( root , sourceMap ) ; ;
Distance : 5

97
Tree	String code = toSource ( root , sourceMap ) ; )
Code	String code = toSource ( root , sourceMap ) ; )
Distance : 5

98
Tree	String code = toSource ( root , sourceMap ) ; .
Code	String code = toSource ( root , sourceMap ) ; .
Distance : 5

99
Tree	String code = toSource ( root , sourceMap ) ; new
Code	String code = toSource ( root , sourceMap ) ; new
Distance : 5

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Distance : 7

1
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Distance : 7

2
Tree	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Code	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

3
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

4
Tree	entry.map = assignNode . getParent ( this . assignNode ) ;
Code	entry.map = assignNode . getParent ( this . assignNode ) ;
Distance : 7

5
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . maybeAliased ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

6
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . maybeAliased ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

7
Tree	entry.map = assignNode . getParent ( this . maybeAliased ) ;
Code	entry.map = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

8
Tree	nt1.rawType = assignNode . getParent ( this . assignNode ) ;
Code	nt1.rawType = assignNode . getParent ( this . assignNode ) ;
Distance : 7

9
Tree	LocalizedFormats.EVALUATIONS = assignNode . getParent ( this . assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . getParent ( this . assignNode ) ;
Distance : 7

10
Tree	setMinorTickCount = assignNode . getParent ( this . assignNode ) ;
Code	setMinorTickCount = assignNode . getParent ( this . assignNode ) ;
Distance : 7

11
Tree	ref.node = assignNode . getParent ( this . assignNode ) ;
Code	ref.node = assignNode . getParent ( this . assignNode ) ;
Distance : 7

12
Tree	nt1.rawType = assignNode . getParent ( this . maybeAliased ) ;
Code	nt1.rawType = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

13
Tree	LocalizedFormats.EVALUATIONS = assignNode . getParent ( this . maybeAliased ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

14
Tree	SimplexSolver.DEFAULT_ULPS = assignNode . getParent ( this . assignNode ) ;
Code	SimplexSolver.DEFAULT_ULPS = assignNode . getParent ( this . assignNode ) ;
Distance : 7

15
Tree	addListeners = assignNode . getParent ( this . assignNode ) ;
Code	addListeners = assignNode . getParent ( this . assignNode ) ;
Distance : 7

16
Tree	setMinorTickCount = assignNode . getParent ( this . maybeAliased ) ;
Code	setMinorTickCount = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

17
Tree	ref.node = assignNode . getParent ( this . maybeAliased ) ;
Code	ref.node = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

18
Tree	finder.firstUnverifiedToReturn = assignNode . getParent ( this . assignNode ) ;
Code	finder.firstUnverifiedToReturn = assignNode . getParent ( this . assignNode ) ;
Distance : 7

19
Tree	SimplexSolver.DEFAULT_ULPS = assignNode . getParent ( this . maybeAliased ) ;
Code	SimplexSolver.DEFAULT_ULPS = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

20
Tree	addListeners = assignNode . getParent ( this . maybeAliased ) ;
Code	addListeners = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

21
Tree	Node.FREE_CALL = assignNode . getParent ( this . assignNode ) ;
Code	Node.FREE_CALL = assignNode . getParent ( this . assignNode ) ;
Distance : 7

22
Tree	TypeInferenceMode.NEITHER = assignNode . getParent ( this . assignNode ) ;
Code	TypeInferenceMode.NEITHER = assignNode . getParent ( this . assignNode ) ;
Distance : 7

23
Tree	finder.firstUnverifiedToReturn = assignNode . getParent ( this . maybeAliased ) ;
Code	finder.firstUnverifiedToReturn = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

24
Tree	ImmutableMultiset.Builder = assignNode . getParent ( this . assignNode ) ;
Code	ImmutableMultiset.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

25
Tree	setChart = assignNode . getParent ( this . assignNode ) ;
Code	setChart = assignNode . getParent ( this . assignNode ) ;
Distance : 7

26
Tree	Node.FREE_CALL = assignNode . getParent ( this . maybeAliased ) ;
Code	Node.FREE_CALL = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

27
Tree	typeArguments.length = NodeUtil . getParent ( this . assignNode ) ;
Code	typeArguments.length = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

28
Tree	dest.n = assignNode . getParent ( this . assignNode ) ;
Code	dest.n = assignNode . getParent ( this . assignNode ) ;
Distance : 7

29
Tree	TypeInferenceMode.NEITHER = assignNode . getParent ( this . maybeAliased ) ;
Code	TypeInferenceMode.NEITHER = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

30
Tree	callSite.parent = assignNode . getParent ( this . assignNode ) ;
Code	callSite.parent = assignNode . getParent ( this . assignNode ) ;
Distance : 7

31
Tree	t1.time = assignNode . getParent ( this . assignNode ) ;
Code	t1.time = assignNode . getParent ( this . assignNode ) ;
Distance : 7

32
Tree	NewTypeInference.INEXISTENT_PROPERTY = NodeUtil . getParent ( this . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

33
Tree	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE = assignNode . getParent ( this . assignNode ) ;
Code	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE = assignNode . getParent ( this . assignNode ) ;
Distance : 7

34
Tree	ImmutableMultiset.Builder = assignNode . getParent ( this . maybeAliased ) ;
Code	ImmutableMultiset.Builder = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

35
Tree	RegularizedGamma.P = assignNode . getParent ( this . assignNode ) ;
Code	RegularizedGamma.P = assignNode . getParent ( this . assignNode ) ;
Distance : 7

36
Tree	typeArguments.length = NodeUtil . getParent ( this . maybeAliased ) ;
Code	typeArguments.length = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

37
Tree	setChart = assignNode . getParent ( this . maybeAliased ) ;
Code	setChart = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

38
Tree	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

39
Tree	dest.n = assignNode . getParent ( this . maybeAliased ) ;
Code	dest.n = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

40
Tree	oneOverN = assignNode . getParent ( this . assignNode ) ;
Code	oneOverN = assignNode . getParent ( this . assignNode ) ;
Distance : 7

41
Tree	NewTypeInference.INEXISTENT_PROPERTY = NodeUtil . getParent ( this . maybeAliased ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

42
Tree	Node.FLAG_LOCAL_RESULTS = assignNode . getParent ( this . assignNode ) ;
Code	Node.FLAG_LOCAL_RESULTS = assignNode . getParent ( this . assignNode ) ;
Distance : 7

43
Tree	callSite.parent = assignNode . getParent ( this . maybeAliased ) ;
Code	callSite.parent = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

44
Tree	error.node = assignNode . getParent ( this . assignNode ) ;
Code	error.node = assignNode . getParent ( this . assignNode ) ;
Distance : 7

45
Tree	other.liveSet = assignNode . getParent ( this . assignNode ) ;
Code	other.liveSet = assignNode . getParent ( this . assignNode ) ;
Distance : 7

46
Tree	t1.time = assignNode . getParent ( this . maybeAliased ) ;
Code	t1.time = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

47
Tree	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE = assignNode . getParent ( this . maybeAliased ) ;
Code	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

48
Tree	entry.map = NodeUtil . getParent ( this . assignNode ) ;
Code	entry.map = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

49
Tree	RegularizedGamma.P = assignNode . getParent ( this . maybeAliased ) ;
Code	RegularizedGamma.P = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

50
Tree	LocalizedFormats.NO_DATA = assignNode . getParent ( this . assignNode ) ;
Code	LocalizedFormats.NO_DATA = assignNode . getParent ( this . assignNode ) ;
Distance : 7

51
Tree	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . maybeAliased ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

52
Tree	p.newName = assignNode . getParent ( this . assignNode ) ;
Code	p.newName = assignNode . getParent ( this . assignNode ) ;
Distance : 7

53
Tree	instance.declarations = assignNode . getParent ( this . assignNode ) ;
Code	instance.declarations = assignNode . getParent ( this . assignNode ) ;
Distance : 7

54
Tree	JSTypeNative.NO_OBJECT_TYPE = assignNode . getParent ( this . assignNode ) ;
Code	JSTypeNative.NO_OBJECT_TYPE = assignNode . getParent ( this . assignNode ) ;
Distance : 7

55
Tree	bindComponents.thisValue = assignNode . getParent ( this . assignNode ) ;
Code	bindComponents.thisValue = assignNode . getParent ( this . assignNode ) ;
Distance : 7

56
Tree	oneOverN = assignNode . getParent ( this . maybeAliased ) ;
Code	oneOverN = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

57
Tree	LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE = assignNode . getParent ( this . assignNode ) ;
Code	LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE = assignNode . getParent ( this . assignNode ) ;
Distance : 7

58
Tree	copy.linkMap = assignNode . getParent ( this . assignNode ) ;
Code	copy.linkMap = assignNode . getParent ( this . assignNode ) ;
Distance : 7

59
Tree	Node.FLAG_LOCAL_RESULTS = assignNode . getParent ( this . maybeAliased ) ;
Code	Node.FLAG_LOCAL_RESULTS = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

60
Tree	entry.map = NodeUtil . getParent ( this . maybeAliased ) ;
Code	entry.map = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

61
Tree	other.liveSet = assignNode . getParent ( this . maybeAliased ) ;
Code	other.liveSet = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

62
Tree	error.node = assignNode . getParent ( this . assignNode ) ;
Code	error.node = assignNode . getParent ( this . assignNode ) ;
Distance : 7

63
Tree	currentCase.embedInto = assignNode . getParent ( this . assignNode ) ;
Code	currentCase.embedInto = assignNode . getParent ( this . assignNode ) ;
Distance : 7

64
Tree	Reach.ALL = assignNode . getParent ( this . assignNode ) ;
Code	Reach.ALL = assignNode . getParent ( this . assignNode ) ;
Distance : 7

65
Tree	nt1.rawType = NodeUtil . getParent ( this . assignNode ) ;
Code	nt1.rawType = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

66
Tree	OutputJs.NORMAL = assignNode . getParent ( this . assignNode ) ;
Code	OutputJs.NORMAL = assignNode . getParent ( this . assignNode ) ;
Distance : 7

67
Tree	LocalizedFormats.NO_DATA = assignNode . getParent ( this . maybeAliased ) ;
Code	LocalizedFormats.NO_DATA = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

68
Tree	LocalizedFormats.EVALUATIONS = NodeUtil . getParent ( this . assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

69
Tree	p.newName = assignNode . getParent ( this . maybeAliased ) ;
Code	p.newName = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

70
Tree	this = assignNode . getParent ( this . assignNode ) ;
Code	this = assignNode . getParent ( this . assignNode ) ;
Distance : 6

71
Tree	instance.declarations = assignNode . getParent ( this . maybeAliased ) ;
Code	instance.declarations = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

72
Tree	JSTypeNative.NO_OBJECT_TYPE = assignNode . getParent ( this . maybeAliased ) ;
Code	JSTypeNative.NO_OBJECT_TYPE = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

73
Tree	bindComponents.thisValue = assignNode . getParent ( this . maybeAliased ) ;
Code	bindComponents.thisValue = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

74
Tree	that.drawable = assignNode . getParent ( this . assignNode ) ;
Code	that.drawable = assignNode . getParent ( this . assignNode ) ;
Distance : 7

75
Tree	TransformType.FORWARD = assignNode . getParent ( this . assignNode ) ;
Code	TransformType.FORWARD = assignNode . getParent ( this . assignNode ) ;
Distance : 7

76
Tree	LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE = assignNode . getParent ( this . maybeAliased ) ;
Code	LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

77
Tree	setMinorTickCount = NodeUtil . getParent ( this . assignNode ) ;
Code	setMinorTickCount = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

78
Tree	CopyOnWriteArrayList = assignNode . getParent ( this . assignNode ) ;
Code	CopyOnWriteArrayList = assignNode . getParent ( this . assignNode ) ;
Distance : 7

79
Tree	LocalizedFormats.SAME_SIGN_AT_ENDPOINTS = assignNode . getParent ( this . assignNode ) ;
Code	LocalizedFormats.SAME_SIGN_AT_ENDPOINTS = assignNode . getParent ( this . assignNode ) ;
Distance : 7

80
Tree	copy.linkMap = assignNode . getParent ( this . maybeAliased ) ;
Code	copy.linkMap = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

81
Tree	nt1.rawType = NodeUtil . getParent ( this . maybeAliased ) ;
Code	nt1.rawType = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

82
Tree	lastLink.nextLink = assignNode . getParent ( this . assignNode ) ;
Code	lastLink.nextLink = assignNode . getParent ( this . assignNode ) ;
Distance : 7

83
Tree	ref.node = NodeUtil . getParent ( this . assignNode ) ;
Code	ref.node = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

84
Tree	Void.TYPE = assignNode . getParent ( this . assignNode ) ;
Code	Void.TYPE = assignNode . getParent ( this . assignNode ) ;
Distance : 7

85
Tree	LocalizedFormats.EVALUATIONS = NodeUtil . getParent ( this . maybeAliased ) ;
Code	LocalizedFormats.EVALUATIONS = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

86
Tree	state.out = assignNode . getParent ( this . assignNode ) ;
Code	state.out = assignNode . getParent ( this . assignNode ) ;
Distance : 7

87
Tree	currentCase.embedInto = assignNode . getParent ( this . maybeAliased ) ;
Code	currentCase.embedInto = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

88
Tree	OutputJs.NORMAL = assignNode . getParent ( this . maybeAliased ) ;
Code	OutputJs.NORMAL = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

89
Tree	PeepholeFoldConstantsTest = assignNode . getParent ( this . assignNode ) ;
Code	PeepholeFoldConstantsTest = assignNode . getParent ( this . assignNode ) ;
Distance : 7

90
Tree	Reach.ALL = assignNode . getParent ( this . maybeAliased ) ;
Code	Reach.ALL = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

91
Tree	PreprocessorSymbolTable.CachedInstanceFactory = assignNode . getParent ( this . assignNode ) ;
Code	PreprocessorSymbolTable.CachedInstanceFactory = assignNode . getParent ( this . assignNode ) ;
Distance : 7

92
Tree	JSTypeNative.FUNCTION_INSTANCE_TYPE = assignNode . getParent ( this . assignNode ) ;
Code	JSTypeNative.FUNCTION_INSTANCE_TYPE = assignNode . getParent ( this . assignNode ) ;
Distance : 7

93
Tree	SimplexSolver.DEFAULT_ULPS = NodeUtil . getParent ( this . assignNode ) ;
Code	SimplexSolver.DEFAULT_ULPS = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

94
Tree	compilerState.globalTypeInfo = assignNode . getParent ( this . assignNode ) ;
Code	compilerState.globalTypeInfo = assignNode . getParent ( this . assignNode ) ;
Distance : 7

95
Tree	Feature.MODULES = assignNode . getParent ( this . assignNode ) ;
Code	Feature.MODULES = assignNode . getParent ( this . assignNode ) ;
Distance : 7

96
Tree	currentScript.declareLegacyNamespace = assignNode . getParent ( this . assignNode ) ;
Code	currentScript.declareLegacyNamespace = assignNode . getParent ( this . assignNode ) ;
Distance : 7

97
Tree	this = assignNode . getParent ( this . maybeAliased ) ;
Code	this = assignNode . getParent ( this . maybeAliased ) ;
Distance : 7

98
Tree	setMinorTickCount = NodeUtil . getParent ( this . maybeAliased ) ;
Code	setMinorTickCount = NodeUtil . getParent ( this . maybeAliased ) ;
Distance : 7

99
Tree	MostRecentTypechecker.OTI = assignNode . getParent ( this . assignNode ) ;
Code	MostRecentTypechecker.OTI = assignNode . getParent ( this . assignNode ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } value
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } value
Distance : 6

1
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ParamChecks
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ParamChecks
Distance : 6

2
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } class
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } class
Distance : 6

3
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Override
Distance : 6

4
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ArrayList
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ArrayList
Distance : 6

5
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 6

6
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } FastMath
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } FastMath
Distance : 6

7
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } expected
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } expected
Distance : 6

8
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Distance : 6

9
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } List
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } List
Distance : 6

10
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Args
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Args
Distance : 6

11
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } fail
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } fail
Distance : 6

12
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } try
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } try
Distance : 6

13
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } fireChangeEvent
Distance : 6

14
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } mock
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } mock
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } getInstance
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } getInstance
Distance : 6

16
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } serialised
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } serialised
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } join
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } join
Distance : 6

18
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } paint
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } paint
Distance : 6

19
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } *
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } *
Distance : 6

20
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } type
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } type
Distance : 6

21
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } i
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } i
Distance : 6

22
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ==
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ==
Distance : 6

23
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Object
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Object
Distance : 6

24
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } void
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } void
Distance : 6

25
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } throw
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } throw
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

27
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

29
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

30
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

31
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

32
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } super
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } super
Distance : 6

33
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } array
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } array
Distance : 6

34
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <>
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <>
Distance : 6

35
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } m
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } m
Distance : 6

36
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } boolean
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } boolean
Distance : 6

37
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } :
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } :
Distance : 6

38
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } result
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } result
Distance : 6

39
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } checkState
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } checkState
Distance : 6

40
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } double
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } double
Distance : 6

41
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } e
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } e
Distance : 6

42
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } !=
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } !=
Distance : 6

43
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } compiler
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } compiler
Distance : 6

44
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } String
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } String
Distance : 6

45
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } f
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } f
Distance : 6

46
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } n
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } n
Distance : 6

47
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } catch
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } catch
Distance : 6

48
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ]
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ]
Distance : 6

49
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

50
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Preconditions
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Preconditions
Distance : 6

51
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } final
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } final
Distance : 6

52
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

53
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } -
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } -
Distance : 6

54
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } null
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } null
Distance : 6

55
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } mode
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } mode
Distance : 6

56
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } true
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } true
Distance : 6

57
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } {}
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } {}
Distance : 6

58
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } MathRuntimeException
Distance : 6

59
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } T
Distance : 6

60
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } x
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } x
Distance : 6

61
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } parent
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } parent
Distance : 6

62
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 6

63
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } str
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } str
Distance : 6

64
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } LINE_JOINER
Distance : 6

65
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } assertThat
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } assertThat
Distance : 6

66
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } invocation
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } invocation
Distance : 6

67
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } false
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } false
Distance : 6

68
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } int
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } int
Distance : 6

69
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } testSame
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } testSame
Distance : 6

70
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } &&
Distance : 6

71
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } >
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } >
Distance : 6

72
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 6

73
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } public
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } public
Distance : 6

74
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } this
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } this
Distance : 6

75
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <
Distance : 6

76
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } if
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } if
Distance : 6

77
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } (
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } (
Distance : 6

78
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } return
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } return
Distance : 6

79
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } }
Distance : 6

80
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <blank>
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <blank>
Distance : 6

81
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ;
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ;
Distance : 6

82
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <s>
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <s>
Distance : 6

83
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } .
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } .
Distance : 6

84
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ,
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ,
Distance : 6

85
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } =
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } =
Distance : 6

86
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } }
Distance : 6

87
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ()
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ()
Distance : 6

88
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } {
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } {
Distance : 6

89
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } new
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } new
Distance : 6

90
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } STRING_CONSTANT
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } STRING_CONSTANT
Distance : 6

91
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } )
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } )
Distance : 6

92
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } @
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } @
Distance : 6

93
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } test
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } test
Distance : 6

94
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } nullNotPermitted
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } nullNotPermitted
Distance : 6

95
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } []
Distance : 6

96
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } !
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } !
Distance : 6

97
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } assertEquals
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } assertEquals
Distance : 6

98
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } +
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } +
Distance : 6

99
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } [
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } [
Distance : 6

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	listSeparator () ; !=
Code	listSeparator () ; !=
Distance : 9

1
Tree	listSeparator () ; createIllegalArgumentException
Code	listSeparator () ; createIllegalArgumentException
Distance : 9

2
Tree	listSeparator () ; add
Code	listSeparator () ; add
Distance : 9

3
Tree	listSeparator () ; name
Code	listSeparator () ; name
Distance : 9

4
Tree	listSeparator () ; m
Code	listSeparator () ; m
Distance : 9

5
Tree	listSeparator () ; boolean
Code	listSeparator () ; boolean
Distance : 9

6
Tree	listSeparator () ; checkArgument
Code	listSeparator () ; checkArgument
Distance : 9

7
Tree	listSeparator () ; data
Code	listSeparator () ; data
Distance : 9

8
Tree	listSeparator () ; List
Code	listSeparator () ; List
Distance : 9

9
Tree	listSeparator () ; Args
Code	listSeparator () ; Args
Distance : 9

10
Tree	listSeparator () ; array
Code	listSeparator () ; array
Distance : 9

11
Tree	listSeparator () ; <>
Code	listSeparator () ; <>
Distance : 9

12
Tree	listSeparator () ; try
Code	listSeparator () ; try
Distance : 9

13
Tree	listSeparator () ; fail
Code	listSeparator () ; fail
Distance : 9

14
Tree	listSeparator () ; paint
Code	listSeparator () ; paint
Distance : 9

15
Tree	listSeparator () ; join
Code	listSeparator () ; join
Distance : 9

16
Tree	listSeparator () ; str
Code	listSeparator () ; str
Distance : 9

17
Tree	listSeparator () ; LINE_JOINER
Code	listSeparator () ; LINE_JOINER
Distance : 9

18
Tree	listSeparator () ; testSame
Code	listSeparator () ; testSame
Distance : 9

19
Tree	listSeparator () ; x
Code	listSeparator () ; x
Distance : 9

20
Tree	listSeparator () ; ArrayList
Code	listSeparator () ; ArrayList
Distance : 9

21
Tree	listSeparator () ; fireChangeEvent
Code	listSeparator () ; fireChangeEvent
Distance : 9

22
Tree	listSeparator () ; super
Code	listSeparator () ; super
Distance : 9

23
Tree	listSeparator () ; parent
Code	listSeparator () ; parent
Distance : 9

24
Tree	listSeparator () ; IllegalArgumentException
Code	listSeparator () ; IllegalArgumentException
Distance : 9

25
Tree	listSeparator () ; test
Code	listSeparator () ; test
Distance : 9

26
Tree	listSeparator () ; int
Code	listSeparator () ; int
Distance : 9

27
Tree	listSeparator () ; invocation
Code	listSeparator () ; invocation
Distance : 9

28
Tree	listSeparator () ; reportCodeChange
Code	listSeparator () ; reportCodeChange
Distance : 9

29
Tree	listSeparator () ; expected
Code	listSeparator () ; expected
Distance : 9

30
Tree	listSeparator () ; :
Code	listSeparator () ; :
Distance : 9

31
Tree	listSeparator () ; result
Code	listSeparator () ; result
Distance : 9

32
Tree	listSeparator () ; serialised
Code	listSeparator () ; serialised
Distance : 9

33
Tree	listSeparator () ; getInstance
Code	listSeparator () ; getInstance
Distance : 9

34
Tree	listSeparator () ; *
Code	listSeparator () ; *
Distance : 9

35
Tree	listSeparator () ; type
Code	listSeparator () ; type
Distance : 9

36
Tree	listSeparator () ; false
Code	listSeparator () ; false
Distance : 9

37
Tree	listSeparator () ; double
Code	listSeparator () ; double
Distance : 9

38
Tree	listSeparator () ; FastMath
Code	listSeparator () ; FastMath
Distance : 9

39
Tree	listSeparator () ; checkState
Code	listSeparator () ; checkState
Distance : 9

40
Tree	listSeparator () ; nullNotPermitted
Code	listSeparator () ; nullNotPermitted
Distance : 9

41
Tree	listSeparator () ; []
Code	listSeparator () ; []
Distance : 9

42
Tree	listSeparator () ; void
Code	listSeparator () ; void
Distance : 9

43
Tree	listSeparator () ; ==
Code	listSeparator () ; ==
Distance : 9

44
Tree	listSeparator () ; assertEquals
Code	listSeparator () ; assertEquals
Distance : 9

45
Tree	listSeparator () ; !
Code	listSeparator () ; !
Distance : 9

46
Tree	listSeparator () ; @
Code	listSeparator () ; @
Distance : 9

47
Tree	listSeparator () ; assertThat
Code	listSeparator () ; assertThat
Distance : 9

48
Tree	listSeparator () ; Override
Code	listSeparator () ; Override
Distance : 9

49
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

50
Tree	listSeparator () ; [
Code	listSeparator () ; [
Distance : 9

51
Tree	listSeparator () ; this
Code	listSeparator () ; this
Distance : 9

52
Tree	listSeparator () ; &&
Code	listSeparator () ; &&
Distance : 9

53
Tree	listSeparator () ; T
Code	listSeparator () ; T
Distance : 9

54
Tree	listSeparator () ; Preconditions
Code	listSeparator () ; Preconditions
Distance : 9

55
Tree	listSeparator () ; -
Code	listSeparator () ; -
Distance : 9

56
Tree	listSeparator () ; class
Code	listSeparator () ; class
Distance : 9

57
Tree	listSeparator () ; Object
Code	listSeparator () ; Object
Distance : 9

58
Tree	listSeparator () ; {}
Code	listSeparator () ; {}
Distance : 9

59
Tree	listSeparator () ; MathRuntimeException
Code	listSeparator () ; MathRuntimeException
Distance : 9

60
Tree	listSeparator () ; ParamChecks
Code	listSeparator () ; ParamChecks
Distance : 9

61
Tree	listSeparator () ; f
Code	listSeparator () ; f
Distance : 9

62
Tree	listSeparator () ; t
Code	listSeparator () ; t
Distance : 9

63
Tree	listSeparator () ; field
Code	listSeparator () ; field
Distance : 9

64
Tree	listSeparator () ; value
Code	listSeparator () ; value
Distance : 9

65
Tree	listSeparator () ; i
Code	listSeparator () ; i
Distance : 9

66
Tree	listSeparator () ; throw
Code	listSeparator () ; throw
Distance : 9

67
Tree	listSeparator () ; catch
Code	listSeparator () ; catch
Distance : 9

68
Tree	listSeparator () ; +
Code	listSeparator () ; +
Distance : 9

69
Tree	listSeparator () ; null
Code	listSeparator () ; null
Distance : 9

70
Tree	listSeparator () ; String
Code	listSeparator () ; String
Distance : 9

71
Tree	listSeparator () ; compiler
Code	listSeparator () ; compiler
Distance : 9

72
Tree	listSeparator () ; ]
Code	listSeparator () ; ]
Distance : 9

73
Tree	cc () ;
Code	cc () ;
Distance : 7

74
Tree	listSeparator () ; NUMBER_CONSTANT
Code	listSeparator () ; NUMBER_CONSTANT
Distance : 9

75
Tree	listSeparator () ; true
Code	listSeparator () ; true
Distance : 8

76
Tree	listSeparator () ; return
Code	listSeparator () ; return
Distance : 9

77
Tree	listSeparator () ; <
Code	listSeparator () ; <
Distance : 9

78
Tree	listSeparator () ; e
Code	listSeparator () ; e
Distance : 9

79
Tree	listSeparator () ; n
Code	listSeparator () ; n
Distance : 9

80
Tree	listSeparator () ; {
Code	listSeparator () ; {
Distance : 9

81
Tree	listSeparator () ; ()
Code	listSeparator () ; ()
Distance : 9

82
Tree	listSeparator () ; ;
Code	listSeparator () ; ;
Distance : 8

83
Tree	listSeparator () ; )
Code	listSeparator () ; )
Distance : 8

84
Tree	listSeparator () ; cc
Code	listSeparator () ; cc
Distance : 9

85
Tree	listSeparator () ; if
Code	listSeparator () ; if
Distance : 9

86
Tree	listSeparator () ; <blank>
Code	listSeparator () ; <blank>
Distance : 9

87
Tree	listSeparator () ; (
Code	listSeparator () ; (
Distance : 8

88
Tree	listSeparator () ; =
Code	listSeparator () ; =
Distance : 9

89
Tree	listSeparator () ; }
Code	listSeparator () ; }
Distance : 9

90
Tree	listSeparator () ; .
Code	listSeparator () ; .
Distance : 9

91
Tree	listSeparator () ; ,
Code	listSeparator () ; ,
Distance : 8

92
Tree	listSeparator () ; STRING_CONSTANT
Code	listSeparator () ; STRING_CONSTANT
Distance : 9

93
Tree	listSeparator () ; new
Code	listSeparator () ; new
Distance : 9

94
Tree	listSeparator () ; >
Code	listSeparator () ; >
Distance : 9

95
Tree	listSeparator () ; public
Code	listSeparator () ; public
Distance : 9

96
Tree	listSeparator () ; mode
Code	listSeparator () ; mode
Distance : 9

97
Tree	listSeparator () ; <s>
Code	listSeparator () ; <s>
Distance : 9

98
Tree	listSeparator () ; final
Code	listSeparator () ; final
Distance : 9

99
Tree	listSeparator () ; mock
Code	listSeparator () ; mock
Distance : 9

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

1
Tree	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Code	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

2
Tree	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

3
Tree	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Code	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

4
Tree	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Code	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

5
Tree	AtLeastXVerificationTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	AtLeastXVerificationTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

6
Tree	NULL_TYPE + STRING_CONSTANT == NUMBER_CONSTANT
Code	NULL_TYPE + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

7
Tree	convention + STRING_CONSTANT == NUMBER_CONSTANT
Code	convention + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

8
Tree	subformats + STRING_CONSTANT == NUMBER_CONSTANT
Code	subformats + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

9
Tree	StackTraceFilteringTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	StackTraceFilteringTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

10
Tree	sourceJarComparator + STRING_CONSTANT == NUMBER_CONSTANT
Code	sourceJarComparator + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

11
Tree	namedA + STRING_CONSTANT == NUMBER_CONSTANT
Code	namedA + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

12
Tree	pomComparator + STRING_CONSTANT == NUMBER_CONSTANT
Code	pomComparator + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

13
Tree	guardA + STRING_CONSTANT == NUMBER_CONSTANT
Code	guardA + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

14
Tree	patternParam + STRING_CONSTANT == NUMBER_CONSTANT
Code	patternParam + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

15
Tree	OngoingVerifyingModeTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	OngoingVerifyingModeTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

16
Tree	tzId + STRING_CONSTANT == NUMBER_CONSTANT
Code	tzId + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

17
Tree	the_mock_type + STRING_CONSTANT == NUMBER_CONSTANT
Code	the_mock_type + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

18
Tree	scopeType + STRING_CONSTANT == NUMBER_CONSTANT
Code	scopeType + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

19
Tree	ListIterator + STRING_CONSTANT == NUMBER_CONSTANT
Code	ListIterator + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

20
Tree	loader + STRING_CONSTANT == NUMBER_CONSTANT
Code	loader + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

21
Tree	AnswerFactoryTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	AnswerFactoryTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

22
Tree	sectionOutlineStrokeMap + STRING_CONSTANT == NUMBER_CONSTANT
Code	sectionOutlineStrokeMap + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

23
Tree	fakeReturnValues + STRING_CONSTANT == NUMBER_CONSTANT
Code	fakeReturnValues + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

24
Tree	Single + STRING_CONSTANT == NUMBER_CONSTANT
Code	Single + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

25
Tree	LogBeta + STRING_CONSTANT == NUMBER_CONSTANT
Code	LogBeta + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

26
Tree	DefaultRegisteredInvocationsTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	DefaultRegisteredInvocationsTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

27
Tree	oos + STRING_CONSTANT == NUMBER_CONSTANT
Code	oos + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

28
Tree	ImageMapUtils + STRING_CONSTANT == NUMBER_CONSTANT
Code	ImageMapUtils + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

29
Tree	ClickableStackTracesTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	ClickableStackTracesTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

30
Tree	rightmostName + STRING_CONSTANT == NUMBER_CONSTANT
Code	rightmostName + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

31
Tree	sourceMapOriginalSources + STRING_CONSTANT == NUMBER_CONSTANT
Code	sourceMapOriginalSources + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

32
Tree	iPeriodConverters + STRING_CONSTANT == NUMBER_CONSTANT
Code	iPeriodConverters + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

33
Tree	inputSourceMaps + STRING_CONSTANT == NUMBER_CONSTANT
Code	inputSourceMaps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

34
Tree	CompilationLevel + STRING_CONSTANT == NUMBER_CONSTANT
Code	CompilationLevel + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

35
Tree	wantedInvocation + STRING_CONSTANT == NUMBER_CONSTANT
Code	wantedInvocation + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

36
Tree	getIntegerNumberFormat + STRING_CONSTANT == NUMBER_CONSTANT
Code	getIntegerNumberFormat + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

37
Tree	VerificationModeImplTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	VerificationModeImplTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

38
Tree	info2 + STRING_CONSTANT == NUMBER_CONSTANT
Code	info2 + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

39
Tree	expressionWithScopeCall + STRING_CONSTANT == NUMBER_CONSTANT
Code	expressionWithScopeCall + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

40
Tree	curScope + STRING_CONSTANT == NUMBER_CONSTANT
Code	curScope + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

41
Tree	enclosing + STRING_CONSTANT == NUMBER_CONSTANT
Code	enclosing + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

42
Tree	newInput + STRING_CONSTANT == NUMBER_CONSTANT
Code	newInput + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

43
Tree	TextFormat + STRING_CONSTANT == NUMBER_CONSTANT
Code	TextFormat + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

44
Tree	originalSourcesLoader + STRING_CONSTANT == NUMBER_CONSTANT
Code	originalSourcesLoader + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

45
Tree	canonicalTotallyUnremovableVarInfo + STRING_CONSTANT == NUMBER_CONSTANT
Code	canonicalTotallyUnremovableVarInfo + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

46
Tree	withPrintSettings + STRING_CONSTANT == NUMBER_CONSTANT
Code	withPrintSettings + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

47
Tree	TimesTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	TimesTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

48
Tree	allowSourcelessWarnings + STRING_CONSTANT == NUMBER_CONSTANT
Code	allowSourcelessWarnings + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

49
Tree	renderer1 + STRING_CONSTANT == NUMBER_CONSTANT
Code	renderer1 + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

50
Tree	FieldFirstOrderDifferentialEquations + STRING_CONSTANT == NUMBER_CONSTANT
Code	FieldFirstOrderDifferentialEquations + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

51
Tree	enclosingCall + STRING_CONSTANT == NUMBER_CONSTANT
Code	enclosingCall + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

52
Tree	ExceptionFactory + STRING_CONSTANT == NUMBER_CONSTANT
Code	ExceptionFactory + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

53
Tree	exprResultNode + STRING_CONSTANT == NUMBER_CONSTANT
Code	exprResultNode + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

54
Tree	naf + STRING_CONSTANT == NUMBER_CONSTANT
Code	naf + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

55
Tree	messages + STRING_CONSTANT == NUMBER_CONSTANT
Code	messages + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

56
Tree	candidateDefinition + STRING_CONSTANT == NUMBER_CONSTANT
Code	candidateDefinition + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

57
Tree	iZoneInfoMap + STRING_CONSTANT == NUMBER_CONSTANT
Code	iZoneInfoMap + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

58
Tree	ClassImposterizerTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	ClassImposterizerTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

59
Tree	shell + STRING_CONSTANT == NUMBER_CONSTANT
Code	shell + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

60
Tree	fmt + STRING_CONSTANT == NUMBER_CONSTANT
Code	fmt + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

61
Tree	scopeToDeclareIn + STRING_CONSTANT == NUMBER_CONSTANT
Code	scopeToDeclareIn + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

62
Tree	lhsOfForInLoop + STRING_CONSTANT == NUMBER_CONSTANT
Code	lhsOfForInLoop + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

63
Tree	activeXObject + STRING_CONSTANT == NUMBER_CONSTANT
Code	activeXObject + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

64
Tree	argPattern + STRING_CONSTANT == NUMBER_CONSTANT
Code	argPattern + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

65
Tree	writeImageMap + STRING_CONSTANT == NUMBER_CONSTANT
Code	writeImageMap + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

66
Tree	isDestructuringLhs + STRING_CONSTANT == NUMBER_CONSTANT
Code	isDestructuringLhs + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

67
Tree	noPrimitives + STRING_CONSTANT == NUMBER_CONSTANT
Code	noPrimitives + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

68
Tree	yield + STRING_CONSTANT == NUMBER_CONSTANT
Code	yield + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

69
Tree	iIntervalConverters + STRING_CONSTANT == NUMBER_CONSTANT
Code	iIntervalConverters + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

70
Tree	allDeps + STRING_CONSTANT == NUMBER_CONSTANT
Code	allDeps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

71
Tree	allSymbols + STRING_CONSTANT == NUMBER_CONSTANT
Code	allSymbols + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

72
Tree	m.featureSet + STRING_CONSTANT == NUMBER_CONSTANT
Code	m.featureSet + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

73
Tree	lit + STRING_CONSTANT == NUMBER_CONSTANT
Code	lit + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

74
Tree	NormalizeStatements + STRING_CONSTANT == NUMBER_CONSTANT
Code	NormalizeStatements + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

75
Tree	functionContextStack + STRING_CONSTANT == NUMBER_CONSTANT
Code	functionContextStack + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

76
Tree	JsOverlay + STRING_CONSTANT == NUMBER_CONSTANT
Code	JsOverlay + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

77
Tree	expectCanAssignTo + STRING_CONSTANT == NUMBER_CONSTANT
Code	expectCanAssignTo + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

78
Tree	java.lang.Class + STRING_CONSTANT == NUMBER_CONSTANT
Code	java.lang.Class + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

79
Tree	MockMethodAdvice + STRING_CONSTANT == NUMBER_CONSTANT
Code	MockMethodAdvice + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

80
Tree	assignedAt + STRING_CONSTANT == NUMBER_CONSTANT
Code	assignedAt + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

81
Tree	negativeItemLabelPositionMap + STRING_CONSTANT == NUMBER_CONSTANT
Code	negativeItemLabelPositionMap + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

82
Tree	loadModuleStatement + STRING_CONSTANT == NUMBER_CONSTANT
Code	loadModuleStatement + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

83
Tree	OverloadingPuzzleTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	OverloadingPuzzleTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

84
Tree	testGenerator + STRING_CONSTANT == NUMBER_CONSTANT
Code	testGenerator + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

85
Tree	decompMatrix + STRING_CONSTANT == NUMBER_CONSTANT
Code	decompMatrix + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

86
Tree	getReplacements + STRING_CONSTANT == NUMBER_CONSTANT
Code	getReplacements + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

87
Tree	mRule + STRING_CONSTANT == NUMBER_CONSTANT
Code	mRule + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

88
Tree	definitionNodes + STRING_CONSTANT == NUMBER_CONSTANT
Code	definitionNodes + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

89
Tree	FieldStepInterpolator + STRING_CONSTANT == NUMBER_CONSTANT
Code	FieldStepInterpolator + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

90
Tree	ZoneInfoLogger + STRING_CONSTANT == NUMBER_CONSTANT
Code	ZoneInfoLogger + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

91
Tree	suffixes + STRING_CONSTANT == NUMBER_CONSTANT
Code	suffixes + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

92
Tree	listenerSupport + STRING_CONSTANT == NUMBER_CONSTANT
Code	listenerSupport + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

93
Tree	onlyExport + STRING_CONSTANT == NUMBER_CONSTANT
Code	onlyExport + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

94
Tree	varsInFunctionBody + STRING_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

95
Tree	Queue + STRING_CONSTANT == NUMBER_CONSTANT
Code	Queue + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

96
Tree	aliasExpanded + STRING_CONSTANT == NUMBER_CONSTANT
Code	aliasExpanded + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

97
Tree	namespaceToRequire + STRING_CONSTANT == NUMBER_CONSTANT
Code	namespaceToRequire + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

98
Tree	accessibleObject + STRING_CONSTANT == NUMBER_CONSTANT
Code	accessibleObject + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

99
Tree	firstScript + STRING_CONSTANT == NUMBER_CONSTANT
Code	firstScript + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Distance : 5

1
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( compiler ) ; }
Distance : 5

2
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( externs ) ; }
Distance : 5

3
Tree	{ ( new NodeTraversal ( externs , this , externs ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this , externs ) ) . traverseRoots ( externs ) ; }
Distance : 5

4
Tree	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverse ( root ) ; }
Distance : 6

5
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverseRoots ( root ) ; }
Distance : 5

6
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverseRoots ( root ) ; }
Distance : 5

7
Tree	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverse ( externs ) ; }
Distance : 6

8
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverse ( compiler ) ; }
Distance : 7

9
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverseRoots ( externs ) ; }
Distance : 5

10
Tree	{ ( new NodeTraversal ( externs , this , externs ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , externs ) ) . traverse ( compiler ) ; }
Distance : 7

11
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverseRoots ( externs ) ; }
Distance : 5

12
Tree	{ ( new NodeTraversal ( root , this , compiler ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( root , this , compiler ) ) . traverse ( root ) ; }
Distance : 6

13
Tree	{ ( new NodeTraversal ( root , this , compiler ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this , compiler ) ) . traverse ( externs ) ; }
Distance : 6

14
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( compiler ) ; }
Distance : 7

15
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( compiler ) ; }
Distance : 7

16
Tree	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverseRoots ( root ) ; }
Distance : 5

17
Tree	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverseRoots ( externs ) ; }
Distance : 5

18
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( compiler ) ; }
Distance : 6

19
Tree	{ ( new NodeTraversal ( externs , this , externs ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , externs ) ) . traverseRoots ( compiler ) ; }
Distance : 6

20
Tree	{ ( new NodeTraversal ( externs , this , externs ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this , externs ) ) . traverseRoots ( root ) ; }
Distance : 5

21
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( externs ) ; }
Distance : 6

22
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( root ) ; }
Distance : 5

23
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( root ) ; }
Distance : 6

24
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Distance : 5

25
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Distance : 5

26
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Distance : 4

27
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Distance : 4

28
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Distance : 4

29
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( root ) ; }
Distance : 5

30
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( externs ) ; }
Distance : 4

31
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( externs ) ; }
Distance : 5

32
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( externs ) ; }
Distance : 6

33
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( compiler ) ; }
Distance : 6

34
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( compiler ) ; }
Distance : 6

35
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( externs ) ; }
Distance : 4

36
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( compiler ) ; }
Distance : 5

37
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( compiler ) ; }
Distance : 5

38
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverse ( root ) ; }
Distance : 6

39
Tree	{ ( new NodeTraversal ( externs , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this , externs ) ) . traverse ( root ) ; }
Distance : 6

40
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( compiler ) ; }
Distance : 6

41
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverse ( externs ) ; }
Distance : 6

42
Tree	{ ( new NodeTraversal ( externs , this , externs ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this , externs ) ) . traverse ( externs ) ; }
Distance : 6

43
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( root ) ; }
Distance : 6

44
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( root ) ; }
Distance : 4

45
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Distance : 5

46
Tree	{ ( new NodeTraversal ( root , this , compiler ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , this , compiler ) ) . traverseRoots ( root ) ; }
Distance : 5

47
Tree	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverse ( compiler ) ; }
Distance : 7

48
Tree	{ ( new NodeTraversal ( root , this , compiler ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this , compiler ) ) . traverseRoots ( externs ) ; }
Distance : 5

49
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverseRoots ( compiler ) ; }
Distance : 6

50
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverseRoots ( compiler ) ; }
Distance : 6

51
Tree	{ ( new NodeTraversal ( root , this , compiler ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , compiler ) ) . traverse ( compiler ) ; }
Distance : 7

52
Tree	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , compiler ) ) . traverseRoots ( compiler ) ; }
Distance : 6

53
Tree	{ ( new NodeTraversal ( root , this , compiler ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , compiler ) ) . traverseRoots ( compiler ) ; }
Distance : 6

54
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } null
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } null
Distance : 6

55
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } throw
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } throw
Distance : 6

56
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } this
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } this
Distance : 6

57
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } final
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } final
Distance : 6

58
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } nullNotPermitted
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } nullNotPermitted
Distance : 6

59
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } []
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } []
Distance : 6

60
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } void
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } void
Distance : 6

61
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ==
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ==
Distance : 6

62
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } compiler
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } compiler
Distance : 6

63
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } String
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } String
Distance : 6

64
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } catch
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } catch
Distance : 6

65
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } @
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } @
Distance : 6

66
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } test
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } test
Distance : 6

67
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } return
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } return
Distance : 6

68
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } !
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } !
Distance : 6

69
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } assertEquals
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } assertEquals
Distance : 6

70
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } false
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } false
Distance : 6

71
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } int
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } int
Distance : 6

72
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } double
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } double
Distance : 6

73
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } checkState
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } checkState
Distance : 6

74
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } n
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } n
Distance : 6

75
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } e
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } e
Distance : 6

76
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } NUMBER_CONSTANT
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } NUMBER_CONSTANT
Distance : 6

77
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } }
Distance : 6

78
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } =
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } =
Distance : 6

79
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } {
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } {
Distance : 6

80
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } !=
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } !=
Distance : 6

81
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } super
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } super
Distance : 6

82
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } new
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } new
Distance : 6

83
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } STRING_CONSTANT
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } STRING_CONSTANT
Distance : 6

84
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } i
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } i
Distance : 6

85
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } value
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } value
Distance : 6

86
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } if
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } if
Distance : 6

87
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } <
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } <
Distance : 6

88
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } >
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } >
Distance : 6

89
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } public
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } public
Distance : 6

90
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ;
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ;
Distance : 6

91
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } )
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } )
Distance : 6

92
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } <s>
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } <s>
Distance : 6

93
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } (
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } (
Distance : 6

94
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ,
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ,
Distance : 6

95
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } .
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } .
Distance : 6

96
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } <blank>
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } <blank>
Distance : 6

97
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } }
Distance : 6

98
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ()
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } ()
Distance : 6

99
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } +
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; } +
Distance : 6

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchBody ) ; checkState
Code	Node catchBody = block ( catchBody ) ; checkState
Distance : 8

1
Tree	Node catchBody = block ( catchBody ) ; String
Code	Node catchBody = block ( catchBody ) ; String
Distance : 8

2
Tree	Node catchBody = block ( catchBody ) ; compiler
Code	Node catchBody = block ( catchBody ) ; compiler
Distance : 8

3
Tree	Node catchBody = block ( catchBody ) ; class
Code	Node catchBody = block ( catchBody ) ; class
Distance : 8

4
Tree	Node catchBody = block ( catchBody ) ; MathRuntimeException
Code	Node catchBody = block ( catchBody ) ; MathRuntimeException
Distance : 8

5
Tree	Node catchBody = block ( catchBody ) ; mock
Code	Node catchBody = block ( catchBody ) ; mock
Distance : 8

6
Tree	Node catchBody = block ( catchBody ) ; join
Code	Node catchBody = block ( catchBody ) ; join
Distance : 8

7
Tree	Node catchBody = block ( catchBody ) ; str
Code	Node catchBody = block ( catchBody ) ; str
Distance : 8

8
Tree	Node catchBody = block ( catchBody ) ; LINE_JOINER
Code	Node catchBody = block ( catchBody ) ; LINE_JOINER
Distance : 8

9
Tree	Node catchBody = block ( catchBody ) ; assertThat
Code	Node catchBody = block ( catchBody ) ; assertThat
Distance : 8

10
Tree	Node catchBody = block ( catchBody ) ; invocation
Code	Node catchBody = block ( catchBody ) ; invocation
Distance : 8

11
Tree	Node catchBody = block ( catchBody ) ; type
Code	Node catchBody = block ( catchBody ) ; type
Distance : 8

12
Tree	Node catchBody = block ( catchBody ) ; *
Code	Node catchBody = block ( catchBody ) ; *
Distance : 8

13
Tree	Node catchBody = block ( catchBody ) ; paint
Code	Node catchBody = block ( catchBody ) ; paint
Distance : 8

14
Tree	Node catchBody = block ( catchBody ) ; f
Code	Node catchBody = block ( catchBody ) ; f
Distance : 8

15
Tree	Node catchBody = block ( catchBody ) ; Override
Code	Node catchBody = block ( catchBody ) ; Override
Distance : 8

16
Tree	Node catchBody = block ( catchBody ) ; ParamChecks
Code	Node catchBody = block ( catchBody ) ; ParamChecks
Distance : 8

17
Tree	Node catchBody = block ( catchBody ) ; array
Code	Node catchBody = block ( catchBody ) ; array
Distance : 8

18
Tree	Node catchBody = block ( catchBody ) ; <>
Code	Node catchBody = block ( catchBody ) ; <>
Distance : 8

19
Tree	Node catchBody = block ( catchBody ) ; double
Code	Node catchBody = block ( catchBody ) ; double
Distance : 8

20
Tree	Node catchBody = block ( catchBody ) ; {}
Code	Node catchBody = block ( catchBody ) ; {}
Distance : 8

21
Tree	Node catchBody = block ( catchBody ) ; true
Code	Node catchBody = block ( catchBody ) ; true
Distance : 8

22
Tree	Node catchBody = block ( catchBody ) ; Object
Code	Node catchBody = block ( catchBody ) ; Object
Distance : 8

23
Tree	Node catchBody = block ( catchBody ) ; mode
Code	Node catchBody = block ( catchBody ) ; mode
Distance : 8

24
Tree	Node catchBody = block ( catchBody ) ; n
Code	Node catchBody = block ( catchBody ) ; n
Distance : 8

25
Tree	Node catchBody = block ( catchBody ) ; i
Code	Node catchBody = block ( catchBody ) ; i
Distance : 8

26
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

27
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

28
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

29
Tree	Node catchBody = copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) ;
Distance : 6

30
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

31
Tree	Node catchBody = copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) ;
Distance : 5

32
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

33
Tree	Node catchBody = copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) ;
Distance : 6

34
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

35
Tree	Node catchBody = copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) ;
Distance : 5

36
Tree	Node catchBody = block ( catchBody ) ; false
Code	Node catchBody = block ( catchBody ) ; false
Distance : 8

37
Tree	Node catchBody = block ( catchBody ) ; try
Code	Node catchBody = block ( catchBody ) ; try
Distance : 8

38
Tree	Node catchBody = block ( catchBody ) ; fail
Code	Node catchBody = block ( catchBody ) ; fail
Distance : 8

39
Tree	Node catchBody = block ( catchBody ) ; Args
Code	Node catchBody = block ( catchBody ) ; Args
Distance : 8

40
Tree	Node catchBody = block ( catchBody ) ; List
Code	Node catchBody = block ( catchBody ) ; List
Distance : 8

41
Tree	Node catchBody = block ( catchBody ) ; test
Code	Node catchBody = block ( catchBody ) ; test
Distance : 8

42
Tree	Node catchBody = block ( catchBody ) ; @
Code	Node catchBody = block ( catchBody ) ; @
Distance : 8

43
Tree	Node catchBody = block ( catchBody ) ; int
Code	Node catchBody = block ( catchBody ) ; int
Distance : 8

44
Tree	Node catchBody = block ( catchBody ) ; e
Code	Node catchBody = block ( catchBody ) ; e
Distance : 8

45
Tree	Node catchBody = block ( catchBody ) ; &&
Code	Node catchBody = block ( catchBody ) ; &&
Distance : 8

46
Tree	Node catchBody = block ( catchBody ) ; T
Code	Node catchBody = block ( catchBody ) ; T
Distance : 8

47
Tree	Node catchBody = block ( catchBody ) ; value
Code	Node catchBody = block ( catchBody ) ; value
Distance : 8

48
Tree	Node catchBody = block ( catchBody ) ; -
Code	Node catchBody = block ( catchBody ) ; -
Distance : 8

49
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

50
Tree	Node catchBody = block ( catchBody ) ; [
Code	Node catchBody = block ( catchBody ) ; [
Distance : 8

51
Tree	Node catchBody = block ( catchBody ) ; !=
Code	Node catchBody = block ( catchBody ) ; !=
Distance : 8

52
Tree	Node catchBody = block ( catchBody ) ; super
Code	Node catchBody = block ( catchBody ) ; super
Distance : 8

53
Tree	Node catchBody = block ( catchBody ) ; if
Code	Node catchBody = block ( catchBody ) ; if
Distance : 8

54
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

55
Tree	Node catchBody = block ( catchBody ) ; ]
Code	Node catchBody = block ( catchBody ) ; ]
Distance : 8

56
Tree	Node catchBody = block ( catchBody ) ; null
Code	Node catchBody = block ( catchBody ) ; null
Distance : 8

57
Tree	Node catchBody = block ( catchBody ) ; result
Code	Node catchBody = block ( catchBody ) ; result
Distance : 8

58
Tree	Node catchBody = block ( catchBody ) ; =
Code	Node catchBody = block ( catchBody ) ; =
Distance : 8

59
Tree	Node catchBody = block ( catchBody ) ; :
Code	Node catchBody = block ( catchBody ) ; :
Distance : 8

60
Tree	Node catchBody = block ( catchBody ) ; m
Code	Node catchBody = block ( catchBody ) ; m
Distance : 8

61
Tree	Node catchBody = block ( catchBody ) ; ArrayList
Code	Node catchBody = block ( catchBody ) ; ArrayList
Distance : 8

62
Tree	Node catchBody = block ( catchBody ) ; fireChangeEvent
Code	Node catchBody = block ( catchBody ) ; fireChangeEvent
Distance : 8

63
Tree	Node catchBody = block ( catchBody ) ; getInstance
Code	Node catchBody = block ( catchBody ) ; getInstance
Distance : 8

64
Tree	Node catchBody = block ( catchBody ) ; serialised
Code	Node catchBody = block ( catchBody ) ; serialised
Distance : 8

65
Tree	Node catchBody = block ( catchBody ) ; createIllegalArgumentException
Code	Node catchBody = block ( catchBody ) ; createIllegalArgumentException
Distance : 8

66
Tree	Node catchBody = block ( catchBody ) ; parent
Code	Node catchBody = block ( catchBody ) ; parent
Distance : 8

67
Tree	Node catchBody = block ( catchBody ) ; boolean
Code	Node catchBody = block ( catchBody ) ; boolean
Distance : 8

68
Tree	Node catchBody = block ( catchBody ) ; }
Code	Node catchBody = block ( catchBody ) ; }
Distance : 8

69
Tree	Node catchBody = block ( catchBody ) ; >
Code	Node catchBody = block ( catchBody ) ; >
Distance : 8

70
Tree	Node catchBody = block ( catchBody ) ; {
Code	Node catchBody = block ( catchBody ) ; {
Distance : 8

71
Tree	Node catchBody = block ( catchBody ) ; public
Code	Node catchBody = block ( catchBody ) ; public
Distance : 8

72
Tree	Node catchBody = block ( catchBody ) ; <
Code	Node catchBody = block ( catchBody ) ; <
Distance : 8

73
Tree	Node catchBody = block ( catchBody ) ; ()
Code	Node catchBody = block ( catchBody ) ; ()
Distance : 8

74
Tree	Node catchBody = block ( catchBody ) ; final
Code	Node catchBody = block ( catchBody ) ; final
Distance : 8

75
Tree	Node catchBody = block ( catchBody ) ; <blank>
Code	Node catchBody = block ( catchBody ) ; <blank>
Distance : 8

76
Tree	Node catchBody = block ( catchBody ) ; ;
Code	Node catchBody = block ( catchBody ) ; ;
Distance : 7

77
Tree	Node catchBody = block ( catchBody ) ; <s>
Code	Node catchBody = block ( catchBody ) ; <s>
Distance : 8

78
Tree	Node catchBody = block ( catchBody ) ; (
Code	Node catchBody = block ( catchBody ) ; (
Distance : 7

79
Tree	Node catchBody = block ( catchBody ) ; this
Code	Node catchBody = block ( catchBody ) ; this
Distance : 8

80
Tree	Node catchBody = block ( catchBody ) ; STRING_CONSTANT
Code	Node catchBody = block ( catchBody ) ; STRING_CONSTANT
Distance : 8

81
Tree	Node catchBody = block ( catchBody ) ; NUMBER_CONSTANT
Code	Node catchBody = block ( catchBody ) ; NUMBER_CONSTANT
Distance : 8

82
Tree	Node catchBody = block ( catchBody ) ; return
Code	Node catchBody = block ( catchBody ) ; return
Distance : 8

83
Tree	Node catchBody = block ( catchBody ) ; ,
Code	Node catchBody = block ( catchBody ) ; ,
Distance : 8

84
Tree	Node catchBody = block ( catchBody ) ; .
Code	Node catchBody = block ( catchBody ) ; .
Distance : 8

85
Tree	Node catchBody = block ( catchBody ) ; )
Code	Node catchBody = block ( catchBody ) ; )
Distance : 7

86
Tree	Node catchBody = block ( catchBody ) ; ;
Code	Node catchBody = block ( catchBody ) ; ;
Distance : 7

87
Tree	Node catchBody = block ( catchBody ) ; new
Code	Node catchBody = block ( catchBody ) ; new
Distance : 8

88
Tree	Node catchBody = block ( catchBody ) ; testSame
Code	Node catchBody = block ( catchBody ) ; testSame
Distance : 8

89
Tree	Node catchBody = block ( catchBody ) ; x
Code	Node catchBody = block ( catchBody ) ; x
Distance : 8

90
Tree	Node catchBody = block ( catchBody ) ; assertEquals
Code	Node catchBody = block ( catchBody ) ; assertEquals
Distance : 8

91
Tree	Node catchBody = block ( catchBody ) ; !
Code	Node catchBody = block ( catchBody ) ; !
Distance : 8

92
Tree	Node catchBody = block ( catchBody ) ; []
Code	Node catchBody = block ( catchBody ) ; []
Distance : 8

93
Tree	Node catchBody = block ( catchBody ) ; nullNotPermitted
Code	Node catchBody = block ( catchBody ) ; nullNotPermitted
Distance : 8

94
Tree	Node catchBody = block ( catchBody ) ; throw
Code	Node catchBody = block ( catchBody ) ; throw
Distance : 8

95
Tree	Node catchBody = block ( catchBody ) ; catch
Code	Node catchBody = block ( catchBody ) ; catch
Distance : 8

96
Tree	Node catchBody = block ( catchBody ) ; void
Code	Node catchBody = block ( catchBody ) ; void
Distance : 8

97
Tree	Node catchBody = block ( catchBody ) ; ==
Code	Node catchBody = block ( catchBody ) ; ==
Distance : 8

98
Tree	Node catchBody = block ( catchBody ) ; +
Code	Node catchBody = block ( catchBody ) ; +
Distance : 8

99
Tree	Node catchBody = block ( catchBody ) ; Preconditions
Code	Node catchBody = block ( catchBody ) ; Preconditions
Distance : 8

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

1
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

2
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

3
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

4
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

5
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

6
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

7
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

8
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

9
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

10
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

11
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

12
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

13
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

14
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

15
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 6

16
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

17
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

18
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 6

19
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

20
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

21
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

22
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

23
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

24
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 7

25
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

26
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

27
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

28
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 5

29
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

30
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

31
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

32
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 6

33
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 8

34
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

35
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

36
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

37
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

38
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

39
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

40
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

41
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

42
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

43
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

44
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

45
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

46
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

47
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

48
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

49
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

50
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

51
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 8

52
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 6

53
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

54
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

55
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 6

56
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

57
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

58
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

59
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

60
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 6

61
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 6

62
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

63
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 6

64
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 7

65
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

66
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

67
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 5

68
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

69
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 6

70
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

71
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 7

72
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

73
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

74
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 7

75
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

76
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 5

77
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

78
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

79
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 6

80
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 7

81
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

82
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

83
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 6

84
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

85
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 5

86
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 8

87
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

88
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 6

89
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

90
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 8

91
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

92
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 5

93
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 8

94
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 6

95
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

96
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

97
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , finallyNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 7

98
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

99
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } test
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } test
Distance : 6

1
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } []
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } []
Distance : 6

2
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } nullNotPermitted
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } nullNotPermitted
Distance : 6

3
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } f
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } f
Distance : 6

4
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ParamChecks
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ParamChecks
Distance : 6

5
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } array
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } array
Distance : 6

6
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ]
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ]
Distance : 6

7
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } MathRuntimeException
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } MathRuntimeException
Distance : 6

8
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Object
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Object
Distance : 6

9
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } createIllegalArgumentException
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } createIllegalArgumentException
Distance : 6

10
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } parent
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } parent
Distance : 6

11
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } testSame
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } testSame
Distance : 6

12
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } x
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } x
Distance : 6

13
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Override
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Override
Distance : 6

14
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mock
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mock
Distance : 6

15
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } class
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } class
Distance : 6

16
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {}
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {}
Distance : 6

17
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } @
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } @
Distance : 6

18
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } [
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } [
Distance : 6

19
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Preconditions
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Preconditions
Distance : 6

20
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } -
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } -
Distance : 6

21
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mode
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mode
Distance : 6

22
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !
Distance : 6

23
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } true
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } true
Distance : 6

24
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } assertEquals
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } assertEquals
Distance : 6

25
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } super
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } super
Distance : 6

26
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

27
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

28
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

29
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

30
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

31
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

32
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

33
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

34
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

35
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

36
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

37
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

38
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

39
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

40
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Distance : 6

41
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } &&
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } &&
Distance : 6

42
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } T
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } T
Distance : 6

43
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } i
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } i
Distance : 6

44
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } value
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } value
Distance : 6

45
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } checkState
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } checkState
Distance : 6

46
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } double
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } double
Distance : 6

47
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !=
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !=
Distance : 6

48
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } m
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } m
Distance : 6

49
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

50
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } :
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } :
Distance : 6

51
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } .
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } .
Distance : 6

52
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ,
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ,
Distance : 6

53
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } false
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } false
Distance : 6

54
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } int
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } int
Distance : 6

55
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } public
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } public
Distance : 6

56
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

57
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } )
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } )
Distance : 6

58
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } result
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } result
Distance : 6

59
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } List
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } List
Distance : 6

60
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Args
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Args
Distance : 6

61
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } fail
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } fail
Distance : 6

62
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } try
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } try
Distance : 6

63
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } type
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } type
Distance : 6

64
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } *
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } *
Distance : 6

65
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <
Distance : 6

66
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ;
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ;
Distance : 6

67
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } this
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } this
Distance : 6

68
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } else
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } else
Distance : 6

69
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <s>
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <s>
Distance : 6

70
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } (
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } (
Distance : 6

71
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } =
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } =
Distance : 6

72
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } }
Distance : 6

73
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ()
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ()
Distance : 6

74
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {
Distance : 6

75
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } new
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } new
Distance : 6

76
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Distance : 6

77
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Distance : 6

78
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } return
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } return
Distance : 6

79
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } +
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } +
Distance : 6

80
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } null
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } null
Distance : 6

81
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } >
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } >
Distance : 6

82
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } final
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } final
Distance : 6

83
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <blank>
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <blank>
Distance : 6

84
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } paint
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } paint
Distance : 6

85
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } join
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } join
Distance : 6

86
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } serialised
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } serialised
Distance : 6

87
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } getInstance
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } getInstance
Distance : 6

88
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } fireChangeEvent
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } fireChangeEvent
Distance : 6

89
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ArrayList
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ArrayList
Distance : 6

90
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ==
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ==
Distance : 6

91
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } void
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } void
Distance : 6

92
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } catch
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } catch
Distance : 6

93
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } throw
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } throw
Distance : 6

94
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } n
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } n
Distance : 6

95
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } e
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } e
Distance : 6

96
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } String
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } String
Distance : 6

97
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } compiler
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } compiler
Distance : 6

98
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } if
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } if
Distance : 6

99
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } boolean
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } boolean
Distance : 6

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; value
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; value
Distance : 5

1
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

2
Tree	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

3
Tree	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

4
Tree	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

5
Tree	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

6
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; i
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; i
Distance : 5

7
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertEquals
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertEquals
Distance : 5

8
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; false
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; false
Distance : 5

9
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; int
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; int
Distance : 5

10
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; @
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; @
Distance : 5

11
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; test
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; test
Distance : 5

12
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; nullNotPermitted
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; nullNotPermitted
Distance : 5

13
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; []
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; []
Distance : 5

14
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !
Distance : 5

15
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkState
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkState
Distance : 5

16
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !=
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !=
Distance : 5

17
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; super
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; super
Distance : 5

18
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; double
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; double
Distance : 5

19
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; try
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; try
Distance : 5

20
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; fail
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; fail
Distance : 5

21
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Args
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Args
Distance : 5

22
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

23
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; List
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; List
Distance : 5

24
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

25
Tree	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

26
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

27
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

28
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

29
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

30
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 5

31
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

32
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

33
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

34
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

35
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

36
Tree	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

37
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

38
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

39
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

40
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

41
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

42
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 5

43
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

44
Tree	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

45
Tree	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

46
Tree	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

47
Tree	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

48
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; MathRuntimeException
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; MathRuntimeException
Distance : 5

49
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

50
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; true
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; true
Distance : 5

51
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; n
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; n
Distance : 5

52
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; e
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; e
Distance : 5

53
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; String
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; String
Distance : 5

54
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; compiler
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; compiler
Distance : 5

55
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <
Distance : 5

56
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; this
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; this
Distance : 5

57
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; final
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; final
Distance : 5

58
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; if
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; if
Distance : 5

59
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; >
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; >
Distance : 5

60
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; null
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; null
Distance : 5

61
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; +
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; +
Distance : 5

62
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ,
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ,
Distance : 5

63
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; .
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; .
Distance : 5

64
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; )
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; )
Distance : 5

65
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <blank>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <blank>
Distance : 5

66
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; public
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; public
Distance : 5

67
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

68
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; throw
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; throw
Distance : 5

69
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; catch
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; catch
Distance : 5

70
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; void
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; void
Distance : 5

71
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ==
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ==
Distance : 5

72
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; &&
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; &&
Distance : 5

73
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; T
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; T
Distance : 5

74
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Distance : 5

75
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Distance : 5

76
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mode
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mode
Distance : 5

77
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <s>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <s>
Distance : 5

78
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; -
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; -
Distance : 5

79
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Preconditions
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Preconditions
Distance : 5

80
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; [
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; [
Distance : 5

81
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ]
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ]
Distance : 5

82
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; class
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; class
Distance : 5

83
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Object
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Object
Distance : 5

84
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mock
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mock
Distance : 5

85
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Override
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Override
Distance : 5

86
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; f
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; f
Distance : 5

87
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ParamChecks
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ParamChecks
Distance : 5

88
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; array
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; array
Distance : 5

89
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <>
Distance : 5

90
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; return
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; return
Distance : 5

91
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NUMBER_CONSTANT
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NUMBER_CONSTANT
Distance : 5

92
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; STRING_CONSTANT
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; STRING_CONSTANT
Distance : 5

93
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; new
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; new
Distance : 5

94
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {
Distance : 5

95
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ()
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ()
Distance : 5

96
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; }
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; }
Distance : 5

97
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; =
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; =
Distance : 5

98
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; (
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; (
Distance : 5

99
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {}
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {}
Distance : 5

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	c . canInline () -
Code	c . canInline () -
Distance : 5

1
Tree	c . canInline () assertThat
Code	c . canInline () assertThat
Distance : 5

2
Tree	c . canInline () :
Code	c . canInline () :
Distance : 5

3
Tree	c . canInline () field
Code	c . canInline () field
Distance : 5

4
Tree	c . canInline () t
Code	c . canInline () t
Distance : 5

5
Tree	c . canInline () name
Code	c . canInline () name
Distance : 5

6
Tree	c . canInline () add
Code	c . canInline () add
Distance : 5

7
Tree	c . canInline () <>
Code	c . canInline () <>
Distance : 5

8
Tree	c . canInline () array
Code	c . canInline () array
Distance : 5

9
Tree	c . canInline () ParamChecks
Code	c . canInline () ParamChecks
Distance : 5

10
Tree	c . canInline () f
Code	c . canInline () f
Distance : 5

11
Tree	c . canInline () result
Code	c . canInline () result
Distance : 5

12
Tree	c . canInline () boolean
Code	c . canInline () boolean
Distance : 5

13
Tree	c . canInline () Preconditions
Code	c . canInline () Preconditions
Distance : 5

14
Tree	c . canInline () m
Code	c . canInline () m
Distance : 5

15
Tree	c . canInline () x
Code	c . canInline () x
Distance : 5

16
Tree	c . canInline () testSame
Code	c . canInline () testSame
Distance : 5

17
Tree	c . canInline () parent
Code	c . canInline () parent
Distance : 5

18
Tree	c . canInline () createIllegalArgumentException
Code	c . canInline () createIllegalArgumentException
Distance : 5

19
Tree	c . canInline () serialised
Code	c . canInline () serialised
Distance : 5

20
Tree	c . canInline () getInstance
Code	c . canInline () getInstance
Distance : 5

21
Tree	c . canInline () fireChangeEvent
Code	c . canInline () fireChangeEvent
Distance : 5

22
Tree	c . canInline () invocation
Code	c . canInline () invocation
Distance : 5

23
Tree	c . canInline () ArrayList
Code	c . canInline () ArrayList
Distance : 5

24
Tree	c . canInline () str
Code	c . canInline () str
Distance : 5

25
Tree	c . canInline () !
Code	c . canInline () !
Distance : 5

26
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

27
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

28
Tree	c . canInline () @
Code	c . canInline () @
Distance : 5

29
Tree	c . canInline () List
Code	c . canInline () List
Distance : 5

30
Tree	c . canInline () Args
Code	c . canInline () Args
Distance : 5

31
Tree	c . canInline () fail
Code	c . canInline () fail
Distance : 5

32
Tree	c . canInline () try
Code	c . canInline () try
Distance : 5

33
Tree	c . canInline () type
Code	c . canInline () type
Distance : 5

34
Tree	c . canInline () *
Code	c . canInline () *
Distance : 5

35
Tree	c . canInline () paint
Code	c . canInline () paint
Distance : 5

36
Tree	c . canInline () join
Code	c . canInline () join
Distance : 5

37
Tree	c . canInline () test
Code	c . canInline () test
Distance : 5

38
Tree	c . canInline () false
Code	c . canInline () false
Distance : 5

39
Tree	c . canInline () int
Code	c . canInline () int
Distance : 5

40
Tree	c . canInline () LINE_JOINER
Code	c . canInline () LINE_JOINER
Distance : 5

41
Tree	c . canInline () ==
Code	c . canInline () ==
Distance : 5

42
Tree	c . canInline () void
Code	c . canInline () void
Distance : 5

43
Tree	c . canInline () catch
Code	c . canInline () catch
Distance : 5

44
Tree	c . canInline () throw
Code	c . canInline () throw
Distance : 5

45
Tree	c . canInline () nullNotPermitted
Code	c . canInline () nullNotPermitted
Distance : 5

46
Tree	c . canInline () []
Code	c . canInline () []
Distance : 5

47
Tree	c . canInline () assertEquals
Code	c . canInline () assertEquals
Distance : 5

48
Tree	c . canInline () MathRuntimeException
Code	c . canInline () MathRuntimeException
Distance : 5

49
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

50
Tree	c . canInline () true
Code	c . canInline () true
Distance : 5

51
Tree	c . canInline () mode
Code	c . canInline () mode
Distance : 5

52
Tree	c . canInline () NUMBER_CONSTANT
Code	c . canInline () NUMBER_CONSTANT
Distance : 5

53
Tree	c . canInline () value
Code	c . canInline () value
Distance : 5

54
Tree	c . canInline () i
Code	c . canInline () i
Distance : 5

55
Tree	c . canInline () T
Code	c . canInline () T
Distance : 5

56
Tree	c . canInline () &&
Code	c . canInline () &&
Distance : 5

57
Tree	c . canInline () Override
Code	c . canInline () Override
Distance : 5

58
Tree	c . canInline () mock
Code	c . canInline () mock
Distance : 5

59
Tree	c . canInline () Object
Code	c . canInline () Object
Distance : 5

60
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

61
Tree	c . canInline () class
Code	c . canInline () class
Distance : 5

62
Tree	c . canInline () FastMath
Code	c . canInline () FastMath
Distance : 5

63
Tree	c . canInline () expected
Code	c . canInline () expected
Distance : 5

64
Tree	c . canInline () reportCodeChange
Code	c . canInline () reportCodeChange
Distance : 5

65
Tree	c . canInline () !=
Code	c . canInline () !=
Distance : 5

66
Tree	c . canInline () super
Code	c . canInline () super
Distance : 5

67
Tree	c . canInline () double
Code	c . canInline () double
Distance : 5

68
Tree	c . canInline () checkState
Code	c . canInline () checkState
Distance : 5

69
Tree	c . canInline () compiler
Code	c . canInline () compiler
Distance : 5

70
Tree	c . canInline () String
Code	c . canInline () String
Distance : 5

71
Tree	c . canInline () IllegalArgumentException
Code	c . canInline () IllegalArgumentException
Distance : 5

72
Tree	c . canInline () public
Code	c . canInline () public
Distance : 5

73
Tree	c . canInline () STRING_CONSTANT
Code	c . canInline () STRING_CONSTANT
Distance : 5

74
Tree	c . canInline () ]
Code	c . canInline () ]
Distance : 5

75
Tree	c . canInline () new
Code	c . canInline () new
Distance : 5

76
Tree	c . canInline () >
Code	c . canInline () >
Distance : 5

77
Tree	c . canInline () null
Code	c . canInline () null
Distance : 5

78
Tree	c . canInline () +
Code	c . canInline () +
Distance : 5

79
Tree	c . canInline () ,
Code	c . canInline () ,
Distance : 5

80
Tree	c . canInline () .
Code	c . canInline () .
Distance : 5

81
Tree	c . canInline () )
Code	c . canInline () )
Distance : 4

82
Tree	c . canInline () ;
Code	c . canInline () ;
Distance : 5

83
Tree	c . canInline () [
Code	c . canInline () [
Distance : 5

84
Tree	c . canInline () <s>
Code	c . canInline () <s>
Distance : 5

85
Tree	c . canInline () (
Code	c . canInline () (
Distance : 5

86
Tree	c . canInline () <blank>
Code	c . canInline () <blank>
Distance : 5

87
Tree	c . canInline () {
Code	c . canInline () {
Distance : 5

88
Tree	c . canInline () ()
Code	c . canInline () ()
Distance : 5

89
Tree	c . canInline () }
Code	c . canInline () }
Distance : 5

90
Tree	c . canInline () =
Code	c . canInline () =
Distance : 5

91
Tree	c . canInline () final
Code	c . canInline () final
Distance : 5

92
Tree	c . canInline () this
Code	c . canInline () this
Distance : 5

93
Tree	c . canInline () <
Code	c . canInline () <
Distance : 5

94
Tree	c . canInline () if
Code	c . canInline () if
Distance : 5

95
Tree	c . canInline () c
Code	c . canInline () c
Distance : 5

96
Tree	c . canInline () e
Code	c . canInline () e
Distance : 5

97
Tree	c . canInline () n
Code	c . canInline () n
Distance : 5

98
Tree	c . canInline () return
Code	c . canInline () return
Distance : 5

99
Tree	c . canInline () {}
Code	c . canInline () {}
Distance : 5

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; void
Code	int len = NUMBER_CONSTANT * thisBuf.length ; void
Distance : 6

1
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; assertEquals
Code	int len = NUMBER_CONSTANT * thisBuf.length ; assertEquals
Distance : 6

2
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; &&
Code	int len = NUMBER_CONSTANT * thisBuf.length ; &&
Distance : 6

3
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; i
Code	int len = NUMBER_CONSTANT * thisBuf.length ; i
Distance : 6

4
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; !=
Code	int len = NUMBER_CONSTANT * thisBuf.length ; !=
Distance : 6

5
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; checkState
Code	int len = NUMBER_CONSTANT * thisBuf.length ; checkState
Distance : 6

6
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; super
Code	int len = NUMBER_CONSTANT * thisBuf.length ; super
Distance : 6

7
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; int
Code	int len = NUMBER_CONSTANT * thisBuf.length ; int
Distance : 6

8
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; test
Code	int len = NUMBER_CONSTANT * thisBuf.length ; test
Distance : 6

9
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; false
Code	int len = NUMBER_CONSTANT * thisBuf.length ; false
Distance : 6

10
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; double
Code	int len = NUMBER_CONSTANT * thisBuf.length ; double
Distance : 6

11
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; Preconditions
Code	int len = NUMBER_CONSTANT * thisBuf.length ; Preconditions
Distance : 6

12
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; @
Code	int len = NUMBER_CONSTANT * thisBuf.length ; @
Distance : 6

13
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; value
Code	int len = NUMBER_CONSTANT * thisBuf.length ; value
Distance : 6

14
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; [
Code	int len = NUMBER_CONSTANT * thisBuf.length ; [
Distance : 6

15
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; -
Code	int len = NUMBER_CONSTANT * thisBuf.length ; -
Distance : 6

16
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ]
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ]
Distance : 6

17
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; true
Code	int len = NUMBER_CONSTANT * thisBuf.length ; true
Distance : 6

18
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; paint
Code	int len = NUMBER_CONSTANT * thisBuf.length ; paint
Distance : 6

19
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; m
Code	int len = NUMBER_CONSTANT * thisBuf.length ; m
Distance : 6

20
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; result
Code	int len = NUMBER_CONSTANT * thisBuf.length ; result
Distance : 6

21
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; T
Code	int len = NUMBER_CONSTANT * thisBuf.length ; T
Distance : 6

22
Tree	void size = NUMBER_CONSTANT * thisBuf.length ;
Code	void size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

23
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; boolean
Code	int len = NUMBER_CONSTANT * thisBuf.length ; boolean
Distance : 6

24
Tree	short size = NUMBER_CONSTANT * thisBuf.length ;
Code	short size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

25
Tree	byte size = NUMBER_CONSTANT * thisBuf.length ;
Code	byte size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

26
Tree	long len = NUMBER_CONSTANT * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

27
Tree	char len = NUMBER_CONSTANT * thisBuf.length ;
Code	char len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

28
Tree	boolean len = NUMBER_CONSTANT * thisBuf.length ;
Code	boolean len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

29
Tree	byte len = NUMBER_CONSTANT * thisBuf.length ;
Code	byte len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

30
Tree	int strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	int strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

31
Tree	float len = NUMBER_CONSTANT * thisBuf.length ;
Code	float len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

32
Tree	short len = NUMBER_CONSTANT * thisBuf.length ;
Code	short len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

33
Tree	double strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	double strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

34
Tree	void len = NUMBER_CONSTANT * thisBuf.length ;
Code	void len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

35
Tree	long strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	long strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

36
Tree	char strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	char strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

37
Tree	boolean strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	boolean strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

38
Tree	byte strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	byte strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

39
Tree	int size = NUMBER_CONSTANT * thisBuf.length ;
Code	int size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

40
Tree	float strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	float strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

41
Tree	short strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	short strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

42
Tree	double size = NUMBER_CONSTANT * thisBuf.length ;
Code	double size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

43
Tree	void strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	void strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

44
Tree	long size = NUMBER_CONSTANT * thisBuf.length ;
Code	long size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

45
Tree	char size = NUMBER_CONSTANT * thisBuf.length ;
Code	char size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

46
Tree	boolean size = NUMBER_CONSTANT * thisBuf.length ;
Code	boolean size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

47
Tree	float size = NUMBER_CONSTANT * thisBuf.length ;
Code	float size = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

48
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ParamChecks
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ParamChecks
Distance : 6

49
Tree	int len = NUMBER_CONSTANT * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 5

50
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; Override
Code	int len = NUMBER_CONSTANT * thisBuf.length ; Override
Distance : 6

51
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; !
Code	int len = NUMBER_CONSTANT * thisBuf.length ; !
Distance : 6

52
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; <s>
Code	int len = NUMBER_CONSTANT * thisBuf.length ; <s>
Distance : 6

53
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; <blank>
Code	int len = NUMBER_CONSTANT * thisBuf.length ; <blank>
Distance : 6

54
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; (
Code	int len = NUMBER_CONSTANT * thisBuf.length ; (
Distance : 6

55
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ;
Distance : 5

56
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; )
Code	int len = NUMBER_CONSTANT * thisBuf.length ; )
Distance : 6

57
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; throw
Code	int len = NUMBER_CONSTANT * thisBuf.length ; throw
Distance : 6

58
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ==
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ==
Distance : 6

59
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; []
Code	int len = NUMBER_CONSTANT * thisBuf.length ; []
Distance : 6

60
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; +
Code	int len = NUMBER_CONSTANT * thisBuf.length ; +
Distance : 6

61
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; e
Code	int len = NUMBER_CONSTANT * thisBuf.length ; e
Distance : 6

62
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; null
Code	int len = NUMBER_CONSTANT * thisBuf.length ; null
Distance : 6

63
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; String
Code	int len = NUMBER_CONSTANT * thisBuf.length ; String
Distance : 6

64
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; n
Code	int len = NUMBER_CONSTANT * thisBuf.length ; n
Distance : 6

65
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; compiler
Code	int len = NUMBER_CONSTANT * thisBuf.length ; compiler
Distance : 6

66
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; catch
Code	int len = NUMBER_CONSTANT * thisBuf.length ; catch
Distance : 6

67
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; STRING_CONSTANT
Code	int len = NUMBER_CONSTANT * thisBuf.length ; STRING_CONSTANT
Distance : 6

68
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; =
Code	int len = NUMBER_CONSTANT * thisBuf.length ; =
Distance : 6

69
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; {
Code	int len = NUMBER_CONSTANT * thisBuf.length ; {
Distance : 6

70
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; .
Code	int len = NUMBER_CONSTANT * thisBuf.length ; .
Distance : 6

71
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; public
Code	int len = NUMBER_CONSTANT * thisBuf.length ; public
Distance : 6

72
Tree	double len = NUMBER_CONSTANT * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

73
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; nullNotPermitted
Code	int len = NUMBER_CONSTANT * thisBuf.length ; nullNotPermitted
Distance : 6

74
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; }
Code	int len = NUMBER_CONSTANT * thisBuf.length ; }
Distance : 6

75
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ;
Distance : 5

76
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; Object
Code	int len = NUMBER_CONSTANT * thisBuf.length ; Object
Distance : 6

77
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ,
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ,
Distance : 6

78
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; {}
Code	int len = NUMBER_CONSTANT * thisBuf.length ; {}
Distance : 6

79
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; mode
Code	int len = NUMBER_CONSTANT * thisBuf.length ; mode
Distance : 6

80
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; MathRuntimeException
Code	int len = NUMBER_CONSTANT * thisBuf.length ; MathRuntimeException
Distance : 6

81
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; mock
Code	int len = NUMBER_CONSTANT * thisBuf.length ; mock
Distance : 6

82
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; Args
Code	int len = NUMBER_CONSTANT * thisBuf.length ; Args
Distance : 6

83
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; <>
Code	int len = NUMBER_CONSTANT * thisBuf.length ; <>
Distance : 6

84
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; f
Code	int len = NUMBER_CONSTANT * thisBuf.length ; f
Distance : 6

85
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; array
Code	int len = NUMBER_CONSTANT * thisBuf.length ; array
Distance : 6

86
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; fail
Code	int len = NUMBER_CONSTANT * thisBuf.length ; fail
Distance : 6

87
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; List
Code	int len = NUMBER_CONSTANT * thisBuf.length ; List
Distance : 6

88
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; try
Code	int len = NUMBER_CONSTANT * thisBuf.length ; try
Distance : 6

89
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; :
Code	int len = NUMBER_CONSTANT * thisBuf.length ; :
Distance : 6

90
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; >
Code	int len = NUMBER_CONSTANT * thisBuf.length ; >
Distance : 6

91
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; if
Code	int len = NUMBER_CONSTANT * thisBuf.length ; if
Distance : 6

92
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; final
Code	int len = NUMBER_CONSTANT * thisBuf.length ; final
Distance : 6

93
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; <
Code	int len = NUMBER_CONSTANT * thisBuf.length ; <
Distance : 6

94
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; NUMBER_CONSTANT
Code	int len = NUMBER_CONSTANT * thisBuf.length ; NUMBER_CONSTANT
Distance : 5

95
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; new
Code	int len = NUMBER_CONSTANT * thisBuf.length ; new
Distance : 6

96
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; return
Code	int len = NUMBER_CONSTANT * thisBuf.length ; return
Distance : 6

97
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; this
Code	int len = NUMBER_CONSTANT * thisBuf.length ; this
Distance : 6

98
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; ()
Code	int len = NUMBER_CONSTANT * thisBuf.length ; ()
Distance : 6

99
Tree	int len = NUMBER_CONSTANT * thisBuf.length ; class
Code	int len = NUMBER_CONSTANT * thisBuf.length ; class
Distance : 6

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT !=
Code	i > NUMBER_CONSTANT !=
Distance : 3

1
Tree	i > NUMBER_CONSTANT createIllegalArgumentException
Code	i > NUMBER_CONSTANT createIllegalArgumentException
Distance : 3

2
Tree	i > NUMBER_CONSTANT add
Code	i > NUMBER_CONSTANT add
Distance : 3

3
Tree	i > NUMBER_CONSTANT name
Code	i > NUMBER_CONSTANT name
Distance : 3

4
Tree	i > NUMBER_CONSTANT m
Code	i > NUMBER_CONSTANT m
Distance : 3

5
Tree	i > NUMBER_CONSTANT boolean
Code	i > NUMBER_CONSTANT boolean
Distance : 3

6
Tree	i > NUMBER_CONSTANT checkArgument
Code	i > NUMBER_CONSTANT checkArgument
Distance : 3

7
Tree	i > NUMBER_CONSTANT data
Code	i > NUMBER_CONSTANT data
Distance : 3

8
Tree	i > NUMBER_CONSTANT List
Code	i > NUMBER_CONSTANT List
Distance : 3

9
Tree	i > NUMBER_CONSTANT Args
Code	i > NUMBER_CONSTANT Args
Distance : 3

10
Tree	i > NUMBER_CONSTANT array
Code	i > NUMBER_CONSTANT array
Distance : 3

11
Tree	i > NUMBER_CONSTANT <>
Code	i > NUMBER_CONSTANT <>
Distance : 3

12
Tree	i > NUMBER_CONSTANT try
Code	i > NUMBER_CONSTANT try
Distance : 3

13
Tree	i > NUMBER_CONSTANT fail
Code	i > NUMBER_CONSTANT fail
Distance : 3

14
Tree	i > NUMBER_CONSTANT paint
Code	i > NUMBER_CONSTANT paint
Distance : 3

15
Tree	i > NUMBER_CONSTANT join
Code	i > NUMBER_CONSTANT join
Distance : 3

16
Tree	i > NUMBER_CONSTANT str
Code	i > NUMBER_CONSTANT str
Distance : 3

17
Tree	i > NUMBER_CONSTANT LINE_JOINER
Code	i > NUMBER_CONSTANT LINE_JOINER
Distance : 3

18
Tree	i > NUMBER_CONSTANT testSame
Code	i > NUMBER_CONSTANT testSame
Distance : 3

19
Tree	i > NUMBER_CONSTANT x
Code	i > NUMBER_CONSTANT x
Distance : 3

20
Tree	i > NUMBER_CONSTANT ArrayList
Code	i > NUMBER_CONSTANT ArrayList
Distance : 3

21
Tree	i > NUMBER_CONSTANT fireChangeEvent
Code	i > NUMBER_CONSTANT fireChangeEvent
Distance : 3

22
Tree	i > NUMBER_CONSTANT super
Code	i > NUMBER_CONSTANT super
Distance : 3

23
Tree	i > NUMBER_CONSTANT parent
Code	i > NUMBER_CONSTANT parent
Distance : 3

24
Tree	i > NUMBER_CONSTANT IllegalArgumentException
Code	i > NUMBER_CONSTANT IllegalArgumentException
Distance : 3

25
Tree	i > NUMBER_CONSTANT test
Code	i > NUMBER_CONSTANT test
Distance : 3

26
Tree	i > NUMBER_CONSTANT int
Code	i > NUMBER_CONSTANT int
Distance : 3

27
Tree	i > NUMBER_CONSTANT invocation
Code	i > NUMBER_CONSTANT invocation
Distance : 3

28
Tree	i > NUMBER_CONSTANT reportCodeChange
Code	i > NUMBER_CONSTANT reportCodeChange
Distance : 3

29
Tree	i > NUMBER_CONSTANT expected
Code	i > NUMBER_CONSTANT expected
Distance : 3

30
Tree	i > NUMBER_CONSTANT :
Code	i > NUMBER_CONSTANT :
Distance : 3

31
Tree	i > NUMBER_CONSTANT result
Code	i > NUMBER_CONSTANT result
Distance : 3

32
Tree	i > NUMBER_CONSTANT serialised
Code	i > NUMBER_CONSTANT serialised
Distance : 3

33
Tree	i > NUMBER_CONSTANT getInstance
Code	i > NUMBER_CONSTANT getInstance
Distance : 3

34
Tree	i > NUMBER_CONSTANT *
Code	i > NUMBER_CONSTANT *
Distance : 3

35
Tree	i > NUMBER_CONSTANT type
Code	i > NUMBER_CONSTANT type
Distance : 3

36
Tree	i > NUMBER_CONSTANT false
Code	i > NUMBER_CONSTANT false
Distance : 3

37
Tree	i > NUMBER_CONSTANT double
Code	i > NUMBER_CONSTANT double
Distance : 3

38
Tree	i > NUMBER_CONSTANT FastMath
Code	i > NUMBER_CONSTANT FastMath
Distance : 3

39
Tree	i > NUMBER_CONSTANT checkState
Code	i > NUMBER_CONSTANT checkState
Distance : 3

40
Tree	i > NUMBER_CONSTANT nullNotPermitted
Code	i > NUMBER_CONSTANT nullNotPermitted
Distance : 3

41
Tree	i > NUMBER_CONSTANT []
Code	i > NUMBER_CONSTANT []
Distance : 3

42
Tree	i > NUMBER_CONSTANT void
Code	i > NUMBER_CONSTANT void
Distance : 3

43
Tree	i > NUMBER_CONSTANT ==
Code	i > NUMBER_CONSTANT ==
Distance : 3

44
Tree	i > NUMBER_CONSTANT assertEquals
Code	i > NUMBER_CONSTANT assertEquals
Distance : 3

45
Tree	i > NUMBER_CONSTANT !
Code	i > NUMBER_CONSTANT !
Distance : 3

46
Tree	i > NUMBER_CONSTANT @
Code	i > NUMBER_CONSTANT @
Distance : 3

47
Tree	i > NUMBER_CONSTANT assertThat
Code	i > NUMBER_CONSTANT assertThat
Distance : 3

48
Tree	i > NUMBER_CONSTANT Override
Code	i > NUMBER_CONSTANT Override
Distance : 3

49
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

50
Tree	i > NUMBER_CONSTANT [
Code	i > NUMBER_CONSTANT [
Distance : 3

51
Tree	i > NUMBER_CONSTANT this
Code	i > NUMBER_CONSTANT this
Distance : 3

52
Tree	i > NUMBER_CONSTANT &&
Code	i > NUMBER_CONSTANT &&
Distance : 3

53
Tree	i > NUMBER_CONSTANT T
Code	i > NUMBER_CONSTANT T
Distance : 3

54
Tree	i > NUMBER_CONSTANT Preconditions
Code	i > NUMBER_CONSTANT Preconditions
Distance : 3

55
Tree	i > NUMBER_CONSTANT -
Code	i > NUMBER_CONSTANT -
Distance : 3

56
Tree	i > NUMBER_CONSTANT class
Code	i > NUMBER_CONSTANT class
Distance : 3

57
Tree	i > NUMBER_CONSTANT Object
Code	i > NUMBER_CONSTANT Object
Distance : 3

58
Tree	i > NUMBER_CONSTANT {}
Code	i > NUMBER_CONSTANT {}
Distance : 3

59
Tree	i > NUMBER_CONSTANT MathRuntimeException
Code	i > NUMBER_CONSTANT MathRuntimeException
Distance : 3

60
Tree	i > NUMBER_CONSTANT ParamChecks
Code	i > NUMBER_CONSTANT ParamChecks
Distance : 3

61
Tree	i > NUMBER_CONSTANT f
Code	i > NUMBER_CONSTANT f
Distance : 3

62
Tree	i > NUMBER_CONSTANT t
Code	i > NUMBER_CONSTANT t
Distance : 3

63
Tree	i > NUMBER_CONSTANT field
Code	i > NUMBER_CONSTANT field
Distance : 3

64
Tree	i > NUMBER_CONSTANT value
Code	i > NUMBER_CONSTANT value
Distance : 3

65
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 3

66
Tree	i > NUMBER_CONSTANT throw
Code	i > NUMBER_CONSTANT throw
Distance : 3

67
Tree	i > NUMBER_CONSTANT catch
Code	i > NUMBER_CONSTANT catch
Distance : 3

68
Tree	i > NUMBER_CONSTANT +
Code	i > NUMBER_CONSTANT +
Distance : 3

69
Tree	i > NUMBER_CONSTANT null
Code	i > NUMBER_CONSTANT null
Distance : 3

70
Tree	i > NUMBER_CONSTANT String
Code	i > NUMBER_CONSTANT String
Distance : 3

71
Tree	i > NUMBER_CONSTANT compiler
Code	i > NUMBER_CONSTANT compiler
Distance : 3

72
Tree	i > NUMBER_CONSTANT ]
Code	i > NUMBER_CONSTANT ]
Distance : 3

73
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

74
Tree	i > NUMBER_CONSTANT NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT NUMBER_CONSTANT
Distance : 3

75
Tree	i > NUMBER_CONSTANT true
Code	i > NUMBER_CONSTANT true
Distance : 3

76
Tree	i > NUMBER_CONSTANT return
Code	i > NUMBER_CONSTANT return
Distance : 3

77
Tree	i > NUMBER_CONSTANT <
Code	i > NUMBER_CONSTANT <
Distance : 3

78
Tree	i > NUMBER_CONSTANT e
Code	i > NUMBER_CONSTANT e
Distance : 3

79
Tree	i > NUMBER_CONSTANT n
Code	i > NUMBER_CONSTANT n
Distance : 3

80
Tree	i > NUMBER_CONSTANT {
Code	i > NUMBER_CONSTANT {
Distance : 3

81
Tree	i > NUMBER_CONSTANT ()
Code	i > NUMBER_CONSTANT ()
Distance : 3

82
Tree	i > NUMBER_CONSTANT ;
Code	i > NUMBER_CONSTANT ;
Distance : 3

83
Tree	i > NUMBER_CONSTANT )
Code	i > NUMBER_CONSTANT )
Distance : 3

84
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 3

85
Tree	i > NUMBER_CONSTANT if
Code	i > NUMBER_CONSTANT if
Distance : 3

86
Tree	i > NUMBER_CONSTANT <blank>
Code	i > NUMBER_CONSTANT <blank>
Distance : 3

87
Tree	i > NUMBER_CONSTANT (
Code	i > NUMBER_CONSTANT (
Distance : 3

88
Tree	i > NUMBER_CONSTANT =
Code	i > NUMBER_CONSTANT =
Distance : 3

89
Tree	i > NUMBER_CONSTANT }
Code	i > NUMBER_CONSTANT }
Distance : 3

90
Tree	i > NUMBER_CONSTANT .
Code	i > NUMBER_CONSTANT .
Distance : 3

91
Tree	i > NUMBER_CONSTANT ,
Code	i > NUMBER_CONSTANT ,
Distance : 3

92
Tree	i > NUMBER_CONSTANT STRING_CONSTANT
Code	i > NUMBER_CONSTANT STRING_CONSTANT
Distance : 3

93
Tree	i > NUMBER_CONSTANT new
Code	i > NUMBER_CONSTANT new
Distance : 3

94
Tree	i > NUMBER_CONSTANT >
Code	i > NUMBER_CONSTANT >
Distance : 3

95
Tree	i > NUMBER_CONSTANT public
Code	i > NUMBER_CONSTANT public
Distance : 3

96
Tree	i > NUMBER_CONSTANT mode
Code	i > NUMBER_CONSTANT mode
Distance : 3

97
Tree	i > NUMBER_CONSTANT <s>
Code	i > NUMBER_CONSTANT <s>
Distance : 3

98
Tree	i > NUMBER_CONSTANT final
Code	i > NUMBER_CONSTANT final
Distance : 3

99
Tree	i > NUMBER_CONSTANT mock
Code	i > NUMBER_CONSTANT mock
Distance : 3

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT !=
Code	i > NUMBER_CONSTANT !=
Distance : 4

1
Tree	i > NUMBER_CONSTANT createIllegalArgumentException
Code	i > NUMBER_CONSTANT createIllegalArgumentException
Distance : 4

2
Tree	i > NUMBER_CONSTANT add
Code	i > NUMBER_CONSTANT add
Distance : 4

3
Tree	i > NUMBER_CONSTANT name
Code	i > NUMBER_CONSTANT name
Distance : 4

4
Tree	i > NUMBER_CONSTANT m
Code	i > NUMBER_CONSTANT m
Distance : 4

5
Tree	i > NUMBER_CONSTANT boolean
Code	i > NUMBER_CONSTANT boolean
Distance : 4

6
Tree	i > NUMBER_CONSTANT checkArgument
Code	i > NUMBER_CONSTANT checkArgument
Distance : 4

7
Tree	i > NUMBER_CONSTANT data
Code	i > NUMBER_CONSTANT data
Distance : 4

8
Tree	i > NUMBER_CONSTANT List
Code	i > NUMBER_CONSTANT List
Distance : 4

9
Tree	i > NUMBER_CONSTANT Args
Code	i > NUMBER_CONSTANT Args
Distance : 4

10
Tree	i > NUMBER_CONSTANT array
Code	i > NUMBER_CONSTANT array
Distance : 4

11
Tree	i > NUMBER_CONSTANT <>
Code	i > NUMBER_CONSTANT <>
Distance : 4

12
Tree	i > NUMBER_CONSTANT try
Code	i > NUMBER_CONSTANT try
Distance : 4

13
Tree	i > NUMBER_CONSTANT fail
Code	i > NUMBER_CONSTANT fail
Distance : 4

14
Tree	i > NUMBER_CONSTANT paint
Code	i > NUMBER_CONSTANT paint
Distance : 4

15
Tree	i > NUMBER_CONSTANT join
Code	i > NUMBER_CONSTANT join
Distance : 4

16
Tree	i > NUMBER_CONSTANT str
Code	i > NUMBER_CONSTANT str
Distance : 4

17
Tree	i > NUMBER_CONSTANT LINE_JOINER
Code	i > NUMBER_CONSTANT LINE_JOINER
Distance : 4

18
Tree	i > NUMBER_CONSTANT testSame
Code	i > NUMBER_CONSTANT testSame
Distance : 4

19
Tree	i > NUMBER_CONSTANT x
Code	i > NUMBER_CONSTANT x
Distance : 4

20
Tree	i > NUMBER_CONSTANT ArrayList
Code	i > NUMBER_CONSTANT ArrayList
Distance : 4

21
Tree	i > NUMBER_CONSTANT fireChangeEvent
Code	i > NUMBER_CONSTANT fireChangeEvent
Distance : 4

22
Tree	i > NUMBER_CONSTANT super
Code	i > NUMBER_CONSTANT super
Distance : 4

23
Tree	i > NUMBER_CONSTANT parent
Code	i > NUMBER_CONSTANT parent
Distance : 4

24
Tree	i > NUMBER_CONSTANT IllegalArgumentException
Code	i > NUMBER_CONSTANT IllegalArgumentException
Distance : 4

25
Tree	i > NUMBER_CONSTANT test
Code	i > NUMBER_CONSTANT test
Distance : 4

26
Tree	i > NUMBER_CONSTANT int
Code	i > NUMBER_CONSTANT int
Distance : 4

27
Tree	i > NUMBER_CONSTANT invocation
Code	i > NUMBER_CONSTANT invocation
Distance : 4

28
Tree	i > NUMBER_CONSTANT reportCodeChange
Code	i > NUMBER_CONSTANT reportCodeChange
Distance : 4

29
Tree	i > NUMBER_CONSTANT expected
Code	i > NUMBER_CONSTANT expected
Distance : 4

30
Tree	i > NUMBER_CONSTANT :
Code	i > NUMBER_CONSTANT :
Distance : 4

31
Tree	i > NUMBER_CONSTANT result
Code	i > NUMBER_CONSTANT result
Distance : 4

32
Tree	i > NUMBER_CONSTANT serialised
Code	i > NUMBER_CONSTANT serialised
Distance : 4

33
Tree	i > NUMBER_CONSTANT getInstance
Code	i > NUMBER_CONSTANT getInstance
Distance : 4

34
Tree	i > NUMBER_CONSTANT *
Code	i > NUMBER_CONSTANT *
Distance : 4

35
Tree	i > NUMBER_CONSTANT type
Code	i > NUMBER_CONSTANT type
Distance : 4

36
Tree	i > NUMBER_CONSTANT false
Code	i > NUMBER_CONSTANT false
Distance : 4

37
Tree	i > NUMBER_CONSTANT double
Code	i > NUMBER_CONSTANT double
Distance : 4

38
Tree	i > NUMBER_CONSTANT FastMath
Code	i > NUMBER_CONSTANT FastMath
Distance : 4

39
Tree	i > NUMBER_CONSTANT checkState
Code	i > NUMBER_CONSTANT checkState
Distance : 4

40
Tree	i > NUMBER_CONSTANT nullNotPermitted
Code	i > NUMBER_CONSTANT nullNotPermitted
Distance : 4

41
Tree	i > NUMBER_CONSTANT []
Code	i > NUMBER_CONSTANT []
Distance : 4

42
Tree	i > NUMBER_CONSTANT void
Code	i > NUMBER_CONSTANT void
Distance : 4

43
Tree	i > NUMBER_CONSTANT ==
Code	i > NUMBER_CONSTANT ==
Distance : 4

44
Tree	i > NUMBER_CONSTANT assertEquals
Code	i > NUMBER_CONSTANT assertEquals
Distance : 4

45
Tree	i > NUMBER_CONSTANT !
Code	i > NUMBER_CONSTANT !
Distance : 4

46
Tree	i > NUMBER_CONSTANT @
Code	i > NUMBER_CONSTANT @
Distance : 4

47
Tree	i > NUMBER_CONSTANT assertThat
Code	i > NUMBER_CONSTANT assertThat
Distance : 4

48
Tree	i > NUMBER_CONSTANT Override
Code	i > NUMBER_CONSTANT Override
Distance : 4

49
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

50
Tree	i > NUMBER_CONSTANT [
Code	i > NUMBER_CONSTANT [
Distance : 4

51
Tree	i > NUMBER_CONSTANT this
Code	i > NUMBER_CONSTANT this
Distance : 4

52
Tree	i > NUMBER_CONSTANT &&
Code	i > NUMBER_CONSTANT &&
Distance : 4

53
Tree	i > NUMBER_CONSTANT T
Code	i > NUMBER_CONSTANT T
Distance : 4

54
Tree	i > NUMBER_CONSTANT Preconditions
Code	i > NUMBER_CONSTANT Preconditions
Distance : 4

55
Tree	i > NUMBER_CONSTANT -
Code	i > NUMBER_CONSTANT -
Distance : 4

56
Tree	i > NUMBER_CONSTANT class
Code	i > NUMBER_CONSTANT class
Distance : 4

57
Tree	i > NUMBER_CONSTANT Object
Code	i > NUMBER_CONSTANT Object
Distance : 4

58
Tree	i > NUMBER_CONSTANT {}
Code	i > NUMBER_CONSTANT {}
Distance : 4

59
Tree	i > NUMBER_CONSTANT MathRuntimeException
Code	i > NUMBER_CONSTANT MathRuntimeException
Distance : 4

60
Tree	i > NUMBER_CONSTANT ParamChecks
Code	i > NUMBER_CONSTANT ParamChecks
Distance : 4

61
Tree	i > NUMBER_CONSTANT f
Code	i > NUMBER_CONSTANT f
Distance : 4

62
Tree	i > NUMBER_CONSTANT t
Code	i > NUMBER_CONSTANT t
Distance : 4

63
Tree	i > NUMBER_CONSTANT field
Code	i > NUMBER_CONSTANT field
Distance : 4

64
Tree	i > NUMBER_CONSTANT value
Code	i > NUMBER_CONSTANT value
Distance : 4

65
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 4

66
Tree	i > NUMBER_CONSTANT throw
Code	i > NUMBER_CONSTANT throw
Distance : 4

67
Tree	i > NUMBER_CONSTANT catch
Code	i > NUMBER_CONSTANT catch
Distance : 4

68
Tree	i > NUMBER_CONSTANT +
Code	i > NUMBER_CONSTANT +
Distance : 4

69
Tree	i > NUMBER_CONSTANT null
Code	i > NUMBER_CONSTANT null
Distance : 4

70
Tree	i > NUMBER_CONSTANT String
Code	i > NUMBER_CONSTANT String
Distance : 4

71
Tree	i > NUMBER_CONSTANT compiler
Code	i > NUMBER_CONSTANT compiler
Distance : 4

72
Tree	i > NUMBER_CONSTANT ]
Code	i > NUMBER_CONSTANT ]
Distance : 4

73
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

74
Tree	i > NUMBER_CONSTANT NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT NUMBER_CONSTANT
Distance : 4

75
Tree	i > NUMBER_CONSTANT true
Code	i > NUMBER_CONSTANT true
Distance : 4

76
Tree	i > NUMBER_CONSTANT return
Code	i > NUMBER_CONSTANT return
Distance : 4

77
Tree	i > NUMBER_CONSTANT <
Code	i > NUMBER_CONSTANT <
Distance : 4

78
Tree	i > NUMBER_CONSTANT e
Code	i > NUMBER_CONSTANT e
Distance : 4

79
Tree	i > NUMBER_CONSTANT n
Code	i > NUMBER_CONSTANT n
Distance : 4

80
Tree	i > NUMBER_CONSTANT {
Code	i > NUMBER_CONSTANT {
Distance : 4

81
Tree	i > NUMBER_CONSTANT ()
Code	i > NUMBER_CONSTANT ()
Distance : 4

82
Tree	i > NUMBER_CONSTANT ;
Code	i > NUMBER_CONSTANT ;
Distance : 4

83
Tree	i > NUMBER_CONSTANT )
Code	i > NUMBER_CONSTANT )
Distance : 4

84
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 4

85
Tree	i > NUMBER_CONSTANT if
Code	i > NUMBER_CONSTANT if
Distance : 4

86
Tree	i > NUMBER_CONSTANT <blank>
Code	i > NUMBER_CONSTANT <blank>
Distance : 4

87
Tree	i > NUMBER_CONSTANT (
Code	i > NUMBER_CONSTANT (
Distance : 4

88
Tree	i > NUMBER_CONSTANT =
Code	i > NUMBER_CONSTANT =
Distance : 4

89
Tree	i > NUMBER_CONSTANT }
Code	i > NUMBER_CONSTANT }
Distance : 4

90
Tree	i > NUMBER_CONSTANT .
Code	i > NUMBER_CONSTANT .
Distance : 3

91
Tree	i > NUMBER_CONSTANT ,
Code	i > NUMBER_CONSTANT ,
Distance : 4

92
Tree	i > NUMBER_CONSTANT STRING_CONSTANT
Code	i > NUMBER_CONSTANT STRING_CONSTANT
Distance : 4

93
Tree	i > NUMBER_CONSTANT new
Code	i > NUMBER_CONSTANT new
Distance : 4

94
Tree	i > NUMBER_CONSTANT >
Code	i > NUMBER_CONSTANT >
Distance : 4

95
Tree	i > NUMBER_CONSTANT public
Code	i > NUMBER_CONSTANT public
Distance : 4

96
Tree	i > NUMBER_CONSTANT mode
Code	i > NUMBER_CONSTANT mode
Distance : 4

97
Tree	i > NUMBER_CONSTANT <s>
Code	i > NUMBER_CONSTANT <s>
Distance : 4

98
Tree	i > NUMBER_CONSTANT final
Code	i > NUMBER_CONSTANT final
Distance : 4

99
Tree	i > NUMBER_CONSTANT mock
Code	i > NUMBER_CONSTANT mock
Distance : 4

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

1
Tree	{ str . getChars ( null , strLen , buffer , str ) ; }
Code	{ str . getChars ( null , strLen , buffer , str ) ; }
Distance : 3

2
Tree	{ str . getChars ( null , str , buffer , size ) ; }
Code	{ str . getChars ( null , str , buffer , size ) ; }
Distance : 2

3
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

4
Tree	{ str . getChars ( null , strLen , str , size ) ; }
Code	{ str . getChars ( null , strLen , str , size ) ; }
Distance : 3

5
Tree	{ str . getChars ( null , strLen , size , size ) ; }
Code	{ str . getChars ( null , strLen , size , size ) ; }
Distance : 3

6
Tree	{ str . getChars ( null , strLen , strLen , size ) ; }
Code	{ str . getChars ( null , strLen , strLen , size ) ; }
Distance : 3

7
Tree	{ str . getChars ( null , buffer , buffer , size ) ; }
Code	{ str . getChars ( null , buffer , buffer , size ) ; }
Distance : 2

8
Tree	{ str . getChars ( null , str , buffer , str ) ; }
Code	{ str . getChars ( null , str , buffer , str ) ; }
Distance : 3

9
Tree	{ size . getChars ( null , strLen , buffer , size ) ; }
Code	{ size . getChars ( null , strLen , buffer , size ) ; }
Distance : 3

10
Tree	{ str . getChars ( null , str , buffer , buffer ) ; }
Code	{ str . getChars ( null , str , buffer , buffer ) ; }
Distance : 3

11
Tree	{ strLen . getChars ( null , strLen , buffer , size ) ; }
Code	{ strLen . getChars ( null , strLen , buffer , size ) ; }
Distance : 3

12
Tree	{ str . getChars ( null , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( null , strLen , buffer , strLen ) ; }
Distance : 3

13
Tree	{ str . getChars ( null , str , str , size ) ; }
Code	{ str . getChars ( null , str , str , size ) ; }
Distance : 3

14
Tree	{ str . getChars ( null , strLen , str , str ) ; }
Code	{ str . getChars ( null , strLen , str , str ) ; }
Distance : 4

15
Tree	{ str . getChars ( null , strLen , str , buffer ) ; }
Code	{ str . getChars ( null , strLen , str , buffer ) ; }
Distance : 4

16
Tree	{ buffer . getChars ( null , strLen , buffer , size ) ; }
Code	{ buffer . getChars ( null , strLen , buffer , size ) ; }
Distance : 3

17
Tree	{ str . getChars ( null , str , size , size ) ; }
Code	{ str . getChars ( null , str , size , size ) ; }
Distance : 3

18
Tree	{ str . getChars ( super(); , strLen , buffer , size ) ; }
Code	{ str . getChars ( super(); , strLen , buffer , size ) ; }
Distance : 2

19
Tree	{ str . getChars ( null , strLen , size , str ) ; }
Code	{ str . getChars ( null , strLen , size , str ) ; }
Distance : 4

20
Tree	{ str . getChars ( null , strLen , size , buffer ) ; }
Code	{ str . getChars ( null , strLen , size , buffer ) ; }
Distance : 4

21
Tree	{ str . getChars ( null , size , buffer , size ) ; }
Code	{ str . getChars ( null , size , buffer , size ) ; }
Distance : 2

22
Tree	{ str . getChars ( null , strLen , strLen , str ) ; }
Code	{ str . getChars ( null , strLen , strLen , str ) ; }
Distance : 4

23
Tree	{ str . getChars ( null , str , strLen , size ) ; }
Code	{ str . getChars ( null , str , strLen , size ) ; }
Distance : 3

24
Tree	{ str . getChars ( return; , strLen , buffer , size ) ; }
Code	{ str . getChars ( return; , strLen , buffer , size ) ; }
Distance : 2

25
Tree	{ str . getChars ( null , strLen , strLen , buffer ) ; }
Code	{ str . getChars ( null , strLen , strLen , buffer ) ; }
Distance : 4

26
Tree	{ str . getChars ( null , buffer , buffer , str ) ; }
Code	{ str . getChars ( null , buffer , buffer , str ) ; }
Distance : 3

27
Tree	{ str . getChars ( null , buffer , buffer , buffer ) ; }
Code	{ str . getChars ( null , buffer , buffer , buffer ) ; }
Distance : 3

28
Tree	{ size . getChars ( null , strLen , buffer , str ) ; }
Code	{ size . getChars ( null , strLen , buffer , str ) ; }
Distance : 4

29
Tree	{ size . getChars ( null , str , buffer , size ) ; }
Code	{ size . getChars ( null , str , buffer , size ) ; }
Distance : 3

30
Tree	{ str . getChars ( null , buffer , str , size ) ; }
Code	{ str . getChars ( null , buffer , str , size ) ; }
Distance : 3

31
Tree	{ size . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ size . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 4

32
Tree	{ strLen . getChars ( null , strLen , buffer , str ) ; }
Code	{ strLen . getChars ( null , strLen , buffer , str ) ; }
Distance : 4

33
Tree	{ strLen . getChars ( null , str , buffer , size ) ; }
Code	{ strLen . getChars ( null , str , buffer , size ) ; }
Distance : 3

34
Tree	{ str . getChars ( null , str , buffer , strLen ) ; }
Code	{ str . getChars ( null , str , buffer , strLen ) ; }
Distance : 3

35
Tree	{ strLen . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ strLen . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 4

36
Tree	{ str . getChars ( null , str , str , str ) ; }
Code	{ str . getChars ( null , str , str , str ) ; }
Distance : 4

37
Tree	{ size . getChars ( null , strLen , str , size ) ; }
Code	{ size . getChars ( null , strLen , str , size ) ; }
Distance : 4

38
Tree	{ str . getChars ( null , str , str , buffer ) ; }
Code	{ str . getChars ( null , str , str , buffer ) ; }
Distance : 4

39
Tree	{ strLen . getChars ( null , strLen , str , size ) ; }
Code	{ strLen . getChars ( null , strLen , str , size ) ; }
Distance : 4

40
Tree	{ str . getChars ( null , strLen , str , strLen ) ; }
Code	{ str . getChars ( null , strLen , str , strLen ) ; }
Distance : 4

41
Tree	{ buffer . getChars ( null , strLen , buffer , str ) ; }
Code	{ buffer . getChars ( null , strLen , buffer , str ) ; }
Distance : 4

42
Tree	{ buffer . getChars ( null , str , buffer , size ) ; }
Code	{ buffer . getChars ( null , str , buffer , size ) ; }
Distance : 3

43
Tree	{ buffer . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ buffer . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 4

44
Tree	{ str . getChars ( break; , strLen , buffer , size ) ; }
Code	{ str . getChars ( break; , strLen , buffer , size ) ; }
Distance : 2

45
Tree	{ str . getChars ( null , buffer , size , size ) ; }
Code	{ str . getChars ( null , buffer , size , size ) ; }
Distance : 3

46
Tree	{ str . getChars ( continue; , strLen , buffer , size ) ; }
Code	{ str . getChars ( continue; , strLen , buffer , size ) ; }
Distance : 2

47
Tree	{ buffer . getChars ( null , strLen , str , size ) ; }
Code	{ buffer . getChars ( null , strLen , str , size ) ; }
Distance : 4

48
Tree	{ str . getChars ( null , str , size , str ) ; }
Code	{ str . getChars ( null , str , size , str ) ; }
Distance : 4

49
Tree	{ str . getChars ( super(); , strLen , buffer , str ) ; }
Code	{ str . getChars ( super(); , strLen , buffer , str ) ; }
Distance : 3

50
Tree	{ str . getChars ( super(); , str , buffer , size ) ; }
Code	{ str . getChars ( super(); , str , buffer , size ) ; }
Distance : 2

51
Tree	{ str . getChars ( null , str , size , buffer ) ; }
Code	{ str . getChars ( null , str , size , buffer ) ; }
Distance : 4

52
Tree	{ size . getChars ( null , strLen , size , size ) ; }
Code	{ size . getChars ( null , strLen , size , size ) ; }
Distance : 4

53
Tree	{ str . getChars ( super(); , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( super(); , strLen , buffer , buffer ) ; }
Distance : 3

54
Tree	{ str . getChars ( null , buffer , strLen , size ) ; }
Code	{ str . getChars ( null , buffer , strLen , size ) ; }
Distance : 3

55
Tree	{ str . getChars ( null , size , buffer , str ) ; }
Code	{ str . getChars ( null , size , buffer , str ) ; }
Distance : 3

56
Tree	{ str . getChars ( null , width , buffer , size ) ; }
Code	{ str . getChars ( null , width , buffer , size ) ; }
Distance : 1

57
Tree	{ strLen . getChars ( null , strLen , size , size ) ; }
Code	{ strLen . getChars ( null , strLen , size , size ) ; }
Distance : 4

58
Tree	{ str . getChars ( null , strLen , size , strLen ) ; }
Code	{ str . getChars ( null , strLen , size , strLen ) ; }
Distance : 4

59
Tree	{ str . getChars ( null , size , buffer , buffer ) ; }
Code	{ str . getChars ( null , size , buffer , buffer ) ; }
Distance : 3

60
Tree	{ str . getChars ( super(); , strLen , str , size ) ; }
Code	{ str . getChars ( super(); , strLen , str , size ) ; }
Distance : 3

61
Tree	{ str . getChars ( null , str , strLen , str ) ; }
Code	{ str . getChars ( null , str , strLen , str ) ; }
Distance : 4

62
Tree	{ size . getChars ( null , strLen , strLen , size ) ; }
Code	{ size . getChars ( null , strLen , strLen , size ) ; }
Distance : 4

63
Tree	{ str . getChars ( return; , strLen , buffer , str ) ; }
Code	{ str . getChars ( return; , strLen , buffer , str ) ; }
Distance : 3

64
Tree	{ str . getChars ( return; , str , buffer , size ) ; }
Code	{ str . getChars ( return; , str , buffer , size ) ; }
Distance : 2

65
Tree	{ str . getChars ( null , str , strLen , buffer ) ; }
Code	{ str . getChars ( null , str , strLen , buffer ) ; }
Distance : 4

66
Tree	{ str . getChars ( null , size , str , size ) ; }
Code	{ str . getChars ( null , size , str , size ) ; }
Distance : 3

67
Tree	{ str . getChars ( return; , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( return; , strLen , buffer , buffer ) ; }
Distance : 3

68
Tree	{ strLen . getChars ( null , strLen , strLen , size ) ; }
Code	{ strLen . getChars ( null , strLen , strLen , size ) ; }
Distance : 4

69
Tree	{ str . getChars ( null , strLen , strLen , strLen ) ; }
Code	{ str . getChars ( null , strLen , strLen , strLen ) ; }
Distance : 4

70
Tree	{ size . getChars ( null , buffer , buffer , size ) ; }
Code	{ size . getChars ( null , buffer , buffer , size ) ; }
Distance : 3

71
Tree	{ buffer . getChars ( null , strLen , size , size ) ; }
Code	{ buffer . getChars ( null , strLen , size , size ) ; }
Distance : 4

72
Tree	{ str . getChars ( return; , strLen , str , size ) ; }
Code	{ str . getChars ( return; , strLen , str , size ) ; }
Distance : 3

73
Tree	{ strLen . getChars ( null , buffer , buffer , size ) ; }
Code	{ strLen . getChars ( null , buffer , buffer , size ) ; }
Distance : 3

74
Tree	{ str . getChars ( null , buffer , buffer , strLen ) ; }
Code	{ str . getChars ( null , buffer , buffer , strLen ) ; }
Distance : 3

75
Tree	{ size . getChars ( null , str , buffer , str ) ; }
Code	{ size . getChars ( null , str , buffer , str ) ; }
Distance : 4

76
Tree	{ str . getChars ( null , strLen , buffer , width ) ; }
Code	{ str . getChars ( null , strLen , buffer , width ) ; }
Distance : 3

77
Tree	{ str . getChars ( null , strLen , width , size ) ; }
Code	{ str . getChars ( null , strLen , width , size ) ; }
Distance : 3

78
Tree	{ str . getChars ( super(); , strLen , size , size ) ; }
Code	{ str . getChars ( super(); , strLen , size , size ) ; }
Distance : 3

79
Tree	{ str . getChars ( null , buffer , str , str ) ; }
Code	{ str . getChars ( null , buffer , str , str ) ; }
Distance : 4

80
Tree	{ size . getChars ( null , str , buffer , buffer ) ; }
Code	{ size . getChars ( null , str , buffer , buffer ) ; }
Distance : 4

81
Tree	{ strLen . getChars ( null , str , buffer , str ) ; }
Code	{ strLen . getChars ( null , str , buffer , str ) ; }
Distance : 4

82
Tree	{ buffer . getChars ( null , strLen , strLen , size ) ; }
Code	{ buffer . getChars ( null , strLen , strLen , size ) ; }
Distance : 4

83
Tree	{ str . getChars ( null , buffer , str , buffer ) ; }
Code	{ str . getChars ( null , buffer , str , buffer ) ; }
Distance : 4

84
Tree	{ size . getChars ( null , strLen , buffer , strLen ) ; }
Code	{ size . getChars ( null , strLen , buffer , strLen ) ; }
Distance : 4

85
Tree	{ strLen . getChars ( null , str , buffer , buffer ) ; }
Code	{ strLen . getChars ( null , str , buffer , buffer ) ; }
Distance : 4

86
Tree	{ str . getChars ( null , size , size , size ) ; }
Code	{ str . getChars ( null , size , size , size ) ; }
Distance : 3

87
Tree	{ size . getChars ( null , str , str , size ) ; }
Code	{ size . getChars ( null , str , str , size ) ; }
Distance : 4

88
Tree	{ buffer . getChars ( null , buffer , buffer , size ) ; }
Code	{ buffer . getChars ( null , buffer , buffer , size ) ; }
Distance : 3

89
Tree	{ size . getChars ( null , strLen , str , str ) ; }
Code	{ size . getChars ( null , strLen , str , str ) ; }
Distance : 5

90
Tree	{ strLen . getChars ( null , strLen , buffer , strLen ) ; }
Code	{ strLen . getChars ( null , strLen , buffer , strLen ) ; }
Distance : 4

91
Tree	{ size . getChars ( null , strLen , str , buffer ) ; }
Code	{ size . getChars ( null , strLen , str , buffer ) ; }
Distance : 5

92
Tree	{ strLen . getChars ( null , str , str , size ) ; }
Code	{ strLen . getChars ( null , str , str , size ) ; }
Distance : 4

93
Tree	{ strLen . getChars ( null , strLen , str , str ) ; }
Code	{ strLen . getChars ( null , strLen , str , str ) ; }
Distance : 5

94
Tree	{ str . getChars ( return; , strLen , size , size ) ; }
Code	{ str . getChars ( return; , strLen , size , size ) ; }
Distance : 3

95
Tree	{ str . getChars ( null , str , str , strLen ) ; }
Code	{ str . getChars ( null , str , str , strLen ) ; }
Distance : 4

96
Tree	{ str . getChars ( super(); , strLen , strLen , size ) ; }
Code	{ str . getChars ( super(); , strLen , strLen , size ) ; }
Distance : 3

97
Tree	{ strLen . getChars ( null , strLen , str , buffer ) ; }
Code	{ strLen . getChars ( null , strLen , str , buffer ) ; }
Distance : 5

98
Tree	{ buffer . getChars ( null , str , buffer , str ) ; }
Code	{ buffer . getChars ( null , str , buffer , str ) ; }
Distance : 4

99
Tree	{ buffer . getChars ( null , str , buffer , buffer ) ; }
Code	{ buffer . getChars ( null , str , buffer , buffer ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } value
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } value
Distance : 3

1
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ParamChecks
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ParamChecks
Distance : 3

2
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } class
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } class
Distance : 3

3
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Override
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Override
Distance : 3

4
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ArrayList
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ArrayList
Distance : 3

5
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } IllegalArgumentException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } IllegalArgumentException
Distance : 3

6
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } FastMath
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } FastMath
Distance : 3

7
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } expected
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } expected
Distance : 3

8
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } reportCodeChange
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } reportCodeChange
Distance : 3

9
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } List
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } List
Distance : 3

10
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Args
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Args
Distance : 3

11
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } fail
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } fail
Distance : 3

12
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } try
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } try
Distance : 3

13
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } fireChangeEvent
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } fireChangeEvent
Distance : 3

14
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mock
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mock
Distance : 3

15
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getInstance
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getInstance
Distance : 3

16
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } serialised
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } serialised
Distance : 3

17
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } join
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } join
Distance : 3

18
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } paint
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } paint
Distance : 3

19
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } *
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } *
Distance : 3

20
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } type
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } type
Distance : 3

21
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } i
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } i
Distance : 3

22
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ==
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ==
Distance : 3

23
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Object
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Object
Distance : 3

24
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } void
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } void
Distance : 3

25
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } throw
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } throw
Distance : 3

26
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

27
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

28
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

29
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

30
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

31
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

32
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } super
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } super
Distance : 3

33
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } array
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } array
Distance : 3

34
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <>
Distance : 3

35
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } m
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } m
Distance : 3

36
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } boolean
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } boolean
Distance : 3

37
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } :
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } :
Distance : 3

38
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } result
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } result
Distance : 3

39
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } checkState
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } checkState
Distance : 3

40
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } double
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } double
Distance : 3

41
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } e
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } e
Distance : 3

42
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } !=
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } !=
Distance : 3

43
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } compiler
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } compiler
Distance : 3

44
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } String
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } String
Distance : 3

45
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } f
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } f
Distance : 3

46
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } n
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } n
Distance : 3

47
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } catch
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } catch
Distance : 3

48
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ]
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ]
Distance : 3

49
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

50
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Preconditions
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Preconditions
Distance : 3

51
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } final
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } final
Distance : 3

52
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

53
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } -
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } -
Distance : 3

54
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } null
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } null
Distance : 3

55
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mode
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mode
Distance : 3

56
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } true
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } true
Distance : 3

57
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {}
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {}
Distance : 3

58
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } MathRuntimeException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } MathRuntimeException
Distance : 3

59
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } T
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } T
Distance : 3

60
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } x
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } x
Distance : 3

61
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } parent
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } parent
Distance : 3

62
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } createIllegalArgumentException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } createIllegalArgumentException
Distance : 3

63
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } str
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } str
Distance : 3

64
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } LINE_JOINER
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } LINE_JOINER
Distance : 3

65
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } assertThat
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } assertThat
Distance : 3

66
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } invocation
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } invocation
Distance : 3

67
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } false
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } false
Distance : 3

68
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } int
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } int
Distance : 3

69
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } testSame
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } testSame
Distance : 3

70
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } &&
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } &&
Distance : 3

71
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } >
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } >
Distance : 3

72
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } NUMBER_CONSTANT
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } NUMBER_CONSTANT
Distance : 3

73
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } public
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } public
Distance : 3

74
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } this
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } this
Distance : 3

75
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <
Distance : 3

76
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } if
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } if
Distance : 3

77
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } (
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } (
Distance : 3

78
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } return
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } return
Distance : 3

79
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Distance : 3

80
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <blank>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <blank>
Distance : 3

81
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ;
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ;
Distance : 3

82
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <s>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <s>
Distance : 3

83
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } .
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } .
Distance : 3

84
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ,
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ,
Distance : 3

85
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } =
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } =
Distance : 3

86
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } }
Distance : 3

87
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ()
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ()
Distance : 3

88
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Distance : 3

89
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } new
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } new
Distance : 3

90
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } STRING_CONSTANT
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } STRING_CONSTANT
Distance : 3

91
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } )
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } )
Distance : 3

92
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } @
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } @
Distance : 3

93
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } test
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } test
Distance : 3

94
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } nullNotPermitted
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } nullNotPermitted
Distance : 3

95
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } []
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } []
Distance : 3

96
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } !
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } !
Distance : 3

97
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } assertEquals
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } assertEquals
Distance : 3

98
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } +
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } +
Distance : 3

99
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } [
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } [
Distance : 3

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( out , out , out ) ; } value
Code	{ escapeJavaStyleString ( out , out , out ) ; } value
Distance : 5

1
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ParamChecks
Code	{ escapeJavaStyleString ( out , out , out ) ; } ParamChecks
Distance : 5

2
Tree	{ escapeJavaStyleString ( out , out , out ) ; } class
Code	{ escapeJavaStyleString ( out , out , out ) ; } class
Distance : 5

3
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Override
Code	{ escapeJavaStyleString ( out , out , out ) ; } Override
Distance : 5

4
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ArrayList
Code	{ escapeJavaStyleString ( out , out , out ) ; } ArrayList
Distance : 5

5
Tree	{ escapeJavaStyleString ( out , out , out ) ; } IllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , out ) ; } IllegalArgumentException
Distance : 5

6
Tree	{ escapeJavaStyleString ( out , out , out ) ; } FastMath
Code	{ escapeJavaStyleString ( out , out , out ) ; } FastMath
Distance : 5

7
Tree	{ escapeJavaStyleString ( out , out , out ) ; } expected
Code	{ escapeJavaStyleString ( out , out , out ) ; } expected
Distance : 5

8
Tree	{ escapeJavaStyleString ( out , out , out ) ; } reportCodeChange
Code	{ escapeJavaStyleString ( out , out , out ) ; } reportCodeChange
Distance : 5

9
Tree	{ escapeJavaStyleString ( out , out , out ) ; } List
Code	{ escapeJavaStyleString ( out , out , out ) ; } List
Distance : 5

10
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Args
Code	{ escapeJavaStyleString ( out , out , out ) ; } Args
Distance : 5

11
Tree	{ escapeJavaStyleString ( out , out , out ) ; } fail
Code	{ escapeJavaStyleString ( out , out , out ) ; } fail
Distance : 5

12
Tree	{ escapeJavaStyleString ( out , out , out ) ; } try
Code	{ escapeJavaStyleString ( out , out , out ) ; } try
Distance : 5

13
Tree	{ escapeJavaStyleString ( out , out , out ) ; } fireChangeEvent
Code	{ escapeJavaStyleString ( out , out , out ) ; } fireChangeEvent
Distance : 5

14
Tree	{ escapeJavaStyleString ( out , out , out ) ; } mock
Code	{ escapeJavaStyleString ( out , out , out ) ; } mock
Distance : 5

15
Tree	{ escapeJavaStyleString ( out , out , out ) ; } getInstance
Code	{ escapeJavaStyleString ( out , out , out ) ; } getInstance
Distance : 5

16
Tree	{ escapeJavaStyleString ( out , out , out ) ; } serialised
Code	{ escapeJavaStyleString ( out , out , out ) ; } serialised
Distance : 5

17
Tree	{ escapeJavaStyleString ( out , out , out ) ; } join
Code	{ escapeJavaStyleString ( out , out , out ) ; } join
Distance : 5

18
Tree	{ escapeJavaStyleString ( out , out , out ) ; } paint
Code	{ escapeJavaStyleString ( out , out , out ) ; } paint
Distance : 5

19
Tree	{ escapeJavaStyleString ( out , out , out ) ; } *
Code	{ escapeJavaStyleString ( out , out , out ) ; } *
Distance : 5

20
Tree	{ escapeJavaStyleString ( out , out , out ) ; } type
Code	{ escapeJavaStyleString ( out , out , out ) ; } type
Distance : 5

21
Tree	{ escapeJavaStyleString ( out , out , out ) ; } i
Code	{ escapeJavaStyleString ( out , out , out ) ; } i
Distance : 5

22
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ==
Code	{ escapeJavaStyleString ( out , out , out ) ; } ==
Distance : 5

23
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Object
Code	{ escapeJavaStyleString ( out , out , out ) ; } Object
Distance : 5

24
Tree	{ escapeJavaStyleString ( out , out , out ) ; } void
Code	{ escapeJavaStyleString ( out , out , out ) ; } void
Distance : 5

25
Tree	{ escapeJavaStyleString ( out , out , out ) ; } throw
Code	{ escapeJavaStyleString ( out , out , out ) ; } throw
Distance : 5

26
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

27
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

28
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

29
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

30
Tree	{ escapeJavaStyleString ( str , str , out ) ; }
Code	{ escapeJavaStyleString ( str , str , out ) ; }
Distance : 4

31
Tree	{ escapeJavaStyleString ( str , str , str ) ; }
Code	{ escapeJavaStyleString ( str , str , str ) ; }
Distance : 4

32
Tree	{ escapeJavaStyleString ( out , out , out ) ; } super
Code	{ escapeJavaStyleString ( out , out , out ) ; } super
Distance : 5

33
Tree	{ escapeJavaStyleString ( out , out , out ) ; } array
Code	{ escapeJavaStyleString ( out , out , out ) ; } array
Distance : 5

34
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <>
Code	{ escapeJavaStyleString ( out , out , out ) ; } <>
Distance : 5

35
Tree	{ escapeJavaStyleString ( out , out , out ) ; } m
Code	{ escapeJavaStyleString ( out , out , out ) ; } m
Distance : 5

36
Tree	{ escapeJavaStyleString ( out , out , out ) ; } boolean
Code	{ escapeJavaStyleString ( out , out , out ) ; } boolean
Distance : 5

37
Tree	{ escapeJavaStyleString ( out , out , out ) ; } :
Code	{ escapeJavaStyleString ( out , out , out ) ; } :
Distance : 5

38
Tree	{ escapeJavaStyleString ( out , out , out ) ; } result
Code	{ escapeJavaStyleString ( out , out , out ) ; } result
Distance : 5

39
Tree	{ escapeJavaStyleString ( out , out , out ) ; } checkState
Code	{ escapeJavaStyleString ( out , out , out ) ; } checkState
Distance : 5

40
Tree	{ escapeJavaStyleString ( out , out , out ) ; } double
Code	{ escapeJavaStyleString ( out , out , out ) ; } double
Distance : 5

41
Tree	{ escapeJavaStyleString ( out , out , out ) ; } e
Code	{ escapeJavaStyleString ( out , out , out ) ; } e
Distance : 5

42
Tree	{ escapeJavaStyleString ( out , out , out ) ; } !=
Code	{ escapeJavaStyleString ( out , out , out ) ; } !=
Distance : 5

43
Tree	{ escapeJavaStyleString ( out , out , out ) ; } compiler
Code	{ escapeJavaStyleString ( out , out , out ) ; } compiler
Distance : 5

44
Tree	{ escapeJavaStyleString ( out , out , out ) ; } String
Code	{ escapeJavaStyleString ( out , out , out ) ; } String
Distance : 5

45
Tree	{ escapeJavaStyleString ( out , out , out ) ; } f
Code	{ escapeJavaStyleString ( out , out , out ) ; } f
Distance : 5

46
Tree	{ escapeJavaStyleString ( out , out , out ) ; } n
Code	{ escapeJavaStyleString ( out , out , out ) ; } n
Distance : 5

47
Tree	{ escapeJavaStyleString ( out , out , out ) ; } catch
Code	{ escapeJavaStyleString ( out , out , out ) ; } catch
Distance : 5

48
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ]
Code	{ escapeJavaStyleString ( out , out , out ) ; } ]
Distance : 5

49
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

50
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Preconditions
Code	{ escapeJavaStyleString ( out , out , out ) ; } Preconditions
Distance : 5

51
Tree	{ escapeJavaStyleString ( out , out , out ) ; } final
Code	{ escapeJavaStyleString ( out , out , out ) ; } final
Distance : 5

52
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

53
Tree	{ escapeJavaStyleString ( out , out , out ) ; } -
Code	{ escapeJavaStyleString ( out , out , out ) ; } -
Distance : 5

54
Tree	{ escapeJavaStyleString ( out , out , out ) ; } null
Code	{ escapeJavaStyleString ( out , out , out ) ; } null
Distance : 5

55
Tree	{ escapeJavaStyleString ( out , out , out ) ; } mode
Code	{ escapeJavaStyleString ( out , out , out ) ; } mode
Distance : 5

56
Tree	{ escapeJavaStyleString ( out , out , out ) ; } true
Code	{ escapeJavaStyleString ( out , out , out ) ; } true
Distance : 5

57
Tree	{ escapeJavaStyleString ( out , out , out ) ; } {}
Code	{ escapeJavaStyleString ( out , out , out ) ; } {}
Distance : 5

58
Tree	{ escapeJavaStyleString ( out , out , out ) ; } MathRuntimeException
Code	{ escapeJavaStyleString ( out , out , out ) ; } MathRuntimeException
Distance : 5

59
Tree	{ escapeJavaStyleString ( out , out , out ) ; } T
Code	{ escapeJavaStyleString ( out , out , out ) ; } T
Distance : 5

60
Tree	{ escapeJavaStyleString ( out , out , out ) ; } x
Code	{ escapeJavaStyleString ( out , out , out ) ; } x
Distance : 5

61
Tree	{ escapeJavaStyleString ( out , out , out ) ; } parent
Code	{ escapeJavaStyleString ( out , out , out ) ; } parent
Distance : 5

62
Tree	{ escapeJavaStyleString ( out , out , out ) ; } createIllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , out ) ; } createIllegalArgumentException
Distance : 5

63
Tree	{ escapeJavaStyleString ( out , out , out ) ; } str
Code	{ escapeJavaStyleString ( out , out , out ) ; } str
Distance : 5

64
Tree	{ escapeJavaStyleString ( out , out , out ) ; } LINE_JOINER
Code	{ escapeJavaStyleString ( out , out , out ) ; } LINE_JOINER
Distance : 5

65
Tree	{ escapeJavaStyleString ( out , out , out ) ; } assertThat
Code	{ escapeJavaStyleString ( out , out , out ) ; } assertThat
Distance : 5

66
Tree	{ escapeJavaStyleString ( out , out , out ) ; } invocation
Code	{ escapeJavaStyleString ( out , out , out ) ; } invocation
Distance : 5

67
Tree	{ escapeJavaStyleString ( out , out , out ) ; } false
Code	{ escapeJavaStyleString ( out , out , out ) ; } false
Distance : 5

68
Tree	{ escapeJavaStyleString ( out , out , out ) ; } int
Code	{ escapeJavaStyleString ( out , out , out ) ; } int
Distance : 5

69
Tree	{ escapeJavaStyleString ( out , out , out ) ; } testSame
Code	{ escapeJavaStyleString ( out , out , out ) ; } testSame
Distance : 5

70
Tree	{ escapeJavaStyleString ( out , out , out ) ; } &&
Code	{ escapeJavaStyleString ( out , out , out ) ; } &&
Distance : 5

71
Tree	{ escapeJavaStyleString ( out , out , out ) ; } >
Code	{ escapeJavaStyleString ( out , out , out ) ; } >
Distance : 5

72
Tree	{ escapeJavaStyleString ( out , out , out ) ; } NUMBER_CONSTANT
Code	{ escapeJavaStyleString ( out , out , out ) ; } NUMBER_CONSTANT
Distance : 5

73
Tree	{ escapeJavaStyleString ( out , out , out ) ; } public
Code	{ escapeJavaStyleString ( out , out , out ) ; } public
Distance : 5

74
Tree	{ escapeJavaStyleString ( out , out , out ) ; } this
Code	{ escapeJavaStyleString ( out , out , out ) ; } this
Distance : 5

75
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <
Code	{ escapeJavaStyleString ( out , out , out ) ; } <
Distance : 5

76
Tree	{ escapeJavaStyleString ( out , out , out ) ; } if
Code	{ escapeJavaStyleString ( out , out , out ) ; } if
Distance : 5

77
Tree	{ escapeJavaStyleString ( out , out , out ) ; } (
Code	{ escapeJavaStyleString ( out , out , out ) ; } (
Distance : 5

78
Tree	{ escapeJavaStyleString ( out , out , out ) ; } return
Code	{ escapeJavaStyleString ( out , out , out ) ; } return
Distance : 5

79
Tree	{ escapeJavaStyleString ( out , out , out ) ; } {
Code	{ escapeJavaStyleString ( out , out , out ) ; } {
Distance : 5

80
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <blank>
Code	{ escapeJavaStyleString ( out , out , out ) ; } <blank>
Distance : 5

81
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ;
Code	{ escapeJavaStyleString ( out , out , out ) ; } ;
Distance : 5

82
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <s>
Code	{ escapeJavaStyleString ( out , out , out ) ; } <s>
Distance : 5

83
Tree	{ escapeJavaStyleString ( out , out , out ) ; } .
Code	{ escapeJavaStyleString ( out , out , out ) ; } .
Distance : 5

84
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ,
Code	{ escapeJavaStyleString ( out , out , out ) ; } ,
Distance : 5

85
Tree	{ escapeJavaStyleString ( out , out , out ) ; } =
Code	{ escapeJavaStyleString ( out , out , out ) ; } =
Distance : 5

86
Tree	{ escapeJavaStyleString ( out , out , out ) ; } }
Code	{ escapeJavaStyleString ( out , out , out ) ; } }
Distance : 5

87
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ()
Code	{ escapeJavaStyleString ( out , out , out ) ; } ()
Distance : 5

88
Tree	{ escapeJavaStyleString ( out , out , out ) ; } {
Code	{ escapeJavaStyleString ( out , out , out ) ; } {
Distance : 5

89
Tree	{ escapeJavaStyleString ( out , out , out ) ; } new
Code	{ escapeJavaStyleString ( out , out , out ) ; } new
Distance : 5

90
Tree	{ escapeJavaStyleString ( out , out , out ) ; } STRING_CONSTANT
Code	{ escapeJavaStyleString ( out , out , out ) ; } STRING_CONSTANT
Distance : 5

91
Tree	{ escapeJavaStyleString ( out , out , out ) ; } )
Code	{ escapeJavaStyleString ( out , out , out ) ; } )
Distance : 5

92
Tree	{ escapeJavaStyleString ( out , out , out ) ; } @
Code	{ escapeJavaStyleString ( out , out , out ) ; } @
Distance : 5

93
Tree	{ escapeJavaStyleString ( out , out , out ) ; } test
Code	{ escapeJavaStyleString ( out , out , out ) ; } test
Distance : 5

94
Tree	{ escapeJavaStyleString ( out , out , out ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , out , out ) ; } nullNotPermitted
Distance : 5

95
Tree	{ escapeJavaStyleString ( out , out , out ) ; } []
Code	{ escapeJavaStyleString ( out , out , out ) ; } []
Distance : 5

96
Tree	{ escapeJavaStyleString ( out , out , out ) ; } !
Code	{ escapeJavaStyleString ( out , out , out ) ; } !
Distance : 5

97
Tree	{ escapeJavaStyleString ( out , out , out ) ; } assertEquals
Code	{ escapeJavaStyleString ( out , out , out ) ; } assertEquals
Distance : 5

98
Tree	{ escapeJavaStyleString ( out , out , out ) ; } +
Code	{ escapeJavaStyleString ( out , out , out ) ; } +
Distance : 5

99
Tree	{ escapeJavaStyleString ( out , out , out ) ; } [
Code	{ escapeJavaStyleString ( out , out , out ) ; } [
Distance : 5

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return escapeJavaStyleString ( str , false ) ; } !=
Code	{ return escapeJavaStyleString ( str , false ) ; } !=
Distance : 4

1
Tree	{ return escapeJavaStyleString ( str , false ) ; } createIllegalArgumentException
Code	{ return escapeJavaStyleString ( str , false ) ; } createIllegalArgumentException
Distance : 4

2
Tree	{ return escapeJavaStyleString ( str , false ) ; } add
Code	{ return escapeJavaStyleString ( str , false ) ; } add
Distance : 4

3
Tree	{ return escapeJavaStyleString ( str , false ) ; } name
Code	{ return escapeJavaStyleString ( str , false ) ; } name
Distance : 4

4
Tree	{ return escapeJavaStyleString ( str , false ) ; } m
Code	{ return escapeJavaStyleString ( str , false ) ; } m
Distance : 4

5
Tree	{ return escapeJavaStyleString ( str , false ) ; } boolean
Code	{ return escapeJavaStyleString ( str , false ) ; } boolean
Distance : 4

6
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkArgument
Code	{ return escapeJavaStyleString ( str , false ) ; } checkArgument
Distance : 4

7
Tree	{ return escapeJavaStyleString ( str , false ) ; } data
Code	{ return escapeJavaStyleString ( str , false ) ; } data
Distance : 4

8
Tree	{ return escapeJavaStyleString ( str , false ) ; } List
Code	{ return escapeJavaStyleString ( str , false ) ; } List
Distance : 4

9
Tree	{ return escapeJavaStyleString ( str , false ) ; } Args
Code	{ return escapeJavaStyleString ( str , false ) ; } Args
Distance : 4

10
Tree	{ return escapeJavaStyleString ( str , false ) ; } array
Code	{ return escapeJavaStyleString ( str , false ) ; } array
Distance : 4

11
Tree	{ return escapeJavaStyleString ( str , false ) ; } <>
Code	{ return escapeJavaStyleString ( str , false ) ; } <>
Distance : 4

12
Tree	{ return escapeJavaStyleString ( str , false ) ; } try
Code	{ return escapeJavaStyleString ( str , false ) ; } try
Distance : 4

13
Tree	{ return escapeJavaStyleString ( str , false ) ; } fail
Code	{ return escapeJavaStyleString ( str , false ) ; } fail
Distance : 4

14
Tree	{ return escapeJavaStyleString ( str , false ) ; } paint
Code	{ return escapeJavaStyleString ( str , false ) ; } paint
Distance : 4

15
Tree	{ return escapeJavaStyleString ( str , false ) ; } join
Code	{ return escapeJavaStyleString ( str , false ) ; } join
Distance : 4

16
Tree	{ return escapeJavaStyleString ( str , false ) ; } str
Code	{ return escapeJavaStyleString ( str , false ) ; } str
Distance : 4

17
Tree	{ return escapeJavaStyleString ( str , false ) ; } LINE_JOINER
Code	{ return escapeJavaStyleString ( str , false ) ; } LINE_JOINER
Distance : 4

18
Tree	{ return escapeJavaStyleString ( str , false ) ; } testSame
Code	{ return escapeJavaStyleString ( str , false ) ; } testSame
Distance : 4

19
Tree	{ return escapeJavaStyleString ( str , false ) ; } x
Code	{ return escapeJavaStyleString ( str , false ) ; } x
Distance : 4

20
Tree	{ return escapeJavaStyleString ( str , false ) ; } ArrayList
Code	{ return escapeJavaStyleString ( str , false ) ; } ArrayList
Distance : 4

21
Tree	{ return escapeJavaStyleString ( str , false ) ; } fireChangeEvent
Code	{ return escapeJavaStyleString ( str , false ) ; } fireChangeEvent
Distance : 4

22
Tree	{ return escapeJavaStyleString ( str , false ) ; } super
Code	{ return escapeJavaStyleString ( str , false ) ; } super
Distance : 4

23
Tree	{ return escapeJavaStyleString ( str , false ) ; } parent
Code	{ return escapeJavaStyleString ( str , false ) ; } parent
Distance : 4

24
Tree	{ return escapeJavaStyleString ( str , false ) ; } IllegalArgumentException
Code	{ return escapeJavaStyleString ( str , false ) ; } IllegalArgumentException
Distance : 4

25
Tree	{ return escapeJavaStyleString ( str , false ) ; } test
Code	{ return escapeJavaStyleString ( str , false ) ; } test
Distance : 4

26
Tree	{ return escapeJavaStyleString ( str , false ) ; } int
Code	{ return escapeJavaStyleString ( str , false ) ; } int
Distance : 4

27
Tree	{ return escapeJavaStyleString ( str , false ) ; } invocation
Code	{ return escapeJavaStyleString ( str , false ) ; } invocation
Distance : 4

28
Tree	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Code	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Distance : 4

29
Tree	{ return escapeJavaStyleString ( str , false ) ; } expected
Code	{ return escapeJavaStyleString ( str , false ) ; } expected
Distance : 4

30
Tree	{ return escapeJavaStyleString ( str , false ) ; } :
Code	{ return escapeJavaStyleString ( str , false ) ; } :
Distance : 4

31
Tree	{ return escapeJavaStyleString ( str , false ) ; } result
Code	{ return escapeJavaStyleString ( str , false ) ; } result
Distance : 4

32
Tree	{ return escapeJavaStyleString ( str , false ) ; } serialised
Code	{ return escapeJavaStyleString ( str , false ) ; } serialised
Distance : 4

33
Tree	{ return escapeJavaStyleString ( str , false ) ; } getInstance
Code	{ return escapeJavaStyleString ( str , false ) ; } getInstance
Distance : 4

34
Tree	{ return escapeJavaStyleString ( str , false ) ; } *
Code	{ return escapeJavaStyleString ( str , false ) ; } *
Distance : 4

35
Tree	{ return escapeJavaStyleString ( str , false ) ; } type
Code	{ return escapeJavaStyleString ( str , false ) ; } type
Distance : 4

36
Tree	{ return escapeJavaStyleString ( str , false ) ; } false
Code	{ return escapeJavaStyleString ( str , false ) ; } false
Distance : 4

37
Tree	{ return escapeJavaStyleString ( str , false ) ; } double
Code	{ return escapeJavaStyleString ( str , false ) ; } double
Distance : 4

38
Tree	{ return escapeJavaStyleString ( str , false ) ; } FastMath
Code	{ return escapeJavaStyleString ( str , false ) ; } FastMath
Distance : 4

39
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkState
Code	{ return escapeJavaStyleString ( str , false ) ; } checkState
Distance : 4

40
Tree	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Code	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Distance : 4

41
Tree	{ return escapeJavaStyleString ( str , false ) ; } []
Code	{ return escapeJavaStyleString ( str , false ) ; } []
Distance : 4

42
Tree	{ return escapeJavaStyleString ( str , false ) ; } void
Code	{ return escapeJavaStyleString ( str , false ) ; } void
Distance : 4

43
Tree	{ return escapeJavaStyleString ( str , false ) ; } ==
Code	{ return escapeJavaStyleString ( str , false ) ; } ==
Distance : 4

44
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Code	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Distance : 4

45
Tree	{ return escapeJavaStyleString ( str , false ) ; } !
Code	{ return escapeJavaStyleString ( str , false ) ; } !
Distance : 4

46
Tree	{ return escapeJavaStyleString ( str , false ) ; } @
Code	{ return escapeJavaStyleString ( str , false ) ; } @
Distance : 4

47
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertThat
Code	{ return escapeJavaStyleString ( str , false ) ; } assertThat
Distance : 4

48
Tree	{ return escapeJavaStyleString ( str , false ) ; } Override
Code	{ return escapeJavaStyleString ( str , false ) ; } Override
Distance : 4

49
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

50
Tree	{ return escapeJavaStyleString ( str , false ) ; } [
Code	{ return escapeJavaStyleString ( str , false ) ; } [
Distance : 4

51
Tree	{ return escapeJavaStyleString ( str , false ) ; } this
Code	{ return escapeJavaStyleString ( str , false ) ; } this
Distance : 4

52
Tree	{ return escapeJavaStyleString ( str , false ) ; } &&
Code	{ return escapeJavaStyleString ( str , false ) ; } &&
Distance : 4

53
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 4

54
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 4

55
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 4

56
Tree	{ return escapeJavaStyleString ( str , false ) ; } class
Code	{ return escapeJavaStyleString ( str , false ) ; } class
Distance : 4

57
Tree	{ return escapeJavaStyleString ( str , false ) ; } Object
Code	{ return escapeJavaStyleString ( str , false ) ; } Object
Distance : 4

58
Tree	{ return escapeJavaStyleString ( str , false ) ; } {}
Code	{ return escapeJavaStyleString ( str , false ) ; } {}
Distance : 4

59
Tree	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Distance : 4

60
Tree	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Distance : 4

61
Tree	{ return escapeJavaStyleString ( str , false ) ; } f
Code	{ return escapeJavaStyleString ( str , false ) ; } f
Distance : 4

62
Tree	{ return escapeJavaStyleString ( str , false ) ; } t
Code	{ return escapeJavaStyleString ( str , false ) ; } t
Distance : 4

63
Tree	{ return escapeJavaStyleString ( str , false ) ; } field
Code	{ return escapeJavaStyleString ( str , false ) ; } field
Distance : 4

64
Tree	{ return escapeJavaStyleString ( str , false ) ; } value
Code	{ return escapeJavaStyleString ( str , false ) ; } value
Distance : 4

65
Tree	{ return escapeJavaStyleString ( str , false ) ; } i
Code	{ return escapeJavaStyleString ( str , false ) ; } i
Distance : 4

66
Tree	{ return escapeJavaStyleString ( str , false ) ; } throw
Code	{ return escapeJavaStyleString ( str , false ) ; } throw
Distance : 4

67
Tree	{ return escapeJavaStyleString ( str , false ) ; } catch
Code	{ return escapeJavaStyleString ( str , false ) ; } catch
Distance : 4

68
Tree	{ return escapeJavaStyleString ( str , false ) ; } +
Code	{ return escapeJavaStyleString ( str , false ) ; } +
Distance : 4

69
Tree	{ return escapeJavaStyleString ( str , false ) ; } null
Code	{ return escapeJavaStyleString ( str , false ) ; } null
Distance : 4

70
Tree	{ return escapeJavaStyleString ( str , false ) ; } String
Code	{ return escapeJavaStyleString ( str , false ) ; } String
Distance : 4

71
Tree	{ return escapeJavaStyleString ( str , false ) ; } compiler
Code	{ return escapeJavaStyleString ( str , false ) ; } compiler
Distance : 4

72
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 4

73
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

74
Tree	{ return escapeJavaStyleString ( str , false ) ; } NUMBER_CONSTANT
Code	{ return escapeJavaStyleString ( str , false ) ; } NUMBER_CONSTANT
Distance : 4

75
Tree	{ return escapeJavaStyleString ( str , false ) ; } true
Code	{ return escapeJavaStyleString ( str , false ) ; } true
Distance : 4

76
Tree	{ return escapeJavaStyleString ( str , false ) ; } return
Code	{ return escapeJavaStyleString ( str , false ) ; } return
Distance : 4

77
Tree	{ return escapeJavaStyleString ( str , false ) ; } <
Code	{ return escapeJavaStyleString ( str , false ) ; } <
Distance : 4

78
Tree	{ return escapeJavaStyleString ( str , false ) ; } e
Code	{ return escapeJavaStyleString ( str , false ) ; } e
Distance : 4

79
Tree	{ return escapeJavaStyleString ( str , false ) ; } n
Code	{ return escapeJavaStyleString ( str , false ) ; } n
Distance : 4

80
Tree	{ return escapeJavaStyleString ( str , false ) ; } {
Code	{ return escapeJavaStyleString ( str , false ) ; } {
Distance : 4

81
Tree	{ return escapeJavaStyleString ( str , false ) ; } ()
Code	{ return escapeJavaStyleString ( str , false ) ; } ()
Distance : 4

82
Tree	{ return escapeJavaStyleString ( str , false ) ; } ;
Code	{ return escapeJavaStyleString ( str , false ) ; } ;
Distance : 4

83
Tree	{ return escapeJavaStyleString ( str , false ) ; } )
Code	{ return escapeJavaStyleString ( str , false ) ; } )
Distance : 4

84
Tree	{ return escapeJavaStyleString ( str , false ) ; } {
Code	{ return escapeJavaStyleString ( str , false ) ; } {
Distance : 4

85
Tree	{ return escapeJavaStyleString ( str , false ) ; } if
Code	{ return escapeJavaStyleString ( str , false ) ; } if
Distance : 4

86
Tree	{ return escapeJavaStyleString ( str , false ) ; } <blank>
Code	{ return escapeJavaStyleString ( str , false ) ; } <blank>
Distance : 4

87
Tree	{ return escapeJavaStyleString ( str , false ) ; } (
Code	{ return escapeJavaStyleString ( str , false ) ; } (
Distance : 4

88
Tree	{ return escapeJavaStyleString ( str , false ) ; } =
Code	{ return escapeJavaStyleString ( str , false ) ; } =
Distance : 4

89
Tree	{ return escapeJavaStyleString ( str , false ) ; } }
Code	{ return escapeJavaStyleString ( str , false ) ; } }
Distance : 4

90
Tree	{ return escapeJavaStyleString ( str , false ) ; } .
Code	{ return escapeJavaStyleString ( str , false ) ; } .
Distance : 4

91
Tree	{ return escapeJavaStyleString ( str , false ) ; } ,
Code	{ return escapeJavaStyleString ( str , false ) ; } ,
Distance : 4

92
Tree	{ return escapeJavaStyleString ( str , false ) ; } STRING_CONSTANT
Code	{ return escapeJavaStyleString ( str , false ) ; } STRING_CONSTANT
Distance : 4

93
Tree	{ return escapeJavaStyleString ( str , false ) ; } new
Code	{ return escapeJavaStyleString ( str , false ) ; } new
Distance : 4

94
Tree	{ return escapeJavaStyleString ( str , false ) ; } >
Code	{ return escapeJavaStyleString ( str , false ) ; } >
Distance : 4

95
Tree	{ return escapeJavaStyleString ( str , false ) ; } public
Code	{ return escapeJavaStyleString ( str , false ) ; } public
Distance : 4

96
Tree	{ return escapeJavaStyleString ( str , false ) ; } mode
Code	{ return escapeJavaStyleString ( str , false ) ; } mode
Distance : 4

97
Tree	{ return escapeJavaStyleString ( str , false ) ; } <s>
Code	{ return escapeJavaStyleString ( str , false ) ; } <s>
Distance : 4

98
Tree	{ return escapeJavaStyleString ( str , false ) ; } final
Code	{ return escapeJavaStyleString ( str , false ) ; } final
Distance : 4

99
Tree	{ return escapeJavaStyleString ( str , false ) ; } mock
Code	{ return escapeJavaStyleString ( str , false ) ; } mock
Distance : 4

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( out , out , out ) ; } value
Code	{ escapeJavaStyleString ( out , out , out ) ; } value
Distance : 5

1
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ParamChecks
Code	{ escapeJavaStyleString ( out , out , out ) ; } ParamChecks
Distance : 5

2
Tree	{ escapeJavaStyleString ( out , out , out ) ; } class
Code	{ escapeJavaStyleString ( out , out , out ) ; } class
Distance : 5

3
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Override
Code	{ escapeJavaStyleString ( out , out , out ) ; } Override
Distance : 5

4
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ArrayList
Code	{ escapeJavaStyleString ( out , out , out ) ; } ArrayList
Distance : 5

5
Tree	{ escapeJavaStyleString ( out , out , out ) ; } IllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , out ) ; } IllegalArgumentException
Distance : 5

6
Tree	{ escapeJavaStyleString ( out , out , out ) ; } FastMath
Code	{ escapeJavaStyleString ( out , out , out ) ; } FastMath
Distance : 5

7
Tree	{ escapeJavaStyleString ( out , out , out ) ; } expected
Code	{ escapeJavaStyleString ( out , out , out ) ; } expected
Distance : 5

8
Tree	{ escapeJavaStyleString ( out , out , out ) ; } reportCodeChange
Code	{ escapeJavaStyleString ( out , out , out ) ; } reportCodeChange
Distance : 5

9
Tree	{ escapeJavaStyleString ( out , out , out ) ; } List
Code	{ escapeJavaStyleString ( out , out , out ) ; } List
Distance : 5

10
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Args
Code	{ escapeJavaStyleString ( out , out , out ) ; } Args
Distance : 5

11
Tree	{ escapeJavaStyleString ( out , out , out ) ; } fail
Code	{ escapeJavaStyleString ( out , out , out ) ; } fail
Distance : 5

12
Tree	{ escapeJavaStyleString ( out , out , out ) ; } try
Code	{ escapeJavaStyleString ( out , out , out ) ; } try
Distance : 5

13
Tree	{ escapeJavaStyleString ( out , out , out ) ; } fireChangeEvent
Code	{ escapeJavaStyleString ( out , out , out ) ; } fireChangeEvent
Distance : 5

14
Tree	{ escapeJavaStyleString ( out , out , out ) ; } mock
Code	{ escapeJavaStyleString ( out , out , out ) ; } mock
Distance : 5

15
Tree	{ escapeJavaStyleString ( out , out , out ) ; } getInstance
Code	{ escapeJavaStyleString ( out , out , out ) ; } getInstance
Distance : 5

16
Tree	{ escapeJavaStyleString ( out , out , out ) ; } serialised
Code	{ escapeJavaStyleString ( out , out , out ) ; } serialised
Distance : 5

17
Tree	{ escapeJavaStyleString ( out , out , out ) ; } join
Code	{ escapeJavaStyleString ( out , out , out ) ; } join
Distance : 5

18
Tree	{ escapeJavaStyleString ( out , out , out ) ; } paint
Code	{ escapeJavaStyleString ( out , out , out ) ; } paint
Distance : 5

19
Tree	{ escapeJavaStyleString ( out , out , out ) ; } *
Code	{ escapeJavaStyleString ( out , out , out ) ; } *
Distance : 5

20
Tree	{ escapeJavaStyleString ( out , out , out ) ; } type
Code	{ escapeJavaStyleString ( out , out , out ) ; } type
Distance : 5

21
Tree	{ escapeJavaStyleString ( out , out , out ) ; } i
Code	{ escapeJavaStyleString ( out , out , out ) ; } i
Distance : 5

22
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ==
Code	{ escapeJavaStyleString ( out , out , out ) ; } ==
Distance : 5

23
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Object
Code	{ escapeJavaStyleString ( out , out , out ) ; } Object
Distance : 5

24
Tree	{ escapeJavaStyleString ( out , out , out ) ; } void
Code	{ escapeJavaStyleString ( out , out , out ) ; } void
Distance : 5

25
Tree	{ escapeJavaStyleString ( out , out , out ) ; } throw
Code	{ escapeJavaStyleString ( out , out , out ) ; } throw
Distance : 5

26
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

27
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

28
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

29
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

30
Tree	{ escapeJavaStyleString ( str , str , out ) ; }
Code	{ escapeJavaStyleString ( str , str , out ) ; }
Distance : 4

31
Tree	{ escapeJavaStyleString ( str , str , str ) ; }
Code	{ escapeJavaStyleString ( str , str , str ) ; }
Distance : 4

32
Tree	{ escapeJavaStyleString ( out , out , out ) ; } super
Code	{ escapeJavaStyleString ( out , out , out ) ; } super
Distance : 5

33
Tree	{ escapeJavaStyleString ( out , out , out ) ; } array
Code	{ escapeJavaStyleString ( out , out , out ) ; } array
Distance : 5

34
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <>
Code	{ escapeJavaStyleString ( out , out , out ) ; } <>
Distance : 5

35
Tree	{ escapeJavaStyleString ( out , out , out ) ; } m
Code	{ escapeJavaStyleString ( out , out , out ) ; } m
Distance : 5

36
Tree	{ escapeJavaStyleString ( out , out , out ) ; } boolean
Code	{ escapeJavaStyleString ( out , out , out ) ; } boolean
Distance : 5

37
Tree	{ escapeJavaStyleString ( out , out , out ) ; } :
Code	{ escapeJavaStyleString ( out , out , out ) ; } :
Distance : 5

38
Tree	{ escapeJavaStyleString ( out , out , out ) ; } result
Code	{ escapeJavaStyleString ( out , out , out ) ; } result
Distance : 5

39
Tree	{ escapeJavaStyleString ( out , out , out ) ; } checkState
Code	{ escapeJavaStyleString ( out , out , out ) ; } checkState
Distance : 5

40
Tree	{ escapeJavaStyleString ( out , out , out ) ; } double
Code	{ escapeJavaStyleString ( out , out , out ) ; } double
Distance : 5

41
Tree	{ escapeJavaStyleString ( out , out , out ) ; } e
Code	{ escapeJavaStyleString ( out , out , out ) ; } e
Distance : 5

42
Tree	{ escapeJavaStyleString ( out , out , out ) ; } !=
Code	{ escapeJavaStyleString ( out , out , out ) ; } !=
Distance : 5

43
Tree	{ escapeJavaStyleString ( out , out , out ) ; } compiler
Code	{ escapeJavaStyleString ( out , out , out ) ; } compiler
Distance : 5

44
Tree	{ escapeJavaStyleString ( out , out , out ) ; } String
Code	{ escapeJavaStyleString ( out , out , out ) ; } String
Distance : 5

45
Tree	{ escapeJavaStyleString ( out , out , out ) ; } f
Code	{ escapeJavaStyleString ( out , out , out ) ; } f
Distance : 5

46
Tree	{ escapeJavaStyleString ( out , out , out ) ; } n
Code	{ escapeJavaStyleString ( out , out , out ) ; } n
Distance : 5

47
Tree	{ escapeJavaStyleString ( out , out , out ) ; } catch
Code	{ escapeJavaStyleString ( out , out , out ) ; } catch
Distance : 5

48
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ]
Code	{ escapeJavaStyleString ( out , out , out ) ; } ]
Distance : 5

49
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

50
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Preconditions
Code	{ escapeJavaStyleString ( out , out , out ) ; } Preconditions
Distance : 5

51
Tree	{ escapeJavaStyleString ( out , out , out ) ; } final
Code	{ escapeJavaStyleString ( out , out , out ) ; } final
Distance : 5

52
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

53
Tree	{ escapeJavaStyleString ( out , out , out ) ; } -
Code	{ escapeJavaStyleString ( out , out , out ) ; } -
Distance : 5

54
Tree	{ escapeJavaStyleString ( out , out , out ) ; } null
Code	{ escapeJavaStyleString ( out , out , out ) ; } null
Distance : 5

55
Tree	{ escapeJavaStyleString ( out , out , out ) ; } mode
Code	{ escapeJavaStyleString ( out , out , out ) ; } mode
Distance : 5

56
Tree	{ escapeJavaStyleString ( out , out , out ) ; } true
Code	{ escapeJavaStyleString ( out , out , out ) ; } true
Distance : 5

57
Tree	{ escapeJavaStyleString ( out , out , out ) ; } {}
Code	{ escapeJavaStyleString ( out , out , out ) ; } {}
Distance : 5

58
Tree	{ escapeJavaStyleString ( out , out , out ) ; } MathRuntimeException
Code	{ escapeJavaStyleString ( out , out , out ) ; } MathRuntimeException
Distance : 5

59
Tree	{ escapeJavaStyleString ( out , out , out ) ; } T
Code	{ escapeJavaStyleString ( out , out , out ) ; } T
Distance : 5

60
Tree	{ escapeJavaStyleString ( out , out , out ) ; } x
Code	{ escapeJavaStyleString ( out , out , out ) ; } x
Distance : 5

61
Tree	{ escapeJavaStyleString ( out , out , out ) ; } parent
Code	{ escapeJavaStyleString ( out , out , out ) ; } parent
Distance : 5

62
Tree	{ escapeJavaStyleString ( out , out , out ) ; } createIllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , out ) ; } createIllegalArgumentException
Distance : 5

63
Tree	{ escapeJavaStyleString ( out , out , out ) ; } str
Code	{ escapeJavaStyleString ( out , out , out ) ; } str
Distance : 5

64
Tree	{ escapeJavaStyleString ( out , out , out ) ; } LINE_JOINER
Code	{ escapeJavaStyleString ( out , out , out ) ; } LINE_JOINER
Distance : 5

65
Tree	{ escapeJavaStyleString ( out , out , out ) ; } assertThat
Code	{ escapeJavaStyleString ( out , out , out ) ; } assertThat
Distance : 5

66
Tree	{ escapeJavaStyleString ( out , out , out ) ; } invocation
Code	{ escapeJavaStyleString ( out , out , out ) ; } invocation
Distance : 5

67
Tree	{ escapeJavaStyleString ( out , out , out ) ; } false
Code	{ escapeJavaStyleString ( out , out , out ) ; } false
Distance : 5

68
Tree	{ escapeJavaStyleString ( out , out , out ) ; } int
Code	{ escapeJavaStyleString ( out , out , out ) ; } int
Distance : 5

69
Tree	{ escapeJavaStyleString ( out , out , out ) ; } testSame
Code	{ escapeJavaStyleString ( out , out , out ) ; } testSame
Distance : 5

70
Tree	{ escapeJavaStyleString ( out , out , out ) ; } &&
Code	{ escapeJavaStyleString ( out , out , out ) ; } &&
Distance : 5

71
Tree	{ escapeJavaStyleString ( out , out , out ) ; } >
Code	{ escapeJavaStyleString ( out , out , out ) ; } >
Distance : 5

72
Tree	{ escapeJavaStyleString ( out , out , out ) ; } NUMBER_CONSTANT
Code	{ escapeJavaStyleString ( out , out , out ) ; } NUMBER_CONSTANT
Distance : 5

73
Tree	{ escapeJavaStyleString ( out , out , out ) ; } public
Code	{ escapeJavaStyleString ( out , out , out ) ; } public
Distance : 5

74
Tree	{ escapeJavaStyleString ( out , out , out ) ; } this
Code	{ escapeJavaStyleString ( out , out , out ) ; } this
Distance : 5

75
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <
Code	{ escapeJavaStyleString ( out , out , out ) ; } <
Distance : 5

76
Tree	{ escapeJavaStyleString ( out , out , out ) ; } if
Code	{ escapeJavaStyleString ( out , out , out ) ; } if
Distance : 5

77
Tree	{ escapeJavaStyleString ( out , out , out ) ; } (
Code	{ escapeJavaStyleString ( out , out , out ) ; } (
Distance : 5

78
Tree	{ escapeJavaStyleString ( out , out , out ) ; } return
Code	{ escapeJavaStyleString ( out , out , out ) ; } return
Distance : 5

79
Tree	{ escapeJavaStyleString ( out , out , out ) ; } escapeJavaStyleString
Code	{ escapeJavaStyleString ( out , out , out ) ; } escapeJavaStyleString
Distance : 5

80
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <blank>
Code	{ escapeJavaStyleString ( out , out , out ) ; } <blank>
Distance : 5

81
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ;
Code	{ escapeJavaStyleString ( out , out , out ) ; } ;
Distance : 5

82
Tree	{ escapeJavaStyleString ( out , out , out ) ; } <s>
Code	{ escapeJavaStyleString ( out , out , out ) ; } <s>
Distance : 5

83
Tree	{ escapeJavaStyleString ( out , out , out ) ; } .
Code	{ escapeJavaStyleString ( out , out , out ) ; } .
Distance : 5

84
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ,
Code	{ escapeJavaStyleString ( out , out , out ) ; } ,
Distance : 5

85
Tree	{ escapeJavaStyleString ( out , out , out ) ; } =
Code	{ escapeJavaStyleString ( out , out , out ) ; } =
Distance : 5

86
Tree	{ escapeJavaStyleString ( out , out , out ) ; } }
Code	{ escapeJavaStyleString ( out , out , out ) ; } }
Distance : 5

87
Tree	{ escapeJavaStyleString ( out , out , out ) ; } ()
Code	{ escapeJavaStyleString ( out , out , out ) ; } ()
Distance : 5

88
Tree	{ escapeJavaStyleString ( out , out , out ) ; } {
Code	{ escapeJavaStyleString ( out , out , out ) ; } {
Distance : 5

89
Tree	{ escapeJavaStyleString ( out , out , out ) ; } new
Code	{ escapeJavaStyleString ( out , out , out ) ; } new
Distance : 5

90
Tree	{ escapeJavaStyleString ( out , out , out ) ; } STRING_CONSTANT
Code	{ escapeJavaStyleString ( out , out , out ) ; } STRING_CONSTANT
Distance : 5

91
Tree	{ escapeJavaStyleString ( out , out , out ) ; } )
Code	{ escapeJavaStyleString ( out , out , out ) ; } )
Distance : 5

92
Tree	{ escapeJavaStyleString ( out , out , out ) ; } @
Code	{ escapeJavaStyleString ( out , out , out ) ; } @
Distance : 5

93
Tree	{ escapeJavaStyleString ( out , out , out ) ; } test
Code	{ escapeJavaStyleString ( out , out , out ) ; } test
Distance : 5

94
Tree	{ escapeJavaStyleString ( out , out , out ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , out , out ) ; } nullNotPermitted
Distance : 5

95
Tree	{ escapeJavaStyleString ( out , out , out ) ; } []
Code	{ escapeJavaStyleString ( out , out , out ) ; } []
Distance : 5

96
Tree	{ escapeJavaStyleString ( out , out , out ) ; } !
Code	{ escapeJavaStyleString ( out , out , out ) ; } !
Distance : 5

97
Tree	{ escapeJavaStyleString ( out , out , out ) ; } assertEquals
Code	{ escapeJavaStyleString ( out , out , out ) ; } assertEquals
Distance : 5

98
Tree	{ escapeJavaStyleString ( out , out , out ) ; } +
Code	{ escapeJavaStyleString ( out , out , out ) ; } +
Distance : 5

99
Tree	{ escapeJavaStyleString ( out , out , out ) ; } [
Code	{ escapeJavaStyleString ( out , out , out ) ; } [
Distance : 5

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return escapeJavaStyleString ( str , false ) ; } !=
Code	{ return escapeJavaStyleString ( str , false ) ; } !=
Distance : 3

1
Tree	{ return escapeJavaStyleString ( str , false ) ; } createIllegalArgumentException
Code	{ return escapeJavaStyleString ( str , false ) ; } createIllegalArgumentException
Distance : 3

2
Tree	{ return escapeJavaStyleString ( str , false ) ; } add
Code	{ return escapeJavaStyleString ( str , false ) ; } add
Distance : 3

3
Tree	{ return escapeJavaStyleString ( str , false ) ; } name
Code	{ return escapeJavaStyleString ( str , false ) ; } name
Distance : 3

4
Tree	{ return escapeJavaStyleString ( str , false ) ; } m
Code	{ return escapeJavaStyleString ( str , false ) ; } m
Distance : 3

5
Tree	{ return escapeJavaStyleString ( str , false ) ; } boolean
Code	{ return escapeJavaStyleString ( str , false ) ; } boolean
Distance : 3

6
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkArgument
Code	{ return escapeJavaStyleString ( str , false ) ; } checkArgument
Distance : 3

7
Tree	{ return escapeJavaStyleString ( str , false ) ; } data
Code	{ return escapeJavaStyleString ( str , false ) ; } data
Distance : 3

8
Tree	{ return escapeJavaStyleString ( str , false ) ; } List
Code	{ return escapeJavaStyleString ( str , false ) ; } List
Distance : 3

9
Tree	{ return escapeJavaStyleString ( str , false ) ; } Args
Code	{ return escapeJavaStyleString ( str , false ) ; } Args
Distance : 3

10
Tree	{ return escapeJavaStyleString ( str , false ) ; } array
Code	{ return escapeJavaStyleString ( str , false ) ; } array
Distance : 3

11
Tree	{ return escapeJavaStyleString ( str , false ) ; } <>
Code	{ return escapeJavaStyleString ( str , false ) ; } <>
Distance : 3

12
Tree	{ return escapeJavaStyleString ( str , false ) ; } try
Code	{ return escapeJavaStyleString ( str , false ) ; } try
Distance : 3

13
Tree	{ return escapeJavaStyleString ( str , false ) ; } fail
Code	{ return escapeJavaStyleString ( str , false ) ; } fail
Distance : 3

14
Tree	{ return escapeJavaStyleString ( str , false ) ; } paint
Code	{ return escapeJavaStyleString ( str , false ) ; } paint
Distance : 3

15
Tree	{ return escapeJavaStyleString ( str , false ) ; } join
Code	{ return escapeJavaStyleString ( str , false ) ; } join
Distance : 3

16
Tree	{ return escapeJavaStyleString ( str , false ) ; } str
Code	{ return escapeJavaStyleString ( str , false ) ; } str
Distance : 3

17
Tree	{ return escapeJavaStyleString ( str , false ) ; } LINE_JOINER
Code	{ return escapeJavaStyleString ( str , false ) ; } LINE_JOINER
Distance : 3

18
Tree	{ return escapeJavaStyleString ( str , false ) ; } testSame
Code	{ return escapeJavaStyleString ( str , false ) ; } testSame
Distance : 3

19
Tree	{ return escapeJavaStyleString ( str , false ) ; } x
Code	{ return escapeJavaStyleString ( str , false ) ; } x
Distance : 3

20
Tree	{ return escapeJavaStyleString ( str , false ) ; } ArrayList
Code	{ return escapeJavaStyleString ( str , false ) ; } ArrayList
Distance : 3

21
Tree	{ return escapeJavaStyleString ( str , false ) ; } fireChangeEvent
Code	{ return escapeJavaStyleString ( str , false ) ; } fireChangeEvent
Distance : 3

22
Tree	{ return escapeJavaStyleString ( str , false ) ; } super
Code	{ return escapeJavaStyleString ( str , false ) ; } super
Distance : 3

23
Tree	{ return escapeJavaStyleString ( str , false ) ; } parent
Code	{ return escapeJavaStyleString ( str , false ) ; } parent
Distance : 3

24
Tree	{ return escapeJavaStyleString ( str , false ) ; } IllegalArgumentException
Code	{ return escapeJavaStyleString ( str , false ) ; } IllegalArgumentException
Distance : 3

25
Tree	{ return escapeJavaStyleString ( str , false ) ; } test
Code	{ return escapeJavaStyleString ( str , false ) ; } test
Distance : 3

26
Tree	{ return escapeJavaStyleString ( str , false ) ; } int
Code	{ return escapeJavaStyleString ( str , false ) ; } int
Distance : 3

27
Tree	{ return escapeJavaStyleString ( str , false ) ; } invocation
Code	{ return escapeJavaStyleString ( str , false ) ; } invocation
Distance : 3

28
Tree	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Code	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Distance : 3

29
Tree	{ return escapeJavaStyleString ( str , false ) ; } expected
Code	{ return escapeJavaStyleString ( str , false ) ; } expected
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , false ) ; } :
Code	{ return escapeJavaStyleString ( str , false ) ; } :
Distance : 3

31
Tree	{ return escapeJavaStyleString ( str , false ) ; } result
Code	{ return escapeJavaStyleString ( str , false ) ; } result
Distance : 3

32
Tree	{ return escapeJavaStyleString ( str , false ) ; } serialised
Code	{ return escapeJavaStyleString ( str , false ) ; } serialised
Distance : 3

33
Tree	{ return escapeJavaStyleString ( str , false ) ; } getInstance
Code	{ return escapeJavaStyleString ( str , false ) ; } getInstance
Distance : 3

34
Tree	{ return escapeJavaStyleString ( str , false ) ; } *
Code	{ return escapeJavaStyleString ( str , false ) ; } *
Distance : 3

35
Tree	{ return escapeJavaStyleString ( str , false ) ; } type
Code	{ return escapeJavaStyleString ( str , false ) ; } type
Distance : 3

36
Tree	{ return escapeJavaStyleString ( str , false ) ; } false
Code	{ return escapeJavaStyleString ( str , false ) ; } false
Distance : 3

37
Tree	{ return escapeJavaStyleString ( str , false ) ; } double
Code	{ return escapeJavaStyleString ( str , false ) ; } double
Distance : 3

38
Tree	{ return escapeJavaStyleString ( str , false ) ; } FastMath
Code	{ return escapeJavaStyleString ( str , false ) ; } FastMath
Distance : 3

39
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkState
Code	{ return escapeJavaStyleString ( str , false ) ; } checkState
Distance : 3

40
Tree	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Code	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Distance : 3

41
Tree	{ return escapeJavaStyleString ( str , false ) ; } []
Code	{ return escapeJavaStyleString ( str , false ) ; } []
Distance : 3

42
Tree	{ return escapeJavaStyleString ( str , false ) ; } void
Code	{ return escapeJavaStyleString ( str , false ) ; } void
Distance : 3

43
Tree	{ return escapeJavaStyleString ( str , false ) ; } ==
Code	{ return escapeJavaStyleString ( str , false ) ; } ==
Distance : 3

44
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Code	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Distance : 3

45
Tree	{ return escapeJavaStyleString ( str , false ) ; } !
Code	{ return escapeJavaStyleString ( str , false ) ; } !
Distance : 3

46
Tree	{ return escapeJavaStyleString ( str , false ) ; } @
Code	{ return escapeJavaStyleString ( str , false ) ; } @
Distance : 3

47
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertThat
Code	{ return escapeJavaStyleString ( str , false ) ; } assertThat
Distance : 3

48
Tree	{ return escapeJavaStyleString ( str , false ) ; } Override
Code	{ return escapeJavaStyleString ( str , false ) ; } Override
Distance : 3

49
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

50
Tree	{ return escapeJavaStyleString ( str , false ) ; } [
Code	{ return escapeJavaStyleString ( str , false ) ; } [
Distance : 3

51
Tree	{ return escapeJavaStyleString ( str , false ) ; } this
Code	{ return escapeJavaStyleString ( str , false ) ; } this
Distance : 3

52
Tree	{ return escapeJavaStyleString ( str , false ) ; } &&
Code	{ return escapeJavaStyleString ( str , false ) ; } &&
Distance : 3

53
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 3

54
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 3

55
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 3

56
Tree	{ return escapeJavaStyleString ( str , false ) ; } class
Code	{ return escapeJavaStyleString ( str , false ) ; } class
Distance : 3

57
Tree	{ return escapeJavaStyleString ( str , false ) ; } Object
Code	{ return escapeJavaStyleString ( str , false ) ; } Object
Distance : 3

58
Tree	{ return escapeJavaStyleString ( str , false ) ; } {}
Code	{ return escapeJavaStyleString ( str , false ) ; } {}
Distance : 3

59
Tree	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Distance : 3

60
Tree	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Distance : 3

61
Tree	{ return escapeJavaStyleString ( str , false ) ; } f
Code	{ return escapeJavaStyleString ( str , false ) ; } f
Distance : 3

62
Tree	{ return escapeJavaStyleString ( str , false ) ; } t
Code	{ return escapeJavaStyleString ( str , false ) ; } t
Distance : 3

63
Tree	{ return escapeJavaStyleString ( str , false ) ; } field
Code	{ return escapeJavaStyleString ( str , false ) ; } field
Distance : 3

64
Tree	{ return escapeJavaStyleString ( str , false ) ; } value
Code	{ return escapeJavaStyleString ( str , false ) ; } value
Distance : 3

65
Tree	{ return escapeJavaStyleString ( str , false ) ; } i
Code	{ return escapeJavaStyleString ( str , false ) ; } i
Distance : 3

66
Tree	{ return escapeJavaStyleString ( str , false ) ; } throw
Code	{ return escapeJavaStyleString ( str , false ) ; } throw
Distance : 3

67
Tree	{ return escapeJavaStyleString ( str , false ) ; } catch
Code	{ return escapeJavaStyleString ( str , false ) ; } catch
Distance : 3

68
Tree	{ return escapeJavaStyleString ( str , false ) ; } +
Code	{ return escapeJavaStyleString ( str , false ) ; } +
Distance : 3

69
Tree	{ return escapeJavaStyleString ( str , false ) ; } null
Code	{ return escapeJavaStyleString ( str , false ) ; } null
Distance : 3

70
Tree	{ return escapeJavaStyleString ( str , false ) ; } String
Code	{ return escapeJavaStyleString ( str , false ) ; } String
Distance : 3

71
Tree	{ return escapeJavaStyleString ( str , false ) ; } compiler
Code	{ return escapeJavaStyleString ( str , false ) ; } compiler
Distance : 3

72
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 3

73
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

74
Tree	{ return escapeJavaStyleString ( str , false ) ; } NUMBER_CONSTANT
Code	{ return escapeJavaStyleString ( str , false ) ; } NUMBER_CONSTANT
Distance : 3

75
Tree	{ return escapeJavaStyleString ( str , false ) ; } true
Code	{ return escapeJavaStyleString ( str , false ) ; } true
Distance : 3

76
Tree	{ return escapeJavaStyleString ( str , false ) ; } return
Code	{ return escapeJavaStyleString ( str , false ) ; } return
Distance : 3

77
Tree	{ return escapeJavaStyleString ( str , false ) ; } <
Code	{ return escapeJavaStyleString ( str , false ) ; } <
Distance : 3

78
Tree	{ return escapeJavaStyleString ( str , false ) ; } e
Code	{ return escapeJavaStyleString ( str , false ) ; } e
Distance : 3

79
Tree	{ return escapeJavaStyleString ( str , false ) ; } n
Code	{ return escapeJavaStyleString ( str , false ) ; } n
Distance : 3

80
Tree	{ return escapeJavaStyleString ( str , false ) ; } {
Code	{ return escapeJavaStyleString ( str , false ) ; } {
Distance : 3

81
Tree	{ return escapeJavaStyleString ( str , false ) ; } ()
Code	{ return escapeJavaStyleString ( str , false ) ; } ()
Distance : 3

82
Tree	{ return escapeJavaStyleString ( str , false ) ; } ;
Code	{ return escapeJavaStyleString ( str , false ) ; } ;
Distance : 3

83
Tree	{ return escapeJavaStyleString ( str , false ) ; } )
Code	{ return escapeJavaStyleString ( str , false ) ; } )
Distance : 3

84
Tree	{ return escapeJavaStyleString ( str , false ) ; } {
Code	{ return escapeJavaStyleString ( str , false ) ; } {
Distance : 3

85
Tree	{ return escapeJavaStyleString ( str , false ) ; } if
Code	{ return escapeJavaStyleString ( str , false ) ; } if
Distance : 3

86
Tree	{ return escapeJavaStyleString ( str , false ) ; } <blank>
Code	{ return escapeJavaStyleString ( str , false ) ; } <blank>
Distance : 3

87
Tree	{ return escapeJavaStyleString ( str , false ) ; } (
Code	{ return escapeJavaStyleString ( str , false ) ; } (
Distance : 3

88
Tree	{ return escapeJavaStyleString ( str , false ) ; } =
Code	{ return escapeJavaStyleString ( str , false ) ; } =
Distance : 3

89
Tree	{ return escapeJavaStyleString ( str , false ) ; } }
Code	{ return escapeJavaStyleString ( str , false ) ; } }
Distance : 3

90
Tree	{ return escapeJavaStyleString ( str , false ) ; } .
Code	{ return escapeJavaStyleString ( str , false ) ; } .
Distance : 3

91
Tree	{ return escapeJavaStyleString ( str , false ) ; } ,
Code	{ return escapeJavaStyleString ( str , false ) ; } ,
Distance : 3

92
Tree	{ return escapeJavaStyleString ( str , false ) ; } STRING_CONSTANT
Code	{ return escapeJavaStyleString ( str , false ) ; } STRING_CONSTANT
Distance : 3

93
Tree	{ return escapeJavaStyleString ( str , false ) ; } new
Code	{ return escapeJavaStyleString ( str , false ) ; } new
Distance : 3

94
Tree	{ return escapeJavaStyleString ( str , false ) ; } >
Code	{ return escapeJavaStyleString ( str , false ) ; } >
Distance : 3

95
Tree	{ return escapeJavaStyleString ( str , false ) ; } public
Code	{ return escapeJavaStyleString ( str , false ) ; } public
Distance : 3

96
Tree	{ return escapeJavaStyleString ( str , false ) ; } mode
Code	{ return escapeJavaStyleString ( str , false ) ; } mode
Distance : 3

97
Tree	{ return escapeJavaStyleString ( str , false ) ; } <s>
Code	{ return escapeJavaStyleString ( str , false ) ; } <s>
Distance : 3

98
Tree	{ return escapeJavaStyleString ( str , false ) ; } final
Code	{ return escapeJavaStyleString ( str , false ) ; } final
Distance : 3

99
Tree	{ return escapeJavaStyleString ( str , false ) ; } mock
Code	{ return escapeJavaStyleString ( str , false ) ; } mock
Distance : 3

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

1
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

2
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

3
Tree	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

4
Tree	if ( element != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

5
Tree	if ( element != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 6

6
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 7

7
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

8
Tree	if ( type != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

9
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 7

10
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

11
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 6

12
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

13
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

14
Tree	if ( element != null ) { element = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

15
Tree	if ( element != null ) { type = element . getClass () ; } else { element = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = type . getClass () ; }
Distance : 6

16
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

17
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

18
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

19
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

20
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

21
Tree	if ( element != break; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

22
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

23
Tree	if ( type != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

24
Tree	if ( element != null ) { type = Object . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

25
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

26
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

27
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

28
Tree	if ( element != break; ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

29
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = Object . getClass () ; }
Distance : 6

30
Tree	if ( element != null ) { Object = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

31
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

32
Tree	if ( element != null ) { type = Object . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { type = element . getClass () ; }
Distance : 7

33
Tree	if ( element != default: ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

34
Tree	if ( element != break; ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

35
Tree	if ( element != null ) { type = Object . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { type = type . getClass () ; }
Distance : 7

36
Tree	if ( element != null ) { element = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

37
Tree	if ( element != null ) { type = type . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

38
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = element . getClass () ; }
Distance : 6

39
Tree	if ( element != null ) { Object = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

40
Tree	if ( element != default: ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

41
Tree	if ( element != null ) { element = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

42
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = type . getClass () ; }
Distance : 6

43
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

44
Tree	if ( element != null ) { Object = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

45
Tree	if ( type != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

46
Tree	if ( element != null ) { element = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

47
Tree	if ( element != null ) { type = type . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { element = element . getClass () ; }
Distance : 7

48
Tree	if ( element != default: ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

49
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

50
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

51
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

52
Tree	if ( element != super(); ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

53
Tree	if ( type != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

54
Tree	if ( element != null ) { element = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

55
Tree	if ( type != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

56
Tree	if ( element != null ) { type = type . getClass () ; } else { element = type . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { element = type . getClass () ; }
Distance : 7

57
Tree	if ( element != null ) { element = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { element = element . getClass () ; }
Distance : 7

58
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

59
Tree	if ( element != continue; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != continue; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

60
Tree	if ( Object != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( Object != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

61
Tree	if ( element != continue; ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

62
Tree	if ( Object != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

63
Tree	if ( type != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

64
Tree	if ( element != return; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != return; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

65
Tree	if ( element != null ) { element = element . getClass () ; } else { element = type . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { element = type . getClass () ; }
Distance : 7

66
Tree	if ( type != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

67
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

68
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

69
Tree	if ( element != break; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != break; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

70
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

71
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

72
Tree	if ( element != super(); ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 7

73
Tree	if ( type != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

74
Tree	if ( element != return; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != return; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

75
Tree	if ( type != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

76
Tree	if ( element != return; ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

77
Tree	if ( type != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 7

78
Tree	if ( Object != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( Object != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

79
Tree	if ( type != continue; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != continue; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

80
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

81
Tree	if ( element != continue; ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != continue; ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

82
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

83
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = type . getClass () ; }
Distance : 8

84
Tree	if ( element != break; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != break; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

85
Tree	if ( Object != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( Object != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

86
Tree	if ( element != continue; ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 7

87
Tree	if ( element != break; ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

88
Tree	if ( element != super(); ) { type = element . getClass () ; } else { element = type . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { element = type . getClass () ; }
Distance : 7

89
Tree	if ( Object != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 7

90
Tree	if ( element != return; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != return; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

91
Tree	if ( type != null ) { element = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = type . getClass () ; }
Distance : 8

92
Tree	if ( element != null ) { element = Object . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { element = Object . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

93
Tree	if ( type != null ) { type = element . getClass () ; } else { element = type . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { element = type . getClass () ; }
Distance : 7

94
Tree	if ( element != null ) { type = Object . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { element = Object . getClass () ; }
Distance : 7

95
Tree	if ( Object != continue; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( Object != continue; ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

96
Tree	if ( type != super(); ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( type != super(); ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

97
Tree	if ( element != break; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != break; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

98
Tree	if ( element != continue; ) { element = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != continue; ) { element = element . getClass () ; } else { type = type . getClass () ; }
Distance : 8

99
Tree	if ( element != continue; ) { type = element . getClass () ; } else { element = type . getClass () ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { element = type . getClass () ; }
Distance : 7

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return m . containsKey ( value ) ; -
Code	return m . containsKey ( value ) ; -
Distance : 5

1
Tree	return m . containsKey ( value ) ; assertThat
Code	return m . containsKey ( value ) ; assertThat
Distance : 5

2
Tree	return m . containsKey ( value ) ; :
Code	return m . containsKey ( value ) ; :
Distance : 5

3
Tree	return m . containsKey ( value ) ; field
Code	return m . containsKey ( value ) ; field
Distance : 5

4
Tree	return m . containsKey ( value ) ; t
Code	return m . containsKey ( value ) ; t
Distance : 5

5
Tree	return m . containsKey ( value ) ; name
Code	return m . containsKey ( value ) ; name
Distance : 5

6
Tree	return m . containsKey ( value ) ; add
Code	return m . containsKey ( value ) ; add
Distance : 5

7
Tree	return m . containsKey ( value ) ; <>
Code	return m . containsKey ( value ) ; <>
Distance : 5

8
Tree	return m . containsKey ( value ) ; array
Code	return m . containsKey ( value ) ; array
Distance : 5

9
Tree	return m . containsKey ( value ) ; ParamChecks
Code	return m . containsKey ( value ) ; ParamChecks
Distance : 5

10
Tree	return m . containsKey ( value ) ; f
Code	return m . containsKey ( value ) ; f
Distance : 5

11
Tree	return m . containsKey ( value ) ; result
Code	return m . containsKey ( value ) ; result
Distance : 5

12
Tree	return m . containsKey ( value ) ; boolean
Code	return m . containsKey ( value ) ; boolean
Distance : 5

13
Tree	return m . containsKey ( value ) ; Preconditions
Code	return m . containsKey ( value ) ; Preconditions
Distance : 5

14
Tree	return m . containsKey ( value ) ; m
Code	return m . containsKey ( value ) ; m
Distance : 5

15
Tree	return m . containsKey ( value ) ; x
Code	return m . containsKey ( value ) ; x
Distance : 5

16
Tree	return m . containsKey ( value ) ; testSame
Code	return m . containsKey ( value ) ; testSame
Distance : 5

17
Tree	return m . containsKey ( value ) ; parent
Code	return m . containsKey ( value ) ; parent
Distance : 5

18
Tree	return m . containsKey ( value ) ; createIllegalArgumentException
Code	return m . containsKey ( value ) ; createIllegalArgumentException
Distance : 5

19
Tree	return m . containsKey ( value ) ; serialised
Code	return m . containsKey ( value ) ; serialised
Distance : 5

20
Tree	return m . containsKey ( value ) ; getInstance
Code	return m . containsKey ( value ) ; getInstance
Distance : 5

21
Tree	return m . containsKey ( value ) ; fireChangeEvent
Code	return m . containsKey ( value ) ; fireChangeEvent
Distance : 5

22
Tree	return m . containsKey ( value ) ; invocation
Code	return m . containsKey ( value ) ; invocation
Distance : 5

23
Tree	return m . containsKey ( value ) ; ArrayList
Code	return m . containsKey ( value ) ; ArrayList
Distance : 5

24
Tree	return m . containsKey ( value ) ; str
Code	return m . containsKey ( value ) ; str
Distance : 5

25
Tree	return m . containsKey ( value ) ; !
Code	return m . containsKey ( value ) ; !
Distance : 5

26
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

27
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

28
Tree	return m . containsKey ( value ) ; @
Code	return m . containsKey ( value ) ; @
Distance : 5

29
Tree	return m . containsKey ( value ) ; List
Code	return m . containsKey ( value ) ; List
Distance : 5

30
Tree	return m . containsKey ( value ) ; Args
Code	return m . containsKey ( value ) ; Args
Distance : 5

31
Tree	return m . containsKey ( value ) ; fail
Code	return m . containsKey ( value ) ; fail
Distance : 5

32
Tree	return m . containsKey ( value ) ; try
Code	return m . containsKey ( value ) ; try
Distance : 5

33
Tree	return m . containsKey ( value ) ; type
Code	return m . containsKey ( value ) ; type
Distance : 5

34
Tree	return m . containsKey ( value ) ; *
Code	return m . containsKey ( value ) ; *
Distance : 5

35
Tree	return m . containsKey ( value ) ; paint
Code	return m . containsKey ( value ) ; paint
Distance : 5

36
Tree	return m . containsKey ( value ) ; join
Code	return m . containsKey ( value ) ; join
Distance : 5

37
Tree	return m . containsKey ( value ) ; test
Code	return m . containsKey ( value ) ; test
Distance : 5

38
Tree	return m . containsKey ( value ) ; false
Code	return m . containsKey ( value ) ; false
Distance : 5

39
Tree	return m . containsKey ( value ) ; int
Code	return m . containsKey ( value ) ; int
Distance : 5

40
Tree	return m . containsKey ( value ) ; LINE_JOINER
Code	return m . containsKey ( value ) ; LINE_JOINER
Distance : 5

41
Tree	return m . containsKey ( value ) ; ==
Code	return m . containsKey ( value ) ; ==
Distance : 5

42
Tree	return m . containsKey ( value ) ; void
Code	return m . containsKey ( value ) ; void
Distance : 5

43
Tree	return m . containsKey ( value ) ; catch
Code	return m . containsKey ( value ) ; catch
Distance : 5

44
Tree	return m . containsKey ( value ) ; throw
Code	return m . containsKey ( value ) ; throw
Distance : 5

45
Tree	return m . containsKey ( value ) ; nullNotPermitted
Code	return m . containsKey ( value ) ; nullNotPermitted
Distance : 5

46
Tree	return m . containsKey ( value ) ; []
Code	return m . containsKey ( value ) ; []
Distance : 5

47
Tree	return m . containsKey ( value ) ; assertEquals
Code	return m . containsKey ( value ) ; assertEquals
Distance : 5

48
Tree	return m . containsKey ( value ) ; MathRuntimeException
Code	return m . containsKey ( value ) ; MathRuntimeException
Distance : 5

49
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

50
Tree	return m . containsKey ( value ) ; true
Code	return m . containsKey ( value ) ; true
Distance : 5

51
Tree	return m . containsKey ( value ) ; mode
Code	return m . containsKey ( value ) ; mode
Distance : 5

52
Tree	return m . containsKey ( value ) ; NUMBER_CONSTANT
Code	return m . containsKey ( value ) ; NUMBER_CONSTANT
Distance : 5

53
Tree	return m . containsKey ( value ) ; value
Code	return m . containsKey ( value ) ; value
Distance : 5

54
Tree	return m . containsKey ( value ) ; i
Code	return m . containsKey ( value ) ; i
Distance : 5

55
Tree	return m . containsKey ( value ) ; T
Code	return m . containsKey ( value ) ; T
Distance : 5

56
Tree	return m . containsKey ( value ) ; &&
Code	return m . containsKey ( value ) ; &&
Distance : 5

57
Tree	return m . containsKey ( value ) ; Override
Code	return m . containsKey ( value ) ; Override
Distance : 5

58
Tree	return m . containsKey ( value ) ; mock
Code	return m . containsKey ( value ) ; mock
Distance : 5

59
Tree	return m . containsKey ( value ) ; Object
Code	return m . containsKey ( value ) ; Object
Distance : 5

60
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

61
Tree	return m . containsKey ( value ) ; class
Code	return m . containsKey ( value ) ; class
Distance : 5

62
Tree	return m . containsKey ( value ) ; FastMath
Code	return m . containsKey ( value ) ; FastMath
Distance : 5

63
Tree	return m . containsKey ( value ) ; expected
Code	return m . containsKey ( value ) ; expected
Distance : 5

64
Tree	return m . containsKey ( value ) ; reportCodeChange
Code	return m . containsKey ( value ) ; reportCodeChange
Distance : 5

65
Tree	return m . containsKey ( value ) ; !=
Code	return m . containsKey ( value ) ; !=
Distance : 5

66
Tree	return m . containsKey ( value ) ; super
Code	return m . containsKey ( value ) ; super
Distance : 5

67
Tree	return m . containsKey ( value ) ; double
Code	return m . containsKey ( value ) ; double
Distance : 5

68
Tree	return m . containsKey ( value ) ; checkState
Code	return m . containsKey ( value ) ; checkState
Distance : 5

69
Tree	return m . containsKey ( value ) ; compiler
Code	return m . containsKey ( value ) ; compiler
Distance : 5

70
Tree	return m . containsKey ( value ) ; String
Code	return m . containsKey ( value ) ; String
Distance : 5

71
Tree	return m . containsKey ( value ) ; IllegalArgumentException
Code	return m . containsKey ( value ) ; IllegalArgumentException
Distance : 5

72
Tree	return m . containsKey ( value ) ; public
Code	return m . containsKey ( value ) ; public
Distance : 5

73
Tree	return m . containsKey ( value ) ; STRING_CONSTANT
Code	return m . containsKey ( value ) ; STRING_CONSTANT
Distance : 5

74
Tree	return m . containsKey ( value ) ; ]
Code	return m . containsKey ( value ) ; ]
Distance : 5

75
Tree	return m . containsKey ( value ) ; new
Code	return m . containsKey ( value ) ; new
Distance : 5

76
Tree	return m . containsKey ( value ) ; >
Code	return m . containsKey ( value ) ; >
Distance : 5

77
Tree	return m . containsKey ( value ) ; null
Code	return m . containsKey ( value ) ; null
Distance : 5

78
Tree	return m . containsKey ( value ) ; +
Code	return m . containsKey ( value ) ; +
Distance : 5

79
Tree	return m . containsKey ( value ) ; ,
Code	return m . containsKey ( value ) ; ,
Distance : 5

80
Tree	return m . containsKey ( value ) ; .
Code	return m . containsKey ( value ) ; .
Distance : 5

81
Tree	return m . containsKey ( value ) ; )
Code	return m . containsKey ( value ) ; )
Distance : 5

82
Tree	return m . containsKey ( value ) ; ;
Code	return m . containsKey ( value ) ; ;
Distance : 5

83
Tree	return m . containsKey ( value ) ; [
Code	return m . containsKey ( value ) ; [
Distance : 5

84
Tree	return m . containsKey ( value ) ; <s>
Code	return m . containsKey ( value ) ; <s>
Distance : 5

85
Tree	return m . containsKey ( value ) ; (
Code	return m . containsKey ( value ) ; (
Distance : 5

86
Tree	return m . containsKey ( value ) ; <blank>
Code	return m . containsKey ( value ) ; <blank>
Distance : 5

87
Tree	return m . containsKey ( value ) ; {
Code	return m . containsKey ( value ) ; {
Distance : 5

88
Tree	return m . containsKey ( value ) ; ()
Code	return m . containsKey ( value ) ; ()
Distance : 5

89
Tree	return m . containsKey ( value ) ; }
Code	return m . containsKey ( value ) ; }
Distance : 5

90
Tree	return m . containsKey ( value ) ; =
Code	return m . containsKey ( value ) ; =
Distance : 5

91
Tree	return m . containsKey ( value ) ; final
Code	return m . containsKey ( value ) ; final
Distance : 5

92
Tree	return m . containsKey ( value ) ; this
Code	return m . containsKey ( value ) ; this
Distance : 5

93
Tree	return m . containsKey ( value ) ; <
Code	return m . containsKey ( value ) ; <
Distance : 5

94
Tree	return m . containsKey ( value ) ; if
Code	return m . containsKey ( value ) ; if
Distance : 5

95
Tree	return m . containsKey ( value ) ; ;
Code	return m . containsKey ( value ) ; ;
Distance : 5

96
Tree	return m . containsKey ( value ) ; e
Code	return m . containsKey ( value ) ; e
Distance : 5

97
Tree	return m . containsKey ( value ) ; n
Code	return m . containsKey ( value ) ; n
Distance : 5

98
Tree	return m . containsKey ( value ) ; return
Code	return m . containsKey ( value ) ; return
Distance : 5

99
Tree	return m . containsKey ( value ) ; {}
Code	return m . containsKey ( value ) ; {}
Distance : 5

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	CharSequence cs !=
Code	CharSequence cs !=
Distance : 2

1
Tree	CharSequence cs createIllegalArgumentException
Code	CharSequence cs createIllegalArgumentException
Distance : 2

2
Tree	CharSequence cs add
Code	CharSequence cs add
Distance : 2

3
Tree	CharSequence cs name
Code	CharSequence cs name
Distance : 2

4
Tree	CharSequence cs m
Code	CharSequence cs m
Distance : 2

5
Tree	CharSequence cs boolean
Code	CharSequence cs boolean
Distance : 2

6
Tree	CharSequence cs checkArgument
Code	CharSequence cs checkArgument
Distance : 2

7
Tree	CharSequence cs data
Code	CharSequence cs data
Distance : 2

8
Tree	CharSequence cs List
Code	CharSequence cs List
Distance : 2

9
Tree	CharSequence cs Args
Code	CharSequence cs Args
Distance : 2

10
Tree	CharSequence cs array
Code	CharSequence cs array
Distance : 2

11
Tree	CharSequence cs <>
Code	CharSequence cs <>
Distance : 2

12
Tree	CharSequence cs try
Code	CharSequence cs try
Distance : 2

13
Tree	CharSequence cs fail
Code	CharSequence cs fail
Distance : 2

14
Tree	CharSequence cs paint
Code	CharSequence cs paint
Distance : 2

15
Tree	CharSequence cs join
Code	CharSequence cs join
Distance : 2

16
Tree	CharSequence cs str
Code	CharSequence cs str
Distance : 2

17
Tree	CharSequence cs LINE_JOINER
Code	CharSequence cs LINE_JOINER
Distance : 2

18
Tree	CharSequence cs testSame
Code	CharSequence cs testSame
Distance : 2

19
Tree	CharSequence cs x
Code	CharSequence cs x
Distance : 2

20
Tree	CharSequence cs ArrayList
Code	CharSequence cs ArrayList
Distance : 2

21
Tree	CharSequence cs fireChangeEvent
Code	CharSequence cs fireChangeEvent
Distance : 2

22
Tree	CharSequence cs super
Code	CharSequence cs super
Distance : 2

23
Tree	CharSequence cs parent
Code	CharSequence cs parent
Distance : 2

24
Tree	CharSequence cs IllegalArgumentException
Code	CharSequence cs IllegalArgumentException
Distance : 2

25
Tree	CharSequence cs test
Code	CharSequence cs test
Distance : 2

26
Tree	CharSequence cs int
Code	CharSequence cs int
Distance : 2

27
Tree	CharSequence cs invocation
Code	CharSequence cs invocation
Distance : 2

28
Tree	CharSequence cs reportCodeChange
Code	CharSequence cs reportCodeChange
Distance : 2

29
Tree	CharSequence cs expected
Code	CharSequence cs expected
Distance : 2

30
Tree	CharSequence cs :
Code	CharSequence cs :
Distance : 2

31
Tree	CharSequence cs result
Code	CharSequence cs result
Distance : 2

32
Tree	CharSequence cs serialised
Code	CharSequence cs serialised
Distance : 2

33
Tree	CharSequence cs getInstance
Code	CharSequence cs getInstance
Distance : 2

34
Tree	CharSequence cs *
Code	CharSequence cs *
Distance : 2

35
Tree	CharSequence cs type
Code	CharSequence cs type
Distance : 2

36
Tree	CharSequence cs false
Code	CharSequence cs false
Distance : 2

37
Tree	CharSequence cs double
Code	CharSequence cs double
Distance : 2

38
Tree	CharSequence cs FastMath
Code	CharSequence cs FastMath
Distance : 2

39
Tree	CharSequence cs checkState
Code	CharSequence cs checkState
Distance : 2

40
Tree	CharSequence cs nullNotPermitted
Code	CharSequence cs nullNotPermitted
Distance : 2

41
Tree	CharSequence cs []
Code	CharSequence cs []
Distance : 2

42
Tree	CharSequence cs void
Code	CharSequence cs void
Distance : 2

43
Tree	CharSequence cs ==
Code	CharSequence cs ==
Distance : 2

44
Tree	CharSequence cs assertEquals
Code	CharSequence cs assertEquals
Distance : 2

45
Tree	CharSequence cs !
Code	CharSequence cs !
Distance : 2

46
Tree	CharSequence cs @
Code	CharSequence cs @
Distance : 2

47
Tree	CharSequence cs assertThat
Code	CharSequence cs assertThat
Distance : 2

48
Tree	CharSequence cs Override
Code	CharSequence cs Override
Distance : 2

49
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

50
Tree	CharSequence cs [
Code	CharSequence cs [
Distance : 2

51
Tree	CharSequence cs this
Code	CharSequence cs this
Distance : 2

52
Tree	CharSequence cs &&
Code	CharSequence cs &&
Distance : 2

53
Tree	CharSequence cs T
Code	CharSequence cs T
Distance : 2

54
Tree	CharSequence cs Preconditions
Code	CharSequence cs Preconditions
Distance : 2

55
Tree	CharSequence cs -
Code	CharSequence cs -
Distance : 2

56
Tree	CharSequence cs class
Code	CharSequence cs class
Distance : 2

57
Tree	CharSequence cs Object
Code	CharSequence cs Object
Distance : 2

58
Tree	CharSequence cs {}
Code	CharSequence cs {}
Distance : 2

59
Tree	CharSequence cs MathRuntimeException
Code	CharSequence cs MathRuntimeException
Distance : 2

60
Tree	CharSequence cs ParamChecks
Code	CharSequence cs ParamChecks
Distance : 2

61
Tree	CharSequence cs f
Code	CharSequence cs f
Distance : 2

62
Tree	CharSequence cs t
Code	CharSequence cs t
Distance : 2

63
Tree	CharSequence cs field
Code	CharSequence cs field
Distance : 2

64
Tree	CharSequence cs value
Code	CharSequence cs value
Distance : 2

65
Tree	CharSequence cs i
Code	CharSequence cs i
Distance : 2

66
Tree	CharSequence cs throw
Code	CharSequence cs throw
Distance : 2

67
Tree	CharSequence cs catch
Code	CharSequence cs catch
Distance : 2

68
Tree	CharSequence cs +
Code	CharSequence cs +
Distance : 2

69
Tree	CharSequence cs null
Code	CharSequence cs null
Distance : 2

70
Tree	CharSequence cs String
Code	CharSequence cs String
Distance : 2

71
Tree	CharSequence cs compiler
Code	CharSequence cs compiler
Distance : 2

72
Tree	CharSequence cs ]
Code	CharSequence cs ]
Distance : 2

73
Tree	String cs
Code	String cs
Distance : 0

74
Tree	CharSequence cs NUMBER_CONSTANT
Code	CharSequence cs NUMBER_CONSTANT
Distance : 2

75
Tree	CharSequence cs true
Code	CharSequence cs true
Distance : 2

76
Tree	CharSequence cs return
Code	CharSequence cs return
Distance : 2

77
Tree	CharSequence cs <
Code	CharSequence cs <
Distance : 2

78
Tree	CharSequence cs e
Code	CharSequence cs e
Distance : 2

79
Tree	CharSequence cs n
Code	CharSequence cs n
Distance : 2

80
Tree	CharSequence cs {
Code	CharSequence cs {
Distance : 2

81
Tree	CharSequence cs ()
Code	CharSequence cs ()
Distance : 2

82
Tree	CharSequence cs ;
Code	CharSequence cs ;
Distance : 2

83
Tree	CharSequence cs )
Code	CharSequence cs )
Distance : 2

84
Tree	CharSequence cs cs
Code	CharSequence cs cs
Distance : 2

85
Tree	CharSequence cs if
Code	CharSequence cs if
Distance : 2

86
Tree	CharSequence cs <blank>
Code	CharSequence cs <blank>
Distance : 2

87
Tree	CharSequence cs (
Code	CharSequence cs (
Distance : 2

88
Tree	CharSequence cs =
Code	CharSequence cs =
Distance : 2

89
Tree	CharSequence cs }
Code	CharSequence cs }
Distance : 2

90
Tree	CharSequence cs .
Code	CharSequence cs .
Distance : 2

91
Tree	CharSequence cs ,
Code	CharSequence cs ,
Distance : 2

92
Tree	CharSequence cs STRING_CONSTANT
Code	CharSequence cs STRING_CONSTANT
Distance : 2

93
Tree	CharSequence cs new
Code	CharSequence cs new
Distance : 2

94
Tree	CharSequence cs >
Code	CharSequence cs >
Distance : 2

95
Tree	CharSequence cs public
Code	CharSequence cs public
Distance : 2

96
Tree	CharSequence cs mode
Code	CharSequence cs mode
Distance : 2

97
Tree	CharSequence cs <s>
Code	CharSequence cs <s>
Distance : 2

98
Tree	CharSequence cs final
Code	CharSequence cs final
Distance : 2

99
Tree	CharSequence cs mock
Code	CharSequence cs mock
Distance : 2

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkState
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkState
Distance : 3

1
Tree	GregorianCalendar mTimeZone = new Calendar ( mLocale ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( mLocale ) ;
Distance : 5

2
Tree	Calendar mLocale = new GregorianCalendar ( c ) ;
Code	Calendar mLocale = new GregorianCalendar ( c ) ;
Distance : 4

3
Tree	Calendar mLocale = new Calendar ( c ) ;
Code	Calendar mLocale = new Calendar ( c ) ;
Distance : 5

4
Tree	GregorianCalendar mLocale = new GregorianCalendar ( c ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( c ) ;
Distance : 5

5
Tree	Calendar mTimeZone = new GregorianCalendar ( c ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( c ) ;
Distance : 4

6
Tree	GregorianCalendar mLocale = new Calendar ( c ) ;
Code	GregorianCalendar mLocale = new Calendar ( c ) ;
Distance : 6

7
Tree	Calendar mTimeZone = new Calendar ( c ) ;
Code	Calendar mTimeZone = new Calendar ( c ) ;
Distance : 5

8
Tree	GregorianCalendar mTimeZone = new GregorianCalendar ( c ) ;
Code	GregorianCalendar mTimeZone = new GregorianCalendar ( c ) ;
Distance : 5

9
Tree	GregorianCalendar mTimeZone = new Calendar ( c ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( c ) ;
Distance : 6

10
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; int
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; int
Distance : 3

11
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; test
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; test
Distance : 3

12
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; @
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; @
Distance : 3

13
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; double
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; double
Distance : 3

14
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; false
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; false
Distance : 3

15
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; catch
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; catch
Distance : 3

16
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; throw
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; throw
Distance : 3

17
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; f
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; f
Distance : 3

18
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; void
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; void
Distance : 3

19
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ==
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ==
Distance : 3

20
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <>
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <>
Distance : 3

21
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; array
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; array
Distance : 3

22
Tree	GregorianCalendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Distance : 4

23
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ParamChecks
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ParamChecks
Distance : 3

24
Tree	Calendar mTimeZone = new Calendar ( mLocale ) ;
Code	Calendar mTimeZone = new Calendar ( mLocale ) ;
Distance : 4

25
Tree	GregorianCalendar mTimeZone = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 5

26
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

27
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

28
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

29
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

30
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Distance : 3

31
Tree	GregorianCalendar c = new Calendar ( mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mLocale ) ;
Distance : 4

32
Tree	Calendar c = new GregorianCalendar ( c ) ;
Code	Calendar c = new GregorianCalendar ( c ) ;
Distance : 3

33
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

34
Tree	Calendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

35
Tree	GregorianCalendar c = new GregorianCalendar ( c ) ;
Code	GregorianCalendar c = new GregorianCalendar ( c ) ;
Distance : 4

36
Tree	Calendar mLocale = new Calendar ( mTimeZone ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 4

37
Tree	GregorianCalendar c = new Calendar ( c ) ;
Code	GregorianCalendar c = new Calendar ( c ) ;
Distance : 5

38
Tree	GregorianCalendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

39
Tree	Calendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

40
Tree	Calendar mLocale = new GregorianCalendar ( mLocale ) ;
Code	Calendar mLocale = new GregorianCalendar ( mLocale ) ;
Distance : 3

41
Tree	GregorianCalendar mLocale = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 5

42
Tree	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 4

43
Tree	Calendar mLocale = new Calendar ( mLocale ) ;
Code	Calendar mLocale = new Calendar ( mLocale ) ;
Distance : 4

44
Tree	GregorianCalendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

45
Tree	GregorianCalendar mLocale = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( mLocale ) ;
Distance : 4

46
Tree	Calendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Distance : 3

47
Tree	GregorianCalendar mLocale = new Calendar ( mLocale ) ;
Code	GregorianCalendar mLocale = new Calendar ( mLocale ) ;
Distance : 5

48
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ]
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ]
Distance : 3

49
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

50
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Preconditions
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Preconditions
Distance : 3

51
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; NUMBER_CONSTANT
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; NUMBER_CONSTANT
Distance : 3

52
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; STRING_CONSTANT
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; STRING_CONSTANT
Distance : 3

53
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; new
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; new
Distance : 3

54
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; public
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; public
Distance : 3

55
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; >
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; >
Distance : 3

56
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; return
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; return
Distance : 3

57
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; +
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; +
Distance : 3

58
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; null
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; null
Distance : 3

59
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; (
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; (
Distance : 3

60
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

61
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; .
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; .
Distance : 3

62
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ,
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ,
Distance : 3

63
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; )
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; )
Distance : 3

64
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; n
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; n
Distance : 3

65
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; e
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; e
Distance : 3

66
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; String
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; String
Distance : 3

67
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; compiler
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; compiler
Distance : 3

68
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Override
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Override
Distance : 3

69
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; mock
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; mock
Distance : 3

70
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Object
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Object
Distance : 3

71
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; class
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; class
Distance : 3

72
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; !=
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; !=
Distance : 3

73
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; super
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; super
Distance : 3

74
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ;
Distance : 3

75
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <s>
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <s>
Distance : 3

76
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; -
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; -
Distance : 3

77
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ;
Distance : 3

78
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; value
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; value
Distance : 3

79
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; i
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; i
Distance : 3

80
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; T
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; T
Distance : 3

81
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; &&
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; &&
Distance : 3

82
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; MathRuntimeException
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; MathRuntimeException
Distance : 3

83
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; {}
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; {}
Distance : 3

84
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; true
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; true
Distance : 3

85
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; mode
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; mode
Distance : 3

86
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; nullNotPermitted
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; nullNotPermitted
Distance : 3

87
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; []
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; []
Distance : 3

88
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; !
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; !
Distance : 3

89
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertEquals
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertEquals
Distance : 3

90
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; if
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; if
Distance : 3

91
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <
Distance : 3

92
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; this
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; this
Distance : 3

93
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; final
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; final
Distance : 3

94
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; =
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; =
Distance : 3

95
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; }
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; }
Distance : 3

96
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ()
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ()
Distance : 3

97
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; {
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; {
Distance : 3

98
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <blank>
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <blank>
Distance : 3

99
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; [
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; [
Distance : 3

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } test
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } test
Distance : 5

1
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } i
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } i
Distance : 5

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } T
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } T
Distance : 5

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } &&
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } &&
Distance : 5

4
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <>
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <>
Distance : 5

5
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } array
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } array
Distance : 5

6
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ]
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ]
Distance : 5

7
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } MathRuntimeException
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } MathRuntimeException
Distance : 5

8
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Object
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Object
Distance : 5

9
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } createIllegalArgumentException
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } createIllegalArgumentException
Distance : 5

10
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } parent
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } parent
Distance : 5

11
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } testSame
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } testSame
Distance : 5

12
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } x
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } x
Distance : 5

13
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Override
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Override
Distance : 5

14
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mock
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mock
Distance : 5

15
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } class
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } class
Distance : 5

16
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {}
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {}
Distance : 5

17
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } @
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } @
Distance : 5

18
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } [
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } [
Distance : 5

19
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Preconditions
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Preconditions
Distance : 5

20
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } -
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } -
Distance : 5

21
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mode
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mode
Distance : 5

22
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } checkState
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } checkState
Distance : 5

23
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } true
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } true
Distance : 5

24
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } double
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } double
Distance : 5

25
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } value
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } value
Distance : 5

26
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

27
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

28
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

29
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

30
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

31
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

32
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

33
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

34
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

35
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

36
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

37
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

38
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

39
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

40
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !=
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !=
Distance : 5

41
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ParamChecks
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ParamChecks
Distance : 5

42
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } f
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } f
Distance : 5

43
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } nullNotPermitted
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } nullNotPermitted
Distance : 5

44
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } []
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } []
Distance : 5

45
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !
Distance : 5

46
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } assertEquals
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } assertEquals
Distance : 5

47
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } super
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } super
Distance : 5

48
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } m
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } m
Distance : 5

49
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

50
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } :
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } :
Distance : 5

51
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } .
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } .
Distance : 5

52
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ,
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ,
Distance : 5

53
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } false
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } false
Distance : 5

54
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } int
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } int
Distance : 5

55
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } public
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } public
Distance : 5

56
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

57
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } )
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } )
Distance : 5

58
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } result
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } result
Distance : 5

59
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } List
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } List
Distance : 5

60
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Args
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Args
Distance : 5

61
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fail
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fail
Distance : 5

62
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } try
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } try
Distance : 5

63
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } type
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } type
Distance : 5

64
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } *
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } *
Distance : 5

65
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <
Distance : 5

66
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ;
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ;
Distance : 5

67
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } this
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } this
Distance : 5

68
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Distance : 5

69
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <blank>
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <blank>
Distance : 5

70
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } final
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } final
Distance : 5

71
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } >
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } >
Distance : 5

72
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } null
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } null
Distance : 5

73
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } return
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } return
Distance : 5

74
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } NUMBER_CONSTANT
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } NUMBER_CONSTANT
Distance : 5

75
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } STRING_CONSTANT
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } STRING_CONSTANT
Distance : 5

76
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } +
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } +
Distance : 5

77
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {
Distance : 5

78
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ()
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ()
Distance : 5

79
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Distance : 5

80
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } =
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } =
Distance : 5

81
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } (
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } (
Distance : 5

82
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <s>
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <s>
Distance : 5

83
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } new
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } new
Distance : 5

84
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } throw
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } throw
Distance : 5

85
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } if
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } if
Distance : 5

86
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } compiler
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } compiler
Distance : 5

87
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } String
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } String
Distance : 5

88
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } e
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } e
Distance : 5

89
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } n
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } n
Distance : 5

90
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } catch
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } catch
Distance : 5

91
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } paint
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } paint
Distance : 5

92
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ==
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ==
Distance : 5

93
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ArrayList
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ArrayList
Distance : 5

94
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fireChangeEvent
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fireChangeEvent
Distance : 5

95
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } getInstance
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } getInstance
Distance : 5

96
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } serialised
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } serialised
Distance : 5

97
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } join
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } join
Distance : 5

98
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } void
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } void
Distance : 5

99
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } boolean
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } boolean
Distance : 5

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY test
Distance : 7

1
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY []
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY []
Distance : 7

2
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY nullNotPermitted
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY nullNotPermitted
Distance : 7

3
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY f
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY f
Distance : 8

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ParamChecks
Distance : 7

5
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY array
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY array
Distance : 7

6
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ]
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ]
Distance : 7

7
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY MathRuntimeException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY MathRuntimeException
Distance : 7

8
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY Object
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY Object
Distance : 7

9
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY createIllegalArgumentException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY createIllegalArgumentException
Distance : 7

10
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY . Calendar.HOUR_OF_DAY parent
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY . Calendar.HOUR_OF_DAY parent
Distance : 7

11
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY testSame
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY testSame
Distance : 7

12
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY x
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY x
Distance : 7

13
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY Override
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY Override
Distance : 7

14
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY mock
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY mock
Distance : 7

15
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY class
Distance : 7

16
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY {}
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY {}
Distance : 8

17
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY @
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY @
Distance : 7

18
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY [
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY [
Distance : 7

19
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY Preconditions
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY Preconditions
Distance : 7

20
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY -
Distance : 7

21
Tree	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY mode
Code	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY mode
Distance : 8

22
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY !
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY !
Distance : 7

23
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY true
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY true
Distance : 7

24
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY assertEquals
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY assertEquals
Distance : 7

25
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY super
Distance : 7

26
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 7

27
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 8

28
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( get
Distance : 6

29
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 7

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get Calendar.HOUR_OF_DAY
Distance : 6

31
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get . Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get . Calendar.HOUR_OF_DAY
Distance : 7

32
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 7

33
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 8

34
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get get Calendar.HOUR_OF_DAY
Distance : 7

35
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get get Calendar.HOUR_OF_DAY
Distance : 8

36
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Distance : 6

37
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( get
Distance : 7

38
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get ( get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get ( get
Distance : 7

39
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get ( get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get ( get
Distance : 8

40
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY <>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY <>
Distance : 7

41
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY &&
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY &&
Distance : 7

42
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY T
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY T
Distance : 7

43
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY i
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY i
Distance : 7

44
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY value
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY value
Distance : 7

45
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY checkState
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY checkState
Distance : 8

46
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY double
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY double
Distance : 8

47
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY !=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY !=
Distance : 7

48
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY m
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY m
Distance : 8

49
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 6

50
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY :
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY :
Distance : 7

51
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY .
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY .
Distance : 8

52
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ,
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ,
Distance : 7

53
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY false
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY false
Distance : 7

54
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY int
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY int
Distance : 7

55
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY public
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY public
Distance : 7

56
Tree	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 8

57
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY )
Distance : 7

58
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY result
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY result
Distance : 7

59
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY List
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY List
Distance : 7

60
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY Args
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY Args
Distance : 7

61
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY fail
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY fail
Distance : 7

62
Tree	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY try
Code	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY try
Distance : 8

63
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY type
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY type
Distance : 7

64
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY *
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY *
Distance : 7

65
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY <
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY <
Distance : 7

66
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY ;
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY ;
Distance : 7

67
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY this
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY this
Distance : 7

68
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ) Calendar.HOUR_OF_DAY (
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ) Calendar.HOUR_OF_DAY (
Distance : 7

69
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY . Calendar.HOUR_OF_DAY <s>
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY . Calendar.HOUR_OF_DAY <s>
Distance : 8

70
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY (
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY (
Distance : 7

71
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY =
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY =
Distance : 8

72
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY }
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY }
Distance : 8

73
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ()
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ()
Distance : 7

74
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY {
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY {
Distance : 7

75
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY new
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY new
Distance : 7

76
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY STRING_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY STRING_CONSTANT
Distance : 7

77
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY NUMBER_CONSTANT
Distance : 7

78
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY return
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY return
Distance : 7

79
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY +
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY +
Distance : 7

80
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY null
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY null
Distance : 7

81
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY >
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY >
Distance : 7

82
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY final
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY final
Distance : 7

83
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY <blank>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY <blank>
Distance : 7

84
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY paint
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY paint
Distance : 7

85
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY join
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY join
Distance : 7

86
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY serialised
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY serialised
Distance : 7

87
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY getInstance
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY getInstance
Distance : 8

88
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY fireChangeEvent
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY fireChangeEvent
Distance : 7

89
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ArrayList
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ArrayList
Distance : 7

90
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ==
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY ==
Distance : 7

91
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY void
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY void
Distance : 7

92
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY catch
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY catch
Distance : 7

93
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY throw
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY throw
Distance : 7

94
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY n
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY n
Distance : 7

95
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY e
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY e
Distance : 7

96
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY String
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY String
Distance : 7

97
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY compiler
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY compiler
Distance : 7

98
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY if
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY if
Distance : 7

99
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY boolean
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY boolean
Distance : 7

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

1
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

2
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

3
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

4
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

5
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 2

6
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 2

7
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

8
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 0

9
Tree	{ pos += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

10
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 1

11
Tree	{ pos += Character . charCount ( pt . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( input , pos ) ) ; }
Distance : 2

12
Tree	{ pos += pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

13
Tree	{ pt += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

14
Tree	{ pos += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 3

15
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

16
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 3

17
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 1

18
Tree	{ pos += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 2

19
Tree	{ Character += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

20
Tree	{ pt += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

21
Tree	{ pos += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

22
Tree	{ pos += Character . charCount ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( Character , pos ) ) ; }
Distance : 3

23
Tree	{ pos += Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Distance : 2

24
Tree	{ pos += Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

25
Tree	{ input += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

26
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 3

27
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 1

28
Tree	{ pt += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

29
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

30
Tree	{ pt += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 3

31
Tree	{ pos += input . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

32
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , input ) ) ; }
Distance : 2

33
Tree	{ pos += Character . charCount ( input . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( input . charCount ( input , pos ) ) ; }
Distance : 3

34
Tree	{ pos += Character . charCount ( pt . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( Character , pos ) ) ; }
Distance : 3

35
Tree	{ pos += pt . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

36
Tree	{ pos += Character . charCount ( Character . charCount ( pos , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( pos , pos ) ) ; }
Distance : 3

37
Tree	{ pos += input . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += input . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

38
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

39
Tree	{ pos += Character . codePointAt ( pt . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( pt . codePointAt ( input , pos ) ) ; }
Distance : 3

40
Tree	{ pos += pt . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pt . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

41
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

42
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

43
Tree	{ pos += Character . codePointAt ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( Character , pos ) ) ; }
Distance : 4

44
Tree	{ pos += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 1

45
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

46
Tree	{ pt += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

47
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , Character ) ) ; }
Distance : 2

48
Tree	{ pt += Character . charCount ( pt . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( pt . codePointAt ( input , pos ) ) ; }
Distance : 3

49
Tree	{ pt += pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

50
Tree	{ pos += input . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += input . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

51
Tree	{ pos += Character . charCount ( Character . charCount ( input , input ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , input ) ) ; }
Distance : 2

52
Tree	{ Character += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

53
Tree	{ pos += Character . charCount ( pt . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( pt . charCount ( input , pos ) ) ; }
Distance : 3

54
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

55
Tree	{ pos += pt . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += pt . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

56
Tree	{ pos += Character . charCount ( input . codePointAt ( pos , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( pos , pos ) ) ; }
Distance : 3

57
Tree	{ pt += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 4

58
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 3

59
Tree	{ Character += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ Character += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

60
Tree	{ pos += pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

61
Tree	{ pt += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pt += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 4

62
Tree	{ pos += Character . charCount ( pos . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( Character , pos ) ) ; }
Distance : 3

63
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

64
Tree	{ pos += Character . codePointAt ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( Character , pos ) ) ; }
Distance : 4

65
Tree	{ input += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

66
Tree	{ pos += Character . codePointAt ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( pos . codePointAt ( input , pos ) ) ; }
Distance : 3

67
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 1

68
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

69
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 1

70
Tree	{ pt += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 3

71
Tree	{ input += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ input += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

72
Tree	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 2

73
Tree	{ pos += Character . charCount ( Character . charCount ( pt , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( pt , pos ) ) ; }
Distance : 3

74
Tree	{ pos += input . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += input . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

75
Tree	{ pos += Character . charCount ( input . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , input ) ) ; }
Distance : 2

76
Tree	{ pos += input . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 3

77
Tree	{ Character += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ Character += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

78
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , input ) ) ; }
Distance : 2

79
Tree	{ pos += pt . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += pt . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

80
Tree	{ pos += Character . charCount ( pt . codePointAt ( pos , pos ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( pos , pos ) ) ; }
Distance : 3

81
Tree	{ pt += Character . charCount ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pt += Character . charCount ( input . codePointAt ( Character , pos ) ) ; }
Distance : 4

82
Tree	{ pt += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

83
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

84
Tree	{ pos += pt . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 3

85
Tree	{ pt += Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Distance : 3

86
Tree	{ pos += pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

87
Tree	{ pos += Character . charCount ( input . charCount ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( input . charCount ( Character , pos ) ) ; }
Distance : 4

88
Tree	{ pt += Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Distance : 4

89
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 4

90
Tree	{ pos += Character . charCount ( pos . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( pos . charCount ( input , pos ) ) ; }
Distance : 3

91
Tree	{ pos += input . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += input . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

92
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , input ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , input ) ) ; }
Distance : 3

93
Tree	{ pos += Character . codePointAt ( input . charCount ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( input . charCount ( input , pos ) ) ; }
Distance : 4

94
Tree	{ pos += Character . codePointAt ( pt . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( pt . codePointAt ( Character , pos ) ) ; }
Distance : 4

95
Tree	{ input += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ input += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

96
Tree	{ pos += pt . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += pt . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

97
Tree	{ pos += Character . codePointAt ( Character . charCount ( pos , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( pos , pos ) ) ; }
Distance : 4

98
Tree	{ pos += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

99
Tree	{ pos += Character . charCount ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( input , pt ) ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

1
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

2
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

3
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

4
Tree	final CharSequence result = lookupMap . toString ( subSeq ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 4

5
Tree	final CharSequence result = lookupMap . toString ( result ) ;
Code	final CharSequence result = lookupMap . toString ( result ) ;
Distance : 5

6
Tree	static CharSequence result = lookupMap . get ( subSeq ) ;
Code	static CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

7
Tree	final CharSequence result = result . toString ( subSeq ) ;
Code	final CharSequence result = result . toString ( subSeq ) ;
Distance : 5

8
Tree	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

9
Tree	private CharSequence result = lookupMap . get ( subSeq ) ;
Code	private CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

10
Tree	public CharSequence result = lookupMap . get ( subSeq ) ;
Code	public CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

11
Tree	static CharSequence result = lookupMap . get ( result ) ;
Code	static CharSequence result = lookupMap . get ( result ) ;
Distance : 5

12
Tree	final CharSequence result = result . toString ( result ) ;
Code	final CharSequence result = result . toString ( result ) ;
Distance : 6

13
Tree	abstract CharSequence result = lookupMap . get ( result ) ;
Code	abstract CharSequence result = lookupMap . get ( result ) ;
Distance : 5

14
Tree	static CharSequence result = result . get ( subSeq ) ;
Code	static CharSequence result = result . get ( subSeq ) ;
Distance : 5

15
Tree	abstract CharSequence result = result . get ( subSeq ) ;
Code	abstract CharSequence result = result . get ( subSeq ) ;
Distance : 5

16
Tree	private CharSequence result = lookupMap . get ( result ) ;
Code	private CharSequence result = lookupMap . get ( result ) ;
Distance : 5

17
Tree	public CharSequence result = lookupMap . get ( result ) ;
Code	public CharSequence result = lookupMap . get ( result ) ;
Distance : 5

18
Tree	private CharSequence result = result . get ( subSeq ) ;
Code	private CharSequence result = result . get ( subSeq ) ;
Distance : 5

19
Tree	public CharSequence result = result . get ( subSeq ) ;
Code	public CharSequence result = result . get ( subSeq ) ;
Distance : 5

20
Tree	synchronized CharSequence result = lookupMap . get ( subSeq ) ;
Code	synchronized CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

21
Tree	protected CharSequence result = lookupMap . get ( subSeq ) ;
Code	protected CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

22
Tree	static CharSequence result = result . get ( result ) ;
Code	static CharSequence result = result . get ( result ) ;
Distance : 6

23
Tree	abstract CharSequence result = result . get ( result ) ;
Code	abstract CharSequence result = result . get ( result ) ;
Distance : 6

24
Tree	private CharSequence result = result . get ( result ) ;
Code	private CharSequence result = result . get ( result ) ;
Distance : 6

25
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

26
Tree	public CharSequence result = result . get ( result ) ;
Code	public CharSequence result = result . get ( result ) ;
Distance : 6

27
Tree	synchronized CharSequence result = lookupMap . get ( result ) ;
Code	synchronized CharSequence result = lookupMap . get ( result ) ;
Distance : 5

28
Tree	protected CharSequence result = lookupMap . get ( result ) ;
Code	protected CharSequence result = lookupMap . get ( result ) ;
Distance : 5

29
Tree	synchronized CharSequence result = result . get ( subSeq ) ;
Code	synchronized CharSequence result = result . get ( subSeq ) ;
Distance : 5

30
Tree	protected CharSequence result = result . get ( subSeq ) ;
Code	protected CharSequence result = result . get ( subSeq ) ;
Distance : 5

31
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

32
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

33
Tree	synchronized CharSequence result = result . get ( result ) ;
Code	synchronized CharSequence result = result . get ( result ) ;
Distance : 6

34
Tree	static CharSequence result = lookupMap . toString ( subSeq ) ;
Code	static CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

35
Tree	protected CharSequence result = result . get ( result ) ;
Code	protected CharSequence result = result . get ( result ) ;
Distance : 6

36
Tree	abstract CharSequence result = lookupMap . toString ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

37
Tree	private CharSequence result = lookupMap . toString ( subSeq ) ;
Code	private CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

38
Tree	public CharSequence result = lookupMap . toString ( subSeq ) ;
Code	public CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

39
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

40
Tree	static CharSequence result = lookupMap . toString ( result ) ;
Code	static CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

41
Tree	static CharSequence result = result . toString ( subSeq ) ;
Code	static CharSequence result = result . toString ( subSeq ) ;
Distance : 6

42
Tree	abstract CharSequence result = lookupMap . toString ( result ) ;
Code	abstract CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

43
Tree	abstract CharSequence result = result . toString ( subSeq ) ;
Code	abstract CharSequence result = result . toString ( subSeq ) ;
Distance : 6

44
Tree	private CharSequence result = lookupMap . toString ( result ) ;
Code	private CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

45
Tree	public CharSequence result = lookupMap . toString ( result ) ;
Code	public CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

46
Tree	private CharSequence result = result . toString ( subSeq ) ;
Code	private CharSequence result = result . toString ( subSeq ) ;
Distance : 6

47
Tree	public CharSequence result = result . toString ( subSeq ) ;
Code	public CharSequence result = result . toString ( subSeq ) ;
Distance : 6

48
Tree	synchronized CharSequence result = lookupMap . toString ( subSeq ) ;
Code	synchronized CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

49
Tree	protected CharSequence result = lookupMap . toString ( subSeq ) ;
Code	protected CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

50
Tree	static CharSequence result = result . toString ( result ) ;
Code	static CharSequence result = result . toString ( result ) ;
Distance : 7

51
Tree	abstract CharSequence result = result . toString ( result ) ;
Code	abstract CharSequence result = result . toString ( result ) ;
Distance : 7

52
Tree	private CharSequence result = result . toString ( result ) ;
Code	private CharSequence result = result . toString ( result ) ;
Distance : 7

53
Tree	final CharSequence result = lookupMap . toString ( subSeq ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 4

54
Tree	public CharSequence result = result . toString ( result ) ;
Code	public CharSequence result = result . toString ( result ) ;
Distance : 7

55
Tree	synchronized CharSequence result = lookupMap . toString ( result ) ;
Code	synchronized CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

56
Tree	protected CharSequence result = lookupMap . toString ( result ) ;
Code	protected CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

57
Tree	synchronized CharSequence result = result . toString ( subSeq ) ;
Code	synchronized CharSequence result = result . toString ( subSeq ) ;
Distance : 6

58
Tree	protected CharSequence result = result . toString ( subSeq ) ;
Code	protected CharSequence result = result . toString ( subSeq ) ;
Distance : 6

59
Tree	final CharSequence result = lookupMap . toString ( result ) ;
Code	final CharSequence result = lookupMap . toString ( result ) ;
Distance : 5

60
Tree	static CharSequence result = lookupMap . get ( subSeq ) ;
Code	static CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

61
Tree	final CharSequence result = result . toString ( subSeq ) ;
Code	final CharSequence result = result . toString ( subSeq ) ;
Distance : 5

62
Tree	synchronized CharSequence result = result . toString ( result ) ;
Code	synchronized CharSequence result = result . toString ( result ) ;
Distance : 7

63
Tree	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

64
Tree	protected CharSequence result = result . toString ( result ) ;
Code	protected CharSequence result = result . toString ( result ) ;
Distance : 7

65
Tree	private CharSequence result = lookupMap . get ( subSeq ) ;
Code	private CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

66
Tree	public CharSequence result = lookupMap . get ( subSeq ) ;
Code	public CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

67
Tree	static CharSequence result = lookupMap . get ( result ) ;
Code	static CharSequence result = lookupMap . get ( result ) ;
Distance : 5

68
Tree	final CharSequence result = result . toString ( result ) ;
Code	final CharSequence result = result . toString ( result ) ;
Distance : 6

69
Tree	static CharSequence result = result . get ( subSeq ) ;
Code	static CharSequence result = result . get ( subSeq ) ;
Distance : 5

70
Tree	abstract CharSequence result = lookupMap . get ( result ) ;
Code	abstract CharSequence result = lookupMap . get ( result ) ;
Distance : 5

71
Tree	abstract CharSequence result = result . get ( subSeq ) ;
Code	abstract CharSequence result = result . get ( subSeq ) ;
Distance : 5

72
Tree	private CharSequence result = lookupMap . get ( result ) ;
Code	private CharSequence result = lookupMap . get ( result ) ;
Distance : 5

73
Tree	public CharSequence result = lookupMap . get ( result ) ;
Code	public CharSequence result = lookupMap . get ( result ) ;
Distance : 5

74
Tree	private CharSequence result = result . get ( subSeq ) ;
Code	private CharSequence result = result . get ( subSeq ) ;
Distance : 5

75
Tree	public CharSequence result = result . get ( subSeq ) ;
Code	public CharSequence result = result . get ( subSeq ) ;
Distance : 5

76
Tree	synchronized CharSequence result = lookupMap . get ( subSeq ) ;
Code	synchronized CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

77
Tree	protected CharSequence result = lookupMap . get ( subSeq ) ;
Code	protected CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

78
Tree	static CharSequence result = result . get ( result ) ;
Code	static CharSequence result = result . get ( result ) ;
Distance : 6

79
Tree	abstract CharSequence result = result . get ( result ) ;
Code	abstract CharSequence result = result . get ( result ) ;
Distance : 6

80
Tree	private CharSequence result = result . get ( result ) ;
Code	private CharSequence result = result . get ( result ) ;
Distance : 6

81
Tree	public CharSequence result = result . get ( result ) ;
Code	public CharSequence result = result . get ( result ) ;
Distance : 6

82
Tree	synchronized CharSequence result = lookupMap . get ( result ) ;
Code	synchronized CharSequence result = lookupMap . get ( result ) ;
Distance : 5

83
Tree	protected CharSequence result = lookupMap . get ( result ) ;
Code	protected CharSequence result = lookupMap . get ( result ) ;
Distance : 5

84
Tree	synchronized CharSequence result = result . get ( subSeq ) ;
Code	synchronized CharSequence result = result . get ( subSeq ) ;
Distance : 5

85
Tree	protected CharSequence result = result . get ( subSeq ) ;
Code	protected CharSequence result = result . get ( subSeq ) ;
Distance : 5

86
Tree	synchronized CharSequence result = result . get ( result ) ;
Code	synchronized CharSequence result = result . get ( result ) ;
Distance : 6

87
Tree	static CharSequence result = lookupMap . toString ( subSeq ) ;
Code	static CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

88
Tree	protected CharSequence result = result . get ( result ) ;
Code	protected CharSequence result = result . get ( result ) ;
Distance : 6

89
Tree	abstract CharSequence result = lookupMap . toString ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

90
Tree	private CharSequence result = lookupMap . toString ( subSeq ) ;
Code	private CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

91
Tree	public CharSequence result = lookupMap . toString ( subSeq ) ;
Code	public CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

92
Tree	static CharSequence result = lookupMap . toString ( result ) ;
Code	static CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

93
Tree	static CharSequence result = result . toString ( subSeq ) ;
Code	static CharSequence result = result . toString ( subSeq ) ;
Distance : 6

94
Tree	abstract CharSequence result = lookupMap . toString ( result ) ;
Code	abstract CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

95
Tree	abstract CharSequence result = result . toString ( subSeq ) ;
Code	abstract CharSequence result = result . toString ( subSeq ) ;
Distance : 6

96
Tree	private CharSequence result = lookupMap . toString ( result ) ;
Code	private CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

97
Tree	public CharSequence result = lookupMap . toString ( result ) ;
Code	public CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

98
Tree	private CharSequence result = result . toString ( subSeq ) ;
Code	private CharSequence result = result . toString ( subSeq ) ;
Distance : 6

99
Tree	public CharSequence result = result . toString ( subSeq ) ;
Code	public CharSequence result = result . toString ( subSeq ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final int cols = problem . getAllParameters () ;
Code	final int cols = problem . getAllParameters () ;
Distance : 3

1
Tree	final int problem = problem . getAllParameters () ;
Code	final int problem = problem . getAllParameters () ;
Distance : 4

2
Tree	final double cols = problem . getAllParameters () ;
Code	final double cols = problem . getAllParameters () ;
Distance : 4

3
Tree	static int cols = problem . getAllParameters () ;
Code	static int cols = problem . getAllParameters () ;
Distance : 4

4
Tree	final byte cols = problem . getAllParameters () ;
Code	final byte cols = problem . getAllParameters () ;
Distance : 4

5
Tree	final int cols = cols . getAllParameters () ;
Code	final int cols = cols . getAllParameters () ;
Distance : 4

6
Tree	final long cols = problem . getAllParameters () ;
Code	final long cols = problem . getAllParameters () ;
Distance : 4

7
Tree	abstract int cols = problem . getAllParameters () ;
Code	abstract int cols = problem . getAllParameters () ;
Distance : 4

8
Tree	final char cols = problem . getAllParameters () ;
Code	final char cols = problem . getAllParameters () ;
Distance : 4

9
Tree	final double problem = problem . getAllParameters () ;
Code	final double problem = problem . getAllParameters () ;
Distance : 5

10
Tree	final int length = problem . getAllParameters () ;
Code	final int length = problem . getAllParameters () ;
Distance : 4

11
Tree	final boolean cols = problem . getAllParameters () ;
Code	final boolean cols = problem . getAllParameters () ;
Distance : 4

12
Tree	public int cols = problem . getAllParameters () ;
Code	public int cols = problem . getAllParameters () ;
Distance : 4

13
Tree	final float cols = problem . getAllParameters () ;
Code	final float cols = problem . getAllParameters () ;
Distance : 4

14
Tree	private int cols = problem . getAllParameters () ;
Code	private int cols = problem . getAllParameters () ;
Distance : 4

15
Tree	final short cols = problem . getAllParameters () ;
Code	final short cols = problem . getAllParameters () ;
Distance : 4

16
Tree	protected int cols = problem . getAllParameters () ;
Code	protected int cols = problem . getAllParameters () ;
Distance : 4

17
Tree	final void cols = problem . getAllParameters () ;
Code	final void cols = problem . getAllParameters () ;
Distance : 4

18
Tree	final byte problem = problem . getAllParameters () ;
Code	final byte problem = problem . getAllParameters () ;
Distance : 5

19
Tree	final int problem = cols . getAllParameters () ;
Code	final int problem = cols . getAllParameters () ;
Distance : 5

20
Tree	final double cols = cols . getAllParameters () ;
Code	final double cols = cols . getAllParameters () ;
Distance : 5

21
Tree	static double cols = problem . getAllParameters () ;
Code	static double cols = problem . getAllParameters () ;
Distance : 5

22
Tree	final long problem = problem . getAllParameters () ;
Code	final long problem = problem . getAllParameters () ;
Distance : 5

23
Tree	final int cols = length . getAllParameters () ;
Code	final int cols = length . getAllParameters () ;
Distance : 4

24
Tree	static int problem = problem . getAllParameters () ;
Code	static int problem = problem . getAllParameters () ;
Distance : 5

25
Tree	synchronized int cols = problem . getAllParameters () ;
Code	synchronized int cols = problem . getAllParameters () ;
Distance : 4

26
Tree	abstract double cols = problem . getAllParameters () ;
Code	abstract double cols = problem . getAllParameters () ;
Distance : 5

27
Tree	final double length = problem . getAllParameters () ;
Code	final double length = problem . getAllParameters () ;
Distance : 5

28
Tree	final char problem = problem . getAllParameters () ;
Code	final char problem = problem . getAllParameters () ;
Distance : 5

29
Tree	final boolean problem = problem . getAllParameters () ;
Code	final boolean problem = problem . getAllParameters () ;
Distance : 5

30
Tree	abstract int problem = problem . getAllParameters () ;
Code	abstract int problem = problem . getAllParameters () ;
Distance : 5

31
Tree	static byte cols = problem . getAllParameters () ;
Code	static byte cols = problem . getAllParameters () ;
Distance : 5

32
Tree	abstract byte cols = problem . getAllParameters () ;
Code	abstract byte cols = problem . getAllParameters () ;
Distance : 5

33
Tree	static long cols = problem . getAllParameters () ;
Code	static long cols = problem . getAllParameters () ;
Distance : 5

34
Tree	static boolean cols = problem . getAllParameters () ;
Code	static boolean cols = problem . getAllParameters () ;
Distance : 5

35
Tree	abstract long cols = problem . getAllParameters () ;
Code	abstract long cols = problem . getAllParameters () ;
Distance : 5

36
Tree	public double cols = problem . getAllParameters () ;
Code	public double cols = problem . getAllParameters () ;
Distance : 5

37
Tree	abstract boolean cols = problem . getAllParameters () ;
Code	abstract boolean cols = problem . getAllParameters () ;
Distance : 5

38
Tree	static char cols = problem . getAllParameters () ;
Code	static char cols = problem . getAllParameters () ;
Distance : 5

39
Tree	final float problem = problem . getAllParameters () ;
Code	final float problem = problem . getAllParameters () ;
Distance : 5

40
Tree	public int problem = problem . getAllParameters () ;
Code	public int problem = problem . getAllParameters () ;
Distance : 5

41
Tree	static int cols = cols . getAllParameters () ;
Code	static int cols = cols . getAllParameters () ;
Distance : 5

42
Tree	final byte cols = cols . getAllParameters () ;
Code	final byte cols = cols . getAllParameters () ;
Distance : 5

43
Tree	private double cols = problem . getAllParameters () ;
Code	private double cols = problem . getAllParameters () ;
Distance : 5

44
Tree	abstract char cols = problem . getAllParameters () ;
Code	abstract char cols = problem . getAllParameters () ;
Distance : 5

45
Tree	final long cols = cols . getAllParameters () ;
Code	final long cols = cols . getAllParameters () ;
Distance : 5

46
Tree	final short problem = problem . getAllParameters () ;
Code	final short problem = problem . getAllParameters () ;
Distance : 5

47
Tree	private int problem = problem . getAllParameters () ;
Code	private int problem = problem . getAllParameters () ;
Distance : 5

48
Tree	protected double cols = problem . getAllParameters () ;
Code	protected double cols = problem . getAllParameters () ;
Distance : 5

49
Tree	abstract int cols = cols . getAllParameters () ;
Code	abstract int cols = cols . getAllParameters () ;
Distance : 5

50
Tree	final byte length = problem . getAllParameters () ;
Code	final byte length = problem . getAllParameters () ;
Distance : 5

51
Tree	final void problem = problem . getAllParameters () ;
Code	final void problem = problem . getAllParameters () ;
Distance : 5

52
Tree	final char cols = cols . getAllParameters () ;
Code	final char cols = cols . getAllParameters () ;
Distance : 5

53
Tree	protected int problem = problem . getAllParameters () ;
Code	protected int problem = problem . getAllParameters () ;
Distance : 5

54
Tree	final double problem = cols . getAllParameters () ;
Code	final double problem = cols . getAllParameters () ;
Distance : 6

55
Tree	private byte cols = problem . getAllParameters () ;
Code	private byte cols = problem . getAllParameters () ;
Distance : 5

56
Tree	final int length = cols . getAllParameters () ;
Code	final int length = cols . getAllParameters () ;
Distance : 5

57
Tree	final long length = problem . getAllParameters () ;
Code	final long length = problem . getAllParameters () ;
Distance : 5

58
Tree	final int problem = length . getAllParameters () ;
Code	final int problem = length . getAllParameters () ;
Distance : 5

59
Tree	final double cols = length . getAllParameters () ;
Code	final double cols = length . getAllParameters () ;
Distance : 5

60
Tree	final boolean cols = cols . getAllParameters () ;
Code	final boolean cols = cols . getAllParameters () ;
Distance : 5

61
Tree	static short cols = problem . getAllParameters () ;
Code	static short cols = problem . getAllParameters () ;
Distance : 5

62
Tree	static float cols = problem . getAllParameters () ;
Code	static float cols = problem . getAllParameters () ;
Distance : 5

63
Tree	abstract short cols = problem . getAllParameters () ;
Code	abstract short cols = problem . getAllParameters () ;
Distance : 5

64
Tree	static int length = problem . getAllParameters () ;
Code	static int length = problem . getAllParameters () ;
Distance : 5

65
Tree	private long cols = problem . getAllParameters () ;
Code	private long cols = problem . getAllParameters () ;
Distance : 5

66
Tree	protected byte cols = problem . getAllParameters () ;
Code	protected byte cols = problem . getAllParameters () ;
Distance : 5

67
Tree	static double problem = problem . getAllParameters () ;
Code	static double problem = problem . getAllParameters () ;
Distance : 6

68
Tree	abstract float cols = problem . getAllParameters () ;
Code	abstract float cols = problem . getAllParameters () ;
Distance : 5

69
Tree	private boolean cols = problem . getAllParameters () ;
Code	private boolean cols = problem . getAllParameters () ;
Distance : 5

70
Tree	final char length = problem . getAllParameters () ;
Code	final char length = problem . getAllParameters () ;
Distance : 5

71
Tree	synchronized double cols = problem . getAllParameters () ;
Code	synchronized double cols = problem . getAllParameters () ;
Distance : 5

72
Tree	final boolean length = problem . getAllParameters () ;
Code	final boolean length = problem . getAllParameters () ;
Distance : 5

73
Tree	public byte cols = problem . getAllParameters () ;
Code	public byte cols = problem . getAllParameters () ;
Distance : 5

74
Tree	protected long cols = problem . getAllParameters () ;
Code	protected long cols = problem . getAllParameters () ;
Distance : 5

75
Tree	synchronized int problem = problem . getAllParameters () ;
Code	synchronized int problem = problem . getAllParameters () ;
Distance : 5

76
Tree	private char cols = problem . getAllParameters () ;
Code	private char cols = problem . getAllParameters () ;
Distance : 5

77
Tree	protected boolean cols = problem . getAllParameters () ;
Code	protected boolean cols = problem . getAllParameters () ;
Distance : 5

78
Tree	public int cols = cols . getAllParameters () ;
Code	public int cols = cols . getAllParameters () ;
Distance : 5

79
Tree	abstract double problem = problem . getAllParameters () ;
Code	abstract double problem = problem . getAllParameters () ;
Distance : 6

80
Tree	public long cols = problem . getAllParameters () ;
Code	public long cols = problem . getAllParameters () ;
Distance : 5

81
Tree	abstract int length = problem . getAllParameters () ;
Code	abstract int length = problem . getAllParameters () ;
Distance : 5

82
Tree	synchronized byte cols = problem . getAllParameters () ;
Code	synchronized byte cols = problem . getAllParameters () ;
Distance : 5

83
Tree	final float cols = cols . getAllParameters () ;
Code	final float cols = cols . getAllParameters () ;
Distance : 5

84
Tree	static void cols = problem . getAllParameters () ;
Code	static void cols = problem . getAllParameters () ;
Distance : 5

85
Tree	private int cols = cols . getAllParameters () ;
Code	private int cols = cols . getAllParameters () ;
Distance : 5

86
Tree	static byte problem = problem . getAllParameters () ;
Code	static byte problem = problem . getAllParameters () ;
Distance : 6

87
Tree	protected char cols = problem . getAllParameters () ;
Code	protected char cols = problem . getAllParameters () ;
Distance : 5

88
Tree	public char cols = problem . getAllParameters () ;
Code	public char cols = problem . getAllParameters () ;
Distance : 5

89
Tree	abstract void cols = problem . getAllParameters () ;
Code	abstract void cols = problem . getAllParameters () ;
Distance : 5

90
Tree	synchronized long cols = problem . getAllParameters () ;
Code	synchronized long cols = problem . getAllParameters () ;
Distance : 5

91
Tree	final short cols = cols . getAllParameters () ;
Code	final short cols = cols . getAllParameters () ;
Distance : 5

92
Tree	public boolean cols = problem . getAllParameters () ;
Code	public boolean cols = problem . getAllParameters () ;
Distance : 5

93
Tree	synchronized boolean cols = problem . getAllParameters () ;
Code	synchronized boolean cols = problem . getAllParameters () ;
Distance : 5

94
Tree	protected int cols = cols . getAllParameters () ;
Code	protected int cols = cols . getAllParameters () ;
Distance : 5

95
Tree	abstract byte problem = problem . getAllParameters () ;
Code	abstract byte problem = problem . getAllParameters () ;
Distance : 6

96
Tree	final float length = problem . getAllParameters () ;
Code	final float length = problem . getAllParameters () ;
Distance : 5

97
Tree	static long problem = problem . getAllParameters () ;
Code	static long problem = problem . getAllParameters () ;
Distance : 6

98
Tree	private short cols = problem . getAllParameters () ;
Code	private short cols = problem . getAllParameters () ;
Distance : 5

99
Tree	static boolean problem = problem . getAllParameters () ;
Code	static boolean problem = problem . getAllParameters () ;
Distance : 6

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Distance : 7

1
Tree	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Distance : 7

2
Tree	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Distance : 7

3
Tree	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Distance : 7

4
Tree	final BigDecimal [] out = nRows . is ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . is ( nRows , null ) ;
Distance : 7

5
Tree	final BigDecimal [] out = nRows . doubleToRawLongBits ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . doubleToRawLongBits ( nRows , null ) ;
Distance : 7

6
Tree	final BigDecimal [] out = out . getInstance ( nRows , null ) ;
Code	final BigDecimal [] out = out . getInstance ( nRows , null ) ;
Distance : 7

7
Tree	final BigDecimal [] out = nRows . getRowDimension ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getRowDimension ( nRows , null ) ;
Distance : 7

8
Tree	final BigDecimal [] out = nRows . IEEEremainder ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . IEEEremainder ( nRows , null ) ;
Distance : 7

9
Tree	final BigDecimal [] out = nRows . lineSeparator ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . lineSeparator ( nRows , null ) ;
Distance : 7

10
Tree	final BigDecimal [] out = nRows . currentTimeMillis ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . currentTimeMillis ( nRows , null ) ;
Distance : 7

11
Tree	final BigDecimal [] out = nRows . valueOf ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . valueOf ( nRows , null ) ;
Distance : 7

12
Tree	final BigDecimal [] out = nRows . getGeneratorUpperBounds ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getGeneratorUpperBounds ( nRows , null ) ;
Distance : 7

13
Tree	final BigDecimal [] out = nRows . getInstance ( out , null ) ;
Code	final BigDecimal [] out = nRows . getInstance ( out , null ) ;
Distance : 8

14
Tree	final BigDecimal [] out = nRows . toString ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . toString ( nRows , null ) ;
Distance : 7

15
Tree	final BigDecimal [] out = out . getDimension ( nRows , null ) ;
Code	final BigDecimal [] out = out . getDimension ( nRows , null ) ;
Distance : 7

16
Tree	final BigDecimal [] out = out . isNaN ( nRows , null ) ;
Code	final BigDecimal [] out = out . isNaN ( nRows , null ) ;
Distance : 7

17
Tree	final BigDecimal [] out = nRows . toSpace ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . toSpace ( nRows , null ) ;
Distance : 7

18
Tree	final BigDecimal [] out = nRows . abs ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . abs ( nRows , null ) ;
Distance : 7

19
Tree	final BigDecimal [] out = nRows . decrementAndGet ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . decrementAndGet ( nRows , null ) ;
Distance : 7

20
Tree	final BigDecimal [] out = nRows . linearCombination ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . linearCombination ( nRows , null ) ;
Distance : 7

21
Tree	final BigDecimal [] out = nRows . instantiateGenericsWithUnknown ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . instantiateGenericsWithUnknown ( nRows , null ) ;
Distance : 7

22
Tree	final BigDecimal [] out = nRows . binomialCoefficient ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . binomialCoefficient ( nRows , null ) ;
Distance : 7

23
Tree	final BigDecimal [] out = nRows . getGenericDeclaration ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getGenericDeclaration ( nRows , null ) ;
Distance : 7

24
Tree	final BigDecimal [] out = out . hashCode ( nRows , null ) ;
Code	final BigDecimal [] out = out . hashCode ( nRows , null ) ;
Distance : 7

25
Tree	final BigDecimal [] out = nRows . natural ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . natural ( nRows , null ) ;
Distance : 7

26
Tree	final BigDecimal [] out = nRows . doubleValue ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . doubleValue ( nRows , null ) ;
Distance : 7

27
Tree	final BigDecimal [] out = nRows . with ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . with ( nRows , null ) ;
Distance : 7

28
Tree	final BigDecimal [] out = out . is ( nRows , null ) ;
Code	final BigDecimal [] out = out . is ( nRows , null ) ;
Distance : 7

29
Tree	final BigDecimal [] out = nRows . getUserDir ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getUserDir ( nRows , null ) ;
Distance : 7

30
Tree	final BigDecimal [] out = nRows . getAndIncrement ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getAndIncrement ( nRows , null ) ;
Distance : 7

31
Tree	final BigDecimal [] out = nRows . getPartialValues ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getPartialValues ( nRows , null ) ;
Distance : 7

32
Tree	final BigDecimal [] out = nRows . emptyList ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . emptyList ( nRows , null ) ;
Distance : 7

33
Tree	final BigDecimal [] out = nRows . getDimension ( out , null ) ;
Code	final BigDecimal [] out = nRows . getDimension ( out , null ) ;
Distance : 8

34
Tree	final BigDecimal [] out = nRows . ceil ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . ceil ( nRows , null ) ;
Distance : 7

35
Tree	final BigDecimal [] out = nRows . copyOf ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . copyOf ( nRows , null ) ;
Distance : 7

36
Tree	final BigDecimal [] out = nRows . intern ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . intern ( nRows , null ) ;
Distance : 7

37
Tree	final BigDecimal [] out = nRows . isNaN ( out , null ) ;
Code	final BigDecimal [] out = nRows . isNaN ( out , null ) ;
Distance : 8

38
Tree	final BigDecimal [] out = out . doubleToRawLongBits ( nRows , null ) ;
Code	final BigDecimal [] out = out . doubleToRawLongBits ( nRows , null ) ;
Distance : 7

39
Tree	final BigDecimal [] out = nRows . clone ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . clone ( nRows , null ) ;
Distance : 7

40
Tree	final BigDecimal [] out = nRows . log ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . log ( nRows , null ) ;
Distance : 7

41
Tree	final BigDecimal [] out = nRows . hashCode ( out , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( out , null ) ;
Distance : 8

42
Tree	final BigDecimal [] out = nRows . compare ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . compare ( nRows , null ) ;
Distance : 7

43
Tree	final BigDecimal [] out = nRows . val.length ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . val.length ( nRows , null ) ;
Distance : 7

44
Tree	final BigDecimal [] out = out . getRowDimension ( nRows , null ) ;
Code	final BigDecimal [] out = out . getRowDimension ( nRows , null ) ;
Distance : 7

45
Tree	final BigDecimal [] out = nRows . buildArray ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . buildArray ( nRows , null ) ;
Distance : 7

46
Tree	final BigDecimal [] out = nRows . combine ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . combine ( nRows , null ) ;
Distance : 7

47
Tree	final BigDecimal [] out = nRows . getAndDecrement ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getAndDecrement ( nRows , null ) ;
Distance : 7

48
Tree	final BigDecimal [] out = nRows . forID ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . forID ( nRows , null ) ;
Distance : 7

49
Tree	final BigDecimal [] out = nRows . is ( out , null ) ;
Code	final BigDecimal [] out = nRows . is ( out , null ) ;
Distance : 8

50
Tree	final BigDecimal [] out = out . IEEEremainder ( nRows , null ) ;
Code	final BigDecimal [] out = out . IEEEremainder ( nRows , null ) ;
Distance : 7

51
Tree	final BigDecimal [] out = nRows . eliminateZeroMassPoints ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . eliminateZeroMassPoints ( nRows , null ) ;
Distance : 7

52
Tree	final BigDecimal [] out = out . lineSeparator ( nRows , null ) ;
Code	final BigDecimal [] out = out . lineSeparator ( nRows , null ) ;
Distance : 7

53
Tree	final BigDecimal [] out = nRows . isJavaVersionAtLeast ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isJavaVersionAtLeast ( nRows , null ) ;
Distance : 7

54
Tree	final BigDecimal [] out = nRows . toLocale ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . toLocale ( nRows , null ) ;
Distance : 7

55
Tree	final BigDecimal [] out = nRows . size ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . size ( nRows , null ) ;
Distance : 7

56
Tree	final BigDecimal [] out = nRows . normalize ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . normalize ( nRows , null ) ;
Distance : 7

57
Tree	final BigDecimal [] out = nRows . getJavaIoTmpDir ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getJavaIoTmpDir ( nRows , null ) ;
Distance : 7

58
Tree	final BigDecimal [] out = nRows . doubleToRawLongBits ( out , null ) ;
Code	final BigDecimal [] out = nRows . doubleToRawLongBits ( out , null ) ;
Distance : 8

59
Tree	final BigDecimal [] out = nRows . gcd ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . gcd ( nRows , null ) ;
Distance : 7

60
Tree	final BigDecimal [] out = nRows . longBitsToDouble ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . longBitsToDouble ( nRows , null ) ;
Distance : 7

61
Tree	final BigDecimal [] out = nRows . unmodifiableSet ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . unmodifiableSet ( nRows , null ) ;
Distance : 7

62
Tree	final BigDecimal [] out = out . currentTimeMillis ( nRows , null ) ;
Code	final BigDecimal [] out = out . currentTimeMillis ( nRows , null ) ;
Distance : 7

63
Tree	final BigDecimal [] out = out . valueOf ( nRows , null ) ;
Code	final BigDecimal [] out = out . valueOf ( nRows , null ) ;
Distance : 7

64
Tree	final BigDecimal [] out = nRows . quoteMatcher ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . quoteMatcher ( nRows , null ) ;
Distance : 7

65
Tree	final BigDecimal [] out = out . getGeneratorUpperBounds ( nRows , null ) ;
Code	final BigDecimal [] out = out . getGeneratorUpperBounds ( nRows , null ) ;
Distance : 7

66
Tree	final BigDecimal [] out = nRows . toBooleanObject ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . toBooleanObject ( nRows , null ) ;
Distance : 7

67
Tree	final BigDecimal [] out = nRows . floatValue ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . floatValue ( nRows , null ) ;
Distance : 7

68
Tree	final BigDecimal [] out = out . getInstance ( out , null ) ;
Code	final BigDecimal [] out = out . getInstance ( out , null ) ;
Distance : 8

69
Tree	final BigDecimal [] out = nRows . isInfinite ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isInfinite ( nRows , null ) ;
Distance : 7

70
Tree	final BigDecimal [] out = nRows . getDaysInYearMax ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getDaysInYearMax ( nRows , null ) ;
Distance : 7

71
Tree	final BigDecimal [] out = nRows . getRowDimension ( out , null ) ;
Code	final BigDecimal [] out = nRows . getRowDimension ( out , null ) ;
Distance : 8

72
Tree	final BigDecimal [] out = nRows . getN ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getN ( nRows , null ) ;
Distance : 7

73
Tree	final BigDecimal [] out = nRows . getDefault ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getDefault ( nRows , null ) ;
Distance : 7

74
Tree	final BigDecimal [] out = nRows . nextAfter ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . nextAfter ( nRows , null ) ;
Distance : 7

75
Tree	final BigDecimal [] out = nRows . firstNonNull ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . firstNonNull ( nRows , null ) ;
Distance : 7

76
Tree	final BigDecimal [] out = nRows . getInstanceUTC ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getInstanceUTC ( nRows , null ) ;
Distance : 7

77
Tree	final BigDecimal [] out = nRows . diff ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . diff ( nRows , null ) ;
Distance : 7

78
Tree	final BigDecimal [] out = nRows . getNamespaceType ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getNamespaceType ( nRows , null ) ;
Distance : 7

79
Tree	final BigDecimal [] out = nRows . isPrettyPrint ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isPrettyPrint ( nRows , null ) ;
Distance : 7

80
Tree	final BigDecimal [] out = nRows . intValue ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . intValue ( nRows , null ) ;
Distance : 7

81
Tree	final BigDecimal [] out = nRows . singleQuoteMatcher ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . singleQuoteMatcher ( nRows , null ) ;
Distance : 7

82
Tree	final BigDecimal [] out = nRows . getMethod ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getMethod ( nRows , null ) ;
Distance : 7

83
Tree	final BigDecimal [] out = nRows . nextDouble ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . nextDouble ( nRows , null ) ;
Distance : 7

84
Tree	final BigDecimal [] out = nRows . getRunCount ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getRunCount ( nRows , null ) ;
Distance : 7

85
Tree	final BigDecimal [] out = nRows . IEEEremainder ( out , null ) ;
Code	final BigDecimal [] out = nRows . IEEEremainder ( out , null ) ;
Distance : 8

86
Tree	final BigDecimal [] out = nRows . toDateTimeToday ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . toDateTimeToday ( nRows , null ) ;
Distance : 7

87
Tree	final BigDecimal [] out = out . toString ( nRows , null ) ;
Code	final BigDecimal [] out = out . toString ( nRows , null ) ;
Distance : 7

88
Tree	final BigDecimal [] out = out . abs ( nRows , null ) ;
Code	final BigDecimal [] out = out . abs ( nRows , null ) ;
Distance : 7

89
Tree	final BigDecimal [] out = nRows . getFrobeniusNorm ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getFrobeniusNorm ( nRows , null ) ;
Distance : 7

90
Tree	final BigDecimal [] out = nRows . intersection ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . intersection ( nRows , null ) ;
Distance : 7

91
Tree	final BigDecimal [] out = out . decrementAndGet ( nRows , null ) ;
Code	final BigDecimal [] out = out . decrementAndGet ( nRows , null ) ;
Distance : 7

92
Tree	final BigDecimal [] out = out . toSpace ( nRows , null ) ;
Code	final BigDecimal [] out = out . toSpace ( nRows , null ) ;
Distance : 7

93
Tree	final BigDecimal [] out = nRows . lineSeparator ( out , null ) ;
Code	final BigDecimal [] out = nRows . lineSeparator ( out , null ) ;
Distance : 8

94
Tree	final BigDecimal [] out = nRows . factorial ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . factorial ( nRows , null ) ;
Distance : 7

95
Tree	final BigDecimal [] out = out . linearCombination ( nRows , null ) ;
Code	final BigDecimal [] out = out . linearCombination ( nRows , null ) ;
Distance : 7

96
Tree	final BigDecimal [] out = out . instantiateGenericsWithUnknown ( nRows , null ) ;
Code	final BigDecimal [] out = out . instantiateGenericsWithUnknown ( nRows , null ) ;
Distance : 7

97
Tree	final BigDecimal [] out = out . binomialCoefficient ( nRows , null ) ;
Code	final BigDecimal [] out = out . binomialCoefficient ( nRows , null ) ;
Distance : 7

98
Tree	final BigDecimal [] out = nRows . length ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . length ( nRows , null ) ;
Distance : 7

99
Tree	final BigDecimal [] out = nRows . getTokenList ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getTokenList ( nRows , null ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final double [] out = out . abs () ;
Code	final double [] out = out . abs () ;
Distance : 5

1
Tree	final double [] out = out . hashCode () ;
Code	final double [] out = out . hashCode () ;
Distance : 5

2
Tree	final double [] out = out . getGeneratorUpperBounds () ;
Code	final double [] out = out . getGeneratorUpperBounds () ;
Distance : 5

3
Tree	final double [] out = out . valueOf () ;
Code	final double [] out = out . valueOf () ;
Distance : 5

4
Tree	final double [] out = nRows . abs () ;
Code	final double [] out = nRows . abs () ;
Distance : 5

5
Tree	final double [] out = out . getDimension () ;
Code	final double [] out = out . getDimension () ;
Distance : 5

6
Tree	final double [] out = out . size () ;
Code	final double [] out = out . size () ;
Distance : 5

7
Tree	final double [] out = out . getRowDimension () ;
Code	final double [] out = out . getRowDimension () ;
Distance : 5

8
Tree	final double [] out = out . clone () ;
Code	final double [] out = out . clone () ;
Distance : 5

9
Tree	final double [] out = nRows . hashCode () ;
Code	final double [] out = nRows . hashCode () ;
Distance : 5

10
Tree	final double [] out = out . natural () ;
Code	final double [] out = out . natural () ;
Distance : 5

11
Tree	final double [] out = out . toBooleanObject () ;
Code	final double [] out = out . toBooleanObject () ;
Distance : 5

12
Tree	final double [] out = out . getColumnDimension () ;
Code	final double [] out = out . getColumnDimension () ;
Distance : 5

13
Tree	final double [] out = out . linearCombination () ;
Code	final double [] out = out . linearCombination () ;
Distance : 5

14
Tree	final double [] out = out . getInstance () ;
Code	final double [] out = out . getInstance () ;
Distance : 5

15
Tree	final double [] out = nRows . getGeneratorUpperBounds () ;
Code	final double [] out = nRows . getGeneratorUpperBounds () ;
Distance : 5

16
Tree	final double [] out = out . copyOf () ;
Code	final double [] out = out . copyOf () ;
Distance : 5

17
Tree	final double [] out = out . lineSeparator () ;
Code	final double [] out = out . lineSeparator () ;
Distance : 5

18
Tree	final double [] out = out . IEEEremainder () ;
Code	final double [] out = out . IEEEremainder () ;
Distance : 5

19
Tree	final double [] out = nRows . valueOf () ;
Code	final double [] out = nRows . valueOf () ;
Distance : 5

20
Tree	final double [] out = out . y0 () ;
Code	final double [] out = out . y0 () ;
Distance : 5

21
Tree	final double [] out = nRows . getDimension () ;
Code	final double [] out = nRows . getDimension () ;
Distance : 5

22
Tree	final double [] out = out . is () ;
Code	final double [] out = out . is () ;
Distance : 5

23
Tree	final double [] out = nRows . size () ;
Code	final double [] out = nRows . size () ;
Distance : 5

24
Tree	final double [] out = out . currentTimeMillis () ;
Code	final double [] out = out . currentTimeMillis () ;
Distance : 5

25
Tree	final double [] out = nRows . getRowDimension () ;
Code	final double [] out = nRows . getRowDimension () ;
Distance : 5

26
Tree	final double [] out = nRows . clone () ;
Code	final double [] out = nRows . clone () ;
Distance : 5

27
Tree	final double [] out = nRows . natural () ;
Code	final double [] out = nRows . natural () ;
Distance : 5

28
Tree	final double [] out = out . buildArray () ;
Code	final double [] out = out . buildArray () ;
Distance : 5

29
Tree	final double [] out = nRows . toBooleanObject () ;
Code	final double [] out = nRows . toBooleanObject () ;
Distance : 5

30
Tree	final double [] out = out . probability () ;
Code	final double [] out = out . probability () ;
Distance : 5

31
Tree	final double [] out = nRows . getColumnDimension () ;
Code	final double [] out = nRows . getColumnDimension () ;
Distance : 5

32
Tree	final double [] out = out . ceil () ;
Code	final double [] out = out . ceil () ;
Distance : 5

33
Tree	final double [] out = nRows . linearCombination () ;
Code	final double [] out = nRows . linearCombination () ;
Distance : 5

34
Tree	final double [] out = nRows . getInstance () ;
Code	final double [] out = nRows . getInstance () ;
Distance : 5

35
Tree	final double [] out = out . min () ;
Code	final double [] out = out . min () ;
Distance : 5

36
Tree	final double [] out = out . log () ;
Code	final double [] out = out . log () ;
Distance : 5

37
Tree	final double [] out = out . append () ;
Code	final double [] out = out . append () ;
Distance : 5

38
Tree	final double [] out = nRows . lineSeparator () ;
Code	final double [] out = nRows . lineSeparator () ;
Distance : 5

39
Tree	final double [] out = nRows . copyOf () ;
Code	final double [] out = nRows . copyOf () ;
Distance : 5

40
Tree	final double [] out = nRows . IEEEremainder () ;
Code	final double [] out = nRows . IEEEremainder () ;
Distance : 5

41
Tree	final double [] out = out . normalizeBetweenZeroAndTwoPi () ;
Code	final double [] out = out . normalizeBetweenZeroAndTwoPi () ;
Distance : 5

42
Tree	final double [] out = out . gcd () ;
Code	final double [] out = out . gcd () ;
Distance : 5

43
Tree	final double [] out = nRows . y0 () ;
Code	final double [] out = nRows . y0 () ;
Distance : 5

44
Tree	final double [] out = nRows . is () ;
Code	final double [] out = nRows . is () ;
Distance : 5

45
Tree	final double [] out = out . getAndIncrement () ;
Code	final double [] out = out . getAndIncrement () ;
Distance : 5

46
Tree	final double [] out = nRows . currentTimeMillis () ;
Code	final double [] out = nRows . currentTimeMillis () ;
Distance : 5

47
Tree	final double [] out = out . intern () ;
Code	final double [] out = out . intern () ;
Distance : 5

48
Tree	final double [] out = out . max () ;
Code	final double [] out = out . max () ;
Distance : 5

49
Tree	final double [] out = out . doubleValue () ;
Code	final double [] out = out . doubleValue () ;
Distance : 5

50
Tree	final double [] out = out . doubleToRawLongBits () ;
Code	final double [] out = out . doubleToRawLongBits () ;
Distance : 5

51
Tree	final double [] out = nRows . buildArray () ;
Code	final double [] out = nRows . buildArray () ;
Distance : 5

52
Tree	final double [] out = out . compare () ;
Code	final double [] out = out . compare () ;
Distance : 5

53
Tree	final double [] out = out . floatValue () ;
Code	final double [] out = out . floatValue () ;
Distance : 5

54
Tree	final double [] out = out . instantiateGenericsWithUnknown () ;
Code	final double [] out = out . instantiateGenericsWithUnknown () ;
Distance : 5

55
Tree	final double [] out = out . isNaN () ;
Code	final double [] out = out . isNaN () ;
Distance : 5

56
Tree	final double [] out = nRows . probability () ;
Code	final double [] out = nRows . probability () ;
Distance : 5

57
Tree	final double [] out = out . cumulativeProbability () ;
Code	final double [] out = out . cumulativeProbability () ;
Distance : 5

58
Tree	final double [] out = out . normalize () ;
Code	final double [] out = out . normalize () ;
Distance : 5

59
Tree	final double [] out = nRows . ceil () ;
Code	final double [] out = nRows . ceil () ;
Distance : 5

60
Tree	final double [] out = out . diff () ;
Code	final double [] out = out . diff () ;
Distance : 5

61
Tree	final double [] out = nRows . min () ;
Code	final double [] out = nRows . min () ;
Distance : 5

62
Tree	final double [] out = nRows . log () ;
Code	final double [] out = nRows . log () ;
Distance : 5

63
Tree	final double [] out = out . getDaysInYearMax () ;
Code	final double [] out = out . getDaysInYearMax () ;
Distance : 5

64
Tree	final double [] out = nRows . append () ;
Code	final double [] out = nRows . append () ;
Distance : 5

65
Tree	final double [] out = out . create () ;
Code	final double [] out = out . create () ;
Distance : 5

66
Tree	final double [] out = nRows . normalizeBetweenZeroAndTwoPi () ;
Code	final double [] out = nRows . normalizeBetweenZeroAndTwoPi () ;
Distance : 5

67
Tree	final double [] out = nRows . gcd () ;
Code	final double [] out = nRows . gcd () ;
Distance : 5

68
Tree	final double [] out = out . intValue () ;
Code	final double [] out = out . intValue () ;
Distance : 5

69
Tree	final double [] out = out . cos () ;
Code	final double [] out = out . cos () ;
Distance : 5

70
Tree	final double [] out = out . nextAfter () ;
Code	final double [] out = out . nextAfter () ;
Distance : 5

71
Tree	final double [] out = out . toSpace () ;
Code	final double [] out = out . toSpace () ;
Distance : 5

72
Tree	final double [] out = out . decrementAndGet () ;
Code	final double [] out = out . decrementAndGet () ;
Distance : 5

73
Tree	final double [] out = out . exp () ;
Code	final double [] out = out . exp () ;
Distance : 5

74
Tree	final double [] out = out . fitness () ;
Code	final double [] out = out . fitness () ;
Distance : 5

75
Tree	final double [] out = nRows . getAndIncrement () ;
Code	final double [] out = nRows . getAndIncrement () ;
Distance : 5

76
Tree	final double [] out = out . CosAngle () ;
Code	final double [] out = out . CosAngle () ;
Distance : 5

77
Tree	final double [] out = nRows . intern () ;
Code	final double [] out = nRows . intern () ;
Distance : 5

78
Tree	final double [] out = out . getAndDecrement () ;
Code	final double [] out = out . getAndDecrement () ;
Distance : 5

79
Tree	final double [] out = out . combine () ;
Code	final double [] out = out . combine () ;
Distance : 5

80
Tree	final double [] out = nRows . max () ;
Code	final double [] out = nRows . max () ;
Distance : 5

81
Tree	final double [] out = out . getPopulationSize () ;
Code	final double [] out = out . getPopulationSize () ;
Distance : 5

82
Tree	final double [] out = out . length () ;
Code	final double [] out = out . length () ;
Distance : 5

83
Tree	final double [] out = nRows . doubleValue () ;
Code	final double [] out = nRows . doubleValue () ;
Distance : 5

84
Tree	final double [] out = out . factorial () ;
Code	final double [] out = out . factorial () ;
Distance : 5

85
Tree	final double [] out = out . columns () ;
Code	final double [] out = out . columns () ;
Distance : 5

86
Tree	final double [] out = nRows . doubleToRawLongBits () ;
Code	final double [] out = nRows . doubleToRawLongBits () ;
Distance : 5

87
Tree	final double [] out = out . getBounds2D () ;
Code	final double [] out = out . getBounds2D () ;
Distance : 5

88
Tree	final double [] out = out . nanoTime () ;
Code	final double [] out = out . nanoTime () ;
Distance : 5

89
Tree	final double [] out = out . getRandomGenerator () ;
Code	final double [] out = out . getRandomGenerator () ;
Distance : 5

90
Tree	final double [] out = out . omega () ;
Code	final double [] out = out . omega () ;
Distance : 5

91
Tree	final double [] out = nRows . compare () ;
Code	final double [] out = nRows . compare () ;
Distance : 5

92
Tree	final double [] out = out . createRealMatrix () ;
Code	final double [] out = out . createRealMatrix () ;
Distance : 5

93
Tree	final double [] out = out . eliminateZeroMassPoints () ;
Code	final double [] out = out . eliminateZeroMassPoints () ;
Distance : 5

94
Tree	final double [] out = nRows . floatValue () ;
Code	final double [] out = nRows . floatValue () ;
Distance : 5

95
Tree	final double [] out = out . transform () ;
Code	final double [] out = out . transform () ;
Distance : 5

96
Tree	final double [] out = nRows . instantiateGenericsWithUnknown () ;
Code	final double [] out = nRows . instantiateGenericsWithUnknown () ;
Distance : 5

97
Tree	final double [] out = out . getDefault () ;
Code	final double [] out = out . getDefault () ;
Distance : 5

98
Tree	final double [] out = out . toBaseString () ;
Code	final double [] out = out . toBaseString () ;
Distance : 5

99
Tree	final double [] out = nRows . isNaN () ;
Code	final double [] out = nRows . isNaN () ;
Distance : 5

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

1
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

2
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

3
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

4
Tree	final boolean start = getNumObjectiveFunctions () ;
Code	final boolean start = getNumObjectiveFunctions () ;
Distance : 6

5
Tree	final char start = getNumObjectiveFunctions () ;
Code	final char start = getNumObjectiveFunctions () ;
Distance : 6

6
Tree	final float start = getNumObjectiveFunctions () ;
Code	final float start = getNumObjectiveFunctions () ;
Distance : 6

7
Tree	final short start = getNumObjectiveFunctions () ;
Code	final short start = getNumObjectiveFunctions () ;
Distance : 6

8
Tree	abstract int start = getNumObjectiveFunctions () ;
Code	abstract int start = getNumObjectiveFunctions () ;
Distance : 5

9
Tree	public int start = getNumObjectiveFunctions () ;
Code	public int start = getNumObjectiveFunctions () ;
Distance : 5

10
Tree	static int start = getNumObjectiveFunctions () ;
Code	static int start = getNumObjectiveFunctions () ;
Distance : 5

11
Tree	final void start = getNumObjectiveFunctions () ;
Code	final void start = getNumObjectiveFunctions () ;
Distance : 6

12
Tree	private int start = getNumObjectiveFunctions () ;
Code	private int start = getNumObjectiveFunctions () ;
Distance : 5

13
Tree	protected int start = getNumObjectiveFunctions () ;
Code	protected int start = getNumObjectiveFunctions () ;
Distance : 5

14
Tree	abstract boolean start = getNumObjectiveFunctions () ;
Code	abstract boolean start = getNumObjectiveFunctions () ;
Distance : 6

15
Tree	synchronized int start = getNumObjectiveFunctions () ;
Code	synchronized int start = getNumObjectiveFunctions () ;
Distance : 5

16
Tree	abstract byte start = getNumObjectiveFunctions () ;
Code	abstract byte start = getNumObjectiveFunctions () ;
Distance : 6

17
Tree	abstract double start = getNumObjectiveFunctions () ;
Code	abstract double start = getNumObjectiveFunctions () ;
Distance : 6

18
Tree	abstract long start = getNumObjectiveFunctions () ;
Code	abstract long start = getNumObjectiveFunctions () ;
Distance : 6

19
Tree	static boolean start = getNumObjectiveFunctions () ;
Code	static boolean start = getNumObjectiveFunctions () ;
Distance : 6

20
Tree	private boolean start = getNumObjectiveFunctions () ;
Code	private boolean start = getNumObjectiveFunctions () ;
Distance : 6

21
Tree	public double start = getNumObjectiveFunctions () ;
Code	public double start = getNumObjectiveFunctions () ;
Distance : 6

22
Tree	abstract char start = getNumObjectiveFunctions () ;
Code	abstract char start = getNumObjectiveFunctions () ;
Distance : 6

23
Tree	static byte start = getNumObjectiveFunctions () ;
Code	static byte start = getNumObjectiveFunctions () ;
Distance : 6

24
Tree	static double start = getNumObjectiveFunctions () ;
Code	static double start = getNumObjectiveFunctions () ;
Distance : 6

25
Tree	static long start = getNumObjectiveFunctions () ;
Code	static long start = getNumObjectiveFunctions () ;
Distance : 6

26
Tree	private byte start = getNumObjectiveFunctions () ;
Code	private byte start = getNumObjectiveFunctions () ;
Distance : 6

27
Tree	protected boolean start = getNumObjectiveFunctions () ;
Code	protected boolean start = getNumObjectiveFunctions () ;
Distance : 6

28
Tree	private double start = getNumObjectiveFunctions () ;
Code	private double start = getNumObjectiveFunctions () ;
Distance : 6

29
Tree	private long start = getNumObjectiveFunctions () ;
Code	private long start = getNumObjectiveFunctions () ;
Distance : 6

30
Tree	abstract short start = getNumObjectiveFunctions () ;
Code	abstract short start = getNumObjectiveFunctions () ;
Distance : 6

31
Tree	synchronized boolean start = getNumObjectiveFunctions () ;
Code	synchronized boolean start = getNumObjectiveFunctions () ;
Distance : 6

32
Tree	public long start = getNumObjectiveFunctions () ;
Code	public long start = getNumObjectiveFunctions () ;
Distance : 6

33
Tree	abstract float start = getNumObjectiveFunctions () ;
Code	abstract float start = getNumObjectiveFunctions () ;
Distance : 6

34
Tree	static char start = getNumObjectiveFunctions () ;
Code	static char start = getNumObjectiveFunctions () ;
Distance : 6

35
Tree	protected byte start = getNumObjectiveFunctions () ;
Code	protected byte start = getNumObjectiveFunctions () ;
Distance : 6

36
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

37
Tree	public boolean start = getNumObjectiveFunctions () ;
Code	public boolean start = getNumObjectiveFunctions () ;
Distance : 6

38
Tree	public byte start = getNumObjectiveFunctions () ;
Code	public byte start = getNumObjectiveFunctions () ;
Distance : 6

39
Tree	protected double start = getNumObjectiveFunctions () ;
Code	protected double start = getNumObjectiveFunctions () ;
Distance : 6

40
Tree	private char start = getNumObjectiveFunctions () ;
Code	private char start = getNumObjectiveFunctions () ;
Distance : 6

41
Tree	protected long start = getNumObjectiveFunctions () ;
Code	protected long start = getNumObjectiveFunctions () ;
Distance : 6

42
Tree	synchronized byte start = getNumObjectiveFunctions () ;
Code	synchronized byte start = getNumObjectiveFunctions () ;
Distance : 6

43
Tree	synchronized long start = getNumObjectiveFunctions () ;
Code	synchronized long start = getNumObjectiveFunctions () ;
Distance : 6

44
Tree	synchronized double start = getNumObjectiveFunctions () ;
Code	synchronized double start = getNumObjectiveFunctions () ;
Distance : 6

45
Tree	public char start = getNumObjectiveFunctions () ;
Code	public char start = getNumObjectiveFunctions () ;
Distance : 6

46
Tree	protected char start = getNumObjectiveFunctions () ;
Code	protected char start = getNumObjectiveFunctions () ;
Distance : 6

47
Tree	static short start = getNumObjectiveFunctions () ;
Code	static short start = getNumObjectiveFunctions () ;
Distance : 6

48
Tree	private short start = getNumObjectiveFunctions () ;
Code	private short start = getNumObjectiveFunctions () ;
Distance : 6

49
Tree	static float start = getNumObjectiveFunctions () ;
Code	static float start = getNumObjectiveFunctions () ;
Distance : 6

50
Tree	synchronized char start = getNumObjectiveFunctions () ;
Code	synchronized char start = getNumObjectiveFunctions () ;
Distance : 6

51
Tree	private float start = getNumObjectiveFunctions () ;
Code	private float start = getNumObjectiveFunctions () ;
Distance : 6

52
Tree	public short start = getNumObjectiveFunctions () ;
Code	public short start = getNumObjectiveFunctions () ;
Distance : 6

53
Tree	abstract void start = getNumObjectiveFunctions () ;
Code	abstract void start = getNumObjectiveFunctions () ;
Distance : 6

54
Tree	protected short start = getNumObjectiveFunctions () ;
Code	protected short start = getNumObjectiveFunctions () ;
Distance : 6

55
Tree	synchronized short start = getNumObjectiveFunctions () ;
Code	synchronized short start = getNumObjectiveFunctions () ;
Distance : 6

56
Tree	protected float start = getNumObjectiveFunctions () ;
Code	protected float start = getNumObjectiveFunctions () ;
Distance : 6

57
Tree	public float start = getNumObjectiveFunctions () ;
Code	public float start = getNumObjectiveFunctions () ;
Distance : 6

58
Tree	synchronized float start = getNumObjectiveFunctions () ;
Code	synchronized float start = getNumObjectiveFunctions () ;
Distance : 6

59
Tree	static void start = getNumObjectiveFunctions () ;
Code	static void start = getNumObjectiveFunctions () ;
Distance : 6

60
Tree	private void start = getNumObjectiveFunctions () ;
Code	private void start = getNumObjectiveFunctions () ;
Distance : 6

61
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

62
Tree	public void start = getNumObjectiveFunctions () ;
Code	public void start = getNumObjectiveFunctions () ;
Distance : 6

63
Tree	protected void start = getNumObjectiveFunctions () ;
Code	protected void start = getNumObjectiveFunctions () ;
Distance : 6

64
Tree	synchronized void start = getNumObjectiveFunctions () ;
Code	synchronized void start = getNumObjectiveFunctions () ;
Distance : 6

65
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

66
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

67
Tree	final boolean start = getNumObjectiveFunctions () ;
Code	final boolean start = getNumObjectiveFunctions () ;
Distance : 6

68
Tree	final char start = getNumObjectiveFunctions () ;
Code	final char start = getNumObjectiveFunctions () ;
Distance : 6

69
Tree	final float start = getNumObjectiveFunctions () ;
Code	final float start = getNumObjectiveFunctions () ;
Distance : 6

70
Tree	final short start = getNumObjectiveFunctions () ;
Code	final short start = getNumObjectiveFunctions () ;
Distance : 6

71
Tree	abstract int start = getNumObjectiveFunctions () ;
Code	abstract int start = getNumObjectiveFunctions () ;
Distance : 5

72
Tree	public int start = getNumObjectiveFunctions () ;
Code	public int start = getNumObjectiveFunctions () ;
Distance : 5

73
Tree	static int start = getNumObjectiveFunctions () ;
Code	static int start = getNumObjectiveFunctions () ;
Distance : 5

74
Tree	final void start = getNumObjectiveFunctions () ;
Code	final void start = getNumObjectiveFunctions () ;
Distance : 6

75
Tree	private int start = getNumObjectiveFunctions () ;
Code	private int start = getNumObjectiveFunctions () ;
Distance : 5

76
Tree	protected int start = getNumObjectiveFunctions () ;
Code	protected int start = getNumObjectiveFunctions () ;
Distance : 5

77
Tree	abstract boolean start = getNumObjectiveFunctions () ;
Code	abstract boolean start = getNumObjectiveFunctions () ;
Distance : 6

78
Tree	synchronized int start = getNumObjectiveFunctions () ;
Code	synchronized int start = getNumObjectiveFunctions () ;
Distance : 5

79
Tree	abstract byte start = getNumObjectiveFunctions () ;
Code	abstract byte start = getNumObjectiveFunctions () ;
Distance : 6

80
Tree	abstract double start = getNumObjectiveFunctions () ;
Code	abstract double start = getNumObjectiveFunctions () ;
Distance : 6

81
Tree	abstract long start = getNumObjectiveFunctions () ;
Code	abstract long start = getNumObjectiveFunctions () ;
Distance : 6

82
Tree	static boolean start = getNumObjectiveFunctions () ;
Code	static boolean start = getNumObjectiveFunctions () ;
Distance : 6

83
Tree	private boolean start = getNumObjectiveFunctions () ;
Code	private boolean start = getNumObjectiveFunctions () ;
Distance : 6

84
Tree	public double start = getNumObjectiveFunctions () ;
Code	public double start = getNumObjectiveFunctions () ;
Distance : 6

85
Tree	abstract char start = getNumObjectiveFunctions () ;
Code	abstract char start = getNumObjectiveFunctions () ;
Distance : 6

86
Tree	static byte start = getNumObjectiveFunctions () ;
Code	static byte start = getNumObjectiveFunctions () ;
Distance : 6

87
Tree	static double start = getNumObjectiveFunctions () ;
Code	static double start = getNumObjectiveFunctions () ;
Distance : 6

88
Tree	static long start = getNumObjectiveFunctions () ;
Code	static long start = getNumObjectiveFunctions () ;
Distance : 6

89
Tree	private byte start = getNumObjectiveFunctions () ;
Code	private byte start = getNumObjectiveFunctions () ;
Distance : 6

90
Tree	protected boolean start = getNumObjectiveFunctions () ;
Code	protected boolean start = getNumObjectiveFunctions () ;
Distance : 6

91
Tree	private double start = getNumObjectiveFunctions () ;
Code	private double start = getNumObjectiveFunctions () ;
Distance : 6

92
Tree	private long start = getNumObjectiveFunctions () ;
Code	private long start = getNumObjectiveFunctions () ;
Distance : 6

93
Tree	synchronized boolean start = getNumObjectiveFunctions () ;
Code	synchronized boolean start = getNumObjectiveFunctions () ;
Distance : 6

94
Tree	abstract short start = getNumObjectiveFunctions () ;
Code	abstract short start = getNumObjectiveFunctions () ;
Distance : 6

95
Tree	public long start = getNumObjectiveFunctions () ;
Code	public long start = getNumObjectiveFunctions () ;
Distance : 6

96
Tree	abstract float start = getNumObjectiveFunctions () ;
Code	abstract float start = getNumObjectiveFunctions () ;
Distance : 6

97
Tree	public boolean start = getNumObjectiveFunctions () ;
Code	public boolean start = getNumObjectiveFunctions () ;
Distance : 6

98
Tree	static char start = getNumObjectiveFunctions () ;
Code	static char start = getNumObjectiveFunctions () ;
Distance : 6

99
Tree	protected byte start = getNumObjectiveFunctions () ;
Code	protected byte start = getNumObjectiveFunctions () ;
Distance : 6

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

1
Tree	int n = NUMBER_CONSTANT * n - j ;
Code	int n = NUMBER_CONSTANT * n - j ;
Distance : 4

2
Tree	boolean j = NUMBER_CONSTANT * j - n ;
Code	boolean j = NUMBER_CONSTANT * j - n ;
Distance : 5

3
Tree	byte j = NUMBER_CONSTANT * j - j ;
Code	byte j = NUMBER_CONSTANT * j - j ;
Distance : 5

4
Tree	short j = NUMBER_CONSTANT * n - n ;
Code	short j = NUMBER_CONSTANT * n - n ;
Distance : 4

5
Tree	boolean j = NUMBER_CONSTANT * j - j ;
Code	boolean j = NUMBER_CONSTANT * j - j ;
Distance : 5

6
Tree	long j = NUMBER_CONSTANT * j - n ;
Code	long j = NUMBER_CONSTANT * j - n ;
Distance : 5

7
Tree	void j = NUMBER_CONSTANT * n - j ;
Code	void j = NUMBER_CONSTANT * n - j ;
Distance : 4

8
Tree	float j = NUMBER_CONSTANT * n - n ;
Code	float j = NUMBER_CONSTANT * n - n ;
Distance : 4

9
Tree	double j = NUMBER_CONSTANT * j - n ;
Code	double j = NUMBER_CONSTANT * j - n ;
Distance : 5

10
Tree	short j = NUMBER_CONSTANT * n - j ;
Code	short j = NUMBER_CONSTANT * n - j ;
Distance : 4

11
Tree	char j = NUMBER_CONSTANT * n - n ;
Code	char j = NUMBER_CONSTANT * n - n ;
Distance : 4

12
Tree	byte j = NUMBER_CONSTANT * n - n ;
Code	byte j = NUMBER_CONSTANT * n - n ;
Distance : 4

13
Tree	void j = NUMBER_CONSTANT * n - n ;
Code	void j = NUMBER_CONSTANT * n - n ;
Distance : 4

14
Tree	float j = NUMBER_CONSTANT * n - j ;
Code	float j = NUMBER_CONSTANT * n - j ;
Distance : 4

15
Tree	long j = NUMBER_CONSTANT * j - j ;
Code	long j = NUMBER_CONSTANT * j - j ;
Distance : 5

16
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

17
Tree	long j = NUMBER_CONSTANT * n - j ;
Code	long j = NUMBER_CONSTANT * n - j ;
Distance : 4

18
Tree	double j = NUMBER_CONSTANT * n - n ;
Code	double j = NUMBER_CONSTANT * n - n ;
Distance : 4

19
Tree	int j = NUMBER_CONSTANT * j - j ;
Code	int j = NUMBER_CONSTANT * j - j ;
Distance : 4

20
Tree	long j = NUMBER_CONSTANT * n - n ;
Code	long j = NUMBER_CONSTANT * n - n ;
Distance : 4

21
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

22
Tree	int j = NUMBER_CONSTANT * j - n ;
Code	int j = NUMBER_CONSTANT * j - n ;
Distance : 4

23
Tree	byte j = NUMBER_CONSTANT * n - j ;
Code	byte j = NUMBER_CONSTANT * n - j ;
Distance : 4

24
Tree	boolean j = NUMBER_CONSTANT * n - j ;
Code	boolean j = NUMBER_CONSTANT * n - j ;
Distance : 4

25
Tree	boolean j = NUMBER_CONSTANT * n - n ;
Code	boolean j = NUMBER_CONSTANT * n - n ;
Distance : 4

26
Tree	char j = NUMBER_CONSTANT * n - j ;
Code	char j = NUMBER_CONSTANT * n - j ;
Distance : 4

27
Tree	double j = NUMBER_CONSTANT * j - j ;
Code	double j = NUMBER_CONSTANT * j - j ;
Distance : 5

28
Tree	char j = NUMBER_CONSTANT * j - j ;
Code	char j = NUMBER_CONSTANT * j - j ;
Distance : 5

29
Tree	float j = NUMBER_CONSTANT * j - j ;
Code	float j = NUMBER_CONSTANT * j - j ;
Distance : 5

30
Tree	byte j = NUMBER_CONSTANT * j - n ;
Code	byte j = NUMBER_CONSTANT * j - n ;
Distance : 5

31
Tree	int n = NUMBER_CONSTANT * n - n ;
Code	int n = NUMBER_CONSTANT * n - n ;
Distance : 4

32
Tree	char j = NUMBER_CONSTANT * j - n ;
Code	char j = NUMBER_CONSTANT * j - n ;
Distance : 5

33
Tree	short j = NUMBER_CONSTANT * j - j ;
Code	short j = NUMBER_CONSTANT * j - j ;
Distance : 5

34
Tree	float j = NUMBER_CONSTANT * j - n ;
Code	float j = NUMBER_CONSTANT * j - n ;
Distance : 5

35
Tree	void j = NUMBER_CONSTANT * j - j ;
Code	void j = NUMBER_CONSTANT * j - j ;
Distance : 5

36
Tree	double n = NUMBER_CONSTANT * n - j ;
Code	double n = NUMBER_CONSTANT * n - j ;
Distance : 5

37
Tree	long n = NUMBER_CONSTANT * n - j ;
Code	long n = NUMBER_CONSTANT * n - j ;
Distance : 5

38
Tree	short j = NUMBER_CONSTANT * j - n ;
Code	short j = NUMBER_CONSTANT * j - n ;
Distance : 5

39
Tree	void j = NUMBER_CONSTANT * j - n ;
Code	void j = NUMBER_CONSTANT * j - n ;
Distance : 5

40
Tree	double n = NUMBER_CONSTANT * n - n ;
Code	double n = NUMBER_CONSTANT * n - n ;
Distance : 5

41
Tree	int n = NUMBER_CONSTANT * j - j ;
Code	int n = NUMBER_CONSTANT * j - j ;
Distance : 5

42
Tree	long n = NUMBER_CONSTANT * n - n ;
Code	long n = NUMBER_CONSTANT * n - n ;
Distance : 5

43
Tree	boolean n = NUMBER_CONSTANT * n - j ;
Code	boolean n = NUMBER_CONSTANT * n - j ;
Distance : 5

44
Tree	int n = NUMBER_CONSTANT * j - n ;
Code	int n = NUMBER_CONSTANT * j - n ;
Distance : 5

45
Tree	byte n = NUMBER_CONSTANT * n - j ;
Code	byte n = NUMBER_CONSTANT * n - j ;
Distance : 5

46
Tree	boolean n = NUMBER_CONSTANT * n - n ;
Code	boolean n = NUMBER_CONSTANT * n - n ;
Distance : 5

47
Tree	char n = NUMBER_CONSTANT * n - j ;
Code	char n = NUMBER_CONSTANT * n - j ;
Distance : 5

48
Tree	float n = NUMBER_CONSTANT * n - j ;
Code	float n = NUMBER_CONSTANT * n - j ;
Distance : 5

49
Tree	double n = NUMBER_CONSTANT * j - j ;
Code	double n = NUMBER_CONSTANT * j - j ;
Distance : 6

50
Tree	long n = NUMBER_CONSTANT * j - j ;
Code	long n = NUMBER_CONSTANT * j - j ;
Distance : 6

51
Tree	byte n = NUMBER_CONSTANT * n - n ;
Code	byte n = NUMBER_CONSTANT * n - n ;
Distance : 5

52
Tree	char n = NUMBER_CONSTANT * n - n ;
Code	char n = NUMBER_CONSTANT * n - n ;
Distance : 5

53
Tree	short n = NUMBER_CONSTANT * n - j ;
Code	short n = NUMBER_CONSTANT * n - j ;
Distance : 5

54
Tree	float n = NUMBER_CONSTANT * n - n ;
Code	float n = NUMBER_CONSTANT * n - n ;
Distance : 5

55
Tree	double n = NUMBER_CONSTANT * j - n ;
Code	double n = NUMBER_CONSTANT * j - n ;
Distance : 6

56
Tree	void n = NUMBER_CONSTANT * n - j ;
Code	void n = NUMBER_CONSTANT * n - j ;
Distance : 5

57
Tree	long n = NUMBER_CONSTANT * j - n ;
Code	long n = NUMBER_CONSTANT * j - n ;
Distance : 6

58
Tree	boolean n = NUMBER_CONSTANT * j - j ;
Code	boolean n = NUMBER_CONSTANT * j - j ;
Distance : 6

59
Tree	short n = NUMBER_CONSTANT * n - n ;
Code	short n = NUMBER_CONSTANT * n - n ;
Distance : 5

60
Tree	byte n = NUMBER_CONSTANT * j - j ;
Code	byte n = NUMBER_CONSTANT * j - j ;
Distance : 6

61
Tree	void n = NUMBER_CONSTANT * n - n ;
Code	void n = NUMBER_CONSTANT * n - n ;
Distance : 5

62
Tree	boolean n = NUMBER_CONSTANT * j - n ;
Code	boolean n = NUMBER_CONSTANT * j - n ;
Distance : 6

63
Tree	char n = NUMBER_CONSTANT * j - j ;
Code	char n = NUMBER_CONSTANT * j - j ;
Distance : 6

64
Tree	float n = NUMBER_CONSTANT * j - j ;
Code	float n = NUMBER_CONSTANT * j - j ;
Distance : 6

65
Tree	byte n = NUMBER_CONSTANT * j - n ;
Code	byte n = NUMBER_CONSTANT * j - n ;
Distance : 6

66
Tree	char n = NUMBER_CONSTANT * j - n ;
Code	char n = NUMBER_CONSTANT * j - n ;
Distance : 6

67
Tree	short n = NUMBER_CONSTANT * j - j ;
Code	short n = NUMBER_CONSTANT * j - j ;
Distance : 6

68
Tree	float n = NUMBER_CONSTANT * j - n ;
Code	float n = NUMBER_CONSTANT * j - n ;
Distance : 6

69
Tree	void n = NUMBER_CONSTANT * j - j ;
Code	void n = NUMBER_CONSTANT * j - j ;
Distance : 6

70
Tree	short n = NUMBER_CONSTANT * j - n ;
Code	short n = NUMBER_CONSTANT * j - n ;
Distance : 6

71
Tree	void n = NUMBER_CONSTANT * j - n ;
Code	void n = NUMBER_CONSTANT * j - n ;
Distance : 6

72
Tree	int j = NUMBER_CONSTANT * n - j ; +
Code	int j = NUMBER_CONSTANT * n - j ; +
Distance : 4

73
Tree	int j = NUMBER_CONSTANT * n - j ; ,
Code	int j = NUMBER_CONSTANT * n - j ; ,
Distance : 4

74
Tree	int j = NUMBER_CONSTANT * n - j ; .
Code	int j = NUMBER_CONSTANT * n - j ; .
Distance : 4

75
Tree	int j = NUMBER_CONSTANT * n - j ; <blank>
Code	int j = NUMBER_CONSTANT * n - j ; <blank>
Distance : 4

76
Tree	int j = NUMBER_CONSTANT * n - j ; )
Code	int j = NUMBER_CONSTANT * n - j ; )
Distance : 4

77
Tree	int j = NUMBER_CONSTANT * n - j ; ;
Code	int j = NUMBER_CONSTANT * n - j ; ;
Distance : 3

78
Tree	int j = NUMBER_CONSTANT * n - j ; STRING_CONSTANT
Code	int j = NUMBER_CONSTANT * n - j ; STRING_CONSTANT
Distance : 4

79
Tree	int j = NUMBER_CONSTANT * n - j ; ;
Code	int j = NUMBER_CONSTANT * n - j ; ;
Distance : 3

80
Tree	int j = NUMBER_CONSTANT * n - j ; <s>
Code	int j = NUMBER_CONSTANT * n - j ; <s>
Distance : 4

81
Tree	int j = NUMBER_CONSTANT * n - j ; (
Code	int j = NUMBER_CONSTANT * n - j ; (
Distance : 4

82
Tree	int j = NUMBER_CONSTANT * n - j ; return
Code	int j = NUMBER_CONSTANT * n - j ; return
Distance : 4

83
Tree	int j = NUMBER_CONSTANT * n - j ; NUMBER_CONSTANT
Code	int j = NUMBER_CONSTANT * n - j ; NUMBER_CONSTANT
Distance : 4

84
Tree	int j = NUMBER_CONSTANT * n - j ; >
Code	int j = NUMBER_CONSTANT * n - j ; >
Distance : 4

85
Tree	int j = NUMBER_CONSTANT * n - j ; null
Code	int j = NUMBER_CONSTANT * n - j ; null
Distance : 4

86
Tree	int j = NUMBER_CONSTANT * n - j ; String
Code	int j = NUMBER_CONSTANT * n - j ; String
Distance : 4

87
Tree	int j = NUMBER_CONSTANT * n - j ; public
Code	int j = NUMBER_CONSTANT * n - j ; public
Distance : 4

88
Tree	int j = NUMBER_CONSTANT * n - j ; final
Code	int j = NUMBER_CONSTANT * n - j ; final
Distance : 4

89
Tree	int j = NUMBER_CONSTANT * n - j ; this
Code	int j = NUMBER_CONSTANT * n - j ; this
Distance : 4

90
Tree	int j = NUMBER_CONSTANT * n - j ; <
Code	int j = NUMBER_CONSTANT * n - j ; <
Distance : 4

91
Tree	int j = NUMBER_CONSTANT * n - j ; if
Code	int j = NUMBER_CONSTANT * n - j ; if
Distance : 4

92
Tree	int j = NUMBER_CONSTANT * n - j ; =
Code	int j = NUMBER_CONSTANT * n - j ; =
Distance : 4

93
Tree	int j = NUMBER_CONSTANT * n - j ; }
Code	int j = NUMBER_CONSTANT * n - j ; }
Distance : 4

94
Tree	int j = NUMBER_CONSTANT * n - j ; ()
Code	int j = NUMBER_CONSTANT * n - j ; ()
Distance : 4

95
Tree	int j = NUMBER_CONSTANT * n - j ; {
Code	int j = NUMBER_CONSTANT * n - j ; {
Distance : 4

96
Tree	int j = NUMBER_CONSTANT * n - j ; compiler
Code	int j = NUMBER_CONSTANT * n - j ; compiler
Distance : 4

97
Tree	int j = NUMBER_CONSTANT * n - j ; e
Code	int j = NUMBER_CONSTANT * n - j ; e
Distance : 4

98
Tree	int j = NUMBER_CONSTANT * n - j ; n
Code	int j = NUMBER_CONSTANT * n - j ; n
Distance : 4

99
Tree	int j = NUMBER_CONSTANT * n - j ; new
Code	int j = NUMBER_CONSTANT * n - j ; new
Distance : 4

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } value
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } value
Distance : 9

1
Tree	{ return getCumPct ( ( ( v ) Comparable . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( v ) Comparable . getCumPct () ) . Comparable ) ; }
Distance : 9

2
Tree	{ return getPct ( ( ( Comparable ) Comparable . getPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) Comparable . getPct () ) . Comparable ) ; }
Distance : 8

3
Tree	{ return getPct ( ( ( Comparable ) Comparable . getCumPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) Comparable . getCumPct () ) . Comparable ) ; }
Distance : 8

4
Tree	{ return getPct ( ( ( v ) Comparable . getPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( v ) Comparable . getPct () ) . Comparable ) ; }
Distance : 8

5
Tree	{ return getPct ( ( ( v ) Comparable . getCumPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( v ) Comparable . getCumPct () ) . Comparable ) ; }
Distance : 8

6
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } i
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } i
Distance : 9

7
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } assertEquals
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } assertEquals
Distance : 9

8
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } false
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } false
Distance : 9

9
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } int
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } int
Distance : 9

10
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } @
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } @
Distance : 9

11
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } test
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } test
Distance : 9

12
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } nullNotPermitted
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } nullNotPermitted
Distance : 9

13
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } []
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } []
Distance : 9

14
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } !
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } !
Distance : 9

15
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } checkState
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } checkState
Distance : 9

16
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } !=
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } !=
Distance : 9

17
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } super
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } super
Distance : 9

18
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } double
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } double
Distance : 9

19
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } try
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } try
Distance : 9

20
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } fail
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } fail
Distance : 9

21
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Args
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Args
Distance : 9

22
Tree	{ return getCumPct ( ( ( v ) Comparable . getPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( v ) Comparable . getPct () ) . Comparable ) ; }
Distance : 9

23
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } List
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } List
Distance : 9

24
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct () ) . Comparable ) ; }
Distance : 9

25
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getPct () ) . Comparable ) ; }
Distance : 9

26
Tree	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 9

27
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 9

28
Tree	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 7

29
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 7

30
Tree	{ return getPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 8

31
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Distance : 9

32
Tree	{ return getPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 8

33
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Distance : 9

34
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getPct () ) . v ) ; }
Distance : 8

35
Tree	{ return getCumPct ( ( ( v ) v . getPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct () ) . Comparable ) ; }
Distance : 10

36
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct () ) . v ) ; }
Distance : 8

37
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . Comparable ) ; }
Distance : 10

38
Tree	{ return getCumPct ( ( ( v ) Comparable . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) Comparable . getPct () ) . v ) ; }
Distance : 8

39
Tree	{ return getPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Distance : 8

40
Tree	{ return getCumPct ( ( ( v ) Comparable . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) Comparable . getCumPct () ) . v ) ; }
Distance : 8

41
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Distance : 8

42
Tree	{ return getPct ( ( ( Comparable ) Comparable . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) Comparable . getPct () ) . v ) ; }
Distance : 7

43
Tree	{ return getPct ( ( ( v ) v . getPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( v ) v . getPct () ) . Comparable ) ; }
Distance : 9

44
Tree	{ return getPct ( ( ( Comparable ) Comparable . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) Comparable . getCumPct () ) . v ) ; }
Distance : 7

45
Tree	{ return getPct ( ( ( v ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( v ) v . getCumPct () ) . Comparable ) ; }
Distance : 9

46
Tree	{ return getPct ( ( ( v ) Comparable . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( v ) Comparable . getPct () ) . v ) ; }
Distance : 7

47
Tree	{ return getPct ( ( ( v ) Comparable . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( v ) Comparable . getCumPct () ) . v ) ; }
Distance : 7

48
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } MathRuntimeException
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } MathRuntimeException
Distance : 9

49
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 8

50
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } true
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } true
Distance : 9

51
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } n
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } n
Distance : 9

52
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } e
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } e
Distance : 9

53
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } String
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } String
Distance : 9

54
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } compiler
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } compiler
Distance : 9

55
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <
Distance : 9

56
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } this
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } this
Distance : 9

57
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } final
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } final
Distance : 9

58
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } if
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } if
Distance : 9

59
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } >
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } >
Distance : 9

60
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } null
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } null
Distance : 9

61
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } +
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } +
Distance : 9

62
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ,
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ,
Distance : 9

63
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } .
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } .
Distance : 9

64
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } )
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } )
Distance : 9

65
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <blank>
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <blank>
Distance : 9

66
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } public
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } public
Distance : 9

67
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 8

68
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } throw
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } throw
Distance : 9

69
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } catch
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } catch
Distance : 9

70
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } void
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } void
Distance : 9

71
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ==
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ==
Distance : 9

72
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } &&
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } &&
Distance : 9

73
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } T
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } T
Distance : 9

74
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ;
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ;
Distance : 9

75
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } {
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } {
Distance : 9

76
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } mode
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } mode
Distance : 9

77
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <s>
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <s>
Distance : 9

78
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } -
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } -
Distance : 9

79
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Preconditions
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Preconditions
Distance : 9

80
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } [
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } [
Distance : 9

81
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ]
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ]
Distance : 9

82
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } class
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } class
Distance : 9

83
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Object
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Object
Distance : 9

84
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } mock
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } mock
Distance : 9

85
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Override
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } Override
Distance : 9

86
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } f
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } f
Distance : 9

87
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ParamChecks
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ParamChecks
Distance : 9

88
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } array
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } array
Distance : 9

89
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <>
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } <>
Distance : 9

90
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } return
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } return
Distance : 9

91
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } NUMBER_CONSTANT
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } NUMBER_CONSTANT
Distance : 9

92
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } STRING_CONSTANT
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } STRING_CONSTANT
Distance : 9

93
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } new
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } new
Distance : 9

94
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } {
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } {
Distance : 9

95
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ()
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } ()
Distance : 9

96
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } }
Distance : 9

97
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } =
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } =
Distance : 9

98
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } (
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } (
Distance : 9

99
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } {}
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; } {}
Distance : 9

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return solve ( min , max ) ; } i
Code	{ return solve ( min , max ) ; } i
Distance : 3

1
Tree	{ return solve ( min , max ) ; } void
Code	{ return solve ( min , max ) ; } void
Distance : 3

2
Tree	{ return solve ( min , max ) ; } class
Code	{ return solve ( min , max ) ; } class
Distance : 3

3
Tree	{ return solve ( min , max ) ; } Object
Code	{ return solve ( min , max ) ; } Object
Distance : 3

4
Tree	{ return solve ( min , max ) ; } mock
Code	{ return solve ( min , max ) ; } mock
Distance : 3

5
Tree	{ return solve ( min , max ) ; } MathRuntimeException
Code	{ return solve ( min , max ) ; } MathRuntimeException
Distance : 3

6
Tree	{ return solve ( min , max ) ; } FastMath
Code	{ return solve ( min , max ) ; } FastMath
Distance : 3

7
Tree	{ return solve ( min , max ) ; } IllegalArgumentException
Code	{ return solve ( min , max ) ; } IllegalArgumentException
Distance : 3

8
Tree	{ return solve ( min , max ) ; } invocation
Code	{ return solve ( min , max ) ; } invocation
Distance : 3

9
Tree	{ return solve ( min , max ) ; } Args
Code	{ return solve ( min , max ) ; } Args
Distance : 3

10
Tree	{ return solve ( min , max ) ; } <>
Code	{ return solve ( min , max ) ; } <>
Distance : 3

11
Tree	{ return solve ( min , max ) ; } List
Code	{ return solve ( min , max ) ; } List
Distance : 3

12
Tree	{ return solve ( min , max ) ; } expected
Code	{ return solve ( min , max ) ; } expected
Distance : 3

13
Tree	{ return solve ( min , max ) ; } fireChangeEvent
Code	{ return solve ( min , max ) ; } fireChangeEvent
Distance : 3

14
Tree	{ return solve ( min , max ) ; } serialised
Code	{ return solve ( min , max ) ; } serialised
Distance : 3

15
Tree	{ return solve ( min , max ) ; } type
Code	{ return solve ( min , max ) ; } type
Distance : 3

16
Tree	{ return solve ( min , max ) ; } getInstance
Code	{ return solve ( min , max ) ; } getInstance
Distance : 3

17
Tree	{ return solve ( min , max ) ; } paint
Code	{ return solve ( min , max ) ; } paint
Distance : 3

18
Tree	{ return solve ( min , max ) ; } m
Code	{ return solve ( min , max ) ; } m
Distance : 3

19
Tree	{ return solve ( min , max ) ; } join
Code	{ return solve ( min , max ) ; } join
Distance : 3

20
Tree	{ return solve ( min , max ) ; } fail
Code	{ return solve ( min , max ) ; } fail
Distance : 3

21
Tree	{ return solve ( min , max ) ; } !=
Code	{ return solve ( min , max ) ; } !=
Distance : 3

22
Tree	{ return solve ( min , max ) ; } throw
Code	{ return solve ( min , max ) ; } throw
Distance : 3

23
Tree	{ return solve ( min , max ) ; } Override
Code	{ return solve ( min , max ) ; } Override
Distance : 3

24
Tree	{ return solve ( min , max ) ; } compiler
Code	{ return solve ( min , max ) ; } compiler
Distance : 3

25
Tree	{ return solve ( min , max ) ; } ParamChecks
Code	{ return solve ( min , max ) ; } ParamChecks
Distance : 3

26
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

27
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

28
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

29
Tree	{ return solve ( f , min ) ; }
Code	{ return solve ( f , min ) ; }
Distance : 2

30
Tree	{ return solve ( min , f ) ; }
Code	{ return solve ( min , f ) ; }
Distance : 3

31
Tree	{ return solve ( max , f ) ; }
Code	{ return solve ( max , f ) ; }
Distance : 4

32
Tree	{ return solve ( f , f ) ; }
Code	{ return solve ( f , f ) ; }
Distance : 3

33
Tree	{ return solve ( min , max ) ; } checkState
Code	{ return solve ( min , max ) ; } checkState
Distance : 3

34
Tree	{ return solve ( min , max ) ; } f
Code	{ return solve ( min , max ) ; } f
Distance : 3

35
Tree	{ return solve ( min , max ) ; } array
Code	{ return solve ( min , max ) ; } array
Distance : 3

36
Tree	{ return solve ( min , max ) ; } boolean
Code	{ return solve ( min , max ) ; } boolean
Distance : 3

37
Tree	{ return solve ( min , max ) ; } result
Code	{ return solve ( min , max ) ; } result
Distance : 3

38
Tree	{ return solve ( min , max ) ; } try
Code	{ return solve ( min , max ) ; } try
Distance : 3

39
Tree	{ return solve ( min , max ) ; } :
Code	{ return solve ( min , max ) ; } :
Distance : 3

40
Tree	{ return solve ( min , max ) ; } double
Code	{ return solve ( min , max ) ; } double
Distance : 3

41
Tree	{ return solve ( min , max ) ; } false
Code	{ return solve ( min , max ) ; } false
Distance : 3

42
Tree	{ return solve ( min , max ) ; } e
Code	{ return solve ( min , max ) ; } e
Distance : 3

43
Tree	{ return solve ( min , max ) ; } super
Code	{ return solve ( min , max ) ; } super
Distance : 3

44
Tree	{ return solve ( min , max ) ; } [
Code	{ return solve ( min , max ) ; } [
Distance : 3

45
Tree	{ return solve ( min , max ) ; } n
Code	{ return solve ( min , max ) ; } n
Distance : 3

46
Tree	{ return solve ( min , max ) ; } +
Code	{ return solve ( min , max ) ; } +
Distance : 3

47
Tree	{ return solve ( min , max ) ; } catch
Code	{ return solve ( min , max ) ; } catch
Distance : 3

48
Tree	{ return solve ( min , max ) ; } true
Code	{ return solve ( min , max ) ; } true
Distance : 3

49
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

50
Tree	{ return solve ( min , max ) ; } &&
Code	{ return solve ( min , max ) ; } &&
Distance : 3

51
Tree	{ return solve ( min , max ) ; } this
Code	{ return solve ( min , max ) ; } this
Distance : 3

52
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

53
Tree	{ return solve ( min , max ) ; } Preconditions
Code	{ return solve ( min , max ) ; } Preconditions
Distance : 3

54
Tree	{ return solve ( min , max ) ; } null
Code	{ return solve ( min , max ) ; } null
Distance : 3

55
Tree	{ return solve ( min , max ) ; } mode
Code	{ return solve ( min , max ) ; } mode
Distance : 3

56
Tree	{ return solve ( min , max ) ; } ]
Code	{ return solve ( min , max ) ; } ]
Distance : 3

57
Tree	{ return solve ( min , max ) ; } {}
Code	{ return solve ( min , max ) ; } {}
Distance : 3

58
Tree	{ return solve ( min , max ) ; } *
Code	{ return solve ( min , max ) ; } *
Distance : 3

59
Tree	{ return solve ( min , max ) ; } testSame
Code	{ return solve ( min , max ) ; } testSame
Distance : 3

60
Tree	{ return solve ( min , max ) ; } createIllegalArgumentException
Code	{ return solve ( min , max ) ; } createIllegalArgumentException
Distance : 3

61
Tree	{ return solve ( min , max ) ; } ArrayList
Code	{ return solve ( min , max ) ; } ArrayList
Distance : 3

62
Tree	{ return solve ( min , max ) ; } parent
Code	{ return solve ( min , max ) ; } parent
Distance : 3

63
Tree	{ return solve ( min , max ) ; } LINE_JOINER
Code	{ return solve ( min , max ) ; } LINE_JOINER
Distance : 3

64
Tree	{ return solve ( min , max ) ; } x
Code	{ return solve ( min , max ) ; } x
Distance : 3

65
Tree	{ return solve ( min , max ) ; } str
Code	{ return solve ( min , max ) ; } str
Distance : 3

66
Tree	{ return solve ( min , max ) ; } assertThat
Code	{ return solve ( min , max ) ; } assertThat
Distance : 3

67
Tree	{ return solve ( min , max ) ; } int
Code	{ return solve ( min , max ) ; } int
Distance : 3

68
Tree	{ return solve ( min , max ) ; } value
Code	{ return solve ( min , max ) ; } value
Distance : 3

69
Tree	{ return solve ( min , max ) ; } T
Code	{ return solve ( min , max ) ; } T
Distance : 3

70
Tree	{ return solve ( min , max ) ; } if
Code	{ return solve ( min , max ) ; } if
Distance : 3

71
Tree	{ return solve ( min , max ) ; } new
Code	{ return solve ( min , max ) ; } new
Distance : 3

72
Tree	{ return solve ( min , max ) ; } public
Code	{ return solve ( min , max ) ; } public
Distance : 3

73
Tree	{ return solve ( min , max ) ; } return
Code	{ return solve ( min , max ) ; } return
Distance : 3

74
Tree	{ return solve ( min , max ) ; } final
Code	{ return solve ( min , max ) ; } final
Distance : 3

75
Tree	{ return solve ( min , max ) ; } >
Code	{ return solve ( min , max ) ; } >
Distance : 3

76
Tree	{ return solve ( min , max ) ; } NUMBER_CONSTANT
Code	{ return solve ( min , max ) ; } NUMBER_CONSTANT
Distance : 3

77
Tree	{ return solve ( min , max ) ; } <s>
Code	{ return solve ( min , max ) ; } <s>
Distance : 3

78
Tree	{ return solve ( min , max ) ; } {
Code	{ return solve ( min , max ) ; } {
Distance : 3

79
Tree	{ return solve ( min , max ) ; } <blank>
Code	{ return solve ( min , max ) ; } <blank>
Distance : 3

80
Tree	{ return solve ( min , max ) ; } ;
Code	{ return solve ( min , max ) ; } ;
Distance : 3

81
Tree	{ return solve ( min , max ) ; } )
Code	{ return solve ( min , max ) ; } )
Distance : 3

82
Tree	{ return solve ( min , max ) ; } .
Code	{ return solve ( min , max ) ; } .
Distance : 3

83
Tree	{ return solve ( min , max ) ; } <
Code	{ return solve ( min , max ) ; } <
Distance : 3

84
Tree	{ return solve ( min , max ) ; } }
Code	{ return solve ( min , max ) ; } }
Distance : 3

85
Tree	{ return solve ( min , max ) ; } {
Code	{ return solve ( min , max ) ; } {
Distance : 3

86
Tree	{ return solve ( min , max ) ; } ,
Code	{ return solve ( min , max ) ; } ,
Distance : 3

87
Tree	{ return solve ( min , max ) ; } ()
Code	{ return solve ( min , max ) ; } ()
Distance : 3

88
Tree	{ return solve ( min , max ) ; } STRING_CONSTANT
Code	{ return solve ( min , max ) ; } STRING_CONSTANT
Distance : 3

89
Tree	{ return solve ( min , max ) ; } =
Code	{ return solve ( min , max ) ; } =
Distance : 3

90
Tree	{ return solve ( min , max ) ; } (
Code	{ return solve ( min , max ) ; } (
Distance : 3

91
Tree	{ return solve ( min , max ) ; } test
Code	{ return solve ( min , max ) ; } test
Distance : 3

92
Tree	{ return solve ( min , max ) ; } assertEquals
Code	{ return solve ( min , max ) ; } assertEquals
Distance : 3

93
Tree	{ return solve ( min , max ) ; } @
Code	{ return solve ( min , max ) ; } @
Distance : 3

94
Tree	{ return solve ( min , max ) ; } []
Code	{ return solve ( min , max ) ; } []
Distance : 3

95
Tree	{ return solve ( min , max ) ; } ==
Code	{ return solve ( min , max ) ; } ==
Distance : 3

96
Tree	{ return solve ( min , max ) ; } nullNotPermitted
Code	{ return solve ( min , max ) ; } nullNotPermitted
Distance : 3

97
Tree	{ return solve ( min , max ) ; } !
Code	{ return solve ( min , max ) ; } !
Distance : 3

98
Tree	{ return solve ( min , max ) ; } String
Code	{ return solve ( min , max ) ; } String
Distance : 3

99
Tree	{ return solve ( min , max ) ; } -
Code	{ return solve ( min , max ) ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

1
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

2
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

3
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

4
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

5
Tree	t = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

6
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

7
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

8
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

9
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

10
Tree	i = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

11
Tree	i = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

12
Tree	j = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

13
Tree	tDistribution = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

14
Tree	tDistribution = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

15
Tree	i = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

16
Tree	tDistribution = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

17
Tree	j = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

18
Tree	j = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

19
Tree	tDistribution = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

20
Tree	j = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

21
Tree	i = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

22
Tree	i = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

23
Tree	j = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

24
Tree	tDistribution = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

25
Tree	i = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

26
Tree	i = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

27
Tree	t = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

28
Tree	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

29
Tree	j = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

30
Tree	tDistribution = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

31
Tree	j = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

32
Tree	tDistribution = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

33
Tree	j = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

34
Tree	t = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

35
Tree	t = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

36
Tree	j = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

37
Tree	j = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

38
Tree	i = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

39
Tree	tDistribution = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

40
Tree	i = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

41
Tree	j = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

42
Tree	tDistribution = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

43
Tree	i = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

44
Tree	i = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

45
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

46
Tree	j = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

47
Tree	i = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

48
Tree	t = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

49
Tree	j = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

50
Tree	j = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

51
Tree	tDistribution = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

52
Tree	j = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

53
Tree	tDistribution = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

54
Tree	j = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

55
Tree	i = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

56
Tree	j = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

57
Tree	j = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

58
Tree	i = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

59
Tree	t = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

60
Tree	i = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

61
Tree	tDistribution = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

62
Tree	tDistribution = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

63
Tree	j = ( ( RandomSource.State == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( RandomSource.State == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

64
Tree	tDistribution = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

65
Tree	t = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( Boolean.TRUE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

66
Tree	j = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

67
Tree	i = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

68
Tree	j = ( ( metadata.superClassNameNode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( metadata.superClassNameNode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

69
Tree	tDistribution = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

70
Tree	j = ( ( ThrowsException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( ThrowsException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

71
Tree	i = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

72
Tree	j = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

73
Tree	i = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

74
Tree	i = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

75
Tree	j = ( ( TimePeriodValue == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( TimePeriodValue == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

76
Tree	t = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

77
Tree	j = ( ( RandomSource.TWO_CMRES == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( RandomSource.TWO_CMRES == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

78
Tree	t = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

79
Tree	i = ( ( RandomSource.State == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( RandomSource.State == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

80
Tree	j = ( ( v.data == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( v.data == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

81
Tree	i = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

82
Tree	i = ( ( metadata.superClassNameNode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( metadata.superClassNameNode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

83
Tree	i = ( ( ThrowsException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( ThrowsException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

84
Tree	i = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

85
Tree	j = ( ( Cartesian3D.ZERO == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( Cartesian3D.ZERO == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

86
Tree	tDistribution = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

87
Tree	i = ( ( TimePeriodValue == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( TimePeriodValue == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

88
Tree	tDistribution = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

89
Tree	tDistribution = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

90
Tree	j = ( ( values.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( values.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

91
Tree	j = ( ( DstNormalization.STANDARD_DST_I == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( DstNormalization.STANDARD_DST_I == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

92
Tree	i = ( ( RandomSource.TWO_CMRES == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( RandomSource.TWO_CMRES == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

93
Tree	j = ( ( to.finalField == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( to.finalField == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

94
Tree	tDistribution = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

95
Tree	tDistribution = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

96
Tree	j = ( ( FeatureSet.TYPESCRIPT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FeatureSet.TYPESCRIPT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

97
Tree	i = ( ( v.data == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( v.data == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

98
Tree	j = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

99
Tree	tDistribution = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } value
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } value
Distance : 2

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ParamChecks
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ParamChecks
Distance : 2

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } class
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } class
Distance : 2

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Override
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Override
Distance : 2

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ArrayList
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ArrayList
Distance : 2

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } IllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } IllegalArgumentException
Distance : 2

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } FastMath
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } FastMath
Distance : 2

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } expected
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } expected
Distance : 2

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportCodeChange
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportCodeChange
Distance : 2

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } List
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } List
Distance : 2

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Args
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Args
Distance : 2

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fail
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fail
Distance : 2

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } try
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } try
Distance : 2

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fireChangeEvent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fireChangeEvent
Distance : 2

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mock
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mock
Distance : 2

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getInstance
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getInstance
Distance : 2

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } serialised
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } serialised
Distance : 2

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } join
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } join
Distance : 2

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } paint
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } paint
Distance : 2

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } *
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } *
Distance : 2

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } type
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } type
Distance : 2

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } i
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } i
Distance : 2

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ==
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ==
Distance : 2

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Object
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Object
Distance : 2

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } void
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } void
Distance : 2

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throw
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throw
Distance : 2

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 2

27
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Distance : 2

29
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 2

30
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 3

31
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Distance : 3

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } super
Distance : 2

33
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } array
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } array
Distance : 2

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <>
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <>
Distance : 2

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } m
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } m
Distance : 2

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } boolean
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } boolean
Distance : 2

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } :
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } :
Distance : 2

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } result
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } result
Distance : 2

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkState
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkState
Distance : 2

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } double
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } double
Distance : 2

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } e
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } e
Distance : 2

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !=
Distance : 2

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } compiler
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } compiler
Distance : 2

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } String
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } String
Distance : 2

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } f
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } f
Distance : 2

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } n
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } n
Distance : 2

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } catch
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } catch
Distance : 2

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ]
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ]
Distance : 2

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Preconditions
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Preconditions
Distance : 2

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } final
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } final
Distance : 2

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 1

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } -
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } -
Distance : 2

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } null
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } null
Distance : 2

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mode
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mode
Distance : 2

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } true
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } true
Distance : 2

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {}
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {}
Distance : 2

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathRuntimeException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathRuntimeException
Distance : 2

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } T
Distance : 2

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } x
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } x
Distance : 2

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } parent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } parent
Distance : 2

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } createIllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } createIllegalArgumentException
Distance : 2

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } str
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } str
Distance : 2

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LINE_JOINER
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LINE_JOINER
Distance : 2

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertThat
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertThat
Distance : 2

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocation
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocation
Distance : 2

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } false
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } false
Distance : 2

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } int
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } int
Distance : 2

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } testSame
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } testSame
Distance : 2

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } &&
Distance : 2

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } >
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } >
Distance : 2

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NUMBER_CONSTANT
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NUMBER_CONSTANT
Distance : 2

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } public
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } public
Distance : 2

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } this
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } this
Distance : 2

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <
Distance : 2

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } if
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } if
Distance : 2

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } (
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } (
Distance : 2

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } return
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } return
Distance : 2

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ;
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ;
Distance : 2

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <blank>
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <blank>
Distance : 2

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ;
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ;
Distance : 2

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <s>
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <s>
Distance : 2

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } .
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } .
Distance : 2

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ,
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ,
Distance : 2

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } =
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } =
Distance : 2

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } }
Distance : 2

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ()
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ()
Distance : 2

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {
Distance : 2

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } new
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } new
Distance : 2

90
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } STRING_CONSTANT
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } STRING_CONSTANT
Distance : 2

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } )
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } )
Distance : 2

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } @
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } @
Distance : 2

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } test
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } test
Distance : 2

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } nullNotPermitted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } nullNotPermitted
Distance : 2

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } []
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } []
Distance : 2

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !
Distance : 2

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertEquals
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertEquals
Distance : 2

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } +
Distance : 2

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } [
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } [
Distance : 2

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

1
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

2
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

3
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

4
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

5
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

6
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

7
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

8
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

9
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

10
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

11
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

12
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

13
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

14
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

15
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

16
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

17
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

18
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

19
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

20
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

21
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

22
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

23
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

24
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

25
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

26
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

27
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

28
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

29
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

30
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

31
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

32
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

33
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

34
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

35
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

36
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

37
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

38
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

39
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

40
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

41
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

42
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

43
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

44
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

45
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

46
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( Float ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( Float ) b , b ) , b ) ; }
Distance : 17

47
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

48
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

49
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

50
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

51
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

52
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

53
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

54
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

55
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( void ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( void ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

56
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

57
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) Float , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) Float , b ) , b ) ; }
Distance : 17

58
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

59
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 16

60
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 17

61
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

62
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

63
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

64
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , a ) ; }
Distance : 16

65
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , a ) , b ) ; }
Distance : 17

66
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

67
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

68
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

69
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

70
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

71
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

72
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

73
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

74
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

75
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

76
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

77
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

78
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

79
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

80
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

81
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , Float ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , Float ) ; }
Distance : 16

82
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

83
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

84
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

85
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

86
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

87
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , a ) ; }
Distance : 16

88
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

89
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( Float ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( Float ) b , b ) , b ) ; }
Distance : 17

90
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

91
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

92
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

93
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 18

94
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

95
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

96
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

97
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) Float , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) Float , b ) , b ) ; }
Distance : 17

98
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

99
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; i
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; i
Distance : 12

1
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; createIllegalArgumentException
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; createIllegalArgumentException
Distance : 12

2
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; checkArgument
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; checkArgument
Distance : 12

3
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; data
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; data
Distance : 12

4
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ; . fit () ) ; add
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ; . fit () ) ; add
Distance : 12

5
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; paint
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; paint
Distance : 12

6
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; m
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; m
Distance : 12

7
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; join
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; join
Distance : 12

8
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; NodeTraversal
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; NodeTraversal
Distance : 12

9
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; fail
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; fail
Distance : 12

10
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; List
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; List
Distance : 12

11
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; <>
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; <>
Distance : 12

12
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Args
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Args
Distance : 12

13
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; :
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; :
Distance : 12

14
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; try
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; try
Distance : 12

15
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; result
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; result
Distance : 12

16
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; *
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; *
Distance : 12

17
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; assertThat
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; assertThat
Distance : 12

18
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; str
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; str
Distance : 12

19
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; x
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; x
Distance : 12

20
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; LINE_JOINER
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; LINE_JOINER
Distance : 12

21
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; parent
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; parent
Distance : 12

22
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; testSame
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; testSame
Distance : 12

23
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ArrayList
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ArrayList
Distance : 12

24
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; expected
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; expected
Distance : 12

25
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; int
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; int
Distance : 12

26
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; invocation
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; invocation
Distance : 12

27
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; FastMath
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; FastMath
Distance : 12

28
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; t
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; t
Distance : 12

29
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; reportCodeChange
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; reportCodeChange
Distance : 12

30
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; field
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; field
Distance : 12

31
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; boolean
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; boolean
Distance : 12

32
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; fireChangeEvent
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; fireChangeEvent
Distance : 12

33
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; serialised
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; serialised
Distance : 12

34
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; type
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; type
Distance : 12

35
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; getInstance
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; getInstance
Distance : 12

36
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; false
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; false
Distance : 12

37
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; !=
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; !=
Distance : 12

38
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; checkState
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; checkState
Distance : 12

39
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; super
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; super
Distance : 12

40
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; !
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; !
Distance : 12

41
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; nullNotPermitted
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; nullNotPermitted
Distance : 12

42
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ==
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ==
Distance : 12

43
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; []
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; []
Distance : 12

44
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; @
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; @
Distance : 12

45
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; assertEquals
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; assertEquals
Distance : 12

46
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; test
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; test
Distance : 12

47
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; IllegalArgumentException
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; IllegalArgumentException
Distance : 12

48
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Object
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Object
Distance : 12

49
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ;
Distance : 11

50
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ]
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ]
Distance : 12

51
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Preconditions
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Preconditions
Distance : 12

52
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; &&
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; &&
Distance : 12

53
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; -
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; -
Distance : 12

54
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; [
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; [
Distance : 12

55
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ParamChecks
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ParamChecks
Distance : 12

56
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ; . fit () ) ; Override
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ; . fit () ) ; Override
Distance : 12

57
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; MathRuntimeException
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; MathRuntimeException
Distance : 12

58
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; mock
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; mock
Distance : 12

59
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; f
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; f
Distance : 12

60
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; class
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; class
Distance : 12

61
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; array
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; array
Distance : 12

62
Tree	return return . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; name
Code	return return . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; name
Distance : 12

63
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; T
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; T
Distance : 12

64
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; void
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; void
Distance : 12

65
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; compiler
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; compiler
Distance : 12

66
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; throw
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; throw
Distance : 12

67
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; e
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; e
Distance : 12

68
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; +
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; +
Distance : 12

69
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; n
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; n
Distance : 12

70
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; catch
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; catch
Distance : 12

71
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; <
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; <
Distance : 12

72
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; final
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; final
Distance : 12

73
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; true
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; true
Distance : 12

74
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; return
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; return
Distance : 12

75
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; >
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; >
Distance : 12

76
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; this
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; this
Distance : 12

77
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; if
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; if
Distance : 12

78
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; public
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; public
Distance : 12

79
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; String
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; String
Distance : 12

80
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; }
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; }
Distance : 12

81
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; .
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; .
Distance : 12

82
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; (
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; (
Distance : 12

83
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ;
Distance : 12

84
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; <blank>
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; <blank>
Distance : 12

85
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ;
Distance : 12

86
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; double
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; double
Distance : 12

87
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; <s>
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; <s>
Distance : 12

88
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; STRING_CONSTANT
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; STRING_CONSTANT
Distance : 12

89
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; {
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; {
Distance : 12

90
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ,
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; ,
Distance : 12

91
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ()
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; ()
Distance : 12

92
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; new
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; new
Distance : 12

93
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; =
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; =
Distance : 12

94
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; NUMBER_CONSTANT
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; NUMBER_CONSTANT
Distance : 12

95
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; null
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; null
Distance : 12

96
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; {}
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; {}
Distance : 12

97
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; value
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; value
Distance : 12

98
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; )
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; )
Distance : 12

99
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; mode
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; mode
Distance : 12

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	int sum ; i
Code	int sum ; i
Distance : 4

1
Tree	int sum ; void
Code	int sum ; void
Distance : 4

2
Tree	int sum ; class
Code	int sum ; class
Distance : 4

3
Tree	int sum ; Object
Code	int sum ; Object
Distance : 4

4
Tree	int sum ; mock
Code	int sum ; mock
Distance : 4

5
Tree	int sum ; MathRuntimeException
Code	int sum ; MathRuntimeException
Distance : 4

6
Tree	int sum ; FastMath
Code	int sum ; FastMath
Distance : 4

7
Tree	int sum ; IllegalArgumentException
Code	int sum ; IllegalArgumentException
Distance : 4

8
Tree	int sum ; invocation
Code	int sum ; invocation
Distance : 4

9
Tree	int sum ; Args
Code	int sum ; Args
Distance : 4

10
Tree	int sum ; <>
Code	int sum ; <>
Distance : 4

11
Tree	int sum ; List
Code	int sum ; List
Distance : 4

12
Tree	int sum ; expected
Code	int sum ; expected
Distance : 4

13
Tree	int sum ; fireChangeEvent
Code	int sum ; fireChangeEvent
Distance : 4

14
Tree	int sum ; serialised
Code	int sum ; serialised
Distance : 4

15
Tree	int sum ; type
Code	int sum ; type
Distance : 4

16
Tree	int sum ; getInstance
Code	int sum ; getInstance
Distance : 4

17
Tree	int sum ; paint
Code	int sum ; paint
Distance : 4

18
Tree	int sum ; m
Code	int sum ; m
Distance : 4

19
Tree	int sum ; join
Code	int sum ; join
Distance : 4

20
Tree	int sum ; fail
Code	int sum ; fail
Distance : 4

21
Tree	int sum ; !=
Code	int sum ; !=
Distance : 4

22
Tree	int sum ; throw
Code	int sum ; throw
Distance : 4

23
Tree	int sum ; Override
Code	int sum ; Override
Distance : 4

24
Tree	int sum ; compiler
Code	int sum ; compiler
Distance : 4

25
Tree	int sum ; ParamChecks
Code	int sum ; ParamChecks
Distance : 4

26
Tree	long sum ;
Code	long sum ;
Distance : 3

27
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

28
Tree	byte sum ;
Code	byte sum ;
Distance : 3

29
Tree	char sum ;
Code	char sum ;
Distance : 3

30
Tree	float sum ;
Code	float sum ;
Distance : 3

31
Tree	short sum ;
Code	short sum ;
Distance : 3

32
Tree	void sum ;
Code	void sum ;
Distance : 3

33
Tree	int sum ; checkState
Code	int sum ; checkState
Distance : 4

34
Tree	int sum ; f
Code	int sum ; f
Distance : 4

35
Tree	int sum ; array
Code	int sum ; array
Distance : 4

36
Tree	int sum ; boolean
Code	int sum ; boolean
Distance : 4

37
Tree	int sum ; result
Code	int sum ; result
Distance : 4

38
Tree	int sum ; try
Code	int sum ; try
Distance : 4

39
Tree	int sum ; :
Code	int sum ; :
Distance : 4

40
Tree	int sum ; double
Code	int sum ; double
Distance : 4

41
Tree	int sum ; false
Code	int sum ; false
Distance : 4

42
Tree	int sum ; e
Code	int sum ; e
Distance : 4

43
Tree	int sum ; super
Code	int sum ; super
Distance : 4

44
Tree	int sum ; [
Code	int sum ; [
Distance : 4

45
Tree	int sum ; n
Code	int sum ; n
Distance : 4

46
Tree	int sum ; +
Code	int sum ; +
Distance : 4

47
Tree	int sum ; catch
Code	int sum ; catch
Distance : 4

48
Tree	int sum ; true
Code	int sum ; true
Distance : 4

49
Tree	int sum ;
Code	int sum ;
Distance : 3

50
Tree	int sum ; &&
Code	int sum ; &&
Distance : 4

51
Tree	int sum ; this
Code	int sum ; this
Distance : 4

52
Tree	double sum ;
Code	double sum ;
Distance : 2

53
Tree	int sum ; Preconditions
Code	int sum ; Preconditions
Distance : 4

54
Tree	int sum ; null
Code	int sum ; null
Distance : 4

55
Tree	int sum ; mode
Code	int sum ; mode
Distance : 4

56
Tree	int sum ; ]
Code	int sum ; ]
Distance : 4

57
Tree	int sum ; {}
Code	int sum ; {}
Distance : 4

58
Tree	int sum ; *
Code	int sum ; *
Distance : 4

59
Tree	int sum ; testSame
Code	int sum ; testSame
Distance : 4

60
Tree	int sum ; createIllegalArgumentException
Code	int sum ; createIllegalArgumentException
Distance : 4

61
Tree	int sum ; ArrayList
Code	int sum ; ArrayList
Distance : 4

62
Tree	int sum ; parent
Code	int sum ; parent
Distance : 4

63
Tree	int sum ; LINE_JOINER
Code	int sum ; LINE_JOINER
Distance : 4

64
Tree	int sum ; x
Code	int sum ; x
Distance : 4

65
Tree	int sum ; str
Code	int sum ; str
Distance : 4

66
Tree	int sum ; assertThat
Code	int sum ; assertThat
Distance : 4

67
Tree	int sum ; int
Code	int sum ; int
Distance : 4

68
Tree	int sum ; value
Code	int sum ; value
Distance : 4

69
Tree	int sum ; T
Code	int sum ; T
Distance : 4

70
Tree	int sum ; if
Code	int sum ; if
Distance : 4

71
Tree	int sum ; new
Code	int sum ; new
Distance : 4

72
Tree	int sum ; public
Code	int sum ; public
Distance : 4

73
Tree	int sum ; return
Code	int sum ; return
Distance : 4

74
Tree	int sum ; final
Code	int sum ; final
Distance : 4

75
Tree	int sum ; >
Code	int sum ; >
Distance : 4

76
Tree	int sum ; NUMBER_CONSTANT
Code	int sum ; NUMBER_CONSTANT
Distance : 3

77
Tree	int sum ; <s>
Code	int sum ; <s>
Distance : 4

78
Tree	int sum ; sum
Code	int sum ; sum
Distance : 4

79
Tree	int sum ; <blank>
Code	int sum ; <blank>
Distance : 4

80
Tree	int sum ; ;
Code	int sum ; ;
Distance : 3

81
Tree	int sum ; )
Code	int sum ; )
Distance : 4

82
Tree	int sum ; .
Code	int sum ; .
Distance : 4

83
Tree	int sum ; <
Code	int sum ; <
Distance : 4

84
Tree	int sum ; }
Code	int sum ; }
Distance : 4

85
Tree	int sum ; {
Code	int sum ; {
Distance : 4

86
Tree	int sum ; ,
Code	int sum ; ,
Distance : 4

87
Tree	int sum ; ()
Code	int sum ; ()
Distance : 4

88
Tree	int sum ; STRING_CONSTANT
Code	int sum ; STRING_CONSTANT
Distance : 4

89
Tree	int sum ; =
Code	int sum ; =
Distance : 4

90
Tree	int sum ; (
Code	int sum ; (
Distance : 4

91
Tree	int sum ; test
Code	int sum ; test
Distance : 4

92
Tree	int sum ; assertEquals
Code	int sum ; assertEquals
Distance : 4

93
Tree	int sum ; @
Code	int sum ; @
Distance : 4

94
Tree	int sum ; []
Code	int sum ; []
Distance : 4

95
Tree	int sum ; ==
Code	int sum ; ==
Distance : 4

96
Tree	int sum ; nullNotPermitted
Code	int sum ; nullNotPermitted
Distance : 4

97
Tree	int sum ; !
Code	int sum ; !
Distance : 4

98
Tree	int sum ; String
Code	int sum ; String
Distance : 4

99
Tree	int sum ; -
Code	int sum ; -
Distance : 4

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; <>
Code	Iterator iter = iterator ( res.entries ) ; <>
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; try
Code	Iterator iter = iterator ( res.entries ) ; try
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; testSame
Code	Iterator iter = iterator ( res.entries ) ; testSame
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; x
Code	Iterator iter = iterator ( res.entries ) ; x
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; ArrayList
Code	Iterator iter = iterator ( res.entries ) ; ArrayList
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Code	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; parent
Code	Iterator iter = iterator ( res.entries ) ; parent
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; invocation
Code	Iterator iter = iterator ( res.entries ) ; invocation
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Code	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

31
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

32
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

33
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

34
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

35
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

36
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

37
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

38
Tree	Iterator iter = iterator ( res.entries ) ; FastMath
Code	Iterator iter = iterator ( res.entries ) ; FastMath
Distance : 5

39
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

40
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

41
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

42
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

43
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

44
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

45
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

46
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

47
Tree	Iterator iter = iterator ( res.entries ) ; assertThat
Code	Iterator iter = iterator ( res.entries ) ; assertThat
Distance : 5

48
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

49
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

50
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

51
Tree	Iterator iter = iterator ( res.entries ) ; this
Code	Iterator iter = iterator ( res.entries ) ; this
Distance : 5

52
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

53
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

57
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

58
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

61
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

62
Tree	Iterator iter = iterator ( res.entries ) ; t
Code	Iterator iter = iterator ( res.entries ) ; t
Distance : 5

63
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

64
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

65
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

66
Tree	Iterator iter = iterator ( res.entries ) ; throw
Code	Iterator iter = iterator ( res.entries ) ; throw
Distance : 5

67
Tree	Iterator iter = iterator ( res.entries ) ; catch
Code	Iterator iter = iterator ( res.entries ) ; catch
Distance : 5

68
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

69
Tree	Iterator iter = iterator ( res.entries ) ; null
Code	Iterator iter = iterator ( res.entries ) ; null
Distance : 5

70
Tree	Iterator iter = iterator ( res.entries ) ; String
Code	Iterator iter = iterator ( res.entries ) ; String
Distance : 5

71
Tree	Iterator iter = iterator ( res.entries ) ; compiler
Code	Iterator iter = iterator ( res.entries ) ; compiler
Distance : 5

72
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

73
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

74
Tree	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Distance : 5

75
Tree	Iterator iter = iterator ( res.entries ) ; true
Code	Iterator iter = iterator ( res.entries ) ; true
Distance : 5

76
Tree	Iterator iter = iterator ( res.entries ) ; return
Code	Iterator iter = iterator ( res.entries ) ; return
Distance : 5

77
Tree	Iterator iter = iterator ( res.entries ) ; <
Code	Iterator iter = iterator ( res.entries ) ; <
Distance : 5

78
Tree	Iterator iter = iterator ( res.entries ) ; e
Code	Iterator iter = iterator ( res.entries ) ; e
Distance : 5

79
Tree	Iterator iter = iterator ( res.entries ) ; n
Code	Iterator iter = iterator ( res.entries ) ; n
Distance : 5

80
Tree	Iterator iter = iterator ( res.entries ) ; {
Code	Iterator iter = iterator ( res.entries ) ; {
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; ()
Code	Iterator iter = iterator ( res.entries ) ; ()
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; )
Code	Iterator iter = iterator ( res.entries ) ; )
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; if
Code	Iterator iter = iterator ( res.entries ) ; if
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; <blank>
Code	Iterator iter = iterator ( res.entries ) ; <blank>
Distance : 5

87
Tree	Iterator iter = iterator ( res.entries ) ; (
Code	Iterator iter = iterator ( res.entries ) ; (
Distance : 5

88
Tree	Iterator iter = iterator ( res.entries ) ; =
Code	Iterator iter = iterator ( res.entries ) ; =
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; }
Code	Iterator iter = iterator ( res.entries ) ; }
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; .
Code	Iterator iter = iterator ( res.entries ) ; .
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; new
Code	Iterator iter = iterator ( res.entries ) ; new
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; public
Code	Iterator iter = iterator ( res.entries ) ; public
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; mode
Code	Iterator iter = iterator ( res.entries ) ; mode
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; <s>
Code	Iterator iter = iterator ( res.entries ) ; <s>
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; final
Code	Iterator iter = iterator ( res.entries ) ; final
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; <>
Code	Iterator iter = iterator ( res.entries ) ; <>
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; try
Code	Iterator iter = iterator ( res.entries ) ; try
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; testSame
Code	Iterator iter = iterator ( res.entries ) ; testSame
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; x
Code	Iterator iter = iterator ( res.entries ) ; x
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; ArrayList
Code	Iterator iter = iterator ( res.entries ) ; ArrayList
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Code	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; parent
Code	Iterator iter = iterator ( res.entries ) ; parent
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; invocation
Code	Iterator iter = iterator ( res.entries ) ; invocation
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Code	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

31
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

32
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

33
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

34
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

35
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

36
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

37
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

38
Tree	Iterator iter = iterator ( res.entries ) ; FastMath
Code	Iterator iter = iterator ( res.entries ) ; FastMath
Distance : 5

39
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

40
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

41
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

42
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

43
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

44
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

45
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

46
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

47
Tree	Iterator iter = iterator ( res.entries ) ; assertThat
Code	Iterator iter = iterator ( res.entries ) ; assertThat
Distance : 5

48
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

49
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

50
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

51
Tree	Iterator iter = iterator ( res.entries ) ; this
Code	Iterator iter = iterator ( res.entries ) ; this
Distance : 5

52
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

53
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

57
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

58
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

61
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

62
Tree	Iterator iter = iterator ( res.entries ) ; t
Code	Iterator iter = iterator ( res.entries ) ; t
Distance : 5

63
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

64
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

65
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

66
Tree	Iterator iter = iterator ( res.entries ) ; throw
Code	Iterator iter = iterator ( res.entries ) ; throw
Distance : 5

67
Tree	Iterator iter = iterator ( res.entries ) ; catch
Code	Iterator iter = iterator ( res.entries ) ; catch
Distance : 5

68
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

69
Tree	Iterator iter = iterator ( res.entries ) ; null
Code	Iterator iter = iterator ( res.entries ) ; null
Distance : 5

70
Tree	Iterator iter = iterator ( res.entries ) ; String
Code	Iterator iter = iterator ( res.entries ) ; String
Distance : 5

71
Tree	Iterator iter = iterator ( res.entries ) ; compiler
Code	Iterator iter = iterator ( res.entries ) ; compiler
Distance : 5

72
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

73
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

74
Tree	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Distance : 5

75
Tree	Iterator iter = iterator ( res.entries ) ; true
Code	Iterator iter = iterator ( res.entries ) ; true
Distance : 5

76
Tree	Iterator iter = iterator ( res.entries ) ; return
Code	Iterator iter = iterator ( res.entries ) ; return
Distance : 5

77
Tree	Iterator iter = iterator ( res.entries ) ; <
Code	Iterator iter = iterator ( res.entries ) ; <
Distance : 5

78
Tree	Iterator iter = iterator ( res.entries ) ; e
Code	Iterator iter = iterator ( res.entries ) ; e
Distance : 5

79
Tree	Iterator iter = iterator ( res.entries ) ; n
Code	Iterator iter = iterator ( res.entries ) ; n
Distance : 5

80
Tree	Iterator iter = iterator ( res.entries ) ; {
Code	Iterator iter = iterator ( res.entries ) ; {
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; ()
Code	Iterator iter = iterator ( res.entries ) ; ()
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; )
Code	Iterator iter = iterator ( res.entries ) ; )
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; if
Code	Iterator iter = iterator ( res.entries ) ; if
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; <blank>
Code	Iterator iter = iterator ( res.entries ) ; <blank>
Distance : 5

87
Tree	Iterator iter = iterator ( res.entries ) ; (
Code	Iterator iter = iterator ( res.entries ) ; (
Distance : 5

88
Tree	Iterator iter = iterator ( res.entries ) ; =
Code	Iterator iter = iterator ( res.entries ) ; =
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; }
Code	Iterator iter = iterator ( res.entries ) ; }
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; .
Code	Iterator iter = iterator ( res.entries ) ; .
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; new
Code	Iterator iter = iterator ( res.entries ) ; new
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; public
Code	Iterator iter = iterator ( res.entries ) ; public
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; mode
Code	Iterator iter = iterator ( res.entries ) ; mode
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; <s>
Code	Iterator iter = iterator ( res.entries ) ; <s>
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; final
Code	Iterator iter = iterator ( res.entries ) ; final
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; <>
Code	Iterator iter = iterator ( res.entries ) ; <>
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; try
Code	Iterator iter = iterator ( res.entries ) ; try
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; testSame
Code	Iterator iter = iterator ( res.entries ) ; testSame
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; x
Code	Iterator iter = iterator ( res.entries ) ; x
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; ArrayList
Code	Iterator iter = iterator ( res.entries ) ; ArrayList
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Code	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; parent
Code	Iterator iter = iterator ( res.entries ) ; parent
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; invocation
Code	Iterator iter = iterator ( res.entries ) ; invocation
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Code	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

31
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

32
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

33
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

34
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

35
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

36
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

37
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

38
Tree	Iterator iter = iterator ( res.entries ) ; FastMath
Code	Iterator iter = iterator ( res.entries ) ; FastMath
Distance : 5

39
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

40
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

41
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

42
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

43
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

44
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

45
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

46
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

47
Tree	Iterator iter = iterator ( res.entries ) ; assertThat
Code	Iterator iter = iterator ( res.entries ) ; assertThat
Distance : 5

48
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

49
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

50
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

51
Tree	Iterator iter = iterator ( res.entries ) ; this
Code	Iterator iter = iterator ( res.entries ) ; this
Distance : 5

52
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

53
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

57
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

58
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

61
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

62
Tree	Iterator iter = iterator ( res.entries ) ; t
Code	Iterator iter = iterator ( res.entries ) ; t
Distance : 5

63
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

64
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

65
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

66
Tree	Iterator iter = iterator ( res.entries ) ; throw
Code	Iterator iter = iterator ( res.entries ) ; throw
Distance : 5

67
Tree	Iterator iter = iterator ( res.entries ) ; catch
Code	Iterator iter = iterator ( res.entries ) ; catch
Distance : 5

68
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

69
Tree	Iterator iter = iterator ( res.entries ) ; null
Code	Iterator iter = iterator ( res.entries ) ; null
Distance : 5

70
Tree	Iterator iter = iterator ( res.entries ) ; String
Code	Iterator iter = iterator ( res.entries ) ; String
Distance : 5

71
Tree	Iterator iter = iterator ( res.entries ) ; compiler
Code	Iterator iter = iterator ( res.entries ) ; compiler
Distance : 5

72
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

73
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

74
Tree	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Distance : 5

75
Tree	Iterator iter = iterator ( res.entries ) ; true
Code	Iterator iter = iterator ( res.entries ) ; true
Distance : 5

76
Tree	Iterator iter = iterator ( res.entries ) ; return
Code	Iterator iter = iterator ( res.entries ) ; return
Distance : 5

77
Tree	Iterator iter = iterator ( res.entries ) ; <
Code	Iterator iter = iterator ( res.entries ) ; <
Distance : 5

78
Tree	Iterator iter = iterator ( res.entries ) ; e
Code	Iterator iter = iterator ( res.entries ) ; e
Distance : 5

79
Tree	Iterator iter = iterator ( res.entries ) ; n
Code	Iterator iter = iterator ( res.entries ) ; n
Distance : 5

80
Tree	Iterator iter = iterator ( res.entries ) ; {
Code	Iterator iter = iterator ( res.entries ) ; {
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; ()
Code	Iterator iter = iterator ( res.entries ) ; ()
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; )
Code	Iterator iter = iterator ( res.entries ) ; )
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; if
Code	Iterator iter = iterator ( res.entries ) ; if
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; <blank>
Code	Iterator iter = iterator ( res.entries ) ; <blank>
Distance : 5

87
Tree	Iterator iter = iterator ( res.entries ) ; (
Code	Iterator iter = iterator ( res.entries ) ; (
Distance : 5

88
Tree	Iterator iter = iterator ( res.entries ) ; =
Code	Iterator iter = iterator ( res.entries ) ; =
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; }
Code	Iterator iter = iterator ( res.entries ) ; }
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; .
Code	Iterator iter = iterator ( res.entries ) ; .
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; new
Code	Iterator iter = iterator ( res.entries ) ; new
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; public
Code	Iterator iter = iterator ( res.entries ) ; public
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; mode
Code	Iterator iter = iterator ( res.entries ) ; mode
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; <s>
Code	Iterator iter = iterator ( res.entries ) ; <s>
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; final
Code	Iterator iter = iterator ( res.entries ) ; final
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; createIllegalArgumentException
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; <>
Code	Iterator iter = iterator ( res.entries ) ; <>
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; try
Code	Iterator iter = iterator ( res.entries ) ; try
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; testSame
Code	Iterator iter = iterator ( res.entries ) ; testSame
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; x
Code	Iterator iter = iterator ( res.entries ) ; x
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; ArrayList
Code	Iterator iter = iterator ( res.entries ) ; ArrayList
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Code	Iterator iter = iterator ( res.entries ) ; fireChangeEvent
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; parent
Code	Iterator iter = iterator ( res.entries ) ; parent
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Code	Iterator iter = iterator ( res.entries ) ; IllegalArgumentException
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; invocation
Code	Iterator iter = iterator ( res.entries ) ; invocation
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Code	Iterator iter = iterator ( res.entries ) ; reportCodeChange
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

31
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

32
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

33
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

34
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

35
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

36
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

37
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

38
Tree	Iterator iter = iterator ( res.entries ) ; FastMath
Code	Iterator iter = iterator ( res.entries ) ; FastMath
Distance : 5

39
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

40
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

41
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

42
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

43
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

44
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

45
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

46
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

47
Tree	Iterator iter = iterator ( res.entries ) ; assertThat
Code	Iterator iter = iterator ( res.entries ) ; assertThat
Distance : 5

48
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

49
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

50
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

51
Tree	Iterator iter = iterator ( res.entries ) ; this
Code	Iterator iter = iterator ( res.entries ) ; this
Distance : 5

52
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

53
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

57
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

58
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

61
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

62
Tree	Iterator iter = iterator ( res.entries ) ; t
Code	Iterator iter = iterator ( res.entries ) ; t
Distance : 5

63
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

64
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

65
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

66
Tree	Iterator iter = iterator ( res.entries ) ; throw
Code	Iterator iter = iterator ( res.entries ) ; throw
Distance : 5

67
Tree	Iterator iter = iterator ( res.entries ) ; catch
Code	Iterator iter = iterator ( res.entries ) ; catch
Distance : 5

68
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

69
Tree	Iterator iter = iterator ( res.entries ) ; null
Code	Iterator iter = iterator ( res.entries ) ; null
Distance : 5

70
Tree	Iterator iter = iterator ( res.entries ) ; String
Code	Iterator iter = iterator ( res.entries ) ; String
Distance : 5

71
Tree	Iterator iter = iterator ( res.entries ) ; compiler
Code	Iterator iter = iterator ( res.entries ) ; compiler
Distance : 5

72
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

73
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

74
Tree	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; NUMBER_CONSTANT
Distance : 5

75
Tree	Iterator iter = iterator ( res.entries ) ; true
Code	Iterator iter = iterator ( res.entries ) ; true
Distance : 5

76
Tree	Iterator iter = iterator ( res.entries ) ; return
Code	Iterator iter = iterator ( res.entries ) ; return
Distance : 5

77
Tree	Iterator iter = iterator ( res.entries ) ; <
Code	Iterator iter = iterator ( res.entries ) ; <
Distance : 5

78
Tree	Iterator iter = iterator ( res.entries ) ; e
Code	Iterator iter = iterator ( res.entries ) ; e
Distance : 5

79
Tree	Iterator iter = iterator ( res.entries ) ; n
Code	Iterator iter = iterator ( res.entries ) ; n
Distance : 5

80
Tree	Iterator iter = iterator ( res.entries ) ; {
Code	Iterator iter = iterator ( res.entries ) ; {
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; ()
Code	Iterator iter = iterator ( res.entries ) ; ()
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; )
Code	Iterator iter = iterator ( res.entries ) ; )
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ;
Code	Iterator iter = iterator ( res.entries ) ; ;
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; if
Code	Iterator iter = iterator ( res.entries ) ; if
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; <blank>
Code	Iterator iter = iterator ( res.entries ) ; <blank>
Distance : 5

87
Tree	Iterator iter = iterator ( res.entries ) ; (
Code	Iterator iter = iterator ( res.entries ) ; (
Distance : 5

88
Tree	Iterator iter = iterator ( res.entries ) ; =
Code	Iterator iter = iterator ( res.entries ) ; =
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; }
Code	Iterator iter = iterator ( res.entries ) ; }
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; .
Code	Iterator iter = iterator ( res.entries ) ; .
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; new
Code	Iterator iter = iterator ( res.entries ) ; new
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; public
Code	Iterator iter = iterator ( res.entries ) ; public
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; mode
Code	Iterator iter = iterator ( res.entries ) ; mode
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; <s>
Code	Iterator iter = iterator ( res.entries ) ; <s>
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; final
Code	Iterator iter = iterator ( res.entries ) ; final
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } test
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } test
Distance : 5

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } []
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } []
Distance : 5

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } nullNotPermitted
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } nullNotPermitted
Distance : 5

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } f
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } f
Distance : 5

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ParamChecks
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ParamChecks
Distance : 5

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } array
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } array
Distance : 5

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ]
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ]
Distance : 5

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } MathRuntimeException
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } MathRuntimeException
Distance : 5

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Object
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Object
Distance : 5

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } createIllegalArgumentException
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } createIllegalArgumentException
Distance : 5

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } parent
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } parent
Distance : 5

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } testSame
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } testSame
Distance : 5

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } x
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } x
Distance : 5

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Override
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Override
Distance : 5

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } mock
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } mock
Distance : 5

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } class
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } class
Distance : 5

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } {}
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } {}
Distance : 5

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } @
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } @
Distance : 5

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } [
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } [
Distance : 5

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Preconditions
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Preconditions
Distance : 5

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } -
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } -
Distance : 5

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } mode
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } mode
Distance : 5

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !
Distance : 5

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } true
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } true
Distance : 5

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } assertEquals
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } assertEquals
Distance : 5

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } super
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } super
Distance : 5

26
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 4

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

31
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

32
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

34
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

35
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

36
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 4

38
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <>
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <>
Distance : 5

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } &&
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } &&
Distance : 5

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } T
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } T
Distance : 5

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } i
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } i
Distance : 5

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } value
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } value
Distance : 5

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } checkState
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } checkState
Distance : 5

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } double
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } double
Distance : 5

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !=
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !=
Distance : 5

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } m
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } m
Distance : 5

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } :
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } :
Distance : 5

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } .
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } .
Distance : 5

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ,
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ,
Distance : 5

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } false
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } false
Distance : 5

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } int
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } int
Distance : 5

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } public
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } public
Distance : 5

56
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } )
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } )
Distance : 5

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } result
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } result
Distance : 5

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } List
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } List
Distance : 5

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Args
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } Args
Distance : 5

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } fail
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } fail
Distance : 5

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } try
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } try
Distance : 5

63
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } type
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } type
Distance : 5

64
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } *
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } *
Distance : 5

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <
Distance : 5

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ;
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ;
Distance : 5

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } this
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } this
Distance : 5

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } if
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } if
Distance : 5

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <s>
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <s>
Distance : 5

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } (
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } (
Distance : 5

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } =
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } =
Distance : 5

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } }
Distance : 5

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ()
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ()
Distance : 5

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } {
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } {
Distance : 5

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } new
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } new
Distance : 5

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } STRING_CONSTANT
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } STRING_CONSTANT
Distance : 5

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } NUMBER_CONSTANT
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } NUMBER_CONSTANT
Distance : 5

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } return
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } return
Distance : 5

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } +
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } +
Distance : 5

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } null
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } null
Distance : 5

81
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } >
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } >
Distance : 5

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } final
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } final
Distance : 5

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <blank>
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <blank>
Distance : 5

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } paint
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } paint
Distance : 5

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } join
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } join
Distance : 5

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } serialised
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } serialised
Distance : 5

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } getInstance
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } getInstance
Distance : 5

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } fireChangeEvent
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } fireChangeEvent
Distance : 5

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ArrayList
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ArrayList
Distance : 5

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ==
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } ==
Distance : 5

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } void
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } void
Distance : 5

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } catch
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } catch
Distance : 5

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } throw
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } throw
Distance : 5

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } n
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } n
Distance : 5

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } e
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } e
Distance : 5

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } String
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } String
Distance : 5

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } compiler
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } compiler
Distance : 5

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } if
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } if
Distance : 5

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } boolean
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } boolean
Distance : 5

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Distance : 7

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Distance : 7

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Distance : 7

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Distance : 7

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey () : divisor ; }
Distance : 7

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax () : divisor ; }
Distance : 7

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType () : divisor ; }
Distance : 7

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest () : divisor ; }
Distance : 7

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds () : divisor ; }
Distance : 7

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices () : divisor ; }
Distance : 7

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isConstVar () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isConstVar () : divisor ; }
Distance : 7

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . voidMethodStubbable () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . voidMethodStubbable () : divisor ; }
Distance : 7

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isModifiableClass () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isModifiableClass () : divisor ; }
Distance : 7

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRMS () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRMS () : divisor ; }
Distance : 7

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSynthetic () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSynthetic () : divisor ; }
Distance : 7

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . copySelf () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . copySelf () : divisor ; }
Distance : 7

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . mayHaveNonStrayProp () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . mayHaveNonStrayProp () : divisor ; }
Distance : 7

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBottomObject () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBottomObject () : divisor ; }
Distance : 7

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isAllType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isAllType () : divisor ; }
Distance : 7

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRunCount () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRunCount () : divisor ; }
Distance : 7

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getNumberInstance () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getNumberInstance () : divisor ; }
Distance : 7

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isFunctionPrototypeType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isFunctionPrototypeType () : divisor ; }
Distance : 7

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNullable () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNullable () : divisor ; }
Distance : 7

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . withLoose () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . withLoose () : divisor ; }
Distance : 7

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isMismatchesReported () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isMismatchesReported () : divisor ; }
Distance : 7

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isVanillaFunction () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isVanillaFunction () : divisor ; }
Distance : 7

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInstanceofObject () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInstanceofObject () : divisor ; }
Distance : 7

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNamedProperty () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNamedProperty () : divisor ; }
Distance : 7

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . cumulativeProbability () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . cumulativeProbability () : divisor ; }
Distance : 7

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . primitiveTypeOf () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . primitiveTypeOf () : divisor ; }
Distance : 7

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSomeUnknownType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSomeUnknownType () : divisor ; }
Distance : 7

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getSourceMapURL () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getSourceMapURL () : divisor ; }
Distance : 7

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMatchers () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMatchers () : divisor ; }
Distance : 7

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN . of () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN . of () : divisor ; }
Distance : 7

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getInterfaces () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getInterfaces () : divisor ; }
Distance : 7

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPropType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPropType () : divisor ; }
Distance : 7

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isPublic () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isPublic () : divisor ; }
Distance : 7

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPackage () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPackage () : divisor ; }
Distance : 7

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . linearCombination () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . linearCombination () : divisor ; }
Distance : 7

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . forName () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . forName () : divisor ; }
Distance : 7

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInvalidating () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInvalidating () : divisor ; }
Distance : 7

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMaxArity () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMaxArity () : divisor ; }
Distance : 7

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getAncestorInterfaces () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getAncestorInterfaces () : divisor ; }
Distance : 7

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . toObjectType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . toObjectType () : divisor ; }
Distance : 7

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isLiteralObject () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isLiteralObject () : divisor ; }
Distance : 7

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . deepEquals () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . deepEquals () : divisor ; }
Distance : 7

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isConstructorOrInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isConstructorOrInterface () : divisor ; }
Distance : 7

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . shouldRunCrossChunkMethodMotion () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . shouldRunCrossChunkMethodMotion () : divisor ; }
Distance : 7

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getCommonTypes () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getCommonTypes () : divisor ; }
Distance : 7

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getHistogram1 () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getHistogram1 () : divisor ; }
Distance : 7

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . booleanValue () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . booleanValue () : divisor ; }
Distance : 7

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getClosingInterval () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getClosingInterval () : divisor ; }
Distance : 7

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getSlot () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getSlot () : divisor ; }
Distance : 7

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isGenericObjectType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isGenericObjectType () : divisor ; }
Distance : 7

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMaxY () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMaxY () : divisor ; }
Distance : 7

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findRangeBounds () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findRangeBounds () : divisor ; }
Distance : 7

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isPrototypeObjectNamedPropertyAssignment () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isPrototypeObjectNamedPropertyAssignment () : divisor ; }
Distance : 7

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getArgumentsVar () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getArgumentsVar () : divisor ; }
Distance : 7

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . shouldRunCrossChunkCodeMotion () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . shouldRunCrossChunkCodeMotion () : divisor ; }
Distance : 7

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . iterateDomainBounds () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . iterateDomainBounds () : divisor ; }
Distance : 7

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . doubleToLongBits () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . doubleToLongBits () : divisor ; }
Distance : 7

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getAllValues () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getAllValues () : divisor ; }
Distance : 7

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN . of () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN . of () : divisor ; }
Distance : 7

63
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . nullToEmpty () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . nullToEmpty () : divisor ; }
Distance : 7

64
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . fix2ndArgument () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . fix2ndArgument () : divisor ; }
Distance : 7

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . hasNonInheritedProperty () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . hasNonInheritedProperty () : divisor ; }
Distance : 7

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getCanonicalName () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getCanonicalName () : divisor ; }
Distance : 7

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isThisProp () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isThisProp () : divisor ; }
Distance : 7

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . returnValueFor () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . returnValueFor () : divisor ; }
Distance : 7

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDeclarations () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDeclarations () : divisor ; }
Distance : 7

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createsScope () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createsScope () : divisor ; }
Distance : 7

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getGreatestSubtype () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getGreatestSubtype () : divisor ; }
Distance : 7

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . inModuleHoistScope () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . inModuleHoistScope () : divisor ; }
Distance : 7

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isTop () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isTop () : divisor ; }
Distance : 7

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getFirstMillisecond () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getFirstMillisecond () : divisor ; }
Distance : 7

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . primitiveValueOrNullFor () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . primitiveValueOrNullFor () : divisor ; }
Distance : 7

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isString () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isString () : divisor ; }
Distance : 7

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMethodName () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMethodName () : divisor ; }
Distance : 7

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getLanguageOut () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getLanguageOut () : divisor ; }
Distance : 7

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getResiduals () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getResiduals () : divisor ; }
Distance : 7

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . intValue () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . intValue () : divisor ; }
Distance : 7

81
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isObjectLiteralThatCanBeSkipped () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isObjectLiteralThatCanBeSkipped () : divisor ; }
Distance : 7

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . floatToIntBits () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . floatToIntBits () : divisor ; }
Distance : 7

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN . latest () : divisor ; }
Distance : 7

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . tan () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . tan () : divisor ; }
Distance : 7

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRunOTIafterNTI () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRunOTIafterNTI () : divisor ; }
Distance : 7

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createParseException () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createParseException () : divisor ; }
Distance : 7

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getString () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getString () : divisor ; }
Distance : 7

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . MockitoSpy () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . MockitoSpy () : divisor ; }
Distance : 7

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . safeMultiply () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . safeMultiply () : divisor ; }
Distance : 7

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isTypeScriptSpecificKeyword () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isTypeScriptSpecificKeyword () : divisor ; }
Distance : 7

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isAssignableFrom () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isAssignableFrom () : divisor ; }
Distance : 7

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . rint () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . rint () : divisor ; }
Distance : 7

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . min () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . min () : divisor ; }
Distance : 7

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . canBeCalled () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . canBeCalled () : divisor ; }
Distance : 7

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createInternalError () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createInternalError () : divisor ; }
Distance : 7

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isMocked () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isMocked () : divisor ; }
Distance : 7

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isLocal () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isLocal () : divisor ; }
Distance : 7

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . vertices () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . vertices () : divisor ; }
Distance : 7

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getEnclosingStatement () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getEnclosingStatement () : divisor ; }
Distance : 7

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

1
Tree	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

2
Tree	if ( this . isTopLevel () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isTopLevel () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

3
Tree	if ( this . getStringBuffer () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

4
Tree	if ( this . isSame () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isSame () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

5
Tree	if ( this . subtypes () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . subtypes () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

6
Tree	if ( this . isUnknownObject () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isUnknownObject () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

7
Tree	if ( this . verticalTickLabels () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . verticalTickLabels () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

8
Tree	if ( this . labelLinkMargin () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . labelLinkMargin () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

9
Tree	if ( this . resetBuilder () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . resetBuilder () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

10
Tree	if ( this . astValidationEnabled () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . astValidationEnabled () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

11
Tree	if ( this . isAliasDefinition () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isAliasDefinition () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

12
Tree	if ( this . isTypeCompatible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isTypeCompatible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

13
Tree	if ( this . containsAny () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . containsAny () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

14
Tree	if ( this . bg () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . bg () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

15
Tree	if ( this . nextTime () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . nextTime () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

16
Tree	if ( this . isPrimitiveWrapper () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . isPrimitiveWrapper () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

17
Tree	if ( this . maximumCategoryLabelLines () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . maximumCategoryLabelLines () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

18
Tree	if ( this . changed () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . changed () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

19
Tree	if ( this . getRhs () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . getRhs () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

20
Tree	if ( this . q0 () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . q0 () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

21
Tree	if ( this . rangeCrosshairLockedOnData () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . rangeCrosshairLockedOnData () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

22
Tree	if ( this . zeroInteractionsWanted () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . zeroInteractionsWanted () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

23
Tree	if ( this . primitiveType () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . primitiveType () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

24
Tree	if ( this . defaultOutlinePaint () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . defaultOutlinePaint () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

25
Tree	if ( this . DEFAULT_INITIAL_CAPACITY () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . DEFAULT_INITIAL_CAPACITY () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

26
Tree	if ( this . paletteName () ) { return NaN ? NaN : : ; }
Code	if ( this . paletteName () ) { return NaN ? NaN : : ; }
Distance : 8

27
Tree	if ( this . options.removeUnusedLocalVars () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . options.removeUnusedLocalVars () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

28
Tree	if ( this . showBase () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . showBase () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

29
Tree	if ( this . runMode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . runMode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

30
Tree	if ( this . domainCrosshairVisible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . domainCrosshairVisible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

31
Tree	if ( this . incrementalCheckMode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . incrementalCheckMode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

32
Tree	if ( this . shouldExtract () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . shouldExtract () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

33
Tree	if ( this . toMaybeUnionType () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . toMaybeUnionType () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

34
Tree	if ( this . setUpRan () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . setUpRan () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

35
Tree	if ( this . unescape () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . unescape () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

36
Tree	if ( this . variablesToInclude () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . variablesToInclude () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

37
Tree	if ( this . thermometerStroke () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . thermometerStroke () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

38
Tree	if ( this . isEquivalentWithSideEffectsToShallow () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isEquivalentWithSideEffectsToShallow () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

39
Tree	if ( this . domainGridlinePosition () ) { return NaN ? NaN : ( ; }
Code	if ( this . domainGridlinePosition () ) { return NaN ? NaN : ( ; }
Distance : 8

40
Tree	if ( this . injectee () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . injectee () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

41
Tree	if ( this . smallFont () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . smallFont () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

42
Tree	if ( this . addPeriod () ) { return NaN ? NaN : ( ; }
Code	if ( this . addPeriod () ) { return NaN ? NaN : ( ; }
Distance : 8

43
Tree	if ( this . isNot () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isNot () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

44
Tree	if ( this . iterations () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . iterations () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

45
Tree	if ( this . gridStrokeSample () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . gridStrokeSample () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

46
Tree	if ( this . isAdd () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isAdd () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

47
Tree	if ( this . centerTextFormatter () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . centerTextFormatter () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

48
Tree	if ( this . nextCauchy () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . nextCauchy () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

49
Tree	if ( this . invalidUseOfMatchers () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . invalidUseOfMatchers () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

50
Tree	if ( this . isAlpha () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isAlpha () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

51
Tree	if ( this . rewriteShortObjectKey () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . rewriteShortObjectKey () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

52
Tree	if ( this . seriesShapesFilled () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . seriesShapesFilled () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

53
Tree	if ( this . legendLabelURLGenerator () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . legendLabelURLGenerator () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

54
Tree	if ( this . multistageSerializeAndDeserialize () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . multistageSerializeAndDeserialize () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

55
Tree	if ( this . numberOfVariables () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . numberOfVariables () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

56
Tree	if ( this . matchesPrototype () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . matchesPrototype () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

57
Tree	if ( this . isNotEqualTo () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isNotEqualTo () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

58
Tree	if ( this . sectionOutlineStrokeMap () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . sectionOutlineStrokeMap () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

59
Tree	if ( this . standardTickUnits () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . standardTickUnits () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

60
Tree	if ( this . addEs2018Passes () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . addEs2018Passes () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

61
Tree	if ( this . regionMatches () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . regionMatches () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

62
Tree	if ( this . getTotalMillis () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getTotalMillis () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

63
Tree	if ( this . isChromePassEnabled () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isChromePassEnabled () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

64
Tree	if ( this . stubInfo () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . stubInfo () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

65
Tree	if ( this . isSpecializedOnlyWithUnknown () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . isSpecializedOnlyWithUnknown () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

66
Tree	if ( this . ancestors.length () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . ancestors.length () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

67
Tree	if ( this . labelType () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . labelType () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

68
Tree	if ( this . gridBandsVisible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . gridBandsVisible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

69
Tree	if ( this . flatten () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . flatten () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

70
Tree	if ( this . showValueLines () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . showValueLines () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

71
Tree	if ( this . _boundaries () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . _boundaries () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

72
Tree	if ( this . isSpy () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isSpy () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

73
Tree	if ( this . valueClass () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . valueClass () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

74
Tree	if ( this . aClass () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . aClass () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

75
Tree	if ( this . angleGridlineStroke () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . angleGridlineStroke () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

76
Tree	if ( this . CLEANER () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . CLEANER () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

77
Tree	if ( this . setValidityCheck () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . setValidityCheck () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

78
Tree	if ( this . Functions () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . Functions () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

79
Tree	if ( this . isDestructuringDeclaration () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isDestructuringDeclaration () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

80
Tree	if ( this . shouldRunRemoveUnusedCode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . shouldRunRemoveUnusedCode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

81
Tree	if ( this . isNoOp () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isNoOp () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

82
Tree	if ( this . definitionNodes () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . definitionNodes () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

83
Tree	if ( this . defaultStroke () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . defaultStroke () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

84
Tree	if ( this . canRecoverFromFailure () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . canRecoverFromFailure () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

85
Tree	if ( this . itemLabelPaint () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . itemLabelPaint () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

86
Tree	if ( this . printExterns () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . printExterns () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

87
Tree	if ( this . nextZipf () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . nextZipf () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

88
Tree	if ( this . enumLiteralHasKey () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . enumLiteralHasKey () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

89
Tree	if ( this . ignoreZeroValues () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . ignoreZeroValues () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

90
Tree	if ( this . domainMarkers () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . domainMarkers () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

91
Tree	if ( this . AstValidator () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . AstValidator () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

92
Tree	if ( this . potentialStubbingProblem () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . potentialStubbingProblem () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

93
Tree	if ( this . isValidSimpleName () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isValidSimpleName () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

94
Tree	if ( this . getDeclaringClass () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getDeclaringClass () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

95
Tree	if ( this . defaultFillPaint () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . defaultFillPaint () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

96
Tree	if ( this . disallowMovement () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . disallowMovement () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

97
Tree	if ( this . getCountry () ) { return NaN ? : : divisor.isZero ; }
Code	if ( this . getCountry () ) { return NaN ? : : divisor.isZero ; }
Distance : 8

98
Tree	if ( this . isMovableDeclaration () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isMovableDeclaration () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

99
Tree	if ( this . subLabelFont () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . subLabelFont () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

1
Tree	{ super ( elitismRate ) ; this . elitismRate = new char [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new char [] { populationLimit } ; }
Distance : 10

2
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 9

3
Tree	{ super ( populationLimit ) ; this . populationLimit = new boolean [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new boolean [] { populationLimit } ; }
Distance : 10

4
Tree	{ super ( elitismRate ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 10

5
Tree	{ super ( elitismRate ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 10

6
Tree	{ super ( elitismRate ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 10

7
Tree	{ super ( populationLimit ) ; this . populationLimit = new void [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new void [] { populationLimit } ; }
Distance : 10

8
Tree	{ super ( populationLimit ) ; this . populationLimit = new char [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new char [] { populationLimit } ; }
Distance : 10

9
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 9

10
Tree	{ super ( populationLimit ) ; this . populationLimit = new long [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new long [] { populationLimit } ; }
Distance : 10

11
Tree	{ super ( populationLimit ) ; this . populationLimit = new float [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new float [] { populationLimit } ; }
Distance : 10

12
Tree	{ super ( populationLimit ) ; this . populationLimit = new short [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new short [] { populationLimit } ; }
Distance : 10

13
Tree	{ super ( elitismRate ) ; this . elitismRate = new long [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new long [] { populationLimit } ; }
Distance : 10

14
Tree	{ super ( elitismRate ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 10

15
Tree	{ super ( populationLimit ) ; this . populationLimit = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new byte [] { populationLimit } ; }
Distance : 10

16
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

17
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

18
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 9

19
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { populationLimit } ; }
Distance : 9

20
Tree	{ super ( populationLimit ) ; this . elitismRate = new char [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new char [] { populationLimit } ; }
Distance : 9

21
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 9

22
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Distance : 9

23
Tree	{ super ( populationLimit ) ; this . populationLimit = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new double [] { populationLimit } ; }
Distance : 10

24
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Distance : 9

25
Tree	{ super ( elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 10

26
Tree	{ super ( populationLimit ) ; this . populationLimit = new int [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new int [] { populationLimit } ; }
Distance : 10

27
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 9

28
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { elitismRate } ; }
Distance : 9

29
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 9

30
Tree	{ super ( elitismRate ) ; this . elitismRate = new void [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new void [] { populationLimit } ; }
Distance : 10

31
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 9

32
Tree	{ super ( populationLimit ) ; this . elitismRate = new char [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new char [] { elitismRate } ; }
Distance : 9

33
Tree	{ super ( elitismRate ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Distance : 10

34
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 9

35
Tree	{ super ( elitismRate ) ; this . populationLimit = new double [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new double [] { populationLimit } ; }
Distance : 11

36
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Distance : 9

37
Tree	{ super ( populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 9

38
Tree	{ super ( elitismRate ) ; this . populationLimit = new int [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new int [] { populationLimit } ; }
Distance : 11

39
Tree	{ super ( elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

40
Tree	{ super ( populationLimit ) ; this . populationLimit = new int [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new int [] { elitismRate } ; }
Distance : 9

41
Tree	{ super ( elitismRate ) ; this . populationLimit = new byte [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new byte [] { populationLimit } ; }
Distance : 11

42
Tree	{ super ( elitismRate ) ; this . populationLimit = new short [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new short [] { populationLimit } ; }
Distance : 11

43
Tree	{ super ( elitismRate ) ; this . populationLimit = new float [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new float [] { populationLimit } ; }
Distance : 11

44
Tree	{ super ( elitismRate ) ; this . populationLimit = new long [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new long [] { populationLimit } ; }
Distance : 11

45
Tree	{ super ( elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 10

46
Tree	{ super ( populationLimit ) ; this . populationLimit = new byte [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new byte [] { elitismRate } ; }
Distance : 9

47
Tree	{ super ( elitismRate ) ; this . populationLimit = new char [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new char [] { populationLimit } ; }
Distance : 11

48
Tree	{ super ( populationLimit ) ; this . populationLimit = new short [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new short [] { elitismRate } ; }
Distance : 9

49
Tree	{ super ( populationLimit ) ; this . populationLimit = new float [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new float [] { elitismRate } ; }
Distance : 9

50
Tree	{ super ( elitismRate ) ; this . populationLimit = new void [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new void [] { populationLimit } ; }
Distance : 11

51
Tree	{ super ( populationLimit ) ; this . populationLimit = new long [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new long [] { elitismRate } ; }
Distance : 9

52
Tree	{ super ( populationLimit ) ; this . populationLimit = new char [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new char [] { elitismRate } ; }
Distance : 9

53
Tree	{ super ( elitismRate ) ; this . populationLimit = new boolean [] { populationLimit } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new boolean [] { populationLimit } ; }
Distance : 11

54
Tree	{ super ( populationLimit ) ; this . populationLimit = new void [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new void [] { elitismRate } ; }
Distance : 9

55
Tree	{ super ( elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 10

56
Tree	{ super ( elitismRate ) ; this . elitismRate = new short [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new short [] { elitismRate } ; }
Distance : 10

57
Tree	{ super ( elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 10

58
Tree	{ super ( populationLimit ) ; this . populationLimit = new boolean [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new boolean [] { elitismRate } ; }
Distance : 9

59
Tree	{ super ( elitismRate ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 10

60
Tree	{ super ( elitismRate ) ; this . elitismRate = new char [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new char [] { elitismRate } ; }
Distance : 10

61
Tree	{ super ( elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 10

62
Tree	{ super ( elitismRate ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Distance : 10

63
Tree	{ super ( elitismRate ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 10

64
Tree	{ super ( elitismRate ) ; this . populationLimit = new int [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new int [] { elitismRate } ; }
Distance : 10

65
Tree	{ super ( elitismRate ) ; this . populationLimit = new byte [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new byte [] { elitismRate } ; }
Distance : 10

66
Tree	{ super ( elitismRate ) ; this . populationLimit = new short [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new short [] { elitismRate } ; }
Distance : 10

67
Tree	{ super ( elitismRate ) ; this . populationLimit = new float [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new float [] { elitismRate } ; }
Distance : 10

68
Tree	{ super ( elitismRate ) ; this . populationLimit = new long [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new long [] { elitismRate } ; }
Distance : 10

69
Tree	{ super ( elitismRate ) ; this . populationLimit = new char [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new char [] { elitismRate } ; }
Distance : 10

70
Tree	{ super ( elitismRate ) ; this . populationLimit = new void [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new void [] { elitismRate } ; }
Distance : 10

71
Tree	{ super ( elitismRate ) ; this . populationLimit = new boolean [] { elitismRate } ; }
Code	{ super ( elitismRate ) ; this . populationLimit = new boolean [] { elitismRate } ; }
Distance : 10

72
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } +
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } +
Distance : 10

73
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } ,
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } ,
Distance : 10

74
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } .
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } .
Distance : 10

75
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } <blank>
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } <blank>
Distance : 10

76
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } )
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } )
Distance : 10

77
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } ;
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } ;
Distance : 10

78
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } STRING_CONSTANT
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } STRING_CONSTANT
Distance : 10

79
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } {
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } {
Distance : 10

80
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } <s>
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } <s>
Distance : 10

81
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } (
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } (
Distance : 10

82
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } return
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } return
Distance : 10

83
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } NUMBER_CONSTANT
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } NUMBER_CONSTANT
Distance : 10

84
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } >
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } >
Distance : 10

85
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } null
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } null
Distance : 10

86
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } String
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } String
Distance : 10

87
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } public
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } public
Distance : 10

88
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } final
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } final
Distance : 10

89
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } this
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } this
Distance : 10

90
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } <
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } <
Distance : 10

91
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } if
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } if
Distance : 10

92
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } =
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } =
Distance : 10

93
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } }
Distance : 10

94
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } ()
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } ()
Distance : 10

95
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } {
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } {
Distance : 10

96
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } compiler
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } compiler
Distance : 10

97
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } e
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } e
Distance : 10

98
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } n
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } n
Distance : 10

99
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } new
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; } new
Distance : 10

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

1
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 9

2
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 9

3
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 9

4
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 9

5
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 10

6
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 9

7
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 9

8
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 9

9
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 9

10
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Distance : 9

11
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

12
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

13
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 9

14
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { chromosomes } ; }
Distance : 10

15
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

16
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { chromosomes } ; }
Distance : 10

17
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

18
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

19
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new byte [] { chromosomes } ; }
Distance : 10

20
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new short [] { chromosomes } ; }
Distance : 10

21
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 9

22
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

23
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new float [] { chromosomes } ; }
Distance : 10

24
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { chromosomes } ; }
Distance : 10

25
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new long [] { chromosomes } ; }
Distance : 10

26
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

27
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new char [] { chromosomes } ; }
Distance : 10

28
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { elitismRate } ; }
Distance : 9

29
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new void [] { chromosomes } ; }
Distance : 10

30
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 10

31
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

32
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

33
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

34
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

35
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

36
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { chromosomes } ; }
Distance : 10

37
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

38
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new byte [] { chromosomes } ; }
Distance : 10

39
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new short [] { chromosomes } ; }
Distance : 10

40
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 9

41
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { elitismRate } ; }
Distance : 9

42
Tree	{ super ( chromosomes , elitismRate ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 11

43
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new float [] { chromosomes } ; }
Distance : 10

44
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 10

45
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

46
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { populationLimit } ; }
Distance : 10

47
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 10

48
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 10

49
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

50
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { populationLimit } ; }
Distance : 9

51
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 9

52
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { populationLimit } ; }
Distance : 9

53
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 10

54
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new long [] { chromosomes } ; }
Distance : 10

55
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { elitismRate } ; }
Distance : 9

56
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

57
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new char [] { chromosomes } ; }
Distance : 10

58
Tree	{ super ( populationLimit , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 11

59
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 9

60
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Distance : 9

61
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 9

62
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 10

63
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 10

64
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new void [] { chromosomes } ; }
Distance : 10

65
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

66
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 10

67
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 9

68
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 10

69
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

70
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

71
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Distance : 10

72
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 10

73
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

74
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 9

75
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

76
Tree	{ super ( chromosomes , chromosomes ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 11

77
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Distance : 9

78
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new boolean [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new boolean [] { chromosomes } ; }
Distance : 10

79
Tree	{ super ( elitismRate , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 11

80
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 10

81
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 10

82
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Distance : 9

83
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { elitismRate } ; }
Distance : 9

84
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 10

85
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 10

86
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 10

87
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { elitismRate } ; }
Distance : 9

88
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Distance : 10

89
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { chromosomes } ; }
Distance : 11

90
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 10

91
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 10

92
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { populationLimit } ; }
Distance : 10

93
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 10

94
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

95
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

96
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

97
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { populationLimit } ; }
Distance : 10

98
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 10

99
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 10

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

1
Tree	{ return ( chromosomes == continue; ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? super(); : chromosomes . iterator () ) ; }
Distance : 9

2
Tree	{ return ( chromosomes == null ? default: : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? default: : chromosomes . getChromosomes () ) ; }
Distance : 10

3
Tree	{ return ( chromosomes == return; ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? continue; : chromosomes . iterator () ) ; }
Distance : 9

4
Tree	{ return ( chromosomes == return; ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? return; : chromosomes . iterator () ) ; }
Distance : 9

5
Tree	{ return ( chromosomes == super(); ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? break; : chromosomes . iterator () ) ; }
Distance : 9

6
Tree	{ return ( chromosomes == return; ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == return; ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

7
Tree	{ return ( chromosomes == super(); ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? continue; : chromosomes . iterator () ) ; }
Distance : 9

8
Tree	{ return ( chromosomes == return; ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? super(); : chromosomes . iterator () ) ; }
Distance : 9

9
Tree	{ return ( chromosomes == super(); ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? return; : chromosomes . iterator () ) ; }
Distance : 9

10
Tree	{ return ( chromosomes == super(); ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == super(); ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

11
Tree	{ return ( chromosomes == super(); ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? super(); : chromosomes . iterator () ) ; }
Distance : 9

12
Tree	{ return ( chromosomes == default: ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == default: ? null : chromosomes . iterator () ) ; }
Distance : 9

13
Tree	{ return ( chromosomes == return; ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? break; : chromosomes . iterator () ) ; }
Distance : 9

14
Tree	{ return ( chromosomes == null ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

15
Tree	{ return ( chromosomes == null ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

16
Tree	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

17
Tree	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Distance : 9

18
Tree	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Distance : 9

19
Tree	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Distance : 9

20
Tree	{ return ( chromosomes == super(); ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? null : chromosomes . iterator () ) ; }
Distance : 9

21
Tree	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Distance : 9

22
Tree	{ return ( chromosomes == null ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? default: : chromosomes . iterator () ) ; }
Distance : 9

23
Tree	{ return ( chromosomes == continue; ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? null : chromosomes . iterator () ) ; }
Distance : 9

24
Tree	{ return ( chromosomes == return; ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? null : chromosomes . iterator () ) ; }
Distance : 9

25
Tree	{ return ( chromosomes == break; ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? null : chromosomes . iterator () ) ; }
Distance : 9

26
Tree	{ return ( chromosomes == null ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

27
Tree	{ return ( chromosomes == null ? return; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? return; : chromosomes . getChromosomes () ) ; }
Distance : 10

28
Tree	{ return ( chromosomes == continue; ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == continue; ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

29
Tree	{ return ( chromosomes == break; ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? super(); : chromosomes . iterator () ) ; }
Distance : 9

30
Tree	{ return ( chromosomes == break; ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == break; ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

31
Tree	{ return ( chromosomes == continue; ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? return; : chromosomes . iterator () ) ; }
Distance : 9

32
Tree	{ return ( chromosomes == continue; ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? continue; : chromosomes . iterator () ) ; }
Distance : 9

33
Tree	{ return ( chromosomes == continue; ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? break; : chromosomes . iterator () ) ; }
Distance : 9

34
Tree	{ return ( chromosomes == break; ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? return; : chromosomes . iterator () ) ; }
Distance : 9

35
Tree	{ return ( chromosomes == break; ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? continue; : chromosomes . iterator () ) ; }
Distance : 9

36
Tree	{ return ( chromosomes == break; ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? break; : chromosomes . iterator () ) ; }
Distance : 9

37
Tree	{ return ( chromosomes == super(); ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? default: : chromosomes . iterator () ) ; }
Distance : 9

38
Tree	{ return ( chromosomes == return; ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? default: : chromosomes . iterator () ) ; }
Distance : 9

39
Tree	{ return ( chromosomes == continue; ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? default: : chromosomes . iterator () ) ; }
Distance : 9

40
Tree	{ return ( chromosomes == default: ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == default: ? super(); : chromosomes . iterator () ) ; }
Distance : 9

41
Tree	{ return ( chromosomes == default: ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == default: ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

42
Tree	{ return ( chromosomes == break; ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? default: : chromosomes . iterator () ) ; }
Distance : 9

43
Tree	{ return ( chromosomes == default: ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == default: ? return; : chromosomes . iterator () ) ; }
Distance : 9

44
Tree	{ return ( chromosomes == default: ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == default: ? continue; : chromosomes . iterator () ) ; }
Distance : 9

45
Tree	{ return ( chromosomes == default: ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == default: ? break; : chromosomes . iterator () ) ; }
Distance : 9

46
Tree	{ return ( chromosomes == super(); ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == super(); ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

47
Tree	{ return ( chromosomes == super(); ? return; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == super(); ? return; : chromosomes . getChromosomes () ) ; }
Distance : 10

48
Tree	{ return ( chromosomes == return; ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == return; ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

49
Tree	{ return ( chromosomes == super(); ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == super(); ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

50
Tree	{ return ( chromosomes == super(); ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == super(); ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

51
Tree	{ return ( chromosomes == return; ? return; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == return; ? return; : chromosomes . getChromosomes () ) ; }
Distance : 10

52
Tree	{ return ( chromosomes == return; ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == return; ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

53
Tree	{ return ( chromosomes == return; ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == return; ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

54
Tree	{ return ( chromosomes == continue; ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == continue; ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

55
Tree	{ return ( chromosomes == break; ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == break; ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

56
Tree	{ return ( chromosomes == continue; ? return; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == continue; ? return; : chromosomes . getChromosomes () ) ; }
Distance : 10

57
Tree	{ return ( chromosomes == continue; ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == continue; ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

58
Tree	{ return ( chromosomes == continue; ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == continue; ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

59
Tree	{ return ( chromosomes == break; ? return; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == break; ? return; : chromosomes . getChromosomes () ) ; }
Distance : 10

60
Tree	{ return ( chromosomes == break; ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == break; ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

61
Tree	{ return ( chromosomes == default: ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == default: ? default: : chromosomes . iterator () ) ; }
Distance : 9

62
Tree	{ return ( chromosomes == break; ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == break; ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

63
Tree	{ return ( chromosomes == super(); ? default: : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == super(); ? default: : chromosomes . getChromosomes () ) ; }
Distance : 10

64
Tree	{ return ( chromosomes == return; ? default: : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == return; ? default: : chromosomes . getChromosomes () ) ; }
Distance : 10

65
Tree	{ return ( chromosomes == continue; ? default: : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == continue; ? default: : chromosomes . getChromosomes () ) ; }
Distance : 10

66
Tree	{ return ( chromosomes == default: ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == default: ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

67
Tree	{ return ( chromosomes == break; ? default: : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == break; ? default: : chromosomes . getChromosomes () ) ; }
Distance : 10

68
Tree	{ return ( chromosomes == default: ? return; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == default: ? return; : chromosomes . getChromosomes () ) ; }
Distance : 10

69
Tree	{ return ( chromosomes == default: ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == default: ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

70
Tree	{ return ( chromosomes == default: ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == default: ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

71
Tree	{ return ( chromosomes == default: ? default: : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == default: ? default: : chromosomes . getChromosomes () ) ; }
Distance : 10

72
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } +
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } +
Distance : 10

73
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ,
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ,
Distance : 10

74
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } .
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } .
Distance : 10

75
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <blank>
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <blank>
Distance : 10

76
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } )
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } )
Distance : 10

77
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ;
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ;
Distance : 10

78
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } STRING_CONSTANT
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } STRING_CONSTANT
Distance : 10

79
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Distance : 10

80
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <s>
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <s>
Distance : 10

81
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } (
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } (
Distance : 10

82
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } return
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } return
Distance : 10

83
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } NUMBER_CONSTANT
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } NUMBER_CONSTANT
Distance : 10

84
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } >
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } >
Distance : 10

85
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } null
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } null
Distance : 10

86
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } String
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } String
Distance : 10

87
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } public
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } public
Distance : 10

88
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } final
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } final
Distance : 10

89
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } this
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } this
Distance : 10

90
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <
Distance : 10

91
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } if
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } if
Distance : 10

92
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } =
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } =
Distance : 10

93
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } }
Distance : 10

94
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ()
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ()
Distance : 10

95
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Distance : 10

96
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } compiler
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } compiler
Distance : 10

97
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } e
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } e
Distance : 10

98
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } n
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } n
Distance : 10

99
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } new
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } new
Distance : 10

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

1
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

2
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

3
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

4
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

5
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

6
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

7
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

8
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

9
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

10
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

11
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

12
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 0

13
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

14
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

15
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

16
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

17
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

18
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

19
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

20
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 3

21
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

22
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

23
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

24
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

25
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

26
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

27
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

28
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

29
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

30
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

31
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 1

32
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

33
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 3

34
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

35
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

36
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

37
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 3

38
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 3

39
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

40
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

41
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

42
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 2

43
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

44
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

45
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

46
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

47
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

48
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

49
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

50
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 2

51
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

52
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 3

53
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

54
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

55
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

56
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

57
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

58
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 3

59
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 3

60
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

61
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 3

62
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

63
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

64
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 2

65
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

66
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

67
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

68
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

69
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 3

70
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

71
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

72
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

73
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

74
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

75
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 4

76
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 2

77
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

78
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 2

79
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

80
Tree	if ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

81
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

82
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Distance : 4

83
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

84
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 2

85
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 3

86
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

87
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

88
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 3

89
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

90
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 3

91
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

92
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 3

93
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 3

94
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

95
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

96
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

97
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

98
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

99
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

1
Tree	final int n1n2prod = ( int ) n1 * n2 ;
Code	final int n1n2prod = ( int ) n1 * n2 ;
Distance : 4

2
Tree	final int n1n2prod = ( long ) n1 * n1 ;
Code	final int n1n2prod = ( long ) n1 * n1 ;
Distance : 5

3
Tree	final int n1n2prod = ( int ) n1 * n1 ;
Code	final int n1n2prod = ( int ) n1 * n1 ;
Distance : 5

4
Tree	final int n1n2prod = ( long ) n2 * n2 ;
Code	final int n1n2prod = ( long ) n2 * n2 ;
Distance : 5

5
Tree	final int n1n2prod = ( int ) n2 * n2 ;
Code	final int n1n2prod = ( int ) n2 * n2 ;
Distance : 5

6
Tree	final int n2 = ( long ) n1 * n2 ;
Code	final int n2 = ( long ) n1 * n2 ;
Distance : 5

7
Tree	final int n2 = ( int ) n1 * n2 ;
Code	final int n2 = ( int ) n1 * n2 ;
Distance : 5

8
Tree	final int n1n2prod = ( long ) n2 * n1 ;
Code	final int n1n2prod = ( long ) n2 * n1 ;
Distance : 6

9
Tree	final int n1n2prod = ( int ) n2 * n1 ;
Code	final int n1n2prod = ( int ) n2 * n1 ;
Distance : 6

10
Tree	final int n1 = ( long ) n1 * n2 ;
Code	final int n1 = ( long ) n1 * n2 ;
Distance : 5

11
Tree	final int n1 = ( int ) n1 * n2 ;
Code	final int n1 = ( int ) n1 * n2 ;
Distance : 5

12
Tree	final int n2 = ( long ) n1 * n1 ;
Code	final int n2 = ( long ) n1 * n1 ;
Distance : 6

13
Tree	final int n2 = ( int ) n1 * n1 ;
Code	final int n2 = ( int ) n1 * n1 ;
Distance : 6

14
Tree	final int n1n2prod = ( double ) n1 * n2 ;
Code	final int n1n2prod = ( double ) n1 * n2 ;
Distance : 4

15
Tree	final int n1n2prod = ( char ) n1 * n2 ;
Code	final int n1n2prod = ( char ) n1 * n2 ;
Distance : 4

16
Tree	final double n1n2prod = ( long ) n1 * n2 ;
Code	final double n1n2prod = ( long ) n1 * n2 ;
Distance : 3

17
Tree	final double n1n2prod = ( int ) n1 * n2 ;
Code	final double n1n2prod = ( int ) n1 * n2 ;
Distance : 3

18
Tree	final int n1n2prod = ( byte ) n1 * n2 ;
Code	final int n1n2prod = ( byte ) n1 * n2 ;
Distance : 4

19
Tree	final int n1 = ( long ) n1 * n1 ;
Code	final int n1 = ( long ) n1 * n1 ;
Distance : 6

20
Tree	final int n1 = ( int ) n1 * n1 ;
Code	final int n1 = ( int ) n1 * n1 ;
Distance : 6

21
Tree	final int n1n2prod = ( double ) n1 * n1 ;
Code	final int n1n2prod = ( double ) n1 * n1 ;
Distance : 5

22
Tree	final int n2 = ( long ) n2 * n2 ;
Code	final int n2 = ( long ) n2 * n2 ;
Distance : 6

23
Tree	final int n1n2prod = ( char ) n1 * n1 ;
Code	final int n1n2prod = ( char ) n1 * n1 ;
Distance : 5

24
Tree	final int n2 = ( int ) n2 * n2 ;
Code	final int n2 = ( int ) n2 * n2 ;
Distance : 6

25
Tree	final double n1n2prod = ( int ) n1 * n1 ;
Code	final double n1n2prod = ( int ) n1 * n1 ;
Distance : 4

26
Tree	final double n1n2prod = ( long ) n1 * n1 ;
Code	final double n1n2prod = ( long ) n1 * n1 ;
Distance : 4

27
Tree	final int n1n2prod = ( byte ) n1 * n1 ;
Code	final int n1n2prod = ( byte ) n1 * n1 ;
Distance : 5

28
Tree	final byte n1n2prod = ( int ) n1 * n2 ;
Code	final byte n1n2prod = ( int ) n1 * n2 ;
Distance : 4

29
Tree	final int n1 = ( long ) n2 * n2 ;
Code	final int n1 = ( long ) n2 * n2 ;
Distance : 6

30
Tree	abstract int n1n2prod = ( long ) n1 * n2 ;
Code	abstract int n1n2prod = ( long ) n1 * n2 ;
Distance : 5

31
Tree	final int n1 = ( int ) n2 * n2 ;
Code	final int n1 = ( int ) n2 * n2 ;
Distance : 6

32
Tree	final byte n1n2prod = ( long ) n1 * n2 ;
Code	final byte n1n2prod = ( long ) n1 * n2 ;
Distance : 4

33
Tree	final int n2 = ( long ) n2 * n1 ;
Code	final int n2 = ( long ) n2 * n1 ;
Distance : 7

34
Tree	final int n2 = ( int ) n2 * n1 ;
Code	final int n2 = ( int ) n2 * n1 ;
Distance : 7

35
Tree	final int n1n2prod = ( double ) n2 * n2 ;
Code	final int n1n2prod = ( double ) n2 * n2 ;
Distance : 5

36
Tree	final int n1n2prod = ( float ) n1 * n2 ;
Code	final int n1n2prod = ( float ) n1 * n2 ;
Distance : 4

37
Tree	static int n1n2prod = ( long ) n1 * n2 ;
Code	static int n1n2prod = ( long ) n1 * n2 ;
Distance : 5

38
Tree	final int n1n2prod = ( char ) n2 * n2 ;
Code	final int n1n2prod = ( char ) n2 * n2 ;
Distance : 5

39
Tree	final long n1n2prod = ( int ) n1 * n2 ;
Code	final long n1n2prod = ( int ) n1 * n2 ;
Distance : 4

40
Tree	final double n1n2prod = ( long ) n2 * n2 ;
Code	final double n1n2prod = ( long ) n2 * n2 ;
Distance : 4

41
Tree	final double n1n2prod = ( int ) n2 * n2 ;
Code	final double n1n2prod = ( int ) n2 * n2 ;
Distance : 4

42
Tree	final long n1n2prod = ( long ) n1 * n2 ;
Code	final long n1n2prod = ( long ) n1 * n2 ;
Distance : 4

43
Tree	final int n1n2prod = ( byte ) n2 * n2 ;
Code	final int n1n2prod = ( byte ) n2 * n2 ;
Distance : 5

44
Tree	final char n1n2prod = ( int ) n1 * n2 ;
Code	final char n1n2prod = ( int ) n1 * n2 ;
Distance : 4

45
Tree	final byte n1n2prod = ( int ) n1 * n1 ;
Code	final byte n1n2prod = ( int ) n1 * n1 ;
Distance : 5

46
Tree	abstract int n1n2prod = ( int ) n1 * n2 ;
Code	abstract int n1n2prod = ( int ) n1 * n2 ;
Distance : 5

47
Tree	final int n1 = ( long ) n2 * n1 ;
Code	final int n1 = ( long ) n2 * n1 ;
Distance : 7

48
Tree	abstract int n1n2prod = ( long ) n1 * n1 ;
Code	abstract int n1n2prod = ( long ) n1 * n1 ;
Distance : 6

49
Tree	static int n1n2prod = ( int ) n1 * n2 ;
Code	static int n1n2prod = ( int ) n1 * n2 ;
Distance : 5

50
Tree	final boolean n1n2prod = ( int ) n1 * n2 ;
Code	final boolean n1n2prod = ( int ) n1 * n2 ;
Distance : 4

51
Tree	final char n1n2prod = ( long ) n1 * n2 ;
Code	final char n1n2prod = ( long ) n1 * n2 ;
Distance : 4

52
Tree	final int n1 = ( int ) n2 * n1 ;
Code	final int n1 = ( int ) n2 * n1 ;
Distance : 7

53
Tree	final int n2 = ( double ) n1 * n2 ;
Code	final int n2 = ( double ) n1 * n2 ;
Distance : 5

54
Tree	final byte n1n2prod = ( long ) n1 * n1 ;
Code	final byte n1n2prod = ( long ) n1 * n1 ;
Distance : 5

55
Tree	final boolean n1n2prod = ( long ) n1 * n2 ;
Code	final boolean n1n2prod = ( long ) n1 * n2 ;
Distance : 4

56
Tree	final int n2 = ( char ) n1 * n2 ;
Code	final int n2 = ( char ) n1 * n2 ;
Distance : 5

57
Tree	final double n2 = ( long ) n1 * n2 ;
Code	final double n2 = ( long ) n1 * n2 ;
Distance : 4

58
Tree	final double n2 = ( int ) n1 * n2 ;
Code	final double n2 = ( int ) n1 * n2 ;
Distance : 4

59
Tree	final int n1n2prod = ( float ) n1 * n1 ;
Code	final int n1n2prod = ( float ) n1 * n1 ;
Distance : 5

60
Tree	final int n1n2prod = ( double ) n2 * n1 ;
Code	final int n1n2prod = ( double ) n2 * n1 ;
Distance : 6

61
Tree	final long n1n2prod = ( int ) n1 * n1 ;
Code	final long n1n2prod = ( int ) n1 * n1 ;
Distance : 5

62
Tree	static int n1n2prod = ( long ) n1 * n1 ;
Code	static int n1n2prod = ( long ) n1 * n1 ;
Distance : 6

63
Tree	final int n1n2prod = ( char ) n2 * n1 ;
Code	final int n1n2prod = ( char ) n2 * n1 ;
Distance : 6

64
Tree	final double n1n2prod = ( long ) n2 * n1 ;
Code	final double n1n2prod = ( long ) n2 * n1 ;
Distance : 5

65
Tree	final double n1n2prod = ( int ) n2 * n1 ;
Code	final double n1n2prod = ( int ) n2 * n1 ;
Distance : 5

66
Tree	public int n1n2prod = ( long ) n1 * n2 ;
Code	public int n1n2prod = ( long ) n1 * n2 ;
Distance : 5

67
Tree	final long n1n2prod = ( long ) n1 * n1 ;
Code	final long n1n2prod = ( long ) n1 * n1 ;
Distance : 5

68
Tree	final int n1n2prod = ( boolean ) n1 * n2 ;
Code	final int n1n2prod = ( boolean ) n1 * n2 ;
Distance : 4

69
Tree	final int n1n2prod = ( short ) n1 * n2 ;
Code	final int n1n2prod = ( short ) n1 * n2 ;
Distance : 4

70
Tree	final int n2 = ( byte ) n1 * n2 ;
Code	final int n2 = ( byte ) n1 * n2 ;
Distance : 5

71
Tree	final char n1n2prod = ( int ) n1 * n1 ;
Code	final char n1n2prod = ( int ) n1 * n1 ;
Distance : 5

72
Tree	private int n1n2prod = ( long ) n1 * n2 ;
Code	private int n1n2prod = ( long ) n1 * n2 ;
Distance : 5

73
Tree	final int n1n2prod = ( byte ) n2 * n1 ;
Code	final int n1n2prod = ( byte ) n2 * n1 ;
Distance : 6

74
Tree	abstract int n1n2prod = ( int ) n1 * n1 ;
Code	abstract int n1n2prod = ( int ) n1 * n1 ;
Distance : 6

75
Tree	public int n1n2prod = ( int ) n1 * n2 ;
Code	public int n1n2prod = ( int ) n1 * n2 ;
Distance : 5

76
Tree	final int n1 = ( double ) n1 * n2 ;
Code	final int n1 = ( double ) n1 * n2 ;
Distance : 5

77
Tree	final int n1 = ( char ) n1 * n2 ;
Code	final int n1 = ( char ) n1 * n2 ;
Distance : 5

78
Tree	final double n1 = ( long ) n1 * n2 ;
Code	final double n1 = ( long ) n1 * n2 ;
Distance : 4

79
Tree	static int n1n2prod = ( int ) n1 * n1 ;
Code	static int n1n2prod = ( int ) n1 * n1 ;
Distance : 6

80
Tree	final boolean n1n2prod = ( int ) n1 * n1 ;
Code	final boolean n1n2prod = ( int ) n1 * n1 ;
Distance : 5

81
Tree	final byte n1n2prod = ( int ) n2 * n2 ;
Code	final byte n1n2prod = ( int ) n2 * n2 ;
Distance : 5

82
Tree	final double n1 = ( int ) n1 * n2 ;
Code	final double n1 = ( int ) n1 * n2 ;
Distance : 4

83
Tree	final char n1n2prod = ( long ) n1 * n1 ;
Code	final char n1n2prod = ( long ) n1 * n1 ;
Distance : 5

84
Tree	final int n2 = ( double ) n1 * n1 ;
Code	final int n2 = ( double ) n1 * n1 ;
Distance : 6

85
Tree	abstract int n1n2prod = ( long ) n2 * n2 ;
Code	abstract int n1n2prod = ( long ) n2 * n2 ;
Distance : 6

86
Tree	final boolean n1n2prod = ( long ) n1 * n1 ;
Code	final boolean n1n2prod = ( long ) n1 * n1 ;
Distance : 5

87
Tree	final double n2 = ( int ) n1 * n1 ;
Code	final double n2 = ( int ) n1 * n1 ;
Distance : 5

88
Tree	final double n2 = ( long ) n1 * n1 ;
Code	final double n2 = ( long ) n1 * n1 ;
Distance : 5

89
Tree	final int n2 = ( char ) n1 * n1 ;
Code	final int n2 = ( char ) n1 * n1 ;
Distance : 6

90
Tree	final byte n1n2prod = ( long ) n2 * n2 ;
Code	final byte n1n2prod = ( long ) n2 * n2 ;
Distance : 5

91
Tree	final double n1n2prod = ( double ) n1 * n2 ;
Code	final double n1n2prod = ( double ) n1 * n2 ;
Distance : 3

92
Tree	final double n1n2prod = ( char ) n1 * n2 ;
Code	final double n1n2prod = ( char ) n1 * n2 ;
Distance : 3

93
Tree	final int n1n2prod = ( float ) n2 * n2 ;
Code	final int n1n2prod = ( float ) n2 * n2 ;
Distance : 5

94
Tree	public int n1n2prod = ( long ) n1 * n1 ;
Code	public int n1n2prod = ( long ) n1 * n1 ;
Distance : 6

95
Tree	final int n1 = ( byte ) n1 * n2 ;
Code	final int n1 = ( byte ) n1 * n2 ;
Distance : 5

96
Tree	final int n1n2prod = ( boolean ) n1 * n1 ;
Code	final int n1n2prod = ( boolean ) n1 * n1 ;
Distance : 5

97
Tree	static int n1n2prod = ( long ) n2 * n2 ;
Code	static int n1n2prod = ( long ) n2 * n2 ;
Distance : 6

98
Tree	final long n1n2prod = ( int ) n2 * n2 ;
Code	final long n1n2prod = ( int ) n2 * n2 ;
Distance : 5

99
Tree	final float n1n2prod = ( int ) n1 * n2 ;
Code	final float n1n2prod = ( int ) n1 * n2 ;
Distance : 4

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

1
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

2
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

3
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

4
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

5
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

6
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

7
Tree	if ( x >= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

8
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

9
Tree	if ( y >= y - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= y - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

10
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

11
Tree	if ( y >= TWO_POWER_52 <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

12
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

13
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

14
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

15
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

16
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

17
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

18
Tree	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

19
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

20
Tree	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

21
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

22
Tree	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

23
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

24
Tree	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

25
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

26
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , x ) ; }
Distance : 4

27
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

28
Tree	if ( y >= TWO_POWER_52 y x <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - y ) { return pow ( - x , y ) ; }
Distance : 3

29
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

30
Tree	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

31
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

32
Tree	if ( y >= x y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

33
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

34
Tree	if ( x >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

35
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

36
Tree	if ( x >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

37
Tree	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

38
Tree	if ( y >= y y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

39
Tree	if ( y >= TWO_POWER_52 y <= <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y <= <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

40
Tree	if ( y >= x y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

41
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

42
Tree	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

43
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

44
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

45
Tree	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

46
Tree	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

47
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Distance : 4

48
Tree	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

49
Tree	if ( y >= TWO_POWER_52 y x <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - x ) { return pow ( - x , y ) ; }
Distance : 3

50
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

51
Tree	if ( y >= x y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

52
Tree	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

53
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

54
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 4

55
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

56
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

57
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

58
Tree	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Distance : 3

59
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

60
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

61
Tree	if ( TWO_POWER_52 >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

62
Tree	if ( y >= TWO_POWER_52 y x <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - y ) { return pow ( - x , x ) ; }
Distance : 4

63
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

64
Tree	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

65
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 5

66
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

67
Tree	if ( y >= x y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

68
Tree	if ( x >= TWO_POWER_52 - x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 - x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

69
Tree	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

70
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

71
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

72
Tree	if ( x >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

73
Tree	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

74
Tree	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , x ) ; }
Distance : 4

75
Tree	if ( y >= y y TWO_POWER_52 <= - x ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - x ) { return pow ( - x , x ) ; }
Distance : 4

76
Tree	if ( y >= y y x <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y x <= - y ) { return pow ( - x , y ) ; }
Distance : 3

77
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

78
Tree	if ( y >= TWO_POWER_52 y <= <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y <= <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

79
Tree	if ( x >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

80
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

81
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

82
Tree	if ( x >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

83
Tree	if ( y >= x y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

84
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

85
Tree	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

86
Tree	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

87
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

88
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 5

89
Tree	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

90
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , x ) ; }
Distance : 5

91
Tree	if ( y >= y y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

92
Tree	if ( y >= y y <= <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y <= <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

93
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

94
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

95
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 4

96
Tree	if ( y >= TWO_POWER_52 <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - y , x ) ; }
Code	if ( y >= TWO_POWER_52 <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - y , x ) ; }
Distance : 6

97
Tree	if ( x >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

98
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

99
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

1
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

2
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

3
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

4
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

5
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

6
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 21

7
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - vals
Distance : 20

8
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Distance : 20

9
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 21

10
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 21

11
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 19

12
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . pow ( vals ) - dim
Distance : 20

13
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Distance : 20

14
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Distance : 20

15
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( FastMath ) - dim
Distance : 21

16
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Distance : 20

17
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Distance : 20

18
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . getExponentTerm ( vals ) - dim
Distance : 19

19
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 19

20
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 19

21
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( FastMath ) - dim
Distance : 20

22
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . pow ( vals ) - dim
Distance : 20

23
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . pow ( vals ) - dim
Distance : 20

24
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( FastMath ) - dim
Distance : 21

25
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( covarianceMatrixDeterminant ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( covarianceMatrixDeterminant ) . pow ( vals ) - dim
Distance : 19

26
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( FastMath ) - dim
Distance : 21

27
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - FastMath
Distance : 20

28
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - getExponentTerm
Distance : 21

29
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

30
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - vals
Distance : 20

31
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . getExponentTerm ( vals ) - dim
Distance : 19

32
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . getExponentTerm ( vals ) - dim
Distance : 19

33
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( FastMath ) - dim
Distance : 20

34
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( FastMath ) - dim
Distance : 20

35
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

36
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - FastMath
Distance : 19

37
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 20

38
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

39
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( covarianceMatrixDeterminant ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( covarianceMatrixDeterminant ) . pow ( vals ) - dim
Distance : 19

40
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( FastMath ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( FastMath ) . pow ( vals ) - dim
Distance : 21

41
Tree	FastMath / FastMath * FastMath . pow ( dim ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( dim ) * pow ( vals ) . pow ( vals ) - dim
Distance : 19

42
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - vals
Distance : 19

43
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - FastMath
Distance : 20

44
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( covarianceMatrixDeterminant ) - dim
Distance : 21

45
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - FastMath
Distance : 20

46
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( vals ) - getExponentTerm
Distance : 21

47
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

48
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . pow ( vals ) - getExponentTerm
Distance : 21

49
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - vals
Distance : 20

50
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( FastMath ) - dim
Distance : 22

51
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

52
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - vals
Distance : 20

53
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . pow ( vals ) - getExponentTerm
Distance : 20

54
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( FastMath ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( FastMath ) . getExponentTerm ( vals ) - dim
Distance : 20

55
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( covarianceMatrixDeterminant ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( covarianceMatrixDeterminant ) . getExponentTerm ( vals ) - dim
Distance : 18

56
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

57
Tree	FastMath / FastMath * FastMath . pow ( dim ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( dim ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 18

58
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - FastMath
Distance : 19

59
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( FastMath ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( FastMath ) - getExponentTerm
Distance : 21

60
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - FastMath
Distance : 19

61
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 20

62
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

63
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 20

64
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

65
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( FastMath ) - dim
Distance : 21

66
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - vals
Distance : 19

67
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( FastMath ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( FastMath ) . pow ( vals ) - dim
Distance : 21

68
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( FastMath ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( FastMath ) . pow ( vals ) - dim
Distance : 21

69
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - vals
Distance : 19

70
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 19

71
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( FastMath ) - dim
Distance : 22

72
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 21

73
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . pow ( FastMath ) - dim
Distance : 22

74
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - FastMath
Distance : 21

75
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( FastMath ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( FastMath ) - getExponentTerm
Distance : 20

76
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . pow ( vals ) - getExponentTerm
Distance : 20

77
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . pow ( vals ) - getExponentTerm
Distance : 20

78
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( covarianceMatrixDeterminant ) - dim
Distance : 21

79
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - vals
Distance : 21

80
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( FastMath ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( FastMath ) - getExponentTerm
Distance : 21

81
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . pow ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . pow ( FastMath ) - dim
Distance : 21

82
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( FastMath ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( FastMath ) . getExponentTerm ( vals ) - dim
Distance : 20

83
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( FastMath ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( FastMath ) . getExponentTerm ( vals ) - dim
Distance : 20

84
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( covarianceMatrixDeterminant ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( covarianceMatrixDeterminant ) . pow ( vals ) - getExponentTerm
Distance : 19

85
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( FastMath ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( FastMath ) - getExponentTerm
Distance : 21

86
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . getExponentTerm ( FastMath ) - dim
Distance : 21

87
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( dim ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( dim ) . pow ( vals ) - dim
Distance : 20

88
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( vals ) . getExponentTerm ( FastMath ) - dim
Distance : 21

89
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( covarianceMatrixDeterminant ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( covarianceMatrixDeterminant ) . getExponentTerm ( vals ) - dim
Distance : 19

90
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Distance : 20

91
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - FastMath
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - FastMath
Distance : 20

92
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( FastMath ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 19

93
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . getExponentTerm ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( FastMath ) . getExponentTerm ( vals ) - getExponentTerm
Distance : 19

94
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( covarianceMatrixDeterminant ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( covarianceMatrixDeterminant ) - dim
Distance : 21

95
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( covarianceMatrixDeterminant ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * getExponentTerm ( covarianceMatrixDeterminant ) . pow ( vals ) - dim
Distance : 20

96
Tree	FastMath / FastMath * FastMath . pow ( dim ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( dim ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 20

97
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - vals
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - vals
Distance : 20

98
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( FastMath ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( FastMath ) - getExponentTerm
Distance : 20

99
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . getExponentTerm ( FastMath ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( FastMath ) . getExponentTerm ( FastMath ) - dim
Distance : 20

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	iterations = new Incrementor ( new Incrementor () ) ; i
Code	iterations = new Incrementor ( new Incrementor () ) ; i
Distance : 4

1
Tree	iterations = new Incrementor ( new Incrementor () ) ; createIllegalArgumentException
Code	iterations = new Incrementor ( new Incrementor () ) ; createIllegalArgumentException
Distance : 4

2
Tree	iterations = new Incrementor ( new Incrementor () ) ; checkArgument
Code	iterations = new Incrementor ( new Incrementor () ) ; checkArgument
Distance : 4

3
Tree	iterations = new Incrementor ( new Incrementor () ) ; data
Code	iterations = new Incrementor ( new Incrementor () ) ; data
Distance : 4

4
Tree	iterations = new Incrementor ( new Incrementor () ) ; add
Code	iterations = new Incrementor ( new Incrementor () ) ; add
Distance : 4

5
Tree	iterations = new Incrementor ( new Incrementor () ) ; paint
Code	iterations = new Incrementor ( new Incrementor () ) ; paint
Distance : 4

6
Tree	iterations = new Incrementor ( new Incrementor () ) ; m
Code	iterations = new Incrementor ( new Incrementor () ) ; m
Distance : 4

7
Tree	iterations = new Incrementor ( new Incrementor () ) ; join
Code	iterations = new Incrementor ( new Incrementor () ) ; join
Distance : 4

8
Tree	iterations = new Incrementor ( new Incrementor () ) ; NodeTraversal
Code	iterations = new Incrementor ( new Incrementor () ) ; NodeTraversal
Distance : 4

9
Tree	iterations = new Incrementor ( new Incrementor () ) ; fail
Code	iterations = new Incrementor ( new Incrementor () ) ; fail
Distance : 4

10
Tree	iterations = new Incrementor ( new Incrementor () ) ; List
Code	iterations = new Incrementor ( new Incrementor () ) ; List
Distance : 4

11
Tree	iterations = new Incrementor ( new Incrementor () ) ; <>
Code	iterations = new Incrementor ( new Incrementor () ) ; <>
Distance : 4

12
Tree	iterations = new Incrementor ( new Incrementor () ) ; Args
Code	iterations = new Incrementor ( new Incrementor () ) ; Args
Distance : 4

13
Tree	iterations = new Incrementor ( new Incrementor () ) ; :
Code	iterations = new Incrementor ( new Incrementor () ) ; :
Distance : 4

14
Tree	iterations = new Incrementor ( new Incrementor () ) ; try
Code	iterations = new Incrementor ( new Incrementor () ) ; try
Distance : 4

15
Tree	iterations = new Incrementor ( new Incrementor () ) ; result
Code	iterations = new Incrementor ( new Incrementor () ) ; result
Distance : 4

16
Tree	iterations = new Incrementor ( new Incrementor () ) ; *
Code	iterations = new Incrementor ( new Incrementor () ) ; *
Distance : 4

17
Tree	iterations = new Incrementor ( new Incrementor () ) ; assertThat
Code	iterations = new Incrementor ( new Incrementor () ) ; assertThat
Distance : 4

18
Tree	iterations = new Incrementor ( new Incrementor () ) ; str
Code	iterations = new Incrementor ( new Incrementor () ) ; str
Distance : 4

19
Tree	iterations = new Incrementor ( new Incrementor () ) ; x
Code	iterations = new Incrementor ( new Incrementor () ) ; x
Distance : 4

20
Tree	iterations = new Incrementor ( new Incrementor () ) ; LINE_JOINER
Code	iterations = new Incrementor ( new Incrementor () ) ; LINE_JOINER
Distance : 4

21
Tree	iterations = new Incrementor ( new Incrementor () ) ; parent
Code	iterations = new Incrementor ( new Incrementor () ) ; parent
Distance : 4

22
Tree	iterations = new Incrementor ( new Incrementor () ) ; testSame
Code	iterations = new Incrementor ( new Incrementor () ) ; testSame
Distance : 4

23
Tree	iterations = new Incrementor ( new Incrementor () ) ; ArrayList
Code	iterations = new Incrementor ( new Incrementor () ) ; ArrayList
Distance : 4

24
Tree	iterations = new Incrementor ( new Incrementor () ) ; expected
Code	iterations = new Incrementor ( new Incrementor () ) ; expected
Distance : 4

25
Tree	iterations = new Incrementor ( new Incrementor () ) ; int
Code	iterations = new Incrementor ( new Incrementor () ) ; int
Distance : 4

26
Tree	iterations = new Incrementor ( new Incrementor () ) ; invocation
Code	iterations = new Incrementor ( new Incrementor () ) ; invocation
Distance : 4

27
Tree	iterations = new Incrementor ( new Incrementor () ) ; FastMath
Code	iterations = new Incrementor ( new Incrementor () ) ; FastMath
Distance : 4

28
Tree	iterations = new Incrementor ( new Incrementor () ) ; t
Code	iterations = new Incrementor ( new Incrementor () ) ; t
Distance : 4

29
Tree	iterations = new Incrementor ( new Incrementor () ) ; reportCodeChange
Code	iterations = new Incrementor ( new Incrementor () ) ; reportCodeChange
Distance : 4

30
Tree	iterations = new Incrementor ( new Incrementor () ) ; field
Code	iterations = new Incrementor ( new Incrementor () ) ; field
Distance : 4

31
Tree	iterations = new Incrementor ( new Incrementor () ) ; boolean
Code	iterations = new Incrementor ( new Incrementor () ) ; boolean
Distance : 4

32
Tree	iterations = new Incrementor ( new Incrementor () ) ; fireChangeEvent
Code	iterations = new Incrementor ( new Incrementor () ) ; fireChangeEvent
Distance : 4

33
Tree	iterations = new Incrementor ( new Incrementor () ) ; serialised
Code	iterations = new Incrementor ( new Incrementor () ) ; serialised
Distance : 4

34
Tree	iterations = new Incrementor ( new Incrementor () ) ; type
Code	iterations = new Incrementor ( new Incrementor () ) ; type
Distance : 4

35
Tree	iterations = new Incrementor ( new Incrementor () ) ; getInstance
Code	iterations = new Incrementor ( new Incrementor () ) ; getInstance
Distance : 4

36
Tree	iterations = new Incrementor ( new Incrementor () ) ; false
Code	iterations = new Incrementor ( new Incrementor () ) ; false
Distance : 4

37
Tree	iterations = new Incrementor ( new Incrementor () ) ; !=
Code	iterations = new Incrementor ( new Incrementor () ) ; !=
Distance : 4

38
Tree	iterations = new Incrementor ( new Incrementor () ) ; checkState
Code	iterations = new Incrementor ( new Incrementor () ) ; checkState
Distance : 4

39
Tree	iterations = new Incrementor ( new Incrementor () ) ; super
Code	iterations = new Incrementor ( new Incrementor () ) ; super
Distance : 4

40
Tree	iterations = new Incrementor ( new Incrementor () ) ; !
Code	iterations = new Incrementor ( new Incrementor () ) ; !
Distance : 4

41
Tree	iterations = new Incrementor ( new Incrementor () ) ; nullNotPermitted
Code	iterations = new Incrementor ( new Incrementor () ) ; nullNotPermitted
Distance : 4

42
Tree	iterations = new Incrementor ( new Incrementor () ) ; ==
Code	iterations = new Incrementor ( new Incrementor () ) ; ==
Distance : 4

43
Tree	iterations = new Incrementor ( new Incrementor () ) ; []
Code	iterations = new Incrementor ( new Incrementor () ) ; []
Distance : 4

44
Tree	iterations = new Incrementor ( new Incrementor () ) ; @
Code	iterations = new Incrementor ( new Incrementor () ) ; @
Distance : 4

45
Tree	iterations = new Incrementor ( new Incrementor () ) ; assertEquals
Code	iterations = new Incrementor ( new Incrementor () ) ; assertEquals
Distance : 4

46
Tree	iterations = new Incrementor ( new Incrementor () ) ; test
Code	iterations = new Incrementor ( new Incrementor () ) ; test
Distance : 4

47
Tree	iterations = new Incrementor ( new Incrementor () ) ; IllegalArgumentException
Code	iterations = new Incrementor ( new Incrementor () ) ; IllegalArgumentException
Distance : 4

48
Tree	iterations = new Incrementor ( new Incrementor () ) ; Object
Code	iterations = new Incrementor ( new Incrementor () ) ; Object
Distance : 4

49
Tree	iterations = new Incrementor ( new Incrementor () ) ;
Code	iterations = new Incrementor ( new Incrementor () ) ;
Distance : 3

50
Tree	iterations = new Incrementor ( new Incrementor () ) ; ]
Code	iterations = new Incrementor ( new Incrementor () ) ; ]
Distance : 4

51
Tree	iterations = new Incrementor ( new Incrementor () ) ; Preconditions
Code	iterations = new Incrementor ( new Incrementor () ) ; Preconditions
Distance : 4

52
Tree	iterations = new Incrementor ( new Incrementor () ) ; &&
Code	iterations = new Incrementor ( new Incrementor () ) ; &&
Distance : 4

53
Tree	iterations = new Incrementor ( new Incrementor () ) ; -
Code	iterations = new Incrementor ( new Incrementor () ) ; -
Distance : 4

54
Tree	iterations = new Incrementor ( new Incrementor () ) ; [
Code	iterations = new Incrementor ( new Incrementor () ) ; [
Distance : 4

55
Tree	iterations = new Incrementor ( new Incrementor () ) ; ParamChecks
Code	iterations = new Incrementor ( new Incrementor () ) ; ParamChecks
Distance : 4

56
Tree	iterations = new Incrementor ( new Incrementor () ) ; Override
Code	iterations = new Incrementor ( new Incrementor () ) ; Override
Distance : 4

57
Tree	iterations = new Incrementor ( new Incrementor () ) ; MathRuntimeException
Code	iterations = new Incrementor ( new Incrementor () ) ; MathRuntimeException
Distance : 4

58
Tree	iterations = new Incrementor ( new Incrementor () ) ; mock
Code	iterations = new Incrementor ( new Incrementor () ) ; mock
Distance : 4

59
Tree	iterations = new Incrementor ( new Incrementor () ) ; f
Code	iterations = new Incrementor ( new Incrementor () ) ; f
Distance : 4

60
Tree	iterations = new Incrementor ( new Incrementor () ) ; class
Code	iterations = new Incrementor ( new Incrementor () ) ; class
Distance : 4

61
Tree	iterations = new Incrementor ( new Incrementor () ) ; array
Code	iterations = new Incrementor ( new Incrementor () ) ; array
Distance : 4

62
Tree	iterations = new Incrementor ( new Incrementor () ) ; name
Code	iterations = new Incrementor ( new Incrementor () ) ; name
Distance : 4

63
Tree	iterations = new Incrementor ( new Incrementor () ) ; T
Code	iterations = new Incrementor ( new Incrementor () ) ; T
Distance : 4

64
Tree	iterations = new Incrementor ( new Incrementor () ) ; void
Code	iterations = new Incrementor ( new Incrementor () ) ; void
Distance : 4

65
Tree	iterations = new Incrementor ( new Incrementor () ) ; compiler
Code	iterations = new Incrementor ( new Incrementor () ) ; compiler
Distance : 4

66
Tree	iterations = new Incrementor ( new Incrementor () ) ; throw
Code	iterations = new Incrementor ( new Incrementor () ) ; throw
Distance : 4

67
Tree	iterations = new Incrementor ( new Incrementor () ) ; e
Code	iterations = new Incrementor ( new Incrementor () ) ; e
Distance : 4

68
Tree	iterations = new Incrementor ( new Incrementor () ) ; +
Code	iterations = new Incrementor ( new Incrementor () ) ; +
Distance : 4

69
Tree	iterations = new Incrementor ( new Incrementor () ) ; n
Code	iterations = new Incrementor ( new Incrementor () ) ; n
Distance : 4

70
Tree	iterations = new Incrementor ( new Incrementor () ) ; catch
Code	iterations = new Incrementor ( new Incrementor () ) ; catch
Distance : 4

71
Tree	iterations = new Incrementor ( new Incrementor () ) ; <
Code	iterations = new Incrementor ( new Incrementor () ) ; <
Distance : 4

72
Tree	iterations = new Incrementor ( new Incrementor () ) ; final
Code	iterations = new Incrementor ( new Incrementor () ) ; final
Distance : 4

73
Tree	iterations = new Incrementor ( new Incrementor () ) ; true
Code	iterations = new Incrementor ( new Incrementor () ) ; true
Distance : 4

74
Tree	iterations = new Incrementor ( new Incrementor () ) ; return
Code	iterations = new Incrementor ( new Incrementor () ) ; return
Distance : 4

75
Tree	iterations = new Incrementor ( new Incrementor () ) ; >
Code	iterations = new Incrementor ( new Incrementor () ) ; >
Distance : 4

76
Tree	iterations = new Incrementor ( new Incrementor () ) ; this
Code	iterations = new Incrementor ( new Incrementor () ) ; this
Distance : 4

77
Tree	iterations = new Incrementor ( new Incrementor () ) ; if
Code	iterations = new Incrementor ( new Incrementor () ) ; if
Distance : 4

78
Tree	iterations = new Incrementor ( new Incrementor () ) ; public
Code	iterations = new Incrementor ( new Incrementor () ) ; public
Distance : 4

79
Tree	iterations = new Incrementor ( new Incrementor () ) ; String
Code	iterations = new Incrementor ( new Incrementor () ) ; String
Distance : 4

80
Tree	iterations = new Incrementor ( new Incrementor () ) ; }
Code	iterations = new Incrementor ( new Incrementor () ) ; }
Distance : 4

81
Tree	iterations = new Incrementor ( new Incrementor () ) ; .
Code	iterations = new Incrementor ( new Incrementor () ) ; .
Distance : 4

82
Tree	iterations = new Incrementor ( new Incrementor () ) ; (
Code	iterations = new Incrementor ( new Incrementor () ) ; (
Distance : 4

83
Tree	iterations = new Incrementor ( new Incrementor () ) ; ;
Code	iterations = new Incrementor ( new Incrementor () ) ; ;
Distance : 4

84
Tree	iterations = new Incrementor ( new Incrementor () ) ; <blank>
Code	iterations = new Incrementor ( new Incrementor () ) ; <blank>
Distance : 4

85
Tree	iterations = new Incrementor ( new Incrementor () ) ; ;
Code	iterations = new Incrementor ( new Incrementor () ) ; ;
Distance : 4

86
Tree	iterations = new Incrementor ( new Incrementor () ) ; double
Code	iterations = new Incrementor ( new Incrementor () ) ; double
Distance : 4

87
Tree	iterations = new Incrementor ( new Incrementor () ) ; <s>
Code	iterations = new Incrementor ( new Incrementor () ) ; <s>
Distance : 4

88
Tree	iterations = new Incrementor ( new Incrementor () ) ; STRING_CONSTANT
Code	iterations = new Incrementor ( new Incrementor () ) ; STRING_CONSTANT
Distance : 4

89
Tree	iterations = new Incrementor ( new Incrementor () ) ; {
Code	iterations = new Incrementor ( new Incrementor () ) ; {
Distance : 4

90
Tree	iterations = new Incrementor ( new Incrementor () ) ; ,
Code	iterations = new Incrementor ( new Incrementor () ) ; ,
Distance : 4

91
Tree	iterations = new Incrementor ( new Incrementor () ) ; ()
Code	iterations = new Incrementor ( new Incrementor () ) ; ()
Distance : 4

92
Tree	iterations = new Incrementor ( new Incrementor () ) ; new
Code	iterations = new Incrementor ( new Incrementor () ) ; new
Distance : 4

93
Tree	iterations = new Incrementor ( new Incrementor () ) ; =
Code	iterations = new Incrementor ( new Incrementor () ) ; =
Distance : 4

94
Tree	iterations = new Incrementor ( new Incrementor () ) ; NUMBER_CONSTANT
Code	iterations = new Incrementor ( new Incrementor () ) ; NUMBER_CONSTANT
Distance : 4

95
Tree	iterations = new Incrementor ( new Incrementor () ) ; null
Code	iterations = new Incrementor ( new Incrementor () ) ; null
Distance : 4

96
Tree	iterations = new Incrementor ( new Incrementor () ) ; {}
Code	iterations = new Incrementor ( new Incrementor () ) ; {}
Distance : 4

97
Tree	iterations = new Incrementor ( new Incrementor () ) ; value
Code	iterations = new Incrementor ( new Incrementor () ) ; value
Distance : 4

98
Tree	iterations = new Incrementor ( new Incrementor () ) ; )
Code	iterations = new Incrementor ( new Incrementor () ) ; )
Distance : 4

99
Tree	iterations = new Incrementor ( new Incrementor () ) ; mode
Code	iterations = new Incrementor ( new Incrementor () ) ; mode
Distance : 4

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

1
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

2
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

3
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

4
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

5
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

6
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

7
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

8
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

9
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 4

10
Tree	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 5

11
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 3

12
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 3

13
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

14
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

15
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

16
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

17
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

18
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

19
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 3

20
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

21
Tree	if ( NaN == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 5

22
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

23
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

24
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

25
Tree	if ( imaginary == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 5

26
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Distance : 3

27
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 4

28
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

29
Tree	if ( real == NUMBER_CONSTANT && real > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > NaN ) { return NaN ; }
Distance : 4

30
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 4

31
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Distance : 4

32
Tree	if ( real == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Distance : 4

33
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

34
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

35
Tree	if ( imaginary == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 5

36
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

37
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

38
Tree	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 5

39
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

40
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

41
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

42
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 3

43
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return imaginary ; }
Distance : 3

44
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

45
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 3

46
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 4

47
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

48
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return imaginary ; }
Distance : 4

49
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 3

50
Tree	if ( NaN == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 5

51
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 4

52
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

53
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

54
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 4

55
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 4

56
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 3

57
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 3

58
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 3

59
Tree	if ( NaN == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 5

60
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Distance : 4

61
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return real ; }
Distance : 4

62
Tree	if ( imaginary == NUMBER_CONSTANT && real > NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > NaN ) { return NaN ; }
Distance : 5

63
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

64
Tree	if ( NaN == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 5

65
Tree	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Distance : 5

66
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

67
Tree	if ( imaginary == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Distance : 5

68
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 3

69
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

70
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

71
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

72
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

73
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 4

74
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return real ; }
Distance : 3

75
Tree	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 5

76
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

77
Tree	if ( real == NUMBER_CONSTANT && NaN > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > NaN ) { return NaN ; }
Distance : 4

78
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return real ; }
Distance : 4

79
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 4

80
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 3

81
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 4

82
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Distance : 4

83
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 3

84
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return imaginary ; }
Distance : 4

85
Tree	if ( imaginary == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 5

86
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return imaginary ; }
Distance : 4

87
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Distance : 3

88
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

89
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 4

90
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

91
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

92
Tree	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return imaginary ; }
Distance : 5

93
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return real ; }
Distance : 4

94
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

95
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

96
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

97
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return imaginary ; }
Distance : 3

98
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

99
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > real ) { return real ; }
Distance : 4

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	new Reporter () . smartNullPointerException ( location ) ; !=
Code	new Reporter () . smartNullPointerException ( location ) ; !=
Distance : 3

1
Tree	new Reporter () . smartNullPointerException ( location ) ; createIllegalArgumentException
Code	new Reporter () . smartNullPointerException ( location ) ; createIllegalArgumentException
Distance : 3

2
Tree	new Reporter () . smartNullPointerException ( location ) ; add
Code	new Reporter () . smartNullPointerException ( location ) ; add
Distance : 3

3
Tree	new Reporter () . smartNullPointerException ( location ) ; name
Code	new Reporter () . smartNullPointerException ( location ) ; name
Distance : 3

4
Tree	new Reporter () . smartNullPointerException ( location ) ; m
Code	new Reporter () . smartNullPointerException ( location ) ; m
Distance : 3

5
Tree	new Reporter () . smartNullPointerException ( location ) ; boolean
Code	new Reporter () . smartNullPointerException ( location ) ; boolean
Distance : 3

6
Tree	new Reporter () . smartNullPointerException ( location ) ; checkArgument
Code	new Reporter () . smartNullPointerException ( location ) ; checkArgument
Distance : 3

7
Tree	new Reporter () . smartNullPointerException ( location ) ; data
Code	new Reporter () . smartNullPointerException ( location ) ; data
Distance : 3

8
Tree	new Reporter () . smartNullPointerException ( location ) ; List
Code	new Reporter () . smartNullPointerException ( location ) ; List
Distance : 3

9
Tree	new Reporter () . smartNullPointerException ( location ) ; Args
Code	new Reporter () . smartNullPointerException ( location ) ; Args
Distance : 3

10
Tree	new Reporter () . smartNullPointerException ( location ) ; array
Code	new Reporter () . smartNullPointerException ( location ) ; array
Distance : 3

11
Tree	new Reporter () . smartNullPointerException ( location ) ; <>
Code	new Reporter () . smartNullPointerException ( location ) ; <>
Distance : 3

12
Tree	new Reporter () . smartNullPointerException ( location ) ; try
Code	new Reporter () . smartNullPointerException ( location ) ; try
Distance : 3

13
Tree	new Reporter () . smartNullPointerException ( location ) ; fail
Code	new Reporter () . smartNullPointerException ( location ) ; fail
Distance : 3

14
Tree	new Reporter () . smartNullPointerException ( location ) ; paint
Code	new Reporter () . smartNullPointerException ( location ) ; paint
Distance : 3

15
Tree	new Reporter () . smartNullPointerException ( location ) ; join
Code	new Reporter () . smartNullPointerException ( location ) ; join
Distance : 3

16
Tree	new Reporter () . smartNullPointerException ( location ) ; str
Code	new Reporter () . smartNullPointerException ( location ) ; str
Distance : 3

17
Tree	new Reporter () . smartNullPointerException ( location ) ; LINE_JOINER
Code	new Reporter () . smartNullPointerException ( location ) ; LINE_JOINER
Distance : 3

18
Tree	new Reporter () . smartNullPointerException ( location ) ; testSame
Code	new Reporter () . smartNullPointerException ( location ) ; testSame
Distance : 3

19
Tree	new Reporter () . smartNullPointerException ( location ) ; x
Code	new Reporter () . smartNullPointerException ( location ) ; x
Distance : 3

20
Tree	new Reporter () . smartNullPointerException ( location ) ; ArrayList
Code	new Reporter () . smartNullPointerException ( location ) ; ArrayList
Distance : 3

21
Tree	new Reporter () . smartNullPointerException ( location ) ; fireChangeEvent
Code	new Reporter () . smartNullPointerException ( location ) ; fireChangeEvent
Distance : 3

22
Tree	new Reporter () . smartNullPointerException ( location ) ; super
Code	new Reporter () . smartNullPointerException ( location ) ; super
Distance : 3

23
Tree	new Reporter () . smartNullPointerException ( location ) ; parent
Code	new Reporter () . smartNullPointerException ( location ) ; parent
Distance : 3

24
Tree	new Reporter () . smartNullPointerException ( location ) ; IllegalArgumentException
Code	new Reporter () . smartNullPointerException ( location ) ; IllegalArgumentException
Distance : 3

25
Tree	new Reporter () . smartNullPointerException ( location ) ; test
Code	new Reporter () . smartNullPointerException ( location ) ; test
Distance : 3

26
Tree	new Reporter () . smartNullPointerException ( location ) ; int
Code	new Reporter () . smartNullPointerException ( location ) ; int
Distance : 3

27
Tree	new Reporter () . smartNullPointerException ( location ) ; invocation
Code	new Reporter () . smartNullPointerException ( location ) ; invocation
Distance : 3

28
Tree	new Reporter () . smartNullPointerException ( location ) ; reportCodeChange
Code	new Reporter () . smartNullPointerException ( location ) ; reportCodeChange
Distance : 3

29
Tree	new Reporter () . smartNullPointerException ( location ) ; expected
Code	new Reporter () . smartNullPointerException ( location ) ; expected
Distance : 3

30
Tree	new Reporter () . smartNullPointerException ( location ) ; :
Code	new Reporter () . smartNullPointerException ( location ) ; :
Distance : 3

31
Tree	new Reporter () . smartNullPointerException ( location ) ; result
Code	new Reporter () . smartNullPointerException ( location ) ; result
Distance : 3

32
Tree	new Reporter () . smartNullPointerException ( location ) ; serialised
Code	new Reporter () . smartNullPointerException ( location ) ; serialised
Distance : 3

33
Tree	new Reporter () . smartNullPointerException ( location ) ; getInstance
Code	new Reporter () . smartNullPointerException ( location ) ; getInstance
Distance : 3

34
Tree	new Reporter () . smartNullPointerException ( location ) ; *
Code	new Reporter () . smartNullPointerException ( location ) ; *
Distance : 3

35
Tree	new Reporter () . smartNullPointerException ( location ) ; type
Code	new Reporter () . smartNullPointerException ( location ) ; type
Distance : 3

36
Tree	new Reporter () . smartNullPointerException ( location ) ; false
Code	new Reporter () . smartNullPointerException ( location ) ; false
Distance : 3

37
Tree	new Reporter () . smartNullPointerException ( location ) ; double
Code	new Reporter () . smartNullPointerException ( location ) ; double
Distance : 3

38
Tree	new Reporter () . smartNullPointerException ( location ) ; FastMath
Code	new Reporter () . smartNullPointerException ( location ) ; FastMath
Distance : 3

39
Tree	new Reporter () . smartNullPointerException ( location ) ; checkState
Code	new Reporter () . smartNullPointerException ( location ) ; checkState
Distance : 3

40
Tree	new Reporter () . smartNullPointerException ( location ) ; nullNotPermitted
Code	new Reporter () . smartNullPointerException ( location ) ; nullNotPermitted
Distance : 3

41
Tree	new Reporter () . smartNullPointerException ( location ) ; []
Code	new Reporter () . smartNullPointerException ( location ) ; []
Distance : 3

42
Tree	new Reporter () . smartNullPointerException ( location ) ; void
Code	new Reporter () . smartNullPointerException ( location ) ; void
Distance : 3

43
Tree	new Reporter () . smartNullPointerException ( location ) ; ==
Code	new Reporter () . smartNullPointerException ( location ) ; ==
Distance : 3

44
Tree	new Reporter () . smartNullPointerException ( location ) ; assertEquals
Code	new Reporter () . smartNullPointerException ( location ) ; assertEquals
Distance : 3

45
Tree	new Reporter () . smartNullPointerException ( location ) ; !
Code	new Reporter () . smartNullPointerException ( location ) ; !
Distance : 3

46
Tree	new Reporter () . smartNullPointerException ( location ) ; @
Code	new Reporter () . smartNullPointerException ( location ) ; @
Distance : 3

47
Tree	new Reporter () . smartNullPointerException ( location ) ; assertThat
Code	new Reporter () . smartNullPointerException ( location ) ; assertThat
Distance : 3

48
Tree	new Reporter () . smartNullPointerException ( location ) ; Override
Code	new Reporter () . smartNullPointerException ( location ) ; Override
Distance : 3

49
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

50
Tree	new Reporter () . smartNullPointerException ( location ) ; [
Code	new Reporter () . smartNullPointerException ( location ) ; [
Distance : 3

51
Tree	new Reporter () . smartNullPointerException ( location ) ; this
Code	new Reporter () . smartNullPointerException ( location ) ; this
Distance : 3

52
Tree	new Reporter () . smartNullPointerException ( location ) ; &&
Code	new Reporter () . smartNullPointerException ( location ) ; &&
Distance : 3

53
Tree	new Reporter () . smartNullPointerException ( location ) ; T
Code	new Reporter () . smartNullPointerException ( location ) ; T
Distance : 3

54
Tree	new Reporter () . smartNullPointerException ( location ) ; Preconditions
Code	new Reporter () . smartNullPointerException ( location ) ; Preconditions
Distance : 3

55
Tree	new Reporter () . smartNullPointerException ( location ) ; -
Code	new Reporter () . smartNullPointerException ( location ) ; -
Distance : 3

56
Tree	new Reporter () . smartNullPointerException ( location ) ; class
Code	new Reporter () . smartNullPointerException ( location ) ; class
Distance : 3

57
Tree	new Reporter () . smartNullPointerException ( location ) ; Object
Code	new Reporter () . smartNullPointerException ( location ) ; Object
Distance : 3

58
Tree	new Reporter () . smartNullPointerException ( location ) ; {}
Code	new Reporter () . smartNullPointerException ( location ) ; {}
Distance : 3

59
Tree	new Reporter () . smartNullPointerException ( location ) ; MathRuntimeException
Code	new Reporter () . smartNullPointerException ( location ) ; MathRuntimeException
Distance : 3

60
Tree	new Reporter () . smartNullPointerException ( location ) ; ParamChecks
Code	new Reporter () . smartNullPointerException ( location ) ; ParamChecks
Distance : 3

61
Tree	new Reporter () . smartNullPointerException ( location ) ; f
Code	new Reporter () . smartNullPointerException ( location ) ; f
Distance : 3

62
Tree	new Reporter () . smartNullPointerException ( location ) ; t
Code	new Reporter () . smartNullPointerException ( location ) ; t
Distance : 3

63
Tree	new Reporter () . smartNullPointerException ( location ) ; field
Code	new Reporter () . smartNullPointerException ( location ) ; field
Distance : 3

64
Tree	new Reporter () . smartNullPointerException ( location ) ; value
Code	new Reporter () . smartNullPointerException ( location ) ; value
Distance : 3

65
Tree	new Reporter () . smartNullPointerException ( location ) ; i
Code	new Reporter () . smartNullPointerException ( location ) ; i
Distance : 3

66
Tree	new Reporter () . smartNullPointerException ( location ) ; throw
Code	new Reporter () . smartNullPointerException ( location ) ; throw
Distance : 3

67
Tree	new Reporter () . smartNullPointerException ( location ) ; catch
Code	new Reporter () . smartNullPointerException ( location ) ; catch
Distance : 3

68
Tree	new Reporter () . smartNullPointerException ( location ) ; +
Code	new Reporter () . smartNullPointerException ( location ) ; +
Distance : 3

69
Tree	new Reporter () . smartNullPointerException ( location ) ; null
Code	new Reporter () . smartNullPointerException ( location ) ; null
Distance : 3

70
Tree	new Reporter () . smartNullPointerException ( location ) ; String
Code	new Reporter () . smartNullPointerException ( location ) ; String
Distance : 3

71
Tree	new Reporter () . smartNullPointerException ( location ) ; compiler
Code	new Reporter () . smartNullPointerException ( location ) ; compiler
Distance : 3

72
Tree	new Reporter () . smartNullPointerException ( location ) ; ]
Code	new Reporter () . smartNullPointerException ( location ) ; ]
Distance : 3

73
Tree	new Reporter () . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) ;
Distance : 2

74
Tree	new Reporter () . smartNullPointerException ( location ) ; NUMBER_CONSTANT
Code	new Reporter () . smartNullPointerException ( location ) ; NUMBER_CONSTANT
Distance : 3

75
Tree	new Reporter () . smartNullPointerException ( location ) ; true
Code	new Reporter () . smartNullPointerException ( location ) ; true
Distance : 3

76
Tree	new Reporter () . smartNullPointerException ( location ) ; return
Code	new Reporter () . smartNullPointerException ( location ) ; return
Distance : 3

77
Tree	new Reporter () . smartNullPointerException ( location ) ; <
Code	new Reporter () . smartNullPointerException ( location ) ; <
Distance : 3

78
Tree	new Reporter () . smartNullPointerException ( location ) ; e
Code	new Reporter () . smartNullPointerException ( location ) ; e
Distance : 3

79
Tree	new Reporter () . smartNullPointerException ( location ) ; n
Code	new Reporter () . smartNullPointerException ( location ) ; n
Distance : 3

80
Tree	new Reporter () . smartNullPointerException ( location ) ; {
Code	new Reporter () . smartNullPointerException ( location ) ; {
Distance : 3

81
Tree	new Reporter () . smartNullPointerException ( location ) ; ()
Code	new Reporter () . smartNullPointerException ( location ) ; ()
Distance : 3

82
Tree	new Reporter () . smartNullPointerException ( location ) ; ;
Code	new Reporter () . smartNullPointerException ( location ) ; ;
Distance : 3

83
Tree	new Reporter () . smartNullPointerException ( location ) ; )
Code	new Reporter () . smartNullPointerException ( location ) ; )
Distance : 3

84
Tree	new Reporter () . smartNullPointerException ( location ) ; ;
Code	new Reporter () . smartNullPointerException ( location ) ; ;
Distance : 3

85
Tree	new Reporter () . smartNullPointerException ( location ) ; if
Code	new Reporter () . smartNullPointerException ( location ) ; if
Distance : 3

86
Tree	new Reporter () . smartNullPointerException ( location ) ; <blank>
Code	new Reporter () . smartNullPointerException ( location ) ; <blank>
Distance : 3

87
Tree	new Reporter () . smartNullPointerException ( location ) ; (
Code	new Reporter () . smartNullPointerException ( location ) ; (
Distance : 3

88
Tree	new Reporter () . smartNullPointerException ( location ) ; =
Code	new Reporter () . smartNullPointerException ( location ) ; =
Distance : 3

89
Tree	new Reporter () . smartNullPointerException ( location ) ; }
Code	new Reporter () . smartNullPointerException ( location ) ; }
Distance : 3

90
Tree	new Reporter () . smartNullPointerException ( location ) ; .
Code	new Reporter () . smartNullPointerException ( location ) ; .
Distance : 3

91
Tree	new Reporter () . smartNullPointerException ( location ) ; ,
Code	new Reporter () . smartNullPointerException ( location ) ; ,
Distance : 3

92
Tree	new Reporter () . smartNullPointerException ( location ) ; STRING_CONSTANT
Code	new Reporter () . smartNullPointerException ( location ) ; STRING_CONSTANT
Distance : 3

93
Tree	new Reporter () . smartNullPointerException ( location ) ; new
Code	new Reporter () . smartNullPointerException ( location ) ; new
Distance : 3

94
Tree	new Reporter () . smartNullPointerException ( location ) ; >
Code	new Reporter () . smartNullPointerException ( location ) ; >
Distance : 3

95
Tree	new Reporter () . smartNullPointerException ( location ) ; public
Code	new Reporter () . smartNullPointerException ( location ) ; public
Distance : 3

96
Tree	new Reporter () . smartNullPointerException ( location ) ; mode
Code	new Reporter () . smartNullPointerException ( location ) ; mode
Distance : 3

97
Tree	new Reporter () . smartNullPointerException ( location ) ; <s>
Code	new Reporter () . smartNullPointerException ( location ) ; <s>
Distance : 3

98
Tree	new Reporter () . smartNullPointerException ( location ) ; final
Code	new Reporter () . smartNullPointerException ( location ) ; final
Distance : 3

99
Tree	new Reporter () . smartNullPointerException ( location ) ; mock
Code	new Reporter () . smartNullPointerException ( location ) ; mock
Distance : 3

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; -
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; -
Distance : 9

1
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; assertThat
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; assertThat
Distance : 9

2
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; :
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; :
Distance : 9

3
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; field
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; field
Distance : 9

4
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; t
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; t
Distance : 9

5
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; name
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; name
Distance : 9

6
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; add
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; add
Distance : 9

7
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <>
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <>
Distance : 9

8
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; array
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; array
Distance : 9

9
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ParamChecks
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ParamChecks
Distance : 9

10
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; f
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; f
Distance : 9

11
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; result
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; result
Distance : 9

12
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; boolean
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; boolean
Distance : 9

13
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Preconditions
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Preconditions
Distance : 9

14
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; m
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; m
Distance : 9

15
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; x
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; x
Distance : 9

16
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; testSame
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; testSame
Distance : 9

17
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; parent
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; parent
Distance : 9

18
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; createIllegalArgumentException
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; createIllegalArgumentException
Distance : 9

19
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; serialised
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; serialised
Distance : 9

20
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; getInstance
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; getInstance
Distance : 9

21
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; fireChangeEvent
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; fireChangeEvent
Distance : 9

22
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; invocation
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; invocation
Distance : 9

23
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ArrayList
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ArrayList
Distance : 9

24
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; str
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; str
Distance : 9

25
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; !
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; !
Distance : 9

26
Tree	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

27
Tree	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

28
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; @
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; @
Distance : 9

29
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; List
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; List
Distance : 9

30
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Args
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Args
Distance : 9

31
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; fail
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; fail
Distance : 9

32
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; try
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; try
Distance : 9

33
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; type
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; type
Distance : 9

34
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; *
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; *
Distance : 9

35
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; paint
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; paint
Distance : 9

36
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; join
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; join
Distance : 9

37
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; test
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; test
Distance : 9

38
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; false
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; false
Distance : 9

39
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; int
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; int
Distance : 9

40
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; LINE_JOINER
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; LINE_JOINER
Distance : 9

41
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ==
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ==
Distance : 9

42
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; void
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; void
Distance : 9

43
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; catch
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; catch
Distance : 9

44
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; throw
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; throw
Distance : 9

45
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; nullNotPermitted
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; nullNotPermitted
Distance : 9

46
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; []
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; []
Distance : 9

47
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; assertEquals
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; assertEquals
Distance : 9

48
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; MathRuntimeException
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; MathRuntimeException
Distance : 9

49
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

50
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; true
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; true
Distance : 9

51
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; mode
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; mode
Distance : 9

52
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; NUMBER_CONSTANT
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; NUMBER_CONSTANT
Distance : 9

53
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; value
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; value
Distance : 9

54
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; i
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; i
Distance : 9

55
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; T
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; T
Distance : 9

56
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; &&
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; &&
Distance : 9

57
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Override
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Override
Distance : 9

58
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; mock
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; mock
Distance : 9

59
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Object
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Object
Distance : 9

60
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

61
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; class
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; class
Distance : 9

62
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; FastMath
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; FastMath
Distance : 9

63
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; expected
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; expected
Distance : 9

64
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; reportCodeChange
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; reportCodeChange
Distance : 9

65
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; !=
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; !=
Distance : 9

66
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; super
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; super
Distance : 9

67
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; double
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; double
Distance : 9

68
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; checkState
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; checkState
Distance : 9

69
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; compiler
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; compiler
Distance : 9

70
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; String
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; String
Distance : 9

71
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; IllegalArgumentException
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; IllegalArgumentException
Distance : 9

72
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; public
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; public
Distance : 9

73
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; STRING_CONSTANT
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; STRING_CONSTANT
Distance : 9

74
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ]
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ]
Distance : 9

75
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; new
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; new
Distance : 9

76
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; >
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; >
Distance : 9

77
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; null
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; null
Distance : 9

78
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; +
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; +
Distance : 9

79
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ,
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ,
Distance : 9

80
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; .
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; .
Distance : 9

81
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; )
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; )
Distance : 9

82
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ;
Distance : 9

83
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; [
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; [
Distance : 9

84
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <s>
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <s>
Distance : 9

85
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; (
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; (
Distance : 9

86
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <blank>
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <blank>
Distance : 9

87
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; {
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; {
Distance : 9

88
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ()
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ()
Distance : 9

89
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; }
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; }
Distance : 9

90
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; =
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; =
Distance : 9

91
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; final
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; final
Distance : 9

92
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; this
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; this
Distance : 9

93
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; <
Distance : 9

94
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; if
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; if
Distance : 9

95
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ;
Distance : 9

96
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; e
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; e
Distance : 9

97
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; n
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; n
Distance : 9

98
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; return
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; return
Distance : 9

99
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; {}
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; {}
Distance : 9

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertEquals
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertEquals
Distance : 6

1
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; false
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; false
Distance : 6

2
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; i
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; i
Distance : 6

3
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; value
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; value
Distance : 6

4
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; true
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; true
Distance : 6

5
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mode
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mode
Distance : 6

6
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Object
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Object
Distance : 6

7
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; -
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; -
Distance : 6

8
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; f
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; f
Distance : 6

9
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Override
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Override
Distance : 6

10
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mock
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mock
Distance : 6

11
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; [
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; [
Distance : 6

12
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ]
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ]
Distance : 6

13
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; &&
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; &&
Distance : 6

14
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; T
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; T
Distance : 6

15
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Preconditions
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Preconditions
Distance : 6

16
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !
Distance : 6

17
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; createIllegalArgumentException
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; createIllegalArgumentException
Distance : 6

18
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; parent
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; parent
Distance : 6

19
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {}
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {}
Distance : 6

20
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; MathRuntimeException
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; MathRuntimeException
Distance : 6

21
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fireChangeEvent
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fireChangeEvent
Distance : 6

22
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; super
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; super
Distance : 6

23
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ArrayList
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ArrayList
Distance : 6

24
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; int
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; int
Distance : 6

25
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; []
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; []
Distance : 6

26
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

27
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

28
Tree	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

29
Tree	return serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

30
Tree	return defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Code	return defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

31
Tree	return returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

32
Tree	return serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

33
Tree	return defaultAnswer ( serializable ( mockSettings ) ) ;
Code	return defaultAnswer ( serializable ( mockSettings ) ) ;
Distance : 7

34
Tree	return returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 7

35
Tree	return serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

36
Tree	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 7

37
Tree	return serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

38
Tree	return returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Distance : 8

39
Tree	return serializable ( defaultAnswer ( mockSettings ) ) ;
Code	return serializable ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

40
Tree	return returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 8

41
Tree	return serializable ( serializable ( mockSettings ) ) ;
Code	return serializable ( serializable ( mockSettings ) ) ;
Distance : 7

42
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ParamChecks
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ParamChecks
Distance : 6

43
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !=
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !=
Distance : 6

44
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; class
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; class
Distance : 6

45
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ==
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ==
Distance : 6

46
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; void
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; void
Distance : 6

47
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; nullNotPermitted
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; nullNotPermitted
Distance : 6

48
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; result
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; result
Distance : 6

49
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

50
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fail
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fail
Distance : 6

51
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; List
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; List
Distance : 6

52
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Args
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Args
Distance : 6

53
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; array
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; array
Distance : 6

54
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <>
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <>
Distance : 6

55
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; this
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; this
Distance : 6

56
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; try
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; try
Distance : 6

57
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

58
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; if
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; if
Distance : 6

59
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; double
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; double
Distance : 6

60
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkState
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkState
Distance : 6

61
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {
Distance : 6

62
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ()
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ()
Distance : 6

63
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ;
Distance : 6

64
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; )
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; )
Distance : 6

65
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ;
Distance : 6

66
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NUMBER_CONSTANT
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NUMBER_CONSTANT
Distance : 6

67
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <s>
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <s>
Distance : 6

68
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; return
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; return
Distance : 6

69
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <
Distance : 6

70
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; >
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; >
Distance : 6

71
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; public
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; public
Distance : 6

72
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; test
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; test
Distance : 6

73
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; new
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; new
Distance : 6

74
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; @
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; @
Distance : 6

75
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ,
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ,
Distance : 6

76
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; .
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; .
Distance : 6

77
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; }
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; }
Distance : 6

78
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; =
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; =
Distance : 6

79
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; (
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; (
Distance : 6

80
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; STRING_CONSTANT
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; STRING_CONSTANT
Distance : 6

81
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <blank>
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <blank>
Distance : 6

82
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; join
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; join
Distance : 6

83
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; paint
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; paint
Distance : 6

84
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; boolean
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; boolean
Distance : 6

85
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; m
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; m
Distance : 6

86
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; type
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; type
Distance : 6

87
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; *
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; *
Distance : 6

88
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getInstance
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getInstance
Distance : 6

89
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; serialised
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; serialised
Distance : 6

90
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; throw
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; throw
Distance : 6

91
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; catch
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; catch
Distance : 6

92
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; String
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; String
Distance : 6

93
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; compiler
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; compiler
Distance : 6

94
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; +
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; +
Distance : 6

95
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; null
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; null
Distance : 6

96
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; e
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; e
Distance : 6

97
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; n
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; n
Distance : 6

98
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; final
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; final
Distance : 6

99
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; :
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; :
Distance : 6

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } throw
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } throw
Distance : 4

1
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

2
Tree	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

3
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

4
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

5
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

6
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

7
Tree	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

8
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

9
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

10
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

11
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

12
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

13
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

14
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

15
Tree	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

16
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

17
Tree	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

18
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

19
Tree	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

20
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

21
Tree	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

22
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

23
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } catch
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } catch
Distance : 4

24
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

25
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

26
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

27
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 3

28
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 4

29
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

30
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

31
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

32
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

33
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

34
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

35
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

36
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

37
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

38
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

39
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

40
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

41
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

42
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

43
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

44
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

45
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

46
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

47
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

48
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } -
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } -
Distance : 4

49
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 3

50
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } [
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } [
Distance : 4

51
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

52
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } {
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } {
Distance : 4

53
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } STRING_CONSTANT
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } STRING_CONSTANT
Distance : 4

54
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } NUMBER_CONSTANT
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } NUMBER_CONSTANT
Distance : 4

55
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } return
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } return
Distance : 4

56
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } false
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } false
Distance : 4

57
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } int
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } int
Distance : 4

58
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } @
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } @
Distance : 4

59
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } test
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } test
Distance : 4

60
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } nullNotPermitted
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } nullNotPermitted
Distance : 4

61
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } []
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } []
Distance : 4

62
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } !
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } !
Distance : 4

63
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } assertEquals
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } assertEquals
Distance : 4

64
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } !=
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } !=
Distance : 4

65
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } super
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } super
Distance : 4

66
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } double
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } double
Distance : 4

67
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } checkState
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } checkState
Distance : 4

68
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } value
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } value
Distance : 4

69
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } i
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } i
Distance : 4

70
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } T
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } T
Distance : 4

71
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } &&
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } &&
Distance : 4

72
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ==
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ==
Distance : 4

73
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } void
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } void
Distance : 4

74
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } new
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } new
Distance : 4

75
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ()
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ()
Distance : 4

76
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ]
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ]
Distance : 4

77
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } }
Distance : 4

78
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } n
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } n
Distance : 4

79
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } e
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } e
Distance : 4

80
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } String
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } String
Distance : 4

81
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } compiler
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } compiler
Distance : 4

82
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } if
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } if
Distance : 4

83
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <
Distance : 4

84
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } this
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } this
Distance : 4

85
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } final
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } final
Distance : 4

86
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } public
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } public
Distance : 4

87
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } >
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } >
Distance : 4

88
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } null
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } null
Distance : 4

89
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } +
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } +
Distance : 4

90
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ,
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ,
Distance : 4

91
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } .
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } .
Distance : 4

92
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } )
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } )
Distance : 4

93
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Distance : 4

94
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <blank>
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <blank>
Distance : 4

95
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Distance : 4

96
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <s>
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <s>
Distance : 4

97
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } (
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } (
Distance : 4

98
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } =
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } =
Distance : 4

99
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } Preconditions
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } Preconditions
Distance : 4

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

1
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

2
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

3
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

4
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

5
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

6
Tree	Object field = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

7
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

8
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

9
Tree	Object instance = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

10
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 3

11
Tree	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

12
Tree	Object injected = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 4

13
Tree	Object mocks = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

14
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

15
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

16
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

17
Tree	Object injected = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

18
Tree	Object injected = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

19
Tree	Object mocks = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

20
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

21
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

22
Tree	Object injected = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

23
Tree	Object injected = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

24
Tree	Object field = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

25
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 3

26
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

27
Tree	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

28
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 3

29
Tree	Object instance = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

30
Tree	Object field = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

31
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

32
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 3

33
Tree	Object mocks = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

34
Tree	Object mocks = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

35
Tree	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

36
Tree	Object injected = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 4

37
Tree	Object injected = injected . filterCandidate ( injected , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( injected , field , instance ) . thenInject () ;
Distance : 4

38
Tree	Object injected = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

39
Tree	Object instance = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

40
Tree	Object injected = injected . filterCandidate ( mocks , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , instance , field ) . thenInject () ;
Distance : 5

41
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

42
Tree	Object mocks = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 5

43
Tree	Object mocks = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

44
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

45
Tree	Object injected = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

46
Tree	Object injected = injected . filterCandidate ( field , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( field , field , instance ) . thenInject () ;
Distance : 4

47
Tree	Object injected = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

48
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

49
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 3

50
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

51
Tree	Object injected = instance . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

52
Tree	Object injected = mocks . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 4

53
Tree	Object mocks = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mocks = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

54
Tree	Object field = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

55
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 3

56
Tree	Object injected = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

57
Tree	Object injected = injected . filterCandidate ( mocks , injected , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , injected , instance ) . thenInject () ;
Distance : 4

58
Tree	Object field = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

59
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

60
Tree	Object mocks = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 5

61
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

62
Tree	Object injected = mocks . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

63
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

64
Tree	Object injected = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

65
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 4

66
Tree	Object field = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

67
Tree	Object field = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 5

68
Tree	Object instance = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

69
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 3

70
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , field , instance ) . thenInject () ;
Distance : 3

71
Tree	Object field = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

72
Tree	Object mocks = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 5

73
Tree	Object injected = injected . filterCandidate ( instance , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( instance , field , instance ) . thenInject () ;
Distance : 4

74
Tree	Object instance = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

75
Tree	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

76
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , field ) . thenInject () ;
Distance : 4

77
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

78
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

79
Tree	Object injected = injected . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Distance : 5

80
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

81
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 3

82
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , field , instance ) . thenInject () ;
Distance : 3

83
Tree	Object instance = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

84
Tree	Object instance = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 5

85
Tree	Object injected = mocks . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

86
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

87
Tree	Object field = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object field = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

88
Tree	Object instance = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

89
Tree	Object mocks = injected . filterCandidate ( injected , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( injected , field , instance ) . thenInject () ;
Distance : 5

90
Tree	Object injected = field . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 4

91
Tree	Object mocks = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mocks = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

92
Tree	Object injected = injected . filterCandidate ( injected , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( injected , field , instance ) . thenInject () ;
Distance : 4

93
Tree	Object mocks = injected . filterCandidate ( mocks , instance , field ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , instance , field ) . thenInject () ;
Distance : 6

94
Tree	Object injected = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

95
Tree	Object field = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 5

96
Tree	Object injected = injected . filterCandidate ( mocks , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , instance , field ) . thenInject () ;
Distance : 5

97
Tree	Object injected = mocks . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

98
Tree	Object injected = injected . filterCandidate ( injected , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( injected , field , field ) . thenInject () ;
Distance : 5

99
Tree	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } void
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } void
Distance : 3

1
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertEquals
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertEquals
Distance : 3

2
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } &&
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } &&
Distance : 3

3
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } i
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } i
Distance : 3

4
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !=
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !=
Distance : 3

5
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkState
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkState
Distance : 3

6
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } super
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } super
Distance : 3

7
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } int
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } int
Distance : 3

8
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } test
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } test
Distance : 3

9
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } false
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } false
Distance : 3

10
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } double
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } double
Distance : 3

11
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Preconditions
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Preconditions
Distance : 3

12
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } @
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } @
Distance : 3

13
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } value
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } value
Distance : 3

14
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } [
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } [
Distance : 3

15
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } -
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } -
Distance : 3

16
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ]
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ]
Distance : 3

17
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } true
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } true
Distance : 3

18
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } paint
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } paint
Distance : 3

19
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } m
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } m
Distance : 3

20
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } result
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } result
Distance : 3

21
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } T
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } T
Distance : 3

22
Tree	{ return mockSettings . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 4

23
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } boolean
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } boolean
Distance : 3

24
Tree	{ return classToMock . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 4

25
Tree	{ return classToMock . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 5

26
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Distance : 3

27
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Distance : 3

28
Tree	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Distance : 3

29
Tree	{ return mockSettings . mock ( classToMock , mockSettings ) ; }
Code	{ return mockSettings . mock ( classToMock , mockSettings ) ; }
Distance : 3

30
Tree	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 3

31
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 4

32
Tree	{ return classToMock . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 4

33
Tree	{ return MOCKITO_CORE . mock ( mockSettings , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , classToMock ) ; }
Distance : 3

34
Tree	{ return classToMock . mock ( classToMock , classToMock ) ; }
Code	{ return classToMock . mock ( classToMock , classToMock ) ; }
Distance : 4

35
Tree	{ return mockSettings . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 4

36
Tree	{ return classToMock . mock ( mockSettings , mockSettings ) ; }
Code	{ return classToMock . mock ( mockSettings , mockSettings ) ; }
Distance : 4

37
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 4

38
Tree	{ return mockSettings . mock ( classToMock , classToMock ) ; }
Code	{ return mockSettings . mock ( classToMock , classToMock ) ; }
Distance : 4

39
Tree	{ return mockSettings . mock ( mockSettings , mockSettings ) ; }
Code	{ return mockSettings . mock ( mockSettings , mockSettings ) ; }
Distance : 4

40
Tree	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 3

41
Tree	{ return classToMock . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 4

42
Tree	{ return mockSettings . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 4

43
Tree	{ return classToMock . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 5

44
Tree	{ return mockSettings . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 5

45
Tree	{ return classToMock . mock ( mockSettings , classToMock ) ; }
Code	{ return classToMock . mock ( mockSettings , classToMock ) ; }
Distance : 4

46
Tree	{ return mockSettings . mock ( mockSettings , classToMock ) ; }
Code	{ return mockSettings . mock ( mockSettings , classToMock ) ; }
Distance : 4

47
Tree	{ return mockSettings . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 5

48
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ParamChecks
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ParamChecks
Distance : 3

49
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

50
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Override
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Override
Distance : 3

51
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !
Distance : 3

52
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <s>
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <s>
Distance : 3

53
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <blank>
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <blank>
Distance : 3

54
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } (
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } (
Distance : 3

55
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MOCKITO_CORE
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MOCKITO_CORE
Distance : 3

56
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } )
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } )
Distance : 3

57
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } throw
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } throw
Distance : 3

58
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ==
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ==
Distance : 3

59
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } []
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } []
Distance : 3

60
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } +
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } +
Distance : 3

61
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } e
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } e
Distance : 3

62
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } null
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } null
Distance : 3

63
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } String
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } String
Distance : 3

64
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } n
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } n
Distance : 3

65
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } compiler
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } compiler
Distance : 3

66
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } catch
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } catch
Distance : 3

67
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } STRING_CONSTANT
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } STRING_CONSTANT
Distance : 3

68
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } =
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } =
Distance : 3

69
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {
Distance : 3

70
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } .
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } .
Distance : 3

71
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } public
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } public
Distance : 3

72
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

73
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } nullNotPermitted
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } nullNotPermitted
Distance : 3

74
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } }
Distance : 3

75
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ;
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ;
Distance : 3

76
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Object
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Object
Distance : 3

77
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ,
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ,
Distance : 3

78
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {}
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {}
Distance : 3

79
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mode
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mode
Distance : 3

80
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MathRuntimeException
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MathRuntimeException
Distance : 3

81
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mock
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mock
Distance : 3

82
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Args
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Args
Distance : 3

83
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <>
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <>
Distance : 3

84
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } f
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } f
Distance : 3

85
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } array
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } array
Distance : 3

86
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } fail
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } fail
Distance : 3

87
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } List
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } List
Distance : 3

88
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } try
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } try
Distance : 3

89
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } :
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } :
Distance : 3

90
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } >
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } >
Distance : 3

91
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } if
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } if
Distance : 3

92
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } final
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } final
Distance : 3

93
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <
Distance : 3

94
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NUMBER_CONSTANT
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NUMBER_CONSTANT
Distance : 3

95
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } new
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } new
Distance : 3

96
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } return
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } return
Distance : 3

97
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } this
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } this
Distance : 3

98
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ()
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ()
Distance : 3

99
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } class
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } class
Distance : 3

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	mockingProgress . verificationStarted ( mode ) ; i
Code	mockingProgress . verificationStarted ( mode ) ; i
Distance : 7

1
Tree	mockingProgress . verificationStarted ( mode ) ; void
Code	mockingProgress . verificationStarted ( mode ) ; void
Distance : 7

2
Tree	mockingProgress . verificationStarted ( mode ) ; class
Code	mockingProgress . verificationStarted ( mode ) ; class
Distance : 7

3
Tree	mockingProgress . verificationStarted ( mode ) ; Object
Code	mockingProgress . verificationStarted ( mode ) ; Object
Distance : 7

4
Tree	mockingProgress . verificationStarted ( mode ) ; mock
Code	mockingProgress . verificationStarted ( mode ) ; mock
Distance : 7

5
Tree	mockingProgress . verificationStarted ( mode ) ; MathRuntimeException
Code	mockingProgress . verificationStarted ( mode ) ; MathRuntimeException
Distance : 7

6
Tree	mockingProgress . verificationStarted ( mode ) ; FastMath
Code	mockingProgress . verificationStarted ( mode ) ; FastMath
Distance : 7

7
Tree	mockingProgress . verificationStarted ( mode ) ; IllegalArgumentException
Code	mockingProgress . verificationStarted ( mode ) ; IllegalArgumentException
Distance : 7

8
Tree	mockingProgress . verificationStarted ( mode ) ; invocation
Code	mockingProgress . verificationStarted ( mode ) ; invocation
Distance : 7

9
Tree	mockingProgress . verificationStarted ( mode ) ; Args
Code	mockingProgress . verificationStarted ( mode ) ; Args
Distance : 7

10
Tree	mockingProgress . verificationStarted ( mode ) ; <>
Code	mockingProgress . verificationStarted ( mode ) ; <>
Distance : 7

11
Tree	mockingProgress . verificationStarted ( mode ) ; List
Code	mockingProgress . verificationStarted ( mode ) ; List
Distance : 7

12
Tree	mockingProgress . verificationStarted ( mode ) ; expected
Code	mockingProgress . verificationStarted ( mode ) ; expected
Distance : 7

13
Tree	mockingProgress . verificationStarted ( mode ) ; fireChangeEvent
Code	mockingProgress . verificationStarted ( mode ) ; fireChangeEvent
Distance : 7

14
Tree	mockingProgress . verificationStarted ( mode ) ; serialised
Code	mockingProgress . verificationStarted ( mode ) ; serialised
Distance : 7

15
Tree	mockingProgress . verificationStarted ( mode ) ; type
Code	mockingProgress . verificationStarted ( mode ) ; type
Distance : 7

16
Tree	mockingProgress . verificationStarted ( mode ) ; getInstance
Code	mockingProgress . verificationStarted ( mode ) ; getInstance
Distance : 7

17
Tree	mockingProgress . verificationStarted ( mode ) ; paint
Code	mockingProgress . verificationStarted ( mode ) ; paint
Distance : 7

18
Tree	mockingProgress . verificationStarted ( mode ) ; m
Code	mockingProgress . verificationStarted ( mode ) ; m
Distance : 7

19
Tree	mockingProgress . verificationStarted ( mode ) ; join
Code	mockingProgress . verificationStarted ( mode ) ; join
Distance : 7

20
Tree	mockingProgress . verificationStarted ( mode ) ; fail
Code	mockingProgress . verificationStarted ( mode ) ; fail
Distance : 7

21
Tree	mockingProgress . verificationStarted ( mode ) ; !=
Code	mockingProgress . verificationStarted ( mode ) ; !=
Distance : 7

22
Tree	mockingProgress . verificationStarted ( mode ) ; throw
Code	mockingProgress . verificationStarted ( mode ) ; throw
Distance : 7

23
Tree	mockingProgress . verificationStarted ( mode ) ; Override
Code	mockingProgress . verificationStarted ( mode ) ; Override
Distance : 7

24
Tree	mockingProgress . verificationStarted ( mode ) ; compiler
Code	mockingProgress . verificationStarted ( mode ) ; compiler
Distance : 7

25
Tree	mockingProgress . verificationStarted ( mode ) ; ParamChecks
Code	mockingProgress . verificationStarted ( mode ) ; ParamChecks
Distance : 7

26
Tree	mockingProgress . verificationStarted ( mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 7

27
Tree	mode . verificationStarted ( mode ) ;
Code	mode . verificationStarted ( mode ) ;
Distance : 7

28
Tree	mockingProgress . verificationStarted ( mock ) ;
Code	mockingProgress . verificationStarted ( mock ) ;
Distance : 6

29
Tree	mock . verificationStarted ( mockingProgress ) ;
Code	mock . verificationStarted ( mockingProgress ) ;
Distance : 8

30
Tree	mode . verificationStarted ( mockingProgress ) ;
Code	mode . verificationStarted ( mockingProgress ) ;
Distance : 8

31
Tree	mock . verificationStarted ( mock ) ;
Code	mock . verificationStarted ( mock ) ;
Distance : 7

32
Tree	mode . verificationStarted ( mock ) ;
Code	mode . verificationStarted ( mock ) ;
Distance : 7

33
Tree	mockingProgress . verificationStarted ( mode ) ; checkState
Code	mockingProgress . verificationStarted ( mode ) ; checkState
Distance : 7

34
Tree	mockingProgress . verificationStarted ( mode ) ; f
Code	mockingProgress . verificationStarted ( mode ) ; f
Distance : 7

35
Tree	mockingProgress . verificationStarted ( mode ) ; array
Code	mockingProgress . verificationStarted ( mode ) ; array
Distance : 7

36
Tree	mockingProgress . verificationStarted ( mode ) ; boolean
Code	mockingProgress . verificationStarted ( mode ) ; boolean
Distance : 7

37
Tree	mockingProgress . verificationStarted ( mode ) ; result
Code	mockingProgress . verificationStarted ( mode ) ; result
Distance : 7

38
Tree	mockingProgress . verificationStarted ( mode ) ; try
Code	mockingProgress . verificationStarted ( mode ) ; try
Distance : 7

39
Tree	mockingProgress . verificationStarted ( mode ) ; :
Code	mockingProgress . verificationStarted ( mode ) ; :
Distance : 7

40
Tree	mockingProgress . verificationStarted ( mode ) ; double
Code	mockingProgress . verificationStarted ( mode ) ; double
Distance : 7

41
Tree	mockingProgress . verificationStarted ( mode ) ; false
Code	mockingProgress . verificationStarted ( mode ) ; false
Distance : 7

42
Tree	mockingProgress . verificationStarted ( mode ) ; e
Code	mockingProgress . verificationStarted ( mode ) ; e
Distance : 7

43
Tree	mockingProgress . verificationStarted ( mode ) ; super
Code	mockingProgress . verificationStarted ( mode ) ; super
Distance : 7

44
Tree	mockingProgress . verificationStarted ( mode ) ; [
Code	mockingProgress . verificationStarted ( mode ) ; [
Distance : 7

45
Tree	mockingProgress . verificationStarted ( mode ) ; n
Code	mockingProgress . verificationStarted ( mode ) ; n
Distance : 7

46
Tree	mockingProgress . verificationStarted ( mode ) ; +
Code	mockingProgress . verificationStarted ( mode ) ; +
Distance : 7

47
Tree	mockingProgress . verificationStarted ( mode ) ; catch
Code	mockingProgress . verificationStarted ( mode ) ; catch
Distance : 7

48
Tree	mockingProgress . verificationStarted ( mode ) ; true
Code	mockingProgress . verificationStarted ( mode ) ; true
Distance : 7

49
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

50
Tree	mockingProgress . verificationStarted ( mode ) ; &&
Code	mockingProgress . verificationStarted ( mode ) ; &&
Distance : 7

51
Tree	mockingProgress . verificationStarted ( mode ) ; this
Code	mockingProgress . verificationStarted ( mode ) ; this
Distance : 7

52
Tree	mock . verificationStarted ( mode ) ;
Code	mock . verificationStarted ( mode ) ;
Distance : 7

53
Tree	mockingProgress . verificationStarted ( mode ) ; Preconditions
Code	mockingProgress . verificationStarted ( mode ) ; Preconditions
Distance : 7

54
Tree	mockingProgress . verificationStarted ( mode ) ; null
Code	mockingProgress . verificationStarted ( mode ) ; null
Distance : 7

55
Tree	mockingProgress . verificationStarted ( mode ) ; mode
Code	mockingProgress . verificationStarted ( mode ) ; mode
Distance : 7

56
Tree	mockingProgress . verificationStarted ( mode ) ; ]
Code	mockingProgress . verificationStarted ( mode ) ; ]
Distance : 7

57
Tree	mockingProgress . verificationStarted ( mode ) ; {}
Code	mockingProgress . verificationStarted ( mode ) ; {}
Distance : 7

58
Tree	mockingProgress . verificationStarted ( mode ) ; *
Code	mockingProgress . verificationStarted ( mode ) ; *
Distance : 7

59
Tree	mockingProgress . verificationStarted ( mode ) ; testSame
Code	mockingProgress . verificationStarted ( mode ) ; testSame
Distance : 7

60
Tree	mockingProgress . verificationStarted ( mode ) ; createIllegalArgumentException
Code	mockingProgress . verificationStarted ( mode ) ; createIllegalArgumentException
Distance : 7

61
Tree	mockingProgress . verificationStarted ( mode ) ; ArrayList
Code	mockingProgress . verificationStarted ( mode ) ; ArrayList
Distance : 7

62
Tree	mockingProgress . verificationStarted ( mode ) ; parent
Code	mockingProgress . verificationStarted ( mode ) ; parent
Distance : 7

63
Tree	mockingProgress . verificationStarted ( mode ) ; LINE_JOINER
Code	mockingProgress . verificationStarted ( mode ) ; LINE_JOINER
Distance : 7

64
Tree	mockingProgress . verificationStarted ( mode ) ; x
Code	mockingProgress . verificationStarted ( mode ) ; x
Distance : 7

65
Tree	mockingProgress . verificationStarted ( mode ) ; str
Code	mockingProgress . verificationStarted ( mode ) ; str
Distance : 7

66
Tree	mockingProgress . verificationStarted ( mode ) ; assertThat
Code	mockingProgress . verificationStarted ( mode ) ; assertThat
Distance : 7

67
Tree	mockingProgress . verificationStarted ( mode ) ; int
Code	mockingProgress . verificationStarted ( mode ) ; int
Distance : 7

68
Tree	mockingProgress . verificationStarted ( mode ) ; value
Code	mockingProgress . verificationStarted ( mode ) ; value
Distance : 7

69
Tree	mockingProgress . verificationStarted ( mode ) ; T
Code	mockingProgress . verificationStarted ( mode ) ; T
Distance : 7

70
Tree	mockingProgress . verificationStarted ( mode ) ; if
Code	mockingProgress . verificationStarted ( mode ) ; if
Distance : 7

71
Tree	mockingProgress . verificationStarted ( mode ) ; new
Code	mockingProgress . verificationStarted ( mode ) ; new
Distance : 7

72
Tree	mockingProgress . verificationStarted ( mode ) ; public
Code	mockingProgress . verificationStarted ( mode ) ; public
Distance : 7

73
Tree	mockingProgress . verificationStarted ( mode ) ; return
Code	mockingProgress . verificationStarted ( mode ) ; return
Distance : 7

74
Tree	mockingProgress . verificationStarted ( mode ) ; final
Code	mockingProgress . verificationStarted ( mode ) ; final
Distance : 7

75
Tree	mockingProgress . verificationStarted ( mode ) ; >
Code	mockingProgress . verificationStarted ( mode ) ; >
Distance : 7

76
Tree	mockingProgress . verificationStarted ( mode ) ; NUMBER_CONSTANT
Code	mockingProgress . verificationStarted ( mode ) ; NUMBER_CONSTANT
Distance : 7

77
Tree	mockingProgress . verificationStarted ( mode ) ; <s>
Code	mockingProgress . verificationStarted ( mode ) ; <s>
Distance : 7

78
Tree	mockingProgress . verificationStarted ( mode ) ; ;
Code	mockingProgress . verificationStarted ( mode ) ; ;
Distance : 6

79
Tree	mockingProgress . verificationStarted ( mode ) ; <blank>
Code	mockingProgress . verificationStarted ( mode ) ; <blank>
Distance : 7

80
Tree	mockingProgress . verificationStarted ( mode ) ; ;
Code	mockingProgress . verificationStarted ( mode ) ; ;
Distance : 6

81
Tree	mockingProgress . verificationStarted ( mode ) ; )
Code	mockingProgress . verificationStarted ( mode ) ; )
Distance : 7

82
Tree	mockingProgress . verificationStarted ( mode ) ; .
Code	mockingProgress . verificationStarted ( mode ) ; .
Distance : 7

83
Tree	mockingProgress . verificationStarted ( mode ) ; <
Code	mockingProgress . verificationStarted ( mode ) ; <
Distance : 7

84
Tree	mockingProgress . verificationStarted ( mode ) ; }
Code	mockingProgress . verificationStarted ( mode ) ; }
Distance : 7

85
Tree	mockingProgress . verificationStarted ( mode ) ; {
Code	mockingProgress . verificationStarted ( mode ) ; {
Distance : 7

86
Tree	mockingProgress . verificationStarted ( mode ) ; ,
Code	mockingProgress . verificationStarted ( mode ) ; ,
Distance : 7

87
Tree	mockingProgress . verificationStarted ( mode ) ; ()
Code	mockingProgress . verificationStarted ( mode ) ; ()
Distance : 7

88
Tree	mockingProgress . verificationStarted ( mode ) ; STRING_CONSTANT
Code	mockingProgress . verificationStarted ( mode ) ; STRING_CONSTANT
Distance : 7

89
Tree	mockingProgress . verificationStarted ( mode ) ; =
Code	mockingProgress . verificationStarted ( mode ) ; =
Distance : 7

90
Tree	mockingProgress . verificationStarted ( mode ) ; (
Code	mockingProgress . verificationStarted ( mode ) ; (
Distance : 7

91
Tree	mockingProgress . verificationStarted ( mode ) ; test
Code	mockingProgress . verificationStarted ( mode ) ; test
Distance : 7

92
Tree	mockingProgress . verificationStarted ( mode ) ; assertEquals
Code	mockingProgress . verificationStarted ( mode ) ; assertEquals
Distance : 7

93
Tree	mockingProgress . verificationStarted ( mode ) ; @
Code	mockingProgress . verificationStarted ( mode ) ; @
Distance : 7

94
Tree	mockingProgress . verificationStarted ( mode ) ; []
Code	mockingProgress . verificationStarted ( mode ) ; []
Distance : 7

95
Tree	mockingProgress . verificationStarted ( mode ) ; ==
Code	mockingProgress . verificationStarted ( mode ) ; ==
Distance : 7

96
Tree	mockingProgress . verificationStarted ( mode ) ; nullNotPermitted
Code	mockingProgress . verificationStarted ( mode ) ; nullNotPermitted
Distance : 7

97
Tree	mockingProgress . verificationStarted ( mode ) ; !
Code	mockingProgress . verificationStarted ( mode ) ; !
Distance : 7

98
Tree	mockingProgress . verificationStarted ( mode ) ; String
Code	mockingProgress . verificationStarted ( mode ) ; String
Distance : 7

99
Tree	mockingProgress . verificationStarted ( mode ) ; -
Code	mockingProgress . verificationStarted ( mode ) ; -
Distance : 7

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

1
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

2
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

3
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

4
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

5
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

6
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

7
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

8
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

9
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

10
Tree	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

11
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

12
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

13
Tree	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

14
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Distance : 7

15
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

16
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Distance : 7

17
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

18
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

19
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

20
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

21
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Distance : 8

22
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Distance : 8

23
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Distance : 7

24
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

25
Tree	return container . getMock ( newDeepStubMock ( invocation ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( invocation ) , container ) ;
Distance : 8

26
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , container ) ;
Distance : 8

27
Tree	return container . recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Code	return container . recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Distance : 8

28
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

29
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Distance : 8

30
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 10

31
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Distance : 8

32
Tree	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 10

33
Tree	return container . getMock ( newDeepStubMock ( container ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( container ) , container ) ;
Distance : 9

34
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

35
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( container ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( container ) , container ) ;
Distance : 9

36
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

37
Tree	return container . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Code	return container . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Distance : 9

38
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Distance : 9

39
Tree	return invocation . getMock ( newDeepStubMock ( invocation ) , container ) ;
Code	return invocation . getMock ( newDeepStubMock ( invocation ) , container ) ;
Distance : 8

40
Tree	return invocation . recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Distance : 8

41
Tree	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 10

42
Tree	return container . getMock ( getMock ( invocation ) , container ) ;
Code	return container . getMock ( getMock ( invocation ) , container ) ;
Distance : 8

43
Tree	return returnTypeGenericMetadata . getMock ( getMock ( invocation ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( invocation ) , container ) ;
Distance : 8

44
Tree	return invocation . getMock ( newDeepStubMock ( container ) , container ) ;
Code	return invocation . getMock ( newDeepStubMock ( container ) , container ) ;
Distance : 9

45
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

46
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

47
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

48
Tree	return invocation . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Distance : 9

49
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

50
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

51
Tree	return container . getMock ( getMock ( container ) , container ) ;
Code	return container . getMock ( getMock ( container ) , container ) ;
Distance : 9

52
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

53
Tree	return returnTypeGenericMetadata . getMock ( getMock ( container ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( container ) , container ) ;
Distance : 9

54
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

55
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

56
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

57
Tree	return invocation . getMock ( getMock ( invocation ) , container ) ;
Code	return invocation . getMock ( getMock ( invocation ) , container ) ;
Distance : 8

58
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

59
Tree	return container . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return container . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

60
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

61
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

62
Tree	return invocation . getMock ( getMock ( container ) , container ) ;
Code	return invocation . getMock ( getMock ( container ) , container ) ;
Distance : 9

63
Tree	return container . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

64
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

65
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

66
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

67
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 10

68
Tree	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 10

69
Tree	return container . getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return container . getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

70
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

71
Tree	return container . recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

72
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

73
Tree	return invocation . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

74
Tree	return invocation . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

75
Tree	return container . getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return container . getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

76
Tree	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 10

77
Tree	return returnTypeGenericMetadata . getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

78
Tree	return invocation . getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

79
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 8

80
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 8

81
Tree	return invocation . recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

82
Tree	return container . getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return container . getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

83
Tree	return returnTypeGenericMetadata . getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

84
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Distance : 9

85
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Distance : 9

86
Tree	return invocation . getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

87
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 8

88
Tree	return container . getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return container . getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 9

89
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 9

90
Tree	return invocation . getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 10

91
Tree	return container . recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Code	return container . recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Distance : 9

92
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Distance : 9

93
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Distance : 9

94
Tree	return container . getMock ( newDeepStubMock ( container ) , invocation ) ;
Code	return container . getMock ( newDeepStubMock ( container ) , invocation ) ;
Distance : 10

95
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( container ) , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( container ) , invocation ) ;
Distance : 10

96
Tree	return container . recordDeepStubAnswer ( getMock ( container ) , invocation ) ;
Code	return container . recordDeepStubAnswer ( getMock ( container ) , invocation ) ;
Distance : 10

97
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( container ) , invocation ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( container ) , invocation ) ;
Distance : 10

98
Tree	return invocation . getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return invocation . getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 9

99
Tree	return invocation . recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 8

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 8

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 8

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

27
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

28
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

29
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

30
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 7

31
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

32
Tree	{ ( ( Any.ANY ) ; return return; ; }
Code	{ ( ( Any.ANY ) ; return return; ; }
Distance : 7

33
Tree	{ ( ( Any.ANY ) ; return super(); ; }
Code	{ ( ( Any.ANY ) ; return super(); ; }
Distance : 7

34
Tree	{ returnList ( Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY ) ; return return; ; }
Distance : 7

35
Tree	{ returnList ( Any.ANY ) ; return super(); ; }
Code	{ returnList ( Any.ANY ) ; return super(); ; }
Distance : 7

36
Tree	{ return ( Any.ANY ) ; return continue; ; }
Code	{ return ( Any.ANY ) ; return continue; ; }
Distance : 6

37
Tree	{ return ( Any.ANY ) ; return break; ; }
Code	{ return ( Any.ANY ) ; return break; ; }
Distance : 6

38
Tree	{ returnList ( Any.ANY ) ; return continue; ; }
Code	{ returnList ( Any.ANY ) ; return continue; ; }
Distance : 7

39
Tree	{ returnList ( Any.ANY ) ; return break; ; }
Code	{ returnList ( Any.ANY ) ; return break; ; }
Distance : 7

40
Tree	{ return ( Any.ANY ) ; return default: ; }
Code	{ return ( Any.ANY ) ; return default: ; }
Distance : 6

41
Tree	{ returnList ( Any.ANY ) ; return default: ; }
Code	{ returnList ( Any.ANY ) ; return default: ; }
Distance : 7

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 8

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 8

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 8

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

57
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 8

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 8

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 8

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 8

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 8

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 8

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 8

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 8

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnList ( Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnList ( Any.ANY ) ; return super(); ; }
Code	{ returnList ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnList ( Any.ANY ) ; return break; ; }
Code	{ returnList ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnList ( Any.ANY ) ; return continue; ; }
Code	{ returnList ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnList ( Any.ANY ) ; return default: ; }
Code	{ returnList ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 8

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 8

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 8

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

29
Tree	{ returnMap ( Any.ANY ) ; return null ; }
Code	{ returnMap ( Any.ANY ) ; return null ; }
Distance : 7

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

32
Tree	{ returnMap ( Any.ANY ) ; return return; ; }
Code	{ returnMap ( Any.ANY ) ; return return; ; }
Distance : 7

33
Tree	{ returnMap ( Any.ANY ) ; return super(); ; }
Code	{ returnMap ( Any.ANY ) ; return super(); ; }
Distance : 7

34
Tree	{ returnMap ( Any.ANY ) ; return break; ; }
Code	{ returnMap ( Any.ANY ) ; return break; ; }
Distance : 7

35
Tree	{ returnMap ( Any.ANY ) ; return continue; ; }
Code	{ returnMap ( Any.ANY ) ; return continue; ; }
Distance : 7

36
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

37
Tree	{ returnMap ( Any.ANY ) ; return default: ; }
Code	{ returnMap ( Any.ANY ) ; return default: ; }
Distance : 7

38
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

39
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

40
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

41
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 8

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 8

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 8

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

57
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 8

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 8

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 8

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 8

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 8

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 8

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 8

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 8

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ returnMap ( Any.ANY ) ; return null ; }
Code	{ returnMap ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnMap ( Any.ANY ) ; return return; ; }
Code	{ returnMap ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnMap ( Any.ANY ) ; return super(); ; }
Code	{ returnMap ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnMap ( Any.ANY ) ; return break; ; }
Code	{ returnMap ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnMap ( Any.ANY ) ; return continue; ; }
Code	{ returnMap ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnMap ( Any.ANY ) ; return default: ; }
Code	{ returnMap ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 8

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 8

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

27
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

29
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

31
Tree	{ return ( Any.ANY ) ; return return; ; }
Code	{ return ( Any.ANY ) ; return return; ; }
Distance : 6

32
Tree	{ return ( Any.ANY ) ; return super(); ; }
Code	{ return ( Any.ANY ) ; return super(); ; }
Distance : 6

33
Tree	{ return ( Any.ANY ) ; return continue; ; }
Code	{ return ( Any.ANY ) ; return continue; ; }
Distance : 6

34
Tree	{ return ( Any.ANY ) ; return break; ; }
Code	{ return ( Any.ANY ) ; return break; ; }
Distance : 6

35
Tree	{ return ( Any.ANY ) ; return default: ; }
Code	{ return ( Any.ANY ) ; return default: ; }
Distance : 6

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 8

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 8

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 8

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 8

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 8

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 8

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 8

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 8

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 8

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 8

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 8

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 8

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 8

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 8

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 8

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 8

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 8

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

32
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

33
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

35
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 8

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 8

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 8

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

27
Tree	{ anyList ( Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY ) ; return null ; }
Distance : 7

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

29
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 7

30
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

31
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

32
Tree	{ anyList ( Any.ANY ) ; return return; ; }
Code	{ anyList ( Any.ANY ) ; return return; ; }
Distance : 7

33
Tree	{ anyList ( Any.ANY ) ; return super(); ; }
Code	{ anyList ( Any.ANY ) ; return super(); ; }
Distance : 7

34
Tree	{ returnList ( Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY ) ; return return; ; }
Distance : 7

35
Tree	{ returnList ( Any.ANY ) ; return super(); ; }
Code	{ returnList ( Any.ANY ) ; return super(); ; }
Distance : 7

36
Tree	{ anyList ( Any.ANY ) ; return continue; ; }
Code	{ anyList ( Any.ANY ) ; return continue; ; }
Distance : 7

37
Tree	{ anyList ( Any.ANY ) ; return break; ; }
Code	{ anyList ( Any.ANY ) ; return break; ; }
Distance : 7

38
Tree	{ returnList ( Any.ANY ) ; return continue; ; }
Code	{ returnList ( Any.ANY ) ; return continue; ; }
Distance : 7

39
Tree	{ returnList ( Any.ANY ) ; return break; ; }
Code	{ returnList ( Any.ANY ) ; return break; ; }
Distance : 7

40
Tree	{ anyList ( Any.ANY ) ; return default: ; }
Code	{ anyList ( Any.ANY ) ; return default: ; }
Distance : 7

41
Tree	{ returnList ( Any.ANY ) ; return default: ; }
Code	{ returnList ( Any.ANY ) ; return default: ; }
Distance : 7

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 8

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 8

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 8

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

57
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 8

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 8

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 8

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 8

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 8

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 8

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 8

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 8

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnList ( Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnList ( Any.ANY ) ; return super(); ; }
Code	{ returnList ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnList ( Any.ANY ) ; return break; ; }
Code	{ returnList ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnList ( Any.ANY ) ; return continue; ; }
Code	{ returnList ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnList ( Any.ANY ) ; return default: ; }
Code	{ returnList ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ returnString ( Any.ANY ) ; return null ; }
Code	{ returnString ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnString ( Any.ANY ) ; return return; ; }
Code	{ returnString ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnString ( Any.ANY ) ; return super(); ; }
Code	{ returnString ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnString ( Any.ANY ) ; return break; ; }
Code	{ returnString ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnString ( Any.ANY ) ; return continue; ; }
Code	{ returnString ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnString ( Any.ANY ) ; return default: ; }
Code	{ returnString ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } i
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } i
Distance : 5

1
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } void
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } void
Distance : 5

2
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } class
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } class
Distance : 5

3
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Object
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Object
Distance : 5

4
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } mock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } mock
Distance : 5

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } MathRuntimeException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } MathRuntimeException
Distance : 5

6
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } FastMath
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } FastMath
Distance : 5

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } IllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } IllegalArgumentException
Distance : 5

8
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } invocation
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } invocation
Distance : 5

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Args
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Args
Distance : 5

10
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <>
Distance : 5

11
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } List
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } List
Distance : 5

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } expected
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } expected
Distance : 5

13
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } fireChangeEvent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } fireChangeEvent
Distance : 5

14
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } serialised
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } serialised
Distance : 5

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } type
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } type
Distance : 5

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } getInstance
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } getInstance
Distance : 5

17
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } paint
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } paint
Distance : 5

18
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } m
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } m
Distance : 5

19
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } join
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } join
Distance : 5

20
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } fail
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } fail
Distance : 5

21
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } !=
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } !=
Distance : 5

22
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } throw
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } throw
Distance : 5

23
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Override
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Override
Distance : 5

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } compiler
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } compiler
Distance : 5

25
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ParamChecks
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ParamChecks
Distance : 5

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 4

27
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

28
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

29
Tree	{ return ( T ) anyObject ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . anyObject ( T ) ; }
Distance : 5

30
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

31
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

32
Tree	{ return ( T ) returnNull ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . anyObject ( T ) ; }
Distance : 5

33
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } checkState
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } checkState
Distance : 5

34
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } f
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } f
Distance : 5

35
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } array
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } array
Distance : 5

36
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } boolean
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } boolean
Distance : 5

37
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } result
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } result
Distance : 5

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } try
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } try
Distance : 5

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } :
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } :
Distance : 5

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } double
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } double
Distance : 5

41
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } false
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } false
Distance : 5

42
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } e
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } e
Distance : 5

43
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } super
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } super
Distance : 5

44
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } [
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } [
Distance : 5

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } n
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } n
Distance : 5

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } +
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } +
Distance : 5

47
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } catch
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } catch
Distance : 5

48
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } true
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } true
Distance : 5

49
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 4

50
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } &&
Distance : 5

51
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } this
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } this
Distance : 5

52
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 3

53
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Preconditions
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Preconditions
Distance : 5

54
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } null
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } null
Distance : 5

55
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } mode
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } mode
Distance : 5

56
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ]
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ]
Distance : 5

57
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {}
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {}
Distance : 5

58
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } *
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } *
Distance : 5

59
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } testSame
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } testSame
Distance : 5

60
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } createIllegalArgumentException
Distance : 5

61
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ArrayList
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ArrayList
Distance : 5

62
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } parent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } parent
Distance : 5

63
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } LINE_JOINER
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } LINE_JOINER
Distance : 5

64
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } x
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } x
Distance : 5

65
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } str
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } str
Distance : 5

66
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } assertThat
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } assertThat
Distance : 5

67
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } int
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } int
Distance : 5

68
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } value
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } value
Distance : 5

69
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } T
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } T
Distance : 5

70
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } if
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } if
Distance : 5

71
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } new
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } new
Distance : 5

72
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } public
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } public
Distance : 5

73
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } return
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } return
Distance : 5

74
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } final
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } final
Distance : 5

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } >
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } >
Distance : 5

76
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } NUMBER_CONSTANT
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } NUMBER_CONSTANT
Distance : 5

77
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <s>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <s>
Distance : 5

78
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {
Distance : 5

79
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <blank>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <blank>
Distance : 5

80
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ;
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ;
Distance : 5

81
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } )
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } )
Distance : 5

82
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } .
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } .
Distance : 5

83
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } <
Distance : 5

84
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } }
Distance : 5

85
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {
Distance : 5

86
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ,
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ,
Distance : 5

87
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ()
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ()
Distance : 5

88
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } STRING_CONSTANT
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } STRING_CONSTANT
Distance : 5

89
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } =
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } =
Distance : 5

90
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } (
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } (
Distance : 5

91
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } test
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } test
Distance : 5

92
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } assertEquals
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } assertEquals
Distance : 5

93
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } @
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } @
Distance : 5

94
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } []
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } []
Distance : 5

95
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ==
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ==
Distance : 5

96
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } nullNotPermitted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } nullNotPermitted
Distance : 5

97
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } !
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } !
Distance : 5

98
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } String
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } String
Distance : 5

99
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } -
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } -
Distance : 5

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return reportMatcher () ; } !=
Code	{ return reportMatcher () ; } !=
Distance : 16

1
Tree	{ return reportMatcher () ; } createIllegalArgumentException
Code	{ return reportMatcher () ; } createIllegalArgumentException
Distance : 16

2
Tree	{ return reportMatcher () ; } add
Code	{ return reportMatcher () ; } add
Distance : 16

3
Tree	{ return reportMatcher () ; } name
Code	{ return reportMatcher () ; } name
Distance : 16

4
Tree	{ return reportMatcher () ; } m
Code	{ return reportMatcher () ; } m
Distance : 16

5
Tree	{ return reportMatcher () ; } boolean
Code	{ return reportMatcher () ; } boolean
Distance : 16

6
Tree	{ return reportMatcher () ; } checkArgument
Code	{ return reportMatcher () ; } checkArgument
Distance : 16

7
Tree	{ return reportMatcher () ; } data
Code	{ return reportMatcher () ; } data
Distance : 16

8
Tree	{ return reportMatcher () ; } List
Code	{ return reportMatcher () ; } List
Distance : 16

9
Tree	{ return reportMatcher () ; } Args
Code	{ return reportMatcher () ; } Args
Distance : 16

10
Tree	{ return reportMatcher () ; } array
Code	{ return reportMatcher () ; } array
Distance : 16

11
Tree	{ return reportMatcher () ; } <>
Code	{ return reportMatcher () ; } <>
Distance : 16

12
Tree	{ return reportMatcher () ; } try
Code	{ return reportMatcher () ; } try
Distance : 16

13
Tree	{ return reportMatcher () ; } fail
Code	{ return reportMatcher () ; } fail
Distance : 16

14
Tree	{ return reportMatcher () ; } paint
Code	{ return reportMatcher () ; } paint
Distance : 16

15
Tree	{ return reportMatcher () ; } join
Code	{ return reportMatcher () ; } join
Distance : 16

16
Tree	{ return reportMatcher () ; } str
Code	{ return reportMatcher () ; } str
Distance : 16

17
Tree	{ return reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher () ; } LINE_JOINER
Distance : 16

18
Tree	{ return reportMatcher () ; } testSame
Code	{ return reportMatcher () ; } testSame
Distance : 16

19
Tree	{ return reportMatcher () ; } x
Code	{ return reportMatcher () ; } x
Distance : 16

20
Tree	{ return reportMatcher () ; } ArrayList
Code	{ return reportMatcher () ; } ArrayList
Distance : 16

21
Tree	{ return reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher () ; } fireChangeEvent
Distance : 16

22
Tree	{ return reportMatcher () ; } super
Code	{ return reportMatcher () ; } super
Distance : 16

23
Tree	{ return reportMatcher () ; } parent
Code	{ return reportMatcher () ; } parent
Distance : 16

24
Tree	{ return reportMatcher () ; } IllegalArgumentException
Code	{ return reportMatcher () ; } IllegalArgumentException
Distance : 16

25
Tree	{ return reportMatcher () ; } test
Code	{ return reportMatcher () ; } test
Distance : 16

26
Tree	{ return reportMatcher () ; } int
Code	{ return reportMatcher () ; } int
Distance : 16

27
Tree	{ return reportMatcher () ; } invocation
Code	{ return reportMatcher () ; } invocation
Distance : 16

28
Tree	{ return reportMatcher () ; } reportCodeChange
Code	{ return reportMatcher () ; } reportCodeChange
Distance : 16

29
Tree	{ return reportMatcher () ; } expected
Code	{ return reportMatcher () ; } expected
Distance : 16

30
Tree	{ return reportMatcher () ; } :
Code	{ return reportMatcher () ; } :
Distance : 16

31
Tree	{ return reportMatcher () ; } result
Code	{ return reportMatcher () ; } result
Distance : 16

32
Tree	{ return reportMatcher () ; } serialised
Code	{ return reportMatcher () ; } serialised
Distance : 16

33
Tree	{ return reportMatcher () ; } getInstance
Code	{ return reportMatcher () ; } getInstance
Distance : 16

34
Tree	{ return reportMatcher () ; } *
Code	{ return reportMatcher () ; } *
Distance : 16

35
Tree	{ return reportMatcher () ; } type
Code	{ return reportMatcher () ; } type
Distance : 16

36
Tree	{ return reportMatcher () ; } false
Code	{ return reportMatcher () ; } false
Distance : 16

37
Tree	{ return reportMatcher () ; } double
Code	{ return reportMatcher () ; } double
Distance : 16

38
Tree	{ return reportMatcher () ; } FastMath
Code	{ return reportMatcher () ; } FastMath
Distance : 16

39
Tree	{ return reportMatcher () ; } checkState
Code	{ return reportMatcher () ; } checkState
Distance : 16

40
Tree	{ return reportMatcher () ; } nullNotPermitted
Code	{ return reportMatcher () ; } nullNotPermitted
Distance : 16

41
Tree	{ return reportMatcher () ; } []
Code	{ return reportMatcher () ; } []
Distance : 16

42
Tree	{ return reportMatcher () ; } void
Code	{ return reportMatcher () ; } void
Distance : 16

43
Tree	{ return reportMatcher () ; } ==
Code	{ return reportMatcher () ; } ==
Distance : 16

44
Tree	{ return reportMatcher () ; } assertEquals
Code	{ return reportMatcher () ; } assertEquals
Distance : 16

45
Tree	{ return reportMatcher () ; } !
Code	{ return reportMatcher () ; } !
Distance : 16

46
Tree	{ return reportMatcher () ; } @
Code	{ return reportMatcher () ; } @
Distance : 16

47
Tree	{ return reportMatcher () ; } assertThat
Code	{ return reportMatcher () ; } assertThat
Distance : 16

48
Tree	{ return reportMatcher () ; } Override
Code	{ return reportMatcher () ; } Override
Distance : 16

49
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 15

50
Tree	{ return reportMatcher () ; } [
Code	{ return reportMatcher () ; } [
Distance : 16

51
Tree	{ return reportMatcher () ; } this
Code	{ return reportMatcher () ; } this
Distance : 16

52
Tree	{ return reportMatcher () ; } &&
Code	{ return reportMatcher () ; } &&
Distance : 16

53
Tree	{ return reportMatcher () ; } T
Code	{ return reportMatcher () ; } T
Distance : 16

54
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 16

55
Tree	{ return reportMatcher () ; } -
Code	{ return reportMatcher () ; } -
Distance : 16

56
Tree	{ return reportMatcher () ; } class
Code	{ return reportMatcher () ; } class
Distance : 16

57
Tree	{ return reportMatcher () ; } Object
Code	{ return reportMatcher () ; } Object
Distance : 16

58
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 16

59
Tree	{ return reportMatcher () ; } MathRuntimeException
Code	{ return reportMatcher () ; } MathRuntimeException
Distance : 16

60
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 16

61
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 16

62
Tree	{ return reportMatcher () ; } t
Code	{ return reportMatcher () ; } t
Distance : 16

63
Tree	{ return reportMatcher () ; } field
Code	{ return reportMatcher () ; } field
Distance : 16

64
Tree	{ return reportMatcher () ; } value
Code	{ return reportMatcher () ; } value
Distance : 16

65
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 16

66
Tree	{ return reportMatcher () ; } throw
Code	{ return reportMatcher () ; } throw
Distance : 16

67
Tree	{ return reportMatcher () ; } catch
Code	{ return reportMatcher () ; } catch
Distance : 16

68
Tree	{ return reportMatcher () ; } +
Code	{ return reportMatcher () ; } +
Distance : 16

69
Tree	{ return reportMatcher () ; } null
Code	{ return reportMatcher () ; } null
Distance : 16

70
Tree	{ return reportMatcher () ; } String
Code	{ return reportMatcher () ; } String
Distance : 16

71
Tree	{ return reportMatcher () ; } compiler
Code	{ return reportMatcher () ; } compiler
Distance : 16

72
Tree	{ return reportMatcher () ; } ]
Code	{ return reportMatcher () ; } ]
Distance : 16

73
Tree	{ return returnFor () ; }
Code	{ return returnFor () ; }
Distance : 15

74
Tree	{ return reportMatcher () ; } NUMBER_CONSTANT
Code	{ return reportMatcher () ; } NUMBER_CONSTANT
Distance : 16

75
Tree	{ return reportMatcher () ; } true
Code	{ return reportMatcher () ; } true
Distance : 16

76
Tree	{ return reportMatcher () ; } return
Code	{ return reportMatcher () ; } return
Distance : 16

77
Tree	{ return reportMatcher () ; } <
Code	{ return reportMatcher () ; } <
Distance : 16

78
Tree	{ return reportMatcher () ; } e
Code	{ return reportMatcher () ; } e
Distance : 16

79
Tree	{ return reportMatcher () ; } n
Code	{ return reportMatcher () ; } n
Distance : 16

80
Tree	{ return reportMatcher () ; } {
Code	{ return reportMatcher () ; } {
Distance : 16

81
Tree	{ return reportMatcher () ; } ()
Code	{ return reportMatcher () ; } ()
Distance : 16

82
Tree	{ return reportMatcher () ; } ;
Code	{ return reportMatcher () ; } ;
Distance : 16

83
Tree	{ return reportMatcher () ; } )
Code	{ return reportMatcher () ; } )
Distance : 16

84
Tree	{ return reportMatcher () ; } {
Code	{ return reportMatcher () ; } {
Distance : 16

85
Tree	{ return reportMatcher () ; } if
Code	{ return reportMatcher () ; } if
Distance : 16

86
Tree	{ return reportMatcher () ; } <blank>
Code	{ return reportMatcher () ; } <blank>
Distance : 16

87
Tree	{ return reportMatcher () ; } (
Code	{ return reportMatcher () ; } (
Distance : 16

88
Tree	{ return reportMatcher () ; } =
Code	{ return reportMatcher () ; } =
Distance : 16

89
Tree	{ return reportMatcher () ; } }
Code	{ return reportMatcher () ; } }
Distance : 16

90
Tree	{ return reportMatcher () ; } .
Code	{ return reportMatcher () ; } .
Distance : 16

91
Tree	{ return reportMatcher () ; } ,
Code	{ return reportMatcher () ; } ,
Distance : 16

92
Tree	{ return reportMatcher () ; } STRING_CONSTANT
Code	{ return reportMatcher () ; } STRING_CONSTANT
Distance : 16

93
Tree	{ return reportMatcher () ; } new
Code	{ return reportMatcher () ; } new
Distance : 16

94
Tree	{ return reportMatcher () ; } >
Code	{ return reportMatcher () ; } >
Distance : 16

95
Tree	{ return reportMatcher () ; } public
Code	{ return reportMatcher () ; } public
Distance : 16

96
Tree	{ return reportMatcher () ; } mode
Code	{ return reportMatcher () ; } mode
Distance : 16

97
Tree	{ return reportMatcher () ; } <s>
Code	{ return reportMatcher () ; } <s>
Distance : 16

98
Tree	{ return reportMatcher () ; } final
Code	{ return reportMatcher () ; } final
Distance : 16

99
Tree	{ return reportMatcher () ; } mock
Code	{ return reportMatcher () ; } mock
Distance : 16

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 15

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 15

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 15

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 15

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 15

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 15

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 15

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 15

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 15

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 15

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 15

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 15

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 15

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 15

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 15

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 15

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 15

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 15

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 15

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 15

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 15

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 15

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 15

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 15

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 15

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 15

26
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

27
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 14

29
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 14

30
Tree	{ returnNull ( Any.ANY ) ; return return; ; }
Code	{ returnNull ( Any.ANY ) ; return return; ; }
Distance : 15

31
Tree	{ returnNull ( Any.ANY ) ; return super(); ; }
Code	{ returnNull ( Any.ANY ) ; return super(); ; }
Distance : 15

32
Tree	{ returnNull ( Any.ANY ) ; return continue; ; }
Code	{ returnNull ( Any.ANY ) ; return continue; ; }
Distance : 15

33
Tree	{ returnNull ( Any.ANY ) ; return break; ; }
Code	{ returnNull ( Any.ANY ) ; return break; ; }
Distance : 15

34
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 14

35
Tree	{ returnNull ( Any.ANY ) ; return default: ; }
Code	{ returnNull ( Any.ANY ) ; return default: ; }
Distance : 15

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 15

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 15

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 15

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 15

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 15

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 15

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 15

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 15

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 15

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 15

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 15

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 15

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 15

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 15

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 15

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 15

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 15

54
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 15

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 15

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 15

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 15

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 15

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 15

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 15

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 15

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 15

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 15

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 15

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 15

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 15

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 15

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 15

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 15

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 15

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 15

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 15

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 15

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 15

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 15

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 15

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 15

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 15

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 15

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 15

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 15

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 15

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 15

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 15

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 15

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 15

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 15

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 15

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 15

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 15

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 15

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 15

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 15

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 15

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 15

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 15

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 15

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 15

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 15

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) ; return continue; ; }
Code	{ returnZero ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnZero ( Any.ANY ) ; return default: ; }
Code	{ returnZero ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) ; return continue; ; }
Code	{ returnZero ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnZero ( Any.ANY ) ; return default: ; }
Code	{ returnZero ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) ; return continue; ; }
Code	{ returnZero ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnZero ( Any.ANY ) ; return default: ; }
Code	{ returnZero ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) ; return continue; ; }
Code	{ returnZero ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnZero ( Any.ANY ) ; return default: ; }
Code	{ returnZero ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) ; return continue; ; }
Code	{ returnZero ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnZero ( Any.ANY ) ; return default: ; }
Code	{ returnZero ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ returnChar ( Any.ANY ) ; return null ; }
Code	{ returnChar ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnChar ( Any.ANY ) ; return return; ; }
Code	{ returnChar ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnChar ( Any.ANY ) ; return super(); ; }
Code	{ returnChar ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnChar ( Any.ANY ) ; return break; ; }
Code	{ returnChar ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnChar ( Any.ANY ) ; return continue; ; }
Code	{ returnChar ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnChar ( Any.ANY ) ; return default: ; }
Code	{ returnChar ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) ; return continue; ; }
Code	{ returnZero ( Any.ANY ) ; return continue; ; }
Distance : 12

35
Tree	{ returnZero ( Any.ANY ) ; return default: ; }
Code	{ returnZero ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

29
Tree	{ returnFalse ( Any.ANY ) ; return null ; }
Code	{ returnFalse ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

31
Tree	{ returnFalse ( Any.ANY ) ; return return; ; }
Code	{ returnFalse ( Any.ANY ) ; return return; ; }
Distance : 12

32
Tree	{ returnFalse ( Any.ANY ) ; return super(); ; }
Code	{ returnFalse ( Any.ANY ) ; return super(); ; }
Distance : 12

33
Tree	{ returnFalse ( Any.ANY ) ; return continue; ; }
Code	{ returnFalse ( Any.ANY ) ; return continue; ; }
Distance : 12

34
Tree	{ returnFalse ( Any.ANY ) ; return break; ; }
Code	{ returnFalse ( Any.ANY ) ; return break; ; }
Distance : 12

35
Tree	{ returnFalse ( Any.ANY ) ; return default: ; }
Code	{ returnFalse ( Any.ANY ) ; return default: ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 12

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 12

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } test
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } test
Distance : 6

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } []
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } []
Distance : 6

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } nullNotPermitted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } nullNotPermitted
Distance : 6

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } f
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } f
Distance : 6

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ParamChecks
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ParamChecks
Distance : 6

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } array
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } array
Distance : 6

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ]
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ]
Distance : 6

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } MathRuntimeException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } MathRuntimeException
Distance : 6

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Object
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Object
Distance : 6

9
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } createIllegalArgumentException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } createIllegalArgumentException
Distance : 6

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } parent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } parent
Distance : 6

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } testSame
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } testSame
Distance : 6

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } x
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } x
Distance : 6

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Override
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Override
Distance : 6

14
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } mock
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } mock
Distance : 6

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } class
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } class
Distance : 6

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } {}
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } {}
Distance : 6

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } @
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } @
Distance : 6

18
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } [
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } [
Distance : 6

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Preconditions
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Preconditions
Distance : 6

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } -
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } -
Distance : 6

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } mode
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } mode
Distance : 6

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } !
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } !
Distance : 6

23
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } true
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } true
Distance : 6

24
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } assertEquals
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } assertEquals
Distance : 6

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } super
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } super
Distance : 6

26
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 6

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Distance : 6

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . e ) ; }
Distance : 6

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . e ) ; }
Distance : 5

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 6

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , this . error ) ; }
Distance : 7

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 7

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error , this . error ) ; }
Distance : 7

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , this . e ) ; }
Distance : 6

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , this . e ) ; }
Distance : 7

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error , this . e ) ; }
Distance : 6

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error , this . error ) ; }
Distance : 8

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error , this . e ) ; }
Distance : 7

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <>
Distance : 6

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } &&
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } &&
Distance : 6

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } T
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } T
Distance : 6

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } i
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } i
Distance : 6

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } value
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } value
Distance : 6

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } checkState
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } checkState
Distance : 6

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } double
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } double
Distance : 6

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } !=
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } !=
Distance : 6

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } m
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } m
Distance : 6

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } :
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } :
Distance : 6

51
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } .
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } .
Distance : 6

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ,
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ,
Distance : 6

53
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } false
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } false
Distance : 6

54
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } int
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } int
Distance : 6

55
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } public
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } public
Distance : 6

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 5

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } )
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } )
Distance : 6

58
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } result
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } result
Distance : 6

59
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } List
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } List
Distance : 6

60
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Args
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Args
Distance : 6

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } fail
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } fail
Distance : 6

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } try
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } try
Distance : 6

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } type
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } type
Distance : 6

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } *
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } *
Distance : 6

65
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <
Distance : 6

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ;
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ;
Distance : 6

67
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } this
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } this
Distance : 6

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } error
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } error
Distance : 6

69
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <s>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <s>
Distance : 6

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } (
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } (
Distance : 6

71
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } =
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } =
Distance : 6

72
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } }
Distance : 6

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ()
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ()
Distance : 6

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } {
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } {
Distance : 6

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } new
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } new
Distance : 6

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } STRING_CONSTANT
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } STRING_CONSTANT
Distance : 6

77
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } NUMBER_CONSTANT
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } NUMBER_CONSTANT
Distance : 6

78
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } return
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } return
Distance : 6

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } +
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } +
Distance : 6

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } null
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } null
Distance : 6

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } >
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } >
Distance : 6

82
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } final
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } final
Distance : 6

83
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <blank>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } <blank>
Distance : 6

84
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } paint
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } paint
Distance : 6

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } join
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } join
Distance : 6

86
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } serialised
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } serialised
Distance : 6

87
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } getInstance
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } getInstance
Distance : 6

88
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } fireChangeEvent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } fireChangeEvent
Distance : 6

89
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ArrayList
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ArrayList
Distance : 6

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ==
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } ==
Distance : 6

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } void
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } void
Distance : 6

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } catch
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } catch
Distance : 6

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } throw
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } throw
Distance : 6

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } n
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } n
Distance : 6

95
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } e
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } e
Distance : 6

96
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } String
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } String
Distance : 6

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } compiler
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } compiler
Distance : 6

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } if
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } if
Distance : 6

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } boolean
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } boolean
Distance : 6

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 9

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 9

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

8
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 8

9
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 9

11
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

13
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

15
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

18
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

19
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

20
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

21
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

22
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

24
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

25
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

27
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

29
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

30
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

31
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

32
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

33
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

34
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

35
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

36
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

37
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

38
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

39
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

40
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

41
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

42
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

43
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

44
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

45
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

46
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

47
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

48
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

49
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

50
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

51
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

52
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

53
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

54
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

55
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

56
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

57
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

58
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

59
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

60
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

61
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

62
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

63
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

64
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

65
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

66
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

67
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

68
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

69
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

70
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

71
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

72
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 12

73
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

74
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

75
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

76
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

77
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

78
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

79
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

80
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

81
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

82
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

83
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

84
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

85
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

86
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

87
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

88
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

89
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

90
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

91
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

92
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

93
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

94
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

95
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 11

96
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

97
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

98
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 12

99
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

3
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

4
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

6
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

8
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

10
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

11
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

17
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

19
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

20
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

22
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

23
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

24
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

26
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

28
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

29
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

30
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

31
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

32
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

34
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

35
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

36
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

37
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

39
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

40
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Distance : 17

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Distance : 17

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

44
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

47
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

48
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

50
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

51
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

52
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

53
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 17

54
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

55
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 17

56
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

57
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

58
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

59
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Distance : 17

60
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

61
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Distance : 17

62
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

63
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

64
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

65
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

66
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

67
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

68
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

69
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

70
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

71
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

72
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . safelyGetMockName () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . safelyGetMockName () , STRING_CONSTANT )
Distance : 17

73
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . safelyGetMockName () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . safelyGetMockName () , STRING_CONSTANT )
Distance : 17

74
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

75
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

76
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

77
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

78
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

79
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

80
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Distance : 17

81
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

82
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

83
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

84
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

85
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

86
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

87
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . join () , STRING_CONSTANT )
Distance : 16

88
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

89
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . join () , STRING_CONSTANT )
Distance : 16

90
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . join () , STRING_CONSTANT )
Distance : 16

91
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

92
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . join () , STRING_CONSTANT )
Distance : 18

93
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . join () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . join () , STRING_CONSTANT )
Distance : 18

94
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

95
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

96
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

97
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

98
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

99
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Distance : 3

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

27
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

29
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

31
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

32
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

34
Tree	return iZone . convertLocalToUTC ( iZone , true ) ;
Code	return iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

35
Tree	return iZone . convertLocalToUTC ( instant , true ) ;
Code	return iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

36
Tree	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

37
Tree	return instant . convertLocalToUTC ( localInstant , true ) ;
Code	return instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

38
Tree	return localInstant . convertLocalToUTC ( iZone , true ) ;
Code	return localInstant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( iZone , true ) ;
Code	return instant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

40
Tree	return localInstant . convertLocalToUTC ( instant , true ) ;
Code	return localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

41
Tree	return instant . convertLocalToUTC ( instant , true ) ;
Code	return instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

53
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

54
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Distance : 3

62
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

64
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Distance : 3

65
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

66
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Distance : 3

68
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

70
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Distance : 3

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Distance : 3

72
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Distance : 3

73
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Distance : 3

75
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Distance : 3

76
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Distance : 3

77
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Distance : 3

78
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Distance : 3

79
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Distance : 3

80
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Distance : 3

81
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Distance : 3

82
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

83
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

84
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

85
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

86
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

87
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

88
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

89
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

91
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

92
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

93
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

94
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

95
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

96
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

97
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Distance : 3

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

27
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

29
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

31
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

32
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

34
Tree	return iZone . convertLocalToUTC ( iZone , true ) ;
Code	return iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

35
Tree	return iZone . convertLocalToUTC ( instant , true ) ;
Code	return iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

36
Tree	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

37
Tree	return instant . convertLocalToUTC ( localInstant , true ) ;
Code	return instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

38
Tree	return localInstant . convertLocalToUTC ( iZone , true ) ;
Code	return localInstant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( iZone , true ) ;
Code	return instant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

40
Tree	return localInstant . convertLocalToUTC ( instant , true ) ;
Code	return localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

41
Tree	return instant . convertLocalToUTC ( instant , true ) ;
Code	return instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

53
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

54
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Distance : 3

62
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

64
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Distance : 3

65
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

66
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Distance : 3

68
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

70
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Distance : 3

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Distance : 3

72
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Distance : 3

73
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Distance : 3

75
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Distance : 3

76
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Distance : 3

77
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Distance : 3

78
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Distance : 3

79
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Distance : 3

80
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Distance : 3

81
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Distance : 3

82
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

83
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

84
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

85
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

86
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

87
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

88
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

89
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

91
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

92
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

93
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

94
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

95
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

96
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

97
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Distance : 3

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

27
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

29
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

31
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

32
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

34
Tree	return iZone . convertLocalToUTC ( iZone , true ) ;
Code	return iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

35
Tree	return iZone . convertLocalToUTC ( instant , true ) ;
Code	return iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

36
Tree	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

37
Tree	return instant . convertLocalToUTC ( localInstant , true ) ;
Code	return instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

38
Tree	return localInstant . convertLocalToUTC ( iZone , true ) ;
Code	return localInstant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( iZone , true ) ;
Code	return instant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

40
Tree	return localInstant . convertLocalToUTC ( instant , true ) ;
Code	return localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

41
Tree	return instant . convertLocalToUTC ( instant , true ) ;
Code	return instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

53
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

54
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Distance : 3

62
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

64
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Distance : 3

65
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

66
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Distance : 3

68
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

70
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Distance : 3

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Distance : 3

72
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Distance : 3

73
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Distance : 3

75
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Distance : 3

76
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Distance : 3

77
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Distance : 3

78
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Distance : 3

79
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Distance : 3

80
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Distance : 3

81
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Distance : 3

82
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

83
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

84
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

85
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

86
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

87
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

88
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

89
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

91
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

92
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

93
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

94
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

95
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

96
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

97
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

1
Tree	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

2
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

4
Tree	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

5
Tree	long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

6
Tree	long result = iZone . convertLocalToUTC ( instant , false ) ;
Code	long result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

7
Tree	long result = result . convertLocalToUTC ( localInstant , false ) ;
Code	long result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

8
Tree	int result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

9
Tree	long result = iZone . convertLocalToUTC ( result , false ) ;
Code	long result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 3

10
Tree	float result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	float result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

11
Tree	byte result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

12
Tree	void result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	void result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

13
Tree	char result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	char result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

14
Tree	long instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

15
Tree	short result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	short result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

16
Tree	boolean result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

17
Tree	long result = instant . convertLocalToUTC ( iZone , false ) ;
Code	long result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

18
Tree	double result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	double result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

19
Tree	long result = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	long result = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

20
Tree	boolean result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

21
Tree	double result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	double result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

22
Tree	boolean result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

23
Tree	long result = result . convertLocalToUTC ( iZone , false ) ;
Code	long result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 4

24
Tree	double result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	double result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

25
Tree	int result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	int result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

26
Tree	boolean result = iZone . convertLocalToUTC ( instant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

27
Tree	long result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

28
Tree	float result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	float result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

29
Tree	byte result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	byte result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	long result = instant . convertLocalToUTC ( instant , false ) ;
Code	long result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

31
Tree	boolean result = result . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

32
Tree	double result = iZone . convertLocalToUTC ( instant , false ) ;
Code	double result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	boolean result = iZone . convertLocalToUTC ( result , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

34
Tree	void result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	void result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

35
Tree	double result = result . convertLocalToUTC ( localInstant , false ) ;
Code	double result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

36
Tree	long result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	long result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

37
Tree	long result = instant . convertLocalToUTC ( result , false ) ;
Code	long result = instant . convertLocalToUTC ( result , false ) ;
Distance : 4

38
Tree	int result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	int result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

39
Tree	float result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	float result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

40
Tree	double result = iZone . convertLocalToUTC ( result , false ) ;
Code	double result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

41
Tree	byte result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

42
Tree	long result = localInstant . convertLocalToUTC ( result , false ) ;
Code	long result = localInstant . convertLocalToUTC ( result , false ) ;
Distance : 4

43
Tree	int result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	int result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

44
Tree	float result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	float result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

45
Tree	byte result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

46
Tree	char result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	char result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

47
Tree	void result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	void result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

48
Tree	long result = result . convertLocalToUTC ( instant , false ) ;
Code	long result = result . convertLocalToUTC ( instant , false ) ;
Distance : 4

49
Tree	int result = iZone . convertLocalToUTC ( instant , false ) ;
Code	int result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

50
Tree	long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

51
Tree	void result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	void result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

52
Tree	float result = iZone . convertLocalToUTC ( instant , false ) ;
Code	float result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

53
Tree	byte result = iZone . convertLocalToUTC ( instant , false ) ;
Code	byte result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

54
Tree	long result = result . convertLocalToUTC ( result , false ) ;
Code	long result = result . convertLocalToUTC ( result , false ) ;
Distance : 4

55
Tree	int result = result . convertLocalToUTC ( localInstant , false ) ;
Code	int result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

56
Tree	long instant = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long instant = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

57
Tree	short result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	short result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

58
Tree	float result = result . convertLocalToUTC ( localInstant , false ) ;
Code	float result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

59
Tree	char result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	char result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

60
Tree	int result = iZone . convertLocalToUTC ( result , false ) ;
Code	int result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

61
Tree	byte result = result . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

62
Tree	float result = iZone . convertLocalToUTC ( result , false ) ;
Code	float result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

63
Tree	void result = iZone . convertLocalToUTC ( instant , false ) ;
Code	void result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

64
Tree	byte result = iZone . convertLocalToUTC ( result , false ) ;
Code	byte result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

65
Tree	long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

66
Tree	boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

67
Tree	char result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	char result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

68
Tree	void result = result . convertLocalToUTC ( localInstant , false ) ;
Code	void result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

69
Tree	short result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	short result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

70
Tree	long instant = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

71
Tree	boolean result = instant . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

72
Tree	void result = iZone . convertLocalToUTC ( result , false ) ;
Code	void result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

73
Tree	double instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

74
Tree	char result = iZone . convertLocalToUTC ( instant , false ) ;
Code	char result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

75
Tree	short result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	short result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

76
Tree	long instant = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

77
Tree	double result = instant . convertLocalToUTC ( iZone , false ) ;
Code	double result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

78
Tree	boolean result = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

79
Tree	char result = result . convertLocalToUTC ( localInstant , false ) ;
Code	char result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

80
Tree	double result = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	double result = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

81
Tree	char result = iZone . convertLocalToUTC ( result , false ) ;
Code	char result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

82
Tree	long instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	long instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

83
Tree	short result = iZone . convertLocalToUTC ( instant , false ) ;
Code	short result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

84
Tree	long result = iZone . convertLocalToUTC ( iZone , true ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

85
Tree	long instant = result . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

86
Tree	short result = result . convertLocalToUTC ( localInstant , false ) ;
Code	short result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

87
Tree	boolean result = result . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 5

88
Tree	long instant = iZone . convertLocalToUTC ( result , false ) ;
Code	long instant = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

89
Tree	short result = iZone . convertLocalToUTC ( result , false ) ;
Code	short result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

90
Tree	int instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

91
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

92
Tree	float instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	float instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

93
Tree	double result = result . convertLocalToUTC ( iZone , false ) ;
Code	double result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 5

94
Tree	byte instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	byte instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

95
Tree	boolean result = instant . convertLocalToUTC ( instant , false ) ;
Code	boolean result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

96
Tree	int result = instant . convertLocalToUTC ( iZone , false ) ;
Code	int result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

97
Tree	long result = instant . convertLocalToUTC ( localInstant , true ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

98
Tree	float result = instant . convertLocalToUTC ( iZone , false ) ;
Code	float result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

99
Tree	byte result = instant . convertLocalToUTC ( iZone , false ) ;
Code	byte result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Distance : 3

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

27
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

29
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

31
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

32
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

34
Tree	return iZone . convertLocalToUTC ( iZone , true ) ;
Code	return iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

35
Tree	return iZone . convertLocalToUTC ( instant , true ) ;
Code	return iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

36
Tree	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

37
Tree	return instant . convertLocalToUTC ( localInstant , true ) ;
Code	return instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

38
Tree	return localInstant . convertLocalToUTC ( iZone , true ) ;
Code	return localInstant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( iZone , true ) ;
Code	return instant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

40
Tree	return localInstant . convertLocalToUTC ( instant , true ) ;
Code	return localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

41
Tree	return instant . convertLocalToUTC ( instant , true ) ;
Code	return instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

53
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

54
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Distance : 3

62
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

64
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Distance : 3

65
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

66
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Distance : 3

68
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

70
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Distance : 3

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Distance : 3

72
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Distance : 3

73
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Distance : 3

75
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Distance : 3

76
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Distance : 3

77
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Distance : 3

78
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Distance : 3

79
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Distance : 3

80
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Distance : 3

81
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Distance : 3

82
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

83
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

84
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

85
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

86
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

87
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

88
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

89
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

91
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

92
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

93
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

94
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

95
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

96
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

97
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Distance : 3

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

27
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

29
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

31
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

32
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

34
Tree	return iZone . convertLocalToUTC ( iZone , true ) ;
Code	return iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

35
Tree	return iZone . convertLocalToUTC ( instant , true ) ;
Code	return iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

36
Tree	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

37
Tree	return instant . convertLocalToUTC ( localInstant , true ) ;
Code	return instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

38
Tree	return localInstant . convertLocalToUTC ( iZone , true ) ;
Code	return localInstant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( iZone , true ) ;
Code	return instant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

40
Tree	return localInstant . convertLocalToUTC ( instant , true ) ;
Code	return localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

41
Tree	return instant . convertLocalToUTC ( instant , true ) ;
Code	return instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

53
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

54
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Distance : 3

62
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

64
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Distance : 3

65
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

66
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Distance : 3

68
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

70
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Distance : 3

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Distance : 3

72
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Distance : 3

73
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Distance : 3

75
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Distance : 3

76
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Distance : 3

77
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Distance : 3

78
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Distance : 3

79
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Distance : 3

80
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Distance : 3

81
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Distance : 3

82
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

83
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

84
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

85
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

86
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

87
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

88
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

89
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

91
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

92
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

93
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

94
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

95
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

96
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

97
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; assertEquals
Distance : 3

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; -
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; &&
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; T
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Preconditions
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; createIllegalArgumentException
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; parent
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

27
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

29
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

30
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

31
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

32
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

33
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

34
Tree	return iZone . convertLocalToUTC ( iZone , true ) ;
Code	return iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

35
Tree	return iZone . convertLocalToUTC ( instant , true ) ;
Code	return iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

36
Tree	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

37
Tree	return instant . convertLocalToUTC ( localInstant , true ) ;
Code	return instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

38
Tree	return localInstant . convertLocalToUTC ( iZone , true ) ;
Code	return localInstant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( iZone , true ) ;
Code	return instant . convertLocalToUTC ( iZone , true ) ;
Distance : 5

40
Tree	return localInstant . convertLocalToUTC ( instant , true ) ;
Code	return localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

41
Tree	return instant . convertLocalToUTC ( instant , true ) ;
Code	return instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

53
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

54
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; if
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; double
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; checkState
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {
Distance : 3

62
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ()
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

64
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; )
Distance : 3

65
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ;
Distance : 3

66
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <s>
Distance : 3

68
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

70
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; >
Distance : 3

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; public
Distance : 3

72
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; test
Distance : 3

73
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; new
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; @
Distance : 3

75
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ,
Distance : 3

76
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; .
Distance : 3

77
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; }
Distance : 3

78
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; =
Distance : 3

79
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; (
Distance : 3

80
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; STRING_CONSTANT
Distance : 3

81
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <blank>
Distance : 3

82
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

83
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

84
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

85
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

86
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

87
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

88
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

89
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

91
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

92
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

93
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

94
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

95
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

96
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

97
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 8

1
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 8

2
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Distance : 8

3
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Distance : 8

4
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Distance : 8

5
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInstance () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInstance () ) ;
Distance : 8

6
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . of () ) ;
Distance : 7

7
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator () ) ;
Distance : 8

8
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getBytes () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getBytes () ) ;
Distance : 8

9
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners () ) ;
Distance : 7

10
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 7

11
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 7

12
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getSourceMapURL () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getSourceMapURL () ) ;
Distance : 8

13
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . latest () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . latest () ) ;
Distance : 8

14
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNameNode () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNameNode () ) ;
Distance : 8

15
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getChangedScopeNodesForPass () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getChangedScopeNodesForPass () ) ;
Distance : 8

16
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . noMoreInteractions () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . noMoreInteractions () ) ;
Distance : 8

17
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . safeMultiply () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . safeMultiply () ) ;
Distance : 8

18
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createLong () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createLong () ) ;
Distance : 8

19
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . voidMethodStubbable () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . voidMethodStubbable () ) ;
Distance : 8

20
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yearOfEra () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yearOfEra () ) ;
Distance : 8

21
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNumElements () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNumElements () ) ;
Distance : 8

22
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yy () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yy () ) ;
Distance : 8

23
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createBigInteger () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createBigInteger () ) ;
Distance : 8

24
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRunCount () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRunCount () ) ;
Distance : 8

25
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . delimMatcher () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . delimMatcher () ) ;
Distance : 8

26
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . dateParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . dateParser () ) ;
Distance : 8

27
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDaysInYearMax () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDaysInYearMax () ) ;
Distance : 8

28
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMatchers () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMatchers () ) ;
Distance : 8

29
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . timeParser () ) ;
Distance : 7

30
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . copySelf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . copySelf () ) ;
Distance : 8

31
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . newBuilder () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . newBuilder () ) ;
Distance : 8

32
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . len () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . len () ) ;
Distance : 8

33
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getChronology () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getChronology () ) ;
Distance : 8

34
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . makeUntyped () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . makeUntyped () ) ;
Distance : 8

35
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getParser () ) ;
Distance : 7

36
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isStarted () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isStarted () ) ;
Distance : 8

37
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isSynthetic () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isSynthetic () ) ;
Distance : 8

38
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Distance : 7

39
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . parseMillis () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . parseMillis () ) ;
Distance : 8

40
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getRightElement () ) ;
Distance : 7

41
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVertices () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVertices () ) ;
Distance : 8

42
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getWrappedValue () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getWrappedValue () ) ;
Distance : 8

43
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRoughMillisPerMonth () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRoughMillisPerMonth () ) ;
Distance : 8

44
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getInstance () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getInstance () ) ;
Distance : 7

45
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readPaint () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readPaint () ) ;
Distance : 8

46
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFontMetrics () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFontMetrics () ) ;
Distance : 8

47
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnFor () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnFor () ) ;
Distance : 8

48
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Distance : 7

49
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getScopeCreator () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getScopeCreator () ) ;
Distance : 7

50
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getPrinter () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getPrinter () ) ;
Distance : 8

51
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getTypeToMock () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getTypeToMock () ) ;
Distance : 8

52
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVisibleSeriesArray () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVisibleSeriesArray () ) ;
Distance : 8

53
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . iso () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . iso () ) ;
Distance : 8

54
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getBytes () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getBytes () ) ;
Distance : 7

55
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Distance : 7

56
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . mockCandidates () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . mockCandidates () ) ;
Distance : 8

57
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . of () ) ;
Distance : 6

58
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getInstance () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getInstance () ) ;
Distance : 7

59
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDefaultNumberFormat () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDefaultNumberFormat () ) ;
Distance : 8

60
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLastInvocation () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLastInvocation () ) ;
Distance : 8

61
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator () ) ;
Distance : 7

62
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . toCharArray () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . toCharArray () ) ;
Distance : 8

63
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . DEFAULT_COLUMN_SEPARATOR () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . DEFAULT_COLUMN_SEPARATOR () ) ;
Distance : 8

64
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readStroke () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readStroke () ) ;
Distance : 8

65
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . pullVerificationMode () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . pullVerificationMode () ) ;
Distance : 8

66
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLocalizedMessage () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLocalizedMessage () ) ;
Distance : 8

67
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . invocationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . invocationListeners () ) ;
Distance : 8

68
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFunctionNames () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFunctionNames () ) ;
Distance : 8

69
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . in () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . in () ) ;
Distance : 8

70
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . valueOf () ) ;
Distance : 8

71
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . findZBounds () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . findZBounds () ) ;
Distance : 8

72
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getBytes () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getBytes () ) ;
Distance : 7

73
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners () ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners () ) ;
Distance : 6

74
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . primitiveTypeOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . primitiveTypeOf () ) ;
Distance : 8

75
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFirstUnverified () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFirstUnverified () ) ;
Distance : 8

76
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . nullToEmpty () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . nullToEmpty () ) ;
Distance : 8

77
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . typeMockabilityOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . typeMockabilityOf () ) ;
Distance : 8

78
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInvocationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInvocationListeners () ) ;
Distance : 8

79
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRawNominalType () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRawNominalType () ) ;
Distance : 8

80
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMethod () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMethod () ) ;
Distance : 8

81
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . urlText () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . urlText () ) ;
Distance : 8

82
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getSourceMapURL () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getSourceMapURL () ) ;
Distance : 7

83
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . p3 () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . p3 () ) ;
Distance : 8

84
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . latest () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . latest () ) ;
Distance : 7

85
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . lineno () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . lineno () ) ;
Distance : 8

86
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . MILLISECONDS () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . MILLISECONDS () ) ;
Distance : 8

87
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnValueFor () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnValueFor () ) ;
Distance : 8

88
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getNameNode () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getNameNode () ) ;
Distance : 7

89
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getChangedScopeNodesForPass () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getChangedScopeNodesForPass () ) ;
Distance : 7

90
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMaxArity () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMaxArity () ) ;
Distance : 8

91
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . allowEmpty () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . allowEmpty () ) ;
Distance : 8

92
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . DEFAULT_ROW_PREFIX () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . DEFAULT_ROW_PREFIX () ) ;
Distance : 8

93
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . noMoreInteractions () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . noMoreInteractions () ) ;
Distance : 7

94
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . safeMultiply () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . safeMultiply () ) ;
Distance : 7

95
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . collector () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . collector () ) ;
Distance : 8

96
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . parseInto () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . parseInto () ) ;
Distance : 8

97
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . serializeAndRecover () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . serializeAndRecover () ) ;
Distance : 8

98
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . writeReplace () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . writeReplace () ) ;
Distance : 8

99
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . weekyearOfCentury () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . weekyearOfCentury () ) ;
Distance : 8

========================================================================


